!function(t){function e(e){for(var n,o,i=e[0],a=e[1],u=0,s=[];u<i.length;u++)o=i[u],r[o]&&s.push(r[o][0]),r[o]=0;for(n in a)Object.prototype.hasOwnProperty.call(a,n)&&(t[n]=a[n]);for(c&&c(e);s.length;)s.shift()()}var n={},r={0:0};function o(e){if(n[e])return n[e].exports;var r=n[e]={i:e,l:!1,exports:{}};return t[e].call(r.exports,r,r.exports,o),r.l=!0,r.exports}o.e=function(t){var e=[],n=r[t];if(0!==n)if(n)e.push(n[2]);else{var i=new Promise(function(e,o){n=r[t]=[e,o]});e.push(n[2]=i);var a,u=document.getElementsByTagName("head")[0],c=document.createElement("script");c.charset="utf-8",c.timeout=120,o.nc&&c.setAttribute("nonce",o.nc),c.src=function(t){return o.p+""+({}[t]||t)+".js"}(t),a=function(e){c.onerror=c.onload=null,clearTimeout(s);var n=r[t];if(0!==n){if(n){var o=e&&("load"===e.type?"missing":e.type),i=e&&e.target&&e.target.src,a=new Error("Loading chunk "+t+" failed.\n("+o+": "+i+")");a.type=o,a.request=i,n[1](a)}r[t]=void 0}};var s=setTimeout(function(){a({type:"timeout",target:c})},12e4);c.onerror=c.onload=a,u.appendChild(c)}return Promise.all(e)},o.m=t,o.c=n,o.d=function(t,e,n){o.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},o.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},o.t=function(t,e){if(1&e&&(t=o(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)o.d(n,r,function(e){return t[e]}.bind(null,r));return n},o.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return o.d(e,"a",e),e},o.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},o.p="",o.oe=function(t){throw console.error(t),t};var i=window.webpackJsonp=window.webpackJsonp||[],a=i.push.bind(i);i.push=e,i=i.slice();for(var u=0;u<i.length;u++)e(i[u]);var c=a;o(o.s=181)}([function(t,e,n){"use strict";function r(t,e,n,r,o,i,a,u){var c,s="function"==typeof t?t.options:t;if(e&&(s.render=e,s.staticRenderFns=n,s._compiled=!0),r&&(s.functional=!0),i&&(s._scopeId="data-v-"+i),a?(c=function(t){(t=t||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(t=__VUE_SSR_CONTEXT__),o&&o.call(this,t),t&&t._registeredComponents&&t._registeredComponents.add(a)},s._ssrRegister=c):o&&(c=u?function(){o.call(this,this.$root.$options.shadowRoot)}:o),c)if(s.functional){s._injectStyles=c;var l=s.render;s.render=function(t,e){return c.call(e),l(t,e)}}else{var f=s.beforeCreate;s.beforeCreate=f?[].concat(f,c):[c]}return{exports:t,options:s}}n.d(e,"a",function(){return r})},function(t,e,n){"use strict";n.r(e),n.d(e,"__extends",function(){return o}),n.d(e,"__assign",function(){return i}),n.d(e,"__rest",function(){return a}),n.d(e,"__decorate",function(){return u}),n.d(e,"__param",function(){return c}),n.d(e,"__metadata",function(){return s}),n.d(e,"__awaiter",function(){return l}),n.d(e,"__generator",function(){return f}),n.d(e,"__exportStar",function(){return d}),n.d(e,"__values",function(){return p}),n.d(e,"__read",function(){return h}),n.d(e,"__spread",function(){return v}),n.d(e,"__await",function(){return b}),n.d(e,"__asyncGenerator",function(){return y}),n.d(e,"__asyncDelegator",function(){return g}),n.d(e,"__asyncValues",function(){return m}),n.d(e,"__makeTemplateObject",function(){return x}),n.d(e,"__importStar",function(){return _}),n.d(e,"__importDefault",function(){return w});
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)};function o(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}var i=function(){return(i=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)};function a(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(t);o<r.length;o++)e.indexOf(r[o])<0&&(n[r[o]]=t[r[o]])}return n}function u(t,e,n,r){var o,i=arguments.length,a=i<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,n,r);else for(var u=t.length-1;u>=0;u--)(o=t[u])&&(a=(i<3?o(a):i>3?o(e,n,a):o(e,n))||a);return i>3&&a&&Object.defineProperty(e,n,a),a}function c(t,e){return function(n,r){e(n,r,t)}}function s(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)}function l(t,e,n,r){return new(n||(n=Promise))(function(o,i){function a(t){try{c(r.next(t))}catch(t){i(t)}}function u(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){t.done?o(t.value):new n(function(e){e(t.value)}).then(a,u)}c((r=r.apply(t,e||[])).next())})}function f(t,e){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=e.call(t,a)}catch(t){i=[6,t],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}}function d(t,e){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}function p(t){var e="function"==typeof Symbol&&t[Symbol.iterator],n=0;return e?e.call(t):{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}}}function h(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,o,i=n.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a}function v(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(h(arguments[e]));return t}function b(t){return this instanceof b?(this.v=t,this):new b(t)}function y(t,e,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,o=n.apply(t,e||[]),i=[];return r={},a("next"),a("throw"),a("return"),r[Symbol.asyncIterator]=function(){return this},r;function a(t){o[t]&&(r[t]=function(e){return new Promise(function(n,r){i.push([t,e,n,r])>1||u(t,e)})})}function u(t,e){try{!function(t){t.value instanceof b?Promise.resolve(t.value.v).then(c,s):l(i[0][2],t)}(o[t](e))}catch(t){l(i[0][3],t)}}function c(t){u("next",t)}function s(t){u("throw",t)}function l(t,e){t(e),i.shift(),i.length&&u(i[0][0],i[0][1])}}function g(t){var e,n;return e={},r("next"),r("throw",function(t){throw t}),r("return"),e[Symbol.iterator]=function(){return this},e;function r(r,o){e[r]=t[r]?function(e){return(n=!n)?{value:b(t[r](e)),done:"return"===r}:o?o(e):e}:o}}function m(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,n=t[Symbol.asyncIterator];return n?n.call(t):(t=p(t),e={},r("next"),r("throw"),r("return"),e[Symbol.asyncIterator]=function(){return this},e);function r(n){e[n]=t[n]&&function(e){return new Promise(function(r,o){(function(t,e,n,r){Promise.resolve(r).then(function(e){t({value:e,done:n})},e)})(r,o,(e=t[n](e)).done,e.value)})}}}function x(t,e){return Object.defineProperty?Object.defineProperty(t,"raw",{value:e}):t.raw=e,t}function _(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}function w(t){return t&&t.__esModule?t:{default:t}}},function(t,e,n){"use strict";n.r(e),n.d(e,"Inject",function(){return a}),n.d(e,"Provide",function(){return u}),n.d(e,"Model",function(){return c}),n.d(e,"Prop",function(){return s}),n.d(e,"Watch",function(){return l}),n.d(e,"Emit",function(){return p});var r=n(5);n.d(e,"Vue",function(){return r.default});var o=n(7),i=n.n(o);function a(t){return Object(o.createDecorator)(function(e,n){void 0===e.inject&&(e.inject={}),Array.isArray(e.inject)||(e.inject[n]=t||n)})}function u(t){return Object(o.createDecorator)(function(e,n){var r=e.provide;if("function"!=typeof r||!r.managed){var o=e.provide;(r=e.provide=function(){var t=Object.create(("function"==typeof o?o.call(this):o)||null);for(var e in r.managed)t[r.managed[e]]=this[e];return t}).managed={}}r.managed[n]=t||n})}function c(t,e){return void 0===e&&(e={}),Object(o.createDecorator)(function(n,r){(n.props||(n.props={}))[r]=e,n.model={prop:r,event:t||r}})}function s(t){return void 0===t&&(t={}),Object(o.createDecorator)(function(e,n){(e.props||(e.props={}))[n]=t})}function l(t,e){void 0===e&&(e={});var n=e.deep,r=void 0!==n&&n,i=e.immediate,a=void 0!==i&&i;return Object(o.createDecorator)(function(e,n){"object"!=typeof e.watch&&(e.watch=Object.create(null)),e.watch[t]={handler:n,deep:r,immediate:a}})}n.d(e,"Component",function(){return i.a}),n.d(e,"Mixins",function(){return o.mixins});var f=/\B([A-Z])/g,d=function(t){return t.replace(f,"-$1").toLowerCase()};function p(t){return function(e,n,r){n=d(n);var o=r.value;r.value=function(){for(var e=this,r=[],i=0;i<arguments.length;i++)r[i]=arguments[i];var a=function(o){void 0!==o&&r.unshift(o),e.$emit.apply(e,[t||n].concat(r))},u=o.apply(this,r);!function(t){return t instanceof Promise||t&&"function"==typeof t.then}(u)?a(u):u.then(function(t){a(t)})}}}},function(t,e,n){"use strict";e.__esModule=!0;var r=a(n(227)),o=a(n(239)),i="function"==typeof o.default&&"symbol"==typeof r.default?function(t){return typeof t}:function(t){return t&&"function"==typeof o.default&&t.constructor===o.default&&t!==o.default.prototype?"symbol":typeof t};function a(t){return t&&t.__esModule?t:{default:t}}e.default="function"==typeof o.default&&"symbol"===i(r.default)?function(t){return void 0===t?"undefined":i(t)}:function(t){return t&&"function"==typeof o.default&&t.constructor===o.default&&t!==o.default.prototype?"symbol":void 0===t?"undefined":i(t)}},function(t,e,n){var r=n(164),o="object"==typeof self&&self&&self.Object===Object&&self,i=r||o||Function("return this")();t.exports=i},function(t,e,n){"use strict";n.r(e),function(t,n){
/*!
 * Vue.js v2.5.17
 * (c) 2014-2018 Evan You
 * Released under the MIT License.
 */
var r=Object.freeze({});function o(t){return void 0===t||null===t}function i(t){return void 0!==t&&null!==t}function a(t){return!0===t}function u(t){return"string"==typeof t||"number"==typeof t||"symbol"==typeof t||"boolean"==typeof t}function c(t){return null!==t&&"object"==typeof t}var s=Object.prototype.toString;function l(t){return"[object Object]"===s.call(t)}function f(t){return"[object RegExp]"===s.call(t)}function d(t){var e=parseFloat(String(t));return e>=0&&Math.floor(e)===e&&isFinite(t)}function p(t){return null==t?"":"object"==typeof t?JSON.stringify(t,null,2):String(t)}function h(t){var e=parseFloat(t);return isNaN(e)?t:e}function v(t,e){for(var n=Object.create(null),r=t.split(","),o=0;o<r.length;o++)n[r[o]]=!0;return e?function(t){return n[t.toLowerCase()]}:function(t){return n[t]}}v("slot,component",!0);var b=v("key,ref,slot,slot-scope,is");function y(t,e){if(t.length){var n=t.indexOf(e);if(n>-1)return t.splice(n,1)}}var g=Object.prototype.hasOwnProperty;function m(t,e){return g.call(t,e)}function x(t){var e=Object.create(null);return function(n){return e[n]||(e[n]=t(n))}}var _=/-(\w)/g,w=x(function(t){return t.replace(_,function(t,e){return e?e.toUpperCase():""})}),k=x(function(t){return t.charAt(0).toUpperCase()+t.slice(1)}),C=/\B([A-Z])/g,O=x(function(t){return t.replace(C,"-$1").toLowerCase()});var j=Function.prototype.bind?function(t,e){return t.bind(e)}:function(t,e){function n(n){var r=arguments.length;return r?r>1?t.apply(e,arguments):t.call(e,n):t.call(e)}return n._length=t.length,n};function S(t,e){e=e||0;for(var n=t.length-e,r=new Array(n);n--;)r[n]=t[n+e];return r}function E(t,e){for(var n in e)t[n]=e[n];return t}function A(t){for(var e={},n=0;n<t.length;n++)t[n]&&E(e,t[n]);return e}function P(t,e,n){}var $=function(t,e,n){return!1},T=function(t){return t};function M(t,e){if(t===e)return!0;var n=c(t),r=c(e);if(!n||!r)return!n&&!r&&String(t)===String(e);try{var o=Array.isArray(t),i=Array.isArray(e);if(o&&i)return t.length===e.length&&t.every(function(t,n){return M(t,e[n])});if(o||i)return!1;var a=Object.keys(t),u=Object.keys(e);return a.length===u.length&&a.every(function(n){return M(t[n],e[n])})}catch(t){return!1}}function I(t,e){for(var n=0;n<t.length;n++)if(M(t[n],e))return n;return-1}function R(t){var e=!1;return function(){e||(e=!0,t.apply(this,arguments))}}var D="data-server-rendered",z=["component","directive","filter"],N=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured"],F={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:$,isReservedAttr:$,isUnknownElement:$,getTagNamespace:P,parsePlatformTagName:T,mustUseProp:$,_lifecycleHooks:N};function L(t){var e=(t+"").charCodeAt(0);return 36===e||95===e}function B(t,e,n,r){Object.defineProperty(t,e,{value:n,enumerable:!!r,writable:!0,configurable:!0})}var W=/[^\w.$]/;var V,H="__proto__"in{},q="undefined"!=typeof window,U="undefined"!=typeof WXEnvironment&&!!WXEnvironment.platform,X=U&&WXEnvironment.platform.toLowerCase(),G=q&&window.navigator.userAgent.toLowerCase(),J=G&&/msie|trident/.test(G),K=G&&G.indexOf("msie 9.0")>0,Z=G&&G.indexOf("edge/")>0,Y=(G&&G.indexOf("android"),G&&/iphone|ipad|ipod|ios/.test(G)||"ios"===X),Q=(G&&/chrome\/\d+/.test(G),{}.watch),tt=!1;if(q)try{var et={};Object.defineProperty(et,"passive",{get:function(){tt=!0}}),window.addEventListener("test-passive",null,et)}catch(t){}var nt=function(){return void 0===V&&(V=!q&&!U&&void 0!==t&&"server"===t.process.env.VUE_ENV),V},rt=q&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function ot(t){return"function"==typeof t&&/native code/.test(t.toString())}var it,at="undefined"!=typeof Symbol&&ot(Symbol)&&"undefined"!=typeof Reflect&&ot(Reflect.ownKeys);it="undefined"!=typeof Set&&ot(Set)?Set:function(){function t(){this.set=Object.create(null)}return t.prototype.has=function(t){return!0===this.set[t]},t.prototype.add=function(t){this.set[t]=!0},t.prototype.clear=function(){this.set=Object.create(null)},t}();var ut=P,ct=0,st=function(){this.id=ct++,this.subs=[]};st.prototype.addSub=function(t){this.subs.push(t)},st.prototype.removeSub=function(t){y(this.subs,t)},st.prototype.depend=function(){st.target&&st.target.addDep(this)},st.prototype.notify=function(){for(var t=this.subs.slice(),e=0,n=t.length;e<n;e++)t[e].update()},st.target=null;var lt=[];function ft(t){st.target&&lt.push(st.target),st.target=t}function dt(){st.target=lt.pop()}var pt=function(t,e,n,r,o,i,a,u){this.tag=t,this.data=e,this.children=n,this.text=r,this.elm=o,this.ns=void 0,this.context=i,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=e&&e.key,this.componentOptions=a,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=u,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1},ht={child:{configurable:!0}};ht.child.get=function(){return this.componentInstance},Object.defineProperties(pt.prototype,ht);var vt=function(t){void 0===t&&(t="");var e=new pt;return e.text=t,e.isComment=!0,e};function bt(t){return new pt(void 0,void 0,void 0,String(t))}function yt(t){var e=new pt(t.tag,t.data,t.children,t.text,t.elm,t.context,t.componentOptions,t.asyncFactory);return e.ns=t.ns,e.isStatic=t.isStatic,e.key=t.key,e.isComment=t.isComment,e.fnContext=t.fnContext,e.fnOptions=t.fnOptions,e.fnScopeId=t.fnScopeId,e.isCloned=!0,e}var gt=Array.prototype,mt=Object.create(gt);["push","pop","shift","unshift","splice","sort","reverse"].forEach(function(t){var e=gt[t];B(mt,t,function(){for(var n=[],r=arguments.length;r--;)n[r]=arguments[r];var o,i=e.apply(this,n),a=this.__ob__;switch(t){case"push":case"unshift":o=n;break;case"splice":o=n.slice(2)}return o&&a.observeArray(o),a.dep.notify(),i})});var xt=Object.getOwnPropertyNames(mt),_t=!0;function wt(t){_t=t}var kt=function(t){(this.value=t,this.dep=new st,this.vmCount=0,B(t,"__ob__",this),Array.isArray(t))?((H?Ct:Ot)(t,mt,xt),this.observeArray(t)):this.walk(t)};function Ct(t,e,n){t.__proto__=e}function Ot(t,e,n){for(var r=0,o=n.length;r<o;r++){var i=n[r];B(t,i,e[i])}}function jt(t,e){var n;if(c(t)&&!(t instanceof pt))return m(t,"__ob__")&&t.__ob__ instanceof kt?n=t.__ob__:_t&&!nt()&&(Array.isArray(t)||l(t))&&Object.isExtensible(t)&&!t._isVue&&(n=new kt(t)),e&&n&&n.vmCount++,n}function St(t,e,n,r,o){var i=new st,a=Object.getOwnPropertyDescriptor(t,e);if(!a||!1!==a.configurable){var u=a&&a.get;u||2!==arguments.length||(n=t[e]);var c=a&&a.set,s=!o&&jt(n);Object.defineProperty(t,e,{enumerable:!0,configurable:!0,get:function(){var e=u?u.call(t):n;return st.target&&(i.depend(),s&&(s.dep.depend(),Array.isArray(e)&&function t(e){for(var n=void 0,r=0,o=e.length;r<o;r++)(n=e[r])&&n.__ob__&&n.__ob__.dep.depend(),Array.isArray(n)&&t(n)}(e))),e},set:function(e){var r=u?u.call(t):n;e===r||e!=e&&r!=r||(c?c.call(t,e):n=e,s=!o&&jt(e),i.notify())}})}}function Et(t,e,n){if(Array.isArray(t)&&d(e))return t.length=Math.max(t.length,e),t.splice(e,1,n),n;if(e in t&&!(e in Object.prototype))return t[e]=n,n;var r=t.__ob__;return t._isVue||r&&r.vmCount?n:r?(St(r.value,e,n),r.dep.notify(),n):(t[e]=n,n)}function At(t,e){if(Array.isArray(t)&&d(e))t.splice(e,1);else{var n=t.__ob__;t._isVue||n&&n.vmCount||m(t,e)&&(delete t[e],n&&n.dep.notify())}}kt.prototype.walk=function(t){for(var e=Object.keys(t),n=0;n<e.length;n++)St(t,e[n])},kt.prototype.observeArray=function(t){for(var e=0,n=t.length;e<n;e++)jt(t[e])};var Pt=F.optionMergeStrategies;function $t(t,e){if(!e)return t;for(var n,r,o,i=Object.keys(e),a=0;a<i.length;a++)r=t[n=i[a]],o=e[n],m(t,n)?l(r)&&l(o)&&$t(r,o):Et(t,n,o);return t}function Tt(t,e,n){return n?function(){var r="function"==typeof e?e.call(n,n):e,o="function"==typeof t?t.call(n,n):t;return r?$t(r,o):o}:e?t?function(){return $t("function"==typeof e?e.call(this,this):e,"function"==typeof t?t.call(this,this):t)}:e:t}function Mt(t,e){return e?t?t.concat(e):Array.isArray(e)?e:[e]:t}function It(t,e,n,r){var o=Object.create(t||null);return e?E(o,e):o}Pt.data=function(t,e,n){return n?Tt(t,e,n):e&&"function"!=typeof e?t:Tt(t,e)},N.forEach(function(t){Pt[t]=Mt}),z.forEach(function(t){Pt[t+"s"]=It}),Pt.watch=function(t,e,n,r){if(t===Q&&(t=void 0),e===Q&&(e=void 0),!e)return Object.create(t||null);if(!t)return e;var o={};for(var i in E(o,t),e){var a=o[i],u=e[i];a&&!Array.isArray(a)&&(a=[a]),o[i]=a?a.concat(u):Array.isArray(u)?u:[u]}return o},Pt.props=Pt.methods=Pt.inject=Pt.computed=function(t,e,n,r){if(!t)return e;var o=Object.create(null);return E(o,t),e&&E(o,e),o},Pt.provide=Tt;var Rt=function(t,e){return void 0===e?t:e};function Dt(t,e,n){"function"==typeof e&&(e=e.options),function(t,e){var n=t.props;if(n){var r,o,i={};if(Array.isArray(n))for(r=n.length;r--;)"string"==typeof(o=n[r])&&(i[w(o)]={type:null});else if(l(n))for(var a in n)o=n[a],i[w(a)]=l(o)?o:{type:o};t.props=i}}(e),function(t,e){var n=t.inject;if(n){var r=t.inject={};if(Array.isArray(n))for(var o=0;o<n.length;o++)r[n[o]]={from:n[o]};else if(l(n))for(var i in n){var a=n[i];r[i]=l(a)?E({from:i},a):{from:a}}}}(e),function(t){var e=t.directives;if(e)for(var n in e){var r=e[n];"function"==typeof r&&(e[n]={bind:r,update:r})}}(e);var r=e.extends;if(r&&(t=Dt(t,r,n)),e.mixins)for(var o=0,i=e.mixins.length;o<i;o++)t=Dt(t,e.mixins[o],n);var a,u={};for(a in t)c(a);for(a in e)m(t,a)||c(a);function c(r){var o=Pt[r]||Rt;u[r]=o(t[r],e[r],n,r)}return u}function zt(t,e,n,r){if("string"==typeof n){var o=t[e];if(m(o,n))return o[n];var i=w(n);if(m(o,i))return o[i];var a=k(i);return m(o,a)?o[a]:o[n]||o[i]||o[a]}}function Nt(t,e,n,r){var o=e[t],i=!m(n,t),a=n[t],u=Bt(Boolean,o.type);if(u>-1)if(i&&!m(o,"default"))a=!1;else if(""===a||a===O(t)){var c=Bt(String,o.type);(c<0||u<c)&&(a=!0)}if(void 0===a){a=function(t,e,n){if(!m(e,"default"))return;var r=e.default;0;if(t&&t.$options.propsData&&void 0===t.$options.propsData[n]&&void 0!==t._props[n])return t._props[n];return"function"==typeof r&&"Function"!==Ft(e.type)?r.call(t):r}(r,o,t);var s=_t;wt(!0),jt(a),wt(s)}return a}function Ft(t){var e=t&&t.toString().match(/^\s*function (\w+)/);return e?e[1]:""}function Lt(t,e){return Ft(t)===Ft(e)}function Bt(t,e){if(!Array.isArray(e))return Lt(e,t)?0:-1;for(var n=0,r=e.length;n<r;n++)if(Lt(e[n],t))return n;return-1}function Wt(t,e,n){if(e)for(var r=e;r=r.$parent;){var o=r.$options.errorCaptured;if(o)for(var i=0;i<o.length;i++)try{if(!1===o[i].call(r,t,e,n))return}catch(t){Vt(t,r,"errorCaptured hook")}}Vt(t,e,n)}function Vt(t,e,n){if(F.errorHandler)try{return F.errorHandler.call(null,t,e,n)}catch(t){Ht(t,null,"config.errorHandler")}Ht(t,e,n)}function Ht(t,e,n){if(!q&&!U||"undefined"==typeof console)throw t;console.error(t)}var qt,Ut,Xt=[],Gt=!1;function Jt(){Gt=!1;var t=Xt.slice(0);Xt.length=0;for(var e=0;e<t.length;e++)t[e]()}var Kt=!1;if(void 0!==n&&ot(n))Ut=function(){n(Jt)};else if("undefined"==typeof MessageChannel||!ot(MessageChannel)&&"[object MessageChannelConstructor]"!==MessageChannel.toString())Ut=function(){setTimeout(Jt,0)};else{var Zt=new MessageChannel,Yt=Zt.port2;Zt.port1.onmessage=Jt,Ut=function(){Yt.postMessage(1)}}if("undefined"!=typeof Promise&&ot(Promise)){var Qt=Promise.resolve();qt=function(){Qt.then(Jt),Y&&setTimeout(P)}}else qt=Ut;function te(t,e){var n;if(Xt.push(function(){if(t)try{t.call(e)}catch(t){Wt(t,e,"nextTick")}else n&&n(e)}),Gt||(Gt=!0,Kt?Ut():qt()),!t&&"undefined"!=typeof Promise)return new Promise(function(t){n=t})}var ee=new it;function ne(t){!function t(e,n){var r,o;var i=Array.isArray(e);if(!i&&!c(e)||Object.isFrozen(e)||e instanceof pt)return;if(e.__ob__){var a=e.__ob__.dep.id;if(n.has(a))return;n.add(a)}if(i)for(r=e.length;r--;)t(e[r],n);else for(o=Object.keys(e),r=o.length;r--;)t(e[o[r]],n)}(t,ee),ee.clear()}var re,oe=x(function(t){var e="&"===t.charAt(0),n="~"===(t=e?t.slice(1):t).charAt(0),r="!"===(t=n?t.slice(1):t).charAt(0);return{name:t=r?t.slice(1):t,once:n,capture:r,passive:e}});function ie(t){function e(){var t=arguments,n=e.fns;if(!Array.isArray(n))return n.apply(null,arguments);for(var r=n.slice(),o=0;o<r.length;o++)r[o].apply(null,t)}return e.fns=t,e}function ae(t,e,n,r,i){var a,u,c,s;for(a in t)u=t[a],c=e[a],s=oe(a),o(u)||(o(c)?(o(u.fns)&&(u=t[a]=ie(u)),n(s.name,u,s.once,s.capture,s.passive,s.params)):u!==c&&(c.fns=u,t[a]=c));for(a in e)o(t[a])&&r((s=oe(a)).name,e[a],s.capture)}function ue(t,e,n){var r;t instanceof pt&&(t=t.data.hook||(t.data.hook={}));var u=t[e];function c(){n.apply(this,arguments),y(r.fns,c)}o(u)?r=ie([c]):i(u.fns)&&a(u.merged)?(r=u).fns.push(c):r=ie([u,c]),r.merged=!0,t[e]=r}function ce(t,e,n,r,o){if(i(e)){if(m(e,n))return t[n]=e[n],o||delete e[n],!0;if(m(e,r))return t[n]=e[r],o||delete e[r],!0}return!1}function se(t){return u(t)?[bt(t)]:Array.isArray(t)?function t(e,n){var r=[];var c,s,l,f;for(c=0;c<e.length;c++)o(s=e[c])||"boolean"==typeof s||(l=r.length-1,f=r[l],Array.isArray(s)?s.length>0&&(le((s=t(s,(n||"")+"_"+c))[0])&&le(f)&&(r[l]=bt(f.text+s[0].text),s.shift()),r.push.apply(r,s)):u(s)?le(f)?r[l]=bt(f.text+s):""!==s&&r.push(bt(s)):le(s)&&le(f)?r[l]=bt(f.text+s.text):(a(e._isVList)&&i(s.tag)&&o(s.key)&&i(n)&&(s.key="__vlist"+n+"_"+c+"__"),r.push(s)));return r}(t):void 0}function le(t){return i(t)&&i(t.text)&&function(t){return!1===t}(t.isComment)}function fe(t,e){return(t.__esModule||at&&"Module"===t[Symbol.toStringTag])&&(t=t.default),c(t)?e.extend(t):t}function de(t){return t.isComment&&t.asyncFactory}function pe(t){if(Array.isArray(t))for(var e=0;e<t.length;e++){var n=t[e];if(i(n)&&(i(n.componentOptions)||de(n)))return n}}function he(t,e,n){n?re.$once(t,e):re.$on(t,e)}function ve(t,e){re.$off(t,e)}function be(t,e,n){re=t,ae(e,n||{},he,ve),re=void 0}function ye(t,e){var n={};if(!t)return n;for(var r=0,o=t.length;r<o;r++){var i=t[r],a=i.data;if(a&&a.attrs&&a.attrs.slot&&delete a.attrs.slot,i.context!==e&&i.fnContext!==e||!a||null==a.slot)(n.default||(n.default=[])).push(i);else{var u=a.slot,c=n[u]||(n[u]=[]);"template"===i.tag?c.push.apply(c,i.children||[]):c.push(i)}}for(var s in n)n[s].every(ge)&&delete n[s];return n}function ge(t){return t.isComment&&!t.asyncFactory||" "===t.text}function me(t,e){e=e||{};for(var n=0;n<t.length;n++)Array.isArray(t[n])?me(t[n],e):e[t[n].key]=t[n].fn;return e}var xe=null;function _e(t){for(;t&&(t=t.$parent);)if(t._inactive)return!0;return!1}function we(t,e){if(e){if(t._directInactive=!1,_e(t))return}else if(t._directInactive)return;if(t._inactive||null===t._inactive){t._inactive=!1;for(var n=0;n<t.$children.length;n++)we(t.$children[n]);ke(t,"activated")}}function ke(t,e){ft();var n=t.$options[e];if(n)for(var r=0,o=n.length;r<o;r++)try{n[r].call(t)}catch(n){Wt(n,t,e+" hook")}t._hasHookEvent&&t.$emit("hook:"+e),dt()}var Ce=[],Oe=[],je={},Se=!1,Ee=!1,Ae=0;function Pe(){var t,e;for(Ee=!0,Ce.sort(function(t,e){return t.id-e.id}),Ae=0;Ae<Ce.length;Ae++)e=(t=Ce[Ae]).id,je[e]=null,t.run();var n=Oe.slice(),r=Ce.slice();Ae=Ce.length=Oe.length=0,je={},Se=Ee=!1,function(t){for(var e=0;e<t.length;e++)t[e]._inactive=!0,we(t[e],!0)}(n),function(t){var e=t.length;for(;e--;){var n=t[e],r=n.vm;r._watcher===n&&r._isMounted&&ke(r,"updated")}}(r),rt&&F.devtools&&rt.emit("flush")}var $e=0,Te=function(t,e,n,r,o){this.vm=t,o&&(t._watcher=this),t._watchers.push(this),r?(this.deep=!!r.deep,this.user=!!r.user,this.lazy=!!r.lazy,this.sync=!!r.sync):this.deep=this.user=this.lazy=this.sync=!1,this.cb=n,this.id=++$e,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new it,this.newDepIds=new it,this.expression="","function"==typeof e?this.getter=e:(this.getter=function(t){if(!W.test(t)){var e=t.split(".");return function(t){for(var n=0;n<e.length;n++){if(!t)return;t=t[e[n]]}return t}}}(e),this.getter||(this.getter=function(){})),this.value=this.lazy?void 0:this.get()};Te.prototype.get=function(){var t;ft(this);var e=this.vm;try{t=this.getter.call(e,e)}catch(t){if(!this.user)throw t;Wt(t,e,'getter for watcher "'+this.expression+'"')}finally{this.deep&&ne(t),dt(),this.cleanupDeps()}return t},Te.prototype.addDep=function(t){var e=t.id;this.newDepIds.has(e)||(this.newDepIds.add(e),this.newDeps.push(t),this.depIds.has(e)||t.addSub(this))},Te.prototype.cleanupDeps=function(){for(var t=this.deps.length;t--;){var e=this.deps[t];this.newDepIds.has(e.id)||e.removeSub(this)}var n=this.depIds;this.depIds=this.newDepIds,this.newDepIds=n,this.newDepIds.clear(),n=this.deps,this.deps=this.newDeps,this.newDeps=n,this.newDeps.length=0},Te.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():function(t){var e=t.id;if(null==je[e]){if(je[e]=!0,Ee){for(var n=Ce.length-1;n>Ae&&Ce[n].id>t.id;)n--;Ce.splice(n+1,0,t)}else Ce.push(t);Se||(Se=!0,te(Pe))}}(this)},Te.prototype.run=function(){if(this.active){var t=this.get();if(t!==this.value||c(t)||this.deep){var e=this.value;if(this.value=t,this.user)try{this.cb.call(this.vm,t,e)}catch(t){Wt(t,this.vm,'callback for watcher "'+this.expression+'"')}else this.cb.call(this.vm,t,e)}}},Te.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},Te.prototype.depend=function(){for(var t=this.deps.length;t--;)this.deps[t].depend()},Te.prototype.teardown=function(){if(this.active){this.vm._isBeingDestroyed||y(this.vm._watchers,this);for(var t=this.deps.length;t--;)this.deps[t].removeSub(this);this.active=!1}};var Me={enumerable:!0,configurable:!0,get:P,set:P};function Ie(t,e,n){Me.get=function(){return this[e][n]},Me.set=function(t){this[e][n]=t},Object.defineProperty(t,n,Me)}function Re(t){t._watchers=[];var e=t.$options;e.props&&function(t,e){var n=t.$options.propsData||{},r=t._props={},o=t.$options._propKeys=[];t.$parent&&wt(!1);var i=function(i){o.push(i);var a=Nt(i,e,n,t);St(r,i,a),i in t||Ie(t,"_props",i)};for(var a in e)i(a);wt(!0)}(t,e.props),e.methods&&function(t,e){t.$options.props;for(var n in e)t[n]=null==e[n]?P:j(e[n],t)}(t,e.methods),e.data?function(t){var e=t.$options.data;l(e=t._data="function"==typeof e?function(t,e){ft();try{return t.call(e,e)}catch(t){return Wt(t,e,"data()"),{}}finally{dt()}}(e,t):e||{})||(e={});var n=Object.keys(e),r=t.$options.props,o=(t.$options.methods,n.length);for(;o--;){var i=n[o];0,r&&m(r,i)||L(i)||Ie(t,"_data",i)}jt(e,!0)}(t):jt(t._data={},!0),e.computed&&function(t,e){var n=t._computedWatchers=Object.create(null),r=nt();for(var o in e){var i=e[o],a="function"==typeof i?i:i.get;0,r||(n[o]=new Te(t,a||P,P,De)),o in t||ze(t,o,i)}}(t,e.computed),e.watch&&e.watch!==Q&&function(t,e){for(var n in e){var r=e[n];if(Array.isArray(r))for(var o=0;o<r.length;o++)Fe(t,n,r[o]);else Fe(t,n,r)}}(t,e.watch)}var De={lazy:!0};function ze(t,e,n){var r=!nt();"function"==typeof n?(Me.get=r?Ne(e):n,Me.set=P):(Me.get=n.get?r&&!1!==n.cache?Ne(e):n.get:P,Me.set=n.set?n.set:P),Object.defineProperty(t,e,Me)}function Ne(t){return function(){var e=this._computedWatchers&&this._computedWatchers[t];if(e)return e.dirty&&e.evaluate(),st.target&&e.depend(),e.value}}function Fe(t,e,n,r){return l(n)&&(r=n,n=n.handler),"string"==typeof n&&(n=t[n]),t.$watch(e,n,r)}function Le(t,e){if(t){for(var n=Object.create(null),r=at?Reflect.ownKeys(t).filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}):Object.keys(t),o=0;o<r.length;o++){for(var i=r[o],a=t[i].from,u=e;u;){if(u._provided&&m(u._provided,a)){n[i]=u._provided[a];break}u=u.$parent}if(!u)if("default"in t[i]){var c=t[i].default;n[i]="function"==typeof c?c.call(e):c}else 0}return n}}function Be(t,e){var n,r,o,a,u;if(Array.isArray(t)||"string"==typeof t)for(n=new Array(t.length),r=0,o=t.length;r<o;r++)n[r]=e(t[r],r);else if("number"==typeof t)for(n=new Array(t),r=0;r<t;r++)n[r]=e(r+1,r);else if(c(t))for(a=Object.keys(t),n=new Array(a.length),r=0,o=a.length;r<o;r++)u=a[r],n[r]=e(t[u],u,r);return i(n)&&(n._isVList=!0),n}function We(t,e,n,r){var o,i=this.$scopedSlots[t];if(i)n=n||{},r&&(n=E(E({},r),n)),o=i(n)||e;else{var a=this.$slots[t];a&&(a._rendered=!0),o=a||e}var u=n&&n.slot;return u?this.$createElement("template",{slot:u},o):o}function Ve(t){return zt(this.$options,"filters",t)||T}function He(t,e){return Array.isArray(t)?-1===t.indexOf(e):t!==e}function qe(t,e,n,r,o){var i=F.keyCodes[e]||n;return o&&r&&!F.keyCodes[e]?He(o,r):i?He(i,t):r?O(r)!==e:void 0}function Ue(t,e,n,r,o){if(n)if(c(n)){var i;Array.isArray(n)&&(n=A(n));var a=function(a){if("class"===a||"style"===a||b(a))i=t;else{var u=t.attrs&&t.attrs.type;i=r||F.mustUseProp(e,u,a)?t.domProps||(t.domProps={}):t.attrs||(t.attrs={})}a in i||(i[a]=n[a],o&&((t.on||(t.on={}))["update:"+a]=function(t){n[a]=t}))};for(var u in n)a(u)}else;return t}function Xe(t,e){var n=this._staticTrees||(this._staticTrees=[]),r=n[t];return r&&!e?r:(Je(r=n[t]=this.$options.staticRenderFns[t].call(this._renderProxy,null,this),"__static__"+t,!1),r)}function Ge(t,e,n){return Je(t,"__once__"+e+(n?"_"+n:""),!0),t}function Je(t,e,n){if(Array.isArray(t))for(var r=0;r<t.length;r++)t[r]&&"string"!=typeof t[r]&&Ke(t[r],e+"_"+r,n);else Ke(t,e,n)}function Ke(t,e,n){t.isStatic=!0,t.key=e,t.isOnce=n}function Ze(t,e){if(e)if(l(e)){var n=t.on=t.on?E({},t.on):{};for(var r in e){var o=n[r],i=e[r];n[r]=o?[].concat(o,i):i}}else;return t}function Ye(t){t._o=Ge,t._n=h,t._s=p,t._l=Be,t._t=We,t._q=M,t._i=I,t._m=Xe,t._f=Ve,t._k=qe,t._b=Ue,t._v=bt,t._e=vt,t._u=me,t._g=Ze}function Qe(t,e,n,o,i){var u,c=i.options;m(o,"_uid")?(u=Object.create(o))._original=o:(u=o,o=o._original);var s=a(c._compiled),l=!s;this.data=t,this.props=e,this.children=n,this.parent=o,this.listeners=t.on||r,this.injections=Le(c.inject,o),this.slots=function(){return ye(n,o)},s&&(this.$options=c,this.$slots=this.slots(),this.$scopedSlots=t.scopedSlots||r),c._scopeId?this._c=function(t,e,n,r){var i=cn(u,t,e,n,r,l);return i&&!Array.isArray(i)&&(i.fnScopeId=c._scopeId,i.fnContext=o),i}:this._c=function(t,e,n,r){return cn(u,t,e,n,r,l)}}function tn(t,e,n,r){var o=yt(t);return o.fnContext=n,o.fnOptions=r,e.slot&&((o.data||(o.data={})).slot=e.slot),o}function en(t,e){for(var n in e)t[w(n)]=e[n]}Ye(Qe.prototype);var nn={init:function(t,e,n,r){if(t.componentInstance&&!t.componentInstance._isDestroyed&&t.data.keepAlive){var o=t;nn.prepatch(o,o)}else{(t.componentInstance=function(t,e,n,r){var o={_isComponent:!0,parent:e,_parentVnode:t,_parentElm:n||null,_refElm:r||null},a=t.data.inlineTemplate;i(a)&&(o.render=a.render,o.staticRenderFns=a.staticRenderFns);return new t.componentOptions.Ctor(o)}(t,xe,n,r)).$mount(e?t.elm:void 0,e)}},prepatch:function(t,e){var n=e.componentOptions;!function(t,e,n,o,i){var a=!!(i||t.$options._renderChildren||o.data.scopedSlots||t.$scopedSlots!==r);if(t.$options._parentVnode=o,t.$vnode=o,t._vnode&&(t._vnode.parent=o),t.$options._renderChildren=i,t.$attrs=o.data.attrs||r,t.$listeners=n||r,e&&t.$options.props){wt(!1);for(var u=t._props,c=t.$options._propKeys||[],s=0;s<c.length;s++){var l=c[s],f=t.$options.props;u[l]=Nt(l,f,e,t)}wt(!0),t.$options.propsData=e}n=n||r;var d=t.$options._parentListeners;t.$options._parentListeners=n,be(t,n,d),a&&(t.$slots=ye(i,o.context),t.$forceUpdate())}(e.componentInstance=t.componentInstance,n.propsData,n.listeners,e,n.children)},insert:function(t){var e=t.context,n=t.componentInstance;n._isMounted||(n._isMounted=!0,ke(n,"mounted")),t.data.keepAlive&&(e._isMounted?function(t){t._inactive=!1,Oe.push(t)}(n):we(n,!0))},destroy:function(t){var e=t.componentInstance;e._isDestroyed||(t.data.keepAlive?function t(e,n){if(!(n&&(e._directInactive=!0,_e(e))||e._inactive)){e._inactive=!0;for(var r=0;r<e.$children.length;r++)t(e.$children[r]);ke(e,"deactivated")}}(e,!0):e.$destroy())}},rn=Object.keys(nn);function on(t,e,n,u,s){if(!o(t)){var l=n.$options._base;if(c(t)&&(t=l.extend(t)),"function"==typeof t){var f;if(o(t.cid)&&void 0===(t=function(t,e,n){if(a(t.error)&&i(t.errorComp))return t.errorComp;if(i(t.resolved))return t.resolved;if(a(t.loading)&&i(t.loadingComp))return t.loadingComp;if(!i(t.contexts)){var r=t.contexts=[n],u=!0,s=function(){for(var t=0,e=r.length;t<e;t++)r[t].$forceUpdate()},l=R(function(n){t.resolved=fe(n,e),u||s()}),f=R(function(e){i(t.errorComp)&&(t.error=!0,s())}),d=t(l,f);return c(d)&&("function"==typeof d.then?o(t.resolved)&&d.then(l,f):i(d.component)&&"function"==typeof d.component.then&&(d.component.then(l,f),i(d.error)&&(t.errorComp=fe(d.error,e)),i(d.loading)&&(t.loadingComp=fe(d.loading,e),0===d.delay?t.loading=!0:setTimeout(function(){o(t.resolved)&&o(t.error)&&(t.loading=!0,s())},d.delay||200)),i(d.timeout)&&setTimeout(function(){o(t.resolved)&&f(null)},d.timeout))),u=!1,t.loading?t.loadingComp:t.resolved}t.contexts.push(n)}(f=t,l,n)))return function(t,e,n,r,o){var i=vt();return i.asyncFactory=t,i.asyncMeta={data:e,context:n,children:r,tag:o},i}(f,e,n,u,s);e=e||{},ln(t),i(e.model)&&function(t,e){var n=t.model&&t.model.prop||"value",r=t.model&&t.model.event||"input";(e.props||(e.props={}))[n]=e.model.value;var o=e.on||(e.on={});i(o[r])?o[r]=[e.model.callback].concat(o[r]):o[r]=e.model.callback}(t.options,e);var d=function(t,e,n){var r=e.options.props;if(!o(r)){var a={},u=t.attrs,c=t.props;if(i(u)||i(c))for(var s in r){var l=O(s);ce(a,c,s,l,!0)||ce(a,u,s,l,!1)}return a}}(e,t);if(a(t.options.functional))return function(t,e,n,o,a){var u=t.options,c={},s=u.props;if(i(s))for(var l in s)c[l]=Nt(l,s,e||r);else i(n.attrs)&&en(c,n.attrs),i(n.props)&&en(c,n.props);var f=new Qe(n,c,a,o,t),d=u.render.call(null,f._c,f);if(d instanceof pt)return tn(d,n,f.parent,u);if(Array.isArray(d)){for(var p=se(d)||[],h=new Array(p.length),v=0;v<p.length;v++)h[v]=tn(p[v],n,f.parent,u);return h}}(t,d,e,n,u);var p=e.on;if(e.on=e.nativeOn,a(t.options.abstract)){var h=e.slot;e={},h&&(e.slot=h)}!function(t){for(var e=t.hook||(t.hook={}),n=0;n<rn.length;n++){var r=rn[n];e[r]=nn[r]}}(e);var v=t.options.name||s;return new pt("vue-component-"+t.cid+(v?"-"+v:""),e,void 0,void 0,void 0,n,{Ctor:t,propsData:d,listeners:p,tag:s,children:u},f)}}}var an=1,un=2;function cn(t,e,n,r,s,l){return(Array.isArray(n)||u(n))&&(s=r,r=n,n=void 0),a(l)&&(s=un),function(t,e,n,r,u){if(i(n)&&i(n.__ob__))return vt();i(n)&&i(n.is)&&(e=n.is);if(!e)return vt();0;Array.isArray(r)&&"function"==typeof r[0]&&((n=n||{}).scopedSlots={default:r[0]},r.length=0);u===un?r=se(r):u===an&&(r=function(t){for(var e=0;e<t.length;e++)if(Array.isArray(t[e]))return Array.prototype.concat.apply([],t);return t}(r));var s,l;if("string"==typeof e){var f;l=t.$vnode&&t.$vnode.ns||F.getTagNamespace(e),s=F.isReservedTag(e)?new pt(F.parsePlatformTagName(e),n,r,void 0,void 0,t):i(f=zt(t.$options,"components",e))?on(f,n,t,r,e):new pt(e,n,r,void 0,void 0,t)}else s=on(e,n,t,r);return Array.isArray(s)?s:i(s)?(i(l)&&function t(e,n,r){e.ns=n;"foreignObject"===e.tag&&(n=void 0,r=!0);if(i(e.children))for(var u=0,c=e.children.length;u<c;u++){var s=e.children[u];i(s.tag)&&(o(s.ns)||a(r)&&"svg"!==s.tag)&&t(s,n,r)}}(s,l),i(n)&&function(t){c(t.style)&&ne(t.style);c(t.class)&&ne(t.class)}(n),s):vt()}(t,e,n,r,s)}var sn=0;function ln(t){var e=t.options;if(t.super){var n=ln(t.super);if(n!==t.superOptions){t.superOptions=n;var r=function(t){var e,n=t.options,r=t.extendOptions,o=t.sealedOptions;for(var i in n)n[i]!==o[i]&&(e||(e={}),e[i]=fn(n[i],r[i],o[i]));return e}(t);r&&E(t.extendOptions,r),(e=t.options=Dt(n,t.extendOptions)).name&&(e.components[e.name]=t)}}return e}function fn(t,e,n){if(Array.isArray(t)){var r=[];n=Array.isArray(n)?n:[n],e=Array.isArray(e)?e:[e];for(var o=0;o<t.length;o++)(e.indexOf(t[o])>=0||n.indexOf(t[o])<0)&&r.push(t[o]);return r}return t}function dn(t){this._init(t)}function pn(t){t.cid=0;var e=1;t.extend=function(t){t=t||{};var n=this,r=n.cid,o=t._Ctor||(t._Ctor={});if(o[r])return o[r];var i=t.name||n.options.name;var a=function(t){this._init(t)};return(a.prototype=Object.create(n.prototype)).constructor=a,a.cid=e++,a.options=Dt(n.options,t),a.super=n,a.options.props&&function(t){var e=t.options.props;for(var n in e)Ie(t.prototype,"_props",n)}(a),a.options.computed&&function(t){var e=t.options.computed;for(var n in e)ze(t.prototype,n,e[n])}(a),a.extend=n.extend,a.mixin=n.mixin,a.use=n.use,z.forEach(function(t){a[t]=n[t]}),i&&(a.options.components[i]=a),a.superOptions=n.options,a.extendOptions=t,a.sealedOptions=E({},a.options),o[r]=a,a}}function hn(t){return t&&(t.Ctor.options.name||t.tag)}function vn(t,e){return Array.isArray(t)?t.indexOf(e)>-1:"string"==typeof t?t.split(",").indexOf(e)>-1:!!f(t)&&t.test(e)}function bn(t,e){var n=t.cache,r=t.keys,o=t._vnode;for(var i in n){var a=n[i];if(a){var u=hn(a.componentOptions);u&&!e(u)&&yn(n,i,r,o)}}}function yn(t,e,n,r){var o=t[e];!o||r&&o.tag===r.tag||o.componentInstance.$destroy(),t[e]=null,y(n,e)}!function(t){t.prototype._init=function(t){var e=this;e._uid=sn++,e._isVue=!0,t&&t._isComponent?function(t,e){var n=t.$options=Object.create(t.constructor.options),r=e._parentVnode;n.parent=e.parent,n._parentVnode=r,n._parentElm=e._parentElm,n._refElm=e._refElm;var o=r.componentOptions;n.propsData=o.propsData,n._parentListeners=o.listeners,n._renderChildren=o.children,n._componentTag=o.tag,e.render&&(n.render=e.render,n.staticRenderFns=e.staticRenderFns)}(e,t):e.$options=Dt(ln(e.constructor),t||{},e),e._renderProxy=e,e._self=e,function(t){var e=t.$options,n=e.parent;if(n&&!e.abstract){for(;n.$options.abstract&&n.$parent;)n=n.$parent;n.$children.push(t)}t.$parent=n,t.$root=n?n.$root:t,t.$children=[],t.$refs={},t._watcher=null,t._inactive=null,t._directInactive=!1,t._isMounted=!1,t._isDestroyed=!1,t._isBeingDestroyed=!1}(e),function(t){t._events=Object.create(null),t._hasHookEvent=!1;var e=t.$options._parentListeners;e&&be(t,e)}(e),function(t){t._vnode=null,t._staticTrees=null;var e=t.$options,n=t.$vnode=e._parentVnode,o=n&&n.context;t.$slots=ye(e._renderChildren,o),t.$scopedSlots=r,t._c=function(e,n,r,o){return cn(t,e,n,r,o,!1)},t.$createElement=function(e,n,r,o){return cn(t,e,n,r,o,!0)};var i=n&&n.data;St(t,"$attrs",i&&i.attrs||r,null,!0),St(t,"$listeners",e._parentListeners||r,null,!0)}(e),ke(e,"beforeCreate"),function(t){var e=Le(t.$options.inject,t);e&&(wt(!1),Object.keys(e).forEach(function(n){St(t,n,e[n])}),wt(!0))}(e),Re(e),function(t){var e=t.$options.provide;e&&(t._provided="function"==typeof e?e.call(t):e)}(e),ke(e,"created"),e.$options.el&&e.$mount(e.$options.el)}}(dn),function(t){var e={get:function(){return this._data}},n={get:function(){return this._props}};Object.defineProperty(t.prototype,"$data",e),Object.defineProperty(t.prototype,"$props",n),t.prototype.$set=Et,t.prototype.$delete=At,t.prototype.$watch=function(t,e,n){if(l(e))return Fe(this,t,e,n);(n=n||{}).user=!0;var r=new Te(this,t,e,n);return n.immediate&&e.call(this,r.value),function(){r.teardown()}}}(dn),function(t){var e=/^hook:/;t.prototype.$on=function(t,n){if(Array.isArray(t))for(var r=0,o=t.length;r<o;r++)this.$on(t[r],n);else(this._events[t]||(this._events[t]=[])).push(n),e.test(t)&&(this._hasHookEvent=!0);return this},t.prototype.$once=function(t,e){var n=this;function r(){n.$off(t,r),e.apply(n,arguments)}return r.fn=e,n.$on(t,r),n},t.prototype.$off=function(t,e){var n=this;if(!arguments.length)return n._events=Object.create(null),n;if(Array.isArray(t)){for(var r=0,o=t.length;r<o;r++)this.$off(t[r],e);return n}var i=n._events[t];if(!i)return n;if(!e)return n._events[t]=null,n;if(e)for(var a,u=i.length;u--;)if((a=i[u])===e||a.fn===e){i.splice(u,1);break}return n},t.prototype.$emit=function(t){var e=this._events[t];if(e){e=e.length>1?S(e):e;for(var n=S(arguments,1),r=0,o=e.length;r<o;r++)try{e[r].apply(this,n)}catch(e){Wt(e,this,'event handler for "'+t+'"')}}return this}}(dn),function(t){t.prototype._update=function(t,e){var n=this;n._isMounted&&ke(n,"beforeUpdate");var r=n.$el,o=n._vnode,i=xe;xe=n,n._vnode=t,o?n.$el=n.__patch__(o,t):(n.$el=n.__patch__(n.$el,t,e,!1,n.$options._parentElm,n.$options._refElm),n.$options._parentElm=n.$options._refElm=null),xe=i,r&&(r.__vue__=null),n.$el&&(n.$el.__vue__=n),n.$vnode&&n.$parent&&n.$vnode===n.$parent._vnode&&(n.$parent.$el=n.$el)},t.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},t.prototype.$destroy=function(){var t=this;if(!t._isBeingDestroyed){ke(t,"beforeDestroy"),t._isBeingDestroyed=!0;var e=t.$parent;!e||e._isBeingDestroyed||t.$options.abstract||y(e.$children,t),t._watcher&&t._watcher.teardown();for(var n=t._watchers.length;n--;)t._watchers[n].teardown();t._data.__ob__&&t._data.__ob__.vmCount--,t._isDestroyed=!0,t.__patch__(t._vnode,null),ke(t,"destroyed"),t.$off(),t.$el&&(t.$el.__vue__=null),t.$vnode&&(t.$vnode.parent=null)}}}(dn),function(t){Ye(t.prototype),t.prototype.$nextTick=function(t){return te(t,this)},t.prototype._render=function(){var t,e=this,n=e.$options,o=n.render,i=n._parentVnode;i&&(e.$scopedSlots=i.data.scopedSlots||r),e.$vnode=i;try{t=o.call(e._renderProxy,e.$createElement)}catch(n){Wt(n,e,"render"),t=e._vnode}return t instanceof pt||(t=vt()),t.parent=i,t}}(dn);var gn=[String,RegExp,Array],mn={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:gn,exclude:gn,max:[String,Number]},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var t in this.cache)yn(this.cache,t,this.keys)},mounted:function(){var t=this;this.$watch("include",function(e){bn(t,function(t){return vn(e,t)})}),this.$watch("exclude",function(e){bn(t,function(t){return!vn(e,t)})})},render:function(){var t=this.$slots.default,e=pe(t),n=e&&e.componentOptions;if(n){var r=hn(n),o=this.include,i=this.exclude;if(o&&(!r||!vn(o,r))||i&&r&&vn(i,r))return e;var a=this.cache,u=this.keys,c=null==e.key?n.Ctor.cid+(n.tag?"::"+n.tag:""):e.key;a[c]?(e.componentInstance=a[c].componentInstance,y(u,c),u.push(c)):(a[c]=e,u.push(c),this.max&&u.length>parseInt(this.max)&&yn(a,u[0],u,this._vnode)),e.data.keepAlive=!0}return e||t&&t[0]}}};!function(t){var e={get:function(){return F}};Object.defineProperty(t,"config",e),t.util={warn:ut,extend:E,mergeOptions:Dt,defineReactive:St},t.set=Et,t.delete=At,t.nextTick=te,t.options=Object.create(null),z.forEach(function(e){t.options[e+"s"]=Object.create(null)}),t.options._base=t,E(t.options.components,mn),function(t){t.use=function(t){var e=this._installedPlugins||(this._installedPlugins=[]);if(e.indexOf(t)>-1)return this;var n=S(arguments,1);return n.unshift(this),"function"==typeof t.install?t.install.apply(t,n):"function"==typeof t&&t.apply(null,n),e.push(t),this}}(t),function(t){t.mixin=function(t){return this.options=Dt(this.options,t),this}}(t),pn(t),function(t){z.forEach(function(e){t[e]=function(t,n){return n?("component"===e&&l(n)&&(n.name=n.name||t,n=this.options._base.extend(n)),"directive"===e&&"function"==typeof n&&(n={bind:n,update:n}),this.options[e+"s"][t]=n,n):this.options[e+"s"][t]}})}(t)}(dn),Object.defineProperty(dn.prototype,"$isServer",{get:nt}),Object.defineProperty(dn.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(dn,"FunctionalRenderContext",{value:Qe}),dn.version="2.5.17";var xn=v("style,class"),_n=v("input,textarea,option,select,progress"),wn=v("contenteditable,draggable,spellcheck"),kn=v("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,translate,truespeed,typemustmatch,visible"),Cn="http://www.w3.org/1999/xlink",On=function(t){return":"===t.charAt(5)&&"xlink"===t.slice(0,5)},jn=function(t){return On(t)?t.slice(6,t.length):""},Sn=function(t){return null==t||!1===t};function En(t){for(var e=t.data,n=t,r=t;i(r.componentInstance);)(r=r.componentInstance._vnode)&&r.data&&(e=An(r.data,e));for(;i(n=n.parent);)n&&n.data&&(e=An(e,n.data));return function(t,e){if(i(t)||i(e))return Pn(t,$n(e));return""}(e.staticClass,e.class)}function An(t,e){return{staticClass:Pn(t.staticClass,e.staticClass),class:i(t.class)?[t.class,e.class]:e.class}}function Pn(t,e){return t?e?t+" "+e:t:e||""}function $n(t){return Array.isArray(t)?function(t){for(var e,n="",r=0,o=t.length;r<o;r++)i(e=$n(t[r]))&&""!==e&&(n&&(n+=" "),n+=e);return n}(t):c(t)?function(t){var e="";for(var n in t)t[n]&&(e&&(e+=" "),e+=n);return e}(t):"string"==typeof t?t:""}var Tn={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},Mn=v("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),In=v("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),Rn=function(t){return Mn(t)||In(t)};var Dn=Object.create(null);var zn=v("text,number,password,search,email,tel,url");var Nn=Object.freeze({createElement:function(t,e){var n=document.createElement(t);return"select"!==t?n:(e.data&&e.data.attrs&&void 0!==e.data.attrs.multiple&&n.setAttribute("multiple","multiple"),n)},createElementNS:function(t,e){return document.createElementNS(Tn[t],e)},createTextNode:function(t){return document.createTextNode(t)},createComment:function(t){return document.createComment(t)},insertBefore:function(t,e,n){t.insertBefore(e,n)},removeChild:function(t,e){t.removeChild(e)},appendChild:function(t,e){t.appendChild(e)},parentNode:function(t){return t.parentNode},nextSibling:function(t){return t.nextSibling},tagName:function(t){return t.tagName},setTextContent:function(t,e){t.textContent=e},setStyleScope:function(t,e){t.setAttribute(e,"")}}),Fn={create:function(t,e){Ln(e)},update:function(t,e){t.data.ref!==e.data.ref&&(Ln(t,!0),Ln(e))},destroy:function(t){Ln(t,!0)}};function Ln(t,e){var n=t.data.ref;if(i(n)){var r=t.context,o=t.componentInstance||t.elm,a=r.$refs;e?Array.isArray(a[n])?y(a[n],o):a[n]===o&&(a[n]=void 0):t.data.refInFor?Array.isArray(a[n])?a[n].indexOf(o)<0&&a[n].push(o):a[n]=[o]:a[n]=o}}var Bn=new pt("",{},[]),Wn=["create","activate","update","remove","destroy"];function Vn(t,e){return t.key===e.key&&(t.tag===e.tag&&t.isComment===e.isComment&&i(t.data)===i(e.data)&&function(t,e){if("input"!==t.tag)return!0;var n,r=i(n=t.data)&&i(n=n.attrs)&&n.type,o=i(n=e.data)&&i(n=n.attrs)&&n.type;return r===o||zn(r)&&zn(o)}(t,e)||a(t.isAsyncPlaceholder)&&t.asyncFactory===e.asyncFactory&&o(e.asyncFactory.error))}function Hn(t,e,n){var r,o,a={};for(r=e;r<=n;++r)i(o=t[r].key)&&(a[o]=r);return a}var qn={create:Un,update:Un,destroy:function(t){Un(t,Bn)}};function Un(t,e){(t.data.directives||e.data.directives)&&function(t,e){var n,r,o,i=t===Bn,a=e===Bn,u=Gn(t.data.directives,t.context),c=Gn(e.data.directives,e.context),s=[],l=[];for(n in c)r=u[n],o=c[n],r?(o.oldValue=r.value,Kn(o,"update",e,t),o.def&&o.def.componentUpdated&&l.push(o)):(Kn(o,"bind",e,t),o.def&&o.def.inserted&&s.push(o));if(s.length){var f=function(){for(var n=0;n<s.length;n++)Kn(s[n],"inserted",e,t)};i?ue(e,"insert",f):f()}l.length&&ue(e,"postpatch",function(){for(var n=0;n<l.length;n++)Kn(l[n],"componentUpdated",e,t)});if(!i)for(n in u)c[n]||Kn(u[n],"unbind",t,t,a)}(t,e)}var Xn=Object.create(null);function Gn(t,e){var n,r,o=Object.create(null);if(!t)return o;for(n=0;n<t.length;n++)(r=t[n]).modifiers||(r.modifiers=Xn),o[Jn(r)]=r,r.def=zt(e.$options,"directives",r.name);return o}function Jn(t){return t.rawName||t.name+"."+Object.keys(t.modifiers||{}).join(".")}function Kn(t,e,n,r,o){var i=t.def&&t.def[e];if(i)try{i(n.elm,t,n,r,o)}catch(r){Wt(r,n.context,"directive "+t.name+" "+e+" hook")}}var Zn=[Fn,qn];function Yn(t,e){var n=e.componentOptions;if(!(i(n)&&!1===n.Ctor.options.inheritAttrs||o(t.data.attrs)&&o(e.data.attrs))){var r,a,u=e.elm,c=t.data.attrs||{},s=e.data.attrs||{};for(r in i(s.__ob__)&&(s=e.data.attrs=E({},s)),s)a=s[r],c[r]!==a&&Qn(u,r,a);for(r in(J||Z)&&s.value!==c.value&&Qn(u,"value",s.value),c)o(s[r])&&(On(r)?u.removeAttributeNS(Cn,jn(r)):wn(r)||u.removeAttribute(r))}}function Qn(t,e,n){t.tagName.indexOf("-")>-1?tr(t,e,n):kn(e)?Sn(n)?t.removeAttribute(e):(n="allowfullscreen"===e&&"EMBED"===t.tagName?"true":e,t.setAttribute(e,n)):wn(e)?t.setAttribute(e,Sn(n)||"false"===n?"false":"true"):On(e)?Sn(n)?t.removeAttributeNS(Cn,jn(e)):t.setAttributeNS(Cn,e,n):tr(t,e,n)}function tr(t,e,n){if(Sn(n))t.removeAttribute(e);else{if(J&&!K&&"TEXTAREA"===t.tagName&&"placeholder"===e&&!t.__ieph){var r=function(e){e.stopImmediatePropagation(),t.removeEventListener("input",r)};t.addEventListener("input",r),t.__ieph=!0}t.setAttribute(e,n)}}var er={create:Yn,update:Yn};function nr(t,e){var n=e.elm,r=e.data,a=t.data;if(!(o(r.staticClass)&&o(r.class)&&(o(a)||o(a.staticClass)&&o(a.class)))){var u=En(e),c=n._transitionClasses;i(c)&&(u=Pn(u,$n(c))),u!==n._prevClass&&(n.setAttribute("class",u),n._prevClass=u)}}var rr,or={create:nr,update:nr},ir="__r",ar="__c";function ur(t,e,n,r,o){e=function(t){return t._withTask||(t._withTask=function(){Kt=!0;var e=t.apply(null,arguments);return Kt=!1,e})}(e),n&&(e=function(t,e,n){var r=rr;return function o(){null!==t.apply(null,arguments)&&cr(e,o,n,r)}}(e,t,r)),rr.addEventListener(t,e,tt?{capture:r,passive:o}:r)}function cr(t,e,n,r){(r||rr).removeEventListener(t,e._withTask||e,n)}function sr(t,e){if(!o(t.data.on)||!o(e.data.on)){var n=e.data.on||{},r=t.data.on||{};rr=e.elm,function(t){if(i(t[ir])){var e=J?"change":"input";t[e]=[].concat(t[ir],t[e]||[]),delete t[ir]}i(t[ar])&&(t.change=[].concat(t[ar],t.change||[]),delete t[ar])}(n),ae(n,r,ur,cr,e.context),rr=void 0}}var lr={create:sr,update:sr};function fr(t,e){if(!o(t.data.domProps)||!o(e.data.domProps)){var n,r,a=e.elm,u=t.data.domProps||{},c=e.data.domProps||{};for(n in i(c.__ob__)&&(c=e.data.domProps=E({},c)),u)o(c[n])&&(a[n]="");for(n in c){if(r=c[n],"textContent"===n||"innerHTML"===n){if(e.children&&(e.children.length=0),r===u[n])continue;1===a.childNodes.length&&a.removeChild(a.childNodes[0])}if("value"===n){a._value=r;var s=o(r)?"":String(r);dr(a,s)&&(a.value=s)}else a[n]=r}}}function dr(t,e){return!t.composing&&("OPTION"===t.tagName||function(t,e){var n=!0;try{n=document.activeElement!==t}catch(t){}return n&&t.value!==e}(t,e)||function(t,e){var n=t.value,r=t._vModifiers;if(i(r)){if(r.lazy)return!1;if(r.number)return h(n)!==h(e);if(r.trim)return n.trim()!==e.trim()}return n!==e}(t,e))}var pr={create:fr,update:fr},hr=x(function(t){var e={},n=/:(.+)/;return t.split(/;(?![^(]*\))/g).forEach(function(t){if(t){var r=t.split(n);r.length>1&&(e[r[0].trim()]=r[1].trim())}}),e});function vr(t){var e=br(t.style);return t.staticStyle?E(t.staticStyle,e):e}function br(t){return Array.isArray(t)?A(t):"string"==typeof t?hr(t):t}var yr,gr=/^--/,mr=/\s*!important$/,xr=function(t,e,n){if(gr.test(e))t.style.setProperty(e,n);else if(mr.test(n))t.style.setProperty(e,n.replace(mr,""),"important");else{var r=wr(e);if(Array.isArray(n))for(var o=0,i=n.length;o<i;o++)t.style[r]=n[o];else t.style[r]=n}},_r=["Webkit","Moz","ms"],wr=x(function(t){if(yr=yr||document.createElement("div").style,"filter"!==(t=w(t))&&t in yr)return t;for(var e=t.charAt(0).toUpperCase()+t.slice(1),n=0;n<_r.length;n++){var r=_r[n]+e;if(r in yr)return r}});function kr(t,e){var n=e.data,r=t.data;if(!(o(n.staticStyle)&&o(n.style)&&o(r.staticStyle)&&o(r.style))){var a,u,c=e.elm,s=r.staticStyle,l=r.normalizedStyle||r.style||{},f=s||l,d=br(e.data.style)||{};e.data.normalizedStyle=i(d.__ob__)?E({},d):d;var p=function(t,e){var n,r={};if(e)for(var o=t;o.componentInstance;)(o=o.componentInstance._vnode)&&o.data&&(n=vr(o.data))&&E(r,n);(n=vr(t.data))&&E(r,n);for(var i=t;i=i.parent;)i.data&&(n=vr(i.data))&&E(r,n);return r}(e,!0);for(u in f)o(p[u])&&xr(c,u,"");for(u in p)(a=p[u])!==f[u]&&xr(c,u,null==a?"":a)}}var Cr={create:kr,update:kr};function Or(t,e){if(e&&(e=e.trim()))if(t.classList)e.indexOf(" ")>-1?e.split(/\s+/).forEach(function(e){return t.classList.add(e)}):t.classList.add(e);else{var n=" "+(t.getAttribute("class")||"")+" ";n.indexOf(" "+e+" ")<0&&t.setAttribute("class",(n+e).trim())}}function jr(t,e){if(e&&(e=e.trim()))if(t.classList)e.indexOf(" ")>-1?e.split(/\s+/).forEach(function(e){return t.classList.remove(e)}):t.classList.remove(e),t.classList.length||t.removeAttribute("class");else{for(var n=" "+(t.getAttribute("class")||"")+" ",r=" "+e+" ";n.indexOf(r)>=0;)n=n.replace(r," ");(n=n.trim())?t.setAttribute("class",n):t.removeAttribute("class")}}function Sr(t){if(t){if("object"==typeof t){var e={};return!1!==t.css&&E(e,Er(t.name||"v")),E(e,t),e}return"string"==typeof t?Er(t):void 0}}var Er=x(function(t){return{enterClass:t+"-enter",enterToClass:t+"-enter-to",enterActiveClass:t+"-enter-active",leaveClass:t+"-leave",leaveToClass:t+"-leave-to",leaveActiveClass:t+"-leave-active"}}),Ar=q&&!K,Pr="transition",$r="animation",Tr="transition",Mr="transitionend",Ir="animation",Rr="animationend";Ar&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(Tr="WebkitTransition",Mr="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(Ir="WebkitAnimation",Rr="webkitAnimationEnd"));var Dr=q?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(t){return t()};function zr(t){Dr(function(){Dr(t)})}function Nr(t,e){var n=t._transitionClasses||(t._transitionClasses=[]);n.indexOf(e)<0&&(n.push(e),Or(t,e))}function Fr(t,e){t._transitionClasses&&y(t._transitionClasses,e),jr(t,e)}function Lr(t,e,n){var r=Wr(t,e),o=r.type,i=r.timeout,a=r.propCount;if(!o)return n();var u=o===Pr?Mr:Rr,c=0,s=function(){t.removeEventListener(u,l),n()},l=function(e){e.target===t&&++c>=a&&s()};setTimeout(function(){c<a&&s()},i+1),t.addEventListener(u,l)}var Br=/\b(transform|all)(,|$)/;function Wr(t,e){var n,r=window.getComputedStyle(t),o=r[Tr+"Delay"].split(", "),i=r[Tr+"Duration"].split(", "),a=Vr(o,i),u=r[Ir+"Delay"].split(", "),c=r[Ir+"Duration"].split(", "),s=Vr(u,c),l=0,f=0;return e===Pr?a>0&&(n=Pr,l=a,f=i.length):e===$r?s>0&&(n=$r,l=s,f=c.length):f=(n=(l=Math.max(a,s))>0?a>s?Pr:$r:null)?n===Pr?i.length:c.length:0,{type:n,timeout:l,propCount:f,hasTransform:n===Pr&&Br.test(r[Tr+"Property"])}}function Vr(t,e){for(;t.length<e.length;)t=t.concat(t);return Math.max.apply(null,e.map(function(e,n){return Hr(e)+Hr(t[n])}))}function Hr(t){return 1e3*Number(t.slice(0,-1))}function qr(t,e){var n=t.elm;i(n._leaveCb)&&(n._leaveCb.cancelled=!0,n._leaveCb());var r=Sr(t.data.transition);if(!o(r)&&!i(n._enterCb)&&1===n.nodeType){for(var a=r.css,u=r.type,s=r.enterClass,l=r.enterToClass,f=r.enterActiveClass,d=r.appearClass,p=r.appearToClass,v=r.appearActiveClass,b=r.beforeEnter,y=r.enter,g=r.afterEnter,m=r.enterCancelled,x=r.beforeAppear,_=r.appear,w=r.afterAppear,k=r.appearCancelled,C=r.duration,O=xe,j=xe.$vnode;j&&j.parent;)O=(j=j.parent).context;var S=!O._isMounted||!t.isRootInsert;if(!S||_||""===_){var E=S&&d?d:s,A=S&&v?v:f,P=S&&p?p:l,$=S&&x||b,T=S&&"function"==typeof _?_:y,M=S&&w||g,I=S&&k||m,D=h(c(C)?C.enter:C);0;var z=!1!==a&&!K,N=Gr(T),F=n._enterCb=R(function(){z&&(Fr(n,P),Fr(n,A)),F.cancelled?(z&&Fr(n,E),I&&I(n)):M&&M(n),n._enterCb=null});t.data.show||ue(t,"insert",function(){var e=n.parentNode,r=e&&e._pending&&e._pending[t.key];r&&r.tag===t.tag&&r.elm._leaveCb&&r.elm._leaveCb(),T&&T(n,F)}),$&&$(n),z&&(Nr(n,E),Nr(n,A),zr(function(){Fr(n,E),F.cancelled||(Nr(n,P),N||(Xr(D)?setTimeout(F,D):Lr(n,u,F)))})),t.data.show&&(e&&e(),T&&T(n,F)),z||N||F()}}}function Ur(t,e){var n=t.elm;i(n._enterCb)&&(n._enterCb.cancelled=!0,n._enterCb());var r=Sr(t.data.transition);if(o(r)||1!==n.nodeType)return e();if(!i(n._leaveCb)){var a=r.css,u=r.type,s=r.leaveClass,l=r.leaveToClass,f=r.leaveActiveClass,d=r.beforeLeave,p=r.leave,v=r.afterLeave,b=r.leaveCancelled,y=r.delayLeave,g=r.duration,m=!1!==a&&!K,x=Gr(p),_=h(c(g)?g.leave:g);0;var w=n._leaveCb=R(function(){n.parentNode&&n.parentNode._pending&&(n.parentNode._pending[t.key]=null),m&&(Fr(n,l),Fr(n,f)),w.cancelled?(m&&Fr(n,s),b&&b(n)):(e(),v&&v(n)),n._leaveCb=null});y?y(k):k()}function k(){w.cancelled||(t.data.show||((n.parentNode._pending||(n.parentNode._pending={}))[t.key]=t),d&&d(n),m&&(Nr(n,s),Nr(n,f),zr(function(){Fr(n,s),w.cancelled||(Nr(n,l),x||(Xr(_)?setTimeout(w,_):Lr(n,u,w)))})),p&&p(n,w),m||x||w())}}function Xr(t){return"number"==typeof t&&!isNaN(t)}function Gr(t){if(o(t))return!1;var e=t.fns;return i(e)?Gr(Array.isArray(e)?e[0]:e):(t._length||t.length)>1}function Jr(t,e){!0!==e.data.show&&qr(e)}var Kr=function(t){var e,n,r={},c=t.modules,s=t.nodeOps;for(e=0;e<Wn.length;++e)for(r[Wn[e]]=[],n=0;n<c.length;++n)i(c[n][Wn[e]])&&r[Wn[e]].push(c[n][Wn[e]]);function l(t){var e=s.parentNode(t);i(e)&&s.removeChild(e,t)}function f(t,e,n,o,u,c,l){if(i(t.elm)&&i(c)&&(t=c[l]=yt(t)),t.isRootInsert=!u,!function(t,e,n,o){var u=t.data;if(i(u)){var c=i(t.componentInstance)&&u.keepAlive;if(i(u=u.hook)&&i(u=u.init)&&u(t,!1,n,o),i(t.componentInstance))return d(t,e),a(c)&&function(t,e,n,o){for(var a,u=t;u.componentInstance;)if(u=u.componentInstance._vnode,i(a=u.data)&&i(a=a.transition)){for(a=0;a<r.activate.length;++a)r.activate[a](Bn,u);e.push(u);break}p(n,t.elm,o)}(t,e,n,o),!0}}(t,e,n,o)){var f=t.data,v=t.children,b=t.tag;i(b)?(t.elm=t.ns?s.createElementNS(t.ns,b):s.createElement(b,t),g(t),h(t,v,e),i(f)&&y(t,e),p(n,t.elm,o)):a(t.isComment)?(t.elm=s.createComment(t.text),p(n,t.elm,o)):(t.elm=s.createTextNode(t.text),p(n,t.elm,o))}}function d(t,e){i(t.data.pendingInsert)&&(e.push.apply(e,t.data.pendingInsert),t.data.pendingInsert=null),t.elm=t.componentInstance.$el,b(t)?(y(t,e),g(t)):(Ln(t),e.push(t))}function p(t,e,n){i(t)&&(i(n)?n.parentNode===t&&s.insertBefore(t,e,n):s.appendChild(t,e))}function h(t,e,n){if(Array.isArray(e))for(var r=0;r<e.length;++r)f(e[r],n,t.elm,null,!0,e,r);else u(t.text)&&s.appendChild(t.elm,s.createTextNode(String(t.text)))}function b(t){for(;t.componentInstance;)t=t.componentInstance._vnode;return i(t.tag)}function y(t,n){for(var o=0;o<r.create.length;++o)r.create[o](Bn,t);i(e=t.data.hook)&&(i(e.create)&&e.create(Bn,t),i(e.insert)&&n.push(t))}function g(t){var e;if(i(e=t.fnScopeId))s.setStyleScope(t.elm,e);else for(var n=t;n;)i(e=n.context)&&i(e=e.$options._scopeId)&&s.setStyleScope(t.elm,e),n=n.parent;i(e=xe)&&e!==t.context&&e!==t.fnContext&&i(e=e.$options._scopeId)&&s.setStyleScope(t.elm,e)}function m(t,e,n,r,o,i){for(;r<=o;++r)f(n[r],i,t,e,!1,n,r)}function x(t){var e,n,o=t.data;if(i(o))for(i(e=o.hook)&&i(e=e.destroy)&&e(t),e=0;e<r.destroy.length;++e)r.destroy[e](t);if(i(e=t.children))for(n=0;n<t.children.length;++n)x(t.children[n])}function _(t,e,n,r){for(;n<=r;++n){var o=e[n];i(o)&&(i(o.tag)?(w(o),x(o)):l(o.elm))}}function w(t,e){if(i(e)||i(t.data)){var n,o=r.remove.length+1;for(i(e)?e.listeners+=o:e=function(t,e){function n(){0==--n.listeners&&l(t)}return n.listeners=e,n}(t.elm,o),i(n=t.componentInstance)&&i(n=n._vnode)&&i(n.data)&&w(n,e),n=0;n<r.remove.length;++n)r.remove[n](t,e);i(n=t.data.hook)&&i(n=n.remove)?n(t,e):e()}else l(t.elm)}function k(t,e,n,r){for(var o=n;o<r;o++){var a=e[o];if(i(a)&&Vn(t,a))return o}}function C(t,e,n,u){if(t!==e){var c=e.elm=t.elm;if(a(t.isAsyncPlaceholder))i(e.asyncFactory.resolved)?S(t.elm,e,n):e.isAsyncPlaceholder=!0;else if(a(e.isStatic)&&a(t.isStatic)&&e.key===t.key&&(a(e.isCloned)||a(e.isOnce)))e.componentInstance=t.componentInstance;else{var l,d=e.data;i(d)&&i(l=d.hook)&&i(l=l.prepatch)&&l(t,e);var p=t.children,h=e.children;if(i(d)&&b(e)){for(l=0;l<r.update.length;++l)r.update[l](t,e);i(l=d.hook)&&i(l=l.update)&&l(t,e)}o(e.text)?i(p)&&i(h)?p!==h&&function(t,e,n,r,a){for(var u,c,l,d=0,p=0,h=e.length-1,v=e[0],b=e[h],y=n.length-1,g=n[0],x=n[y],w=!a;d<=h&&p<=y;)o(v)?v=e[++d]:o(b)?b=e[--h]:Vn(v,g)?(C(v,g,r),v=e[++d],g=n[++p]):Vn(b,x)?(C(b,x,r),b=e[--h],x=n[--y]):Vn(v,x)?(C(v,x,r),w&&s.insertBefore(t,v.elm,s.nextSibling(b.elm)),v=e[++d],x=n[--y]):Vn(b,g)?(C(b,g,r),w&&s.insertBefore(t,b.elm,v.elm),b=e[--h],g=n[++p]):(o(u)&&(u=Hn(e,d,h)),o(c=i(g.key)?u[g.key]:k(g,e,d,h))?f(g,r,t,v.elm,!1,n,p):Vn(l=e[c],g)?(C(l,g,r),e[c]=void 0,w&&s.insertBefore(t,l.elm,v.elm)):f(g,r,t,v.elm,!1,n,p),g=n[++p]);d>h?m(t,o(n[y+1])?null:n[y+1].elm,n,p,y,r):p>y&&_(0,e,d,h)}(c,p,h,n,u):i(h)?(i(t.text)&&s.setTextContent(c,""),m(c,null,h,0,h.length-1,n)):i(p)?_(0,p,0,p.length-1):i(t.text)&&s.setTextContent(c,""):t.text!==e.text&&s.setTextContent(c,e.text),i(d)&&i(l=d.hook)&&i(l=l.postpatch)&&l(t,e)}}}function O(t,e,n){if(a(n)&&i(t.parent))t.parent.data.pendingInsert=e;else for(var r=0;r<e.length;++r)e[r].data.hook.insert(e[r])}var j=v("attrs,class,staticClass,staticStyle,key");function S(t,e,n,r){var o,u=e.tag,c=e.data,s=e.children;if(r=r||c&&c.pre,e.elm=t,a(e.isComment)&&i(e.asyncFactory))return e.isAsyncPlaceholder=!0,!0;if(i(c)&&(i(o=c.hook)&&i(o=o.init)&&o(e,!0),i(o=e.componentInstance)))return d(e,n),!0;if(i(u)){if(i(s))if(t.hasChildNodes())if(i(o=c)&&i(o=o.domProps)&&i(o=o.innerHTML)){if(o!==t.innerHTML)return!1}else{for(var l=!0,f=t.firstChild,p=0;p<s.length;p++){if(!f||!S(f,s[p],n,r)){l=!1;break}f=f.nextSibling}if(!l||f)return!1}else h(e,s,n);if(i(c)){var v=!1;for(var b in c)if(!j(b)){v=!0,y(e,n);break}!v&&c.class&&ne(c.class)}}else t.data!==e.text&&(t.data=e.text);return!0}return function(t,e,n,u,c,l){if(!o(e)){var d=!1,p=[];if(o(t))d=!0,f(e,p,c,l);else{var h=i(t.nodeType);if(!h&&Vn(t,e))C(t,e,p,u);else{if(h){if(1===t.nodeType&&t.hasAttribute(D)&&(t.removeAttribute(D),n=!0),a(n)&&S(t,e,p))return O(e,p,!0),t;t=function(t){return new pt(s.tagName(t).toLowerCase(),{},[],void 0,t)}(t)}var v=t.elm,y=s.parentNode(v);if(f(e,p,v._leaveCb?null:y,s.nextSibling(v)),i(e.parent))for(var g=e.parent,m=b(e);g;){for(var w=0;w<r.destroy.length;++w)r.destroy[w](g);if(g.elm=e.elm,m){for(var k=0;k<r.create.length;++k)r.create[k](Bn,g);var j=g.data.hook.insert;if(j.merged)for(var E=1;E<j.fns.length;E++)j.fns[E]()}else Ln(g);g=g.parent}i(y)?_(0,[t],0,0):i(t.tag)&&x(t)}}return O(e,p,d),e.elm}i(t)&&x(t)}}({nodeOps:Nn,modules:[er,or,lr,pr,Cr,q?{create:Jr,activate:Jr,remove:function(t,e){!0!==t.data.show?Ur(t,e):e()}}:{}].concat(Zn)});K&&document.addEventListener("selectionchange",function(){var t=document.activeElement;t&&t.vmodel&&oo(t,"input")});var Zr={inserted:function(t,e,n,r){"select"===n.tag?(r.elm&&!r.elm._vOptions?ue(n,"postpatch",function(){Zr.componentUpdated(t,e,n)}):Yr(t,e,n.context),t._vOptions=[].map.call(t.options,eo)):("textarea"===n.tag||zn(t.type))&&(t._vModifiers=e.modifiers,e.modifiers.lazy||(t.addEventListener("compositionstart",no),t.addEventListener("compositionend",ro),t.addEventListener("change",ro),K&&(t.vmodel=!0)))},componentUpdated:function(t,e,n){if("select"===n.tag){Yr(t,e,n.context);var r=t._vOptions,o=t._vOptions=[].map.call(t.options,eo);if(o.some(function(t,e){return!M(t,r[e])}))(t.multiple?e.value.some(function(t){return to(t,o)}):e.value!==e.oldValue&&to(e.value,o))&&oo(t,"change")}}};function Yr(t,e,n){Qr(t,e,n),(J||Z)&&setTimeout(function(){Qr(t,e,n)},0)}function Qr(t,e,n){var r=e.value,o=t.multiple;if(!o||Array.isArray(r)){for(var i,a,u=0,c=t.options.length;u<c;u++)if(a=t.options[u],o)i=I(r,eo(a))>-1,a.selected!==i&&(a.selected=i);else if(M(eo(a),r))return void(t.selectedIndex!==u&&(t.selectedIndex=u));o||(t.selectedIndex=-1)}}function to(t,e){return e.every(function(e){return!M(e,t)})}function eo(t){return"_value"in t?t._value:t.value}function no(t){t.target.composing=!0}function ro(t){t.target.composing&&(t.target.composing=!1,oo(t.target,"input"))}function oo(t,e){var n=document.createEvent("HTMLEvents");n.initEvent(e,!0,!0),t.dispatchEvent(n)}function io(t){return!t.componentInstance||t.data&&t.data.transition?t:io(t.componentInstance._vnode)}var ao={model:Zr,show:{bind:function(t,e,n){var r=e.value,o=(n=io(n)).data&&n.data.transition,i=t.__vOriginalDisplay="none"===t.style.display?"":t.style.display;r&&o?(n.data.show=!0,qr(n,function(){t.style.display=i})):t.style.display=r?i:"none"},update:function(t,e,n){var r=e.value;!r!=!e.oldValue&&((n=io(n)).data&&n.data.transition?(n.data.show=!0,r?qr(n,function(){t.style.display=t.__vOriginalDisplay}):Ur(n,function(){t.style.display="none"})):t.style.display=r?t.__vOriginalDisplay:"none")},unbind:function(t,e,n,r,o){o||(t.style.display=t.__vOriginalDisplay)}}},uo={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function co(t){var e=t&&t.componentOptions;return e&&e.Ctor.options.abstract?co(pe(e.children)):t}function so(t){var e={},n=t.$options;for(var r in n.propsData)e[r]=t[r];var o=n._parentListeners;for(var i in o)e[w(i)]=o[i];return e}function lo(t,e){if(/\d-keep-alive$/.test(e.tag))return t("keep-alive",{props:e.componentOptions.propsData})}var fo={name:"transition",props:uo,abstract:!0,render:function(t){var e=this,n=this.$slots.default;if(n&&(n=n.filter(function(t){return t.tag||de(t)})).length){0;var r=this.mode;0;var o=n[0];if(function(t){for(;t=t.parent;)if(t.data.transition)return!0}(this.$vnode))return o;var i=co(o);if(!i)return o;if(this._leaving)return lo(t,o);var a="__transition-"+this._uid+"-";i.key=null==i.key?i.isComment?a+"comment":a+i.tag:u(i.key)?0===String(i.key).indexOf(a)?i.key:a+i.key:i.key;var c=(i.data||(i.data={})).transition=so(this),s=this._vnode,l=co(s);if(i.data.directives&&i.data.directives.some(function(t){return"show"===t.name})&&(i.data.show=!0),l&&l.data&&!function(t,e){return e.key===t.key&&e.tag===t.tag}(i,l)&&!de(l)&&(!l.componentInstance||!l.componentInstance._vnode.isComment)){var f=l.data.transition=E({},c);if("out-in"===r)return this._leaving=!0,ue(f,"afterLeave",function(){e._leaving=!1,e.$forceUpdate()}),lo(t,o);if("in-out"===r){if(de(i))return s;var d,p=function(){d()};ue(c,"afterEnter",p),ue(c,"enterCancelled",p),ue(f,"delayLeave",function(t){d=t})}}return o}}},po=E({tag:String,moveClass:String},uo);function ho(t){t.elm._moveCb&&t.elm._moveCb(),t.elm._enterCb&&t.elm._enterCb()}function vo(t){t.data.newPos=t.elm.getBoundingClientRect()}function bo(t){var e=t.data.pos,n=t.data.newPos,r=e.left-n.left,o=e.top-n.top;if(r||o){t.data.moved=!0;var i=t.elm.style;i.transform=i.WebkitTransform="translate("+r+"px,"+o+"px)",i.transitionDuration="0s"}}delete po.mode;var yo={Transition:fo,TransitionGroup:{props:po,render:function(t){for(var e=this.tag||this.$vnode.data.tag||"span",n=Object.create(null),r=this.prevChildren=this.children,o=this.$slots.default||[],i=this.children=[],a=so(this),u=0;u<o.length;u++){var c=o[u];if(c.tag)if(null!=c.key&&0!==String(c.key).indexOf("__vlist"))i.push(c),n[c.key]=c,(c.data||(c.data={})).transition=a;else;}if(r){for(var s=[],l=[],f=0;f<r.length;f++){var d=r[f];d.data.transition=a,d.data.pos=d.elm.getBoundingClientRect(),n[d.key]?s.push(d):l.push(d)}this.kept=t(e,null,s),this.removed=l}return t(e,null,i)},beforeUpdate:function(){this.__patch__(this._vnode,this.kept,!1,!0),this._vnode=this.kept},updated:function(){var t=this.prevChildren,e=this.moveClass||(this.name||"v")+"-move";t.length&&this.hasMove(t[0].elm,e)&&(t.forEach(ho),t.forEach(vo),t.forEach(bo),this._reflow=document.body.offsetHeight,t.forEach(function(t){if(t.data.moved){var n=t.elm,r=n.style;Nr(n,e),r.transform=r.WebkitTransform=r.transitionDuration="",n.addEventListener(Mr,n._moveCb=function t(r){r&&!/transform$/.test(r.propertyName)||(n.removeEventListener(Mr,t),n._moveCb=null,Fr(n,e))})}}))},methods:{hasMove:function(t,e){if(!Ar)return!1;if(this._hasMove)return this._hasMove;var n=t.cloneNode();t._transitionClasses&&t._transitionClasses.forEach(function(t){jr(n,t)}),Or(n,e),n.style.display="none",this.$el.appendChild(n);var r=Wr(n);return this.$el.removeChild(n),this._hasMove=r.hasTransform}}}};dn.config.mustUseProp=function(t,e,n){return"value"===n&&_n(t)&&"button"!==e||"selected"===n&&"option"===t||"checked"===n&&"input"===t||"muted"===n&&"video"===t},dn.config.isReservedTag=Rn,dn.config.isReservedAttr=xn,dn.config.getTagNamespace=function(t){return In(t)?"svg":"math"===t?"math":void 0},dn.config.isUnknownElement=function(t){if(!q)return!0;if(Rn(t))return!1;if(t=t.toLowerCase(),null!=Dn[t])return Dn[t];var e=document.createElement(t);return t.indexOf("-")>-1?Dn[t]=e.constructor===window.HTMLUnknownElement||e.constructor===window.HTMLElement:Dn[t]=/HTMLUnknownElement/.test(e.toString())},E(dn.options.directives,ao),E(dn.options.components,yo),dn.prototype.__patch__=q?Kr:P,dn.prototype.$mount=function(t,e){return function(t,e,n){return t.$el=e,t.$options.render||(t.$options.render=vt),ke(t,"beforeMount"),new Te(t,function(){t._update(t._render(),n)},P,null,!0),n=!1,null==t.$vnode&&(t._isMounted=!0,ke(t,"mounted")),t}(this,t=t&&q?function(t){if("string"==typeof t){var e=document.querySelector(t);return e||document.createElement("div")}return t}(t):void 0,e)},q&&setTimeout(function(){F.devtools&&rt&&rt.emit("init",dn)},0),e.default=dn}.call(this,n(18),n(182).setImmediate)},function(t,e){var n=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(t,e,n){"use strict";
/**
  * vue-class-component v6.3.2
  * (c) 2015-present Evan You
  * @license MIT
  */Object.defineProperty(e,"__esModule",{value:!0});var r=function(t){return t&&"object"==typeof t&&"default"in t?t.default:t}(n(5)),o="undefined"!=typeof Reflect&&Reflect.defineMetadata;function i(t,e,n){(n?Reflect.getOwnMetadataKeys(e,n):Reflect.getOwnMetadataKeys(e)).forEach(function(r){var o=n?Reflect.getOwnMetadata(r,e,n):Reflect.getOwnMetadata(r,e);n?Reflect.defineMetadata(r,o,t,n):Reflect.defineMetadata(r,o,t)})}var a={__proto__:[]}instanceof Array;var u=["data","beforeCreate","created","beforeMount","mounted","beforeDestroy","destroyed","beforeUpdate","updated","activated","deactivated","render","errorCaptured"];function c(t,e){void 0===e&&(e={}),e.name=e.name||t._componentTag||t.name;var n=t.prototype;Object.getOwnPropertyNames(n).forEach(function(t){if("constructor"!==t)if(u.indexOf(t)>-1)e[t]=n[t];else{var r=Object.getOwnPropertyDescriptor(n,t);void 0!==r.value?"function"==typeof r.value?(e.methods||(e.methods={}))[t]=r.value:(e.mixins||(e.mixins=[])).push({data:function(){var e;return(e={})[t]=r.value,e}}):(r.get||r.set)&&((e.computed||(e.computed={}))[t]={get:r.get,set:r.set})}}),(e.mixins||(e.mixins=[])).push({data:function(){return function(t,e){var n=e.prototype._init;e.prototype._init=function(){var e=this,n=Object.getOwnPropertyNames(t);if(t.$options.props)for(var r in t.$options.props)t.hasOwnProperty(r)||n.push(r);n.forEach(function(n){"_"!==n.charAt(0)&&Object.defineProperty(e,n,{get:function(){return t[n]},set:function(e){t[n]=e},configurable:!0})})};var r=new e;e.prototype._init=n;var o={};return Object.keys(r).forEach(function(t){void 0!==r[t]&&(o[t]=r[t])}),o}(this,t)}});var c=t.__decorators__;c&&(c.forEach(function(t){return t(e)}),delete t.__decorators__);var s=Object.getPrototypeOf(t.prototype),l=s instanceof r?s.constructor:r,f=l.extend(e);return function(t,e,n){Object.getOwnPropertyNames(e).forEach(function(r){if("prototype"!==r){var o=Object.getOwnPropertyDescriptor(t,r);if(!o||o.configurable){var i=Object.getOwnPropertyDescriptor(e,r);if(!a){if("cid"===r)return;var u=Object.getOwnPropertyDescriptor(n,r);if(!function(t){var e=typeof t;return null==t||"object"!==e&&"function"!==e}(i.value)&&u&&u.value===i.value)return}0,Object.defineProperty(t,r,i)}}})}(f,t,l),o&&function(t,e){i(t,e),Object.getOwnPropertyNames(e.prototype).forEach(function(n){i(t.prototype,e.prototype,n)}),Object.getOwnPropertyNames(e).forEach(function(n){i(t,e,n)})}(f,t),f}function s(t){return"function"==typeof t?c(t):function(e){return c(e,t)}}s.registerHooks=function(t){u.push.apply(u,t)},e.default=s,e.createDecorator=function(t){return function(e,n,r){var o="function"==typeof e?e:e.constructor;o.__decorators__||(o.__decorators__=[]),"number"!=typeof r&&(r=void 0),o.__decorators__.push(function(e){return t(e,n,r)})}},e.mixins=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return r.extend({mixins:t})}},function(t,e){var n={}.hasOwnProperty;t.exports=function(t,e){return n.call(t,e)}},function(t,e,n){var r=n(290),o=n(295);t.exports=function(t,e){var n=o(t,e);return r(n)?n:void 0}},function(t,e,n){"use strict";e.__esModule=!0;var r=function(t){return t&&t.__esModule?t:{default:t}}(n(218));e.default=r.default||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t}},function(t,e,n){"use strict";e.__esModule=!0;var r=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}(n(1)),o=n(2);var i=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r.__extends(e,t),e.prototype.dispatch=function(t,e,n){for(var r=this.$parent||this.$root,o=r.$options.name;r&&(!o||o!==t);)(r=r.$parent)&&(o=r.$options.name);r&&r.$emit.apply(r,[e].concat(n))},e.prototype.broadcast=function(t,e,n){(function t(e,n,r){this.$children.forEach(function(o){o.$options.name===e?o.$emit.apply(o,[n].concat(r)):t.apply(o,[e,n].concat([r]))})}).call(this,t,e,n)},e=r.__decorate([o.Component],e)}(o.Vue);e.default=i},function(t,e,n){var r=n(13),o=n(29);t.exports=n(14)?function(t,e,n){return r.f(t,e,o(1,n))}:function(t,e,n){return t[e]=n,t}},function(t,e,n){var r=n(28),o=n(148),i=n(98),a=Object.defineProperty;e.f=n(14)?Object.defineProperty:function(t,e,n){if(r(t),e=i(e,!0),r(n),o)try{return a(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(t[e]=n.value),t}},function(t,e,n){t.exports=!n(23)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(t,e,n){var r=n(151),o=n(99);t.exports=function(t){return r(o(t))}},function(t,e,n){var r=n(102)("wks"),o=n(32),i=n(6).Symbol,a="function"==typeof i;(t.exports=function(t){return r[t]||(r[t]=a&&i[t]||(a?i:o)("Symbol."+t))}).store=r},function(t,e){t.exports=function(t){var e=[];return e.toString=function(){return this.map(function(e){var n=function(t,e){var n=t[1]||"",r=t[3];if(!r)return n;if(e&&"function"==typeof btoa){var o=function(t){return"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(t))))+" */"}(r),i=r.sources.map(function(t){return"/*# sourceURL="+r.sourceRoot+t+" */"});return[n].concat(i).concat([o]).join("\n")}return[n].join("\n")}(e,t);return e[2]?"@media "+e[2]+"{"+n+"}":n}).join("")},e.i=function(t,n){"string"==typeof t&&(t=[[null,t,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];"number"==typeof i&&(r[i]=!0)}for(o=0;o<t.length;o++){var a=t[o];"number"==typeof a[0]&&r[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),e.push(a))}},e}},function(t,e){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){"use strict";e.__esModule=!0;var r=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}(n(1)),o=n(208),i=n(2);var a=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r.__extends(e,t),e.prototype.t=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return o.t.apply(this,t)},e=r.__decorate([i.Component],e)}(i.Vue);e.default=a},function(t,e,n){"use strict";e.__esModule=!0,e.dimensionMap=e.MutationObserver=void 0,e.camelcaseToHyphen=function(t){return t.replace(/([a-z])([A-Z])/g,"$1-$2").toLowerCase()},e.getScrollBarSize=function(t){if(a)return 0;if(t||void 0===i){var e=document.createElement("div");e.style.width="100%",e.style.height="200px";var n=document.createElement("div"),r=n.style;r.position="absolute",r.top="0",r.left="0",r.pointerEvents="none",r.visibility="hidden",r.width="200px",r.height="150px",r.overflow="hidden",n.appendChild(e),document.body.appendChild(n);var o=e.offsetWidth;n.style.overflow="scroll";var u=e.offsetWidth;o===u&&(u=n.clientWidth),document.body.removeChild(n),i=o-u}return i},e.getStyle=function(t,e){if(!t||!e)return"";"float"===(e=function(t){return t.replace(u,function(t,e,n,r){return r?n.toUpperCase():n}).replace(c,"Moz$1")}(e))&&(e="cssFloat");try{var n=window.getComputedStyle(t,"");return t.style[e]||n?n[e]:null}catch(n){return t.style[e]}},e.warnProp=function(t,e,n,r){n=(0,o.upperFirst)(n),r=(0,o.upperFirst)(r),console.error("[XBUI warn]: Invalid prop: type check failed for prop "+e+". Expected "+n+", got "+r+". (found in component: "+t+")")},e.scrollTop=function(t,e,n,r){void 0===e&&(e=0);void 0===r&&(r=500);window.requestAnimationFrame||(window.requestAnimationFrame=window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.msRequestAnimationFrame||function(t){return window.setTimeout(t,1e3/60)});var o=Math.abs(e-n),i=Math.ceil(o/r*50);!function e(n,r,o){if(n===r)return;var i=n+o>r?r:n+o;n>r&&(i=n-o<r?r:n-o);t===window?window.scrollTo(i,i):t.scrollTop=i;window.requestAnimationFrame(function(){return e(i,r,o)})}(e,n,i)},e.findComponentUpward=function(t,e){var n=t.$parent,r=n.$options.name;for(;n&&(!r||n.$options.name!==e);)(n=n.$parent)&&(r=n.$options.name);return n},e.findComponentDownward=function t(e,n){var r=e.$children;var o;if(r.length)for(var i=0,a=r;i<a.length;i++){var u=a[i],c=u.$options.name;if(c===n){o=u;break}if(o=t(u,n))break}return o},e.findComponentsDownward=function t(e,n){return e.$children.reduce(function(e,r){r.$options.name===n&&e.push(r);var o=t(r,n);return e.concat(o)},[])},e.findComponentsUpward=function t(e,n){var r=[];var o=e.$parent;return o?(o.$options.name===n&&r.push(o),r.concat(t(o,n))):[]},e.findBrothersComponents=function(t,e,n){void 0===n&&(n=!0);var r=t.$parent.$children.filter(function(t){return t.$options.name===e}),o=r.findIndex(function(e){return e._uid===t._uid});n&&r.splice(o,1);return r},e.hasClass=l,e.addClass=function(t,e){if(!t)return;for(var n=t.className,r=(e||"").split(" "),o=0,i=r.length;o<i;o++){var a=r[o];a&&(t.classList?t.classList.add(a):l(t,a)||(n+=" "+a))}t.classList||(t.className=n)},e.removeClass=function(t,e){if(!t||!e)return;for(var n=e.split(" "),r=" "+t.className+" ",o=0,i=n.length;o<i;o++){var a=n[o];a&&(t.classList?t.classList.remove(a):l(t,a)&&(r=r.replace(" "+a+" "," ")))}t.classList||(t.className=s(r))};var r=function(t){return t&&t.__esModule?t:{default:t}}(n(5)),o=n(145);var i,a=r.default.prototype.$isServer;e.MutationObserver=!a&&(window.MutationObserver||window.WebKitMutationObserver||window.MozMutationObserver||!1);var u=/([\:\-\_]+(.))/g,c=/^moz([A-Z])/;var s=function(t){return(t||"").replace(/^[\s\uFEFF]+|[\s\uFEFF]+$/g,"")};function l(t,e){if(!t||!e)return!1;if(-1!==e.indexOf(" "))throw new Error("className should not contain space.");return t.classList?t.classList.contains(e):(" "+t.className+" ").indexOf(" "+e+" ")>-1}e.dimensionMap={xs:"480px",sm:"768px",md:"992px",lg:"1200px",xl:"1600px"}},function(t,e){var n=t.exports={version:"2.5.7"};"number"==typeof __e&&(__e=n)},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e){t.exports=function(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}},function(t,e){t.exports=function(t){return null!=t&&"object"==typeof t}},function(t,e,n){var r={},o=function(t){var e;return function(){return void 0===e&&(e=t.apply(this,arguments)),e}}(function(){return window&&document&&document.all&&!window.atob}),i=function(t){var e={};return function(t){if(void 0===e[t]){var n=function(t){return document.querySelector(t)}.call(this,t);if(n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}}(),a=null,u=0,c=[],s=n(190);function l(t,e){for(var n=0;n<t.length;n++){var o=t[n],i=r[o.id];if(i){i.refs++;for(var a=0;a<i.parts.length;a++)i.parts[a](o.parts[a]);for(;a<o.parts.length;a++)i.parts.push(b(o.parts[a],e))}else{var u=[];for(a=0;a<o.parts.length;a++)u.push(b(o.parts[a],e));r[o.id]={id:o.id,refs:1,parts:u}}}}function f(t,e){for(var n=[],r={},o=0;o<t.length;o++){var i=t[o],a=e.base?i[0]+e.base:i[0],u={css:i[1],media:i[2],sourceMap:i[3]};r[a]?r[a].parts.push(u):n.push(r[a]={id:a,parts:[u]})}return n}function d(t,e){var n=i(t.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=c[c.length-1];if("top"===t.insertAt)r?r.nextSibling?n.insertBefore(e,r.nextSibling):n.appendChild(e):n.insertBefore(e,n.firstChild),c.push(e);else if("bottom"===t.insertAt)n.appendChild(e);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=i(t.insertInto+" "+t.insertAt.before);n.insertBefore(e,o)}}function p(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var e=c.indexOf(t);e>=0&&c.splice(e,1)}function h(t){var e=document.createElement("style");return t.attrs.type="text/css",v(e,t.attrs),d(t,e),e}function v(t,e){Object.keys(e).forEach(function(n){t.setAttribute(n,e[n])})}function b(t,e){var n,r,o,i;if(e.transform&&t.css){if(!(i=e.transform(t.css)))return function(){};t.css=i}if(e.singleton){var c=u++;n=a||(a=h(e)),r=g.bind(null,n,c,!1),o=g.bind(null,n,c,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(t){var e=document.createElement("link");return t.attrs.type="text/css",t.attrs.rel="stylesheet",v(e,t.attrs),d(t,e),e}(e),r=function(t,e,n){var r=n.css,o=n.sourceMap,i=void 0===e.convertToAbsoluteUrls&&o;(e.convertToAbsoluteUrls||i)&&(r=s(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var a=new Blob([r],{type:"text/css"}),u=t.href;t.href=URL.createObjectURL(a),u&&URL.revokeObjectURL(u)}.bind(null,n,e),o=function(){p(n),n.href&&URL.revokeObjectURL(n.href)}):(n=h(e),r=function(t,e){var n=e.css,r=e.media;r&&t.setAttribute("media",r);if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){p(n)});return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else o()}}t.exports=function(t,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=o()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var n=f(t,e);return l(n,e),function(t){for(var o=[],i=0;i<n.length;i++){var a=n[i];(u=r[a.id]).refs--,o.push(u)}t&&l(f(t,e),e);for(i=0;i<o.length;i++){var u;if(0===(u=o[i]).refs){for(var c=0;c<u.parts.length;c++)u.parts[c]();delete r[u.id]}}}};var y=function(){var t=[];return function(e,n){return t[e]=n,t.filter(Boolean).join("\n")}}();function g(t,e,n,r){var o=n?"":r.css;if(t.styleSheet)t.styleSheet.cssText=y(e,o);else{var i=document.createTextNode(o),a=t.childNodes;a[e]&&t.removeChild(a[e]),a.length?t.insertBefore(i,a[e]):t.appendChild(i)}}},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,e,n){var r=n(22);t.exports=function(t){if(!r(t))throw TypeError(t+" is not an object!");return t}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e,n){var r=n(150),o=n(103);t.exports=Object.keys||function(t){return r(t,o)}},function(t,e){t.exports=!0},function(t,e){var n=0,r=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++n+r).toString(36))}},function(t,e){e.f={}.propertyIsEnumerable},function(t,e,n){"use strict";e.__esModule=!0,e.xbIcon=void 0;var r=function(t){return t&&t.__esModule?t:{default:t}}(n(252));e.default=r.default;e.xbIcon={install:function(t){t.component("XbIcon",r.default)}}},function(t,e,n){var r=n(280),o=n(281),i=n(282),a=n(283),u=n(284);function c(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}c.prototype.clear=r,c.prototype.delete=o,c.prototype.get=i,c.prototype.has=a,c.prototype.set=u,t.exports=c},function(t,e,n){var r=n(162);t.exports=function(t,e){for(var n=t.length;n--;)if(r(t[n][0],e))return n;return-1}},function(t,e,n){var r=n(110),o=n(291),i=n(292),a="[object Null]",u="[object Undefined]",c=r?r.toStringTag:void 0;t.exports=function(t){return null==t?void 0===t?u:a:c&&c in Object(t)?o(t):i(t)}},function(t,e,n){var r=n(9)(Object,"create");t.exports=r},function(t,e,n){var r=n(305);t.exports=function(t,e){var n=t.__data__;return r(e)?n["string"==typeof e?"string":"hash"]:n.map}},function(t,e,n){var r=n(166),o=n(167);t.exports=function(t,e,n,i){var a=!n;n||(n={});for(var u=-1,c=e.length;++u<c;){var s=e[u],l=i?i(n[s],t[s],s,n,t):void 0;void 0===l&&(l=t[s]),a?o(n,s,l):r(n,s,l)}return n}},function(t,e,n){"use strict";n.r(e);var r=n(42),o=n.n(r);for(var i in r)"default"!==i&&function(t){n.d(e,t,function(){return r[t]})}(i);e.default=o.a},function(t,e,n){"use strict";e.__esModule=!0;var r=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}(n(1)),o=n(2),i=function(t){return t&&t.__esModule?t:{default:t}}(n(186));var a=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r.__extends(e,t),e=r.__decorate([(0,o.Component)({components:{mainHeader:i.default}})],e)}(o.Vue);e.default=a},function(t,e,n){"use strict";n.r(e);var r=n(44),o=n.n(r);for(var i in r)"default"!==i&&function(t){n.d(e,t,function(){return r[t]})}(i);e.default=o.a},function(t,e,n){"use strict";e.__esModule=!0;var r=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}(n(1)),o=n(2),i=function(t){return t&&t.__esModule?t:{default:t}}(n(144));var a=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.headerConf=i.default,e}return r.__extends(e,t),e=r.__decorate([(0,o.Component)({})],e)}(o.Vue);e.default=a},function(t,e,n){var r=n(189);"string"==typeof r&&(r=[[t.i,r,""]]);var o={hmr:!0,transform:void 0};n(26)(r,o);r.locals&&(t.exports=r.locals)},function(t,e,n){var r=n(192);"string"==typeof r&&(r=[[t.i,r,""]]);var o={hmr:!0,transform:void 0};n(26)(r,o);r.locals&&(t.exports=r.locals)},function(t,e,n){"use strict";n.r(e);var r=n(48),o=n.n(r);for(var i in r)"default"!==i&&function(t){n.d(e,t,function(){return r[t]})}(i);e.default=o.a},function(t,e,n){"use strict";e.__esModule=!0;var r=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}(n(1)),o=n(2);var i=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.isExpand=!1,e}return r.__extends(e,t),e.prototype.toggle=function(){this.isExpand=!this.isExpand},e=r.__decorate([o.Component],e)}(o.Vue);e.default=i},function(t,e,n){var r=n(199);"string"==typeof r&&(r=[[t.i,r,""]]);var o={hmr:!0,transform:void 0};n(26)(r,o);r.locals&&(t.exports=r.locals)},function(t,e,n){"use strict";n.r(e);var r=n(51),o=n.n(r);for(var i in r)"default"!==i&&function(t){n.d(e,t,function(){return r[t]})}(i);e.default=o.a},function(t,e,n){"use strict";e.__esModule=!0;var r=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}(n(1)),o=n(2),i=function(t){return t&&t.__esModule?t:{default:t}}(n(19));var a=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r.__extends(e,t),e.prototype.handleClick=function(t){this.$emit("click",t)},Object.defineProperty(e.prototype,"classes",{get:function(){var t;return[(t={},t["xbui-button"]=!0,t["xbui-button-"+this.size]=!0,t["xbui-button-disabled"]=this.disabled,t["xbui-button-"+this.type]="default"!==this.size,t["xbui-button-long"]=this.long,t)]},enumerable:!0,configurable:!0}),r.__decorate([(0,o.Prop)({type:String,default:"default"})],e.prototype,"type",void 0),r.__decorate([(0,o.Prop)({type:String,default:"medium"})],e.prototype,"size",void 0),r.__decorate([(0,o.Prop)()],e.prototype,"icon",void 0),r.__decorate([(0,o.Prop)({type:Boolean,default:!1})],e.prototype,"disabled",void 0),r.__decorate([(0,o.Prop)({type:Boolean,default:!1})],e.prototype,"long",void 0),e=r.__decorate([(0,o.Component)({mixins:[i.default]})],e)}(o.Vue);e.default=a},function(t,e,n){"use strict";n.r(e);var r=n(53),o=n.n(r);for(var i in r)"default"!==i&&function(t){n.d(e,t,function(){return r[t]})}(i);e.default=o.a},function(t,e,n){"use strict";e.__esModule=!0;var r=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}(n(1)),o=n(2),i=n(20),a=function(t){return t&&t.__esModule?t:{default:t}}(n(11));var u=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.currentValue=e.value,e.childrens=[],e}return r.__extends(e,t),e.prototype.mounted=function(){this.updateModel(!0)},e.prototype.onValueChange=function(){this.updateModel(!0)},e.prototype.updateModel=function(t){if(this.childrens=(0,i.findComponentsDownward)(this,"Checkbox"),this.childrens){var e=this.value;this.childrens.forEach(function(n){n.model=e,t&&(n.currentValue=e.indexOf(n.label)>=0,n.group=!0)})}},e.prototype.change=function(t){this.currentValue=t,this.$emit("input",t),this.$emit("on-change",t),this.dispatch("FormItem","on-form-change",t)},Object.defineProperty(e.prototype,"classes",{get:function(){var t;return["xbui-checkbox-group",(t={},t["xbui-checkbox-"+this.size]=!!this.size,t)]},enumerable:!0,configurable:!0}),r.__decorate([(0,o.Prop)({type:Array,default:function(){return[]}})],e.prototype,"value",void 0),r.__decorate([(0,o.Prop)({type:String,default:"medium",validator:function(t){return["small","medium","large"].includes(t)}})],e.prototype,"size",void 0),r.__decorate([(0,o.Watch)("value")],e.prototype,"onValueChange",null),e=r.__decorate([(0,o.Component)({name:"XbCheckboxGroup"})],e)}((0,o.Mixins)(a.default));e.default=u},function(t,e,n){"use strict";n.r(e);var r=n(55),o=n.n(r);for(var i in r)"default"!==i&&function(t){n.d(e,t,function(){return r[t]})}(i);e.default=o.a},function(t,e,n){"use strict";e.__esModule=!0;var r=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}(n(1)),o=n(2),i=n(20),a=function(t){return t&&t.__esModule?t:{default:t}}(n(11));var u="xbui-checkbox",c=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.group=!1,e.model=[],e.currentValue=e.value,e.showSlot=!0,e.focusInner=!1,e}return r.__extends(e,t),e.prototype.mounted=function(){this.parent=(0,i.findComponentUpward)(this,"XbCheckboxGroup"),this.parent&&(this.group=!0),this.group?this.parent.updateModel(!0):(this.updateModel(),this.showSlot=void 0!==this.$slots.default)},e.prototype.updateModel=function(){this.currentValue=this.value===this.trueValue},e.prototype.change=function(t){if(this.disabled)return!1;var e=t.target.checked;this.currentValue=e;var n=e?this.trueValue:this.falseValue;this.$emit("input",n),this.group?this.parent.change(this.model):(this.$emit("on-change",n),this.dispatch("FormItem","on-form-change",n))},e.prototype.onBlur=function(){this.focusInner=!1},e.prototype.onFocus=function(){this.focusInner=!0},e.prototype.onValueChanged=function(t){if(t!==this.trueValue&&t!==this.falseValue)throw new Error("Value should be trueValue or falseValue.");this.updateModel()},Object.defineProperty(e.prototype,"wrapClasses",{get:function(){var t;return[u+"-wrapper",(t={},t[u+"-group-item"]=this.group,t[u+"-wrapper-checked"]=this.currentValue,t[u+"-wrapper-disabled"]=this.disabled,t)]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"checkboxClasses",{get:function(){var t;return[""+u,(t={},t[u+"-checked"]=this.currentValue,t[u+"-disabled"]=this.disabled,t[u+"-indeterminate"]=this.indeterminate,t)]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"innerClasses",{get:function(){return[u+"-inner"]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"inputClasses",{get:function(){return u+"-input"},enumerable:!0,configurable:!0}),r.__decorate([(0,o.Prop)({type:[String,Number,Boolean],default:!1})],e.prototype,"value",void 0),r.__decorate([(0,o.Prop)({type:[String,Number,Boolean],default:""})],e.prototype,"label",void 0),r.__decorate([(0,o.Prop)({type:Boolean,default:!1})],e.prototype,"indeterminate",void 0),r.__decorate([(0,o.Prop)({type:[String,Number,Boolean],default:!0})],e.prototype,"trueValue",void 0),r.__decorate([(0,o.Prop)({type:[String,Number,Boolean],default:!1})],e.prototype,"falseValue",void 0),r.__decorate([(0,o.Prop)({type:Boolean,default:!1})],e.prototype,"disabled",void 0),r.__decorate([(0,o.Prop)({type:String,default:"medium",validator:function(t){return["small","medium","large"].includes(t)}})],e.prototype,"size",void 0),r.__decorate([(0,o.Prop)({type:String})],e.prototype,"name",void 0),r.__decorate([(0,o.Watch)("value")],e.prototype,"onValueChanged",null),e=r.__decorate([(0,o.Component)({name:"XbCheckBox",mixins:[a.default]})],e)}((0,o.Mixins)(a.default));e.default=c},function(t,e,n){"use strict";n.r(e);var r=n(57),o=n.n(r);for(var i in r)"default"!==i&&function(t){n.d(e,t,function(){return r[t]})}(i);e.default=o.a},function(t,e,n){"use strict";e.__esModule=!0;var r=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}(n(1)),o=n(2);var i=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r.__extends(e,t),e=r.__decorate([(0,o.Component)({name:"XbColor"})],e)}(o.Vue);e.default=i},function(t,e,n){"use strict";n.r(e);var r=n(59),o=n.n(r);for(var i in r)"default"!==i&&function(t){n.d(e,t,function(){return r[t]})}(i);e.default=o.a},function(t,e,n){"use strict";e.__esModule=!0;var r=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}(n(1)),o=n(2),i=u(n(11)),a=u(n(365));function u(t){return t&&t.__esModule?t:{default:t}}var c="xbui-form-item";function s(t,e){for(var n=t,r=(e=(e=e.replace(/\[(\w+)\]/g,".$1")).replace(/^\./,"")).split("."),o=0,i=r.length;o<i-1;++o){var a=r[o];if(!(a in n))throw new Error("[XbUI warn]: please transfer a valid prop path to form item!");n=n[a]}return{o:n,k:r[o],v:n[r[o]]}}var l=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.prefixCls=c,e.isRequired=!1,e.validateState="",e.validateMessage="",e.validateDisabled=!1,e.validator={},e}return r.__extends(e,t),Object.defineProperty(e.prototype,"classes",{get:function(){var t;return[""+c,(t={},t[c+"-required"]=this.required||this.isRequired,t[c+"-error"]="error"===this.validateState,t[c+"-validating"]="validating"===this.validateState,t)]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"fieldValue",{get:function(){var t=this.form.model;if(t&&this.prop){var e=this.prop;return-1!==e.indexOf(":")&&(e=e.replace(/:/,".")),s(t,e).v}},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"labelStyles",{get:function(){var t={},e=0===this.labelWidth||this.labelWidth?this.labelWidth:this.form.labelWidth;return(e||0===e)&&(t.width=e+"px"),t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"contentStyles",{get:function(){var t={},e=0===this.labelWidth||this.labelWidth?this.labelWidth:this.form.labelWidth;return(e||0===e)&&(t.marginLeft=e+"px"),t},enumerable:!0,configurable:!0}),e.prototype.onErrorChanged=function(t){this.validateMessage=t,this.validateState=""===t?"":"error"},e.prototype.onValidateStatusChanged=function(t){this.validateState=t},e.prototype.onRulesChanged=function(t){this.setRules()},e.prototype.setRules=function(){var t=this,e=this.getRules();e.length&&this.required||(e.length?e.every(function(e){t.isRequired=e.required}):this.required&&(this.isRequired=this.required),this.$off("on-form-blur",this.onFieldBlur),this.$off("on-form-change",this.onFieldChange),this.$on("on-form-blur",this.onFieldBlur),this.$on("on-form-change",this.onFieldChange))},e.prototype.getRules=function(){var t=this.form.rules,e=this.rules;return t=t?t[this.prop]:[],[].concat(e||t||[])},e.prototype.getFilteredRule=function(t){return this.getRules().filter(function(e){return!e.trigger||-1!==e.trigger.indexOf(t)})},e.prototype.validate=function(t,e){var n=this;void 0===e&&(e=function(t){});var r=this.getFilteredRule(t);if(!r||0===r.length){if(!this.required)return e(),!0;r=[{required:!0}]}this.validateState="validating";var o={};o[this.prop]=r;var i=new a.default(o),u={};u[this.prop]=this.fieldValue,i.validate(u,{firstFields:!0},function(t){n.validateState=t?"error":"success",n.validateMessage=t?t[0].message:"",e(n.validateMessage)}),this.validateDisabled=!1},e.prototype.resetField=function(){this.validateState="",this.validateMessage="";var t=this.form.model,e=this.fieldValue,n=this.prop;-1!==n.indexOf(":")&&(n=n.replace(/:/,"."));var r=s(t,n);Array.isArray(e)?(this.validateDisabled=!0,r.o[r.k]=[].concat(this.initialValue)):(this.validateDisabled=!0,r.o[r.k]=this.initialValue)},e.prototype.onFieldBlur=function(){this.validate("blur")},e.prototype.onFieldChange=function(){this.validateDisabled?this.validateDisabled=!1:this.validate("change")},e.prototype.mounted=function(){this.prop&&(this.dispatch("XbForm","on-form-item-add",this),Object.defineProperty(this,"initialValue",{value:this.fieldValue}),this.setRules())},e.prototype.beforeDestroy=function(){this.dispatch("XbForm","on-form-item-remove",this)},r.__decorate([(0,o.Prop)({type:String,default:""})],e.prototype,"label",void 0),r.__decorate([(0,o.Prop)(Number)],e.prototype,"labelWidth",void 0),r.__decorate([(0,o.Prop)(String)],e.prototype,"prop",void 0),r.__decorate([(0,o.Prop)({type:Boolean,default:!1})],e.prototype,"required",void 0),r.__decorate([(0,o.Prop)({type:[Object,Array]})],e.prototype,"rules",void 0),r.__decorate([(0,o.Prop)(String)],e.prototype,"error",void 0),r.__decorate([(0,o.Prop)(Boolean)],e.prototype,"validateStatus",void 0),r.__decorate([(0,o.Prop)({type:Boolean,default:!0})],e.prototype,"showMessage",void 0),r.__decorate([(0,o.Prop)(String)],e.prototype,"labelFor",void 0),r.__decorate([(0,o.Inject)()],e.prototype,"form",void 0),r.__decorate([(0,o.Watch)("error")],e.prototype,"onErrorChanged",null),r.__decorate([(0,o.Watch)("validateStatus")],e.prototype,"onValidateStatusChanged",null),r.__decorate([(0,o.Watch)("rules")],e.prototype,"onRulesChanged",null),e=r.__decorate([(0,o.Component)({name:"XbFormItem",mixins:[i.default]})],e)}((0,o.Mixins)(i.default));e.default=l},function(t,e,n){"use strict";n.r(e);var r=n(61),o=n.n(r);for(var i in r)"default"!==i&&function(t){n.d(e,t,function(){return r[t]})}(i);e.default=o.a},function(t,e,n){"use strict";e.__esModule=!0;var r=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}(n(1)),o=n(2);var i=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.autocomplete="off",e.form=e,e.fields=[],e}return r.__extends(e,t),Object.defineProperty(e.prototype,"classes",{get:function(){var t;return["xbui-form","xbui-form-label-"+this.labelPosition,(t={},t["xbui-form-inline"]=this.inline,t)]},enumerable:!0,configurable:!0}),e.prototype.created=function(){var t=this;this.$on("on-form-item-add",function(e){return e&&t.fields.push(e),!1}),this.$on("on-form-item-remove",function(e){return e.prop&&t.fields.splice(t.fields.indexOf(e),1),!1})},e.prototype.resetFields=function(){this.fields.forEach(function(t){t.resetFeild()})},e.prototype.validate=function(t){var e=this;return new Promise(function(n){var r=e.fields.map(function(t){return new Promise(function(e){t.validate("",function(t,e){n(t)})})});Promise.all(r).then(function(e){var r=e.every(function(t){return!!t});n(r),"function"==typeof t&&t(r)})})},e.prototype.validateField=function(t,e){var n=this.fields.filter(function(e){return e.prop===t})[0];if(!n)throw new Error("[xbUI warn]: must call validateField with valid prop string!");n.validate("",e)},e.prototype.onRulesChanged=function(t){this.validate(function(){})},r.__decorate([(0,o.Prop)(Object)],e.prototype,"model",void 0),r.__decorate([(0,o.Prop)(Object)],e.prototype,"rules",void 0),r.__decorate([(0,o.Prop)(Number)],e.prototype,"labelWidth",void 0),r.__decorate([(0,o.Prop)({type:String,validator:function(t){return["left","right","top"].includes(t)},default:"right"})],e.prototype,"labelPosition",void 0),r.__decorate([(0,o.Prop)({type:Boolean,default:!0})],e.prototype,"inline",void 0),r.__decorate([(0,o.Prop)({type:Boolean,default:!0})],e.prototype,"showMessage",void 0),r.__decorate([(0,o.Prop)({type:String,validator:function(t){return["on","off"].includes(t)},default:"off"})],e.prototype,"autocomplete",void 0),r.__decorate([(0,o.Provide)()],e.prototype,"form",void 0),r.__decorate([(0,o.Watch)("rules")],e.prototype,"onRulesChanged",null),e=r.__decorate([(0,o.Component)({name:"XbForm"})],e)}(o.Vue);e.default=i},function(t,e,n){"use strict";n.r(e);var r=n(63),o=n.n(r);for(var i in r)"default"!==i&&function(t){n.d(e,t,function(){return r[t]})}(i);e.default=o.a},function(t,e,n){"use strict";e.__esModule=!0;var r=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}(n(1)),o=n(2);var i=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r.__extends(e,t),Object.defineProperty(e.prototype,"classes",{get:function(){return"xb-icon-"+this.type},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"styles",{get:function(){var t={};return/^[0-9]*$/.test(this.size)?t["font-size"]=this.size+"px":t["font-size"]=""+this.size,this.color&&(t.color=""+this.color),t},enumerable:!0,configurable:!0}),r.__decorate([(0,o.Prop)({type:String})],e.prototype,"type",void 0),r.__decorate([(0,o.Prop)()],e.prototype,"size",void 0),r.__decorate([(0,o.Prop)({type:String})],e.prototype,"color",void 0),e=r.__decorate([o.Component],e)}(o.Vue);e.default=i},function(t,e,n){"use strict";n.r(e);var r=n(65),o=n.n(r);for(var i in r)"default"!==i&&function(t){n.d(e,t,function(){return r[t]})}(i);e.default=o.a},function(t,e,n){"use strict";e.__esModule=!0;var r=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}(n(1)),o=n(2);var i="xbui-input-number",a=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.num=e.firstNum,e.showNum=0,e}return r.__extends(e,t),e.prototype.addValue=function(t){if(!t){this.num=this.num?parseInt(String(this.num)):0;var e;this.showNum=this.num,e=this.num==this.max?this.max:this.num+parseInt(String(this.step)),this.inputChange(e)}},e.prototype.subtractValue=function(t){if(!t){this.num=this.num?parseInt(String(this.num)):0;var e;this.showNum=this.num,e=this.num==this.min?this.min:this.num-parseInt(String(this.step)),this.inputChange(e)}},e.prototype.inputChange=function(t){var e=/^(-)?[0-9]*$/;this.regExp?new RegExp(this.regExp).test(t)&&new RegExp(e).test(t)?t>this.max||t<this.min?this.num=this.showNum:(this.num=t,this.showNum=t):this.num=this.showNum:new RegExp(e).test(t)?t>this.max||t<this.min?this.num=this.showNum:(this.num=t,this.showNum=t):this.num=this.showNum,this.changeInput(this.num)},e.prototype.focus=function(){this.showNum=this.num},e.prototype.changeInput=function(t){},e.prototype.changeNumType=function(t){t=parseInt(String(t))},Object.defineProperty(e.prototype,"wholeClasses",{get:function(){return[i+"-whole-div"]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"inputDivClasses",{get:function(){return[i+"-input-div"]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"inputClasses",{get:function(){var t;return[i+"-input",(t={},t[i+"-input-disabled"]=this.disabled,t)]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"arrowDivClasses",{get:function(){return[i+"-arrow-div"]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"arrowDownClasses",{get:function(){var t;return[i+"-arrow",i+"-arrow-down",(t={},t[i+"-arrow-disabled"]=this.disabled,t)]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"arrowClasses",{get:function(){var t;return[i+"-arrow",(t={},t[i+"-arrow-disabled"]=this.disabled,t)]},enumerable:!0,configurable:!0}),r.__decorate([(0,o.Prop)({default:1})],e.prototype,"firstNum",void 0),r.__decorate([(0,o.Prop)({default:0})],e.prototype,"min",void 0),r.__decorate([(0,o.Prop)({default:999999999999999})],e.prototype,"max",void 0),r.__decorate([(0,o.Prop)({default:1})],e.prototype,"step",void 0),r.__decorate([(0,o.Prop)()],e.prototype,"regExp",void 0),r.__decorate([(0,o.Prop)()],e.prototype,"inputStyle",void 0),r.__decorate([(0,o.Prop)()],e.prototype,"disabled",void 0),e=r.__decorate([o.Component],e)}(o.Vue);e.default=a},function(t,e,n){"use strict";n.r(e);var r=n(67),o=n.n(r);for(var i in r)"default"!==i&&function(t){n.d(e,t,function(){return r[t]})}(i);e.default=o.a},function(t,e,n){"use strict";e.__esModule=!0;var r=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}(n(1)),o=n(2),i=u(n(19)),a=u(n(34));function u(t){return t&&t.__esModule?t:{default:t}}var c="xbui-loading",s=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.prefixCls=c,e}return r.__extends(e,t),Object.defineProperty(e.prototype,"localeLoadText",{get:function(){return this.loadTxt&&0!=this.loadTxt.length?this.loadTxt:this.t("xb.loading.loadTxt")},enumerable:!0,configurable:!0}),r.__decorate([(0,o.Prop)({type:Boolean})],e.prototype,"loadShow",void 0),r.__decorate([(0,o.Prop)({default:"",type:String})],e.prototype,"loadColor",void 0),r.__decorate([(0,o.Prop)({default:"20px",type:String})],e.prototype,"loadSize",void 0),r.__decorate([(0,o.Prop)({default:!0,type:Boolean})],e.prototype,"showTxt",void 0),r.__decorate([(0,o.Prop)({default:"",type:Boolean})],e.prototype,"loadTxt",void 0),r.__decorate([(0,o.Prop)({default:"fixed",type:String})],e.prototype,"customClass",void 0),e=r.__decorate([(0,o.Component)({components:{XbIcon:a.default}})],e)}((0,o.Mixins)(i.default));e.default=s},function(t,e,n){"use strict";n.r(e);var r=n(69),o=n.n(r);for(var i in r)"default"!==i&&function(t){n.d(e,t,function(){return r[t]})}(i);e.default=o.a},function(t,e,n){"use strict";e.__esModule=!0;var r=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}(n(1)),o=n(2);var i=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.show=!1,e.text="",e.type="",e.closable=!1,e}return r.__extends(e,t),e.prototype.afterLeave=function(){return this.$emit("afterLeave")},e.prototype.closeClick=function(){return this.$emit("close")},e.prototype.methods=function(){this.afterLeave()},e=r.__decorate([o.Component],e)}(o.Vue);e.default=i},function(t,e,n){"use strict";n.r(e);var r=n(71),o=n.n(r);for(var i in r)"default"!==i&&function(t){n.d(e,t,function(){return r[t]})}(i);e.default=o.a},function(t,e,n){"use strict";e.__esModule=!0;var r=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}(n(1)),o=n(2);var i=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r.__extends(e,t),e=r.__decorate([(0,o.Component)({name:"XbPoptip"})],e)}(o.Vue);e.default=i},function(t,e,n){"use strict";n.r(e);var r=n(73),o=n.n(r);for(var i in r)"default"!==i&&function(t){n.d(e,t,function(){return r[t]})}(i);e.default=o.a},function(t,e,n){"use strict";e.__esModule=!0;var r=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}(n(1)),o=n(2),i=l(n(34)),a=l(n(94)),u=l(n(19)),c=l(n(11)),s=l(n(263));function l(t){return t&&t.__esModule?t:{default:t}}var f="xbui-popup-window",d=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.prefixCls=f,e.wrapShow=!1,e.showHead=!0,e.visible=e.value,e.timer=null,e}return r.__extends(e,t),Object.defineProperty(e.prototype,"maskClasses",{get:function(){return f+"-mask"},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"wrapClasses",{get:function(){var t;return[f+"-wrap",(t={},t[f+"-hidden"]=!this.wrapShow,t[""+this.className]=!!this.className,t)]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"classes",{get:function(){return""+f},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"mainStyles",{get:function(){var t={},e=parseInt(this.width),n={width:e<=100?e+"%":e+"px"},r=this.styles?this.styles:{};return Object.assign(t,n,r),t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"localeOkText",{get:function(){return void 0===this.okText?this.t("xb.popupWidow.okText"):this.okText},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"localeCancelText",{get:function(){return void 0===this.cancelText?this.t("xb.popupWidow.cancelText"):this.cancelText},enumerable:!0,configurable:!0}),e.prototype.mounted=function(){this.visible&&(this.wrapShow=!0);var t=!0;void 0!==this.$slots.header||this.title||(t=!1),this.showHead=t},e.prototype.close=function(){this.visible=!1,this.$emit("input",!1),this.$emit("on-cancel")},e.prototype.mask=function(){this.maskClosable&&this.close()},e.prototype.cancel=function(){this.visible=!1,this.$emit("on-cancel")},e.prototype.ok=function(){this.visible=!1,this.$emit("on-ok")},e.prototype.onValueChanged=function(t){this.visible=t},e.prototype.onvisibleChanged=function(t){var e=this;!1===t?(this.timer=setTimeout(function(){e.wrapShow=!1},300),this.removeScrollEffect()):(this.timer&&clearTimeout(this.timer),this.wrapShow=!0,this.scrollable||this.addScrollEffect())},e.prototype.onScrollableChanged=function(t){t?this.removeScrollEffect():this.addScrollEffect()},r.__decorate([(0,o.Prop)({type:Boolean,default:!1})],e.prototype,"value",void 0),r.__decorate([(0,o.Prop)({type:Boolean,default:!0})],e.prototype,"maskClosable",void 0),r.__decorate([(0,o.Prop)({type:Boolean,default:!0})],e.prototype,"closable",void 0),r.__decorate([(0,o.Prop)({type:String})],e.prototype,"title",void 0),r.__decorate([(0,o.Prop)({type:[Number,String],default:520})],e.prototype,"width",void 0),r.__decorate([(0,o.Prop)({type:String})],e.prototype,"okText",void 0),r.__decorate([(0,o.Prop)({type:String})],e.prototype,"cancelText",void 0),r.__decorate([(0,o.Prop)({type:Object})],e.prototype,"styles",void 0),r.__decorate([(0,o.Prop)({type:String})],e.prototype,"className",void 0),r.__decorate([(0,o.Prop)({type:Boolean,default:!1})],e.prototype,"footerHide",void 0),r.__decorate([(0,o.Prop)({type:Boolean,default:!1})],e.prototype,"scrollable",void 0),r.__decorate([(0,o.Watch)("value")],e.prototype,"onValueChanged",null),r.__decorate([(0,o.Watch)("visible")],e.prototype,"onvisibleChanged",null),r.__decorate([(0,o.Watch)("scrollable")],e.prototype,"onScrollableChanged",null),e=r.__decorate([(0,o.Component)({name:"XbPopupWindow",mixins:[c.default,u.default,s.default],components:{XbIcon:i.default,XbButton:a.default}})],e)}(o.Vue);e.default=d},function(t,e,n){"use strict";n.r(e);var r=n(75),o=n.n(r);for(var i in r)"default"!==i&&function(t){n.d(e,t,function(){return r[t]})}(i);e.default=o.a},function(t,e,n){"use strict";e.__esModule=!0;var r=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}(n(1)),o=n(2),i=n(20),a=function(t){return t&&t.__esModule?t:{default:t}}(n(11));var u="xbui-radio-group",c=0,s=Date.now(),l=function(){return"xbRadioGroup_"+s+"_"+c++},f=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.currentValue=e.value,e.childrens=[],e}return r.__extends(e,t),Object.defineProperty(e.prototype,"classes",{get:function(){var t;return[""+u,(t={},t[u+"-"+this.size]=!!this.size,t["xbui-radio-"+this.size]=!!this.size,t[u+"-"+this.type]=!!this.type,t[u+"-vertical"]=this.vertical,t)]},enumerable:!0,configurable:!0}),e.prototype.mounted=function(){this.updateValue()},e.prototype.updateValue=function(){var t=this;this.childrens=(0,i.findComponentsDownward)(this,"XbRadio"),this.childrens&&this.childrens.forEach(function(e){e.currentValue=t.value===e.label,e.group=!0})},e.prototype.change=function(t){this.currentValue=t.value,this.updateValue(),this.$emit("input",t.value),this.$emit("on-change",t.value),this.dispatch("FormItem","on-form-change",t.value)},e.prototype.onValueChange=function(){this.currentValue=this.value,this.updateValue()},r.__decorate([(0,o.Prop)({type:[String,Number],default:""})],e.prototype,"value",void 0),r.__decorate([(0,o.Prop)({type:String,default:"medium",validator:function(t){return["small","medium","large"].includes(t)}})],e.prototype,"size",void 0),r.__decorate([(0,o.Prop)({type:String,validator:function(t){return["button"].includes(t)}})],e.prototype,"type",void 0),r.__decorate([(0,o.Prop)({type:Boolean,default:!1})],e.prototype,"vertical",void 0),r.__decorate([(0,o.Prop)({type:String,default:l})],e.prototype,"name",void 0),r.__decorate([(0,o.Watch)("value")],e.prototype,"onValueChange",null),e=r.__decorate([(0,o.Component)({name:"XbRadioGroup"})],e)}((0,o.Mixins)(a.default));e.default=f},function(t,e,n){"use strict";n.r(e);var r=n(77),o=n.n(r);for(var i in r)"default"!==i&&function(t){n.d(e,t,function(){return r[t]})}(i);e.default=o.a},function(t,e,n){"use strict";e.__esModule=!0;var r=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}(n(1)),o=n(2),i=n(20),a=function(t){return t&&t.__esModule?t:{default:t}}(n(11));var u=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.currentValue=e.value,e.group=!1,e.groupName=e.name,e.focusWrapper=!1,e.focusInner=!1,e}return r.__extends(e,t),Object.defineProperty(e.prototype,"wrapClasses",{get:function(){var t;return["xbui-radio-wrapper",(t={},t["xbui-radio-group-item"]=this.group,t["xbui-radio-wrapper-checked"]=this.currentValue,t["xbui-radio-wrapper-disabled"]=this.disabled,t["xbui-radio-"+this.size]=!!this.size,t["xbui-radio-focus"]=this.focusWrapper,t["xbui-radio-border"]=this.border,t)]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"radioClasses",{get:function(){var t;return["xbui-radio",(t={},t["xbui-radio-checked"]=this.currentValue,t["xbui-radio-disabled"]=this.disabled,t)]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"innerClasses",{get:function(){var t;return["xbui-radio-inner",(t={},t["xbui-radio-focus"]=this.focusInner,t)]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"inputClasses",{get:function(){return"xbui-radio-input"},enumerable:!0,configurable:!0}),e.prototype.mounted=function(){this.parent=(0,i.findComponentUpward)(this,"XbRadioGroup"),this.parent&&(this.group=!0,this.name&&this.name!==this.parent.name||(this.groupName=this.parent.name)),this.group?this.parent.updateValue():this.updateValue()},e.prototype.updateValue=function(){this.currentValue=this.value===this.trueValue},e.prototype.change=function(t){if(this.disabled)return!1;var e=t.target.checked;this.currentValue=e;var n=e?this.trueValue:this.falseValue;this.$emit("input",n),this.group?void 0!==this.label&&this.parent.change({value:this.label,checked:this.value}):(this.$emit("on-change",n),this.dispatch("FormItem","on-form-change",n))},e.prototype.onBlur=function(){this.focusWrapper=!1,this.focusInner=!1},e.prototype.onFocus=function(){this.group&&"button"===this.parent.type?this.focusWrapper=!0:this.focusInner=!0},e.prototype.onValueChanged=function(t){t!==this.trueValue&&t!==this.falseValue||this.updateValue()},r.__decorate([(0,o.Prop)({type:[String,Number,Boolean],default:!1})],e.prototype,"value",void 0),r.__decorate([(0,o.Prop)({type:[String,Number,Boolean],default:!0})],e.prototype,"trueValue",void 0),r.__decorate([(0,o.Prop)({type:[String,Number,Boolean],default:!1})],e.prototype,"falseValue",void 0),r.__decorate([(0,o.Prop)({type:[String,Number]})],e.prototype,"label",void 0),r.__decorate([(0,o.Prop)({type:Boolean,default:!1})],e.prototype,"disabled",void 0),r.__decorate([(0,o.Prop)({type:Boolean,default:!1})],e.prototype,"border",void 0),r.__decorate([(0,o.Prop)({type:String,default:"medium",validator:function(t){return["small","medium","large"].includes(t)}})],e.prototype,"size",void 0),r.__decorate([(0,o.Prop)({type:String,default:""})],e.prototype,"name",void 0),r.__decorate([(0,o.Watch)("value")],e.prototype,"onValueChanged",null),e=r.__decorate([(0,o.Component)({name:"XbRadio",mixins:[a.default]})],e)}((0,o.Mixins)(a.default));e.default=u},function(t,e,n){"use strict";n.r(e);var r=n(79),o=n.n(r);for(var i in r)"default"!==i&&function(t){n.d(e,t,function(){return r[t]})}(i);e.default=o.a},function(t,e,n){"use strict";e.__esModule=!0;var r=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}(n(1)),o=n(2);var i="xbui-search-btn",a=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.value="",e}return r.__extends(e,t),e.prototype.handleClick=function(){this.$emit("click",this.value)},Object.defineProperty(e.prototype,"classesDiv",{get:function(){var t;return[i+"-div",(t={},t[i+"-div-large"]="large"===this.size,t[i+"-div-medium"]="medium"===this.size,t[i+"-div-small"]="small"===this.size,t)]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"classesInput",{get:function(){return[i+"-input"]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"classesSearchDiv",{get:function(){var t;return[i+"-icon-div",(t={},t[i+"-icon-show"]=!1===this.hidden,t)]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"classesSearchDivHidden",{get:function(){var t;return[i+"-icon-div",(t={},t[i+"-icon-hidden"]=!0===this.hidden,t)]},enumerable:!0,configurable:!0}),r.__decorate([(0,o.Prop)({default:"请输入..."})],e.prototype,"placeholder",void 0),r.__decorate([(0,o.Prop)()],e.prototype,"inputStyle",void 0),r.__decorate([(0,o.Prop)({default:"medium"})],e.prototype,"size",void 0),r.__decorate([(0,o.Prop)({default:!1})],e.prototype,"hidden",void 0),e=r.__decorate([(0,o.Component)({name:"XbSearchBtn"})],e)}(o.Vue);e.default=a},function(t,e,n){"use strict";n.r(e);var r=n(81),o=n.n(r);for(var i in r)"default"!==i&&function(t){n.d(e,t,function(){return r[t]})}(i);e.default=o.a},function(t,e,n){"use strict";e.__esModule=!0;var r=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}(n(1)),o=n(2),i=v(n(272)),a=v(n(274)),u=v(n(277)),c=n(95),s=n(20),l=v(n(161)),f=v(n(348)),d=v(n(19)),p=v(n(349)),h=n(360);function v(t){return t&&t.__esModule?t:{default:t}}var b="xbui-table",y=1,g=1,m=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.colsWithId=e.makeColumnsId(e.columns),e.ready=!1,e.tableWidth=0,e.columnsWidth={},e.prefixCls=b,e.compiledUids=[],e.objData=e.makeObjData(),e.rebuildData=[],e.cloneColumns=e.makeColumns(e.colsWithId),e.columnRows=(0,h.convertToRows)(e.colsWithId,!1),e.leftFixedColumnRows=(0,h.convertToRows)(e.colsWithId,"left"),e.rightFixedColumnRows=(0,h.convertToRows)(e.colsWithId,"right"),e.allColumns=(0,h.getAllColumns)(e.colsWithId),e.showSlotHeader=!0,e.showSlotFooter=!0,e.bodyHeight=0,e.scrollBarWidth=(0,s.getScrollBarSize)(!1),e.currentContext=e.context,e.cloneData=(0,l.default)(e.data),e.showVerticalScrollBar=!1,e.showHorizontalScrollBar=!1,e.headerWidth=0,e.headerHeight=0,e}return r.__extends(e,t),Object.defineProperty(e.prototype,"localeNoDataText",{get:function(){return void 0===this.noDataText?this.t("i.table.noDataText"):this.noDataText},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"localeNoFilteredDataText",{get:function(){return void 0===this.noFilteredDataText?this.t("i.table.noFilteredDataText"):this.noFilteredDataText},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"wrapClasses",{get:function(){var t;return[b+"-wrapper",(t={},t[b+"-hide"]=!this.ready,t[b+"-with-header"]=this.showSlotHeader,t[b+"-with-footer"]=this.showSlotFooter,t)]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"classes",{get:function(){var t;return[""+b,(t={},t[b+"-"+this.size]=!!this.size,t[b+"-border"]=this.border,t[b+"-stripe"]=this.stripe,t[b+"-with-fixed-top"]=!!this.height,t)]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"fixedHeaderClasses",{get:function(){var t;return[b+"-fixed-header",(t={},t[b+"-fixed-header-with-empty"]=!this.rebuildData.length,t)]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"styles",{get:function(){var t={};if(this.height){var e=parseInt(this.height+"",10);t.height=e+"px"}return this.width&&(t.width=this.width+"px"),t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"tableStyle",{get:function(){var t={};if(0!==this.tableWidth){var e=0;e=0===this.bodyHeight?this.tableWidth:this.tableWidth-(this.showVerticalScrollBar?this.scrollBarWidth:0),t.width=e+"px"}return t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"tableHeaderStyle",{get:function(){var t={};return 0!==this.tableWidth&&(t.width=this.tableWidth+"px"),t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"fixedTableStyle",{get:function(){var t={},e=0;return this.leftFixedColumns.forEach(function(t){t.fixed&&"left"===t.fixed&&(e+=t._width)}),t.width=e+"px",t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"fixedRightTableStyle",{get:function(){var t={},e=0;return this.rightFixedColumns.forEach(function(t){t.fixed&&"right"===t.fixed&&(e+=t._width)}),t.width=e+"px",t.right=(this.showVerticalScrollBar?this.scrollBarWidth:0)+"px",t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"fixedRightHeaderStyle",{get:function(){var t={},e=0,n=this.headerHeight+1;return this.showVerticalScrollBar&&(e=this.scrollBarWidth),t.width=e+"px",t.height=n+"px",t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"bodyStyle",{get:function(){var t={};if(0!==this.bodyHeight){var e=this.bodyHeight;t.height=e+"px"}return t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"fixedBodyStyle",{get:function(){var t={};if(0!==this.bodyHeight){var e=this.bodyHeight-(this.showHorizontalScrollBar?this.scrollBarWidth:0);t.height=this.showHorizontalScrollBar?e+"px":e-1+"px"}return t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"leftFixedColumns",{get:function(){return(0,h.convertColumnOrder)(this.cloneColumns,"left")},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"rightFixedColumns",{get:function(){return(0,h.convertColumnOrder)(this.cloneColumns,"right")},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"isLeftFixed",{get:function(){return this.columns.some(function(t){return t.fixed&&"left"===t.fixed})},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"isRightFixed",{get:function(){return this.columns.some(function(t){return t.fixed&&"right"===t.fixed})},enumerable:!0,configurable:!0}),e.prototype.rowClsName=function(t){return this.rowClassName(this.data[t],t)},e.prototype.handleResize=function(){var t=this.$el.offsetWidth-1,e={},n=0,r=[],o=[],i=[],a=[];this.cloneColumns.forEach(function(t){t.width?r.push(t):(o.push(t),t.minWidth&&(n+=t.minWidth),t.maxWidth?i.push(t):a.push(t)),t._width=null});var u=t-r.map(function(t){return t.width}).reduce(function(t,e){return t+e},0)-n-(this.showVerticalScrollBar?this.scrollBarWidth:0)-1,c=o.length,s=0;u>0&&c>0&&(s=u/c);for(var l=0,f=this.cloneColumns;l<f.length;l++){var d=s+((v=f[l]).minWidth?v.minWidth:0);v.width?d=v.width:v._width?d=v._width:(v.minWidth>d?d=v.minWidth:v.maxWidth<d&&(d=v.maxWidth),u>0?(u-=d-(v.minWidth?v.minWidth:0),s=--c>0?u/c:0):s=0),v._width=d,e[v._index]={width:d}}if(u>0){s=u/(c=a.length);for(var p=0,h=a;p<h.length;p++){var v;d=(v=h[p])._width+s;s=c>1?(u-=s)/--c:0,v._width=d,e[v._index]={width:d}}}this.tableWidth=this.cloneColumns.map(function(t){return t._width}).reduce(function(t,e){return t+e},0)+(this.showVerticalScrollBar?this.scrollBarWidth:0)+1,this.columnsWidth=e,this.fixedHeader()},e.prototype.handleMouseIn=function(t){this.disabledHover||this.objData[t]._isHover||(this.objData[t]._isHover=!0)},e.prototype.handleMouseOut=function(t){this.disabledHover||(this.objData[t]._isHover=!1)},e.prototype.handleCurrentRow=function(t,e){var n=-1;for(var r in this.objData)this.objData[r]._isHighlight&&(n=parseInt(r,10),this.objData[r]._isHighlight=!1);"highlight"===t&&(this.objData[e]._isHighlight=!0);var o=n<0?null:JSON.parse(JSON.stringify(this.cloneData[n])),i="highlight"===t?JSON.parse(JSON.stringify(this.cloneData[e])):null;this.$emit("on-current-change",i,o)},e.prototype.highlightCurrentRow=function(t){this.highlightRow&&!this.objData[t]._isHighlight&&this.handleCurrentRow("highlight",t)},e.prototype.clearCurrentRow=function(){this.highlightRow&&this.handleCurrentRow("clear")},e.prototype.clickCurrentRow=function(t){this.highlightCurrentRow(t),this.$emit("on-row-click",JSON.parse(JSON.stringify(this.cloneData[t])),t)},e.prototype.dblclickCurrentRow=function(t){this.highlightCurrentRow(t),this.$emit("on-row-dblclick",JSON.parse(JSON.stringify(this.cloneData[t])),t)},e.prototype.getSelection=function(){var t=[];for(var e in this.objData)this.objData[e]._isChecked&&t.push(parseInt(e,10));return JSON.parse(JSON.stringify(this.data.filter(function(e,n){return t.indexOf(n)>-1})))},e.prototype.toggleSelect=function(t){var e={};for(var n in this.objData)if(parseInt(n,10)===t){e=this.objData[n];break}var r=!e._isChecked;this.objData[t]._isChecked=r;var o=this.getSelection();this.$emit(r?"on-select":"on-select-cancel",o,JSON.parse(JSON.stringify(this.data[t]))),this.$emit("on-selection-change",o)},e.prototype.toggleExpand=function(t){var e={};for(var n in this.objData)if(parseInt(n,10)===t){e=this.objData[n];break}var r=!e._isExpanded;this.objData[t]._isExpanded=r,this.$emit("on-expand",JSON.parse(JSON.stringify(this.cloneData[t])),r)},e.prototype.selectAll=function(t){for(var e=0,n=this.rebuildData;e<n.length;e++){var r=n[e];this.objData[r._index]._isDisabled||(this.objData[r._index]._isChecked=t)}var o=this.getSelection();t&&this.$emit("on-select-all",o),this.$emit("on-selection-change",o)},e.prototype.fixedHeader=function(){var t=this;this.height?this.$nextTick(function(){var e=parseInt((0,s.getStyle)(t.$refs.title,"height"),10)||0,n=parseInt((0,s.getStyle)(t.$refs.header,"height"),10)||0,r=parseInt((0,s.getStyle)(t.$refs.footer,"height"),10)||0;t.bodyHeight=Number(t.height)-e-n-r,t.$nextTick(function(){return t.fixedBody()})}):(this.bodyHeight=0,this.$nextTick(function(){return t.fixedBody()}))},e.prototype.fixedBody=function(){if(this.$refs.header&&(this.headerWidth=this.$refs.header.children[0].offsetWidth,this.headerHeight=this.$refs.header.children[0].offsetHeight),this.$refs.tbody&&this.data&&0!==this.data.length){var t=this.$refs.tbody.$el,e=t.parentElement,n=t.offsetHeight,r=e.offsetHeight;this.showHorizontalScrollBar=e.offsetWidth<t.offsetWidth+(this.showVerticalScrollBar?this.scrollBarWidth:0),this.showVerticalScrollBar=!!this.bodyHeight&&r-(this.showHorizontalScrollBar?this.scrollBarWidth:0)<n,this.showVerticalScrollBar?e.classList.add(this.prefixCls+"-overflowY"):e.classList.remove(this.prefixCls+"-overflowY"),this.showHorizontalScrollBar?e.classList.add(this.prefixCls+"-overflowX"):e.classList.remove(this.prefixCls+"-overflowX")}else this.showVerticalScrollBar=!1},e.prototype.hideColumnFilter=function(){this.cloneColumns.forEach(function(t){return t._filterVisible=!1})},e.prototype.handleBodyScroll=function(t){this.showHeader&&(this.$refs.header.scrollLeft=t.target.scrollLeft),this.isLeftFixed&&(this.$refs.fixedBody.scrollTop=t.target.scrollTop),this.isRightFixed&&(this.$refs.fixedRightBody.scrollTop=t.target.scrollTop),this.hideColumnFilter()},e.prototype.handleFixedMousewheel=function(t){var e=t.deltaY;if(!e&&t.detail&&(e=40*t.detail),!e&&t.wheelDeltaY&&(e=-t.wheelDeltaY),!e&&t.wheelDelta&&(e=-t.wheelDelta),e){var n=this.$refs.body,r=n.scrollTop;e<0&&0!==r&&t.preventDefault(),e>0&&n.scrollHeight-n.clientHeight>r&&t.preventDefault();var o=0,i=setInterval(function(){o+=5,e>0?n.scrollTop+=2:n.scrollTop-=2,o>=Math.abs(e)&&clearInterval(i)},5)}},e.prototype.handleMouseWheel=function(t){var e=t.deltaX,n=this.$refs.body;n.scrollLeft=e>0?n.scrollLeft+10:n.scrollLeft-10},e.prototype.sortData=function(t,e,n){var r=this,o=this.cloneColumns[n].key;return t.sort(function(t,i){return r.cloneColumns[n].sortMethod?r.cloneColumns[n].sortMethod(t[o],i[o],e):"asc"===e?t[o]>i[o]?1:-1:"desc"===e?t[o]<i[o]?1:-1:void 0}),t},e.prototype.handleSort=function(t,e){var n=this.GetOriginalIndex(t);this.cloneColumns.forEach(function(t){return t._sortType="normal"});var r=this.cloneColumns[n].key;"custom"!==this.cloneColumns[n].sortable&&(this.rebuildData="normal"===e?this.makeDataWithFilter():this.sortData(this.rebuildData,e,n)),this.cloneColumns[n]._sortType=e,this.$emit("on-sort-change",{column:JSON.parse(JSON.stringify(this.allColumns[this.cloneColumns[n]._index])),key:r,order:e})},e.prototype.handleFilterHide=function(t){this.cloneColumns[t]._isFiltered||(this.cloneColumns[t]._filterChecked=[])},e.prototype.filterData=function(t,e){return t.filter(function(t){if("function"==typeof e.filterRemote)return!0;for(var n=!e._filterChecked.length,r=0,o=e._filterChecked;r<o.length;r++){var i=o[r];if(n=e.filterMethod(i,t))break}return n})},e.prototype.filterOtherData=function(t,e){var n=this,r=this.cloneColumns[e];return"function"==typeof r.filterRemote&&r.filterRemote.call(this.$parent,r._filterChecked,r.key,r),this.cloneColumns.forEach(function(r,o){o!==e&&(t=n.filterData(t,r))}),t},e.prototype.handleFilter=function(t){var e=this.cloneColumns[t],n=this.makeDataWithSort();n=this.filterOtherData(n,t),this.rebuildData=this.filterData(n,e),this.cloneColumns[t]._isFiltered=!0,this.cloneColumns[t]._filterVisible=!1,this.$emit("on-filter-change",e)},e.prototype.GetOriginalIndex=function(t){return this.cloneColumns.findIndex(function(e){return e._index===t})},e.prototype.handleFilterSelect=function(t,e){var n=this.GetOriginalIndex(t);this.cloneColumns[n]._filterChecked=[e],this.handleFilter(n)},e.prototype.handleFilterReset=function(t){var e=this.GetOriginalIndex(t);this.cloneColumns[e]._isFiltered=!1,this.cloneColumns[e]._filterVisible=!1,this.cloneColumns[e]._filterChecked=[];var n=this.makeDataWithSort();n=this.filterOtherData(n,e),this.rebuildData=n,this.$emit("on-filter-change",this.cloneColumns[e])},e.prototype.makeData=function(){var t=(0,l.default)(this.data);return t.forEach(function(t,e){t._index=e,t._rowKey=y++}),t},e.prototype.makeDataWithSort=function(){for(var t=this.makeData(),e="normal",n=-1,r=!1,o=0;o<this.cloneColumns.length;o++)if("normal"!==this.cloneColumns[o]._sortType){e=this.cloneColumns[o]._sortType,n=o,r="custom"===this.cloneColumns[o].sortable;break}return"normal"===e||r||(t=this.sortData(t,e,n)),t},e.prototype.makeDataWithFilter=function(){var t=this,e=this.makeData();return this.cloneColumns.forEach(function(n){return e=t.filterData(e,n)}),e},e.prototype.makeDataWithSortAndFilter=function(){var t=this,e=this.makeDataWithSort();return this.cloneColumns.forEach(function(n){return e=t.filterData(e,n)}),e},e.prototype.makeObjData=function(){var t={};return this.data.forEach(function(e,n){var r=(0,l.default)(e);r._isHover=!1,r._disabled?r._isDisabled=r._disabled:r._isDisabled=!1,r._checked?r._isChecked=r._checked:r._isChecked=!1,r._expanded?r._isExpanded=r._expanded:r._isExpanded=!1,r._highlight?r._isHighlight=r._highlight:r._isHighlight=!1,t[n]=r}),t},e.prototype.makeColumnsId=function(t){var e=this;return t.map(function(t){return"children"in t&&(t.children=e.makeColumnsId(t.children)),t.__id=(0,h.getRandomStr)(6),t})},e.prototype.makeColumns=function(t){var e=[],n=[],r=[];return(0,l.default)((0,h.getAllColumns)(t)).forEach(function(t,o){t._index=o,t._columnKey=g++,t._width=t.width?t.width:"",t._sortType="normal",t._filterVisible=!1,t._isFiltered=!1,t._filterChecked=[],t._filterMultiple=!("filterMultiple"in t)||t.filterMultiple,"filteredValue"in t&&(t._filterChecked=t.filteredValue,t._isFiltered=!0),"sortType"in t&&(t._sortType=t.sortType),t.fixed&&"left"===t.fixed?e.push(t):t.fixed&&"right"===t.fixed?n.push(t):r.push(t)}),e.concat(r).concat(n)},e.prototype.makeColumnRows=function(t,e){return(0,h.convertToRows)(e,t)},e.prototype.exportCsv=function(t){t.filename?-1===t.filename.indexOf(".csv")&&(t.filename+=".csv"):t.filename="table.csv";var e=[],n=[];t.columns&&t.data?(e=t.columns,n=t.data):(e=this.allColumns,"original"in t||(t.original=!0),n=t.original?this.data:this.rebuildData);var r=!1;"noHeader"in t&&(r=t.noHeader);var o=(0,u.default)(e,n,t,r);t.callback?t.callback(o):f.default.download(t.filename,o)},e.prototype.created=function(){this.context||(this.currentContext=this.$parent),this.showSlotHeader=void 0!==this.$slots.header,this.showSlotFooter=void 0!==this.$slots.footer,this.rebuildData=this.makeDataWithSortAndFilter()},e.prototype.mounted=function(){var t=this;this.handleResize(),this.$nextTick(function(){return t.ready=!0}),(0,c.on)(window,"resize",this.handleResize),this.observer=(0,p.default)(),this.observer.listenTo(this.$el,this.handleResize),this.$on("on-visible-change",function(e){e&&t.handleResize()})},e.prototype.beforeDestroy=function(){(0,c.off)(window,"resize",this.handleResize),this.observer.removeListener(this.$el,this.handleResize)},r.__decorate([(0,o.Prop)({type:Array,default:function(){return[]}})],e.prototype,"data",void 0),r.__decorate([(0,o.Prop)({type:Array,default:function(){return[]}})],e.prototype,"columns",void 0),r.__decorate([(0,o.Prop)({type:String,default:"medium",validator:function(t){return["small","medium","large"].includes(t)}})],e.prototype,"size",void 0),r.__decorate([(0,o.Prop)({type:[Number,String]})],e.prototype,"width",void 0),r.__decorate([(0,o.Prop)({type:[Number,String]})],e.prototype,"height",void 0),r.__decorate([(0,o.Prop)({type:Boolean,default:!1})],e.prototype,"stripe",void 0),r.__decorate([(0,o.Prop)({type:Boolean,default:!1})],e.prototype,"border",void 0),r.__decorate([(0,o.Prop)({type:Boolean,default:!0})],e.prototype,"showHeader",void 0),r.__decorate([(0,o.Prop)({type:Boolean,default:!1})],e.prototype,"highlightRow",void 0),r.__decorate([(0,o.Prop)({type:Function,default:function(){return""}})],e.prototype,"rowClassName",void 0),r.__decorate([(0,o.Prop)({type:Object})],e.prototype,"context",void 0),r.__decorate([(0,o.Prop)({type:String})],e.prototype,"noDataText",void 0),r.__decorate([(0,o.Prop)({type:String})],e.prototype,"noFilteredDataText",void 0),r.__decorate([(0,o.Prop)({type:Boolean})],e.prototype,"disabledHover",void 0),r.__decorate([(0,o.Prop)({type:Boolean,default:!1})],e.prototype,"loading",void 0),e=r.__decorate([(0,o.Component)({name:"XbTable",components:{tableHead:i.default,tableBody:a.default}})],e)}((0,o.Mixins)(d.default));e.default=m},function(t,e,n){"use strict";n.r(e);var r=n(83),o=n.n(r);for(var i in r)"default"!==i&&function(t){n.d(e,t,function(){return r[t]})}(i);e.default=o.a},function(t,e,n){"use strict";e.__esModule=!0;var r=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}(n(1)),o=n(2),i=d(n(147)),a=d(n(96)),u=d(n(158)),c=d(n(94)),s=d(n(273)),l=d(n(159)),f=d(n(19));function d(t){return t&&t.__esModule?t:{default:t}}var p=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r.__extends(e,t),Object.defineProperty(e.prototype,"styles",{get:function(){if(this.styleObject.width){var t=Object.assign({},this.styleObject),e=parseInt(this.styleObject.width,10);return t.width=e+"px",t}},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"isSelectAll",{get:function(){var t=!0;this.data.length||(t=!1),this.data.find(function(t){return!t._disabled})||(t=!1);for(var e=0,n=this.data;e<n.length;e++){var r=n[e];if(!this.objData[r._index]._isChecked&&!this.objData[r._index]._isDisabled){t=!1;break}}return t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"headRows",{get:function(){return this.columnRows.length>1?this.fixed?this.fixedColumnRows:this.columnRows:[this.columns]},enumerable:!0,configurable:!0}),e.prototype.cellClasses=function(t){var e;return[this.prefixCls+"-cell",(e={},e[this.prefixCls+"-hidden"]=!this.fixed&&t.fixed&&("left"===t.fixed||"right"===t.fixed),e)]},e.prototype.scrollBarCellClass=function(){for(var t,e=!1,n=0,r=this.headRows;n<r.length;n++)for(var o=0,i=r[n];o<i.length;o++){if("right"===i[o].fixed){e=!0;break}if(e)break}return[(t={},t[this.prefixCls+"-hidden"]=e,t)]},e.prototype.itemClasses=function(t,e){var n;return[this.prefixCls+"-filter-select-item",(n={},n[this.prefixCls+"-filter-select-item-selected"]=t._filterChecked[0]===e.value,n)]},e.prototype.itemAllClasses=function(t){var e;return[this.prefixCls+"-filter-select-item",(e={},e[this.prefixCls+"-filter-select-item-selected"]=!t._filterChecked.length,e)]},e.prototype.selectAll=function(){var t=!this.isSelectAll;this.$parent.selectAll(t)},e.prototype.handleSort=function(t,e){var n=this.columns[t],r=n._index;n._sortType===e&&(e="normal"),this.$parent.handleSort(r,e)},e.prototype.handleSortByHead=function(t){var e=this.columns[t];if(e.sortable){var n=e._sortType;"normal"===n?this.handleSort(t,"asc"):"asc"===n?this.handleSort(t,"desc"):this.handleSort(t,"normal")}},e.prototype.handleFilter=function(t){this.$parent.handleFilter(t)},e.prototype.handleSelect=function(t,e){this.$parent.handleFilterSelect(t,e)},e.prototype.handleReset=function(t){this.$parent.handleFilterReset(t)},e.prototype.handleFilterHide=function(t){this.$parent.handleFilterHide(t)},e.prototype.getColumn=function(t,e){if(this.columnRows.length>1){var n=this.headRows[t][e].__id;return this.columns.filter(function(t){return t.__id===n})[0]}return this.headRows[t][e]},r.__decorate([(0,o.Prop)({type:String})],e.prototype,"prefixCls",void 0),r.__decorate([(0,o.Prop)({type:Object})],e.prototype,"styleObject",void 0),r.__decorate([(0,o.Prop)({type:Array})],e.prototype,"columns",void 0),r.__decorate([(0,o.Prop)({type:Object})],e.prototype,"objData",void 0),r.__decorate([(0,o.Prop)({type:Array})],e.prototype,"data",void 0),r.__decorate([(0,o.Prop)({type:Object})],e.prototype,"columnsWidth",void 0),r.__decorate([(0,o.Prop)({type:[Boolean,String],default:!1})],e.prototype,"fixed",void 0),r.__decorate([(0,o.Prop)({type:Array})],e.prototype,"columnRows",void 0),r.__decorate([(0,o.Prop)({type:Array})],e.prototype,"fixedColumnRows",void 0),e=r.__decorate([(0,o.Component)({name:"XbTableHead",components:{CheckboxGroup:i.default,Checkbox:a.default,Poptip:u.default,Button:c.default,renderHeader:s.default}})],e)}((0,o.Mixins)(l.default,f.default));e.default=p},function(t,e,n){"use strict";n.r(e);var r=n(85),o=n.n(r);for(var i in r)"default"!==i&&function(t){n.d(e,t,function(){return r[t]})}(i);e.default=o.a},function(t,e,n){"use strict";e.__esModule=!0;var r=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}(n(1)),o=n(2),i=s(n(275)),a=s(n(276)),u=s(n(160)),c=s(n(159));function s(t){return t&&t.__esModule?t:{default:t}}var l=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r.__extends(e,t),Object.defineProperty(e.prototype,"expandRender",{get:function(){for(var t=function(){return""},e=0,n=this.columns;e<n.length;e++){var r=n[e];r.type&&"expand"===r.type&&r.render&&(t=r.render)}return t},enumerable:!0,configurable:!0}),e.prototype.rowChecked=function(t){return this.objData[t]&&this.objData[t]._isChecked},e.prototype.rowDisabled=function(t){return this.objData[t]&&this.objData[t]._isDisabled},e.prototype.rowExpanded=function(t){return this.objData[t]&&this.objData[t]._isExpanded},e.prototype.handleMouseIn=function(t){this.$parent.handleMouseIn(t)},e.prototype.handleMouseOut=function(t){this.$parent.handleMouseOut(t)},e.prototype.clickCurrentRow=function(t){this.$parent.clickCurrentRow(t)},e.prototype.dblclickCurrentRow=function(t){this.$parent.dblclickCurrentRow(t)},r.__decorate([(0,o.Prop)({type:String})],e.prototype,"prefixCls",void 0),r.__decorate([(0,o.Prop)({type:Object})],e.prototype,"styleObject",void 0),r.__decorate([(0,o.Prop)({type:Array})],e.prototype,"columns",void 0),r.__decorate([(0,o.Prop)({type:Array})],e.prototype,"data",void 0),r.__decorate([(0,o.Prop)({type:Object})],e.prototype,"objData",void 0),r.__decorate([(0,o.Prop)({type:Object})],e.prototype,"columnsWidth",void 0),r.__decorate([(0,o.Prop)({type:[Boolean,String],default:!1})],e.prototype,"fixed",void 0),e=r.__decorate([(0,o.Component)({name:"XbTableBody",components:{Cell:a.default,Expand:u.default,XbTableTr:i.default}})],e)}((0,o.Mixins)(c.default));e.default=l},function(t,e,n){"use strict";n.r(e);var r=n(87),o=n.n(r);for(var i in r)"default"!==i&&function(t){n.d(e,t,function(){return r[t]})}(i);e.default=o.a},function(t,e,n){"use strict";e.__esModule=!0;var r=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}(n(1)),o=n(2);var i=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r.__extends(e,t),Object.defineProperty(e.prototype,"objData",{get:function(){return this.$parent.objData},enumerable:!0,configurable:!0}),e.prototype.rowClasses=function(t){var e;return[this.prefixCls+"-row",this.rowClsName(t),(e={},e[this.prefixCls+"-row-highlight"]=this.objData[t]&&this.objData[t]._isHighlight,e[this.prefixCls+"-row-hover"]=this.objData[t]&&this.objData[t]._isHover,e)]},e.prototype.rowClsName=function(t){return this.$parent.$parent.rowClassName(this.objData[t],t)},r.__decorate([(0,o.Prop)({type:Object})],e.prototype,"row",void 0),r.__decorate([(0,o.Prop)({type:String})],e.prototype,"prefixCls",void 0),e=r.__decorate([(0,o.Component)({name:"XbTableTr"})],e)}(o.Vue);e.default=i},function(t,e,n){"use strict";n.r(e);var r=n(89),o=n.n(r);for(var i in r)"default"!==i&&function(t){n.d(e,t,function(){return r[t]})}(i);e.default=o.a},function(t,e,n){"use strict";e.__esModule=!0;var r=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}(n(1)),o=n(2),i=c(n(160)),a=c(n(34)),u=c(n(96));function c(t){return t&&t.__esModule?t:{default:t}}var s=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.renderType="",e.uid=-1,e.context=e.$parent.$parent.$parent.currentContext,e}return r.__extends(e,t),Object.defineProperty(e.prototype,"classes",{get:function(){var t;return[this.prefixCls+"-cell",(t={},t[this.prefixCls+"-hidden"]=!this.fixed&&this.column.fixed&&("left"===this.column.fixed||"right"===this.column.fixed),t[this.prefixCls+"-cell-ellipsis"]=this.column.ellipsis||!1,t[this.prefixCls+"-cell-with-expand"]="expand"===this.renderType,t)]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"expandCls",{get:function(){var t;return[this.prefixCls+"-cell-expand",(t={},t[this.prefixCls+"-cell-expand-expanded"]=this.expanded,t)]},enumerable:!0,configurable:!0}),e.prototype.toggleSelect=function(){this.$parent.$parent.$parent.toggleSelect(this.index)},e.prototype.toggleExpand=function(){this.$parent.$parent.$parent.toggleExpand(this.index)},e.prototype.handleClick=function(){},e.prototype.created=function(){"index"===this.column.type?this.renderType="index":"selection"===this.column.type?this.renderType="selection":"html"===this.column.type?this.renderType="html":"expand"===this.column.type?this.renderType="expand":this.column.render?this.renderType="render":this.renderType="normal"},r.__decorate([(0,o.Prop)({type:String})],e.prototype,"prefixCls",void 0),r.__decorate([(0,o.Prop)({type:Object})],e.prototype,"row",void 0),r.__decorate([(0,o.Prop)({type:Object})],e.prototype,"column",void 0),r.__decorate([(0,o.Prop)({type:Number})],e.prototype,"naturalIndex",void 0),r.__decorate([(0,o.Prop)({type:Number})],e.prototype,"index",void 0),r.__decorate([(0,o.Prop)({type:Boolean})],e.prototype,"checked",void 0),r.__decorate([(0,o.Prop)({type:Boolean})],e.prototype,"disabled",void 0),r.__decorate([(0,o.Prop)({type:Boolean})],e.prototype,"expanded",void 0),r.__decorate([(0,o.Prop)({type:[Boolean,String],default:!1})],e.prototype,"fixed",void 0),e=r.__decorate([(0,o.Component)({name:"XbTableCell",components:{Icon:a.default,Checkbox:u.default,Cell:i.default}})],e)}(o.Vue);e.default=s},function(t,e,n){"use strict";n.r(e);var r=n(91),o=n.n(r);for(var i in r)"default"!==i&&function(t){n.d(e,t,function(){return r[t]})}(i);e.default=o.a},function(t,e,n){"use strict";e.__esModule=!0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},o=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}(n(1)),i=n(2);var a=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.num="",e.textValue="",e.showNum=0,e.heightNum=20*e.rows,e}return o.__extends(e,t),e.prototype.inputChange=function(t){if(this.maxNum){var e=/^(0|[1-9]\d*)(\.\d{1,10000}?)?$/;this.regExp?new RegExp(this.regExp).test(t)&&new RegExp(e).test(t)?t>this.maxNum?this.num=this.showNum:(this.num=t,this.showNum=t):this.num=this.showNum:new RegExp(e).test(t)?t>this.maxNum?this.num=this.showNum:(this.num=t,this.showNum=t):this.num=this.showNum}else this.regExp&&(new RegExp(this.regExp).test(t)?(this.num=t,this.showNum=t):this.num=t?this.showNum:"")},e.prototype.textareaChange=function(){if(!0===this.autosize){var t=void 0,e=0;(e=(t=this.$el.querySelector("textarea")).scrollHeight)-this.heightNum>10&&(this.heightNum=e)}else if("object"===r(this.autosize)&&!1===Array.isArray(this.autosize)){t=void 0,e=0;(e=(t=this.$el.querySelector("textarea")).scrollHeight)-this.heightNum>10&&(this.heightNum=e),t.style.minHeight=20*this.autosize.min+10+"px",t.style.maxHeight=20*this.autosize.max+10+"px"}},e.prototype.clearClick=function(){this.num="",this.showNum=0},Object.defineProperty(e.prototype,"classesTextDiv",{get:function(){return["xbui-text-div"]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"classesText",{get:function(){var t;return["xbui-text-input",(t={},t["xbui-text-input-large"]="large"===this.size,t["xbui-text-input-medium"]="medium"===this.size,t["xbui-text-input-small"]="small"===this.size,t["xbui-text-disabled"]=this.disabled,t["xbui-text-clearable"]="clearable"===this.status,t["xbui-text-fail-input"]="fail"===this.status&&!this.suffixIcon,t["xbui-text-left-input"]=this.prefixIcon,t["xbui-text-right-input"]=this.suffixIcon||"clearable"===this.status||"success"===this.status||"fail"===this.status,t)]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"classesTextarea",{get:function(){var t;return["xbui-text-input","xbui-text-textarea",(t={},t["xbui-text-disabled"]=this.disabled,t)]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"classedLeftIcon",{get:function(){return["xbui-text-left-icon"]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"classedRightIcon",{get:function(){return["xbui-text-right-icon"]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"classesCloseIcon",{get:function(){return["xbui-text-close-icon"]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"classesSuccessIcon",{get:function(){return["xbui-text-success-icon"]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"classesFailIcon",{get:function(){return["xbui-text-fail-icon"]},enumerable:!0,configurable:!0}),o.__decorate([(0,i.Prop)({default:"text"})],e.prototype,"type",void 0),o.__decorate([(0,i.Prop)({default:"请输入"})],e.prototype,"placeHolder",void 0),o.__decorate([(0,i.Prop)({default:!1})],e.prototype,"disabled",void 0),o.__decorate([(0,i.Prop)({default:!1})],e.prototype,"readonly",void 0),o.__decorate([(0,i.Prop)({default:""})],e.prototype,"status",void 0),o.__decorate([(0,i.Prop)({default:""})],e.prototype,"prefixIcon",void 0),o.__decorate([(0,i.Prop)({default:""})],e.prototype,"suffixIcon",void 0),o.__decorate([(0,i.Prop)()],e.prototype,"iconStyle",void 0),o.__decorate([(0,i.Prop)()],e.prototype,"inputStyle",void 0),o.__decorate([(0,i.Prop)({default:"medium"})],e.prototype,"size",void 0),o.__decorate([(0,i.Prop)()],e.prototype,"maxlength",void 0),o.__decorate([(0,i.Prop)()],e.prototype,"maxNum",void 0),o.__decorate([(0,i.Prop)()],e.prototype,"regExp",void 0),o.__decorate([(0,i.Prop)({default:2})],e.prototype,"rows",void 0),o.__decorate([(0,i.Prop)({default:!1})],e.prototype,"autosize",void 0),e=o.__decorate([(0,i.Component)({name:"XbText"})],e)}(i.Vue);e.default=a},function(t,e,n){"use strict";n.r(e);var r=n(93),o=n.n(r);for(var i in r)"default"!==i&&function(t){n.d(e,t,function(){return r[t]})}(i);e.default=o.a},function(t,e,n){"use strict";e.__esModule=!0;var r=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}(n(1)),o=n(2),i=n(95);var a=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.instance={},e.randomNumber="",e.defaultConfig={initialFrameHeight:400,serverUrl:"/",UEDITOR_HOME_URL:"./src/assets/ueditor/",toolbars:[["source","undo","redo","bold","italic","underline","strikethrough","subscript","fontborder","superscript","selectall","horizontal","removeformat","time","date","fontsize","paragraph","simpleupload","link","searchreplace","justifyleft","justifyright","justifycenter","justifyjustify","forecolor","insertorderedlist","insertunorderedlist","lineheight","inserttable"]],zIndex:10,charset:"utf-8",autoHeightEnabled:!1},e}return r.__extends(e,t),e.prototype.created=function(){this.defaultConfig=this.config&&Object.assign(this.config,this.defaultConfig)},e.prototype.mounted=function(){window.UE?this.initUeditor():this.loadUeditorJs()},e.prototype.beforeDestroy=function(){null!==this.instance&&this.instance.destroy&&this.instance.destroy()},e.prototype.initUeditor=function(){var t=this,e=this;e.randomNumber||(e.randomNumber="editor_"+Math.random().toString(6).substring(2)),"{}"===JSON.stringify(this.instance)&&this.$nextTick(function(){t.instance=window.UE.getEditor(e.randomNumber,e.defaultConfig),t.instance.addListener("ready",function(){t.$emit("ready",t.instance)})})},e.prototype.loadUeditorJs=function(){var t=["../../../src/assets/ueditor/ueditor.config.js","../../../src/assets/ueditor/ueditor.all.min.js","../../../src/assets/ueditor/lang/zh-cn/zh-cn.js"];this.config.lang&&"en"==this.config.lang&&(t.splice(t.length-1,1),t.push("../../../src/assets/ueditor/lang/en/en.js"));(0,i.seriesLoadScripts)(t,this.initUeditor)},e.prototype.addContent=function(t){this.instance.setContent(t,!0)},e.prototype.setContent=function(t){this.instance.setContent(t)},e.prototype.setEmptyContent=function(){this.instance.setContent("")},e.prototype.insertHtml=function(t){this.instance.execCommand("insertHtml",t)},e.prototype.getPlainContent=function(){return this.instance.getPlainTxt()},e.prototype.getHtmlSource=function(){return this.instance.getContent()},r.__decorate([(0,o.Prop)({default:{},type:Object})],e.prototype,"config",void 0),r.__decorate([(0,o.Prop)({default:"",type:String})],e.prototype,"content",void 0),e=r.__decorate([o.Component],e)}(o.Vue);e.default=a},function(t,e,n){"use strict";e.__esModule=!0,e.xbButton=void 0;var r=function(t){return t&&t.__esModule?t:{default:t}}(n(207));e.default=r.default;e.xbButton={install:function(t){t.component("XbButton",r.default)}}},function(t,e,n){"use strict";e.__esModule=!0,e.off=e.on=void 0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};e.hasOwn=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.parallelLoadScripts=function(t,e){"object"!==(void 0===t?"undefined":r(t))&&(t=[t]);for(var n=document.getElementsByTagName("head").item(0)||document.documentElement,o=new Array,i=0,a=0;a<t.length;a++)o[a]=document.createElement("script"),o[a].setAttribute("type","text/javascript"),o[a].onload=o[a].onreadystatechange=function(){i++,this.onload=this.onreadystatechange=null,this.parentNode.removeChild(this),i===t.length&&"function"==typeof e&&e()},o[a].setAttribute("src",t[a]),n&&n.appendChild(o[a])},e.seriesLoadScripts=function(t,e){"object"!==(void 0===t?"undefined":r(t))&&(t=[t]);var n=document.getElementsByTagName("head").item(0)||document.documentElement,o=new Array,i=t.length-1;!function r(a){o[a]=document.createElement("script"),o[a].setAttribute("type","text/javascript"),o[a].onload=o[a].onreadystatechange=function(){this.onload=this.onreadystatechange=null,this.parentNode.removeChild(this),a!==i?r(a+1):"function"==typeof e&&e()},console.log(t[a]),o[a].setAttribute("src",t[a]),n&&(n.appendChild(o[a]),console.log("js代码"),console.log(n))}(0)};var o=function(t){return t&&t.__esModule?t:{default:t}}(n(5)).default.prototype.$isServer;e.on=!o&&document.addEventListener?function(t,e,n){t&&e&&n&&t.addEventListener(e,n,!1)}:function(t,e,n){t&&e&&n&&t.attachEvent("on"+e,n)},e.off=!o&&document.removeEventListener?function(t,e,n){t&&e&&t.removeEventListener(e,n,!1)}:function(t,e,n){t&&e&&t.detachEvent("on"+e,n)}},function(t,e,n){"use strict";e.__esModule=!0,e.xbCheckbox=void 0;var r=function(t){return t&&t.__esModule?t:{default:t}}(n(213));e.default=r.default;e.xbCheckbox={install:function(t){t.component("XbCheckbox",r.default)}}},function(t,e,n){var r=n(6),o=n(21),i=n(221),a=n(12),u=n(8),c=function(t,e,n){var s,l,f,d=t&c.F,p=t&c.G,h=t&c.S,v=t&c.P,b=t&c.B,y=t&c.W,g=p?o:o[e]||(o[e]={}),m=g.prototype,x=p?r:h?r[e]:(r[e]||{}).prototype;for(s in p&&(n=e),n)(l=!d&&x&&void 0!==x[s])&&u(g,s)||(f=l?x[s]:n[s],g[s]=p&&"function"!=typeof x[s]?n[s]:b&&l?i(f,r):y&&x[s]==f?function(t){var e=function(e,n,r){if(this instanceof t){switch(arguments.length){case 0:return new t;case 1:return new t(e);case 2:return new t(e,n)}return new t(e,n,r)}return t.apply(this,arguments)};return e.prototype=t.prototype,e}(f):v&&"function"==typeof f?i(Function.call,f):f,v&&((g.virtual||(g.virtual={}))[s]=f,t&c.R&&m&&!m[s]&&a(m,s,f)))};c.F=1,c.G=2,c.S=4,c.P=8,c.B=16,c.W=32,c.U=64,c.R=128,t.exports=c},function(t,e,n){var r=n(22);t.exports=function(t,e){if(!r(t))return t;var n,o;if(e&&"function"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;if("function"==typeof(n=t.valueOf)&&!r(o=n.call(t)))return o;if(!e&&"function"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;throw TypeError("Can't convert object to primitive value")}},function(t,e){t.exports=function(t){if(void 0==t)throw TypeError("Can't call method on  "+t);return t}},function(t,e){var n=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:n)(t)}},function(t,e,n){var r=n(102)("keys"),o=n(32);t.exports=function(t){return r[t]||(r[t]=o(t))}},function(t,e,n){var r=n(21),o=n(6),i=o["__core-js_shared__"]||(o["__core-js_shared__"]={});(t.exports=function(t,e){return i[t]||(i[t]=void 0!==e?e:{})})("versions",[]).push({version:r.version,mode:n(31)?"pure":"global",copyright:"© 2018 Denis Pushkarev (zloirock.ru)"})},function(t,e){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(t,e){e.f=Object.getOwnPropertySymbols},function(t,e){t.exports={}},function(t,e,n){var r=n(13).f,o=n(8),i=n(16)("toStringTag");t.exports=function(t,e,n){t&&!o(t=n?t:t.prototype,i)&&r(t,i,{configurable:!0,value:e})}},function(t,e,n){e.f=n(16)},function(t,e,n){var r=n(6),o=n(21),i=n(31),a=n(107),u=n(13).f;t.exports=function(t){var e=o.Symbol||(o.Symbol=i?{}:r.Symbol||{});"_"==t.charAt(0)||t in e||u(e,t,{value:a.f(t)})}},function(t,e,n){var r=n(9)(n(4),"Map");t.exports=r},function(t,e,n){var r=n(4).Symbol;t.exports=r},function(t,e,n){var r=n(168),o=n(319),i=n(172);t.exports=function(t){return i(t)?r(t):o(t)}},function(t,e){var n=Array.isArray;t.exports=n},function(t,e){t.exports=function(t){return function(e){return t(e)}}},function(t,e,n){(function(t){var r=n(164),o=e&&!e.nodeType&&e,i=o&&"object"==typeof t&&t&&!t.nodeType&&t,a=i&&i.exports===o&&r.process,u=function(){try{var t=i&&i.require&&i.require("util").types;return t||a&&a.binding&&a.binding("util")}catch(t){}}();t.exports=u}).call(this,n(27)(t))},function(t,e){var n=Object.prototype;t.exports=function(t){var e=t&&t.constructor;return t===("function"==typeof e&&e.prototype||n)}},function(t,e,n){var r=n(327),o=n(174),i=Object.prototype.propertyIsEnumerable,a=Object.getOwnPropertySymbols,u=a?function(t){return null==t?[]:(t=Object(t),r(a(t),function(e){return i.call(t,e)}))}:o;t.exports=u},function(t,e,n){var r=n(331),o=n(109),i=n(332),a=n(333),u=n(334),c=n(37),s=n(165),l=s(r),f=s(o),d=s(i),p=s(a),h=s(u),v=c;(r&&"[object DataView]"!=v(new r(new ArrayBuffer(1)))||o&&"[object Map]"!=v(new o)||i&&"[object Promise]"!=v(i.resolve())||a&&"[object Set]"!=v(new a)||u&&"[object WeakMap]"!=v(new u))&&(v=function(t){var e=c(t),n="[object Object]"==e?t.constructor:void 0,r=n?s(n):"";if(r)switch(r){case l:return"[object DataView]";case f:return"[object Map]";case d:return"[object Promise]";case p:return"[object Set]";case h:return"[object WeakMap]"}return e}),t.exports=v},function(t,e,n){var r=n(337);t.exports=function(t){var e=new t.constructor(t.byteLength);return new r(e).set(new r(t)),e}},function(t,e,n){"use strict";var r=function(){var t=this.$createElement;return(this._self._c||t)("i",{class:this.classes,style:this.styles})},o=[];r._withStripped=!0,n.d(e,"a",function(){return r}),n.d(e,"b",function(){return o})},function(t,e,n){"use strict";var r=function(){var t=this.$createElement;return(this._self._c||t)("div")},o=[];r._withStripped=!0,n.d(e,"a",function(){return r}),n.d(e,"b",function(){return o})},function(t,e,n){"use strict";var r=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{class:t.classes},[t.label||t.$slots.label?n("label",{class:[t.prefixCls+"-label"],style:t.labelStyles,attrs:{for:t.labelFor}},[t._t("label",[t._v(t._s(t.label))])],2):t._e(),t._v(" "),n("div",{class:[t.prefixCls+"-content"],style:t.contentStyles},[t._t("default"),t._v(" "),n("transition",{attrs:{name:"fade"}},["error"===t.validateState&&t.showMessage&&t.form.showMessage?n("div",{class:[t.prefixCls+"-error-tip"]},[t._v(t._s(t.validateMessage))]):t._e()])],2)])},o=[];r._withStripped=!0,n.d(e,"a",function(){return r}),n.d(e,"b",function(){return o})},function(t,e,n){"use strict";var r=function(){var t=this.$createElement,e=this._self._c||t;return e("div",[e("div",{attrs:{id:this.randomNumber,name:"content",type:"text/plain"}})])},o=[];r._withStripped=!0,n.d(e,"a",function(){return r}),n.d(e,"b",function(){return o})},function(t,e,n){"use strict";var r=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{class:t.classesTextDiv},["textarea"!==t.type?n("input",{directives:[{name:"model",rawName:"v-model",value:t.num,expression:"num"}],class:t.classesText,style:t.inputStyle,attrs:{placeholder:t.placeHolder,disabled:t.disabled,readonly:t.readonly,maxlength:t.maxlength?t.maxlength:""},domProps:{value:t.num},on:{input:[function(e){e.target.composing||(t.num=e.target.value)},function(e){t.inputChange(t.num)}]}}):t._e(),t._v(" "),"textarea"===t.type?n("textarea",{directives:[{name:"model",rawName:"v-model",value:t.textValue,expression:"textValue"}],class:t.classesTextarea,style:{height:t.heightNum+10+"px"},attrs:{placeholder:t.placeHolder,disabled:t.disabled,readonly:t.readonly,maxlength:t.maxlength?t.maxlength:""},domProps:{value:t.textValue},on:{input:[function(e){e.target.composing||(t.textValue=e.target.value)},function(e){t.textareaChange()}]}}):t._e(),t._v(" "),"clearable"==t.status&&t.num&&!t.suffixIcon?n("span",{class:t.classedRightIcon,on:{click:function(e){t.clearClick()}}},[n("i",{staticClass:"xb-icon-circle-close",class:t.classesCloseIcon})]):t._e(),t._v(" "),"success"!=t.status||t.suffixIcon?t._e():n("span",{class:t.classedRightIcon},[n("i",{staticClass:"xb-icon-circle-check",class:t.classesSuccessIcon})]),t._v(" "),"fail"!=t.status||t.suffixIcon?t._e():n("span",{class:t.classedRightIcon},[n("i",{staticClass:"xb-icon-circle-close",class:t.classesFailIcon})]),t._v(" "),t.prefixIcon?n("span",{class:t.classedLeftIcon},[n("i",{class:t.prefixIcon,style:t.iconStyle})]):t._e(),t._v(" "),t.suffixIcon?n("span",{class:t.classedRightIcon},[n("i",{class:t.suffixIcon,style:t.iconStyle})]):t._e()])},o=[];r._withStripped=!0,n.d(e,"a",function(){return r}),n.d(e,"b",function(){return o})},function(t,e,n){"use strict";var r=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("button",{class:t.classes,attrs:{disabled:t.disabled},on:{click:t.handleClick}},[t.icon?n("xb-icon",{attrs:{type:t.icon}}):t._e(),t._v(" "),t.$slots.default?n("span",[t._t("default")],2):t._e()],1)},o=[];r._withStripped=!0,n.d(e,"a",function(){return r}),n.d(e,"b",function(){return o})},function(t,e,n){"use strict";var r=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{class:t.wrapClasses,style:t.styles},[n("div",{class:t.classes},[t.showSlotHeader?n("div",{ref:"title",class:[t.prefixCls+"-title"]},[t._t("header")],2):t._e(),t._v(" "),t.showHeader?n("div",{ref:"header",class:[t.prefixCls+"-header"],on:{mousewheel:t.handleMouseWheel}},[n("table-head",{attrs:{"prefix-cls":t.prefixCls,styleObject:t.tableHeaderStyle,columns:t.cloneColumns,"column-rows":t.columnRows,"obj-data":t.objData,"columns-width":t.columnsWidth,data:t.rebuildData}})],1):t._e(),t._v(" "),n("div",{directives:[{name:"show",rawName:"v-show",value:!(t.localeNoDataText&&(!t.data||0===t.data.length)||t.localeNoFilteredDataText&&(!t.rebuildData||0===t.rebuildData.length)),expression:"!((!!localeNoDataText && (!data || data.length === 0)) || (!!localeNoFilteredDataText && (!rebuildData || rebuildData.length === 0)))"}],ref:"body",class:[t.prefixCls+"-body"],style:t.bodyStyle,on:{scroll:t.handleBodyScroll}},[n("table-body",{ref:"tbody",attrs:{"prefix-cls":t.prefixCls,styleObject:t.tableStyle,columns:t.cloneColumns,data:t.rebuildData,"columns-width":t.columnsWidth,"obj-data":t.objData}})],1),t._v(" "),n("div",{directives:[{name:"show",rawName:"v-show",value:!((!t.localeNoDataText||t.data&&0!==t.data.length)&&(!t.localeNoFilteredDataText||t.rebuildData&&0!==t.rebuildData.length)),expression:"((!!localeNoDataText && (!data || data.length === 0)) || (!!localeNoFilteredDataText && (!rebuildData || rebuildData.length === 0)))"}],class:[t.prefixCls+"-tip"],style:t.bodyStyle,on:{scroll:t.handleBodyScroll}},[n("table",{attrs:{cellspacing:"0",cellpadding:"0",border:"0"}},[n("tbody",[n("tr",[n("td",{style:{height:t.bodyStyle.height,width:this.headerWidth+"px"}},[t.data&&0!==t.data.length?n("span",{domProps:{innerHTML:t._s(t.localeNoFilteredDataText)}}):n("span",{domProps:{innerHTML:t._s(t.localeNoDataText)}})])])])])]),t._v(" "),t.isLeftFixed?n("div",{class:[t.prefixCls+"-fixed"],style:t.fixedTableStyle},[t.showHeader?n("div",{class:t.fixedHeaderClasses},[n("table-head",{attrs:{fixed:"left","prefix-cls":t.prefixCls,styleObject:t.fixedTableStyle,columns:t.leftFixedColumns,"column-rows":t.columnRows,"fixed-column-rows":t.leftFixedColumnRows,"obj-data":t.objData,"columns-width":t.columnsWidth,data:t.rebuildData}})],1):t._e(),t._v(" "),n("div",{ref:"fixedBody",class:[t.prefixCls+"-fixed-body"],style:t.fixedBodyStyle,on:{mousewheel:t.handleFixedMousewheel,DOMMouseScroll:t.handleFixedMousewheel}},[n("table-body",{attrs:{fixed:"left","prefix-cls":t.prefixCls,styleObject:t.fixedTableStyle,columns:t.leftFixedColumns,data:t.rebuildData,"columns-width":t.columnsWidth,"obj-data":t.objData}})],1)]):t._e(),t._v(" "),t.isRightFixed?n("div",{class:[t.prefixCls+"-fixed-right"],style:t.fixedRightTableStyle},[t.showHeader?n("div",{class:t.fixedHeaderClasses},[n("table-head",{attrs:{fixed:"right","prefix-cls":t.prefixCls,styleObject:t.fixedRightTableStyle,columns:t.rightFixedColumns,"column-rows":t.columnRows,"fixed-column-rows":t.rightFixedColumnRows,"obj-data":t.objData,"columns-width":t.columnsWidth,data:t.rebuildData}})],1):t._e(),t._v(" "),n("div",{ref:"fixedRightBody",class:[t.prefixCls+"-fixed-body"],style:t.fixedBodyStyle,on:{mousewheel:t.handleFixedMousewheel,DOMMouseScroll:t.handleFixedMousewheel}},[n("table-body",{attrs:{fixed:"right","prefix-cls":t.prefixCls,styleObject:t.fixedRightTableStyle,columns:t.rightFixedColumns,data:t.rebuildData,"columns-width":t.columnsWidth,"obj-data":t.objData}})],1)]):t._e(),t._v(" "),t.isRightFixed?n("div",{class:[t.prefixCls+"-fixed-right-header"],style:t.fixedRightHeaderStyle}):t._e(),t._v(" "),t.showSlotFooter?n("div",{ref:"footer",class:[t.prefixCls+"-footer"]},[t._t("footer")],2):t._e()])])},o=[];r._withStripped=!0,n.d(e,"a",function(){return r}),n.d(e,"b",function(){return o})},function(t,e,n){"use strict";var r=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{class:t.classesDiv,style:t.inputStyle},[n("input",{directives:[{name:"model",rawName:"v-model",value:t.value,expression:"value"}],class:t.classesInput,attrs:{placeholder:t.placeholder},domProps:{value:t.value},on:{input:function(e){e.target.composing||(t.value=e.target.value)}}}),t._v(" "),t.hidden?t._e():n("div",{class:t.classesSearchDiv,on:{click:t.handleClick}},[n("i",{staticClass:"xb-icon-search"})]),t._v(" "),t.hidden?n("div",{class:t.classesSearchDivHidden,on:{click:t.handleClick}},[n("i",{staticClass:"xb-icon-search"})]):t._e(),t._v(" "),n("div",{staticStyle:{clear:"both"}})])},o=[];r._withStripped=!0,n.d(e,"a",function(){return r}),n.d(e,"b",function(){return o})},function(t,e,n){"use strict";var r=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("label",{class:t.wrapClasses},[n("span",{class:t.radioClasses},[n("span",{class:t.innerClasses}),t._v(" "),n("input",{class:t.inputClasses,attrs:{type:"radio",disabled:t.disabled,name:t.groupName},domProps:{checked:t.currentValue},on:{change:t.change,focus:t.onFocus,blur:t.onBlur}})]),t._v(" "),t._t("default",[t._v(t._s(t.label))])],2)},o=[];r._withStripped=!0,n.d(e,"a",function(){return r}),n.d(e,"b",function(){return o})},function(t,e,n){"use strict";var r=function(){var t=this.$createElement;return(this._self._c||t)("div",{class:this.classes,attrs:{name:this.name}},[this._t("default")],2)},o=[];r._withStripped=!0,n.d(e,"a",function(){return r}),n.d(e,"b",function(){return o})},function(t,e,n){"use strict";var r=function(){var t=this,e=t.$createElement,n=t._self._c||e;return t.visible?n("div",[n("div",{class:t.maskClasses,on:{click:t.mask}}),t._v(" "),n("div",{class:t.wrapClasses},[n("div",{class:t.classes,style:t.mainStyles},[n("div",{class:[t.prefixCls+"-content"]},[t.closable?n("a",{class:[t.prefixCls+"-close"],on:{click:t.close}},[t._t("close",[n("xb-icon",{attrs:{type:"close"}})])],2):t._e(),t._v(" "),t.showHead?n("div",{class:[t.prefixCls+"-header"]},[t._t("header",[n("div",{class:[t.prefixCls+"-header-inner"]},[t._v(t._s(t.title))])])],2):t._e(),t._v(" "),n("div",{class:[t.prefixCls+"-body"]},[t._t("default")],2),t._v(" "),t.footerHide?t._e():n("div",{class:[t.prefixCls+"-footer"]},[t._t("footer",[n("xb-button",{attrs:{type:"default"},nativeOn:{click:function(e){return t.ok(e)}}},[t._v(t._s(t.localeOkText))]),t._v(" "),n("xb-button",{attrs:{type:"reset"},nativeOn:{click:function(e){return t.cancel(e)}}},[t._v(t._s(t.localeCancelText))])])],2)])])])]):t._e()},o=[];r._withStripped=!0,n.d(e,"a",function(){return r}),n.d(e,"b",function(){return o})},function(t,e,n){"use strict";var r=function(){var t=this,e=t.$createElement,n=t._self._c||e;return t.loadShow?n("div",{class:[t.prefixCls,t.customClass]},[n("div",{class:[t.prefixCls+"-wrp"]},[n("div",{class:[t.prefixCls+"-desc","flex-wrp","flex-wrp-cnt"]},[n("div",{class:[t.prefixCls+"-rotate"]},[n("xb-icon",{attrs:{type:"loading",color:t.loadColor,size:t.loadSize}})],1),t._v(" "),t.showTxt?n("div",{class:[t.prefixCls+"-txt"]},[t._v(t._s(t.localeLoadText))]):t._e()])])]):t._e()},o=[];r._withStripped=!0,n.d(e,"a",function(){return r}),n.d(e,"b",function(){return o})},function(t,e,n){"use strict";var r=function(){var t=this.$createElement,e=this._self._c||t;return e("div",[e("mainHeader"),this._v(" "),e("router-view",{staticClass:"view"})],1)},o=[];r._withStripped=!0,n.d(e,"a",function(){return r}),n.d(e,"b",function(){return o})},function(t,e,n){"use strict";var r=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{class:t.wholeClasses},[n("div",{class:t.inputDivClasses,style:t.inputStyle},[n("input",{directives:[{name:"model",rawName:"v-model",value:t.num,expression:"num"}],class:t.inputClasses,attrs:{type:"text",disabled:t.disabled},domProps:{value:t.num},on:{input:[function(e){e.target.composing||(t.num=e.target.value)},function(e){t.inputChange(t.num)}],change:function(e){t.changeInput(t.num)},focus:function(e){t.focus()}}})]),t._v(" "),n("span",{class:t.arrowDivClasses},[n("span",{class:t.arrowDownClasses,on:{click:function(e){t.addValue(!!t.disabled)}}},[t._v("+")]),t._v(" "),n("span",{class:t.arrowClasses,on:{click:function(e){t.subtractValue(!!t.disabled)}}},[t._v("-")])])])},o=[];r._withStripped=!0,n.d(e,"a",function(){return r}),n.d(e,"b",function(){return o})},function(t,e,n){"use strict";var r=function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"docs-demo-wrapper"},[e("div",{staticClass:"demo-container",style:{height:this.isExpand?"auto":"0"}},[e("div",{attrs:{span:"14"}},[e("div",{staticClass:"docs-demo docs-demo--expand"},[e("div",{staticClass:"highlight-wrapper"},[this._t("highlight")],2)])])]),this._v(" "),e("span",{staticClass:"docs-trans docs-demo__triangle",on:{click:this.toggle}},[this._v(this._s(this.isExpand?"隐藏代码":"显示代码"))])])},o=[];r._withStripped=!0,n.d(e,"a",function(){return r}),n.d(e,"b",function(){return o})},function(t,e,n){"use strict";var r=function(){var t=this.$createElement;return(this._self._c||t)("div",{class:this.classes},[this._t("default")],2)},o=[];r._withStripped=!0,n.d(e,"a",function(){return r}),n.d(e,"b",function(){return o})},function(t,e,n){"use strict";var r=function(){var t=this.$createElement;return(this._self._c||t)("form",{class:this.classes,attrs:{autocomplete:this.autocomplete}},[this._t("default")],2)},o=[];r._withStripped=!0,n.d(e,"a",function(){return r}),n.d(e,"b",function(){return o})},function(t,e,n){"use strict";var r=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("label",{class:t.wrapClasses},[n("span",{class:t.checkboxClasses},[n("span",{class:t.innerClasses}),t._v(" "),t.group?n("input",{directives:[{name:"model",rawName:"v-model",value:t.model,expression:"model"}],class:t.inputClasses,attrs:{type:"checkbox",disabled:t.disabled,name:t.name},domProps:{value:t.label,checked:Array.isArray(t.model)?t._i(t.model,t.label)>-1:t.model},on:{change:[function(e){var n=t.model,r=e.target,o=!!r.checked;if(Array.isArray(n)){var i=t.label,a=t._i(n,i);r.checked?a<0&&(t.model=n.concat([i])):a>-1&&(t.model=n.slice(0,a).concat(n.slice(a+1)))}else t.model=o},t.change],focus:t.onFocus,blur:t.onBlur}}):n("input",{class:t.inputClasses,attrs:{type:"checkbox",disabled:t.disabled,name:t.name},domProps:{checked:t.currentValue},on:{change:t.change,focus:t.onFocus,blur:t.onBlur}})]),t._v(" "),t._t("default",[t.showSlot?n("span",[t._v(t._s(t.label))]):t._e()])],2)},o=[];r._withStripped=!0,n.d(e,"a",function(){return r}),n.d(e,"b",function(){return o})},function(t,e,n){"use strict";var r=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("transition",{attrs:{name:"slide-fade"},on:{"after-leave":t.afterLeave}},[t.show?n("div",{staticClass:"xbui-message-tips"},[n("div",{staticClass:"xbui-message-tips-content"},[n("xb-icon",{attrs:{type:this.type.name,color:this.type.color}}),t._v(" "),n("span",{staticClass:"xbui-message-tips-text"},[t._v(t._s(t.text))]),t._v(" "),t.closable?n("span",{staticClass:"xbui-message-tips_close",on:{click:t.closeClick}},[n("xb-icon",{attrs:{type:"close"}})],1):t._e()],1)]):t._e()])},o=[];r._withStripped=!0,n.d(e,"a",function(){return r}),n.d(e,"b",function(){return o})},function(t,e,n){"use strict";var r=function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("header",{staticClass:"page-header",style:"/"===t.$route.path?"box-shadow:none":"box-shadow:0 10px 60px 0 rgba(29,29,31,0.07)"},[r("div",{staticClass:"header-container"},[r("router-link",{attrs:{to:"/"}},[r("img",{attrs:{src:n(187),width:"100"}})]),t._v(" "),t._l(t.headerConf,function(e){return r("router-link",{key:e.path,attrs:{to:e.path}},[t._v(t._s(e.text))])})],2)])},o=[];r._withStripped=!0,n.d(e,"a",function(){return r}),n.d(e,"b",function(){return o})},function(t,e,n){"use strict";var r=function(){var t=this.$createElement;return(this._self._c||t)("div")},o=[];r._withStripped=!0,n.d(e,"a",function(){return r}),n.d(e,"b",function(){return o})},function(t,e,n){"use strict";var r=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("table",{style:t.styles,attrs:{cellspacing:"0",cellpadding:"0",border:"0"}},[n("colgroup",[t._l(t.columns,function(e,r){return n("col",{attrs:{width:t.setCellWidth(e)}})}),t._v(" "),t.$parent.showVerticalScrollBar?n("col",{attrs:{width:t.$parent.scrollBarWidth}}):t._e()],2),t._v(" "),n("thead",t._l(t.headRows,function(e,r){return n("tr",[t._l(e,function(e,o){return n("th",{class:t.alignCls(e),attrs:{colspan:e.colSpan,rowspan:e.rowSpan}},[n("div",{class:t.cellClasses(e)},["expand"===e.type?[e.renderHeader?n("render-header",{attrs:{render:e.renderHeader,column:e,index:o}}):n("span",[t._v(t._s(e.title||""))])]:"selection"===e.type?[n("Checkbox",{attrs:{value:t.isSelectAll,disabled:!t.data.length},on:{"on-change":t.selectAll}})]:[e.renderHeader?n("render-header",{attrs:{render:e.renderHeader,column:e,index:o}}):n("span",{class:(i={},i[t.prefixCls+"-cell-sort"]=e.sortable,i),on:{click:function(e){t.handleSortByHead(t.getColumn(r,o)._index)}}},[t._v(t._s(e.title||"#"))]),t._v(" "),e.sortable?n("span",{class:[t.prefixCls+"-sort"]},[n("i",{staticClass:"ivu-icon ivu-icon-arrow-up-b",class:{on:"asc"===t.getColumn(r,o)._sortType},on:{click:function(e){t.handleSort(t.getColumn(r,o)._index,"asc")}}}),t._v(" "),n("i",{staticClass:"ivu-icon ivu-icon-arrow-down-b",class:{on:"desc"===t.getColumn(r,o)._sortType},on:{click:function(e){t.handleSort(t.getColumn(r,o)._index,"desc")}}})]):t._e(),t._v(" "),t.isPopperShow(e)?n("Poptip",{attrs:{placement:"bottom","popper-class":"ivu-table-popper",transfer:""},on:{"on-popper-hide":function(e){t.handleFilterHide(t.getColumn(r,o)._index)}},model:{value:t.getColumn(r,o)._filterVisible,callback:function(e){t.$set(t.getColumn(r,o),"_filterVisible",e)},expression:"getColumn(rowIndex, index)._filterVisible"}},[n("span",{class:[t.prefixCls+"-filter"]},[n("i",{staticClass:"ivu-icon ivu-icon-funnel",class:{on:t.getColumn(r,o)._isFiltered}})]),t._v(" "),t.getColumn(r,o)._filterMultiple?n("div",{class:[t.prefixCls+"-filter-list"],attrs:{slot:"content"},slot:"content"},[n("div",{class:[t.prefixCls+"-filter-list-item"]},[n("checkbox-group",{model:{value:t.getColumn(r,o)._filterChecked,callback:function(e){t.$set(t.getColumn(r,o),"_filterChecked",e)},expression:"getColumn(rowIndex, index)._filterChecked"}},t._l(e.filters,function(e,r){return n("checkbox",{key:r,attrs:{label:e.value}},[t._v(t._s(e.label))])}))],1),t._v(" "),n("div",{class:[t.prefixCls+"-filter-footer"]},[n("i-button",{attrs:{type:"text",size:"small",disabled:!t.getColumn(r,o)._filterChecked.length},nativeOn:{click:function(e){t.handleFilter(t.getColumn(r,o)._index)}}},[t._v(t._s(t.t("i.table.confirmFilter")))]),t._v(" "),n("i-button",{attrs:{type:"text",size:"small"},nativeOn:{click:function(e){t.handleReset(t.getColumn(r,o)._index)}}},[t._v(t._s(t.t("i.table.resetFilter")))])],1)]):n("div",{class:[t.prefixCls+"-filter-list"],attrs:{slot:"content"},slot:"content"},[n("ul",{class:[t.prefixCls+"-filter-list-single"]},[n("li",{class:t.itemAllClasses(t.getColumn(r,o)),on:{click:function(e){t.handleReset(t.getColumn(r,o)._index)}}},[t._v(t._s(t.t("i.table.clearFilter")))]),t._v(" "),t._l(e.filters,function(e){return n("li",{class:t.itemClasses(t.getColumn(r,o),e),on:{click:function(n){t.handleSelect(t.getColumn(r,o)._index,e.value)}}},[t._v(t._s(e.label))])})],2)])]):t._e()]],2)]);var i}),t._v(" "),t.$parent.showVerticalScrollBar&&0===r?n("th",{class:t.scrollBarCellClass(),attrs:{rowspan:t.headRows.length}}):t._e()],2)}))])},o=[];r._withStripped=!0,n.d(e,"a",function(){return r}),n.d(e,"b",function(){return o})},function(t,e,n){"use strict";var r=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("table",{style:t.styleObject,attrs:{cellspacing:"0",cellpadding:"0",border:"0"}},[n("colgroup",t._l(t.columns,function(e,r){return n("col",{attrs:{width:t.setCellWidth(e)}})})),t._v(" "),n("tbody",{class:[t.prefixCls+"-tbody"]},[t._l(t.data,function(e,r){return[n("xb-table-tr",{key:e._rowKey,attrs:{row:e,"prefix-cls":t.prefixCls},nativeOn:{mouseenter:function(n){n.stopPropagation(),t.handleMouseIn(e._index)},mouseleave:function(n){n.stopPropagation(),t.handleMouseOut(e._index)},click:function(n){t.clickCurrentRow(e._index)},dblclick:function(n){n.stopPropagation(),t.dblclickCurrentRow(e._index)}}},t._l(t.columns,function(o){return n("td",{class:t.alignCls(o,e)},[n("Cell",{key:o._columnKey,attrs:{fixed:t.fixed,"prefix-cls":t.prefixCls,row:e,column:o,"natural-index":r,index:e._index,checked:t.rowChecked(e._index),disabled:t.rowDisabled(e._index),expanded:t.rowExpanded(e._index)}})],1)})),t._v(" "),t.rowExpanded(e._index)?n("tr",{class:(o={},o[t.prefixCls+"-expanded-hidden"]=t.fixed,o)},[n("td",{class:t.prefixCls+"-expanded-cell",attrs:{colspan:t.columns.length}},[n("Expand",{key:e._rowKey,attrs:{row:e,render:t.expandRender,index:e._index}})],1)]):t._e()];var o})],2)])},o=[];r._withStripped=!0,n.d(e,"a",function(){return r}),n.d(e,"b",function(){return o})},function(t,e,n){"use strict";var r=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{ref:"cell",class:t.classes},["index"===t.renderType?[n("span",[t._v(t._s(t.naturalIndex+1))])]:t._e(),t._v(" "),"selection"===t.renderType?[n("Checkbox",{attrs:{value:t.checked,disabled:t.disabled},on:{"on-change":t.toggleSelect},nativeOn:{click:function(e){return e.stopPropagation(),t.handleClick(e)}}})]:t._e(),t._v(" "),"html"===t.renderType?[n("span",{domProps:{innerHTML:t._s(t.row[t.column.key])}})]:t._e(),t._v(" "),"normal"===t.renderType?[n("span",[t._v(t._s(t.row[t.column.key]))])]:t._e(),t._v(" "),"expand"!==t.renderType||t.row._disableExpand?t._e():[n("div",{class:t.expandCls,on:{click:t.toggleExpand}},[n("Icon",{attrs:{type:"ios-arrow-right"}})],1)],t._v(" "),"render"===t.renderType?n("Cell",{attrs:{row:t.row,column:t.column,index:t.index,render:t.column.render}}):t._e()],2)},o=[];r._withStripped=!0,n.d(e,"a",function(){return r}),n.d(e,"b",function(){return o})},function(t,e,n){"use strict";var r=function(){var t=this.$createElement;return(this._self._c||t)("tr",{class:this.rowClasses(this.row._index)},[this._t("default")],2)},o=[];r._withStripped=!0,n.d(e,"a",function(){return r}),n.d(e,"b",function(){return o})},function(t,e){t.exports=[{text:"指南",path:"/guide"},{text:"组件",path:"/components",children:[{text:"更新日志",path:"/updateLog"},{text:"开发指南",children:[{text:"书写规则",path:"/rules"},{text:"安装",path:"/install"},{text:"开始使用",path:"/start"}]},{text:"组件",groups:[{groupName:"基础组件",folder:"basic",list:[{text:"font",path:"/xb-font"},{text:"color",path:"/xb-color"},{text:"xb-button",path:"/xb-button"},{text:"xb-loading",path:"/xb-loading"},{text:"xb-input-number",path:"/xb-input-number"},{text:"xb-icon",path:"/xb-icon"},{text:"xb-text",path:"/xb-text"},{text:"xb-search-btn",path:"/xb-search-btn"}]},{groupName:"表单组件",folder:"form",list:[{text:"xb-checkbox",path:"/xb-checkbox"},{text:"xb-form",path:"/xb-form"},{text:"xb-table",path:"/xb-table"},{text:"xb-radio",path:"/xb-radio"}]},{groupName:"数据组件",folder:"data",list:[]},{groupName:"通知组件",folder:"notice",list:[{text:"xb-popup-window",path:"/xb-popup-window"},{text:"xb-message-tips",path:"/xb-message-tips"}]},{groupName:"导航组件",folder:"navigation",list:[]},{groupName:"其他组件",folder:"others",list:[{text:"xb-ueditor",path:"/xb-ueditor"}]}]}]}]},function(t,e,n){(function(t,r){var o;
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright JS Foundation and other contributors <https://js.foundation/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */(function(){var i,a=200,u="Unsupported core-js use. Try https://npms.io/search?q=ponyfill.",c="Expected a function",s="__lodash_hash_undefined__",l=500,f="__lodash_placeholder__",d=1,p=2,h=4,v=1,b=2,y=1,g=2,m=4,x=8,_=16,w=32,k=64,C=128,O=256,j=512,S=30,E="...",A=800,P=16,$=1,T=2,M=1/0,I=9007199254740991,R=1.7976931348623157e308,D=NaN,z=4294967295,N=z-1,F=z>>>1,L=[["ary",C],["bind",y],["bindKey",g],["curry",x],["curryRight",_],["flip",j],["partial",w],["partialRight",k],["rearg",O]],B="[object Arguments]",W="[object Array]",V="[object AsyncFunction]",H="[object Boolean]",q="[object Date]",U="[object DOMException]",X="[object Error]",G="[object Function]",J="[object GeneratorFunction]",K="[object Map]",Z="[object Number]",Y="[object Null]",Q="[object Object]",tt="[object Proxy]",et="[object RegExp]",nt="[object Set]",rt="[object String]",ot="[object Symbol]",it="[object Undefined]",at="[object WeakMap]",ut="[object WeakSet]",ct="[object ArrayBuffer]",st="[object DataView]",lt="[object Float32Array]",ft="[object Float64Array]",dt="[object Int8Array]",pt="[object Int16Array]",ht="[object Int32Array]",vt="[object Uint8Array]",bt="[object Uint8ClampedArray]",yt="[object Uint16Array]",gt="[object Uint32Array]",mt=/\b__p \+= '';/g,xt=/\b(__p \+=) '' \+/g,_t=/(__e\(.*?\)|\b__t\)) \+\n'';/g,wt=/&(?:amp|lt|gt|quot|#39);/g,kt=/[&<>"']/g,Ct=RegExp(wt.source),Ot=RegExp(kt.source),jt=/<%-([\s\S]+?)%>/g,St=/<%([\s\S]+?)%>/g,Et=/<%=([\s\S]+?)%>/g,At=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,Pt=/^\w*$/,$t=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,Tt=/[\\^$.*+?()[\]{}|]/g,Mt=RegExp(Tt.source),It=/^\s+|\s+$/g,Rt=/^\s+/,Dt=/\s+$/,zt=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,Nt=/\{\n\/\* \[wrapped with (.+)\] \*/,Ft=/,? & /,Lt=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,Bt=/\\(\\)?/g,Wt=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,Vt=/\w*$/,Ht=/^[-+]0x[0-9a-f]+$/i,qt=/^0b[01]+$/i,Ut=/^\[object .+?Constructor\]$/,Xt=/^0o[0-7]+$/i,Gt=/^(?:0|[1-9]\d*)$/,Jt=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,Kt=/($^)/,Zt=/['\n\r\u2028\u2029\\]/g,Yt="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",Qt="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",te="[\\ud800-\\udfff]",ee="["+Qt+"]",ne="["+Yt+"]",re="\\d+",oe="[\\u2700-\\u27bf]",ie="[a-z\\xdf-\\xf6\\xf8-\\xff]",ae="[^\\ud800-\\udfff"+Qt+re+"\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",ue="\\ud83c[\\udffb-\\udfff]",ce="[^\\ud800-\\udfff]",se="(?:\\ud83c[\\udde6-\\uddff]){2}",le="[\\ud800-\\udbff][\\udc00-\\udfff]",fe="[A-Z\\xc0-\\xd6\\xd8-\\xde]",de="(?:"+ie+"|"+ae+")",pe="(?:"+fe+"|"+ae+")",he="(?:"+ne+"|"+ue+")"+"?",ve="[\\ufe0e\\ufe0f]?"+he+("(?:\\u200d(?:"+[ce,se,le].join("|")+")[\\ufe0e\\ufe0f]?"+he+")*"),be="(?:"+[oe,se,le].join("|")+")"+ve,ye="(?:"+[ce+ne+"?",ne,se,le,te].join("|")+")",ge=RegExp("['’]","g"),me=RegExp(ne,"g"),xe=RegExp(ue+"(?="+ue+")|"+ye+ve,"g"),_e=RegExp([fe+"?"+ie+"+(?:['’](?:d|ll|m|re|s|t|ve))?(?="+[ee,fe,"$"].join("|")+")",pe+"+(?:['’](?:D|LL|M|RE|S|T|VE))?(?="+[ee,fe+de,"$"].join("|")+")",fe+"?"+de+"+(?:['’](?:d|ll|m|re|s|t|ve))?",fe+"+(?:['’](?:D|LL|M|RE|S|T|VE))?","\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",re,be].join("|"),"g"),we=RegExp("[\\u200d\\ud800-\\udfff"+Yt+"\\ufe0e\\ufe0f]"),ke=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,Ce=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],Oe=-1,je={};je[lt]=je[ft]=je[dt]=je[pt]=je[ht]=je[vt]=je[bt]=je[yt]=je[gt]=!0,je[B]=je[W]=je[ct]=je[H]=je[st]=je[q]=je[X]=je[G]=je[K]=je[Z]=je[Q]=je[et]=je[nt]=je[rt]=je[at]=!1;var Se={};Se[B]=Se[W]=Se[ct]=Se[st]=Se[H]=Se[q]=Se[lt]=Se[ft]=Se[dt]=Se[pt]=Se[ht]=Se[K]=Se[Z]=Se[Q]=Se[et]=Se[nt]=Se[rt]=Se[ot]=Se[vt]=Se[bt]=Se[yt]=Se[gt]=!0,Se[X]=Se[G]=Se[at]=!1;var Ee={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},Ae=parseFloat,Pe=parseInt,$e="object"==typeof t&&t&&t.Object===Object&&t,Te="object"==typeof self&&self&&self.Object===Object&&self,Me=$e||Te||Function("return this")(),Ie=e&&!e.nodeType&&e,Re=Ie&&"object"==typeof r&&r&&!r.nodeType&&r,De=Re&&Re.exports===Ie,ze=De&&$e.process,Ne=function(){try{var t=Re&&Re.require&&Re.require("util").types;return t||ze&&ze.binding&&ze.binding("util")}catch(t){}}(),Fe=Ne&&Ne.isArrayBuffer,Le=Ne&&Ne.isDate,Be=Ne&&Ne.isMap,We=Ne&&Ne.isRegExp,Ve=Ne&&Ne.isSet,He=Ne&&Ne.isTypedArray;function qe(t,e,n){switch(n.length){case 0:return t.call(e);case 1:return t.call(e,n[0]);case 2:return t.call(e,n[0],n[1]);case 3:return t.call(e,n[0],n[1],n[2])}return t.apply(e,n)}function Ue(t,e,n,r){for(var o=-1,i=null==t?0:t.length;++o<i;){var a=t[o];e(r,a,n(a),t)}return r}function Xe(t,e){for(var n=-1,r=null==t?0:t.length;++n<r&&!1!==e(t[n],n,t););return t}function Ge(t,e){for(var n=null==t?0:t.length;n--&&!1!==e(t[n],n,t););return t}function Je(t,e){for(var n=-1,r=null==t?0:t.length;++n<r;)if(!e(t[n],n,t))return!1;return!0}function Ke(t,e){for(var n=-1,r=null==t?0:t.length,o=0,i=[];++n<r;){var a=t[n];e(a,n,t)&&(i[o++]=a)}return i}function Ze(t,e){return!!(null==t?0:t.length)&&cn(t,e,0)>-1}function Ye(t,e,n){for(var r=-1,o=null==t?0:t.length;++r<o;)if(n(e,t[r]))return!0;return!1}function Qe(t,e){for(var n=-1,r=null==t?0:t.length,o=Array(r);++n<r;)o[n]=e(t[n],n,t);return o}function tn(t,e){for(var n=-1,r=e.length,o=t.length;++n<r;)t[o+n]=e[n];return t}function en(t,e,n,r){var o=-1,i=null==t?0:t.length;for(r&&i&&(n=t[++o]);++o<i;)n=e(n,t[o],o,t);return n}function nn(t,e,n,r){var o=null==t?0:t.length;for(r&&o&&(n=t[--o]);o--;)n=e(n,t[o],o,t);return n}function rn(t,e){for(var n=-1,r=null==t?0:t.length;++n<r;)if(e(t[n],n,t))return!0;return!1}var on=dn("length");function an(t,e,n){var r;return n(t,function(t,n,o){if(e(t,n,o))return r=n,!1}),r}function un(t,e,n,r){for(var o=t.length,i=n+(r?1:-1);r?i--:++i<o;)if(e(t[i],i,t))return i;return-1}function cn(t,e,n){return e==e?function(t,e,n){var r=n-1,o=t.length;for(;++r<o;)if(t[r]===e)return r;return-1}(t,e,n):un(t,ln,n)}function sn(t,e,n,r){for(var o=n-1,i=t.length;++o<i;)if(r(t[o],e))return o;return-1}function ln(t){return t!=t}function fn(t,e){var n=null==t?0:t.length;return n?vn(t,e)/n:D}function dn(t){return function(e){return null==e?i:e[t]}}function pn(t){return function(e){return null==t?i:t[e]}}function hn(t,e,n,r,o){return o(t,function(t,o,i){n=r?(r=!1,t):e(n,t,o,i)}),n}function vn(t,e){for(var n,r=-1,o=t.length;++r<o;){var a=e(t[r]);a!==i&&(n=n===i?a:n+a)}return n}function bn(t,e){for(var n=-1,r=Array(t);++n<t;)r[n]=e(n);return r}function yn(t){return function(e){return t(e)}}function gn(t,e){return Qe(e,function(e){return t[e]})}function mn(t,e){return t.has(e)}function xn(t,e){for(var n=-1,r=t.length;++n<r&&cn(e,t[n],0)>-1;);return n}function _n(t,e){for(var n=t.length;n--&&cn(e,t[n],0)>-1;);return n}var wn=pn({"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"s"}),kn=pn({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function Cn(t){return"\\"+Ee[t]}function On(t){return we.test(t)}function jn(t){var e=-1,n=Array(t.size);return t.forEach(function(t,r){n[++e]=[r,t]}),n}function Sn(t,e){return function(n){return t(e(n))}}function En(t,e){for(var n=-1,r=t.length,o=0,i=[];++n<r;){var a=t[n];a!==e&&a!==f||(t[n]=f,i[o++]=n)}return i}function An(t){var e=-1,n=Array(t.size);return t.forEach(function(t){n[++e]=t}),n}function Pn(t){var e=-1,n=Array(t.size);return t.forEach(function(t){n[++e]=[t,t]}),n}function $n(t){return On(t)?function(t){var e=xe.lastIndex=0;for(;xe.test(t);)++e;return e}(t):on(t)}function Tn(t){return On(t)?function(t){return t.match(xe)||[]}(t):function(t){return t.split("")}(t)}var Mn=pn({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"});var In=function t(e){var n=(e=null==e?Me:In.defaults(Me.Object(),e,In.pick(Me,Ce))).Array,r=e.Date,o=e.Error,Yt=e.Function,Qt=e.Math,te=e.Object,ee=e.RegExp,ne=e.String,re=e.TypeError,oe=n.prototype,ie=Yt.prototype,ae=te.prototype,ue=e["__core-js_shared__"],ce=ie.toString,se=ae.hasOwnProperty,le=0,fe=function(){var t=/[^.]+$/.exec(ue&&ue.keys&&ue.keys.IE_PROTO||"");return t?"Symbol(src)_1."+t:""}(),de=ae.toString,pe=ce.call(te),he=Me._,ve=ee("^"+ce.call(se).replace(Tt,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),be=De?e.Buffer:i,ye=e.Symbol,xe=e.Uint8Array,we=be?be.allocUnsafe:i,Ee=Sn(te.getPrototypeOf,te),$e=te.create,Te=ae.propertyIsEnumerable,Ie=oe.splice,Re=ye?ye.isConcatSpreadable:i,ze=ye?ye.iterator:i,Ne=ye?ye.toStringTag:i,on=function(){try{var t=Ni(te,"defineProperty");return t({},"",{}),t}catch(t){}}(),pn=e.clearTimeout!==Me.clearTimeout&&e.clearTimeout,Rn=r&&r.now!==Me.Date.now&&r.now,Dn=e.setTimeout!==Me.setTimeout&&e.setTimeout,zn=Qt.ceil,Nn=Qt.floor,Fn=te.getOwnPropertySymbols,Ln=be?be.isBuffer:i,Bn=e.isFinite,Wn=oe.join,Vn=Sn(te.keys,te),Hn=Qt.max,qn=Qt.min,Un=r.now,Xn=e.parseInt,Gn=Qt.random,Jn=oe.reverse,Kn=Ni(e,"DataView"),Zn=Ni(e,"Map"),Yn=Ni(e,"Promise"),Qn=Ni(e,"Set"),tr=Ni(e,"WeakMap"),er=Ni(te,"create"),nr=tr&&new tr,rr={},or=la(Kn),ir=la(Zn),ar=la(Yn),ur=la(Qn),cr=la(tr),sr=ye?ye.prototype:i,lr=sr?sr.valueOf:i,fr=sr?sr.toString:i;function dr(t){if(Su(t)&&!bu(t)&&!(t instanceof br)){if(t instanceof vr)return t;if(se.call(t,"__wrapped__"))return fa(t)}return new vr(t)}var pr=function(){function t(){}return function(e){if(!ju(e))return{};if($e)return $e(e);t.prototype=e;var n=new t;return t.prototype=i,n}}();function hr(){}function vr(t,e){this.__wrapped__=t,this.__actions__=[],this.__chain__=!!e,this.__index__=0,this.__values__=i}function br(t){this.__wrapped__=t,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=z,this.__views__=[]}function yr(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function gr(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function mr(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function xr(t){var e=-1,n=null==t?0:t.length;for(this.__data__=new mr;++e<n;)this.add(t[e])}function _r(t){var e=this.__data__=new gr(t);this.size=e.size}function wr(t,e){var n=bu(t),r=!n&&vu(t),o=!n&&!r&&xu(t),i=!n&&!r&&!o&&Ru(t),a=n||r||o||i,u=a?bn(t.length,ne):[],c=u.length;for(var s in t)!e&&!se.call(t,s)||a&&("length"==s||o&&("offset"==s||"parent"==s)||i&&("buffer"==s||"byteLength"==s||"byteOffset"==s)||qi(s,c))||u.push(s);return u}function kr(t){var e=t.length;return e?t[_o(0,e-1)]:i}function Cr(t,e){return ua(ni(t),Mr(e,0,t.length))}function Or(t){return ua(ni(t))}function jr(t,e,n){(n===i||du(t[e],n))&&(n!==i||e in t)||$r(t,e,n)}function Sr(t,e,n){var r=t[e];se.call(t,e)&&du(r,n)&&(n!==i||e in t)||$r(t,e,n)}function Er(t,e){for(var n=t.length;n--;)if(du(t[n][0],e))return n;return-1}function Ar(t,e,n,r){return Nr(t,function(t,o,i){e(r,t,n(t),i)}),r}function Pr(t,e){return t&&ri(e,rc(e),t)}function $r(t,e,n){"__proto__"==e&&on?on(t,e,{configurable:!0,enumerable:!0,value:n,writable:!0}):t[e]=n}function Tr(t,e){for(var r=-1,o=e.length,a=n(o),u=null==t;++r<o;)a[r]=u?i:Yu(t,e[r]);return a}function Mr(t,e,n){return t==t&&(n!==i&&(t=t<=n?t:n),e!==i&&(t=t>=e?t:e)),t}function Ir(t,e,n,r,o,a){var u,c=e&d,s=e&p,l=e&h;if(n&&(u=o?n(t,r,o,a):n(t)),u!==i)return u;if(!ju(t))return t;var f=bu(t);if(f){if(u=function(t){var e=t.length,n=new t.constructor(e);return e&&"string"==typeof t[0]&&se.call(t,"index")&&(n.index=t.index,n.input=t.input),n}(t),!c)return ni(t,u)}else{var v=Bi(t),b=v==G||v==J;if(xu(t))return Ko(t,c);if(v==Q||v==B||b&&!o){if(u=s||b?{}:Vi(t),!c)return s?function(t,e){return ri(t,Li(t),e)}(t,function(t,e){return t&&ri(e,oc(e),t)}(u,t)):function(t,e){return ri(t,Fi(t),e)}(t,Pr(u,t))}else{if(!Se[v])return o?t:{};u=function(t,e,n){var r=t.constructor;switch(e){case ct:return Zo(t);case H:case q:return new r(+t);case st:return function(t,e){var n=e?Zo(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.byteLength)}(t,n);case lt:case ft:case dt:case pt:case ht:case vt:case bt:case yt:case gt:return Yo(t,n);case K:return new r;case Z:case rt:return new r(t);case et:return function(t){var e=new t.constructor(t.source,Vt.exec(t));return e.lastIndex=t.lastIndex,e}(t);case nt:return new r;case ot:return function(t){return lr?te(lr.call(t)):{}}(t)}}(t,v,c)}}a||(a=new _r);var y=a.get(t);if(y)return y;if(a.set(t,u),Tu(t))return t.forEach(function(r){u.add(Ir(r,e,n,r,t,a))}),u;if(Eu(t))return t.forEach(function(r,o){u.set(o,Ir(r,e,n,o,t,a))}),u;var g=f?i:(l?s?$i:Pi:s?oc:rc)(t);return Xe(g||t,function(r,o){g&&(r=t[o=r]),Sr(u,o,Ir(r,e,n,o,t,a))}),u}function Rr(t,e,n){var r=n.length;if(null==t)return!r;for(t=te(t);r--;){var o=n[r],a=e[o],u=t[o];if(u===i&&!(o in t)||!a(u))return!1}return!0}function Dr(t,e,n){if("function"!=typeof t)throw new re(c);return ra(function(){t.apply(i,n)},e)}function zr(t,e,n,r){var o=-1,i=Ze,u=!0,c=t.length,s=[],l=e.length;if(!c)return s;n&&(e=Qe(e,yn(n))),r?(i=Ye,u=!1):e.length>=a&&(i=mn,u=!1,e=new xr(e));t:for(;++o<c;){var f=t[o],d=null==n?f:n(f);if(f=r||0!==f?f:0,u&&d==d){for(var p=l;p--;)if(e[p]===d)continue t;s.push(f)}else i(e,d,r)||s.push(f)}return s}dr.templateSettings={escape:jt,evaluate:St,interpolate:Et,variable:"",imports:{_:dr}},dr.prototype=hr.prototype,dr.prototype.constructor=dr,vr.prototype=pr(hr.prototype),vr.prototype.constructor=vr,br.prototype=pr(hr.prototype),br.prototype.constructor=br,yr.prototype.clear=function(){this.__data__=er?er(null):{},this.size=0},yr.prototype.delete=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e},yr.prototype.get=function(t){var e=this.__data__;if(er){var n=e[t];return n===s?i:n}return se.call(e,t)?e[t]:i},yr.prototype.has=function(t){var e=this.__data__;return er?e[t]!==i:se.call(e,t)},yr.prototype.set=function(t,e){var n=this.__data__;return this.size+=this.has(t)?0:1,n[t]=er&&e===i?s:e,this},gr.prototype.clear=function(){this.__data__=[],this.size=0},gr.prototype.delete=function(t){var e=this.__data__,n=Er(e,t);return!(n<0||(n==e.length-1?e.pop():Ie.call(e,n,1),--this.size,0))},gr.prototype.get=function(t){var e=this.__data__,n=Er(e,t);return n<0?i:e[n][1]},gr.prototype.has=function(t){return Er(this.__data__,t)>-1},gr.prototype.set=function(t,e){var n=this.__data__,r=Er(n,t);return r<0?(++this.size,n.push([t,e])):n[r][1]=e,this},mr.prototype.clear=function(){this.size=0,this.__data__={hash:new yr,map:new(Zn||gr),string:new yr}},mr.prototype.delete=function(t){var e=Di(this,t).delete(t);return this.size-=e?1:0,e},mr.prototype.get=function(t){return Di(this,t).get(t)},mr.prototype.has=function(t){return Di(this,t).has(t)},mr.prototype.set=function(t,e){var n=Di(this,t),r=n.size;return n.set(t,e),this.size+=n.size==r?0:1,this},xr.prototype.add=xr.prototype.push=function(t){return this.__data__.set(t,s),this},xr.prototype.has=function(t){return this.__data__.has(t)},_r.prototype.clear=function(){this.__data__=new gr,this.size=0},_r.prototype.delete=function(t){var e=this.__data__,n=e.delete(t);return this.size=e.size,n},_r.prototype.get=function(t){return this.__data__.get(t)},_r.prototype.has=function(t){return this.__data__.has(t)},_r.prototype.set=function(t,e){var n=this.__data__;if(n instanceof gr){var r=n.__data__;if(!Zn||r.length<a-1)return r.push([t,e]),this.size=++n.size,this;n=this.__data__=new mr(r)}return n.set(t,e),this.size=n.size,this};var Nr=ai(Ur),Fr=ai(Xr,!0);function Lr(t,e){var n=!0;return Nr(t,function(t,r,o){return n=!!e(t,r,o)}),n}function Br(t,e,n){for(var r=-1,o=t.length;++r<o;){var a=t[r],u=e(a);if(null!=u&&(c===i?u==u&&!Iu(u):n(u,c)))var c=u,s=a}return s}function Wr(t,e){var n=[];return Nr(t,function(t,r,o){e(t,r,o)&&n.push(t)}),n}function Vr(t,e,n,r,o){var i=-1,a=t.length;for(n||(n=Hi),o||(o=[]);++i<a;){var u=t[i];e>0&&n(u)?e>1?Vr(u,e-1,n,r,o):tn(o,u):r||(o[o.length]=u)}return o}var Hr=ui(),qr=ui(!0);function Ur(t,e){return t&&Hr(t,e,rc)}function Xr(t,e){return t&&qr(t,e,rc)}function Gr(t,e){return Ke(e,function(e){return ku(t[e])})}function Jr(t,e){for(var n=0,r=(e=Uo(e,t)).length;null!=t&&n<r;)t=t[sa(e[n++])];return n&&n==r?t:i}function Kr(t,e,n){var r=e(t);return bu(t)?r:tn(r,n(t))}function Zr(t){return null==t?t===i?it:Y:Ne&&Ne in te(t)?function(t){var e=se.call(t,Ne),n=t[Ne];try{t[Ne]=i;var r=!0}catch(t){}var o=de.call(t);return r&&(e?t[Ne]=n:delete t[Ne]),o}(t):function(t){return de.call(t)}(t)}function Yr(t,e){return t>e}function Qr(t,e){return null!=t&&se.call(t,e)}function to(t,e){return null!=t&&e in te(t)}function eo(t,e,r){for(var o=r?Ye:Ze,a=t[0].length,u=t.length,c=u,s=n(u),l=1/0,f=[];c--;){var d=t[c];c&&e&&(d=Qe(d,yn(e))),l=qn(d.length,l),s[c]=!r&&(e||a>=120&&d.length>=120)?new xr(c&&d):i}d=t[0];var p=-1,h=s[0];t:for(;++p<a&&f.length<l;){var v=d[p],b=e?e(v):v;if(v=r||0!==v?v:0,!(h?mn(h,b):o(f,b,r))){for(c=u;--c;){var y=s[c];if(!(y?mn(y,b):o(t[c],b,r)))continue t}h&&h.push(b),f.push(v)}}return f}function no(t,e,n){var r=null==(t=ta(t,e=Uo(e,t)))?t:t[sa(wa(e))];return null==r?i:qe(r,t,n)}function ro(t){return Su(t)&&Zr(t)==B}function oo(t,e,n,r,o){return t===e||(null==t||null==e||!Su(t)&&!Su(e)?t!=t&&e!=e:function(t,e,n,r,o,a){var u=bu(t),c=bu(e),s=u?W:Bi(t),l=c?W:Bi(e),f=(s=s==B?Q:s)==Q,d=(l=l==B?Q:l)==Q,p=s==l;if(p&&xu(t)){if(!xu(e))return!1;u=!0,f=!1}if(p&&!f)return a||(a=new _r),u||Ru(t)?Ei(t,e,n,r,o,a):function(t,e,n,r,o,i,a){switch(n){case st:if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case ct:return!(t.byteLength!=e.byteLength||!i(new xe(t),new xe(e)));case H:case q:case Z:return du(+t,+e);case X:return t.name==e.name&&t.message==e.message;case et:case rt:return t==e+"";case K:var u=jn;case nt:var c=r&v;if(u||(u=An),t.size!=e.size&&!c)return!1;var s=a.get(t);if(s)return s==e;r|=b,a.set(t,e);var l=Ei(u(t),u(e),r,o,i,a);return a.delete(t),l;case ot:if(lr)return lr.call(t)==lr.call(e)}return!1}(t,e,s,n,r,o,a);if(!(n&v)){var h=f&&se.call(t,"__wrapped__"),y=d&&se.call(e,"__wrapped__");if(h||y){var g=h?t.value():t,m=y?e.value():e;return a||(a=new _r),o(g,m,n,r,a)}}return!!p&&(a||(a=new _r),function(t,e,n,r,o,a){var u=n&v,c=Pi(t),s=c.length,l=Pi(e).length;if(s!=l&&!u)return!1;for(var f=s;f--;){var d=c[f];if(!(u?d in e:se.call(e,d)))return!1}var p=a.get(t);if(p&&a.get(e))return p==e;var h=!0;a.set(t,e),a.set(e,t);for(var b=u;++f<s;){d=c[f];var y=t[d],g=e[d];if(r)var m=u?r(g,y,d,e,t,a):r(y,g,d,t,e,a);if(!(m===i?y===g||o(y,g,n,r,a):m)){h=!1;break}b||(b="constructor"==d)}if(h&&!b){var x=t.constructor,_=e.constructor;x!=_&&"constructor"in t&&"constructor"in e&&!("function"==typeof x&&x instanceof x&&"function"==typeof _&&_ instanceof _)&&(h=!1)}return a.delete(t),a.delete(e),h}(t,e,n,r,o,a))}(t,e,n,r,oo,o))}function io(t,e,n,r){var o=n.length,a=o,u=!r;if(null==t)return!a;for(t=te(t);o--;){var c=n[o];if(u&&c[2]?c[1]!==t[c[0]]:!(c[0]in t))return!1}for(;++o<a;){var s=(c=n[o])[0],l=t[s],f=c[1];if(u&&c[2]){if(l===i&&!(s in t))return!1}else{var d=new _r;if(r)var p=r(l,f,s,t,e,d);if(!(p===i?oo(f,l,v|b,r,d):p))return!1}}return!0}function ao(t){return!(!ju(t)||function(t){return!!fe&&fe in t}(t))&&(ku(t)?ve:Ut).test(la(t))}function uo(t){return"function"==typeof t?t:null==t?Ac:"object"==typeof t?bu(t)?ho(t[0],t[1]):po(t):Nc(t)}function co(t){if(!Ki(t))return Vn(t);var e=[];for(var n in te(t))se.call(t,n)&&"constructor"!=n&&e.push(n);return e}function so(t){if(!ju(t))return function(t){var e=[];if(null!=t)for(var n in te(t))e.push(n);return e}(t);var e=Ki(t),n=[];for(var r in t)("constructor"!=r||!e&&se.call(t,r))&&n.push(r);return n}function lo(t,e){return t<e}function fo(t,e){var r=-1,o=gu(t)?n(t.length):[];return Nr(t,function(t,n,i){o[++r]=e(t,n,i)}),o}function po(t){var e=zi(t);return 1==e.length&&e[0][2]?Yi(e[0][0],e[0][1]):function(n){return n===t||io(n,t,e)}}function ho(t,e){return Xi(t)&&Zi(e)?Yi(sa(t),e):function(n){var r=Yu(n,t);return r===i&&r===e?Qu(n,t):oo(e,r,v|b)}}function vo(t,e,n,r,o){t!==e&&Hr(e,function(a,u){if(ju(a))o||(o=new _r),function(t,e,n,r,o,a,u){var c=ea(t,n),s=ea(e,n),l=u.get(s);if(l)jr(t,n,l);else{var f=a?a(c,s,n+"",t,e,u):i,d=f===i;if(d){var p=bu(s),h=!p&&xu(s),v=!p&&!h&&Ru(s);f=s,p||h||v?bu(c)?f=c:mu(c)?f=ni(c):h?(d=!1,f=Ko(s,!0)):v?(d=!1,f=Yo(s,!0)):f=[]:Pu(s)||vu(s)?(f=c,vu(c)?f=Vu(c):ju(c)&&!ku(c)||(f=Vi(s))):d=!1}d&&(u.set(s,f),o(f,s,r,a,u),u.delete(s)),jr(t,n,f)}}(t,e,u,n,vo,r,o);else{var c=r?r(ea(t,u),a,u+"",t,e,o):i;c===i&&(c=a),jr(t,u,c)}},oc)}function bo(t,e){var n=t.length;if(n)return qi(e+=e<0?n:0,n)?t[e]:i}function yo(t,e,n){var r=-1;return e=Qe(e.length?e:[Ac],yn(Ri())),function(t,e){var n=t.length;for(t.sort(e);n--;)t[n]=t[n].value;return t}(fo(t,function(t,n,o){return{criteria:Qe(e,function(e){return e(t)}),index:++r,value:t}}),function(t,e){return function(t,e,n){for(var r=-1,o=t.criteria,i=e.criteria,a=o.length,u=n.length;++r<a;){var c=Qo(o[r],i[r]);if(c){if(r>=u)return c;var s=n[r];return c*("desc"==s?-1:1)}}return t.index-e.index}(t,e,n)})}function go(t,e,n){for(var r=-1,o=e.length,i={};++r<o;){var a=e[r],u=Jr(t,a);n(u,a)&&jo(i,Uo(a,t),u)}return i}function mo(t,e,n,r){var o=r?sn:cn,i=-1,a=e.length,u=t;for(t===e&&(e=ni(e)),n&&(u=Qe(t,yn(n)));++i<a;)for(var c=0,s=e[i],l=n?n(s):s;(c=o(u,l,c,r))>-1;)u!==t&&Ie.call(u,c,1),Ie.call(t,c,1);return t}function xo(t,e){for(var n=t?e.length:0,r=n-1;n--;){var o=e[n];if(n==r||o!==i){var i=o;qi(o)?Ie.call(t,o,1):No(t,o)}}return t}function _o(t,e){return t+Nn(Gn()*(e-t+1))}function wo(t,e){var n="";if(!t||e<1||e>I)return n;do{e%2&&(n+=t),(e=Nn(e/2))&&(t+=t)}while(e);return n}function ko(t,e){return oa(Qi(t,e,Ac),t+"")}function Co(t){return kr(dc(t))}function Oo(t,e){var n=dc(t);return ua(n,Mr(e,0,n.length))}function jo(t,e,n,r){if(!ju(t))return t;for(var o=-1,a=(e=Uo(e,t)).length,u=a-1,c=t;null!=c&&++o<a;){var s=sa(e[o]),l=n;if(o!=u){var f=c[s];(l=r?r(f,s,c):i)===i&&(l=ju(f)?f:qi(e[o+1])?[]:{})}Sr(c,s,l),c=c[s]}return t}var So=nr?function(t,e){return nr.set(t,e),t}:Ac,Eo=on?function(t,e){return on(t,"toString",{configurable:!0,enumerable:!1,value:jc(e),writable:!0})}:Ac;function Ao(t){return ua(dc(t))}function Po(t,e,r){var o=-1,i=t.length;e<0&&(e=-e>i?0:i+e),(r=r>i?i:r)<0&&(r+=i),i=e>r?0:r-e>>>0,e>>>=0;for(var a=n(i);++o<i;)a[o]=t[o+e];return a}function $o(t,e){var n;return Nr(t,function(t,r,o){return!(n=e(t,r,o))}),!!n}function To(t,e,n){var r=0,o=null==t?r:t.length;if("number"==typeof e&&e==e&&o<=F){for(;r<o;){var i=r+o>>>1,a=t[i];null!==a&&!Iu(a)&&(n?a<=e:a<e)?r=i+1:o=i}return o}return Mo(t,e,Ac,n)}function Mo(t,e,n,r){e=n(e);for(var o=0,a=null==t?0:t.length,u=e!=e,c=null===e,s=Iu(e),l=e===i;o<a;){var f=Nn((o+a)/2),d=n(t[f]),p=d!==i,h=null===d,v=d==d,b=Iu(d);if(u)var y=r||v;else y=l?v&&(r||p):c?v&&p&&(r||!h):s?v&&p&&!h&&(r||!b):!h&&!b&&(r?d<=e:d<e);y?o=f+1:a=f}return qn(a,N)}function Io(t,e){for(var n=-1,r=t.length,o=0,i=[];++n<r;){var a=t[n],u=e?e(a):a;if(!n||!du(u,c)){var c=u;i[o++]=0===a?0:a}}return i}function Ro(t){return"number"==typeof t?t:Iu(t)?D:+t}function Do(t){if("string"==typeof t)return t;if(bu(t))return Qe(t,Do)+"";if(Iu(t))return fr?fr.call(t):"";var e=t+"";return"0"==e&&1/t==-M?"-0":e}function zo(t,e,n){var r=-1,o=Ze,i=t.length,u=!0,c=[],s=c;if(n)u=!1,o=Ye;else if(i>=a){var l=e?null:wi(t);if(l)return An(l);u=!1,o=mn,s=new xr}else s=e?[]:c;t:for(;++r<i;){var f=t[r],d=e?e(f):f;if(f=n||0!==f?f:0,u&&d==d){for(var p=s.length;p--;)if(s[p]===d)continue t;e&&s.push(d),c.push(f)}else o(s,d,n)||(s!==c&&s.push(d),c.push(f))}return c}function No(t,e){return null==(t=ta(t,e=Uo(e,t)))||delete t[sa(wa(e))]}function Fo(t,e,n,r){return jo(t,e,n(Jr(t,e)),r)}function Lo(t,e,n,r){for(var o=t.length,i=r?o:-1;(r?i--:++i<o)&&e(t[i],i,t););return n?Po(t,r?0:i,r?i+1:o):Po(t,r?i+1:0,r?o:i)}function Bo(t,e){var n=t;return n instanceof br&&(n=n.value()),en(e,function(t,e){return e.func.apply(e.thisArg,tn([t],e.args))},n)}function Wo(t,e,r){var o=t.length;if(o<2)return o?zo(t[0]):[];for(var i=-1,a=n(o);++i<o;)for(var u=t[i],c=-1;++c<o;)c!=i&&(a[i]=zr(a[i]||u,t[c],e,r));return zo(Vr(a,1),e,r)}function Vo(t,e,n){for(var r=-1,o=t.length,a=e.length,u={};++r<o;){var c=r<a?e[r]:i;n(u,t[r],c)}return u}function Ho(t){return mu(t)?t:[]}function qo(t){return"function"==typeof t?t:Ac}function Uo(t,e){return bu(t)?t:Xi(t,e)?[t]:ca(Hu(t))}var Xo=ko;function Go(t,e,n){var r=t.length;return n=n===i?r:n,!e&&n>=r?t:Po(t,e,n)}var Jo=pn||function(t){return Me.clearTimeout(t)};function Ko(t,e){if(e)return t.slice();var n=t.length,r=we?we(n):new t.constructor(n);return t.copy(r),r}function Zo(t){var e=new t.constructor(t.byteLength);return new xe(e).set(new xe(t)),e}function Yo(t,e){var n=e?Zo(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.length)}function Qo(t,e){if(t!==e){var n=t!==i,r=null===t,o=t==t,a=Iu(t),u=e!==i,c=null===e,s=e==e,l=Iu(e);if(!c&&!l&&!a&&t>e||a&&u&&s&&!c&&!l||r&&u&&s||!n&&s||!o)return 1;if(!r&&!a&&!l&&t<e||l&&n&&o&&!r&&!a||c&&n&&o||!u&&o||!s)return-1}return 0}function ti(t,e,r,o){for(var i=-1,a=t.length,u=r.length,c=-1,s=e.length,l=Hn(a-u,0),f=n(s+l),d=!o;++c<s;)f[c]=e[c];for(;++i<u;)(d||i<a)&&(f[r[i]]=t[i]);for(;l--;)f[c++]=t[i++];return f}function ei(t,e,r,o){for(var i=-1,a=t.length,u=-1,c=r.length,s=-1,l=e.length,f=Hn(a-c,0),d=n(f+l),p=!o;++i<f;)d[i]=t[i];for(var h=i;++s<l;)d[h+s]=e[s];for(;++u<c;)(p||i<a)&&(d[h+r[u]]=t[i++]);return d}function ni(t,e){var r=-1,o=t.length;for(e||(e=n(o));++r<o;)e[r]=t[r];return e}function ri(t,e,n,r){var o=!n;n||(n={});for(var a=-1,u=e.length;++a<u;){var c=e[a],s=r?r(n[c],t[c],c,n,t):i;s===i&&(s=t[c]),o?$r(n,c,s):Sr(n,c,s)}return n}function oi(t,e){return function(n,r){var o=bu(n)?Ue:Ar,i=e?e():{};return o(n,t,Ri(r,2),i)}}function ii(t){return ko(function(e,n){var r=-1,o=n.length,a=o>1?n[o-1]:i,u=o>2?n[2]:i;for(a=t.length>3&&"function"==typeof a?(o--,a):i,u&&Ui(n[0],n[1],u)&&(a=o<3?i:a,o=1),e=te(e);++r<o;){var c=n[r];c&&t(e,c,r,a)}return e})}function ai(t,e){return function(n,r){if(null==n)return n;if(!gu(n))return t(n,r);for(var o=n.length,i=e?o:-1,a=te(n);(e?i--:++i<o)&&!1!==r(a[i],i,a););return n}}function ui(t){return function(e,n,r){for(var o=-1,i=te(e),a=r(e),u=a.length;u--;){var c=a[t?u:++o];if(!1===n(i[c],c,i))break}return e}}function ci(t){return function(e){var n=On(e=Hu(e))?Tn(e):i,r=n?n[0]:e.charAt(0),o=n?Go(n,1).join(""):e.slice(1);return r[t]()+o}}function si(t){return function(e){return en(kc(vc(e).replace(ge,"")),t,"")}}function li(t){return function(){var e=arguments;switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3]);case 5:return new t(e[0],e[1],e[2],e[3],e[4]);case 6:return new t(e[0],e[1],e[2],e[3],e[4],e[5]);case 7:return new t(e[0],e[1],e[2],e[3],e[4],e[5],e[6])}var n=pr(t.prototype),r=t.apply(n,e);return ju(r)?r:n}}function fi(t){return function(e,n,r){var o=te(e);if(!gu(e)){var a=Ri(n,3);e=rc(e),n=function(t){return a(o[t],t,o)}}var u=t(e,n,r);return u>-1?o[a?e[u]:u]:i}}function di(t){return Ai(function(e){var n=e.length,r=n,o=vr.prototype.thru;for(t&&e.reverse();r--;){var a=e[r];if("function"!=typeof a)throw new re(c);if(o&&!u&&"wrapper"==Mi(a))var u=new vr([],!0)}for(r=u?r:n;++r<n;){var s=Mi(a=e[r]),l="wrapper"==s?Ti(a):i;u=l&&Gi(l[0])&&l[1]==(C|x|w|O)&&!l[4].length&&1==l[9]?u[Mi(l[0])].apply(u,l[3]):1==a.length&&Gi(a)?u[s]():u.thru(a)}return function(){var t=arguments,r=t[0];if(u&&1==t.length&&bu(r))return u.plant(r).value();for(var o=0,i=n?e[o].apply(this,t):r;++o<n;)i=e[o].call(this,i);return i}})}function pi(t,e,r,o,a,u,c,s,l,f){var d=e&C,p=e&y,h=e&g,v=e&(x|_),b=e&j,m=h?i:li(t);return function y(){for(var g=arguments.length,x=n(g),_=g;_--;)x[_]=arguments[_];if(v)var w=Ii(y),k=function(t,e){for(var n=t.length,r=0;n--;)t[n]===e&&++r;return r}(x,w);if(o&&(x=ti(x,o,a,v)),u&&(x=ei(x,u,c,v)),g-=k,v&&g<f){var C=En(x,w);return xi(t,e,pi,y.placeholder,r,x,C,s,l,f-g)}var O=p?r:this,j=h?O[t]:t;return g=x.length,s?x=function(t,e){for(var n=t.length,r=qn(e.length,n),o=ni(t);r--;){var a=e[r];t[r]=qi(a,n)?o[a]:i}return t}(x,s):b&&g>1&&x.reverse(),d&&l<g&&(x.length=l),this&&this!==Me&&this instanceof y&&(j=m||li(j)),j.apply(O,x)}}function hi(t,e){return function(n,r){return function(t,e,n,r){return Ur(t,function(t,o,i){e(r,n(t),o,i)}),r}(n,t,e(r),{})}}function vi(t,e){return function(n,r){var o;if(n===i&&r===i)return e;if(n!==i&&(o=n),r!==i){if(o===i)return r;"string"==typeof n||"string"==typeof r?(n=Do(n),r=Do(r)):(n=Ro(n),r=Ro(r)),o=t(n,r)}return o}}function bi(t){return Ai(function(e){return e=Qe(e,yn(Ri())),ko(function(n){var r=this;return t(e,function(t){return qe(t,r,n)})})})}function yi(t,e){var n=(e=e===i?" ":Do(e)).length;if(n<2)return n?wo(e,t):e;var r=wo(e,zn(t/$n(e)));return On(e)?Go(Tn(r),0,t).join(""):r.slice(0,t)}function gi(t){return function(e,r,o){return o&&"number"!=typeof o&&Ui(e,r,o)&&(r=o=i),e=Fu(e),r===i?(r=e,e=0):r=Fu(r),function(t,e,r,o){for(var i=-1,a=Hn(zn((e-t)/(r||1)),0),u=n(a);a--;)u[o?a:++i]=t,t+=r;return u}(e,r,o=o===i?e<r?1:-1:Fu(o),t)}}function mi(t){return function(e,n){return"string"==typeof e&&"string"==typeof n||(e=Wu(e),n=Wu(n)),t(e,n)}}function xi(t,e,n,r,o,a,u,c,s,l){var f=e&x;e|=f?w:k,(e&=~(f?k:w))&m||(e&=~(y|g));var d=[t,e,o,f?a:i,f?u:i,f?i:a,f?i:u,c,s,l],p=n.apply(i,d);return Gi(t)&&na(p,d),p.placeholder=r,ia(p,t,e)}function _i(t){var e=Qt[t];return function(t,n){if(t=Wu(t),n=null==n?0:qn(Lu(n),292)){var r=(Hu(t)+"e").split("e");return+((r=(Hu(e(r[0]+"e"+(+r[1]+n)))+"e").split("e"))[0]+"e"+(+r[1]-n))}return e(t)}}var wi=Qn&&1/An(new Qn([,-0]))[1]==M?function(t){return new Qn(t)}:Ic;function ki(t){return function(e){var n=Bi(e);return n==K?jn(e):n==nt?Pn(e):function(t,e){return Qe(e,function(e){return[e,t[e]]})}(e,t(e))}}function Ci(t,e,r,o,a,u,s,l){var d=e&g;if(!d&&"function"!=typeof t)throw new re(c);var p=o?o.length:0;if(p||(e&=~(w|k),o=a=i),s=s===i?s:Hn(Lu(s),0),l=l===i?l:Lu(l),p-=a?a.length:0,e&k){var h=o,v=a;o=a=i}var b=d?i:Ti(t),j=[t,e,r,o,a,h,v,u,s,l];if(b&&function(t,e){var n=t[1],r=e[1],o=n|r,i=o<(y|g|C),a=r==C&&n==x||r==C&&n==O&&t[7].length<=e[8]||r==(C|O)&&e[7].length<=e[8]&&n==x;if(!i&&!a)return t;r&y&&(t[2]=e[2],o|=n&y?0:m);var u=e[3];if(u){var c=t[3];t[3]=c?ti(c,u,e[4]):u,t[4]=c?En(t[3],f):e[4]}(u=e[5])&&(c=t[5],t[5]=c?ei(c,u,e[6]):u,t[6]=c?En(t[5],f):e[6]),(u=e[7])&&(t[7]=u),r&C&&(t[8]=null==t[8]?e[8]:qn(t[8],e[8])),null==t[9]&&(t[9]=e[9]),t[0]=e[0],t[1]=o}(j,b),t=j[0],e=j[1],r=j[2],o=j[3],a=j[4],!(l=j[9]=j[9]===i?d?0:t.length:Hn(j[9]-p,0))&&e&(x|_)&&(e&=~(x|_)),e&&e!=y)S=e==x||e==_?function(t,e,r){var o=li(t);return function a(){for(var u=arguments.length,c=n(u),s=u,l=Ii(a);s--;)c[s]=arguments[s];var f=u<3&&c[0]!==l&&c[u-1]!==l?[]:En(c,l);return(u-=f.length)<r?xi(t,e,pi,a.placeholder,i,c,f,i,i,r-u):qe(this&&this!==Me&&this instanceof a?o:t,this,c)}}(t,e,l):e!=w&&e!=(y|w)||a.length?pi.apply(i,j):function(t,e,r,o){var i=e&y,a=li(t);return function e(){for(var u=-1,c=arguments.length,s=-1,l=o.length,f=n(l+c),d=this&&this!==Me&&this instanceof e?a:t;++s<l;)f[s]=o[s];for(;c--;)f[s++]=arguments[++u];return qe(d,i?r:this,f)}}(t,e,r,o);else var S=function(t,e,n){var r=e&y,o=li(t);return function e(){return(this&&this!==Me&&this instanceof e?o:t).apply(r?n:this,arguments)}}(t,e,r);return ia((b?So:na)(S,j),t,e)}function Oi(t,e,n,r){return t===i||du(t,ae[n])&&!se.call(r,n)?e:t}function ji(t,e,n,r,o,a){return ju(t)&&ju(e)&&(a.set(e,t),vo(t,e,i,ji,a),a.delete(e)),t}function Si(t){return Pu(t)?i:t}function Ei(t,e,n,r,o,a){var u=n&v,c=t.length,s=e.length;if(c!=s&&!(u&&s>c))return!1;var l=a.get(t);if(l&&a.get(e))return l==e;var f=-1,d=!0,p=n&b?new xr:i;for(a.set(t,e),a.set(e,t);++f<c;){var h=t[f],y=e[f];if(r)var g=u?r(y,h,f,e,t,a):r(h,y,f,t,e,a);if(g!==i){if(g)continue;d=!1;break}if(p){if(!rn(e,function(t,e){if(!mn(p,e)&&(h===t||o(h,t,n,r,a)))return p.push(e)})){d=!1;break}}else if(h!==y&&!o(h,y,n,r,a)){d=!1;break}}return a.delete(t),a.delete(e),d}function Ai(t){return oa(Qi(t,i,ya),t+"")}function Pi(t){return Kr(t,rc,Fi)}function $i(t){return Kr(t,oc,Li)}var Ti=nr?function(t){return nr.get(t)}:Ic;function Mi(t){for(var e=t.name+"",n=rr[e],r=se.call(rr,e)?n.length:0;r--;){var o=n[r],i=o.func;if(null==i||i==t)return o.name}return e}function Ii(t){return(se.call(dr,"placeholder")?dr:t).placeholder}function Ri(){var t=dr.iteratee||Pc;return t=t===Pc?uo:t,arguments.length?t(arguments[0],arguments[1]):t}function Di(t,e){var n=t.__data__;return function(t){var e=typeof t;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==t:null===t}(e)?n["string"==typeof e?"string":"hash"]:n.map}function zi(t){for(var e=rc(t),n=e.length;n--;){var r=e[n],o=t[r];e[n]=[r,o,Zi(o)]}return e}function Ni(t,e){var n=function(t,e){return null==t?i:t[e]}(t,e);return ao(n)?n:i}var Fi=Fn?function(t){return null==t?[]:(t=te(t),Ke(Fn(t),function(e){return Te.call(t,e)}))}:Bc,Li=Fn?function(t){for(var e=[];t;)tn(e,Fi(t)),t=Ee(t);return e}:Bc,Bi=Zr;function Wi(t,e,n){for(var r=-1,o=(e=Uo(e,t)).length,i=!1;++r<o;){var a=sa(e[r]);if(!(i=null!=t&&n(t,a)))break;t=t[a]}return i||++r!=o?i:!!(o=null==t?0:t.length)&&Ou(o)&&qi(a,o)&&(bu(t)||vu(t))}function Vi(t){return"function"!=typeof t.constructor||Ki(t)?{}:pr(Ee(t))}function Hi(t){return bu(t)||vu(t)||!!(Re&&t&&t[Re])}function qi(t,e){var n=typeof t;return!!(e=null==e?I:e)&&("number"==n||"symbol"!=n&&Gt.test(t))&&t>-1&&t%1==0&&t<e}function Ui(t,e,n){if(!ju(n))return!1;var r=typeof e;return!!("number"==r?gu(n)&&qi(e,n.length):"string"==r&&e in n)&&du(n[e],t)}function Xi(t,e){if(bu(t))return!1;var n=typeof t;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=t&&!Iu(t))||Pt.test(t)||!At.test(t)||null!=e&&t in te(e)}function Gi(t){var e=Mi(t),n=dr[e];if("function"!=typeof n||!(e in br.prototype))return!1;if(t===n)return!0;var r=Ti(n);return!!r&&t===r[0]}(Kn&&Bi(new Kn(new ArrayBuffer(1)))!=st||Zn&&Bi(new Zn)!=K||Yn&&"[object Promise]"!=Bi(Yn.resolve())||Qn&&Bi(new Qn)!=nt||tr&&Bi(new tr)!=at)&&(Bi=function(t){var e=Zr(t),n=e==Q?t.constructor:i,r=n?la(n):"";if(r)switch(r){case or:return st;case ir:return K;case ar:return"[object Promise]";case ur:return nt;case cr:return at}return e});var Ji=ue?ku:Wc;function Ki(t){var e=t&&t.constructor;return t===("function"==typeof e&&e.prototype||ae)}function Zi(t){return t==t&&!ju(t)}function Yi(t,e){return function(n){return null!=n&&n[t]===e&&(e!==i||t in te(n))}}function Qi(t,e,r){return e=Hn(e===i?t.length-1:e,0),function(){for(var o=arguments,i=-1,a=Hn(o.length-e,0),u=n(a);++i<a;)u[i]=o[e+i];i=-1;for(var c=n(e+1);++i<e;)c[i]=o[i];return c[e]=r(u),qe(t,this,c)}}function ta(t,e){return e.length<2?t:Jr(t,Po(e,0,-1))}function ea(t,e){if("__proto__"!=e)return t[e]}var na=aa(So),ra=Dn||function(t,e){return Me.setTimeout(t,e)},oa=aa(Eo);function ia(t,e,n){var r=e+"";return oa(t,function(t,e){var n=e.length;if(!n)return t;var r=n-1;return e[r]=(n>1?"& ":"")+e[r],e=e.join(n>2?", ":" "),t.replace(zt,"{\n/* [wrapped with "+e+"] */\n")}(r,function(t,e){return Xe(L,function(n){var r="_."+n[0];e&n[1]&&!Ze(t,r)&&t.push(r)}),t.sort()}(function(t){var e=t.match(Nt);return e?e[1].split(Ft):[]}(r),n)))}function aa(t){var e=0,n=0;return function(){var r=Un(),o=P-(r-n);if(n=r,o>0){if(++e>=A)return arguments[0]}else e=0;return t.apply(i,arguments)}}function ua(t,e){var n=-1,r=t.length,o=r-1;for(e=e===i?r:e;++n<e;){var a=_o(n,o),u=t[a];t[a]=t[n],t[n]=u}return t.length=e,t}var ca=function(t){var e=au(t,function(t){return n.size===l&&n.clear(),t}),n=e.cache;return e}(function(t){var e=[];return 46===t.charCodeAt(0)&&e.push(""),t.replace($t,function(t,n,r,o){e.push(r?o.replace(Bt,"$1"):n||t)}),e});function sa(t){if("string"==typeof t||Iu(t))return t;var e=t+"";return"0"==e&&1/t==-M?"-0":e}function la(t){if(null!=t){try{return ce.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function fa(t){if(t instanceof br)return t.clone();var e=new vr(t.__wrapped__,t.__chain__);return e.__actions__=ni(t.__actions__),e.__index__=t.__index__,e.__values__=t.__values__,e}var da=ko(function(t,e){return mu(t)?zr(t,Vr(e,1,mu,!0)):[]}),pa=ko(function(t,e){var n=wa(e);return mu(n)&&(n=i),mu(t)?zr(t,Vr(e,1,mu,!0),Ri(n,2)):[]}),ha=ko(function(t,e){var n=wa(e);return mu(n)&&(n=i),mu(t)?zr(t,Vr(e,1,mu,!0),i,n):[]});function va(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var o=null==n?0:Lu(n);return o<0&&(o=Hn(r+o,0)),un(t,Ri(e,3),o)}function ba(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var o=r-1;return n!==i&&(o=Lu(n),o=n<0?Hn(r+o,0):qn(o,r-1)),un(t,Ri(e,3),o,!0)}function ya(t){return null!=t&&t.length?Vr(t,1):[]}function ga(t){return t&&t.length?t[0]:i}var ma=ko(function(t){var e=Qe(t,Ho);return e.length&&e[0]===t[0]?eo(e):[]}),xa=ko(function(t){var e=wa(t),n=Qe(t,Ho);return e===wa(n)?e=i:n.pop(),n.length&&n[0]===t[0]?eo(n,Ri(e,2)):[]}),_a=ko(function(t){var e=wa(t),n=Qe(t,Ho);return(e="function"==typeof e?e:i)&&n.pop(),n.length&&n[0]===t[0]?eo(n,i,e):[]});function wa(t){var e=null==t?0:t.length;return e?t[e-1]:i}var ka=ko(Ca);function Ca(t,e){return t&&t.length&&e&&e.length?mo(t,e):t}var Oa=Ai(function(t,e){var n=null==t?0:t.length,r=Tr(t,e);return xo(t,Qe(e,function(t){return qi(t,n)?+t:t}).sort(Qo)),r});function ja(t){return null==t?t:Jn.call(t)}var Sa=ko(function(t){return zo(Vr(t,1,mu,!0))}),Ea=ko(function(t){var e=wa(t);return mu(e)&&(e=i),zo(Vr(t,1,mu,!0),Ri(e,2))}),Aa=ko(function(t){var e=wa(t);return e="function"==typeof e?e:i,zo(Vr(t,1,mu,!0),i,e)});function Pa(t){if(!t||!t.length)return[];var e=0;return t=Ke(t,function(t){if(mu(t))return e=Hn(t.length,e),!0}),bn(e,function(e){return Qe(t,dn(e))})}function $a(t,e){if(!t||!t.length)return[];var n=Pa(t);return null==e?n:Qe(n,function(t){return qe(e,i,t)})}var Ta=ko(function(t,e){return mu(t)?zr(t,e):[]}),Ma=ko(function(t){return Wo(Ke(t,mu))}),Ia=ko(function(t){var e=wa(t);return mu(e)&&(e=i),Wo(Ke(t,mu),Ri(e,2))}),Ra=ko(function(t){var e=wa(t);return e="function"==typeof e?e:i,Wo(Ke(t,mu),i,e)}),Da=ko(Pa);var za=ko(function(t){var e=t.length,n=e>1?t[e-1]:i;return $a(t,n="function"==typeof n?(t.pop(),n):i)});function Na(t){var e=dr(t);return e.__chain__=!0,e}function Fa(t,e){return e(t)}var La=Ai(function(t){var e=t.length,n=e?t[0]:0,r=this.__wrapped__,o=function(e){return Tr(e,t)};return!(e>1||this.__actions__.length)&&r instanceof br&&qi(n)?((r=r.slice(n,+n+(e?1:0))).__actions__.push({func:Fa,args:[o],thisArg:i}),new vr(r,this.__chain__).thru(function(t){return e&&!t.length&&t.push(i),t})):this.thru(o)});var Ba=oi(function(t,e,n){se.call(t,n)?++t[n]:$r(t,n,1)});var Wa=fi(va),Va=fi(ba);function Ha(t,e){return(bu(t)?Xe:Nr)(t,Ri(e,3))}function qa(t,e){return(bu(t)?Ge:Fr)(t,Ri(e,3))}var Ua=oi(function(t,e,n){se.call(t,n)?t[n].push(e):$r(t,n,[e])});var Xa=ko(function(t,e,r){var o=-1,i="function"==typeof e,a=gu(t)?n(t.length):[];return Nr(t,function(t){a[++o]=i?qe(e,t,r):no(t,e,r)}),a}),Ga=oi(function(t,e,n){$r(t,n,e)});function Ja(t,e){return(bu(t)?Qe:fo)(t,Ri(e,3))}var Ka=oi(function(t,e,n){t[n?0:1].push(e)},function(){return[[],[]]});var Za=ko(function(t,e){if(null==t)return[];var n=e.length;return n>1&&Ui(t,e[0],e[1])?e=[]:n>2&&Ui(e[0],e[1],e[2])&&(e=[e[0]]),yo(t,Vr(e,1),[])}),Ya=Rn||function(){return Me.Date.now()};function Qa(t,e,n){return e=n?i:e,e=t&&null==e?t.length:e,Ci(t,C,i,i,i,i,e)}function tu(t,e){var n;if("function"!=typeof e)throw new re(c);return t=Lu(t),function(){return--t>0&&(n=e.apply(this,arguments)),t<=1&&(e=i),n}}var eu=ko(function(t,e,n){var r=y;if(n.length){var o=En(n,Ii(eu));r|=w}return Ci(t,r,e,n,o)}),nu=ko(function(t,e,n){var r=y|g;if(n.length){var o=En(n,Ii(nu));r|=w}return Ci(e,r,t,n,o)});function ru(t,e,n){var r,o,a,u,s,l,f=0,d=!1,p=!1,h=!0;if("function"!=typeof t)throw new re(c);function v(e){var n=r,a=o;return r=o=i,f=e,u=t.apply(a,n)}function b(t){var n=t-l;return l===i||n>=e||n<0||p&&t-f>=a}function y(){var t=Ya();if(b(t))return g(t);s=ra(y,function(t){var n=e-(t-l);return p?qn(n,a-(t-f)):n}(t))}function g(t){return s=i,h&&r?v(t):(r=o=i,u)}function m(){var t=Ya(),n=b(t);if(r=arguments,o=this,l=t,n){if(s===i)return function(t){return f=t,s=ra(y,e),d?v(t):u}(l);if(p)return s=ra(y,e),v(l)}return s===i&&(s=ra(y,e)),u}return e=Wu(e)||0,ju(n)&&(d=!!n.leading,a=(p="maxWait"in n)?Hn(Wu(n.maxWait)||0,e):a,h="trailing"in n?!!n.trailing:h),m.cancel=function(){s!==i&&Jo(s),f=0,r=l=o=s=i},m.flush=function(){return s===i?u:g(Ya())},m}var ou=ko(function(t,e){return Dr(t,1,e)}),iu=ko(function(t,e,n){return Dr(t,Wu(e)||0,n)});function au(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new re(c);var n=function(){var r=arguments,o=e?e.apply(this,r):r[0],i=n.cache;if(i.has(o))return i.get(o);var a=t.apply(this,r);return n.cache=i.set(o,a)||i,a};return n.cache=new(au.Cache||mr),n}function uu(t){if("function"!=typeof t)throw new re(c);return function(){var e=arguments;switch(e.length){case 0:return!t.call(this);case 1:return!t.call(this,e[0]);case 2:return!t.call(this,e[0],e[1]);case 3:return!t.call(this,e[0],e[1],e[2])}return!t.apply(this,e)}}au.Cache=mr;var cu=Xo(function(t,e){var n=(e=1==e.length&&bu(e[0])?Qe(e[0],yn(Ri())):Qe(Vr(e,1),yn(Ri()))).length;return ko(function(r){for(var o=-1,i=qn(r.length,n);++o<i;)r[o]=e[o].call(this,r[o]);return qe(t,this,r)})}),su=ko(function(t,e){var n=En(e,Ii(su));return Ci(t,w,i,e,n)}),lu=ko(function(t,e){var n=En(e,Ii(lu));return Ci(t,k,i,e,n)}),fu=Ai(function(t,e){return Ci(t,O,i,i,i,e)});function du(t,e){return t===e||t!=t&&e!=e}var pu=mi(Yr),hu=mi(function(t,e){return t>=e}),vu=ro(function(){return arguments}())?ro:function(t){return Su(t)&&se.call(t,"callee")&&!Te.call(t,"callee")},bu=n.isArray,yu=Fe?yn(Fe):function(t){return Su(t)&&Zr(t)==ct};function gu(t){return null!=t&&Ou(t.length)&&!ku(t)}function mu(t){return Su(t)&&gu(t)}var xu=Ln||Wc,_u=Le?yn(Le):function(t){return Su(t)&&Zr(t)==q};function wu(t){if(!Su(t))return!1;var e=Zr(t);return e==X||e==U||"string"==typeof t.message&&"string"==typeof t.name&&!Pu(t)}function ku(t){if(!ju(t))return!1;var e=Zr(t);return e==G||e==J||e==V||e==tt}function Cu(t){return"number"==typeof t&&t==Lu(t)}function Ou(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=I}function ju(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}function Su(t){return null!=t&&"object"==typeof t}var Eu=Be?yn(Be):function(t){return Su(t)&&Bi(t)==K};function Au(t){return"number"==typeof t||Su(t)&&Zr(t)==Z}function Pu(t){if(!Su(t)||Zr(t)!=Q)return!1;var e=Ee(t);if(null===e)return!0;var n=se.call(e,"constructor")&&e.constructor;return"function"==typeof n&&n instanceof n&&ce.call(n)==pe}var $u=We?yn(We):function(t){return Su(t)&&Zr(t)==et};var Tu=Ve?yn(Ve):function(t){return Su(t)&&Bi(t)==nt};function Mu(t){return"string"==typeof t||!bu(t)&&Su(t)&&Zr(t)==rt}function Iu(t){return"symbol"==typeof t||Su(t)&&Zr(t)==ot}var Ru=He?yn(He):function(t){return Su(t)&&Ou(t.length)&&!!je[Zr(t)]};var Du=mi(lo),zu=mi(function(t,e){return t<=e});function Nu(t){if(!t)return[];if(gu(t))return Mu(t)?Tn(t):ni(t);if(ze&&t[ze])return function(t){for(var e,n=[];!(e=t.next()).done;)n.push(e.value);return n}(t[ze]());var e=Bi(t);return(e==K?jn:e==nt?An:dc)(t)}function Fu(t){return t?(t=Wu(t))===M||t===-M?(t<0?-1:1)*R:t==t?t:0:0===t?t:0}function Lu(t){var e=Fu(t),n=e%1;return e==e?n?e-n:e:0}function Bu(t){return t?Mr(Lu(t),0,z):0}function Wu(t){if("number"==typeof t)return t;if(Iu(t))return D;if(ju(t)){var e="function"==typeof t.valueOf?t.valueOf():t;t=ju(e)?e+"":e}if("string"!=typeof t)return 0===t?t:+t;t=t.replace(It,"");var n=qt.test(t);return n||Xt.test(t)?Pe(t.slice(2),n?2:8):Ht.test(t)?D:+t}function Vu(t){return ri(t,oc(t))}function Hu(t){return null==t?"":Do(t)}var qu=ii(function(t,e){if(Ki(e)||gu(e))ri(e,rc(e),t);else for(var n in e)se.call(e,n)&&Sr(t,n,e[n])}),Uu=ii(function(t,e){ri(e,oc(e),t)}),Xu=ii(function(t,e,n,r){ri(e,oc(e),t,r)}),Gu=ii(function(t,e,n,r){ri(e,rc(e),t,r)}),Ju=Ai(Tr);var Ku=ko(function(t,e){t=te(t);var n=-1,r=e.length,o=r>2?e[2]:i;for(o&&Ui(e[0],e[1],o)&&(r=1);++n<r;)for(var a=e[n],u=oc(a),c=-1,s=u.length;++c<s;){var l=u[c],f=t[l];(f===i||du(f,ae[l])&&!se.call(t,l))&&(t[l]=a[l])}return t}),Zu=ko(function(t){return t.push(i,ji),qe(ac,i,t)});function Yu(t,e,n){var r=null==t?i:Jr(t,e);return r===i?n:r}function Qu(t,e){return null!=t&&Wi(t,e,to)}var tc=hi(function(t,e,n){null!=e&&"function"!=typeof e.toString&&(e=de.call(e)),t[e]=n},jc(Ac)),ec=hi(function(t,e,n){null!=e&&"function"!=typeof e.toString&&(e=de.call(e)),se.call(t,e)?t[e].push(n):t[e]=[n]},Ri),nc=ko(no);function rc(t){return gu(t)?wr(t):co(t)}function oc(t){return gu(t)?wr(t,!0):so(t)}var ic=ii(function(t,e,n){vo(t,e,n)}),ac=ii(function(t,e,n,r){vo(t,e,n,r)}),uc=Ai(function(t,e){var n={};if(null==t)return n;var r=!1;e=Qe(e,function(e){return e=Uo(e,t),r||(r=e.length>1),e}),ri(t,$i(t),n),r&&(n=Ir(n,d|p|h,Si));for(var o=e.length;o--;)No(n,e[o]);return n});var cc=Ai(function(t,e){return null==t?{}:function(t,e){return go(t,e,function(e,n){return Qu(t,n)})}(t,e)});function sc(t,e){if(null==t)return{};var n=Qe($i(t),function(t){return[t]});return e=Ri(e),go(t,n,function(t,n){return e(t,n[0])})}var lc=ki(rc),fc=ki(oc);function dc(t){return null==t?[]:gn(t,rc(t))}var pc=si(function(t,e,n){return e=e.toLowerCase(),t+(n?hc(e):e)});function hc(t){return wc(Hu(t).toLowerCase())}function vc(t){return(t=Hu(t))&&t.replace(Jt,wn).replace(me,"")}var bc=si(function(t,e,n){return t+(n?"-":"")+e.toLowerCase()}),yc=si(function(t,e,n){return t+(n?" ":"")+e.toLowerCase()}),gc=ci("toLowerCase");var mc=si(function(t,e,n){return t+(n?"_":"")+e.toLowerCase()});var xc=si(function(t,e,n){return t+(n?" ":"")+wc(e)});var _c=si(function(t,e,n){return t+(n?" ":"")+e.toUpperCase()}),wc=ci("toUpperCase");function kc(t,e,n){return t=Hu(t),(e=n?i:e)===i?function(t){return ke.test(t)}(t)?function(t){return t.match(_e)||[]}(t):function(t){return t.match(Lt)||[]}(t):t.match(e)||[]}var Cc=ko(function(t,e){try{return qe(t,i,e)}catch(t){return wu(t)?t:new o(t)}}),Oc=Ai(function(t,e){return Xe(e,function(e){e=sa(e),$r(t,e,eu(t[e],t))}),t});function jc(t){return function(){return t}}var Sc=di(),Ec=di(!0);function Ac(t){return t}function Pc(t){return uo("function"==typeof t?t:Ir(t,d))}var $c=ko(function(t,e){return function(n){return no(n,t,e)}}),Tc=ko(function(t,e){return function(n){return no(t,n,e)}});function Mc(t,e,n){var r=rc(e),o=Gr(e,r);null!=n||ju(e)&&(o.length||!r.length)||(n=e,e=t,t=this,o=Gr(e,rc(e)));var i=!(ju(n)&&"chain"in n&&!n.chain),a=ku(t);return Xe(o,function(n){var r=e[n];t[n]=r,a&&(t.prototype[n]=function(){var e=this.__chain__;if(i||e){var n=t(this.__wrapped__);return(n.__actions__=ni(this.__actions__)).push({func:r,args:arguments,thisArg:t}),n.__chain__=e,n}return r.apply(t,tn([this.value()],arguments))})}),t}function Ic(){}var Rc=bi(Qe),Dc=bi(Je),zc=bi(rn);function Nc(t){return Xi(t)?dn(sa(t)):function(t){return function(e){return Jr(e,t)}}(t)}var Fc=gi(),Lc=gi(!0);function Bc(){return[]}function Wc(){return!1}var Vc=vi(function(t,e){return t+e},0),Hc=_i("ceil"),qc=vi(function(t,e){return t/e},1),Uc=_i("floor");var Xc=vi(function(t,e){return t*e},1),Gc=_i("round"),Jc=vi(function(t,e){return t-e},0);return dr.after=function(t,e){if("function"!=typeof e)throw new re(c);return t=Lu(t),function(){if(--t<1)return e.apply(this,arguments)}},dr.ary=Qa,dr.assign=qu,dr.assignIn=Uu,dr.assignInWith=Xu,dr.assignWith=Gu,dr.at=Ju,dr.before=tu,dr.bind=eu,dr.bindAll=Oc,dr.bindKey=nu,dr.castArray=function(){if(!arguments.length)return[];var t=arguments[0];return bu(t)?t:[t]},dr.chain=Na,dr.chunk=function(t,e,r){e=(r?Ui(t,e,r):e===i)?1:Hn(Lu(e),0);var o=null==t?0:t.length;if(!o||e<1)return[];for(var a=0,u=0,c=n(zn(o/e));a<o;)c[u++]=Po(t,a,a+=e);return c},dr.compact=function(t){for(var e=-1,n=null==t?0:t.length,r=0,o=[];++e<n;){var i=t[e];i&&(o[r++]=i)}return o},dr.concat=function(){var t=arguments.length;if(!t)return[];for(var e=n(t-1),r=arguments[0],o=t;o--;)e[o-1]=arguments[o];return tn(bu(r)?ni(r):[r],Vr(e,1))},dr.cond=function(t){var e=null==t?0:t.length,n=Ri();return t=e?Qe(t,function(t){if("function"!=typeof t[1])throw new re(c);return[n(t[0]),t[1]]}):[],ko(function(n){for(var r=-1;++r<e;){var o=t[r];if(qe(o[0],this,n))return qe(o[1],this,n)}})},dr.conforms=function(t){return function(t){var e=rc(t);return function(n){return Rr(n,t,e)}}(Ir(t,d))},dr.constant=jc,dr.countBy=Ba,dr.create=function(t,e){var n=pr(t);return null==e?n:Pr(n,e)},dr.curry=function t(e,n,r){var o=Ci(e,x,i,i,i,i,i,n=r?i:n);return o.placeholder=t.placeholder,o},dr.curryRight=function t(e,n,r){var o=Ci(e,_,i,i,i,i,i,n=r?i:n);return o.placeholder=t.placeholder,o},dr.debounce=ru,dr.defaults=Ku,dr.defaultsDeep=Zu,dr.defer=ou,dr.delay=iu,dr.difference=da,dr.differenceBy=pa,dr.differenceWith=ha,dr.drop=function(t,e,n){var r=null==t?0:t.length;return r?Po(t,(e=n||e===i?1:Lu(e))<0?0:e,r):[]},dr.dropRight=function(t,e,n){var r=null==t?0:t.length;return r?Po(t,0,(e=r-(e=n||e===i?1:Lu(e)))<0?0:e):[]},dr.dropRightWhile=function(t,e){return t&&t.length?Lo(t,Ri(e,3),!0,!0):[]},dr.dropWhile=function(t,e){return t&&t.length?Lo(t,Ri(e,3),!0):[]},dr.fill=function(t,e,n,r){var o=null==t?0:t.length;return o?(n&&"number"!=typeof n&&Ui(t,e,n)&&(n=0,r=o),function(t,e,n,r){var o=t.length;for((n=Lu(n))<0&&(n=-n>o?0:o+n),(r=r===i||r>o?o:Lu(r))<0&&(r+=o),r=n>r?0:Bu(r);n<r;)t[n++]=e;return t}(t,e,n,r)):[]},dr.filter=function(t,e){return(bu(t)?Ke:Wr)(t,Ri(e,3))},dr.flatMap=function(t,e){return Vr(Ja(t,e),1)},dr.flatMapDeep=function(t,e){return Vr(Ja(t,e),M)},dr.flatMapDepth=function(t,e,n){return n=n===i?1:Lu(n),Vr(Ja(t,e),n)},dr.flatten=ya,dr.flattenDeep=function(t){return null!=t&&t.length?Vr(t,M):[]},dr.flattenDepth=function(t,e){return null!=t&&t.length?Vr(t,e=e===i?1:Lu(e)):[]},dr.flip=function(t){return Ci(t,j)},dr.flow=Sc,dr.flowRight=Ec,dr.fromPairs=function(t){for(var e=-1,n=null==t?0:t.length,r={};++e<n;){var o=t[e];r[o[0]]=o[1]}return r},dr.functions=function(t){return null==t?[]:Gr(t,rc(t))},dr.functionsIn=function(t){return null==t?[]:Gr(t,oc(t))},dr.groupBy=Ua,dr.initial=function(t){return null!=t&&t.length?Po(t,0,-1):[]},dr.intersection=ma,dr.intersectionBy=xa,dr.intersectionWith=_a,dr.invert=tc,dr.invertBy=ec,dr.invokeMap=Xa,dr.iteratee=Pc,dr.keyBy=Ga,dr.keys=rc,dr.keysIn=oc,dr.map=Ja,dr.mapKeys=function(t,e){var n={};return e=Ri(e,3),Ur(t,function(t,r,o){$r(n,e(t,r,o),t)}),n},dr.mapValues=function(t,e){var n={};return e=Ri(e,3),Ur(t,function(t,r,o){$r(n,r,e(t,r,o))}),n},dr.matches=function(t){return po(Ir(t,d))},dr.matchesProperty=function(t,e){return ho(t,Ir(e,d))},dr.memoize=au,dr.merge=ic,dr.mergeWith=ac,dr.method=$c,dr.methodOf=Tc,dr.mixin=Mc,dr.negate=uu,dr.nthArg=function(t){return t=Lu(t),ko(function(e){return bo(e,t)})},dr.omit=uc,dr.omitBy=function(t,e){return sc(t,uu(Ri(e)))},dr.once=function(t){return tu(2,t)},dr.orderBy=function(t,e,n,r){return null==t?[]:(bu(e)||(e=null==e?[]:[e]),bu(n=r?i:n)||(n=null==n?[]:[n]),yo(t,e,n))},dr.over=Rc,dr.overArgs=cu,dr.overEvery=Dc,dr.overSome=zc,dr.partial=su,dr.partialRight=lu,dr.partition=Ka,dr.pick=cc,dr.pickBy=sc,dr.property=Nc,dr.propertyOf=function(t){return function(e){return null==t?i:Jr(t,e)}},dr.pull=ka,dr.pullAll=Ca,dr.pullAllBy=function(t,e,n){return t&&t.length&&e&&e.length?mo(t,e,Ri(n,2)):t},dr.pullAllWith=function(t,e,n){return t&&t.length&&e&&e.length?mo(t,e,i,n):t},dr.pullAt=Oa,dr.range=Fc,dr.rangeRight=Lc,dr.rearg=fu,dr.reject=function(t,e){return(bu(t)?Ke:Wr)(t,uu(Ri(e,3)))},dr.remove=function(t,e){var n=[];if(!t||!t.length)return n;var r=-1,o=[],i=t.length;for(e=Ri(e,3);++r<i;){var a=t[r];e(a,r,t)&&(n.push(a),o.push(r))}return xo(t,o),n},dr.rest=function(t,e){if("function"!=typeof t)throw new re(c);return ko(t,e=e===i?e:Lu(e))},dr.reverse=ja,dr.sampleSize=function(t,e,n){return e=(n?Ui(t,e,n):e===i)?1:Lu(e),(bu(t)?Cr:Oo)(t,e)},dr.set=function(t,e,n){return null==t?t:jo(t,e,n)},dr.setWith=function(t,e,n,r){return r="function"==typeof r?r:i,null==t?t:jo(t,e,n,r)},dr.shuffle=function(t){return(bu(t)?Or:Ao)(t)},dr.slice=function(t,e,n){var r=null==t?0:t.length;return r?(n&&"number"!=typeof n&&Ui(t,e,n)?(e=0,n=r):(e=null==e?0:Lu(e),n=n===i?r:Lu(n)),Po(t,e,n)):[]},dr.sortBy=Za,dr.sortedUniq=function(t){return t&&t.length?Io(t):[]},dr.sortedUniqBy=function(t,e){return t&&t.length?Io(t,Ri(e,2)):[]},dr.split=function(t,e,n){return n&&"number"!=typeof n&&Ui(t,e,n)&&(e=n=i),(n=n===i?z:n>>>0)?(t=Hu(t))&&("string"==typeof e||null!=e&&!$u(e))&&!(e=Do(e))&&On(t)?Go(Tn(t),0,n):t.split(e,n):[]},dr.spread=function(t,e){if("function"!=typeof t)throw new re(c);return e=null==e?0:Hn(Lu(e),0),ko(function(n){var r=n[e],o=Go(n,0,e);return r&&tn(o,r),qe(t,this,o)})},dr.tail=function(t){var e=null==t?0:t.length;return e?Po(t,1,e):[]},dr.take=function(t,e,n){return t&&t.length?Po(t,0,(e=n||e===i?1:Lu(e))<0?0:e):[]},dr.takeRight=function(t,e,n){var r=null==t?0:t.length;return r?Po(t,(e=r-(e=n||e===i?1:Lu(e)))<0?0:e,r):[]},dr.takeRightWhile=function(t,e){return t&&t.length?Lo(t,Ri(e,3),!1,!0):[]},dr.takeWhile=function(t,e){return t&&t.length?Lo(t,Ri(e,3)):[]},dr.tap=function(t,e){return e(t),t},dr.throttle=function(t,e,n){var r=!0,o=!0;if("function"!=typeof t)throw new re(c);return ju(n)&&(r="leading"in n?!!n.leading:r,o="trailing"in n?!!n.trailing:o),ru(t,e,{leading:r,maxWait:e,trailing:o})},dr.thru=Fa,dr.toArray=Nu,dr.toPairs=lc,dr.toPairsIn=fc,dr.toPath=function(t){return bu(t)?Qe(t,sa):Iu(t)?[t]:ni(ca(Hu(t)))},dr.toPlainObject=Vu,dr.transform=function(t,e,n){var r=bu(t),o=r||xu(t)||Ru(t);if(e=Ri(e,4),null==n){var i=t&&t.constructor;n=o?r?new i:[]:ju(t)&&ku(i)?pr(Ee(t)):{}}return(o?Xe:Ur)(t,function(t,r,o){return e(n,t,r,o)}),n},dr.unary=function(t){return Qa(t,1)},dr.union=Sa,dr.unionBy=Ea,dr.unionWith=Aa,dr.uniq=function(t){return t&&t.length?zo(t):[]},dr.uniqBy=function(t,e){return t&&t.length?zo(t,Ri(e,2)):[]},dr.uniqWith=function(t,e){return e="function"==typeof e?e:i,t&&t.length?zo(t,i,e):[]},dr.unset=function(t,e){return null==t||No(t,e)},dr.unzip=Pa,dr.unzipWith=$a,dr.update=function(t,e,n){return null==t?t:Fo(t,e,qo(n))},dr.updateWith=function(t,e,n,r){return r="function"==typeof r?r:i,null==t?t:Fo(t,e,qo(n),r)},dr.values=dc,dr.valuesIn=function(t){return null==t?[]:gn(t,oc(t))},dr.without=Ta,dr.words=kc,dr.wrap=function(t,e){return su(qo(e),t)},dr.xor=Ma,dr.xorBy=Ia,dr.xorWith=Ra,dr.zip=Da,dr.zipObject=function(t,e){return Vo(t||[],e||[],Sr)},dr.zipObjectDeep=function(t,e){return Vo(t||[],e||[],jo)},dr.zipWith=za,dr.entries=lc,dr.entriesIn=fc,dr.extend=Uu,dr.extendWith=Xu,Mc(dr,dr),dr.add=Vc,dr.attempt=Cc,dr.camelCase=pc,dr.capitalize=hc,dr.ceil=Hc,dr.clamp=function(t,e,n){return n===i&&(n=e,e=i),n!==i&&(n=(n=Wu(n))==n?n:0),e!==i&&(e=(e=Wu(e))==e?e:0),Mr(Wu(t),e,n)},dr.clone=function(t){return Ir(t,h)},dr.cloneDeep=function(t){return Ir(t,d|h)},dr.cloneDeepWith=function(t,e){return Ir(t,d|h,e="function"==typeof e?e:i)},dr.cloneWith=function(t,e){return Ir(t,h,e="function"==typeof e?e:i)},dr.conformsTo=function(t,e){return null==e||Rr(t,e,rc(e))},dr.deburr=vc,dr.defaultTo=function(t,e){return null==t||t!=t?e:t},dr.divide=qc,dr.endsWith=function(t,e,n){t=Hu(t),e=Do(e);var r=t.length,o=n=n===i?r:Mr(Lu(n),0,r);return(n-=e.length)>=0&&t.slice(n,o)==e},dr.eq=du,dr.escape=function(t){return(t=Hu(t))&&Ot.test(t)?t.replace(kt,kn):t},dr.escapeRegExp=function(t){return(t=Hu(t))&&Mt.test(t)?t.replace(Tt,"\\$&"):t},dr.every=function(t,e,n){var r=bu(t)?Je:Lr;return n&&Ui(t,e,n)&&(e=i),r(t,Ri(e,3))},dr.find=Wa,dr.findIndex=va,dr.findKey=function(t,e){return an(t,Ri(e,3),Ur)},dr.findLast=Va,dr.findLastIndex=ba,dr.findLastKey=function(t,e){return an(t,Ri(e,3),Xr)},dr.floor=Uc,dr.forEach=Ha,dr.forEachRight=qa,dr.forIn=function(t,e){return null==t?t:Hr(t,Ri(e,3),oc)},dr.forInRight=function(t,e){return null==t?t:qr(t,Ri(e,3),oc)},dr.forOwn=function(t,e){return t&&Ur(t,Ri(e,3))},dr.forOwnRight=function(t,e){return t&&Xr(t,Ri(e,3))},dr.get=Yu,dr.gt=pu,dr.gte=hu,dr.has=function(t,e){return null!=t&&Wi(t,e,Qr)},dr.hasIn=Qu,dr.head=ga,dr.identity=Ac,dr.includes=function(t,e,n,r){t=gu(t)?t:dc(t),n=n&&!r?Lu(n):0;var o=t.length;return n<0&&(n=Hn(o+n,0)),Mu(t)?n<=o&&t.indexOf(e,n)>-1:!!o&&cn(t,e,n)>-1},dr.indexOf=function(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var o=null==n?0:Lu(n);return o<0&&(o=Hn(r+o,0)),cn(t,e,o)},dr.inRange=function(t,e,n){return e=Fu(e),n===i?(n=e,e=0):n=Fu(n),function(t,e,n){return t>=qn(e,n)&&t<Hn(e,n)}(t=Wu(t),e,n)},dr.invoke=nc,dr.isArguments=vu,dr.isArray=bu,dr.isArrayBuffer=yu,dr.isArrayLike=gu,dr.isArrayLikeObject=mu,dr.isBoolean=function(t){return!0===t||!1===t||Su(t)&&Zr(t)==H},dr.isBuffer=xu,dr.isDate=_u,dr.isElement=function(t){return Su(t)&&1===t.nodeType&&!Pu(t)},dr.isEmpty=function(t){if(null==t)return!0;if(gu(t)&&(bu(t)||"string"==typeof t||"function"==typeof t.splice||xu(t)||Ru(t)||vu(t)))return!t.length;var e=Bi(t);if(e==K||e==nt)return!t.size;if(Ki(t))return!co(t).length;for(var n in t)if(se.call(t,n))return!1;return!0},dr.isEqual=function(t,e){return oo(t,e)},dr.isEqualWith=function(t,e,n){var r=(n="function"==typeof n?n:i)?n(t,e):i;return r===i?oo(t,e,i,n):!!r},dr.isError=wu,dr.isFinite=function(t){return"number"==typeof t&&Bn(t)},dr.isFunction=ku,dr.isInteger=Cu,dr.isLength=Ou,dr.isMap=Eu,dr.isMatch=function(t,e){return t===e||io(t,e,zi(e))},dr.isMatchWith=function(t,e,n){return n="function"==typeof n?n:i,io(t,e,zi(e),n)},dr.isNaN=function(t){return Au(t)&&t!=+t},dr.isNative=function(t){if(Ji(t))throw new o(u);return ao(t)},dr.isNil=function(t){return null==t},dr.isNull=function(t){return null===t},dr.isNumber=Au,dr.isObject=ju,dr.isObjectLike=Su,dr.isPlainObject=Pu,dr.isRegExp=$u,dr.isSafeInteger=function(t){return Cu(t)&&t>=-I&&t<=I},dr.isSet=Tu,dr.isString=Mu,dr.isSymbol=Iu,dr.isTypedArray=Ru,dr.isUndefined=function(t){return t===i},dr.isWeakMap=function(t){return Su(t)&&Bi(t)==at},dr.isWeakSet=function(t){return Su(t)&&Zr(t)==ut},dr.join=function(t,e){return null==t?"":Wn.call(t,e)},dr.kebabCase=bc,dr.last=wa,dr.lastIndexOf=function(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var o=r;return n!==i&&(o=(o=Lu(n))<0?Hn(r+o,0):qn(o,r-1)),e==e?function(t,e,n){for(var r=n+1;r--;)if(t[r]===e)return r;return r}(t,e,o):un(t,ln,o,!0)},dr.lowerCase=yc,dr.lowerFirst=gc,dr.lt=Du,dr.lte=zu,dr.max=function(t){return t&&t.length?Br(t,Ac,Yr):i},dr.maxBy=function(t,e){return t&&t.length?Br(t,Ri(e,2),Yr):i},dr.mean=function(t){return fn(t,Ac)},dr.meanBy=function(t,e){return fn(t,Ri(e,2))},dr.min=function(t){return t&&t.length?Br(t,Ac,lo):i},dr.minBy=function(t,e){return t&&t.length?Br(t,Ri(e,2),lo):i},dr.stubArray=Bc,dr.stubFalse=Wc,dr.stubObject=function(){return{}},dr.stubString=function(){return""},dr.stubTrue=function(){return!0},dr.multiply=Xc,dr.nth=function(t,e){return t&&t.length?bo(t,Lu(e)):i},dr.noConflict=function(){return Me._===this&&(Me._=he),this},dr.noop=Ic,dr.now=Ya,dr.pad=function(t,e,n){t=Hu(t);var r=(e=Lu(e))?$n(t):0;if(!e||r>=e)return t;var o=(e-r)/2;return yi(Nn(o),n)+t+yi(zn(o),n)},dr.padEnd=function(t,e,n){t=Hu(t);var r=(e=Lu(e))?$n(t):0;return e&&r<e?t+yi(e-r,n):t},dr.padStart=function(t,e,n){t=Hu(t);var r=(e=Lu(e))?$n(t):0;return e&&r<e?yi(e-r,n)+t:t},dr.parseInt=function(t,e,n){return n||null==e?e=0:e&&(e=+e),Xn(Hu(t).replace(Rt,""),e||0)},dr.random=function(t,e,n){if(n&&"boolean"!=typeof n&&Ui(t,e,n)&&(e=n=i),n===i&&("boolean"==typeof e?(n=e,e=i):"boolean"==typeof t&&(n=t,t=i)),t===i&&e===i?(t=0,e=1):(t=Fu(t),e===i?(e=t,t=0):e=Fu(e)),t>e){var r=t;t=e,e=r}if(n||t%1||e%1){var o=Gn();return qn(t+o*(e-t+Ae("1e-"+((o+"").length-1))),e)}return _o(t,e)},dr.reduce=function(t,e,n){var r=bu(t)?en:hn,o=arguments.length<3;return r(t,Ri(e,4),n,o,Nr)},dr.reduceRight=function(t,e,n){var r=bu(t)?nn:hn,o=arguments.length<3;return r(t,Ri(e,4),n,o,Fr)},dr.repeat=function(t,e,n){return e=(n?Ui(t,e,n):e===i)?1:Lu(e),wo(Hu(t),e)},dr.replace=function(){var t=arguments,e=Hu(t[0]);return t.length<3?e:e.replace(t[1],t[2])},dr.result=function(t,e,n){var r=-1,o=(e=Uo(e,t)).length;for(o||(o=1,t=i);++r<o;){var a=null==t?i:t[sa(e[r])];a===i&&(r=o,a=n),t=ku(a)?a.call(t):a}return t},dr.round=Gc,dr.runInContext=t,dr.sample=function(t){return(bu(t)?kr:Co)(t)},dr.size=function(t){if(null==t)return 0;if(gu(t))return Mu(t)?$n(t):t.length;var e=Bi(t);return e==K||e==nt?t.size:co(t).length},dr.snakeCase=mc,dr.some=function(t,e,n){var r=bu(t)?rn:$o;return n&&Ui(t,e,n)&&(e=i),r(t,Ri(e,3))},dr.sortedIndex=function(t,e){return To(t,e)},dr.sortedIndexBy=function(t,e,n){return Mo(t,e,Ri(n,2))},dr.sortedIndexOf=function(t,e){var n=null==t?0:t.length;if(n){var r=To(t,e);if(r<n&&du(t[r],e))return r}return-1},dr.sortedLastIndex=function(t,e){return To(t,e,!0)},dr.sortedLastIndexBy=function(t,e,n){return Mo(t,e,Ri(n,2),!0)},dr.sortedLastIndexOf=function(t,e){if(null!=t&&t.length){var n=To(t,e,!0)-1;if(du(t[n],e))return n}return-1},dr.startCase=xc,dr.startsWith=function(t,e,n){return t=Hu(t),n=null==n?0:Mr(Lu(n),0,t.length),e=Do(e),t.slice(n,n+e.length)==e},dr.subtract=Jc,dr.sum=function(t){return t&&t.length?vn(t,Ac):0},dr.sumBy=function(t,e){return t&&t.length?vn(t,Ri(e,2)):0},dr.template=function(t,e,n){var r=dr.templateSettings;n&&Ui(t,e,n)&&(e=i),t=Hu(t),e=Xu({},e,r,Oi);var o,a,u=Xu({},e.imports,r.imports,Oi),c=rc(u),s=gn(u,c),l=0,f=e.interpolate||Kt,d="__p += '",p=ee((e.escape||Kt).source+"|"+f.source+"|"+(f===Et?Wt:Kt).source+"|"+(e.evaluate||Kt).source+"|$","g"),h="//# sourceURL="+("sourceURL"in e?e.sourceURL:"lodash.templateSources["+ ++Oe+"]")+"\n";t.replace(p,function(e,n,r,i,u,c){return r||(r=i),d+=t.slice(l,c).replace(Zt,Cn),n&&(o=!0,d+="' +\n__e("+n+") +\n'"),u&&(a=!0,d+="';\n"+u+";\n__p += '"),r&&(d+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),l=c+e.length,e}),d+="';\n";var v=e.variable;v||(d="with (obj) {\n"+d+"\n}\n"),d=(a?d.replace(mt,""):d).replace(xt,"$1").replace(_t,"$1;"),d="function("+(v||"obj")+") {\n"+(v?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(o?", __e = _.escape":"")+(a?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+d+"return __p\n}";var b=Cc(function(){return Yt(c,h+"return "+d).apply(i,s)});if(b.source=d,wu(b))throw b;return b},dr.times=function(t,e){if((t=Lu(t))<1||t>I)return[];var n=z,r=qn(t,z);e=Ri(e),t-=z;for(var o=bn(r,e);++n<t;)e(n);return o},dr.toFinite=Fu,dr.toInteger=Lu,dr.toLength=Bu,dr.toLower=function(t){return Hu(t).toLowerCase()},dr.toNumber=Wu,dr.toSafeInteger=function(t){return t?Mr(Lu(t),-I,I):0===t?t:0},dr.toString=Hu,dr.toUpper=function(t){return Hu(t).toUpperCase()},dr.trim=function(t,e,n){if((t=Hu(t))&&(n||e===i))return t.replace(It,"");if(!t||!(e=Do(e)))return t;var r=Tn(t),o=Tn(e);return Go(r,xn(r,o),_n(r,o)+1).join("")},dr.trimEnd=function(t,e,n){if((t=Hu(t))&&(n||e===i))return t.replace(Dt,"");if(!t||!(e=Do(e)))return t;var r=Tn(t);return Go(r,0,_n(r,Tn(e))+1).join("")},dr.trimStart=function(t,e,n){if((t=Hu(t))&&(n||e===i))return t.replace(Rt,"");if(!t||!(e=Do(e)))return t;var r=Tn(t);return Go(r,xn(r,Tn(e))).join("")},dr.truncate=function(t,e){var n=S,r=E;if(ju(e)){var o="separator"in e?e.separator:o;n="length"in e?Lu(e.length):n,r="omission"in e?Do(e.omission):r}var a=(t=Hu(t)).length;if(On(t)){var u=Tn(t);a=u.length}if(n>=a)return t;var c=n-$n(r);if(c<1)return r;var s=u?Go(u,0,c).join(""):t.slice(0,c);if(o===i)return s+r;if(u&&(c+=s.length-c),$u(o)){if(t.slice(c).search(o)){var l,f=s;for(o.global||(o=ee(o.source,Hu(Vt.exec(o))+"g")),o.lastIndex=0;l=o.exec(f);)var d=l.index;s=s.slice(0,d===i?c:d)}}else if(t.indexOf(Do(o),c)!=c){var p=s.lastIndexOf(o);p>-1&&(s=s.slice(0,p))}return s+r},dr.unescape=function(t){return(t=Hu(t))&&Ct.test(t)?t.replace(wt,Mn):t},dr.uniqueId=function(t){var e=++le;return Hu(t)+e},dr.upperCase=_c,dr.upperFirst=wc,dr.each=Ha,dr.eachRight=qa,dr.first=ga,Mc(dr,function(){var t={};return Ur(dr,function(e,n){se.call(dr.prototype,n)||(t[n]=e)}),t}(),{chain:!1}),dr.VERSION="4.17.11",Xe(["bind","bindKey","curry","curryRight","partial","partialRight"],function(t){dr[t].placeholder=dr}),Xe(["drop","take"],function(t,e){br.prototype[t]=function(n){n=n===i?1:Hn(Lu(n),0);var r=this.__filtered__&&!e?new br(this):this.clone();return r.__filtered__?r.__takeCount__=qn(n,r.__takeCount__):r.__views__.push({size:qn(n,z),type:t+(r.__dir__<0?"Right":"")}),r},br.prototype[t+"Right"]=function(e){return this.reverse()[t](e).reverse()}}),Xe(["filter","map","takeWhile"],function(t,e){var n=e+1,r=n==$||3==n;br.prototype[t]=function(t){var e=this.clone();return e.__iteratees__.push({iteratee:Ri(t,3),type:n}),e.__filtered__=e.__filtered__||r,e}}),Xe(["head","last"],function(t,e){var n="take"+(e?"Right":"");br.prototype[t]=function(){return this[n](1).value()[0]}}),Xe(["initial","tail"],function(t,e){var n="drop"+(e?"":"Right");br.prototype[t]=function(){return this.__filtered__?new br(this):this[n](1)}}),br.prototype.compact=function(){return this.filter(Ac)},br.prototype.find=function(t){return this.filter(t).head()},br.prototype.findLast=function(t){return this.reverse().find(t)},br.prototype.invokeMap=ko(function(t,e){return"function"==typeof t?new br(this):this.map(function(n){return no(n,t,e)})}),br.prototype.reject=function(t){return this.filter(uu(Ri(t)))},br.prototype.slice=function(t,e){t=Lu(t);var n=this;return n.__filtered__&&(t>0||e<0)?new br(n):(t<0?n=n.takeRight(-t):t&&(n=n.drop(t)),e!==i&&(n=(e=Lu(e))<0?n.dropRight(-e):n.take(e-t)),n)},br.prototype.takeRightWhile=function(t){return this.reverse().takeWhile(t).reverse()},br.prototype.toArray=function(){return this.take(z)},Ur(br.prototype,function(t,e){var n=/^(?:filter|find|map|reject)|While$/.test(e),r=/^(?:head|last)$/.test(e),o=dr[r?"take"+("last"==e?"Right":""):e],a=r||/^find/.test(e);o&&(dr.prototype[e]=function(){var e=this.__wrapped__,u=r?[1]:arguments,c=e instanceof br,s=u[0],l=c||bu(e),f=function(t){var e=o.apply(dr,tn([t],u));return r&&d?e[0]:e};l&&n&&"function"==typeof s&&1!=s.length&&(c=l=!1);var d=this.__chain__,p=!!this.__actions__.length,h=a&&!d,v=c&&!p;if(!a&&l){e=v?e:new br(this);var b=t.apply(e,u);return b.__actions__.push({func:Fa,args:[f],thisArg:i}),new vr(b,d)}return h&&v?t.apply(this,u):(b=this.thru(f),h?r?b.value()[0]:b.value():b)})}),Xe(["pop","push","shift","sort","splice","unshift"],function(t){var e=oe[t],n=/^(?:push|sort|unshift)$/.test(t)?"tap":"thru",r=/^(?:pop|shift)$/.test(t);dr.prototype[t]=function(){var t=arguments;if(r&&!this.__chain__){var o=this.value();return e.apply(bu(o)?o:[],t)}return this[n](function(n){return e.apply(bu(n)?n:[],t)})}}),Ur(br.prototype,function(t,e){var n=dr[e];if(n){var r=n.name+"";(rr[r]||(rr[r]=[])).push({name:e,func:n})}}),rr[pi(i,g).name]=[{name:"wrapper",func:i}],br.prototype.clone=function(){var t=new br(this.__wrapped__);return t.__actions__=ni(this.__actions__),t.__dir__=this.__dir__,t.__filtered__=this.__filtered__,t.__iteratees__=ni(this.__iteratees__),t.__takeCount__=this.__takeCount__,t.__views__=ni(this.__views__),t},br.prototype.reverse=function(){if(this.__filtered__){var t=new br(this);t.__dir__=-1,t.__filtered__=!0}else(t=this.clone()).__dir__*=-1;return t},br.prototype.value=function(){var t=this.__wrapped__.value(),e=this.__dir__,n=bu(t),r=e<0,o=n?t.length:0,i=function(t,e,n){for(var r=-1,o=n.length;++r<o;){var i=n[r],a=i.size;switch(i.type){case"drop":t+=a;break;case"dropRight":e-=a;break;case"take":e=qn(e,t+a);break;case"takeRight":t=Hn(t,e-a)}}return{start:t,end:e}}(0,o,this.__views__),a=i.start,u=i.end,c=u-a,s=r?u:a-1,l=this.__iteratees__,f=l.length,d=0,p=qn(c,this.__takeCount__);if(!n||!r&&o==c&&p==c)return Bo(t,this.__actions__);var h=[];t:for(;c--&&d<p;){for(var v=-1,b=t[s+=e];++v<f;){var y=l[v],g=y.iteratee,m=y.type,x=g(b);if(m==T)b=x;else if(!x){if(m==$)continue t;break t}}h[d++]=b}return h},dr.prototype.at=La,dr.prototype.chain=function(){return Na(this)},dr.prototype.commit=function(){return new vr(this.value(),this.__chain__)},dr.prototype.next=function(){this.__values__===i&&(this.__values__=Nu(this.value()));var t=this.__index__>=this.__values__.length;return{done:t,value:t?i:this.__values__[this.__index__++]}},dr.prototype.plant=function(t){for(var e,n=this;n instanceof hr;){var r=fa(n);r.__index__=0,r.__values__=i,e?o.__wrapped__=r:e=r;var o=r;n=n.__wrapped__}return o.__wrapped__=t,e},dr.prototype.reverse=function(){var t=this.__wrapped__;if(t instanceof br){var e=t;return this.__actions__.length&&(e=new br(this)),(e=e.reverse()).__actions__.push({func:Fa,args:[ja],thisArg:i}),new vr(e,this.__chain__)}return this.thru(ja)},dr.prototype.toJSON=dr.prototype.valueOf=dr.prototype.value=function(){return Bo(this.__wrapped__,this.__actions__)},dr.prototype.first=dr.prototype.head,ze&&(dr.prototype[ze]=function(){return this}),dr}();Me._=In,(o=function(){return In}.call(e,n,e,r))===i||(r.exports=o)}).call(this)}).call(this,n(18),n(27)(t))},function(t,e,n){t.exports=n.p+"static/icomoon.3c5449f.eot"},function(t,e,n){"use strict";e.__esModule=!0,e.xbCheckboxGroup=void 0;var r=function(t){return t&&t.__esModule?t:{default:t}}(n(212));e.default=r.default;e.xbCheckboxGroup={install:function(t){t.component("XbCheckboxGroup",r.default)}}},function(t,e,n){t.exports=!n(14)&&!n(23)(function(){return 7!=Object.defineProperty(n(149)("div"),"a",{get:function(){return 7}}).a})},function(t,e,n){var r=n(22),o=n(6).document,i=r(o)&&r(o.createElement);t.exports=function(t){return i?o.createElement(t):{}}},function(t,e,n){var r=n(8),o=n(15),i=n(224)(!1),a=n(101)("IE_PROTO");t.exports=function(t,e){var n,u=o(t),c=0,s=[];for(n in u)n!=a&&r(u,n)&&s.push(n);for(;e.length>c;)r(u,n=e[c++])&&(~i(s,n)||s.push(n));return s}},function(t,e,n){var r=n(152);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==r(t)?t.split(""):Object(t)}},function(t,e){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},function(t,e,n){var r=n(99);t.exports=function(t){return Object(r(t))}},function(t,e,n){"use strict";var r=n(31),o=n(97),i=n(155),a=n(12),u=n(105),c=n(231),s=n(106),l=n(234),f=n(16)("iterator"),d=!([].keys&&"next"in[].keys()),p=function(){return this};t.exports=function(t,e,n,h,v,b,y){c(n,e,h);var g,m,x,_=function(t){if(!d&&t in O)return O[t];switch(t){case"keys":case"values":return function(){return new n(this,t)}}return function(){return new n(this,t)}},w=e+" Iterator",k="values"==v,C=!1,O=t.prototype,j=O[f]||O["@@iterator"]||v&&O[v],S=j||_(v),E=v?k?_("entries"):S:void 0,A="Array"==e&&O.entries||j;if(A&&(x=l(A.call(new t)))!==Object.prototype&&x.next&&(s(x,w,!0),r||"function"==typeof x[f]||a(x,f,p)),k&&j&&"values"!==j.name&&(C=!0,S=function(){return j.call(this)}),r&&!y||!d&&!C&&O[f]||a(O,f,S),u[e]=S,u[w]=p,v)if(g={values:k?S:_("values"),keys:b?S:_("keys"),entries:E},y)for(m in g)m in O||i(O,m,g[m]);else o(o.P+o.F*(d||C),e,g);return g}},function(t,e,n){t.exports=n(12)},function(t,e,n){var r=n(28),o=n(232),i=n(103),a=n(101)("IE_PROTO"),u=function(){},c=function(){var t,e=n(149)("iframe"),r=i.length;for(e.style.display="none",n(233).appendChild(e),e.src="javascript:",(t=e.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),c=t.F;r--;)delete c.prototype[i[r]];return c()};t.exports=Object.create||function(t,e){var n;return null!==t?(u.prototype=r(t),n=new u,u.prototype=null,n[a]=t):n=c(),void 0===e?n:o(n,e)}},function(t,e,n){var r=n(150),o=n(103).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return r(t,o)}},function(t,e,n){"use strict";e.__esModule=!0,e.xbPoptip=void 0;var r=function(t){return t&&t.__esModule?t:{default:t}}(n(260));e.default=r.default;e.xbPoptip={install:function(t){t.component("XbPoptip",r.default)}}},function(t,e,n){"use strict";e.__esModule=!0;var r=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e.default=t,e}(n(1)),o=n(2);var i=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r.__extends(e,t),e.prototype.alignCls=function(t,e){var n;void 0===e&&(e={});var r="";return e.cellClassName&&t.key&&e.cellClassName[t.key]&&(r=e.cellClassName[t.key]),[(n={},n[""+r]=r,n[""+t.className]=t.className,n[this.prefixCls+"-column-"+t.align]=t.align,n[this.prefixCls+"-hidden"]="left"===this.fixed&&"left"!==t.fixed||"right"===this.fixed&&"right"!==t.fixed||!this.fixed&&t.fixed&&("left"===t.fixed||"right"===t.fixed),n)]},e.prototype.isPopperShow=function(t){return t.filters&&(!this.fixed&&!t.fixed||"left"===this.fixed&&"left"===t.fixed||"right"===this.fixed&&"right"===t.fixed)},e.prototype.setCellWidth=function(t){var e="";return t.width?e=t.width:this.columnsWidth[t._index]&&(e=this.columnsWidth[t._index].width),"0"===e&&(e=""),e},e=r.__decorate([o.Component],e)}(o.Vue);e.default=i},function(t,e,n){"use strict";e.__esModule=!0,e.default={name:"TableExpand",functional:!0,props:{row:Object,render:Function,index:Number,column:{type:Object,default:null}},render:function(t,e){var n={row:e.props.row,index:e.props.index,column:void 0};return e.props.column&&(n.column=e.props.column),e.props.render(t,n)}}},function(t,e,n){var r=n(278),o=1,i=4;t.exports=function(t){return r(t,o|i)}},function(t,e){t.exports=function(t,e){return t===e||t!=t&&e!=e}},function(t,e,n){var r=n(37),o=n(24),i="[object AsyncFunction]",a="[object Function]",u="[object GeneratorFunction]",c="[object Proxy]";t.exports=function(t){if(!o(t))return!1;var e=r(t);return e==a||e==u||e==i||e==c}},function(t,e,n){(function(e){var n="object"==typeof e&&e&&e.Object===Object&&e;t.exports=n}).call(this,n(18))},function(t,e){var n=Function.prototype.toString;t.exports=function(t){if(null!=t){try{return n.call(t)}catch(t){}try{return t+""}catch(t){}}return""}},function(t,e,n){var r=n(167),o=n(162),i=Object.prototype.hasOwnProperty;t.exports=function(t,e,n){var a=t[e];i.call(t,e)&&o(a,n)&&(void 0!==n||e in t)||r(t,e,n)}},function(t,e,n){var r=n(310);t.exports=function(t,e,n){"__proto__"==e&&r?r(t,e,{configurable:!0,enumerable:!0,value:n,writable:!0}):t[e]=n}},function(t,e,n){var r=n(312),o=n(313),i=n(112),a=n(169),u=n(316),c=n(317),s=Object.prototype.hasOwnProperty;t.exports=function(t,e){var n=i(t),l=!n&&o(t),f=!n&&!l&&a(t),d=!n&&!l&&!f&&c(t),p=n||l||f||d,h=p?r(t.length,String):[],v=h.length;for(var b in t)!e&&!s.call(t,b)||p&&("length"==b||f&&("offset"==b||"parent"==b)||d&&("buffer"==b||"byteLength"==b||"byteOffset"==b)||u(b,v))||h.push(b);return h}},function(t,e,n){(function(t){var r=n(4),o=n(315),i=e&&!e.nodeType&&e,a=i&&"object"==typeof t&&t&&!t.nodeType&&t,u=a&&a.exports===i?r.Buffer:void 0,c=(u?u.isBuffer:void 0)||o;t.exports=c}).call(this,n(27)(t))},function(t,e){var n=9007199254740991;t.exports=function(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=n}},function(t,e){t.exports=function(t,e){return function(n){return t(e(n))}}},function(t,e,n){var r=n(163),o=n(170);t.exports=function(t){return null!=t&&o(t.length)&&!r(t)}},function(t,e,n){var r=n(168),o=n(322),i=n(172);t.exports=function(t){return i(t)?r(t,!0):o(t)}},function(t,e){t.exports=function(){return[]}},function(t,e,n){var r=n(176),o=n(177),i=n(116),a=n(174),u=Object.getOwnPropertySymbols?function(t){for(var e=[];t;)r(e,i(t)),t=o(t);return e}:a;t.exports=u},function(t,e){t.exports=function(t,e){for(var n=-1,r=e.length,o=t.length;++n<r;)t[o+n]=e[n];return t}},function(t,e,n){var r=n(171)(Object.getPrototypeOf,Object);t.exports=r},function(t,e,n){var r=n(176),o=n(112);t.exports=function(t,e,n){var i=e(t);return o(t)?i:r(i,n(t))}},function(t,e,n){"use strict";(t.exports={}).forEach=function(t,e){for(var n=0;n<t.length;n++){var r=e(t[n]);if(r)return r}}},function(t,e,n){"use strict";var r=t.exports={};r.isIE=function(t){return!!function(){var t=navigator.userAgent.toLowerCase();return-1!==t.indexOf("msie")||-1!==t.indexOf("trident")||-1!==t.indexOf(" edge/")}()&&(!t||t===function(){var t=3,e=document.createElement("div"),n=e.getElementsByTagName("i");do{e.innerHTML="\x3c!--[if gt IE "+ ++t+"]><i></i><![endif]--\x3e"}while(n[0]);return t>4?t:void 0}())},r.isLegacyOpera=function(){return!!window.opera}},function(t,e,n){"use strict";var r=c(n(5)),o=c(n(185)),i=c(n(194)),a=c(n(197)),u=n(145);function c(t){return t&&t.__esModule?t:{default:t}}n(200);var s=n(206);s.keys().forEach(function(t){if("theme-chalk"!==t){var e=s(t),n=(0,u.upperFirst)((0,u.camelCase)(t.replace(/^\.\/(.*)\/index\.ts+$/,"$1")));r.default.component(n,e.default||e),"XbMessageTips"===n&&(r.default.prototype.$message=e.default)}}),r.default.component("demo-block",a.default),r.default.config.productionTip=!1,window.app=new r.default({router:i.default,render:function(t){return t(o.default)}}).$mount("#app")},function(t,e,n){(function(t){var r=void 0!==t&&t||"undefined"!=typeof self&&self||window,o=Function.prototype.apply;function i(t,e){this._id=t,this._clearFn=e}e.setTimeout=function(){return new i(o.call(setTimeout,r,arguments),clearTimeout)},e.setInterval=function(){return new i(o.call(setInterval,r,arguments),clearInterval)},e.clearTimeout=e.clearInterval=function(t){t&&t.close()},i.prototype.unref=i.prototype.ref=function(){},i.prototype.close=function(){this._clearFn.call(r,this._id)},e.enroll=function(t,e){clearTimeout(t._idleTimeoutId),t._idleTimeout=e},e.unenroll=function(t){clearTimeout(t._idleTimeoutId),t._idleTimeout=-1},e._unrefActive=e.active=function(t){clearTimeout(t._idleTimeoutId);var e=t._idleTimeout;e>=0&&(t._idleTimeoutId=setTimeout(function(){t._onTimeout&&t._onTimeout()},e))},n(183),e.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==t&&t.setImmediate||this&&this.setImmediate,e.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==t&&t.clearImmediate||this&&this.clearImmediate}).call(this,n(18))},function(t,e,n){(function(t,e){!function(t,n){"use strict";if(!t.setImmediate){var r,o=1,i={},a=!1,u=t.document,c=Object.getPrototypeOf&&Object.getPrototypeOf(t);c=c&&c.setTimeout?c:t,"[object process]"==={}.toString.call(t.process)?r=function(t){e.nextTick(function(){l(t)})}:function(){if(t.postMessage&&!t.importScripts){var e=!0,n=t.onmessage;return t.onmessage=function(){e=!1},t.postMessage("","*"),t.onmessage=n,e}}()?function(){var e="setImmediate$"+Math.random()+"$",n=function(n){n.source===t&&"string"==typeof n.data&&0===n.data.indexOf(e)&&l(+n.data.slice(e.length))};t.addEventListener?t.addEventListener("message",n,!1):t.attachEvent("onmessage",n),r=function(n){t.postMessage(e+n,"*")}}():t.MessageChannel?function(){var t=new MessageChannel;t.port1.onmessage=function(t){l(t.data)},r=function(e){t.port2.postMessage(e)}}():u&&"onreadystatechange"in u.createElement("script")?function(){var t=u.documentElement;r=function(e){var n=u.createElement("script");n.onreadystatechange=function(){l(e),n.onreadystatechange=null,t.removeChild(n),n=null},t.appendChild(n)}}():r=function(t){setTimeout(l,0,t)},c.setImmediate=function(t){"function"!=typeof t&&(t=new Function(""+t));for(var e=new Array(arguments.length-1),n=0;n<e.length;n++)e[n]=arguments[n+1];var a={callback:t,args:e};return i[o]=a,r(o),o++},c.clearImmediate=s}function s(t){delete i[t]}function l(t){if(a)setTimeout(l,0,t);else{var e=i[t];if(e){a=!0;try{!function(t){var e=t.callback,r=t.args;switch(r.length){case 0:e();break;case 1:e(r[0]);break;case 2:e(r[0],r[1]);break;case 3:e(r[0],r[1],r[2]);break;default:e.apply(n,r)}}(e)}finally{s(t),a=!1}}}}}("undefined"==typeof self?void 0===t?this:t:self)}).call(this,n(18),n(184))},function(t,e){var n,r,o=t.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function u(t){if(n===setTimeout)return setTimeout(t,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(t){n=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(t){r=a}}();var c,s=[],l=!1,f=-1;function d(){l&&c&&(l=!1,c.length?s=c.concat(s):f=-1,s.length&&p())}function p(){if(!l){var t=u(d);l=!0;for(var e=s.length;e;){for(c=s,s=[];++f<e;)c&&c[f].run();f=-1,e=s.length}c=null,l=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function h(t,e){this.fun=t,this.array=e}function v(){}o.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];s.push(new h(t,e)),1!==s.length||l||u(p)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=v,o.addListener=v,o.once=v,o.off=v,o.removeListener=v,o.removeAllListeners=v,o.emit=v,o.prependListener=v,o.prependOnceListener=v,o.listeners=function(t){return[]},o.binding=function(t){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(t){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(t,e,n){"use strict";n.r(e);var r=n(131),o=n(41);for(var i in o)"default"!==i&&function(t){n.d(e,t,function(){return o[t]})}(i);n(191);var a=n(0),u=Object(a.a)(o.default,r.a,r.b,!1,null,null,null);u.options.__file="examples/App.vue",e.default=u.exports},function(t,e,n){"use strict";n.r(e);var r=n(138),o=n(43);for(var i in o)"default"!==i&&function(t){n.d(e,t,function(){return o[t]})}(i);n(188);var a=n(0),u=Object(a.a)(o.default,r.a,r.b,!1,null,null,null);u.options.__file="examples/components/header.vue",e.default=u.exports},function(t,e,n){t.exports=n.p+"static/banner.588bb8a.png"},function(t,e,n){"use strict";var r=n(45);n.n(r).a},function(t,e,n){(t.exports=n(17)(!1)).push([t.i,"\n.page-header {\n  background-color: #fff;\n  box-shadow: 0 10px 60px 0 rgba(29, 29, 31, 0.07);\n  opacity: 0.98;\n  position: relative !important;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 80px;\n  transition: all 0.3s;\n  z-index: 100;\n}\n.page-header .header-container {\n  width: 90%;\n  margin: 0 auto;\n  display: flex;\n  align-items: center;\n  height: 80px;\n  justify-content: space-between;\n}\n",""])},function(t,e){t.exports=function(t){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var n=e.protocol+"//"+e.host,r=n+e.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(t,e){var o,i=e.trim().replace(/^"(.*)"$/,function(t,e){return e}).replace(/^'(.*)'$/,function(t,e){return e});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/)/i.test(i)?t:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(t,e,n){"use strict";var r=n(46);n.n(r).a},function(t,e,n){(e=t.exports=n(17)(!1)).i(n(193),""),e.push([t.i,"\narticle,\naside,\nblockquote,\nbody,\nbutton,\ncode,\ndd,\ndetails,\ndiv,\ndl,\ndt,\nfieldset,\nfigcaption,\nfigure,\nfooter,\nform,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\nheader,\nhgroup,\nhr,\ninput,\nlegend,\nli,\nmenu,\nnav,\nol,\np,\npre,\nsection,\ntd,\ntextarea,\nth,\nul {\n  margin: 0;\n  padding: 0;\n}\na {\n  text-decoration: none;\n}\ncode,\nkbd,\npre,\nsamp {\n  font-family: Consolas, Menlo, Courier, monospace;\n}\n.grid-content {\n  border-radius: 4px;\n  min-height: 36px;\n}\n.bg-purple-dark {\n  background: #99a9bf;\n}\n.bg-purple {\n  background: #d3dce6;\n}\n.bg-purple-light {\n  background: #e5e9f2;\n}\n.m-10 {\n  margin-top: 10px;\n}\n.mr-10 {\n  margin-right: 10px;\n}\n.ml-10 {\n  margin-left: 10px;\n}\n.row-bg {\n  padding: 10px 0;\n  background-color: #f9fafc;\n}\n.text-left {\n  text-align: left;\n}\n.text-right {\n  text-align: right;\n}\n.fs-12 {\n  font-size: 12px;\n}\n.fs-14 {\n  font-size: 14px;\n}\n.fs-16 {\n  font-size: 16px;\n}\n.fs-18 {\n  font-size: 18px;\n}\n.fs-20 {\n  font-size: 20px;\n}\n.fs-22 {\n  font-size: 22px;\n}\n.fs-24 {\n  font-size: 24px;\n}\ntable {\n  font-family: Consolas, Menlo, Courier, monospace;\n  font-size: 12px;\n  border-collapse: collapse;\n  border-spacing: 0;\n  empty-cells: show;\n  border: 1px solid #e9e9e9;\n  width: 100%;\n  margin-bottom: 24px;\n}\ntable th {\n  background: #f7f7f7;\n  white-space: nowrap;\n  color: #5c6b77;\n  font-weight: 600;\n  border: 1px solid #e9e9e9;\n  padding: 8px 16px;\n  text-align: left;\n}\ntable td {\n  border: 1px solid #e9e9e9;\n  padding: 8px 16px;\n  text-align: left;\n}\np img {\n  width: 100%;\n}\nsection {\n  color: #3f536e;\n  font-size: 14px;\n}\nsection .demo-block {\n  padding: 32px;\n  border: 1px solid #e2ecf4;\n  border-radius: 4px 4px 0 0;\n  background-color: #fff;\n  margin-top: 16px;\n}\nsection hr {\n  margin: 1.2em 0;\n  border: 0;\n  border-bottom: 1px solid #C5D9E8;\n}\nsection p {\n  padding: 0;\n  line-height: 1.7;\n  color: #3f536e;\n  font-size: 14px;\n  padding-bottom: 10px;\n}\nsection h1 {\n  font-size: 24px;\n}\nsection h1,\nsection h2,\nsection h3,\nsection h4,\nsection h5 {\n  margin: 16px 0;\n  line-height: 1.5;\n}\nsection h2 {\n  font-size: 18px;\n}\nsection ul {\n  margin: 16px 0;\n  padding-left: 24px;\n  list-style: disc;\n}\nsection ul li {\n  line-height: 1.8;\n}\nsection pre {\n  margin: 16px 0;\n  padding: 16px;\n  background-color: #F7F7F7;\n  overflow: auto;\n}\nsection pre code {\n  padding: 0;\n  font-size: 1em;\n  border: none;\n  border-radius: 0;\n  background-color: transparent;\n}\nsection code {\n  padding: 0.3em 0.5em;\n  font-size: 0.9em;\n  vertical-align: middle;\n  border: 1px solid #ECECEC;\n  border-radius: 2px;\n  background-color: #F7F7F7;\n}\nsection code.code_inline {\n  padding: 0 0.5em;\n}\nsection img {\n  vertical-align: middle;\n}\nsection p + p {\n  margin-top: 8px;\n}\nsection a {\n  color: #6190e8;\n}\nsection table.table {\n  display: table;\n  width: 100%;\n  background-color: #fff;\n  color: #5e6d82;\n  font-size: 14px;\n  border-collapse: collapse;\n  overflow: auto;\n  margin-bottom: 50px;\n}\nsection table.table th {\n  border-top: 1px solid #f3f7fa;\n  background-color: #FAFBFC;\n  border-bottom: 1px solid #f3f7fa;\n  padding: 10px 8px;\n  text-align: left;\n}\nsection table.table td {\n  border-top: 1px solid #f3f7fa;\n  border-bottom: 1px solid #f3f7fa;\n  padding: 10px 8px;\n}\n",""])},function(t,e,n){(t.exports=n(17)(!1)).push([t.i,"/*\n\nColorbrewer theme\nOriginal: https://github.com/mbostock/colorbrewer-theme (c) Mike Bostock <mike@ocks.org>\nPorted by Fabrício Tavares de Oliveira\n\n*/\n\n.hljs {\n  display: block;\n  overflow-x: auto;\n  padding: 0.5em;\n  background: #fff;\n}\n\n.hljs,\n.hljs-subst {\n  color: #000;\n}\n\n.hljs-string,\n.hljs-meta,\n.hljs-symbol,\n.hljs-template-tag,\n.hljs-template-variable,\n.hljs-addition {\n  color: #756bb1;\n}\n\n.hljs-comment,\n.hljs-quote {\n  color: #636363;\n}\n\n.hljs-number,\n.hljs-regexp,\n.hljs-literal,\n.hljs-bullet,\n.hljs-link {\n  color: #31a354;\n}\n\n.hljs-deletion,\n.hljs-variable {\n  color: #88f;\n}\n\n\n\n.hljs-keyword,\n.hljs-selector-tag,\n.hljs-title,\n.hljs-section,\n.hljs-built_in,\n.hljs-doctag,\n.hljs-type,\n.hljs-tag,\n.hljs-name,\n.hljs-selector-id,\n.hljs-selector-class,\n.hljs-strong {\n  color: #3182bd;\n}\n\n.hljs-emphasis {\n  font-style: italic;\n}\n\n.hljs-attribute {\n  color: #e6550d;\n}\n",""])},function(t,e,n){"use strict";e.__esModule=!0;var r=a(n(5)),o=a(n(195)),i=a(n(196));function a(t){return t&&t.__esModule?t:{default:t}}r.default.use(o.default);var u={text:"首页",name:"index",path:"/",component:function(t){return n.e(3).then(function(){return t(n(366))}.bind(null,n)).catch(n.oe)}},c=i.default;c.unshift(u),e.default=new o.default({routes:c})},function(t,e,n){"use strict";function r(t){return Object.prototype.toString.call(t).indexOf("Error")>-1}n.r(e);var o={name:"router-view",functional:!0,props:{name:{type:String,default:"default"}},render:function(t,e){var n=e.props,r=e.children,o=e.parent,i=e.data;i.routerView=!0;for(var a=o.$createElement,u=n.name,c=o.$route,s=o._routerViewCache||(o._routerViewCache={}),l=0,f=!1;o&&o._routerRoot!==o;)o.$vnode&&o.$vnode.data.routerView&&l++,o._inactive&&(f=!0),o=o.$parent;if(i.routerViewDepth=l,f)return a(s[u],i,r);var d=c.matched[l];if(!d)return s[u]=null,a();var p=s[u]=d.components[u];i.registerRouteInstance=function(t,e){var n=d.instances[u];(e&&n!==t||!e&&n===t)&&(d.instances[u]=e)},(i.hook||(i.hook={})).prepatch=function(t,e){d.instances[u]=e.componentInstance};var h=i.props=function(t,e){switch(typeof e){case"undefined":return;case"object":return e;case"function":return e(t);case"boolean":return e?t.params:void 0;default:0}}(c,d.props&&d.props[u]);if(h){h=i.props=function(t,e){for(var n in e)t[n]=e[n];return t}({},h);var v=i.attrs=i.attrs||{};for(var b in h)p.props&&b in p.props||(v[b]=h[b],delete h[b])}return a(p,i,r)}};var i=/[!'()*]/g,a=function(t){return"%"+t.charCodeAt(0).toString(16)},u=/%2C/g,c=function(t){return encodeURIComponent(t).replace(i,a).replace(u,",")},s=decodeURIComponent;function l(t){var e={};return(t=t.trim().replace(/^(\?|#|&)/,""))?(t.split("&").forEach(function(t){var n=t.replace(/\+/g," ").split("="),r=s(n.shift()),o=n.length>0?s(n.join("=")):null;void 0===e[r]?e[r]=o:Array.isArray(e[r])?e[r].push(o):e[r]=[e[r],o]}),e):e}function f(t){var e=t?Object.keys(t).map(function(e){var n=t[e];if(void 0===n)return"";if(null===n)return c(e);if(Array.isArray(n)){var r=[];return n.forEach(function(t){void 0!==t&&(null===t?r.push(c(e)):r.push(c(e)+"="+c(t)))}),r.join("&")}return c(e)+"="+c(n)}).filter(function(t){return t.length>0}).join("&"):null;return e?"?"+e:""}var d=/\/?$/;function p(t,e,n,r){var o=r&&r.options.stringifyQuery,i=e.query||{};try{i=h(i)}catch(t){}var a={name:e.name||t&&t.name,meta:t&&t.meta||{},path:e.path||"/",hash:e.hash||"",query:i,params:e.params||{},fullPath:b(e,o),matched:t?function(t){var e=[];for(;t;)e.unshift(t),t=t.parent;return e}(t):[]};return n&&(a.redirectedFrom=b(n,o)),Object.freeze(a)}function h(t){if(Array.isArray(t))return t.map(h);if(t&&"object"==typeof t){var e={};for(var n in t)e[n]=h(t[n]);return e}return t}var v=p(null,{path:"/"});function b(t,e){var n=t.path,r=t.query;void 0===r&&(r={});var o=t.hash;return void 0===o&&(o=""),(n||"/")+(e||f)(r)+o}function y(t,e){return e===v?t===e:!!e&&(t.path&&e.path?t.path.replace(d,"")===e.path.replace(d,"")&&t.hash===e.hash&&g(t.query,e.query):!(!t.name||!e.name)&&(t.name===e.name&&t.hash===e.hash&&g(t.query,e.query)&&g(t.params,e.params)))}function g(t,e){if(void 0===t&&(t={}),void 0===e&&(e={}),!t||!e)return t===e;var n=Object.keys(t),r=Object.keys(e);return n.length===r.length&&n.every(function(n){var r=t[n],o=e[n];return"object"==typeof r&&"object"==typeof o?g(r,o):String(r)===String(o)})}var m,x=[String,Object],_=[String,Array],w={name:"router-link",props:{to:{type:x,required:!0},tag:{type:String,default:"a"},exact:Boolean,append:Boolean,replace:Boolean,activeClass:String,exactActiveClass:String,event:{type:_,default:"click"}},render:function(t){var e=this,n=this.$router,r=this.$route,o=n.resolve(this.to,r,this.append),i=o.location,a=o.route,u=o.href,c={},s=n.options.linkActiveClass,l=n.options.linkExactActiveClass,f=null==s?"router-link-active":s,h=null==l?"router-link-exact-active":l,v=null==this.activeClass?f:this.activeClass,b=null==this.exactActiveClass?h:this.exactActiveClass,g=i.path?p(null,i,null,n):a;c[b]=y(r,g),c[v]=this.exact?c[b]:function(t,e){return 0===t.path.replace(d,"/").indexOf(e.path.replace(d,"/"))&&(!e.hash||t.hash===e.hash)&&function(t,e){for(var n in e)if(!(n in t))return!1;return!0}(t.query,e.query)}(r,g);var x=function(t){k(t)&&(e.replace?n.replace(i):n.push(i))},_={click:k};Array.isArray(this.event)?this.event.forEach(function(t){_[t]=x}):_[this.event]=x;var w={class:c};if("a"===this.tag)w.on=_,w.attrs={href:u};else{var C=function t(e){if(e)for(var n,r=0;r<e.length;r++){if("a"===(n=e[r]).tag)return n;if(n.children&&(n=t(n.children)))return n}}(this.$slots.default);if(C){C.isStatic=!1;var O=m.util.extend;(C.data=O({},C.data)).on=_,(C.data.attrs=O({},C.data.attrs)).href=u}else w.on=_}return t(this.tag,w,this.$slots.default)}};function k(t){if(!(t.metaKey||t.altKey||t.ctrlKey||t.shiftKey||t.defaultPrevented||void 0!==t.button&&0!==t.button)){if(t.currentTarget&&t.currentTarget.getAttribute){var e=t.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(e))return}return t.preventDefault&&t.preventDefault(),!0}}var C="undefined"!=typeof window;function O(t,e,n){var r=t.charAt(0);if("/"===r)return t;if("?"===r||"#"===r)return e+t;var o=e.split("/");n&&o[o.length-1]||o.pop();for(var i=t.replace(/^\//,"").split("/"),a=0;a<i.length;a++){var u=i[a];".."===u?o.pop():"."!==u&&o.push(u)}return""!==o[0]&&o.unshift(""),o.join("/")}function j(t){return t.replace(/\/\//g,"/")}var S=Array.isArray||function(t){return"[object Array]"==Object.prototype.toString.call(t)},E=V,A=I,P=function(t,e){return z(I(t,e))},$=z,T=W,M=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function I(t,e){for(var n,r=[],o=0,i=0,a="",u=e&&e.delimiter||"/";null!=(n=M.exec(t));){var c=n[0],s=n[1],l=n.index;if(a+=t.slice(i,l),i=l+c.length,s)a+=s[1];else{var f=t[i],d=n[2],p=n[3],h=n[4],v=n[5],b=n[6],y=n[7];a&&(r.push(a),a="");var g=null!=d&&null!=f&&f!==d,m="+"===b||"*"===b,x="?"===b||"*"===b,_=n[2]||u,w=h||v;r.push({name:p||o++,prefix:d||"",delimiter:_,optional:x,repeat:m,partial:g,asterisk:!!y,pattern:w?F(w):y?".*":"[^"+N(_)+"]+?"})}}return i<t.length&&(a+=t.substr(i)),a&&r.push(a),r}function R(t){return encodeURI(t).replace(/[\/?#]/g,function(t){return"%"+t.charCodeAt(0).toString(16).toUpperCase()})}function D(t){return encodeURI(t).replace(/[?#]/g,function(t){return"%"+t.charCodeAt(0).toString(16).toUpperCase()})}function z(t){for(var e=new Array(t.length),n=0;n<t.length;n++)"object"==typeof t[n]&&(e[n]=new RegExp("^(?:"+t[n].pattern+")$"));return function(n,r){for(var o="",i=n||{},a=(r||{}).pretty?R:encodeURIComponent,u=0;u<t.length;u++){var c=t[u];if("string"!=typeof c){var s,l=i[c.name];if(null==l){if(c.optional){c.partial&&(o+=c.prefix);continue}throw new TypeError('Expected "'+c.name+'" to be defined')}if(S(l)){if(!c.repeat)throw new TypeError('Expected "'+c.name+'" to not repeat, but received `'+JSON.stringify(l)+"`");if(0===l.length){if(c.optional)continue;throw new TypeError('Expected "'+c.name+'" to not be empty')}for(var f=0;f<l.length;f++){if(s=a(l[f]),!e[u].test(s))throw new TypeError('Expected all "'+c.name+'" to match "'+c.pattern+'", but received `'+JSON.stringify(s)+"`");o+=(0===f?c.prefix:c.delimiter)+s}}else{if(s=c.asterisk?D(l):a(l),!e[u].test(s))throw new TypeError('Expected "'+c.name+'" to match "'+c.pattern+'", but received "'+s+'"');o+=c.prefix+s}}else o+=c}return o}}function N(t){return t.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function F(t){return t.replace(/([=!:$\/()])/g,"\\$1")}function L(t,e){return t.keys=e,t}function B(t){return t.sensitive?"":"i"}function W(t,e,n){S(e)||(n=e||n,e=[]);for(var r=(n=n||{}).strict,o=!1!==n.end,i="",a=0;a<t.length;a++){var u=t[a];if("string"==typeof u)i+=N(u);else{var c=N(u.prefix),s="(?:"+u.pattern+")";e.push(u),u.repeat&&(s+="(?:"+c+s+")*"),i+=s=u.optional?u.partial?c+"("+s+")?":"(?:"+c+"("+s+"))?":c+"("+s+")"}}var l=N(n.delimiter||"/"),f=i.slice(-l.length)===l;return r||(i=(f?i.slice(0,-l.length):i)+"(?:"+l+"(?=$))?"),i+=o?"$":r&&f?"":"(?="+l+"|$)",L(new RegExp("^"+i,B(n)),e)}function V(t,e,n){return S(e)||(n=e||n,e=[]),n=n||{},t instanceof RegExp?function(t,e){var n=t.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)e.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return L(t,e)}(t,e):S(t)?function(t,e,n){for(var r=[],o=0;o<t.length;o++)r.push(V(t[o],e,n).source);return L(new RegExp("(?:"+r.join("|")+")",B(n)),e)}(t,e,n):function(t,e,n){return W(I(t,n),e,n)}(t,e,n)}E.parse=A,E.compile=P,E.tokensToFunction=$,E.tokensToRegExp=T;var H=Object.create(null);function q(t,e,n){try{return(H[t]||(H[t]=E.compile(t)))(e||{},{pretty:!0})}catch(t){return""}}function U(t,e,n,r){var o=e||[],i=n||Object.create(null),a=r||Object.create(null);t.forEach(function(t){!function t(e,n,r,o,i,a){var u=o.path;var c=o.name;0;var s=o.pathToRegexpOptions||{};var l=function(t,e,n){n||(t=t.replace(/\/$/,""));if("/"===t[0])return t;if(null==e)return t;return j(e.path+"/"+t)}(u,i,s.strict);"boolean"==typeof o.caseSensitive&&(s.sensitive=o.caseSensitive);var f={path:l,regex:function(t,e){var n=E(t,[],e);0;return n}(l,s),components:o.components||{default:o.component},instances:{},name:c,parent:i,matchAs:a,redirect:o.redirect,beforeEnter:o.beforeEnter,meta:o.meta||{},props:null==o.props?{}:o.components?o.props:{default:o.props}};o.children&&o.children.forEach(function(o){var i=a?j(a+"/"+o.path):void 0;t(e,n,r,o,f,i)});if(void 0!==o.alias){var d=Array.isArray(o.alias)?o.alias:[o.alias];d.forEach(function(a){var u={path:a,children:o.children};t(e,n,r,u,i,f.path||"/")})}n[f.path]||(e.push(f.path),n[f.path]=f);c&&(r[c]||(r[c]=f))}(o,i,a,t)});for(var u=0,c=o.length;u<c;u++)"*"===o[u]&&(o.push(o.splice(u,1)[0]),c--,u--);return{pathList:o,pathMap:i,nameMap:a}}function X(t,e,n,r){var o="string"==typeof t?{path:t}:t;if(o.name||o._normalized)return o;if(!o.path&&o.params&&e){(o=G({},o))._normalized=!0;var i=G(G({},e.params),o.params);if(e.name)o.name=e.name,o.params=i;else if(e.matched.length){var a=e.matched[e.matched.length-1].path;o.path=q(a,i,e.path)}else 0;return o}var u=function(t){var e="",n="",r=t.indexOf("#");r>=0&&(e=t.slice(r),t=t.slice(0,r));var o=t.indexOf("?");return o>=0&&(n=t.slice(o+1),t=t.slice(0,o)),{path:t,query:n,hash:e}}(o.path||""),c=e&&e.path||"/",s=u.path?O(u.path,c,n||o.append):c,f=function(t,e,n){void 0===e&&(e={});var r,o=n||l;try{r=o(t||"")}catch(t){r={}}for(var i in e)r[i]=e[i];return r}(u.query,o.query,r&&r.options.parseQuery),d=o.hash||u.hash;return d&&"#"!==d.charAt(0)&&(d="#"+d),{_normalized:!0,path:s,query:f,hash:d}}function G(t,e){for(var n in e)t[n]=e[n];return t}function J(t,e){var n=U(t),r=n.pathList,o=n.pathMap,i=n.nameMap;function a(t,n,a){var u=X(t,n,!1,e),s=u.name;if(s){var l=i[s];if(!l)return c(null,u);var f=l.regex.keys.filter(function(t){return!t.optional}).map(function(t){return t.name});if("object"!=typeof u.params&&(u.params={}),n&&"object"==typeof n.params)for(var d in n.params)!(d in u.params)&&f.indexOf(d)>-1&&(u.params[d]=n.params[d]);if(l)return u.path=q(l.path,u.params),c(l,u,a)}else if(u.path){u.params={};for(var p=0;p<r.length;p++){var h=r[p],v=o[h];if(K(v.regex,u.path,u.params))return c(v,u,a)}}return c(null,u)}function u(t,n){var r=t.redirect,o="function"==typeof r?r(p(t,n,null,e)):r;if("string"==typeof o&&(o={path:o}),!o||"object"!=typeof o)return c(null,n);var u=o,s=u.name,l=u.path,f=n.query,d=n.hash,h=n.params;if(f=u.hasOwnProperty("query")?u.query:f,d=u.hasOwnProperty("hash")?u.hash:d,h=u.hasOwnProperty("params")?u.params:h,s){i[s];return a({_normalized:!0,name:s,query:f,hash:d,params:h},void 0,n)}if(l){var v=function(t,e){return O(t,e.parent?e.parent.path:"/",!0)}(l,t);return a({_normalized:!0,path:q(v,h),query:f,hash:d},void 0,n)}return c(null,n)}function c(t,n,r){return t&&t.redirect?u(t,r||n):t&&t.matchAs?function(t,e,n){var r=a({_normalized:!0,path:q(n,e.params)});if(r){var o=r.matched,i=o[o.length-1];return e.params=r.params,c(i,e)}return c(null,e)}(0,n,t.matchAs):p(t,n,r,e)}return{match:a,addRoutes:function(t){U(t,r,o,i)}}}function K(t,e,n){var r=e.match(t);if(!r)return!1;if(!n)return!0;for(var o=1,i=r.length;o<i;++o){var a=t.keys[o-1],u="string"==typeof r[o]?decodeURIComponent(r[o]):r[o];a&&(n[a.name]=u)}return!0}var Z=Object.create(null);function Y(){window.history.replaceState({key:st()},""),window.addEventListener("popstate",function(t){tt(),t.state&&t.state.key&&function(t){ut=t}(t.state.key)})}function Q(t,e,n,r){if(t.app){var o=t.options.scrollBehavior;o&&t.app.$nextTick(function(){var t=function(){var t=st();if(t)return Z[t]}(),i=o(e,n,r?t:null);i&&("function"==typeof i.then?i.then(function(e){ot(e,t)}).catch(function(t){0}):ot(i,t))})}}function tt(){var t=st();t&&(Z[t]={x:window.pageXOffset,y:window.pageYOffset})}function et(t){return rt(t.x)||rt(t.y)}function nt(t){return{x:rt(t.x)?t.x:window.pageXOffset,y:rt(t.y)?t.y:window.pageYOffset}}function rt(t){return"number"==typeof t}function ot(t,e){var n="object"==typeof t;if(n&&"string"==typeof t.selector){var r=document.querySelector(t.selector);if(r){var o=t.offset&&"object"==typeof t.offset?t.offset:{};e=function(t,e){var n=document.documentElement.getBoundingClientRect(),r=t.getBoundingClientRect();return{x:r.left-n.left-e.x,y:r.top-n.top-e.y}}(r,o=function(t){return{x:rt(t.x)?t.x:0,y:rt(t.y)?t.y:0}}(o))}else et(t)&&(e=nt(t))}else n&&et(t)&&(e=nt(t));e&&window.scrollTo(e.x,e.y)}var it=C&&function(){var t=window.navigator.userAgent;return(-1===t.indexOf("Android 2.")&&-1===t.indexOf("Android 4.0")||-1===t.indexOf("Mobile Safari")||-1!==t.indexOf("Chrome")||-1!==t.indexOf("Windows Phone"))&&(window.history&&"pushState"in window.history)}(),at=C&&window.performance&&window.performance.now?window.performance:Date,ut=ct();function ct(){return at.now().toFixed(3)}function st(){return ut}function lt(t,e){tt();var n=window.history;try{e?n.replaceState({key:ut},"",t):(ut=ct(),n.pushState({key:ut},"",t))}catch(n){window.location[e?"replace":"assign"](t)}}function ft(t){lt(t,!0)}function dt(t,e,n){var r=function(o){o>=t.length?n():t[o]?e(t[o],function(){r(o+1)}):r(o+1)};r(0)}function pt(t){return function(e,n,o){var i=!1,a=0,u=null;ht(t,function(t,e,n,c){if("function"==typeof t&&void 0===t.cid){i=!0,a++;var s,l=yt(function(e){(function(t){return t.__esModule||bt&&"Module"===t[Symbol.toStringTag]})(e)&&(e=e.default),t.resolved="function"==typeof e?e:m.extend(e),n.components[c]=e,--a<=0&&o()}),f=yt(function(t){var e="Failed to resolve async component "+c+": "+t;u||(u=r(t)?t:new Error(e),o(u))});try{s=t(l,f)}catch(t){f(t)}if(s)if("function"==typeof s.then)s.then(l,f);else{var d=s.component;d&&"function"==typeof d.then&&d.then(l,f)}}}),i||o()}}function ht(t,e){return vt(t.map(function(t){return Object.keys(t.components).map(function(n){return e(t.components[n],t.instances[n],t,n)})}))}function vt(t){return Array.prototype.concat.apply([],t)}var bt="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;function yt(t){var e=!1;return function(){for(var n=[],r=arguments.length;r--;)n[r]=arguments[r];if(!e)return e=!0,t.apply(this,n)}}var gt=function(t,e){this.router=t,this.base=function(t){if(!t)if(C){var e=document.querySelector("base");t=(t=e&&e.getAttribute("href")||"/").replace(/^https?:\/\/[^\/]+/,"")}else t="/";"/"!==t.charAt(0)&&(t="/"+t);return t.replace(/\/$/,"")}(e),this.current=v,this.pending=null,this.ready=!1,this.readyCbs=[],this.readyErrorCbs=[],this.errorCbs=[]};function mt(t,e,n,r){var o=ht(t,function(t,r,o,i){var a=function(t,e){"function"!=typeof t&&(t=m.extend(t));return t.options[e]}(t,e);if(a)return Array.isArray(a)?a.map(function(t){return n(t,r,o,i)}):n(a,r,o,i)});return vt(r?o.reverse():o)}function xt(t,e){if(e)return function(){return t.apply(e,arguments)}}gt.prototype.listen=function(t){this.cb=t},gt.prototype.onReady=function(t,e){this.ready?t():(this.readyCbs.push(t),e&&this.readyErrorCbs.push(e))},gt.prototype.onError=function(t){this.errorCbs.push(t)},gt.prototype.transitionTo=function(t,e,n){var r=this,o=this.router.match(t,this.current);this.confirmTransition(o,function(){r.updateRoute(o),e&&e(o),r.ensureURL(),r.ready||(r.ready=!0,r.readyCbs.forEach(function(t){t(o)}))},function(t){n&&n(t),t&&!r.ready&&(r.ready=!0,r.readyErrorCbs.forEach(function(e){e(t)}))})},gt.prototype.confirmTransition=function(t,e,n){var o=this,i=this.current,a=function(t){r(t)&&(o.errorCbs.length?o.errorCbs.forEach(function(e){e(t)}):console.error(t)),n&&n(t)};if(y(t,i)&&t.matched.length===i.matched.length)return this.ensureURL(),a();var u=function(t,e){var n,r=Math.max(t.length,e.length);for(n=0;n<r&&t[n]===e[n];n++);return{updated:e.slice(0,n),activated:e.slice(n),deactivated:t.slice(n)}}(this.current.matched,t.matched),c=u.updated,s=u.deactivated,l=u.activated,f=[].concat(function(t){return mt(t,"beforeRouteLeave",xt,!0)}(s),this.router.beforeHooks,function(t){return mt(t,"beforeRouteUpdate",xt)}(c),l.map(function(t){return t.beforeEnter}),pt(l));this.pending=t;var d=function(e,n){if(o.pending!==t)return a();try{e(t,i,function(t){!1===t||r(t)?(o.ensureURL(!0),a(t)):"string"==typeof t||"object"==typeof t&&("string"==typeof t.path||"string"==typeof t.name)?(a(),"object"==typeof t&&t.replace?o.replace(t):o.push(t)):n(t)})}catch(t){a(t)}};dt(f,d,function(){var n=[];dt(function(t,e,n){return mt(t,"beforeRouteEnter",function(t,r,o,i){return function(t,e,n,r,o){return function(i,a,u){return t(i,a,function(t){u(t),"function"==typeof t&&r.push(function(){!function t(e,n,r,o){n[r]?e(n[r]):o()&&setTimeout(function(){t(e,n,r,o)},16)}(t,e.instances,n,o)})})}}(t,o,i,e,n)})}(l,n,function(){return o.current===t}).concat(o.router.resolveHooks),d,function(){if(o.pending!==t)return a();o.pending=null,e(t),o.router.app&&o.router.app.$nextTick(function(){n.forEach(function(t){t()})})})})},gt.prototype.updateRoute=function(t){var e=this.current;this.current=t,this.cb&&this.cb(t),this.router.afterHooks.forEach(function(n){n&&n(t,e)})};var _t=function(t){function e(e,n){var r=this;t.call(this,e,n);var o=e.options.scrollBehavior;o&&Y();var i=wt(this.base);window.addEventListener("popstate",function(t){var n=r.current,a=wt(r.base);r.current===v&&a===i||r.transitionTo(a,function(t){o&&Q(e,t,n,!0)})})}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.go=function(t){window.history.go(t)},e.prototype.push=function(t,e,n){var r=this,o=this.current;this.transitionTo(t,function(t){lt(j(r.base+t.fullPath)),Q(r.router,t,o,!1),e&&e(t)},n)},e.prototype.replace=function(t,e,n){var r=this,o=this.current;this.transitionTo(t,function(t){ft(j(r.base+t.fullPath)),Q(r.router,t,o,!1),e&&e(t)},n)},e.prototype.ensureURL=function(t){if(wt(this.base)!==this.current.fullPath){var e=j(this.base+this.current.fullPath);t?lt(e):ft(e)}},e.prototype.getCurrentLocation=function(){return wt(this.base)},e}(gt);function wt(t){var e=window.location.pathname;return t&&0===e.indexOf(t)&&(e=e.slice(t.length)),(e||"/")+window.location.search+window.location.hash}var kt=function(t){function e(e,n,r){t.call(this,e,n),r&&function(t){var e=wt(t);if(!/^\/#/.test(e))return window.location.replace(j(t+"/#"+e)),!0}(this.base)||Ct()}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.setupListeners=function(){var t=this,e=this.router.options.scrollBehavior,n=it&&e;n&&Y(),window.addEventListener(it?"popstate":"hashchange",function(){var e=t.current;Ct()&&t.transitionTo(Ot(),function(r){n&&Q(t.router,r,e,!0),it||Et(r.fullPath)})})},e.prototype.push=function(t,e,n){var r=this,o=this.current;this.transitionTo(t,function(t){St(t.fullPath),Q(r.router,t,o,!1),e&&e(t)},n)},e.prototype.replace=function(t,e,n){var r=this,o=this.current;this.transitionTo(t,function(t){Et(t.fullPath),Q(r.router,t,o,!1),e&&e(t)},n)},e.prototype.go=function(t){window.history.go(t)},e.prototype.ensureURL=function(t){var e=this.current.fullPath;Ot()!==e&&(t?St(e):Et(e))},e.prototype.getCurrentLocation=function(){return Ot()},e}(gt);function Ct(){var t=Ot();return"/"===t.charAt(0)||(Et("/"+t),!1)}function Ot(){var t=window.location.href,e=t.indexOf("#");return-1===e?"":t.slice(e+1)}function jt(t){var e=window.location.href,n=e.indexOf("#");return(n>=0?e.slice(0,n):e)+"#"+t}function St(t){it?lt(jt(t)):window.location.hash=t}function Et(t){it?ft(jt(t)):window.location.replace(jt(t))}var At=function(t){function e(e,n){t.call(this,e,n),this.stack=[],this.index=-1}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.push=function(t,e,n){var r=this;this.transitionTo(t,function(t){r.stack=r.stack.slice(0,r.index+1).concat(t),r.index++,e&&e(t)},n)},e.prototype.replace=function(t,e,n){var r=this;this.transitionTo(t,function(t){r.stack=r.stack.slice(0,r.index).concat(t),e&&e(t)},n)},e.prototype.go=function(t){var e=this,n=this.index+t;if(!(n<0||n>=this.stack.length)){var r=this.stack[n];this.confirmTransition(r,function(){e.index=n,e.updateRoute(r)})}},e.prototype.getCurrentLocation=function(){var t=this.stack[this.stack.length-1];return t?t.fullPath:"/"},e.prototype.ensureURL=function(){},e}(gt),Pt=function(t){void 0===t&&(t={}),this.app=null,this.apps=[],this.options=t,this.beforeHooks=[],this.resolveHooks=[],this.afterHooks=[],this.matcher=J(t.routes||[],this);var e=t.mode||"hash";switch(this.fallback="history"===e&&!it&&!1!==t.fallback,this.fallback&&(e="hash"),C||(e="abstract"),this.mode=e,e){case"history":this.history=new _t(this,t.base);break;case"hash":this.history=new kt(this,t.base,this.fallback);break;case"abstract":this.history=new At(this,t.base);break;default:0}},$t={currentRoute:{configurable:!0}};function Tt(t,e){return t.push(e),function(){var n=t.indexOf(e);n>-1&&t.splice(n,1)}}Pt.prototype.match=function(t,e,n){return this.matcher.match(t,e,n)},$t.currentRoute.get=function(){return this.history&&this.history.current},Pt.prototype.init=function(t){var e=this;if(this.apps.push(t),!this.app){this.app=t;var n=this.history;if(n instanceof _t)n.transitionTo(n.getCurrentLocation());else if(n instanceof kt){var r=function(){n.setupListeners()};n.transitionTo(n.getCurrentLocation(),r,r)}n.listen(function(t){e.apps.forEach(function(e){e._route=t})})}},Pt.prototype.beforeEach=function(t){return Tt(this.beforeHooks,t)},Pt.prototype.beforeResolve=function(t){return Tt(this.resolveHooks,t)},Pt.prototype.afterEach=function(t){return Tt(this.afterHooks,t)},Pt.prototype.onReady=function(t,e){this.history.onReady(t,e)},Pt.prototype.onError=function(t){this.history.onError(t)},Pt.prototype.push=function(t,e,n){this.history.push(t,e,n)},Pt.prototype.replace=function(t,e,n){this.history.replace(t,e,n)},Pt.prototype.go=function(t){this.history.go(t)},Pt.prototype.back=function(){this.go(-1)},Pt.prototype.forward=function(){this.go(1)},Pt.prototype.getMatchedComponents=function(t){var e=t?t.matched?t:this.resolve(t).route:this.currentRoute;return e?[].concat.apply([],e.matched.map(function(t){return Object.keys(t.components).map(function(e){return t.components[e]})})):[]},Pt.prototype.resolve=function(t,e,n){var r=X(t,e||this.history.current,n,this),o=this.match(r,e),i=o.redirectedFrom||o.fullPath;return{location:r,route:o,href:function(t,e,n){var r="hash"===n?"#"+e:e;return t?j(t+"/"+r):r}(this.history.base,i,this.mode),normalizedTo:r,resolved:o}},Pt.prototype.addRoutes=function(t){this.matcher.addRoutes(t),this.history.current!==v&&this.history.transitionTo(this.history.getCurrentLocation())},Object.defineProperties(Pt.prototype,$t),Pt.install=function t(e){if(!t.installed||m!==e){t.installed=!0,m=e;var n=function(t){return void 0!==t},r=function(t,e){var r=t.$options._parentVnode;n(r)&&n(r=r.data)&&n(r=r.registerRouteInstance)&&r(t,e)};e.mixin({beforeCreate:function(){n(this.$options.router)?(this._routerRoot=this,this._router=this.$options.router,this._router.init(this),e.util.defineReactive(this,"_route",this._router.history.current)):this._routerRoot=this.$parent&&this.$parent._routerRoot||this,r(this,this)},destroyed:function(){r(this)}}),Object.defineProperty(e.prototype,"$router",{get:function(){return this._routerRoot._router}}),Object.defineProperty(e.prototype,"$route",{get:function(){return this._routerRoot._route}}),e.component("router-view",o),e.component("router-link",w);var i=e.config.optionMergeStrategies;i.beforeRouteEnter=i.beforeRouteLeave=i.beforeRouteUpdate=i.created}},Pt.version="2.8.1",C&&window.Vue&&window.Vue.use(Pt),e.default=Pt},function(t,e,n){"use strict";e.__esModule=!0;var r=function(t){var e=[],r=function(t,r,o){if(e[o]&&Array.isArray(e[o].children)){var i={path:t.path.slice(1),name:"component-"+t.text,component:function(e){return n.e(1).then(function(){return e(n(367)("./"+r+t.path+".md"))}.bind(null,n)).catch(n.oe)}};e[o].children.push(i)}};return t.forEach(function(t,o){var i={text:t.text,path:t.path,component:function(t){return n.e(2).then(function(){return t(n(368))}.bind(null,n)).catch(n.oe)},children:[]};e.push(i),t.children&&t.children.forEach(function(t){t.href||(t.groups?t.groups.forEach(function(t){t.list.forEach(function(e){r(e,""+t.folder,o)})}):t.children?t.children.forEach(function(t){r(t,"guide",o)}):r(t,"guide",o))})}),e}(function(t){return t&&t.__esModule?t:{default:t}}(n(144)).default);e.default=r},function(t,e,n){"use strict";n.r(e);var r=n(133),o=n(47);for(var i in o)"default"!==i&&function(t){n.d(e,t,function(){return o[t]})}(i);n(198);var a=n(0),u=Object(a.a)(o.default,r.a,r.b,!1,null,null,null);u.options.__file="examples/components/demo-block.vue",e.default=u.exports},function(t,e,n){"use strict";var r=n(49);n.n(r).a},function(t,e,n){(t.exports=n(17)(!1)).push([t.i,"\n.demo-container {\n  transition: max-height 0.3s ease;\n  overflow: hidden;\n}\n.docs-demo {\n  width: 100%;\n  height: auto;\n  box-sizing: border-box;\n  font-size: 14px;\n  background-color: #f7f7f7;\n  border: 1px solid #e2ecf4;\n  border-top: none;\n}\n.docs-demo pre code {\n  font-family: Consolas, Menlo, Courier, monospace;\n  line-height: 22px;\n  border: none;\n}\n.docs-trans {\n  width: 100%;\n  text-align: center;\n  display: inline-block;\n  color: #318ae6;\n  font-size: 12px;\n  padding: 10px 0;\n  cursor: pointer;\n  background-color: #fafbfc;\n}\n.docs-demo__code,\n.highlight-wrapper,\n.docs-demo__meta {\n  padding: 0 20px;\n  overflow-y: auto;\n}\n.docs-demo__code {\n  border-bottom: 1px solid #eee;\n}\n.docs-demo.docs-demo--expand .docs-demo__meta {\n  border-bottom: 1px dashed #e9e9e9;\n}\n.docs-demo.docs-demo--expand .docs-demo__triangle {\n  transform: rotate(180deg);\n}\n.highlight-wrapper {\n  display: none;\n}\n.highlight-wrapper p,\n.highlight-wrapper pre {\n  margin: 0;\n}\n.highlight-wrapper .hljs {\n  padding: 0;\n}\n.docs-demo.docs-demo--expand .highlight-wrapper {\n  display: block;\n}\n.docs-demo__code__mobi {\n  height: 620px;\n  margin: 20px 0;\n}\n.docs-demo__code__mobi__header {\n  border-radius: 4px 4px 0 0;\n  background: -webkit-linear-gradient(rgba(55, 55, 55, 0.98), #545456);\n  background: linear-gradient(rgba(55, 55, 55, 0.98), #545456);\n  text-align: center;\n  padding: 8px;\n}\n.docs-demo__code__mobi__header img {\n  width: 100%;\n}\n.docs-demo__code__mobi__header .url-box {\n  height: 28px;\n  line-height: 28px;\n  color: #fff;\n  padding: 0 3px;\n  background-color: #a2a2a2;\n  margin: 10px auto 0;\n  border-radius: 4px;\n  white-space: nowrap;\n  overflow-x: auto;\n}\n.docs-demo__code__mobi__content iframe {\n  width: 100%;\n  border: 0;\n  height: 548px;\n}\n",""])},function(t,e,n){var r=n(201);"string"==typeof r&&(r=[[t.i,r,""]]);var o={hmr:!0,transform:void 0};n(26)(r,o);r.locals&&(t.exports=r.locals)},function(t,e,n){var r=n(202);(t.exports=n(17)(!1)).push([t.i,'/** css前缀名称 */\n/** css-icon前缀名称 */\n/** 全局颜色样式定义 -- START*/\n/**纯白**/\n/**纯黑**/\n/** 主颜色样式--品牌色*/\n/** 灰，一般用作背景色*/\n/** 灰，用作组件禁用时的背景色*/\n/** 灰，用作边框、分割线*/\n/** 全局颜色样式定义 -- END*/\n/** 全局字体样式定义 -- START*/\n/** 灰，一般用作placeholder，常用*/\n/** 全局字体样式定义 -- END*/\n/**鼠标经过禁用样式*/\nbody {\n  font-family: "Helvetica Neue", Helvetica, "PingFang SC", "Hiragino Sans GB", "Microsoft YaHei", "\\5FAE\\8F6F\\96C5\\9ED1", Arial, sans-serif;\n  font-size: 14px;\n}\n.disabled,\n.xbui-button-reset.xbui-button:disabled,\n.xbui-button-error.xbui-button:disabled,\n.xbui-button-text.xbui-button:disabled {\n  opacity: 0.4;\n  cursor: not-allowed;\n}\n.xbui-button {\n  font-size: 14px;\n  padding: 6px 15px;\n  border: 0;\n  outline: none;\n  border-radius: 4px;\n  min-width: 70px;\n  max-width: 200px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  cursor: pointer;\n  user-select: none;\n  transition: all 0.7s;\n}\n.xbui-button-default {\n  color: #fff;\n  background: #5b8af9;\n  border: 1px solid #5b8af9;\n}\n.xbui-button-default:hover {\n  background: #8cadfb;\n  border: 1px solid #8cadfb;\n}\n.xbui-button-default:active {\n  background: #496ec7;\n  border: 1px solid #496ec7;\n}\n.xbui-button-default.xbui-button:disabled {\n  opacity: 0.4;\n  cursor: not-allowed;\n}\n.xbui-button-default.xbui-button:disabled:hover {\n  color: #fff;\n  background: #5b8af9;\n  border: 1px solid #5b8af9;\n}\n.xbui-button-reset {\n  color: #5b8af9;\n  background: #eff3fe;\n  border: 1px solid #8cadfb;\n}\n.xbui-button-reset:hover {\n  background: #8cadfb;\n  color: #fff;\n}\n.xbui-button-reset:active {\n  color: #fff;\n  background: #496ec7;\n  border: 1px solid #496ec7;\n}\n.xbui-button-reset.xbui-button:disabled:hover {\n  color: #5b8af9;\n  background: #eff3fe;\n  border: 1px solid #8cadfb;\n}\n.xbui-button-error {\n  color: #fff;\n  background: #f5222d;\n  border: 1px solid #f5222d;\n}\n.xbui-button-error:hover {\n  background: #f8646c;\n  border: 1px solid #f8646c;\n}\n.xbui-button-error:active {\n  background: #c41b24;\n  border: 1px solid #c41b24;\n}\n.xbui-button-error.xbui-button:disabled:hover {\n  color: #fff;\n  background: #f5222d;\n  border: 1px solid #f5222d;\n}\n.xbui-button-text {\n  color: #5b8af9;\n  background: none;\n  border: 1px solid none;\n}\n.xbui-button-text:hover {\n  color: #8cadfb;\n  border: 1px solid none;\n}\n.xbui-button-text:active {\n  color: #496ec7;\n  border: 1px solid none;\n}\n.xbui-button-text.xbui-button:disabled:hover {\n  color: #5b8af9;\n  background: none;\n  border: 1px solid none;\n}\n.xbui-button-large {\n  padding: 8px 20px;\n  min-width: 80px;\n}\n.xbui-button-small {\n  padding: 3px 5px;\n  font-size: 12px;\n  min-width: 60px;\n}\n.xbui-button-long {\n  width: 100%;\n  max-width: none;\n}\n.xbui-checkbox-focus {\n  box-shadow: 0 0 0 2px rgba(91, 138, 249, 0.2);\n  z-index: 1;\n}\n.xbui-checkbox {\n  display: inline-block;\n  vertical-align: middle;\n  white-space: nowrap;\n  cursor: pointer;\n  line-height: 1;\n  position: relative;\n}\n.xbui-checkbox-disabled {\n  cursor: "not-allowed";\n}\n.xbui-checkbox:hover .xbui-checkbox-inner {\n  border-color: #aaaaaa;\n}\n.xbui-checkbox-inner {\n  display: inline-block;\n  width: 14px;\n  height: 14px;\n  position: relative;\n  top: 0;\n  left: 0;\n  border: 1px solid #cccccc;\n  border-radius: 2px;\n  background-color: #fff;\n  transition: border-color 0.2s ease-in-out, background-color 0.2s ease-in-out, box-shadow 0.2s ease-in-out;\n}\n.xbui-checkbox-inner:after {\n  content: "";\n  display: table;\n  width: 4px;\n  height: 8px;\n  position: absolute;\n  top: 1px;\n  left: 4px;\n  border: 2px solid #fff;\n  border-top: 0;\n  border-left: 0;\n  transform: rotate(45deg) scale(0);\n  transition: all 0.2s ease-in-out;\n}\n.xbui-checkbox-largexbui-checkbox-inner {\n  width: 16px;\n  height: 16px;\n}\n.xbui-checkbox-largexbui-checkbox-inner:after {\n  width: 5px;\n  height: 9px;\n}\n.xbui-checkbox-small {\n  font-size: 12px;\n}\n.xbui-checkbox-smallxbui-checkbox-inner {\n  width: 12px;\n  height: 12px;\n}\n.xbui-checkbox-smallxbui-checkbox-inner:after {\n  top: 0;\n  left: 3px;\n}\n.xbui-checkbox-input {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  z-index: 1;\n  cursor: pointer;\n  opacity: 0;\n}\n.xbui-checkbox-input[disabled] {\n  cursor: "not-allowed";\n}\n.xbui-checkbox-checked:hover .xbui-checkbox-inner {\n  border-color: #5b8af9;\n}\n.xbui-checkbox-checked .xbui-checkbox-inner {\n  border-color: #5b8af9;\n  background-color: #5b8af9;\n}\n.xbui-checkbox-checked .xbui-checkbox-inner:after {\n  content: "";\n  display: table;\n  width: 4px;\n  height: 8px;\n  position: absolute;\n  top: 1px;\n  left: 4px;\n  border: 2px solid #fff;\n  border-top: 0;\n  border-left: 0;\n  transform: rotate(45deg) scale(1);\n  transition: all 0.2s ease-in-out;\n}\n.xbui-checkbox-large .xbui-checkbox-checked .xbui-checkbox-inner:after {\n  width: 5px;\n  height: 9px;\n}\n.xbui-checkbox-small .xbui-checkbox-checked .xbui-checkbox-inner:after {\n  top: 0;\n  left: 3px;\n}\n.xbui-checkbox-disabledxbui-checkbox-checked:hover .xbui-checkbox-inner {\n  border-color: #cccccc;\n}\n.xbui-checkbox-disabledxbui-checkbox-checked .xbui-checkbox-inner {\n  background-color: #e5e5e5;\n  border-color: #cccccc;\n}\n.xbui-checkbox-disabledxbui-checkbox-checked .xbui-checkbox-inner:after {\n  animation-name: none;\n  border-color: #cccccc;\n}\n.xbui-checkbox-disabled:hover .xbui-checkbox-inner {\n  border-color: #cccccc;\n}\n.xbui-checkbox-disabled .xbui-checkbox-inner {\n  border-color: #cccccc;\n  background-color: #e5e5e5;\n}\n.xbui-checkbox-disabled .xbui-checkbox-inner:after {\n  animation-name: none;\n  border-color: #e5e5e5;\n}\n.xbui-checkbox-disabled .xbui-checkbox-inner-input {\n  cursor: default;\n}\n.xbui-checkbox-disabled + span {\n  color: #cccccc;\n  cursor: "not-allowed";\n}\n.xbui-checkbox-indeterminate .xbui-checkbox-inner:after {\n  content: "";\n  width: 8px;\n  height: 1px;\n  transform: scale(1);\n  position: absolute;\n  left: 2px;\n  top: 5px;\n}\n.xbui-checkbox-indeterminate:hover .xbui-checkbox-inner {\n  border-color: #5b8af9;\n}\n.xbui-checkbox-indeterminate .xbui-checkbox-inner {\n  background-color: #5b8af9;\n  border-color: #5b8af9;\n}\n.xbui-checkbox-indeterminatexbui-checkbox-disabled .xbui-checkbox-inner {\n  background-color: #e5e5e5;\n  border-color: #cccccc;\n}\n.xbui-checkbox-indeterminatexbui-checkbox-disabled .xbui-checkbox-inner:after {\n  border-color: #cccccc;\n}\n.xbui-checkbox-large .xbui-checkbox-indeterminate .xbui-checkbox-inner:after {\n  width: 10px;\n  top: 6px;\n}\n.xbui-checkbox-small .xbui-checkbox-indeterminate .xbui-checkbox-inner:after {\n  width: 6px;\n  top: 4px;\n}\n.xbui-checkbox-wrapper {\n  cursor: pointer;\n  font-size: 12px;\n  display: inline-block;\n  margin-right: 8px;\n}\n.xbui-checkbox-wrapper-disabled {\n  cursor: "not-allowed";\n}\n.xbui-checkbox-wrapper.xbui-checkbox-large {\n  font-size: 14px;\n}\n.xbui-checkbox-wrapper + span,\n.xbui-checkbox + span {\n  margin-right: 4px;\n}\n.xbui-checkbox-group {\n  font-size: 14px;\n}\n.xbui-checkbox-group-item {\n  display: inline-block;\n}\n.xbui-input-number-whole-div {\n  position: relative;\n  display: inline-block;\n  height: 100%;\n}\n.xbui-input-number-input-div {\n  width: 180px;\n  height: 40px;\n  min-height: 30px;\n  border: 1px #ccc solid;\n  font-size: 14px;\n  display: inline-block;\n  border-radius: 3px;\n}\n.xbui-input-number-input {\n  padding: 0 55px 0 10px;\n  margin: 0;\n  width: calc(100% - 65px);\n  height: 100%;\n  border: none;\n  background: transparent;\n}\n.xbui-input-number-input-disabled {\n  background-color: #f5f7fa;\n  border-color: #e4e7ed;\n  color: #c0c4cc;\n  cursor: not-allowed;\n}\n.xbui-input-number-arrow-div {\n  position: absolute;\n  width: 40px;\n  height: 100%;\n  right: 0;\n  top: 0;\n  font-size: 0;\n  border-left: 1px solid #ddd;\n}\n.xbui-input-number-arrow {\n  width: 100%;\n  height: 50%;\n  border-bottom: none;\n  cursor: pointer;\n  font-size: 12px;\n  text-align: center;\n  display: inline-block;\n}\n.xbui-input-number-arrow-disabled {\n  cursor: not-allowed;\n  color: #c0c4cc;\n}\n.xbui-input-number-arrow-down {\n  border-bottom: 1px solid #ddd;\n}\n@font-face {\n  font-family: "icomoon";\n  src: url('+r(n(146))+");\n  src: url("+r(n(146))+'#iefix) format("embedded-opentype"), url('+r(n(203))+') format("truetype"), url('+r(n(204))+') format("woff"), url('+r(n(205))+'#icomoon) format("svg");\n  font-weight: normal;\n  font-style: normal;\n}\n[class^="xb-icon-"],\n[class*=" xb-icon-"] {\n  /* use !important to prevent issues with browser extensions that change fonts */\n  font-family: "icomoon" !important;\n  speak: none;\n  font-style: normal;\n  font-weight: normal;\n  font-variant: normal;\n  text-transform: none;\n  line-height: 1;\n  /* Better Font Rendering =========== */\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n.xb-icon-edit:before {\n  content: "\\E94B";\n}\n.xb-icon-achievement:before {\n  content: "\\E900";\n}\n.xb-icon-activity:before {\n  content: "\\E901";\n}\n.xb-icon-annex:before {\n  content: "\\E902";\n}\n.xb-icon-announcement:before {\n  content: "\\E903";\n}\n.xb-icon-arrow-down:before {\n  content: "\\E904";\n}\n.xb-icon-arrow-left:before {\n  content: "\\E905";\n}\n.xb-icon-arrow-right:before {\n  content: "\\E906";\n}\n.xb-icon-arrow-up:before {\n  content: "\\E907";\n}\n.xb-icon-Attendance:before {\n  content: "\\E908";\n}\n.xb-icon-audio:before {\n  content: "\\E909";\n}\n.xb-icon-bars:before {\n  content: "\\E90A";\n}\n.xb-icon-bedroom:before {\n  content: "\\E90B";\n}\n.xb-icon-campus:before {\n  content: "\\E90C";\n}\n.xb-icon-caret-bottom:before {\n  content: "\\E90D";\n}\n.xb-icon-caret-left:before {\n  content: "\\E90E";\n}\n.xb-icon-caret-right:before {\n  content: "\\E90F";\n}\n.xb-icon-caret-top:before {\n  content: "\\E910";\n}\n.xb-icon-check:before {\n  content: "\\E911";\n}\n.xb-icon-Child:before {\n  content: "\\E912";\n}\n.xb-icon-circle-check:before {\n  content: "\\E913";\n}\n.xb-icon-circle-check-outline:before {\n  content: "\\E914";\n}\n.xb-icon-circle-close:before {\n  content: "\\E915";\n}\n.xb-icon-circle-close-outline:before {\n  content: "\\E916";\n}\n.xb-icon-circle-download:before {\n  content: "\\E917";\n}\n.xb-icon-circle-plus:before {\n  content: "\\E918";\n}\n.xb-icon-circle-remove:before {\n  content: "\\E919";\n}\n.xb-icon-circle-upload:before {\n  content: "\\E91A";\n}\n.xb-icon-class:before {\n  content: "\\E91B";\n}\n.xb-icon-close:before {\n  content: "\\E91C";\n}\n.xb-icon-comment:before {\n  content: "\\E91D";\n}\n.xb-icon-comment-outline:before {\n  content: "\\E91E";\n}\n.xb-icon-copy:before {\n  content: "\\E91F";\n}\n.xb-icon-curriculum:before {\n  content: "\\E920";\n}\n.xb-icon-data-disk:before {\n  content: "\\E921";\n}\n.xb-icon-date:before {\n  content: "\\E922";\n}\n.xb-icon-delete:before {\n  content: "\\E923";\n}\n.xb-icon-disable:before {\n  content: "\\E924";\n}\n.xb-icon-drag:before {\n  content: "\\E925";\n}\n.xb-icon-error-circle:before {\n  content: "\\E926";\n}\n.xb-icon-exam:before {\n  content: "\\E927";\n}\n.xb-icon-export:before {\n  content: "\\E928";\n}\n.xb-icon-eye:before {\n  content: "\\E929";\n}\n.xb-icon-eye-off:before {\n  content: "\\E92A";\n}\n.xb-icon-filter:before {\n  content: "\\E92B";\n}\n.xb-icon-Finance:before {\n  content: "\\E92C";\n}\n.xb-icon-home:before {\n  content: "\\E92D";\n}\n.xb-icon-info-circle:before {\n  content: "\\E92E";\n}\n.xb-icon-learning-tasks:before {\n  content: "\\E92F";\n}\n.xb-icon-list:before {\n  content: "\\E930";\n}\n.xb-icon-loading:before {\n  content: "\\E931";\n}\n.xb-icon-management:before {\n  content: "\\E932";\n}\n.xb-icon-mechanism:before {\n  content: "\\E933";\n}\n.xb-icon-minus:before {\n  content: "\\E934";\n}\n.xb-icon-more:before {\n  content: "\\E935";\n}\n.xb-icon-password:before {\n  content: "\\E936";\n}\n.xb-icon-plus:before {\n  content: "\\E937";\n}\n.xb-icon-printer:before {\n  content: "\\E938";\n}\n.xb-icon-Progression:before {\n  content: "\\E939";\n}\n.xb-icon-question-circle:before {\n  content: "\\E93A";\n}\n.xb-icon-recruit-students:before {\n  content: "\\E93B";\n}\n.xb-icon-role:before {\n  content: "\\E93C";\n}\n.xb-icon-same-level:before {\n  content: "\\E93D";\n}\n.xb-icon-save:before {\n  content: "\\E93E";\n}\n.xb-icon-schedule:before {\n  content: "\\E93F";\n}\n.xb-icon-school:before {\n  content: "\\E940";\n}\n.xb-icon-search:before {\n  content: "\\E941";\n}\n.xb-icon-staff:before {\n  content: "\\E942";\n}\n.xb-icon-student:before {\n  content: "\\E943";\n}\n.xb-icon-success-circle:before {\n  content: "\\E944";\n}\n.xb-icon-sync:before {\n  content: "\\E945";\n}\n.xb-icon-teaching-setting:before {\n  content: "\\E946";\n}\n.xb-icon-time:before {\n  content: "\\E947";\n}\n.xb-icon-tree_ico:before {\n  content: "\\E948";\n}\n.xb-icon-user:before {\n  content: "\\E949";\n}\n.xb-icon-warning-circle:before {\n  content: "\\E94A";\n}\n.xbui-messageBox {\n  position: fixed;\n  top: 0%;\n  z-index: 999;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 600px;\n}\n.xbui-message-tips {\n  pointer-events: all;\n  position: relative;\n  text-align: center;\n}\n.xbui-message-tips-content {\n  padding: 10px 16px;\n  border-radius: 4px;\n  box-shadow: 0 1px 6px rgba(0, 0, 0, 0.2);\n  background: #fff;\n  font-size: 14px;\n  margin: 10px 0;\n  display: inline-block;\n}\n.xbui-message-tips-text {\n  margin-left: 3px;\n}\n.xbui-message-tips_close {\n  margin-left: 50px;\n  cursor: pointer;\n}\n.slide-fade-enter-active,\n.slide-fade-leave-active {\n  transition: all 0.5s ease;\n}\n.slide-fade-enter,\n.slide-fade-leave-to {\n  transform: translateY(-10px);\n  opacity: 0;\n}\n.slide-fade-leave-to {\n  margin-top: -60px;\n}\n.xbui-popup-window {\n  width: auto;\n  margin: 0 auto;\n  outline: none;\n}\n.xbui-popup-window-hidden {\n  display: none !important;\n}\n.xbui-popup-window-wrap {\n  z-index: 999;\n  position: fixed;\n  left: 50%;\n  transform: translateX(-50%);\n  top: 20%;\n}\n.xbui-popup-window-wrap * {\n  box-sizing: border-box;\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n}\n.xbui-popup-window-mask {\n  position: fixed;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  background-color: rgba(55, 55, 55, 0.6);\n  height: 100%;\n  z-index: 999;\n}\n.xbui-popup-window-content {\n  position: relative;\n  background-color: #fff;\n  border: 0;\n  border-radius: 5px;\n  background-clip: padding-box;\n}\n.xbui-popup-window-header {\n  border-bottom: 1px solid #e5e5e5;\n  padding: 14px 16px;\n  line-height: 1;\n}\n.xbui-popup-window-close {\n  z-index: 1;\n  font-size: 12px;\n  position: absolute;\n  right: 8px;\n  top: 8px;\n  overflow: hidden;\n  cursor: pointer;\n}\n.xbui-popup-window-body {\n  padding: 16px;\n  font-size: 12px;\n  line-height: 1.5;\n}\n.xbui-popup-window-footer {\n  border-top: 1px solid #e5e5e5;\n  padding: 12px 18px 12px 18px;\n  text-align: right;\n}\n.xbui-popup-window-footer button + button {\n  margin-left: 8px;\n  margin-bottom: 0;\n}\n.colorBox {\n  display: flex;\n  flex-wrap: wrap;\n}\n.colorBox .item {\n  font-size: 16px;\n  padding: 15px;\n  width: 10%;\n  border-radius: 3px;\n  margin-bottom: 15px;\n  margin-right: 5px;\n  color: #fff;\n}\n.colorBox .item div:last-child {\n  font-size: 14px;\n  opacity: 0.8;\n  margin-top: 3px;\n}\n.default {\n  background: #5b8af9;\n}\n.Primary3 {\n  background: #8cadfb;\n  color: #333 !important;\n}\n.Primary2 {\n  background: #bdd0fd;\n  color: #333 !important;\n}\n.Primary1 {\n  background: #eff3fe;\n  color: #333 !important;\n}\n.Primary5 {\n  background: #496ec7;\n}\n.Primary6 {\n  background: #375395;\n}\n.Primary7 {\n  background: #243764;\n}\n.gray1 {\n  background: #f5f5f5;\n  color: #333 !important;\n}\n.gray2 {\n  background: #e5e5e5;\n  color: #333 !important;\n}\n.gray3 {\n  background: #cccccc;\n  color: #333 !important;\n}\n.gray4 {\n  background: #aaaaaa;\n  color: #333 !important;\n}\n.gray5 {\n  background: #737373;\n  color: #333 !important;\n}\n.gray6 {\n  background: #333333;\n}\n.white {\n  background: #fff;\n  color: #333 !important;\n}\n.black {\n  background: #000;\n}\n.blue {\n  background: #1890ff;\n}\n.green {\n  background: #52c41a;\n}\n.orange {\n  background: #faad14;\n}\n.red {\n  background: #f5222d;\n}\n.clearfix {\n  zoom: 1;\n}\n.clearfix:before,\n.clearfix:after {\n  content: "";\n  display: table;\n}\n.clearfix:after {\n  clear: both;\n  visibility: hidden;\n  font-size: 0;\n  height: 0;\n}\n."xbui-" "form" ."xbui-" "form" "-item"-label {\n  text-align: right;\n  vertical-align: middle;\n  float: left;\n  font-size: 12px;\n  color: #000;\n  line-height: 1;\n  padding: 10px 12px 10px 0;\n  box-sizing: border-box;\n}\n."xbui-" "form"-label-left ."xbui-" "form" "-item"-label {\n  text-align: left;\n}\n."xbui-" "form"-label-right ."xbui-" "form" "-item"-label {\n  text-align: left;\n}\n."xbui-" "form"-inline ."xbui-" "form" "-item" {\n  display: inline-block;\n  margin-right: 10px;\n  vertical-align: top;\n}\n."xbui-" "form" "-item" {\n  margin-bottom: 24px;\n  vertical-align: top;\n  zoom: 1;\n}\n."xbui-" "form" "-item":before,\n."xbui-" "form" "-item":after {\n  content: "";\n  display: table;\n}\n."xbui-" "form" "-item":after {\n  clear: both;\n  visibility: hidden;\n  font-size: 0;\n  height: 0;\n}\n."xbui-" "form" "-item"-content {\n  position: relative;\n  line-height: 32px;\n  font-size: 12px;\n}\n."xbui-" "form" "-item" ."xbui-" "form" "-item" {\n  margin-bottom: 0;\n}\n."xbui-" "form" "-item" ."xbui-" "form" "-item" ."xbui-" "form" "-item"-content {\n  margin-left: 0 !important;\n}\n."xbui-" "form" "-item"-error-tip {\n  position: absolute;\n  top: 100%;\n  left: 0;\n  line-height: 1;\n  padding-top: 6px;\n  color: #f5222d;\n}\n."xbui-" "form" "-item"-required ."xbui-" "form" "-item"-label:before {\n  content: "*";\n  display: inline-block;\n  margin-right: 4px;\n  line-height: 1;\n  font-family: SimSun;\n  font-size: 12px;\n  color: #f5222d;\n}\n."xbui-" "form" "-item"-error input {\n  border: 1px solid #f5222d;\n}\n.xbui-text-div {\n  width: 260px;\n  position: relative;\n}\n.xbui-text-input {\n  background-color: #fff;\n  background-image: none;\n  border-radius: 3px;\n  border: 1px solid #cccccc;\n  box-sizing: border-box;\n  color: #333333;\n  display: inline-block;\n  width: 100%;\n}\n.xbui-text-input-large {\n  height: 40px;\n  line-height: 40px;\n  padding: 0 15px;\n  font-size: 14px;\n}\n.xbui-text-input-medium {\n  height: 32px;\n  line-height: 32px;\n  padding: 0 12px;\n  font-size: 14px;\n}\n.xbui-text-input-small {\n  height: 20px;\n  line-height: 20px;\n  padding: 0 10px;\n  font-size: 12px;\n}\n.xbui-text-fail-input {\n  font-size: 16px;\n  border-color: #f5222d;\n}\n.xbui-text-left-input {\n  padding-left: 30px;\n}\n.xbui-text-right-input {\n  padding-right: 30px;\n}\n.xbui-text-input:hover {\n  border-color: #5b8af9;\n}\n.xbui-text-textarea {\n  padding: 5px 15px;\n  line-height: 20px;\n  min-height: 50px;\n  resize: none;\n}\n.xbui-text-disabled {\n  background-color: #e5e5e5;\n  border-color: #e5e5e5 !important;\n  color: #cccccc;\n  cursor: not-allowed;\n}\n.xbui-text-left-icon {\n  position: absolute;\n  height: 75%;\n  left: 10px;\n  top: 25%;\n  text-align: center;\n  color: #c0c4cc;\n  vertical-align: baseline;\n  display: inline-block;\n}\n.xbui-text-right-icon {\n  position: absolute;\n  height: 75%;\n  right: 10px;\n  top: 25%;\n  text-align: center;\n  color: #c0c4cc;\n  vertical-align: baseline;\n  display: inline-block;\n}\n.xbui-text-close-icon {\n  font-size: 16px;\n  color: #aaaaaa;\n  cursor: pointer;\n}\n.xbui-text-success-icon {\n  font-size: 16px;\n  color: #52c41a;\n}\n.xbui-text-fail-icon {\n  font-size: 16px;\n  color: #f5222d;\n}\n.xbui-table {\n  width: inherit;\n  height: 100%;\n  max-width: 100%;\n  overflow: hidden;\n  color: #333333;\n  font-size: 12px;\n  background-color: #fff;\n  box-sizing: border-box;\n}\n.xbui-table-wrapper {\n  position: relative;\n  border: 1px solid #cccccc;\n  border-bottom: 0;\n  border-right: 0;\n}\n.xbui-table-hide {\n  opacity: 0;\n}\n.xbui-table:before {\n  content: "";\n  width: 100%;\n  height: 1px;\n  position: absolute;\n  left: 0;\n  bottom: 0;\n  background-color: #cccccc;\n  z-index: 1;\n}\n.xbui-table:after {\n  content: "";\n  width: 1px;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  right: 0;\n  background-color: #cccccc;\n  z-index: 3;\n}\n.xbui-table-title,\n.xbui-table-footer {\n  height: 48px;\n  line-height: 48px;\n  border-bottom: 1px solid #737373;\n}\n.xbui-table-footer {\n  border-bottom: none;\n}\n.xbui-table-header {\n  overflow: hidden;\n}\n.xbui-table-overflowX {\n  overflow-x: scroll;\n}\n.xbui-table-overflowY {\n  overflow-y: scroll;\n}\n.xbui-table-tip {\n  overflow-x: auto;\n  overflow-y: hidden;\n}\n.xbui-table-with-fixed-top.xbui-table-with-footer .xbui-table-footer {\n  border-top: 1px solid #cccccc;\n}\n.xbui-table-with-fixed-top.xbui-table-with-footer tbody tr:last-child td {\n  border-bottom: none;\n}\n.xbui-table th,\n.xbui-table td {\n  min-width: 0;\n  height: 48px;\n  box-sizing: border-box;\n  text-align: left;\n  text-overflow: ellipsis;\n  vertical-align: middle;\n  border-bottom: 1px solid #737373;\n}\n.xbui-table th {\n  height: 40px;\n  white-space: nowrap;\n  overflow: hidden;\n  background-color: #f5f5f5;\n}\n.xbui-table td {\n  background-color: #fff;\n  transition: background-color 0.2s ease-in-out;\n}\nth.xbui-table-column-left,\ntd.xbui-table-column-left {\n  text-align: left;\n}\nth.xbui-table-column-center,\ntd.xbui-table-column-center {\n  text-align: center;\n}\nth.xbui-table-column-right,\ntd.xbui-table-column-right {\n  text-align: right;\n}\n.xbui-table table {\n  table-layout: fixed;\n}\n.xbui-table-border th,\n.xbui-table-border td {\n  border-right: 1px solid #737373;\n}\n.xbui-table-cell {\n  padding-left: 18px;\n  padding-right: 18px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: normal;\n  word-break: break-all;\n  box-sizing: border-box;\n}\n.xbui-table-cell-ellipsis {\n  word-break: keep-all;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n.xbui-table-cell-tooltip {\n  width: 100%;\n}\n.xbui-table-cell-tooltip-content {\n  display: block;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n.xbui-table-cell-with-expand {\n  height: 47px;\n  line-height: 47px;\n  padding: 0;\n  text-align: center;\n}\n.xbui-table-cell-expand {\n  cursor: pointer;\n  transition: transform 0.2s ease-in-out;\n}\n.xbui-table-cell-expand i {\n  font-size: 14px;\n}\n.xbui-table-cell-expand-expanded {\n  transform: rotate(90deg);\n}\n.xbui-table-cell-sort {\n  cursor: pointer;\n  user-select: none;\n}\n.xbui-table-cell-with-selection ."xbui-"checkbox-wrapper {\n  margin-right: 0;\n}\n.xbui-table-hidden {\n  visibility: hidden;\n}\nth .xbui-table-cell {\n  display: inline-block;\n  word-wrap: normal;\n  vertical-align: middle;\n}\ntd.xbui-table-expanded-cell {\n  padding: 20px 50px;\n  background: #f5f5f5;\n}\n.xbui-table-stripe .xbui-table-body tr:nth-child(2n) td,\n.xbui-table-stripe .xbui-table-fixed-body tr:nth-child(2n) td {\n  background-color: #fff;\n}\n.xbui-table-stripe .xbui-table-body tr.xbui-table-row-hover td,\n.xbui-table-stripe .xbui-table-fixed-body tr.xbui-table-row-hover td {\n  background-color: #aaaaaa;\n}\ntr.xbui-table-row-hover td {\n  background-color: #aaaaaa;\n}\n.xbui-table-large {\n  font-size: 14px;\n}\n.xbui-table-large th {\n  height: 48px;\n}\n.xbui-table-large td {\n  height: 60px;\n}\n.xbui-table-large-title,\n.xbui-table-large-footer {\n  height: 60px;\n  line-height: 60px;\n}\n.xbui-table-large .xbui-table-cell-with-expand {\n  height: 59px;\n  line-height: 59px;\n}\n.xbui-table-large .xbui-table-cell-with-expand i {\n  font-size: 16px;\n}\n.xbui-table-small th {\n  height: 32px;\n}\n.xbui-table-small td {\n  height: 40px;\n}\n.xbui-table-small-title,\n.xbui-table-small-footer {\n  height: 40px;\n  line-height: 40px;\n}\n.xbui-table-small .xbui-table-cell-with-expand {\n  height: 39px;\n  line-height: 39px;\n}\n.xbui-table-row-highlight td,\ntr.xbui-table-row-highlight.xbui-table-row-hover td,\n.xbui-table-stripe .xbui-table-body tr.xbui-table-row-highlight:nth-child(2n) td,\n.xbui-table-stripe .xbui-table-fixed-body tr.xbui-table-row-highlight:nth-child(2n) td {\n  background-color: #e5e5e5;\n}\n.xbui-table-fixed,\n.xbui-table-fixed-right {\n  position: absolute;\n  top: 0;\n  left: 0;\n  box-shadow: 2px 0 6px -2px rgba(0, 0, 0, 0.2);\n}\n.xbui-table-fixed::before,\n.xbui-table-fixed-right::before {\n  content: "";\n  width: 100%;\n  height: 1px;\n  background-color: #cccccc;\n  position: absolute;\n  left: 0;\n  bottom: 0;\n  z-index: 4;\n}\n.xbui-table-fixed-right {\n  top: 0;\n  left: auto;\n  right: 0;\n  box-shadow: -2px 0 6px -2px rgba(0, 0, 0, 0.2);\n}\n.xbui-table-fixed-right-header {\n  position: absolute;\n  top: -1px;\n  right: 0;\n  background-color: #f5f5f5;\n  border-top: 1px solid #cccccc;\n  border-bottom: 1px solid #737373;\n}\n.xbui-table-fixed-header {\n  overflow: hidden;\n}\n.xbui-table-fixed-header-with-empty .xbui-table-hidden .xbui-table-sort {\n  display: none;\n}\n.xbui-table-fixed-header-with-empty .xbui-table-hidden .xbui-table-cell span {\n  display: none;\n}\n.xbui-table-fixed-body {\n  overflow: hidden;\n  position: relative;\n  z-index: 3;\n}\n.xbui-table-fixed-shadow {\n  width: 1px;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  right: 0;\n  box-shadow: 1px 0 6px rgba(0, 0, 0, 0.2);\n  overflow: hidden;\n  z-index: 1;\n}\n.xbui-table-sort {\n  display: inline-block;\n  width: 14px;\n  height: 12px;\n  margin-top: -1px;\n  vertical-align: middle;\n  overflow: hidden;\n  cursor: pointer;\n  position: relative;\n}\n.xbui-table-sort i {\n  display: block;\n  height: 6px;\n  line-height: 6px;\n  overflow: hidden;\n  position: absolute;\n  color: #e5e5e5;\n  transition: color 0.2s ease-in-out;\n  font-size: 16px;\n}\n.xbui-table-sort i:hover {\n  color: inherit;\n}\n.xbui-table-sort i.on {\n  color: #5b8af9;\n}\n.xbui-table-sort i:first-child {\n  top: 0;\n}\n.xbui-table-sort i:last-child {\n  bottom: 0;\n}\n.xbui-table-filter {\n  display: inline-block;\n  cursor: pointer;\n  position: relative;\n}\n.xbui-table-filter i {\n  color: #e5e5e5;\n  transition: color 0.2s ease-in-out;\n}\n.xbui-table-filter i:hover {\n  color: inherit;\n}\n.xbui-table-filter i.on {\n  color: #5b8af9;\n}\n.xbui-table-filter-list {\n  padding: 8px 0 0;\n}\n.xbui-table-filter-list-item {\n  padding: 0 12px 8px;\n}\n.xbui-table-filter-list-item .ivu-checkbox-wrapper + .ivu-checkbox-wrapper {\n  margin: 0;\n}\n.xbui-table-filter-list-item label {\n  display: block;\n}\n.xbui-table-filter-list-item label > span {\n  margin-right: 4px;\n}\n.xbui-table-filter-list ul {\n  padding-bottom: 8px;\n}\n.xbui-table-filter-list .xbui-table-filter-select-item {\n  margin: 0;\n  line-height: normal;\n  padding: 7px 16px;\n  clear: both;\n  color: #333333;\n  font-size: 12px !important;\n  white-space: nowrap;\n  list-style: none;\n  cursor: pointer;\n  transition: background 0.2s ease-in-out;\n}\n.xbui-table-filter-list .xbui-table-filter-select-item:hover {\n  background: #e5e5e5;\n}\n.xbui-table-filter-list .xbui-table-filter-select-item-focus {\n  background: #e5e5e5;\n}\n.xbui-table-filter-list .xbui-table-filter-select-item-disabled {\n  color: #e5e5e5;\n  cursor: "not-allowed";\n}\n.xbui-table-filter-list .xbui-table-filter-select-item-disabled:hover {\n  color: #e5e5e5;\n  background-color: #fff;\n  cursor: "not-allowed";\n}\n.xbui-table-filter-list .xbui-table-filter-select-item-selected,\n.xbui-table-filter-list .xbui-table-filter-select-item-selected:hover {\n  color: #5b8af9;\n}\n.xbui-table-filter-list .xbui-table-filter-select-item-divided {\n  margin-top: 5px;\n  border-top: 1px solid #737373;\n}\n.xbui-table-filter-list .xbui-table-filter-select-item-divided:before {\n  content: "";\n  height: 5px;\n  display: block;\n  margin: 0 -16px;\n  background-color: #fff;\n  position: relative;\n  top: -7px;\n}\n.xbui-table-filter-list .xbui-table-large .xbui-table-filter-select-item {\n  padding: 7px 16px 8px;\n  font-size: 14px !important;\n}\n@-moz-document url-prefix() {\n  .xbui-table-filter-list .xbui-table-filter-select-item {\n    white-space: normal;\n  }\n}\n.xbui-table-filter-footer {\n  padding: 4px;\n  border-top: 1px solid #737373;\n  overflow: hidden;\n}\n.xbui-table-filter-footer button:first-child {\n  float: left;\n}\n.xbui-table-filter-footer button:last-child {\n  float: right;\n}\n.xbui-table-tip table {\n  width: 100%;\n}\n.xbui-table-tip table td {\n  text-align: center;\n}\n.xbui-table-expanded-hidden {\n  visibility: hidden;\n}\n.xbui-tablepopper {\n  min-width: 0;\n  text-align: left;\n}\n.xbui-tablepopper ."xbui-"poptip-body {\n  padding: 0;\n}\n.flex-wrp {\n  display: box;\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -moz-box;\n  display: -ms-flexbox;\n  display: flex;\n  -prefix-box-flex: 1;\n  -webkit-box-flex: 1;\n  -webkit-flex: 1;\n  -moz-box-flex: 1;\n  -ms-flex: 1;\n  flex: 1;\n  justify-content: flex-start;\n  align-items: center;\n}\n.flex-wrp-cnt {\n  justify-content: center;\n}\n.xbui-loading {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(255, 255, 255, 0.8);\n  z-index: 999;\n}\n.fixed {\n  position: fixed;\n}\n.relative {\n  position: relative!important;\n}\n.xbui-loading-wrp {\n  min-width: 240px;\n  min-height: 60px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 20px 0;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  text-align: center;\n  background-color: #fff;\n  border-radius: 10px;\n  box-shadow: 1px 0 5px rgba(0, 0, 0, 0.3);\n}\n.xbui-loading-txt {\n  display: inline-block;\n  padding-left: 5px;\n  font-size: 14px;\n  color: #737373;\n}\n.xbui-loading-rotate {\n  animation: rotate 1.5s linear infinite;\n}\n@-webkit-keyframes rotate {\n  from {\n    -webkit-transform: rotate(0deg);\n  }\n  to {\n    -webkit-transform: rotate(360deg);\n  }\n}\n@keyframes rotate {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n.xbui-radio-focus {\n  z-index: 1;\n}\n.xbui-radio-group {\n  display: inline-block;\n  font-size: 14px;\n  vertical-align: middle;\n}\n.xbui-radio-group-vertical .xbui-radio-wrapper {\n  display: block;\n  height: 30px;\n  line-height: 30px;\n}\n.xbui-radio-wrapper {\n  font-size: 14px;\n  vertical-align: middle;\n  display: inline-block;\n  position: relative;\n  white-space: nowrap;\n  margin-right: 8px;\n  cursor: pointer;\n}\n.xbui-radio-wrapper-disabled {\n  cursor: "not-allowed";\n}\n.xbui-radio {\n  display: inline-block;\n  margin-right: 4px;\n  white-space: nowrap;\n  position: relative;\n  line-height: 1;\n  vertical-align: middle;\n  cursor: pointer;\n}\n.xbui-radio:hover .xbui-radio-inner {\n  border-color: #bcbcbc;\n}\n.xbui-radio-inner {\n  display: inline-block;\n  width: 14px;\n  height: 14px;\n  position: relative;\n  top: 0;\n  left: 0;\n  background-color: #fff;\n  border: 1px solid #cccccc;\n  border-radius: 50%;\n  transition: all 0.2s ease-in-out;\n}\n.xbui-radio-inner:after {\n  position: absolute;\n  width: 8px;\n  height: 8px;\n  left: 3px;\n  top: 3px;\n  border-radius: 6px;\n  display: table;\n  border-top: 0;\n  border-left: 0;\n  content: " ";\n  background-color: #fff;\n  opacity: 0;\n  transition: all 0.2s ease-in-out;\n  transform: scale(0);\n}\n.xbui-radio-large {\n  font-size: 18px;\n}\n.xbui-radio-large .xbui-radio-inner {\n  width: 16px;\n  height: 16px;\n}\n.xbui-radio-large .xbui-radio-inner:after {\n  width: 10px;\n  height: 10px;\n}\n.xbui-radio-large.xbui-radio-wrapper,\n.xbui-radio-large .xbui-radio-wrapper {\n  font-size: 18px;\n}\n.xbui-radio-small .xbui-radio-inner {\n  width: 12px;\n  height: 12px;\n}\n.xbui-radio-small .xbui-radio-inner:after {\n  width: 6px;\n  height: 6px;\n}\n.xbui-radio-input {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  z-index: 1;\n  opacity: 0;\n  cursor: pointer;\n}\n.xbui-radio-checked .xbui-radio-inner {\n  border-color: #1890ff;\n  background: #1890ff;\n}\n.xbui-radio-checked .xbui-radio-inner:after {\n  opacity: 1;\n  transform: scale(1);\n  transition: all 0.2s ease-in-out;\n}\n.xbui-radio-checked:hover .xbui-radio-inner {\n  border-color: #1890ff;\n}\n.xbui-radio-disabled {\n  cursor: "not-allowed";\n}\n.xbui-radio-disabled .xbui-radio-input {\n  cursor: "not-allowed";\n}\n.xbui-radio-disabled:hover .xbui-radio-inner {\n  border-color: #cccccc;\n}\n.xbui-radio-disabled .xbui-radio-inner {\n  border-color: #cccccc;\n  background-color: #e5e5e5;\n}\n.xbui-radio-disabled .xbui-radio-inner:after {\n  background-color: #fff;\n}\n.xbui-radio-disabled .xbui-radio-disabled + span {\n  color: #ccc;\n}\nspan.xbui-radio + * {\n  margin-left: 2px;\n  margin-right: 2px;\n}\n.xbui-radio-group-button {\n  font-size: 0;\n  -webkit-text-size-adjust: none;\n}\n.xbui-radio-group-button .xbui-radio {\n  width: 0;\n  margin-right: 0;\n}\n.xbui-radio-group-button .xbui-radio-wrapper {\n  display: inline-block;\n  height: 32px;\n  line-height: 30px;\n  margin: 0;\n  padding: 0 15px;\n  font-size: 14px;\n  color: #737373;\n  transition: all 0.2s ease-in-out;\n  cursor: pointer;\n  border: 1px solid #cccccc;\n  border-left: 0;\n  background: #fff;\n  position: relative;\n}\n.xbui-radio-group-button .xbui-radio-wrapper > span {\n  margin-left: 0;\n}\n.xbui-radio-group-button .xbui-radio-wrapper:before,\n.xbui-radio-group-button .xbui-radio-wrapper:after {\n  content: "";\n  display: block;\n  position: absolute;\n  width: 1px;\n  height: 100%;\n  left: -1px;\n  top: 0;\n  background: #cccccc;\n  transition: all 0.2s ease-in-out;\n}\n.xbui-radio-group-button .xbui-radio-wrapper:after {\n  height: 36px;\n  left: -1px;\n  top: -3px;\n  background: rgba(24, 144, 255, 0.2);\n  opacity: 0;\n}\n.xbui-radio-group-button .xbui-radio-wrapper:first-child {\n  border-radius: 4px 0 0 4px;\n  border-left: 1px solid #cccccc;\n}\n.xbui-radio-group-button .xbui-radio-wrapper:first-child:before,\n.xbui-radio-group-button .xbui-radio-wrapper:first-child:after {\n  display: none;\n}\n.xbui-radio-group-button .xbui-radio-wrapper:last-child {\n  border-radius: 0 4px 4px 0;\n}\n.xbui-radio-group-button .xbui-radio-wrapper:first-child:last-child {\n  border-radius: 4px;\n}\n.xbui-radio-group-button .xbui-radio-wrapper:hover {\n  position: relative;\n  color: #1890ff;\n}\n.xbui-radio-group-button .xbui-radio-wrapper:hover .xbui-radio {\n  background-color: black;\n}\n.xbui-radio-group-button .xbui-radio-wrapper .xbui-radio-inner,\n.xbui-radio-group-button .xbui-radio-wrapper input {\n  opacity: 0;\n  width: 0;\n  height: 0;\n}\n.xbui-radio-group-button .xbui-radio-wrapper-checked {\n  background: #1890ff;\n  border-color: #1890ff;\n  color: #fff;\n  z-index: 1;\n}\n.xbui-radio-group-button .xbui-radio-wrapper-checked:before {\n  background: #1890ff;\n  opacity: 0.1;\n}\n.xbui-radio-group-button .xbui-radio-wrapper-checked:first-child {\n  border-color: #1890ff;\n}\n.xbui-radio-group-button .xbui-radio-wrapper-checked:hover {\n  border-color: #46a6ff;\n  color: #46a6ff;\n}\n.xbui-radio-group-button .xbui-radio-wrapper-checked:active {\n  border-color: #1789f2;\n  color: #1789f2;\n}\n.xbui-radio-group-button .xbui-radio-wrapper-disabled {\n  border-color: #cccccc;\n  background-color: #cccccc;\n  cursor: "not-allowed";\n  color: #ccc;\n}\n.xbui-radio-group-button .xbui-radio-wrapper-disabled:first-child,\n.xbui-radio-group-button .xbui-radio-wrapper-disabled:hover {\n  border-color: #cccccc;\n  background-color: #cccccc;\n  color: #ccc;\n}\n.xbui-radio-group-button .xbui-radio-wrapper-disabled:first-child {\n  border-left-color: #cccccc;\n}\n.xbui-radio-group-button .xbui-radio-wrapper-disabled.xbui-radio-wrapper-checked {\n  color: #fff;\n  background-color: #cccccc;\n  border-color: #cccccc;\n}\n.xbui-radio-group-button.xbui-radio-group-large .xbui-radio-wrapper {\n  height: 36px;\n  line-height: 34px;\n  font-size: 18px;\n}\n.xbui-radio-group-button.xbui-radio-group-large .xbui-radio-wrapper:after {\n  height: 40px;\n}\n.xbui-radio-group-button.xbui-radio-group-small .xbui-radio-wrapper {\n  height: 24px;\n  line-height: 22px;\n  padding: 0 12px;\n  font-size: 24px;\n}\n.xbui-radio-group-button.xbui-radio-group-small .xbui-radio-wrapper:after {\n  height: 28px;\n}\n.xbui-radio-group-button.xbui-radio-group-small .xbui-radio-wrapper:first-child {\n  border-radius: 3px 0 0 3px;\n}\n.xbui-radio-group-button.xbui-radio-group-small .xbui-radio-wrapper:last-child {\n  border-radius: 0 3px 3px 0;\n}\n.xbui-radio-border {\n  background: #fff;\n  border-radius: 4px;\n  border: 1px solid #cccccc;\n  padding: 5px 10px;\n}\n.xbui-radio-border.xbui-radio-wrapper-checked {\n  background: #eff3fe;\n  border-color: #1890ff;\n  color: #333333;\n}\n.xbui-search-btn-div {\n  width: 260px;\n  position: relative;\n}\n.xbui-search-btn-input {\n  background-color: #fff;\n  background-image: none;\n  border-top-left-radius: 3px;\n  border-bottom-left-radius: 3px;\n  border: 1px solid #cccccc;\n  box-sizing: border-box;\n  color: #333333;\n  display: inline-block;\n  width: calc(100% - 46px);\n  height: 100%;\n  font-size: 14px;\n  vertical-align: top;\n  border-right: none;\n  outline-color: transparent;\n  float: left;\n}\n.xbui-search-btn-div-large {\n  height: 40px;\n}\n.xbui-search-btn-div-large .xbui-search-btn-input {\n  padding: 0 15px;\n}\n.xbui-search-btn-div-medium {\n  height: 32px;\n}\n.xbui-search-btn-div-medium .xbui-search-btn-input {\n  padding: 0 12px;\n}\n.xbui-search-btn-div-small {\n  height: 28px;\n}\n.xbui-search-btn-div-small .xbui-search-btn-input {\n  padding: 0 10px;\n}\n.xbui-search-btn-icon-div {\n  border-top-right-radius: 3px;\n  border-bottom-right-radius: 3px;\n  width: 46px;\n  height: 100%;\n  padding: 0 12px;\n  box-sizing: border-box;\n  text-align: center;\n  vertical-align: top;\n  cursor: pointer;\n  float: left;\n  display: flex;\n  justify-content: center;\n  align-items: Center;\n}\n.xbui-search-btn-icon-show {\n  background: #5b8af9;\n  color: #fff;\n  border: 1px solid #5b8af9;\n}\n.xbui-search-btn-icon-hidden {\n  border: 1px solid #cccccc;\n  border-left: none;\n}\n',""])},function(t,e){t.exports=function(t){return"string"!=typeof t?t:(/^['"].*['"]$/.test(t)&&(t=t.slice(1,-1)),/["'() \t\n]/.test(t)?'"'+t.replace(/"/g,'\\"').replace(/\n/g,"\\n")+'"':t)}},function(t,e,n){t.exports=n.p+"static/icomoon.06b8133.ttf"},function(t,e,n){t.exports=n.p+"static/icomoon.5f83c23.woff"},function(t,e,n){t.exports=n.p+"static/icomoon.08fd8f3.svg"},function(t,e,n){var r={"./xb-button/index.ts":94,"./xb-checkbox-group/index.ts":147,"./xb-checkbox/index.ts":96,"./xb-color/index.ts":214,"./xb-form-item/index.ts":216,"./xb-form/index.ts":250,"./xb-icon/index.ts":34,"./xb-input-number/index.ts":253,"./xb-loading/index.ts":255,"./xb-message-tips/index.ts":257,"./xb-poptip/index.ts":158,"./xb-popup-window/index.ts":261,"./xb-radio-group/index.ts":264,"./xb-radio/index.ts":266,"./xb-search-btn/index.ts":268,"./xb-table/index.ts":270,"./xb-text/index.ts":361,"./xb-ueditor/index.ts":363};function o(t){var e=i(t);return n(e)}function i(t){var e=r[t];if(!(e+1)){var n=new Error("Cannot find module '"+t+"'");throw n.code="MODULE_NOT_FOUND",n}return e}o.keys=function(){return Object.keys(r)},o.resolve=i,t.exports=o,o.id=206},function(t,e,n){"use strict";n.r(e);var r=n(124),o=n(50);for(var i in o)"default"!==i&&function(t){n.d(e,t,function(){return o[t]})}(i);var a=n(0),u=Object(a.a)(o.default,r.a,r.b,!1,null,null,null);u.options.__file="packages/xb-button/src/xb-button.vue",e.default=u.exports},function(t,e,n){"use strict";e.__esModule=!0,e.i18n=e.use=e.t=void 0;var r=a(n(209)),o=a(n(5)),i=a(n(210));function a(t){return t&&t.__esModule?t:{default:t}}var u=(0,a(n(211)).default)(),c=r.default,s=!1,l=function(){var t=Object.getPrototypeOf(o.default).$t;if("function"==typeof t&&o.default.locale)return s||(s=!0,o.default.locale(o.default.config.lang,(0,i.default)(c,o.default.locale(o.default.config.lang)||{},{clone:!0}))),t.apply(this,arguments)},f=e.t=function(t,e){var n=l.apply(this,arguments);if(null!==n&&void 0!==n)return n;for(var r=t.split("."),o=c,i=0,a=r.length;i<a;i++){if(n=o[r[i]],i===a-1)return u(n,e);if(!n)return"";o=n}return""},d=e.use=function(t){c=t||c},p=e.i18n=function(t){l=t||l};e.default={use:d,t:f,i18n:p}},function(t,e,n){"use strict";e.__esModule=!0,e.default={xb:{popupWidow:{okText:"确定",cancelText:"取消"},loading:{loadTxt:"页面加载中…"}}}},function(t,e,n){"use strict";n.r(e);var r=function(t){return function(t){return!!t&&"object"==typeof t}(t)&&!function(t){var e=Object.prototype.toString.call(t);return"[object RegExp]"===e||"[object Date]"===e||function(t){return t.$$typeof===o}(t)}(t)};var o="function"==typeof Symbol&&Symbol.for?Symbol.for("react.element"):60103;function i(t,e){return!1!==e.clone&&e.isMergeableObject(t)?u(function(t){return Array.isArray(t)?[]:{}}(t),t,e):t}function a(t,e,n){return t.concat(e).map(function(t){return i(t,n)})}function u(t,e,n){(n=n||{}).arrayMerge=n.arrayMerge||a,n.isMergeableObject=n.isMergeableObject||r;var o=Array.isArray(e);return o===Array.isArray(t)?o?n.arrayMerge(t,e,n):function(t,e,n){var r={};return n.isMergeableObject(t)&&Object.keys(t).forEach(function(e){r[e]=i(t[e],n)}),Object.keys(e).forEach(function(o){n.isMergeableObject(e[o])&&t[o]?r[o]=u(t[o],e[o],n):r[o]=i(e[o],n)}),r}(t,e,n):i(e,n)}u.all=function(t,e){if(!Array.isArray(t))throw new Error("first argument should be an array");return t.reduce(function(t,n){return u(t,n,e)},{})};var c=u;e.default=c},function(t,e,n){"use strict";e.__esModule=!0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},o=n(95),i=/(%|)\{([0-9a-zA-Z_]+)\}/g;e.default=function(){return function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];return 1===e.length&&"object"===r(e[0])&&(e=e[0]),e&&e.hasOwnProperty||(e={}),t.replace(i,function(n,r,i,a){var u;return"{"===t[a-1]&&"}"===t[a+n.length]?i:null===(u=(0,o.hasOwn)(e,i)?e[i]:null)||void 0===u?"":u})}}},function(t,e,n){"use strict";n.r(e);var r=n(134),o=n(52);for(var i in o)"default"!==i&&function(t){n.d(e,t,function(){return o[t]})}(i);var a=n(0),u=Object(a.a)(o.default,r.a,r.b,!1,null,null,null);u.options.__file="packages/xb-checkbox/src/xb-checkbox-group.vue",e.default=u.exports},function(t,e,n){"use strict";n.r(e);var r=n(136),o=n(54);for(var i in o)"default"!==i&&function(t){n.d(e,t,function(){return o[t]})}(i);var a=n(0),u=Object(a.a)(o.default,r.a,r.b,!1,null,null,null);u.options.__file="packages/xb-checkbox/src/xb-checkbox.vue",e.default=u.exports},function(t,e,n){"use strict";e.__esModule=!0,e.xbColor=void 0;var r=function(t){return t&&t.__esModule?t:{default:t}}(n(215));e.default=r.default;e.xbColor={install:function(t){t.component("XbColor",r.default)}}},function(t,e,n){"use strict";n.r(e);var r=n(139),o=n(56);for(var i in o)"default"!==i&&function(t){n.d(e,t,function(){return o[t]})}(i);var a=n(0),u=Object(a.a)(o.default,r.a,r.b,!1,null,null,null);u.options.__file="packages/xb-color/src/xb-color.vue",e.default=u.exports},function(t,e,n){"use strict";e.__esModule=!0,e.xbFormItem=void 0;var r=function(t){return t&&t.__esModule?t:{default:t}}(n(217));e.default=r.default;e.xbFormItem={install:function(t){t.component("XbFormItem",r.default)}}},function(t,e,n){"use strict";n.r(e);var r=n(121),o=n(58);for(var i in o)"default"!==i&&function(t){n.d(e,t,function(){return o[t]})}(i);var a=n(0),u=Object(a.a)(o.default,r.a,r.b,!1,null,null,null);u.options.__file="packages/xb-form-item/src/xb-form-item.vue",e.default=u.exports},function(t,e,n){t.exports={default:n(219),__esModule:!0}},function(t,e,n){n(220),t.exports=n(21).Object.assign},function(t,e,n){var r=n(97);r(r.S+r.F,"Object",{assign:n(223)})},function(t,e,n){var r=n(222);t.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,o){return t.call(e,n,r,o)}}return function(){return t.apply(e,arguments)}}},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,e,n){"use strict";var r=n(30),o=n(104),i=n(33),a=n(153),u=n(151),c=Object.assign;t.exports=!c||n(23)(function(){var t={},e={},n=Symbol(),r="abcdefghijklmnopqrst";return t[n]=7,r.split("").forEach(function(t){e[t]=t}),7!=c({},t)[n]||Object.keys(c({},e)).join("")!=r})?function(t,e){for(var n=a(t),c=arguments.length,s=1,l=o.f,f=i.f;c>s;)for(var d,p=u(arguments[s++]),h=l?r(p).concat(l(p)):r(p),v=h.length,b=0;v>b;)f.call(p,d=h[b++])&&(n[d]=p[d]);return n}:c},function(t,e,n){var r=n(15),o=n(225),i=n(226);t.exports=function(t){return function(e,n,a){var u,c=r(e),s=o(c.length),l=i(a,s);if(t&&n!=n){for(;s>l;)if((u=c[l++])!=u)return!0}else for(;s>l;l++)if((t||l in c)&&c[l]===n)return t||l||0;return!t&&-1}}},function(t,e,n){var r=n(100),o=Math.min;t.exports=function(t){return t>0?o(r(t),9007199254740991):0}},function(t,e,n){var r=n(100),o=Math.max,i=Math.min;t.exports=function(t,e){return(t=r(t))<0?o(t+e,0):i(t,e)}},function(t,e,n){t.exports={default:n(228),__esModule:!0}},function(t,e,n){n(229),n(235),t.exports=n(107).f("iterator")},function(t,e,n){"use strict";var r=n(230)(!0);n(154)(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,e=this._t,n=this._i;return n>=e.length?{value:void 0,done:!0}:(t=r(e,n),this._i+=t.length,{value:t,done:!1})})},function(t,e,n){var r=n(100),o=n(99);t.exports=function(t){return function(e,n){var i,a,u=String(o(e)),c=r(n),s=u.length;return c<0||c>=s?t?"":void 0:(i=u.charCodeAt(c))<55296||i>56319||c+1===s||(a=u.charCodeAt(c+1))<56320||a>57343?t?u.charAt(c):i:t?u.slice(c,c+2):a-56320+(i-55296<<10)+65536}}},function(t,e,n){"use strict";var r=n(156),o=n(29),i=n(106),a={};n(12)(a,n(16)("iterator"),function(){return this}),t.exports=function(t,e,n){t.prototype=r(a,{next:o(1,n)}),i(t,e+" Iterator")}},function(t,e,n){var r=n(13),o=n(28),i=n(30);t.exports=n(14)?Object.defineProperties:function(t,e){o(t);for(var n,a=i(e),u=a.length,c=0;u>c;)r.f(t,n=a[c++],e[n]);return t}},function(t,e,n){var r=n(6).document;t.exports=r&&r.documentElement},function(t,e,n){var r=n(8),o=n(153),i=n(101)("IE_PROTO"),a=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=o(t),r(t,i)?t[i]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?a:null}},function(t,e,n){n(236);for(var r=n(6),o=n(12),i=n(105),a=n(16)("toStringTag"),u="CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,TextTrackList,TouchList".split(","),c=0;c<u.length;c++){var s=u[c],l=r[s],f=l&&l.prototype;f&&!f[a]&&o(f,a,s),i[s]=i.Array}},function(t,e,n){"use strict";var r=n(237),o=n(238),i=n(105),a=n(15);t.exports=n(154)(Array,"Array",function(t,e){this._t=a(t),this._i=0,this._k=e},function(){var t=this._t,e=this._k,n=this._i++;return!t||n>=t.length?(this._t=void 0,o(1)):o(0,"keys"==e?n:"values"==e?t[n]:[n,t[n]])},"values"),i.Arguments=i.Array,r("keys"),r("values"),r("entries")},function(t,e){t.exports=function(){}},function(t,e){t.exports=function(t,e){return{value:e,done:!!t}}},function(t,e,n){t.exports={default:n(240),__esModule:!0}},function(t,e,n){n(241),n(247),n(248),n(249),t.exports=n(21).Symbol},function(t,e,n){"use strict";var r=n(6),o=n(8),i=n(14),a=n(97),u=n(155),c=n(242).KEY,s=n(23),l=n(102),f=n(106),d=n(32),p=n(16),h=n(107),v=n(108),b=n(243),y=n(244),g=n(28),m=n(22),x=n(15),_=n(98),w=n(29),k=n(156),C=n(245),O=n(246),j=n(13),S=n(30),E=O.f,A=j.f,P=C.f,$=r.Symbol,T=r.JSON,M=T&&T.stringify,I=p("_hidden"),R=p("toPrimitive"),D={}.propertyIsEnumerable,z=l("symbol-registry"),N=l("symbols"),F=l("op-symbols"),L=Object.prototype,B="function"==typeof $,W=r.QObject,V=!W||!W.prototype||!W.prototype.findChild,H=i&&s(function(){return 7!=k(A({},"a",{get:function(){return A(this,"a",{value:7}).a}})).a})?function(t,e,n){var r=E(L,e);r&&delete L[e],A(t,e,n),r&&t!==L&&A(L,e,r)}:A,q=function(t){var e=N[t]=k($.prototype);return e._k=t,e},U=B&&"symbol"==typeof $.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof $},X=function(t,e,n){return t===L&&X(F,e,n),g(t),e=_(e,!0),g(n),o(N,e)?(n.enumerable?(o(t,I)&&t[I][e]&&(t[I][e]=!1),n=k(n,{enumerable:w(0,!1)})):(o(t,I)||A(t,I,w(1,{})),t[I][e]=!0),H(t,e,n)):A(t,e,n)},G=function(t,e){g(t);for(var n,r=b(e=x(e)),o=0,i=r.length;i>o;)X(t,n=r[o++],e[n]);return t},J=function(t){var e=D.call(this,t=_(t,!0));return!(this===L&&o(N,t)&&!o(F,t))&&(!(e||!o(this,t)||!o(N,t)||o(this,I)&&this[I][t])||e)},K=function(t,e){if(t=x(t),e=_(e,!0),t!==L||!o(N,e)||o(F,e)){var n=E(t,e);return!n||!o(N,e)||o(t,I)&&t[I][e]||(n.enumerable=!0),n}},Z=function(t){for(var e,n=P(x(t)),r=[],i=0;n.length>i;)o(N,e=n[i++])||e==I||e==c||r.push(e);return r},Y=function(t){for(var e,n=t===L,r=P(n?F:x(t)),i=[],a=0;r.length>a;)!o(N,e=r[a++])||n&&!o(L,e)||i.push(N[e]);return i};B||(u(($=function(){if(this instanceof $)throw TypeError("Symbol is not a constructor!");var t=d(arguments.length>0?arguments[0]:void 0),e=function(n){this===L&&e.call(F,n),o(this,I)&&o(this[I],t)&&(this[I][t]=!1),H(this,t,w(1,n))};return i&&V&&H(L,t,{configurable:!0,set:e}),q(t)}).prototype,"toString",function(){return this._k}),O.f=K,j.f=X,n(157).f=C.f=Z,n(33).f=J,n(104).f=Y,i&&!n(31)&&u(L,"propertyIsEnumerable",J,!0),h.f=function(t){return q(p(t))}),a(a.G+a.W+a.F*!B,{Symbol:$});for(var Q="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),tt=0;Q.length>tt;)p(Q[tt++]);for(var et=S(p.store),nt=0;et.length>nt;)v(et[nt++]);a(a.S+a.F*!B,"Symbol",{for:function(t){return o(z,t+="")?z[t]:z[t]=$(t)},keyFor:function(t){if(!U(t))throw TypeError(t+" is not a symbol!");for(var e in z)if(z[e]===t)return e},useSetter:function(){V=!0},useSimple:function(){V=!1}}),a(a.S+a.F*!B,"Object",{create:function(t,e){return void 0===e?k(t):G(k(t),e)},defineProperty:X,defineProperties:G,getOwnPropertyDescriptor:K,getOwnPropertyNames:Z,getOwnPropertySymbols:Y}),T&&a(a.S+a.F*(!B||s(function(){var t=$();return"[null]"!=M([t])||"{}"!=M({a:t})||"{}"!=M(Object(t))})),"JSON",{stringify:function(t){for(var e,n,r=[t],o=1;arguments.length>o;)r.push(arguments[o++]);if(n=e=r[1],(m(e)||void 0!==t)&&!U(t))return y(e)||(e=function(t,e){if("function"==typeof n&&(e=n.call(this,t,e)),!U(e))return e}),r[1]=e,M.apply(T,r)}}),$.prototype[R]||n(12)($.prototype,R,$.prototype.valueOf),f($,"Symbol"),f(Math,"Math",!0),f(r.JSON,"JSON",!0)},function(t,e,n){var r=n(32)("meta"),o=n(22),i=n(8),a=n(13).f,u=0,c=Object.isExtensible||function(){return!0},s=!n(23)(function(){return c(Object.preventExtensions({}))}),l=function(t){a(t,r,{value:{i:"O"+ ++u,w:{}}})},f=t.exports={KEY:r,NEED:!1,fastKey:function(t,e){if(!o(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!i(t,r)){if(!c(t))return"F";if(!e)return"E";l(t)}return t[r].i},getWeak:function(t,e){if(!i(t,r)){if(!c(t))return!0;if(!e)return!1;l(t)}return t[r].w},onFreeze:function(t){return s&&f.NEED&&c(t)&&!i(t,r)&&l(t),t}}},function(t,e,n){var r=n(30),o=n(104),i=n(33);t.exports=function(t){var e=r(t),n=o.f;if(n)for(var a,u=n(t),c=i.f,s=0;u.length>s;)c.call(t,a=u[s++])&&e.push(a);return e}},function(t,e,n){var r=n(152);t.exports=Array.isArray||function(t){return"Array"==r(t)}},function(t,e,n){var r=n(15),o=n(157).f,i={}.toString,a="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return a&&"[object Window]"==i.call(t)?function(t){try{return o(t)}catch(t){return a.slice()}}(t):o(r(t))}},function(t,e,n){var r=n(33),o=n(29),i=n(15),a=n(98),u=n(8),c=n(148),s=Object.getOwnPropertyDescriptor;e.f=n(14)?s:function(t,e){if(t=i(t),e=a(e,!0),c)try{return s(t,e)}catch(t){}if(u(t,e))return o(!r.f.call(t,e),t[e])}},function(t,e){},function(t,e,n){n(108)("asyncIterator")},function(t,e,n){n(108)("observable")},function(t,e,n){"use strict";e.__esModule=!0,e.xbForm=void 0;var r=function(t){return t&&t.__esModule?t:{default:t}}(n(251));e.default=r.default;e.xbForm={install:function(t){t.component("XbForm",r.default)}}},function(t,e,n){"use strict";n.r(e);var r=n(135),o=n(60);for(var i in o)"default"!==i&&function(t){n.d(e,t,function(){return o[t]})}(i);var a=n(0),u=Object(a.a)(o.default,r.a,r.b,!1,null,null,null);u.options.__file="packages/xb-form/src/xb-form.vue",e.default=u.exports},function(t,e,n){"use strict";n.r(e);var r=n(119),o=n(62);for(var i in o)"default"!==i&&function(t){n.d(e,t,function(){return o[t]})}(i);var a=n(0),u=Object(a.a)(o.default,r.a,r.b,!1,null,null,null);u.options.__file="packages/xb-icon/src/xb-icon.vue",e.default=u.exports},function(t,e,n){"use strict";e.__esModule=!0,e.xbInputNumber=void 0;var r=function(t){return t&&t.__esModule?t:{default:t}}(n(254));e.default=r.default;e.xbInputNumber={install:function(t){t.component("XbInputNumber",r.default)}}},function(t,e,n){"use strict";n.r(e);var r=n(132),o=n(64);for(var i in o)"default"!==i&&function(t){n.d(e,t,function(){return o[t]})}(i);var a=n(0),u=Object(a.a)(o.default,r.a,r.b,!1,null,null,null);u.options.__file="packages/xb-input-number/src/xb-input-number.vue",e.default=u.exports},function(t,e,n){"use strict";e.__esModule=!0,e.xbLoading=void 0;var r=function(t){return t&&t.__esModule?t:{default:t}}(n(256));e.default=r.default;e.xbLoading={install:function(t){t.component("XbLoading",r.default)}}},function(t,e,n){"use strict";n.r(e);var r=n(130),o=n(66);for(var i in o)"default"!==i&&function(t){n.d(e,t,function(){return o[t]})}(i);var a=n(0),u=Object(a.a)(o.default,r.a,r.b,!1,null,null,null);u.options.__file="packages/xb-loading/src/xb-loading.vue",e.default=u.exports},function(t,e,n){"use strict";e.__esModule=!0;var r=function(t){return t&&t.__esModule?t:{default:t}}(n(258));e.default=r.default},function(t,e,n){"use strict";e.__esModule=!0;var r=i(n(5)),o=i(n(259));function i(t){return t&&t.__esModule?t:{default:t}}var a={show:!1,text:"",type:"info",duration:2e3,closable:!1},u={info:{name:"info-circle",color:"#1890FF"},success:{name:"success-circle",color:"#52C41A"},warning:{name:"warning-circle",color:"#FAAD14"},error:{name:"error-circle",color:"#F5222D"},loading:{name:"info-circle",color:"blue"}},c=r.default.extend(o.default);c.prototype.close=function(){var t=this,e=this;this.$on("afterLeave",function(){e.$el&&e.$el.parentNode&&e.$el.parentNode.removeChild(e.$el),t.$destroy()}),e.show=!1};var s=new(function(){function t(){}return t.prototype.getContainer=function(){if(0==document.querySelectorAll(".xbui-messageBox").length){var t=document.createElement("div");t.className="xbui-messageBox",document.body.appendChild(t)}},t.prototype.createElement=function(t,e){this.getContainer(),(e=Object.assign({},a,e)).type=u[t];var n,o=document.querySelectorAll(".xbui-messageBox"),i=new c({el:document.createElement("div"),data:e});o[0].appendChild(i.$el),r.default.nextTick(function(){i.show=!0,n=setTimeout(function(){i.close()},e.duration)}),i.$on("close",function(){i.close(),clearTimeout(n)})},t}()),l={name:"messageBox",message:function(t,e){return s.createElement(t,e)},info:function(t){return this.message("info",t)},success:function(t){return this.message("success",t)},error:function(t){return this.message("error",t)},warning:function(t){return this.message("warning",t)}};e.default=l},function(t,e,n){"use strict";n.r(e);var r=n(137),o=n(68);for(var i in o)"default"!==i&&function(t){n.d(e,t,function(){return o[t]})}(i);var a=n(0),u=Object(a.a)(o.default,r.a,r.b,!1,null,null,null);u.options.__file="packages/xb-message-tips/src/xb-message-tips.vue",e.default=u.exports},function(t,e,n){"use strict";n.r(e);var r=n(120),o=n(70);for(var i in o)"default"!==i&&function(t){n.d(e,t,function(){return o[t]})}(i);var a=n(0),u=Object(a.a)(o.default,r.a,r.b,!1,null,null,null);u.options.__file="packages/xb-poptip/src/xb-poptip.vue",e.default=u.exports},function(t,e,n){"use strict";e.__esModule=!0,e.xbPopupWindow=void 0;var r=function(t){return t&&t.__esModule?t:{default:t}}(n(262));e.default=r.default;e.xbPopupWindow={install:function(t){t.component("XbPopupWindow",r.default)}}},function(t,e,n){"use strict";n.r(e);var r=n(129),o=n(72);for(var i in o)"default"!==i&&function(t){n.d(e,t,function(){return o[t]})}(i);var a=n(0),u=Object(a.a)(o.default,r.a,r.b,!1,null,null,null);u.options.__file="packages/xb-popup-window/src/xb-popup-window.vue",e.default=u.exports},function(t,e,n){"use strict";e.__esModule=!0,e.default={methods:{checkScrollBar:function(){var t=window.innerWidth;if(!t){var e=document.documentElement.getBoundingClientRect();t=e.right-Math.abs(e.left)}this.bodyIsOverflowing=document.body.clientWidth<t,this.bodyIsOverflowing&&(this.scrollBarWidth=this.getScrollBarSize())},setScrollBar:function(){this.bodyIsOverflowing&&void 0!==this.scrollBarWidth&&(document.body.style.paddingRight=this.scrollBarWidth+"px")},resetScrollBar:function(){document.body.style.paddingRight=""},addScrollEffect:function(){this.checkScrollBar(),this.setScrollBar(),document.body.style.overflow="hidden"},removeScrollEffect:function(){document.body.style.overflow="",this.resetScrollBar()},getScrollBarSize:function(t){var e;if(t||void 0===e){var n=document.createElement("div");n.style.width="100%",n.style.height="200px";var r=document.createElement("div"),o=r.style;o.position="absolute",o.top="0",o.left="0",o.pointerEvents="none",o.visibility="hidden",o.width="200px",o.height="150px",o.overflow="hidden",r.appendChild(n),document.body.appendChild(r);var i=n.offsetWidth;r.style.overflow="scroll";var a=n.offsetWidth;i===a&&(a=r.clientWidth),document.body.removeChild(r),e=i-a}return e}}}},function(t,e,n){"use strict";e.__esModule=!0,e.xbRadioGroup=void 0;var r=function(t){return t&&t.__esModule?t:{default:t}}(n(265));e.default=r.default;e.xbRadioGroup={install:function(t){t.component("XbRadioGroup",r.default)}}},function(t,e,n){"use strict";n.r(e);var r=n(128),o=n(74);for(var i in o)"default"!==i&&function(t){n.d(e,t,function(){return o[t]})}(i);var a=n(0),u=Object(a.a)(o.default,r.a,r.b,!1,null,null,null);u.options.__file="packages/xb-radio/src/xb-radio-group.vue",e.default=u.exports},function(t,e,n){"use strict";e.__esModule=!0,e.xbRadio=void 0;var r=function(t){return t&&t.__esModule?t:{default:t}}(n(267));e.default=r.default;e.xbRadio={install:function(t){t.component("XbRadio",r.default)}}},function(t,e,n){"use strict";n.r(e);var r=n(127),o=n(76);for(var i in o)"default"!==i&&function(t){n.d(e,t,function(){return o[t]})}(i);var a=n(0),u=Object(a.a)(o.default,r.a,r.b,!1,null,null,null);u.options.__file="packages/xb-radio/src/xb-radio.vue",e.default=u.exports},function(t,e,n){"use strict";e.__esModule=!0,e.xbSearchBtn=void 0;var r=function(t){return t&&t.__esModule?t:{default:t}}(n(269));e.default=r.default;e.xbSearchBtn={install:function(t){t.component("XbSearchBtn",r.default)}}},function(t,e,n){"use strict";n.r(e);var r=n(126),o=n(78);for(var i in o)"default"!==i&&function(t){n.d(e,t,function(){return o[t]})}(i);var a=n(0),u=Object(a.a)(o.default,r.a,r.b,!1,null,null,null);u.options.__file="packages/xb-search-btn/src/xb-search-btn.vue",e.default=u.exports},function(t,e,n){"use strict";e.__esModule=!0,e.xbTable=void 0;var r=function(t){return t&&t.__esModule?t:{default:t}}(n(271));e.default=r.default;e.xbTable={install:function(t){t.component("XbTable",r.default)}}},function(t,e,n){"use strict";n.r(e);var r=n(125),o=n(80);for(var i in o)"default"!==i&&function(t){n.d(e,t,function(){return o[t]})}(i);var a=n(0),u=Object(a.a)(o.default,r.a,r.b,!1,null,null,null);u.options.__file="packages/xb-table/src/xb-table.vue",e.default=u.exports},function(t,e,n){"use strict";n.r(e);var r=n(140),o=n(82);for(var i in o)"default"!==i&&function(t){n.d(e,t,function(){return o[t]})}(i);var a=n(0),u=Object(a.a)(o.default,r.a,r.b,!1,null,null,null);u.options.__file="packages/xb-table/src/xb-table-head.vue",e.default=u.exports},function(t,e,n){"use strict";e.__esModule=!0,e.default={name:"TableRenderHeader",functional:!0,props:{render:Function,column:Object,index:Number},render:function(t,e){var n={column:e.props.column,index:e.props.index};return e.props.render(t,n)}}},function(t,e,n){"use strict";n.r(e);var r=n(141),o=n(84);for(var i in o)"default"!==i&&function(t){n.d(e,t,function(){return o[t]})}(i);var a=n(0),u=Object(a.a)(o.default,r.a,r.b,!1,null,null,null);u.options.__file="packages/xb-table/src/xb-table-body.vue",e.default=u.exports},function(t,e,n){"use strict";n.r(e);var r=n(143),o=n(86);for(var i in o)"default"!==i&&function(t){n.d(e,t,function(){return o[t]})}(i);var a=n(0),u=Object(a.a)(o.default,r.a,r.b,!1,null,null,null);u.options.__file="packages/xb-table/src/xb-table-tr.vue",e.default=u.exports},function(t,e,n){"use strict";n.r(e);var r=n(142),o=n(88);for(var i in o)"default"!==i&&function(t){n.d(e,t,function(){return o[t]})}(i);var a=n(0),u=Object(a.a)(o.default,r.a,r.b,!1,null,null,null);u.options.__file="packages/xb-table/src/xb-cell.vue",e.default=u.exports},function(t,e,n){"use strict";e.__esModule=!0,e.default=function(t,e,n,a){void 0===a&&(a=!1);var u;n=Object.assign({},i,n);var c=[],s=[];t?(u=t.map(function(t){return"string"==typeof t?t:(a||s.push(void 0!==t.title?t.title:t.key),t.key)}),s.length>0&&o(c,s,n)):(u=[],e.forEach(function(t){Array.isArray(t)||(u=u.concat(Object.keys(t)))}),u.length>0&&(u=u.filter(function(t,e,n){return n.indexOf(t)===e}),a||o(c,u,n)));Array.isArray(e)&&e.forEach(function(t){Array.isArray(t)||(t=u.map(function(e){return void 0!==t[e]?t[e]:""})),o(c,t,n)});return c.join(r)};var r="\r\n",o=function(t,e,n){var r=n.separator,o=n.quoted,i=e.map(function(t){return o?'"'+(t="string"==typeof t?t.replace(/"/g,'"'):t)+'"':t});t.push(i.join(r))},i={separator:",",quoted:!1}},function(t,e,n){var r=n(279),o=n(309),i=n(166),a=n(311),u=n(321),c=n(324),s=n(325),l=n(326),f=n(328),d=n(329),p=n(330),h=n(117),v=n(335),b=n(336),y=n(342),g=n(112),m=n(169),x=n(344),_=n(24),w=n(346),k=n(111),C=1,O=2,j=4,S="[object Arguments]",E="[object Function]",A="[object GeneratorFunction]",P="[object Object]",$={};$[S]=$["[object Array]"]=$["[object ArrayBuffer]"]=$["[object DataView]"]=$["[object Boolean]"]=$["[object Date]"]=$["[object Float32Array]"]=$["[object Float64Array]"]=$["[object Int8Array]"]=$["[object Int16Array]"]=$["[object Int32Array]"]=$["[object Map]"]=$["[object Number]"]=$[P]=$["[object RegExp]"]=$["[object Set]"]=$["[object String]"]=$["[object Symbol]"]=$["[object Uint8Array]"]=$["[object Uint8ClampedArray]"]=$["[object Uint16Array]"]=$["[object Uint32Array]"]=!0,$["[object Error]"]=$[E]=$["[object WeakMap]"]=!1,t.exports=function t(e,n,T,M,I,R){var D,z=n&C,N=n&O,F=n&j;if(T&&(D=I?T(e,M,I,R):T(e)),void 0!==D)return D;if(!_(e))return e;var L=g(e);if(L){if(D=v(e),!z)return s(e,D)}else{var B=h(e),W=B==E||B==A;if(m(e))return c(e,z);if(B==P||B==S||W&&!I){if(D=N||W?{}:y(e),!z)return N?f(e,u(D,e)):l(e,a(D,e))}else{if(!$[B])return I?e:{};D=b(e,B,z)}}R||(R=new r);var V=R.get(e);if(V)return V;if(R.set(e,D),w(e))return e.forEach(function(r){D.add(t(r,n,T,r,e,R))}),D;if(x(e))return e.forEach(function(r,o){D.set(o,t(r,n,T,o,e,R))}),D;var H=F?N?p:d:N?keysIn:k,q=L?void 0:H(e);return o(q||e,function(r,o){q&&(r=e[o=r]),i(D,o,t(r,n,T,o,e,R))}),D}},function(t,e,n){var r=n(35),o=n(285),i=n(286),a=n(287),u=n(288),c=n(289);function s(t){var e=this.__data__=new r(t);this.size=e.size}s.prototype.clear=o,s.prototype.delete=i,s.prototype.get=a,s.prototype.has=u,s.prototype.set=c,t.exports=s},function(t,e){t.exports=function(){this.__data__=[],this.size=0}},function(t,e,n){var r=n(36),o=Array.prototype.splice;t.exports=function(t){var e=this.__data__,n=r(e,t);return!(n<0||(n==e.length-1?e.pop():o.call(e,n,1),--this.size,0))}},function(t,e,n){var r=n(36);t.exports=function(t){var e=this.__data__,n=r(e,t);return n<0?void 0:e[n][1]}},function(t,e,n){var r=n(36);t.exports=function(t){return r(this.__data__,t)>-1}},function(t,e,n){var r=n(36);t.exports=function(t,e){var n=this.__data__,o=r(n,t);return o<0?(++this.size,n.push([t,e])):n[o][1]=e,this}},function(t,e,n){var r=n(35);t.exports=function(){this.__data__=new r,this.size=0}},function(t,e){t.exports=function(t){var e=this.__data__,n=e.delete(t);return this.size=e.size,n}},function(t,e){t.exports=function(t){return this.__data__.get(t)}},function(t,e){t.exports=function(t){return this.__data__.has(t)}},function(t,e,n){var r=n(35),o=n(109),i=n(296),a=200;t.exports=function(t,e){var n=this.__data__;if(n instanceof r){var u=n.__data__;if(!o||u.length<a-1)return u.push([t,e]),this.size=++n.size,this;n=this.__data__=new i(u)}return n.set(t,e),this.size=n.size,this}},function(t,e,n){var r=n(163),o=n(293),i=n(24),a=n(165),u=/^\[object .+?Constructor\]$/,c=Function.prototype,s=Object.prototype,l=c.toString,f=s.hasOwnProperty,d=RegExp("^"+l.call(f).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");t.exports=function(t){return!(!i(t)||o(t))&&(r(t)?d:u).test(a(t))}},function(t,e,n){var r=n(110),o=Object.prototype,i=o.hasOwnProperty,a=o.toString,u=r?r.toStringTag:void 0;t.exports=function(t){var e=i.call(t,u),n=t[u];try{t[u]=void 0;var r=!0}catch(t){}var o=a.call(t);return r&&(e?t[u]=n:delete t[u]),o}},function(t,e){var n=Object.prototype.toString;t.exports=function(t){return n.call(t)}},function(t,e,n){var r=n(294),o=function(){var t=/[^.]+$/.exec(r&&r.keys&&r.keys.IE_PROTO||"");return t?"Symbol(src)_1."+t:""}();t.exports=function(t){return!!o&&o in t}},function(t,e,n){var r=n(4)["__core-js_shared__"];t.exports=r},function(t,e){t.exports=function(t,e){return null==t?void 0:t[e]}},function(t,e,n){var r=n(297),o=n(304),i=n(306),a=n(307),u=n(308);function c(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}c.prototype.clear=r,c.prototype.delete=o,c.prototype.get=i,c.prototype.has=a,c.prototype.set=u,t.exports=c},function(t,e,n){var r=n(298),o=n(35),i=n(109);t.exports=function(){this.size=0,this.__data__={hash:new r,map:new(i||o),string:new r}}},function(t,e,n){var r=n(299),o=n(300),i=n(301),a=n(302),u=n(303);function c(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}c.prototype.clear=r,c.prototype.delete=o,c.prototype.get=i,c.prototype.has=a,c.prototype.set=u,t.exports=c},function(t,e,n){var r=n(38);t.exports=function(){this.__data__=r?r(null):{},this.size=0}},function(t,e){t.exports=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e}},function(t,e,n){var r=n(38),o="__lodash_hash_undefined__",i=Object.prototype.hasOwnProperty;t.exports=function(t){var e=this.__data__;if(r){var n=e[t];return n===o?void 0:n}return i.call(e,t)?e[t]:void 0}},function(t,e,n){var r=n(38),o=Object.prototype.hasOwnProperty;t.exports=function(t){var e=this.__data__;return r?void 0!==e[t]:o.call(e,t)}},function(t,e,n){var r=n(38),o="__lodash_hash_undefined__";t.exports=function(t,e){var n=this.__data__;return this.size+=this.has(t)?0:1,n[t]=r&&void 0===e?o:e,this}},function(t,e,n){var r=n(39);t.exports=function(t){var e=r(this,t).delete(t);return this.size-=e?1:0,e}},function(t,e){t.exports=function(t){var e=typeof t;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==t:null===t}},function(t,e,n){var r=n(39);t.exports=function(t){return r(this,t).get(t)}},function(t,e,n){var r=n(39);t.exports=function(t){return r(this,t).has(t)}},function(t,e,n){var r=n(39);t.exports=function(t,e){var n=r(this,t),o=n.size;return n.set(t,e),this.size+=n.size==o?0:1,this}},function(t,e){t.exports=function(t,e){for(var n=-1,r=null==t?0:t.length;++n<r&&!1!==e(t[n],n,t););return t}},function(t,e,n){var r=n(9),o=function(){try{var t=r(Object,"defineProperty");return t({},"",{}),t}catch(t){}}();t.exports=o},function(t,e,n){var r=n(40),o=n(111);t.exports=function(t,e){return t&&r(e,o(e),t)}},function(t,e){t.exports=function(t,e){for(var n=-1,r=Array(t);++n<t;)r[n]=e(n);return r}},function(t,e,n){var r=n(314),o=n(25),i=Object.prototype,a=i.hasOwnProperty,u=i.propertyIsEnumerable,c=r(function(){return arguments}())?r:function(t){return o(t)&&a.call(t,"callee")&&!u.call(t,"callee")};t.exports=c},function(t,e,n){var r=n(37),o=n(25),i="[object Arguments]";t.exports=function(t){return o(t)&&r(t)==i}},function(t,e){t.exports=function(){return!1}},function(t,e){var n=9007199254740991,r=/^(?:0|[1-9]\d*)$/;t.exports=function(t,e){var o=typeof t;return!!(e=null==e?n:e)&&("number"==o||"symbol"!=o&&r.test(t))&&t>-1&&t%1==0&&t<e}},function(t,e,n){var r=n(318),o=n(113),i=n(114),a=i&&i.isTypedArray,u=a?o(a):r;t.exports=u},function(t,e,n){var r=n(37),o=n(170),i=n(25),a={};a["[object Float32Array]"]=a["[object Float64Array]"]=a["[object Int8Array]"]=a["[object Int16Array]"]=a["[object Int32Array]"]=a["[object Uint8Array]"]=a["[object Uint8ClampedArray]"]=a["[object Uint16Array]"]=a["[object Uint32Array]"]=!0,a["[object Arguments]"]=a["[object Array]"]=a["[object ArrayBuffer]"]=a["[object Boolean]"]=a["[object DataView]"]=a["[object Date]"]=a["[object Error]"]=a["[object Function]"]=a["[object Map]"]=a["[object Number]"]=a["[object Object]"]=a["[object RegExp]"]=a["[object Set]"]=a["[object String]"]=a["[object WeakMap]"]=!1,t.exports=function(t){return i(t)&&o(t.length)&&!!a[r(t)]}},function(t,e,n){var r=n(115),o=n(320),i=Object.prototype.hasOwnProperty;t.exports=function(t){if(!r(t))return o(t);var e=[];for(var n in Object(t))i.call(t,n)&&"constructor"!=n&&e.push(n);return e}},function(t,e,n){var r=n(171)(Object.keys,Object);t.exports=r},function(t,e,n){var r=n(40),o=n(173);t.exports=function(t,e){return t&&r(e,o(e),t)}},function(t,e,n){var r=n(24),o=n(115),i=n(323),a=Object.prototype.hasOwnProperty;t.exports=function(t){if(!r(t))return i(t);var e=o(t),n=[];for(var u in t)("constructor"!=u||!e&&a.call(t,u))&&n.push(u);return n}},function(t,e){t.exports=function(t){var e=[];if(null!=t)for(var n in Object(t))e.push(n);return e}},function(t,e,n){(function(t){var r=n(4),o=e&&!e.nodeType&&e,i=o&&"object"==typeof t&&t&&!t.nodeType&&t,a=i&&i.exports===o?r.Buffer:void 0,u=a?a.allocUnsafe:void 0;t.exports=function(t,e){if(e)return t.slice();var n=t.length,r=u?u(n):new t.constructor(n);return t.copy(r),r}}).call(this,n(27)(t))},function(t,e){t.exports=function(t,e){var n=-1,r=t.length;for(e||(e=Array(r));++n<r;)e[n]=t[n];return e}},function(t,e,n){var r=n(40),o=n(116);t.exports=function(t,e){return r(t,o(t),e)}},function(t,e){t.exports=function(t,e){for(var n=-1,r=null==t?0:t.length,o=0,i=[];++n<r;){var a=t[n];e(a,n,t)&&(i[o++]=a)}return i}},function(t,e,n){var r=n(40),o=n(175);t.exports=function(t,e){return r(t,o(t),e)}},function(t,e,n){var r=n(178),o=n(116),i=n(111);t.exports=function(t){return r(t,i,o)}},function(t,e,n){var r=n(178),o=n(175),i=n(173);t.exports=function(t){return r(t,i,o)}},function(t,e,n){var r=n(9)(n(4),"DataView");t.exports=r},function(t,e,n){var r=n(9)(n(4),"Promise");t.exports=r},function(t,e,n){var r=n(9)(n(4),"Set");t.exports=r},function(t,e,n){var r=n(9)(n(4),"WeakMap");t.exports=r},function(t,e){var n=Object.prototype.hasOwnProperty;t.exports=function(t){var e=t.length,r=new t.constructor(e);return e&&"string"==typeof t[0]&&n.call(t,"index")&&(r.index=t.index,r.input=t.input),r}},function(t,e,n){var r=n(118),o=n(338),i=n(339),a=n(340),u=n(341),c="[object Boolean]",s="[object Date]",l="[object Map]",f="[object Number]",d="[object RegExp]",p="[object Set]",h="[object String]",v="[object Symbol]",b="[object ArrayBuffer]",y="[object DataView]",g="[object Float32Array]",m="[object Float64Array]",x="[object Int8Array]",_="[object Int16Array]",w="[object Int32Array]",k="[object Uint8Array]",C="[object Uint8ClampedArray]",O="[object Uint16Array]",j="[object Uint32Array]";t.exports=function(t,e,n){var S=t.constructor;switch(e){case b:return r(t);case c:case s:return new S(+t);case y:return o(t,n);case g:case m:case x:case _:case w:case k:case C:case O:case j:return u(t,n);case l:return new S;case f:case h:return new S(t);case d:return i(t);case p:return new S;case v:return a(t)}}},function(t,e,n){var r=n(4).Uint8Array;t.exports=r},function(t,e,n){var r=n(118);t.exports=function(t,e){var n=e?r(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.byteLength)}},function(t,e){var n=/\w*$/;t.exports=function(t){var e=new t.constructor(t.source,n.exec(t));return e.lastIndex=t.lastIndex,e}},function(t,e,n){var r=n(110),o=r?r.prototype:void 0,i=o?o.valueOf:void 0;t.exports=function(t){return i?Object(i.call(t)):{}}},function(t,e,n){var r=n(118);t.exports=function(t,e){var n=e?r(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.length)}},function(t,e,n){var r=n(343),o=n(177),i=n(115);t.exports=function(t){return"function"!=typeof t.constructor||i(t)?{}:r(o(t))}},function(t,e,n){var r=n(24),o=Object.create,i=function(){function t(){}return function(e){if(!r(e))return{};if(o)return o(e);t.prototype=e;var n=new t;return t.prototype=void 0,n}}();t.exports=i},function(t,e,n){var r=n(345),o=n(113),i=n(114),a=i&&i.isMap,u=a?o(a):r;t.exports=u},function(t,e,n){var r=n(117),o=n(25),i="[object Map]";t.exports=function(t){return o(t)&&r(t)==i}},function(t,e,n){var r=n(347),o=n(113),i=n(114),a=i&&i.isSet,u=a?o(a):r;t.exports=u},function(t,e,n){var r=n(117),o=n(25),i="[object Set]";t.exports=function(t){return o(t)&&r(t)==i}},function(t,e,n){"use strict";function r(t){var e=navigator.userAgent;return"ie"===t?!!(e.indexOf("compatible")>-1&&e.indexOf("MSIE")>-1)&&(new RegExp("MSIE (\\d+\\.\\d+);").test(e),parseFloat(RegExp.$1)):e.indexOf(t)>-1}e.__esModule=!0,e.default={_isIE11:function(){var t=0,e=/MSIE (\d+\.\d+);/.test(navigator.userAgent),n=!!navigator.userAgent.match(/Trident\/7.0/),r=navigator.userAgent.indexOf("rv:11.0");return e&&(t=Number(RegExp.$1)),-1!==navigator.appVersion.indexOf("MSIE 10")&&(t=10),n&&-1!==r&&(t=11),11===t},_isEdge:function(){return/Edge/.test(navigator.userAgent)},_getDownloadUrl:function(t){if(window.Blob&&window.URL&&window.URL.createObjectURL){var e=new Blob(["\ufeff"+t],{type:"text/csv"});return URL.createObjectURL(e)}return"data:attachment/csv;charset=utf-8,\ufeff"+encodeURIComponent(t)},download:function(t,e){if(r("ie")&&r("ie")<10){var n=window.top.open("about:blank","_blank");n.document.write(e),n.document.close(),n.document.execCommand("SaveAs",t),n.close()}else if(10===r("ie")||this._isIE11()||this._isEdge()){var o=new Blob(["\ufeff"+e],{type:"text/csv"});navigator.msSaveBlob(o,t)}else{var i=document.createElement("a");i.download=t,i.href=this._getDownloadUrl(e),document.body.appendChild(i),i.click(),document.body.removeChild(i)}}}},function(t,e,n){"use strict";var r=n(179).forEach,o=n(350),i=n(351),a=n(352),u=n(353),c=n(354),s=n(180),l=n(355),f=n(357),d=n(358),p=n(359);function h(t){return Array.isArray(t)||void 0!==t.length}function v(t){if(Array.isArray(t))return t;var e=[];return r(t,function(t){e.push(t)}),e}function b(t){return t&&1===t.nodeType}function y(t,e,n){var r=t[e];return void 0!==r&&null!==r||void 0===n?r:n}t.exports=function(t){var e;if((t=t||{}).idHandler)e={get:function(e){return t.idHandler.get(e,!0)},set:t.idHandler.set};else{var n=a(),g=u({idGenerator:n,stateHandler:f});e=g}var m=t.reporter;m||(m=c(!1===m));var x=y(t,"batchProcessor",l({reporter:m})),_={};_.callOnAdd=!!y(t,"callOnAdd",!0),_.debug=!!y(t,"debug",!1);var w,k=i(e),C=o({stateHandler:f}),O=y(t,"strategy","object"),j={reporter:m,batchProcessor:x,stateHandler:f,idHandler:e};if("scroll"===O&&(s.isLegacyOpera()?(m.warn("Scroll strategy is not supported on legacy Opera. Changing to object strategy."),O="object"):s.isIE(9)&&(m.warn("Scroll strategy is not supported on IE9. Changing to object strategy."),O="object")),"scroll"===O)w=p(j);else{if("object"!==O)throw new Error("Invalid strategy name: "+O);w=d(j)}var S={};return{listenTo:function(t,n,o){function i(t){var e=k.get(t);r(e,function(e){e(t)})}function a(t,e,n){k.add(e,n),t&&n(e)}if(o||(o=n,n=t,t={}),!n)throw new Error("At least one element required.");if(!o)throw new Error("Listener required.");if(b(n))n=[n];else{if(!h(n))return m.error("Invalid arguments. Must be a DOM element or a collection of DOM elements.");n=v(n)}var u=0,c=y(t,"callOnAdd",_.callOnAdd),s=y(t,"onReady",function(){}),l=y(t,"debug",_.debug);r(n,function(t){f.getState(t)||(f.initState(t),e.set(t));var d=e.get(t);if(l&&m.log("Attaching listener to element",d,t),!C.isDetectable(t))return l&&m.log(d,"Not detectable."),C.isBusy(t)?(l&&m.log(d,"System busy making it detectable"),a(c,t,o),S[d]=S[d]||[],void S[d].push(function(){++u===n.length&&s()})):(l&&m.log(d,"Making detectable..."),C.markBusy(t,!0),w.makeDetectable({debug:l},t,function(t){if(l&&m.log(d,"onElementDetectable"),f.getState(t)){C.markAsDetectable(t),C.markBusy(t,!1),w.addListener(t,i),a(c,t,o);var e=f.getState(t);if(e&&e.startSize){var p=t.offsetWidth,h=t.offsetHeight;e.startSize.width===p&&e.startSize.height===h||i(t)}S[d]&&r(S[d],function(t){t()})}else l&&m.log(d,"Element uninstalled before being detectable.");delete S[d],++u===n.length&&s()}));l&&m.log(d,"Already detecable, adding listener."),a(c,t,o),u++}),u===n.length&&s()},removeListener:k.removeListener,removeAllListeners:k.removeAllListeners,uninstall:function(t){if(!t)return m.error("At least one element is required.");if(b(t))t=[t];else{if(!h(t))return m.error("Invalid arguments. Must be a DOM element or a collection of DOM elements.");t=v(t)}r(t,function(t){k.removeAllListeners(t),w.uninstall(t),f.cleanState(t)})}}}},function(t,e,n){"use strict";t.exports=function(t){var e=t.stateHandler.getState;return{isDetectable:function(t){var n=e(t);return n&&!!n.isDetectable},markAsDetectable:function(t){e(t).isDetectable=!0},isBusy:function(t){return!!e(t).busy},markBusy:function(t,n){e(t).busy=!!n}}}},function(t,e,n){"use strict";t.exports=function(t){var e={};function n(n){var r=t.get(n);return void 0===r?[]:e[r]||[]}return{get:n,add:function(n,r){var o=t.get(n);e[o]||(e[o]=[]),e[o].push(r)},removeListener:function(t,e){for(var r=n(t),o=0,i=r.length;o<i;++o)if(r[o]===e){r.splice(o,1);break}},removeAllListeners:function(t){var e=n(t);e&&(e.length=0)}}}},function(t,e,n){"use strict";t.exports=function(){var t=1;return{generate:function(){return t++}}}},function(t,e,n){"use strict";t.exports=function(t){var e=t.idGenerator,n=t.stateHandler.getState;return{get:function(t){var e=n(t);return e&&void 0!==e.id?e.id:null},set:function(t){var r=n(t);if(!r)throw new Error("setId required the element to have a resize detection state.");var o=e.generate();return r.id=o,o}}}},function(t,e,n){"use strict";t.exports=function(t){function e(){}var n={log:e,warn:e,error:e};if(!t&&window.console){var r=function(t,e){t[e]=function(){var t=console[e];if(t.apply)t.apply(console,arguments);else for(var n=0;n<arguments.length;n++)t(arguments[n])}};r(n,"log"),r(n,"warn"),r(n,"error")}return n}},function(t,e,n){"use strict";var r=n(356);function o(){var t={},e=0,n=0,r=0;return{add:function(o,i){i||(i=o,o=0),o>n?n=o:o<r&&(r=o),t[o]||(t[o]=[]),t[o].push(i),e++},process:function(){for(var e=r;e<=n;e++)for(var o=t[e],i=0;i<o.length;i++)(0,o[i])()},size:function(){return e}}}t.exports=function(t){var e=(t=t||{}).reporter,n=r.getOption(t,"async",!0),i=r.getOption(t,"auto",!0);i&&!n&&(e&&e.warn("Invalid options combination. auto=true and async=false is invalid. Setting async=true."),n=!0);var a,u=o(),c=!1;function s(){for(c=!0;u.size();){var t=u;u=o(),t.process()}c=!1}function l(){a=function(t){return function(t){return setTimeout(t,0)}(t)}(s)}return{add:function(t,e){!c&&i&&n&&0===u.size()&&l(),u.add(t,e)},force:function(t){c||(void 0===t&&(t=n),a&&(function(t){clearTimeout(t)}(a),a=null),t?l():s())}}}},function(t,e,n){"use strict";(t.exports={}).getOption=function(t,e,n){var r=t[e];if((void 0===r||null===r)&&void 0!==n)return n;return r}},function(t,e,n){"use strict";var r="_erd";function o(t){return t[r]}t.exports={initState:function(t){return t[r]={},o(t)},getState:o,cleanState:function(t){delete t[r]}}},function(t,e,n){"use strict";var r=n(180);t.exports=function(t){var e=(t=t||{}).reporter,n=t.batchProcessor,o=t.stateHandler.getState;if(!e)throw new Error("Missing required dependency: reporter.");function i(t){return o(t).object}return{makeDetectable:function(t,i,a){a||(a=i,i=t,t=null),(t=t||{}).debug,r.isIE(8)?a(i):function(t,i){var a="display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; border: none; padding: 0; margin: 0; opacity: 0; z-index: -1000; pointer-events: none;",u=!1,c=window.getComputedStyle(t),s=t.offsetWidth,l=t.offsetHeight;function f(){function n(){if("static"===c.position){t.style.position="relative";var n=function(t,e,n,r){var o=n[r];"auto"!==o&&"0"!==function(t){return t.replace(/[^-\d\.]/g,"")}(o)&&(t.warn("An element that is positioned static has style."+r+"="+o+" which is ignored due to the static positioning. The element will need to be positioned relative, so the style."+r+" will be set to 0. Element: ",e),e.style[r]=0)};n(e,t,c,"top"),n(e,t,c,"right"),n(e,t,c,"bottom"),n(e,t,c,"left")}}""!==c.position&&(n(),u=!0);var s=document.createElement("object");s.style.cssText=a,s.tabIndex=-1,s.type="text/html",s.onload=function(){u||n(),function t(e,n){e.contentDocument?n(e.contentDocument):setTimeout(function(){t(e,n)},100)}(this,function(e){i(t)})},r.isIE()||(s.data="about:blank"),t.appendChild(s),o(t).object=s,r.isIE()&&(s.data="about:blank")}o(t).startSize={width:s,height:l},n?n.add(f):f()}(i,a)},addListener:function(t,e){if(!i(t))throw new Error("Element is not detectable by this strategy.");function n(){e(t)}r.isIE(8)?(o(t).object={proxy:n},t.attachEvent("onresize",n)):i(t).contentDocument.defaultView.addEventListener("resize",n)},uninstall:function(t){r.isIE(8)?t.detachEvent("onresize",o(t).object.proxy):t.removeChild(i(t)),delete o(t).object}}}},function(t,e,n){"use strict";var r=n(179).forEach;t.exports=function(t){var e=(t=t||{}).reporter,n=t.batchProcessor,o=t.stateHandler.getState,i=(t.stateHandler.hasState,t.idHandler);if(!n)throw new Error("Missing required dependency: batchProcessor");if(!e)throw new Error("Missing required dependency: reporter.");var a=function(){var t=document.createElement("div");t.style.cssText="position: absolute; width: 1000px; height: 1000px; visibility: hidden; margin: 0; padding: 0;";var e=document.createElement("div");e.style.cssText="position: absolute; width: 500px; height: 500px; overflow: scroll; visibility: none; top: -1500px; left: -1500px; visibility: hidden; margin: 0; padding: 0;",e.appendChild(t),document.body.insertBefore(e,document.body.firstChild);var n=500-e.clientWidth,r=500-e.clientHeight;return document.body.removeChild(e),{width:n,height:r}}(),u="erd_scroll_detection_container";function c(t,n,r){if(t.addEventListener)t.addEventListener(n,r);else{if(!t.attachEvent)return e.error("[scroll] Don't know how to add event listeners.");t.attachEvent("on"+n,r)}}function s(t,n,r){if(t.removeEventListener)t.removeEventListener(n,r);else{if(!t.detachEvent)return e.error("[scroll] Don't know how to remove event listeners.");t.detachEvent("on"+n,r)}}function l(t){return o(t).container.childNodes[0].childNodes[0].childNodes[0]}function f(t){return o(t).container.childNodes[0].childNodes[0].childNodes[1]}return function(t,e){if(!document.getElementById(t)){var n=e+"_animation",r=e+"_animation_active",o="/* Created by the element-resize-detector library. */\n";o+="."+e+" > div::-webkit-scrollbar { display: none; }\n\n",o+="."+r+" { -webkit-animation-duration: 0.1s; animation-duration: 0.1s; -webkit-animation-name: "+n+"; animation-name: "+n+"; }\n",o+="@-webkit-keyframes "+n+" { 0% { opacity: 1; } 50% { opacity: 0; } 100% { opacity: 1; } }\n",function(e,n){n=n||function(t){document.head.appendChild(t)};var r=document.createElement("style");r.innerHTML=e,r.id=t,n(r)}(o+="@keyframes "+n+" { 0% { opacity: 1; } 50% { opacity: 0; } 100% { opacity: 1; } }")}}("erd_scroll_detection_scrollbar_style",u),{makeDetectable:function(t,s,d){function p(){if(t.debug){var n=Array.prototype.slice.call(arguments);if(n.unshift(i.get(s),"Scroll: "),e.log.apply)e.log.apply(null,n);else for(var r=0;r<n.length;r++)e.log(n[r])}}function h(t){var e=o(t).container.childNodes[0],n=window.getComputedStyle(e);return!n.width||-1===n.width.indexOf("px")}function v(){var t=window.getComputedStyle(s),e={};return e.position=t.position,e.width=s.offsetWidth,e.height=s.offsetHeight,e.top=t.top,e.right=t.right,e.bottom=t.bottom,e.left=t.left,e.widthCSS=t.width,e.heightCSS=t.height,e}function b(){if(p("storeStyle invoked."),o(s)){var t=v();o(s).style=t}else p("Aborting because element has been uninstalled")}function y(t,e,n){o(t).lastWidth=e,o(t).lastHeight=n}function g(){return 2*a.width+1}function m(){return 2*a.height+1}function x(t){return t+10+g()}function _(t){return t+10+m()}function w(t,e,n){var r=l(t),o=f(t),i=x(e),a=_(n),u=function(t){return 2*t+g()}(e),c=function(t){return 2*t+m()}(n);r.scrollLeft=i,r.scrollTop=a,o.scrollLeft=u,o.scrollTop=c}function k(){var t=o(s).container;if(!t){(t=document.createElement("div")).className=u,t.style.cssText="visibility: hidden; display: inline; width: 0px; height: 0px; z-index: -1; overflow: hidden; margin: 0; padding: 0;",o(s).container=t,function(t){t.className+=" "+u+"_animation_active"}(t),s.appendChild(t);var e=function(){o(s).onRendered&&o(s).onRendered()};c(t,"animationstart",e),o(s).onAnimationStart=e}return t}function C(){if(p("Injecting elements"),o(s)){!function(){var t=o(s).style;if("static"===t.position){s.style.position="relative";var n=function(t,e,n,r){var o=n[r];"auto"!==o&&"0"!==function(t){return t.replace(/[^-\d\.]/g,"")}(o)&&(t.warn("An element that is positioned static has style."+r+"="+o+" which is ignored due to the static positioning. The element will need to be positioned relative, so the style."+r+" will be set to 0. Element: ",e),e.style[r]=0)};n(e,s,t,"top"),n(e,s,t,"right"),n(e,s,t,"bottom"),n(e,s,t,"left")}}();var t=o(s).container;t||(t=k());var n=a.width,r=a.height,i="position: absolute; flex: none; overflow: hidden; z-index: -1; visibility: hidden; "+function(t,e,n,r){return t=t?t+"px":"0",e=e?e+"px":"0",n=n?n+"px":"0","left: "+t+"; top: "+e+"; right: "+(r=r?r+"px":"0")+"; bottom: "+n+";"}(-(1+n),-(1+r),-r,-n),l=document.createElement("div"),f=document.createElement("div"),d=document.createElement("div"),h=document.createElement("div"),v=document.createElement("div"),b=document.createElement("div");l.dir="ltr",l.style.cssText="position: absolute; flex: none; overflow: hidden; z-index: -1; visibility: hidden; width: 100%; height: 100%; left: 0px; top: 0px;",l.className=u,f.className=u,f.style.cssText=i,d.style.cssText="position: absolute; flex: none; overflow: scroll; z-index: -1; visibility: hidden; width: 100%; height: 100%;",h.style.cssText="position: absolute; left: 0; top: 0;",v.style.cssText="position: absolute; flex: none; overflow: scroll; z-index: -1; visibility: hidden; width: 100%; height: 100%;",b.style.cssText="position: absolute; width: 200%; height: 200%;",d.appendChild(h),v.appendChild(b),f.appendChild(d),f.appendChild(v),l.appendChild(f),t.appendChild(l),c(d,"scroll",y),c(v,"scroll",g),o(s).onExpandScroll=y,o(s).onShrinkScroll=g}else p("Aborting because element has been uninstalled");function y(){o(s).onExpand&&o(s).onExpand()}function g(){o(s).onShrink&&o(s).onShrink()}}function O(){function a(t,e,n){var r=function(t){return l(t).childNodes[0]}(t),o=x(e),i=_(n);r.style.width=o+"px",r.style.height=i+"px"}function u(r){var u=s.offsetWidth,l=s.offsetHeight;p("Storing current size",u,l),y(s,u,l),n.add(0,function(){if(o(s))if(c()){if(t.debug){var n=s.offsetWidth,r=s.offsetHeight;n===u&&r===l||e.warn(i.get(s),"Scroll: Size changed before updating detector elements.")}a(s,u,l)}else p("Aborting because element container has not been initialized");else p("Aborting because element has been uninstalled")}),n.add(1,function(){o(s)?c()?w(s,u,l):p("Aborting because element container has not been initialized"):p("Aborting because element has been uninstalled")}),r&&n.add(2,function(){o(s)?c()?r():p("Aborting because element container has not been initialized"):p("Aborting because element has been uninstalled")})}function c(){return!!o(s).container}function d(){p("notifyListenersIfNeeded invoked");var t=o(s);return void 0===o(s).lastNotifiedWidth&&t.lastWidth===t.startSize.width&&t.lastHeight===t.startSize.height?p("Not notifying: Size is the same as the start size, and there has been no notification yet."):t.lastWidth===t.lastNotifiedWidth&&t.lastHeight===t.lastNotifiedHeight?p("Not notifying: Size already notified"):(p("Current size not notified, notifying..."),t.lastNotifiedWidth=t.lastWidth,t.lastNotifiedHeight=t.lastHeight,void r(o(s).listeners,function(t){t(s)}))}function v(){if(p("Scroll detected."),h(s))p("Scroll event fired while unrendered. Ignoring...");else{var t=s.offsetWidth,e=s.offsetHeight;t!==o(s).lastWidth||e!==o(s).lastHeight?(p("Element size changed."),u(d)):p("Element size has not changed ("+t+"x"+e+").")}}if(p("registerListenersAndPositionElements invoked."),o(s)){o(s).onRendered=function(){if(p("startanimation triggered."),h(s))p("Ignoring since element is still unrendered...");else{p("Element rendered.");var t=l(s),e=f(s);0!==t.scrollLeft&&0!==t.scrollTop&&0!==e.scrollLeft&&0!==e.scrollTop||(p("Scrollbars out of sync. Updating detector elements..."),u(d))}},o(s).onExpand=v,o(s).onShrink=v;var b=o(s).style;a(s,b.width,b.height)}else p("Aborting because element has been uninstalled")}function j(){if(p("finalizeDomMutation invoked."),o(s)){var t=o(s).style;y(s,t.width,t.height),w(s,t.width,t.height)}else p("Aborting because element has been uninstalled")}function S(){d(s)}function E(){p("Installing..."),o(s).listeners=[],function(){var t=v();o(s).startSize={width:t.width,height:t.height},p("Element start size",o(s).startSize)}(),n.add(0,b),n.add(1,C),n.add(2,O),n.add(3,j),n.add(4,S)}d||(d=s,s=t,t=null),t=t||{},p("Making detectable..."),function(t){return!function(t){return t===t.ownerDocument.body||t.ownerDocument.body.contains(t)}(t)||null===window.getComputedStyle(t)}(s)?(p("Element is detached"),k(),p("Waiting until element is attached..."),o(s).onRendered=function(){p("Element is now attached"),E()}):E()},addListener:function(t,e){if(!o(t).listeners.push)throw new Error("Cannot add listener to an element that is not detectable.");o(t).listeners.push(e)},uninstall:function(t){var e=o(t);e&&(e.onExpandScroll&&s(l(t),"scroll",e.onExpandScroll),e.onShrinkScroll&&s(f(t),"scroll",e.onShrinkScroll),e.onAnimationStart&&s(e.container,"animationstart",e.onAnimationStart),e.container&&t.removeChild(e.container))}}}},function(t,e,n){"use strict";e.__esModule=!0,e.getRandomStr=e.convertToRows=e.getAllColumns=e.convertColumnOrder=void 0;var r=function(t){return t&&t.__esModule?t:{default:t}}(n(161));var o=function(t,e){var n=[],r=[];return t.forEach(function(t){t.fixed&&t.fixed===e?n.push(t):r.push(t)}),n.concat(r)};e.convertColumnOrder=o;var i=function t(e,n){void 0===n&&(n=!1);var o=[];return(0,r.default)(e).forEach(function(e){e.children?(n&&o.push(e),o.push.apply(o,t(e.children,n))):o.push(e)}),o};e.getAllColumns=i;e.convertToRows=function(t,e){void 0===e&&(e=!1);var n=e?"left"===e?(0,r.default)(o(t,"left")):(0,r.default)(o(t,"right")):(0,r.default)(t),a=1;n.forEach(function(t){t.level=1,function t(e,n){if(n&&(e.level=n.level+1,a<e.level&&(a=e.level)),e.children){var r=0;e.children.forEach(function(n){t(n,e),r+=n.colSpan}),e.colSpan=r}else e.colSpan=1}(t,void 0)});for(var u=[],c=0;c<a;c++)u.push([]);return i(n,!0).forEach(function(t){t.children?t.rowSpan=1:t.rowSpan=a-t.level+1,u[t.level-1].push(t)}),u};e.getRandomStr=function(t){void 0===t&&(t=32);for(var e="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890",n=e.length,r="",o=0;o<t;o++)r+=e.charAt(Math.floor(Math.random()*n));return r}},function(t,e,n){"use strict";e.__esModule=!0,e.xbText=void 0;var r=function(t){return t&&t.__esModule?t:{default:t}}(n(362));e.default=r.default;e.xbText={install:function(t){t.component("XbText",r.default)}}},function(t,e,n){"use strict";n.r(e);var r=n(123),o=n(90);for(var i in o)"default"!==i&&function(t){n.d(e,t,function(){return o[t]})}(i);var a=n(0),u=Object(a.a)(o.default,r.a,r.b,!1,null,null,null);u.options.__file="packages/xb-text/src/xb-text.vue",e.default=u.exports},function(t,e,n){"use strict";e.__esModule=!0,e.xbUeditor=void 0;var r=function(t){return t&&t.__esModule?t:{default:t}}(n(364));e.default=r.default;e.xbUeditor={install:function(t){t.component("XbUeditor",r.default)}}},function(t,e,n){"use strict";n.r(e);var r=n(122),o=n(92);for(var i in o)"default"!==i&&function(t){n.d(e,t,function(){return o[t]})}(i);var a=n(0),u=Object(a.a)(o.default,r.a,r.b,!1,null,null,null);u.options.__file="packages/xb-ueditor/src/xb-ueditor.vue",e.default=u.exports},function(t,e,n){"use strict";n.r(e);var r=n(10),o=n.n(r),i=n(3),a=n.n(i),u=/%[sdj%]/g,c=function(){};function s(){for(var t=arguments.length,e=Array(t),n=0;n<t;n++)e[n]=arguments[n];var r=1,o=e[0],i=e.length;if("function"==typeof o)return o.apply(null,e.slice(1));if("string"==typeof o){for(var a=String(o).replace(u,function(t){if("%%"===t)return"%";if(r>=i)return t;switch(t){case"%s":return String(e[r++]);case"%d":return Number(e[r++]);case"%j":try{return JSON.stringify(e[r++])}catch(t){return"[Circular]"}break;default:return t}}),c=e[r];r<i;c=e[++r])a+=" "+c;return a}return o}function l(t,e){return void 0===t||null===t||(!("array"!==e||!Array.isArray(t)||t.length)||!(!function(t){return"string"===t||"url"===t||"hex"===t||"email"===t||"pattern"===t}(e)||"string"!=typeof t||t))}function f(t,e,n){var r=0,o=t.length;!function i(a){if(a&&a.length)n(a);else{var u=r;r+=1,u<o?e(t[u],i):n([])}}([])}function d(t,e,n,r){if(e.first)return f(function(t){var e=[];return Object.keys(t).forEach(function(n){e.push.apply(e,t[n])}),e}(t),n,r);var o=e.firstFields||[];!0===o&&(o=Object.keys(t));var i=Object.keys(t),a=i.length,u=0,c=[],s=function(t){c.push.apply(c,t),++u===a&&r(c)};i.forEach(function(e){var r=t[e];-1!==o.indexOf(e)?f(r,n,s):function(t,e,n){var r=[],o=0,i=t.length;function a(t){r.push.apply(r,t),++o===i&&n(r)}t.forEach(function(t){e(t,a)})}(r,n,s)})}function p(t){return function(e){return e&&e.message?(e.field=e.field||t.fullField,e):{message:e,field:e.field||t.fullField}}}function h(t,e){if(e)for(var n in e)if(e.hasOwnProperty(n)){var r=e[n];"object"===(void 0===r?"undefined":a()(r))&&"object"===a()(t[n])?t[n]=o()({},t[n],r):t[n]=r}return t}var v=function(t,e,n,r,o,i){!t.required||n.hasOwnProperty(t.field)&&!l(e,i||t.type)||r.push(s(o.messages.required,t.fullField))};var b=function(t,e,n,r,o){(/^\s+$/.test(e)||""===e)&&r.push(s(o.messages.whitespace,t.fullField))},y={email:/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,url:new RegExp("^(?!mailto:)(?:(?:http|https|ftp)://|//)(?:\\S+(?::\\S*)?@)?(?:(?:(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[0-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]+-?)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]+-?)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))|localhost)(?::\\d{2,5})?(?:(/|\\?|#)[^\\s]*)?$","i"),hex:/^#?([a-f0-9]{6}|[a-f0-9]{3})$/i},g={integer:function(t){return g.number(t)&&parseInt(t,10)===t},float:function(t){return g.number(t)&&!g.integer(t)},array:function(t){return Array.isArray(t)},regexp:function(t){if(t instanceof RegExp)return!0;try{return!!new RegExp(t)}catch(t){return!1}},date:function(t){return"function"==typeof t.getTime&&"function"==typeof t.getMonth&&"function"==typeof t.getYear},number:function(t){return!isNaN(t)&&"number"==typeof t},object:function(t){return"object"===(void 0===t?"undefined":a()(t))&&!g.array(t)},method:function(t){return"function"==typeof t},email:function(t){return"string"==typeof t&&!!t.match(y.email)&&t.length<255},url:function(t){return"string"==typeof t&&!!t.match(y.url)},hex:function(t){return"string"==typeof t&&!!t.match(y.hex)}};var m="enum";var x={required:v,whitespace:b,type:function(t,e,n,r,o){if(t.required&&void 0===e)v(t,e,n,r,o);else{var i=t.type;["integer","float","array","regexp","object","method","email","number","date","url","hex"].indexOf(i)>-1?g[i](e)||r.push(s(o.messages.types[i],t.fullField,t.type)):i&&(void 0===e?"undefined":a()(e))!==t.type&&r.push(s(o.messages.types[i],t.fullField,t.type))}},range:function(t,e,n,r,o){var i="number"==typeof t.len,a="number"==typeof t.min,u="number"==typeof t.max,c=e,l=null,f="number"==typeof e,d="string"==typeof e,p=Array.isArray(e);if(f?l="number":d?l="string":p&&(l="array"),!l)return!1;p&&(c=e.length),d&&(c=e.replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g,"_").length),i?c!==t.len&&r.push(s(o.messages[l].len,t.fullField,t.len)):a&&!u&&c<t.min?r.push(s(o.messages[l].min,t.fullField,t.min)):u&&!a&&c>t.max?r.push(s(o.messages[l].max,t.fullField,t.max)):a&&u&&(c<t.min||c>t.max)&&r.push(s(o.messages[l].range,t.fullField,t.min,t.max))},enum:function(t,e,n,r,o){t[m]=Array.isArray(t[m])?t[m]:[],-1===t[m].indexOf(e)&&r.push(s(o.messages[m],t.fullField,t[m].join(", ")))},pattern:function(t,e,n,r,o){t.pattern&&(t.pattern instanceof RegExp?(t.pattern.lastIndex=0,t.pattern.test(e)||r.push(s(o.messages.pattern.mismatch,t.fullField,e,t.pattern))):"string"==typeof t.pattern&&(new RegExp(t.pattern).test(e)||r.push(s(o.messages.pattern.mismatch,t.fullField,e,t.pattern))))}};var _="enum";var w=function(t,e,n,r,o){var i=t.type,a=[];if(t.required||!t.required&&r.hasOwnProperty(t.field)){if(l(e,i)&&!t.required)return n();x.required(t,e,r,a,o,i),l(e,i)||x.type(t,e,r,a,o)}n(a)},k={string:function(t,e,n,r,o){var i=[];if(t.required||!t.required&&r.hasOwnProperty(t.field)){if(l(e,"string")&&!t.required)return n();x.required(t,e,r,i,o,"string"),l(e,"string")||(x.type(t,e,r,i,o),x.range(t,e,r,i,o),x.pattern(t,e,r,i,o),!0===t.whitespace&&x.whitespace(t,e,r,i,o))}n(i)},method:function(t,e,n,r,o){var i=[];if(t.required||!t.required&&r.hasOwnProperty(t.field)){if(l(e)&&!t.required)return n();x.required(t,e,r,i,o),void 0!==e&&x.type(t,e,r,i,o)}n(i)},number:function(t,e,n,r,o){var i=[];if(t.required||!t.required&&r.hasOwnProperty(t.field)){if(l(e)&&!t.required)return n();x.required(t,e,r,i,o),void 0!==e&&(x.type(t,e,r,i,o),x.range(t,e,r,i,o))}n(i)},boolean:function(t,e,n,r,o){var i=[];if(t.required||!t.required&&r.hasOwnProperty(t.field)){if(l(e)&&!t.required)return n();x.required(t,e,r,i,o),void 0!==e&&x.type(t,e,r,i,o)}n(i)},regexp:function(t,e,n,r,o){var i=[];if(t.required||!t.required&&r.hasOwnProperty(t.field)){if(l(e)&&!t.required)return n();x.required(t,e,r,i,o),l(e)||x.type(t,e,r,i,o)}n(i)},integer:function(t,e,n,r,o){var i=[];if(t.required||!t.required&&r.hasOwnProperty(t.field)){if(l(e)&&!t.required)return n();x.required(t,e,r,i,o),void 0!==e&&(x.type(t,e,r,i,o),x.range(t,e,r,i,o))}n(i)},float:function(t,e,n,r,o){var i=[];if(t.required||!t.required&&r.hasOwnProperty(t.field)){if(l(e)&&!t.required)return n();x.required(t,e,r,i,o),void 0!==e&&(x.type(t,e,r,i,o),x.range(t,e,r,i,o))}n(i)},array:function(t,e,n,r,o){var i=[];if(t.required||!t.required&&r.hasOwnProperty(t.field)){if(l(e,"array")&&!t.required)return n();x.required(t,e,r,i,o,"array"),l(e,"array")||(x.type(t,e,r,i,o),x.range(t,e,r,i,o))}n(i)},object:function(t,e,n,r,o){var i=[];if(t.required||!t.required&&r.hasOwnProperty(t.field)){if(l(e)&&!t.required)return n();x.required(t,e,r,i,o),void 0!==e&&x.type(t,e,r,i,o)}n(i)},enum:function(t,e,n,r,o){var i=[];if(t.required||!t.required&&r.hasOwnProperty(t.field)){if(l(e)&&!t.required)return n();x.required(t,e,r,i,o),e&&x[_](t,e,r,i,o)}n(i)},pattern:function(t,e,n,r,o){var i=[];if(t.required||!t.required&&r.hasOwnProperty(t.field)){if(l(e,"string")&&!t.required)return n();x.required(t,e,r,i,o),l(e,"string")||x.pattern(t,e,r,i,o)}n(i)},date:function(t,e,n,r,o){var i=[];if(t.required||!t.required&&r.hasOwnProperty(t.field)){if(l(e)&&!t.required)return n();if(x.required(t,e,r,i,o),!l(e)){var a=void 0;a="number"==typeof e?new Date(e):e,x.type(t,a,r,i,o),a&&x.range(t,a.getTime(),r,i,o)}}n(i)},url:w,hex:w,email:w,required:function(t,e,n,r,o){var i=[],u=Array.isArray(e)?"array":void 0===e?"undefined":a()(e);x.required(t,e,r,i,o,u),n(i)}};function C(){return{default:"Validation error on field %s",required:"%s is required",enum:"%s must be one of %s",whitespace:"%s cannot be empty",date:{format:"%s date %s is invalid for format %s",parse:"%s date could not be parsed, %s is invalid ",invalid:"%s date %s is invalid"},types:{string:"%s is not a %s",method:"%s is not a %s (function)",array:"%s is not an %s",object:"%s is not an %s",number:"%s is not a %s",date:"%s is not a %s",boolean:"%s is not a %s",integer:"%s is not an %s",float:"%s is not a %s",regexp:"%s is not a valid %s",email:"%s is not a valid %s",url:"%s is not a valid %s",hex:"%s is not a valid %s"},string:{len:"%s must be exactly %s characters",min:"%s must be at least %s characters",max:"%s cannot be longer than %s characters",range:"%s must be between %s and %s characters"},number:{len:"%s must equal %s",min:"%s cannot be less than %s",max:"%s cannot be greater than %s",range:"%s must be between %s and %s"},array:{len:"%s must be exactly %s in length",min:"%s cannot be less than %s in length",max:"%s cannot be greater than %s in length",range:"%s must be between %s and %s in length"},pattern:{mismatch:"%s value %s does not match pattern %s"},clone:function(){var t=JSON.parse(JSON.stringify(this));return t.clone=this.clone,t}}}var O=C();function j(t){this.rules=null,this._messages=O,this.define(t)}j.prototype={messages:function(t){return t&&(this._messages=h(C(),t)),this._messages},define:function(t){if(!t)throw new Error("Cannot configure a schema with no rules");if("object"!==(void 0===t?"undefined":a()(t))||Array.isArray(t))throw new Error("Rules must be an object");this.rules={};var e=void 0,n=void 0;for(e in t)t.hasOwnProperty(e)&&(n=t[e],this.rules[e]=Array.isArray(n)?n:[n])},validate:function(t){var e=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=arguments[2],i=t,u=n,l=r;if("function"==typeof u&&(l=u,u={}),this.rules&&0!==Object.keys(this.rules).length){if(u.messages){var f=this.messages();f===O&&(f=C()),h(f,u.messages),u.messages=f}else u.messages=this.messages();var v=void 0,b=void 0,y={};(u.keys||Object.keys(this.rules)).forEach(function(n){v=e.rules[n],b=i[n],v.forEach(function(r){var a=r;"function"==typeof a.transform&&(i===t&&(i=o()({},i)),b=i[n]=a.transform(b)),(a="function"==typeof a?{validator:a}:o()({},a)).validator=e.getValidationMethod(a),a.field=n,a.fullField=a.fullField||n,a.type=e.getType(a),a.validator&&(y[n]=y[n]||[],y[n].push({rule:a,value:b,source:i,field:n}))})});var g={};d(y,u,function(t,e){var n=t.rule,r=!("object"!==n.type&&"array"!==n.type||"object"!==a()(n.fields)&&"object"!==a()(n.defaultField));function i(t,e){return o()({},e,{fullField:n.fullField+"."+t})}function l(){var a=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];if(Array.isArray(a)||(a=[a]),a.length&&c("async-validator:",a),a.length&&n.message&&(a=[].concat(n.message)),a=a.map(p(n)),u.first&&a.length)return g[n.field]=1,e(a);if(r){if(n.required&&!t.value)return a=n.message?[].concat(n.message).map(p(n)):u.error?[u.error(n,s(u.messages.required,n.field))]:[],e(a);var l={};if(n.defaultField)for(var f in t.value)t.value.hasOwnProperty(f)&&(l[f]=n.defaultField);for(var d in l=o()({},l,t.rule.fields))if(l.hasOwnProperty(d)){var h=Array.isArray(l[d])?l[d]:[l[d]];l[d]=h.map(i.bind(null,d))}var v=new j(l);v.messages(u.messages),t.rule.options&&(t.rule.options.messages=u.messages,t.rule.options.error=u.error),v.validate(t.value,t.rule.options||u,function(t){e(t&&t.length?a.concat(t):t)})}else e(a)}r=r&&(n.required||!n.required&&t.value),n.field=t.field;var f=n.validator(n,t.value,l,t.source,u);f&&f.then&&f.then(function(){return l()},function(t){return l(t)})},function(t){!function(t){var e=void 0,n=void 0,r=[],o={};function i(t){Array.isArray(t)?r=r.concat.apply(r,t):r.push(t)}for(e=0;e<t.length;e++)i(t[e]);if(r.length)for(e=0;e<r.length;e++)o[n=r[e].field]=o[n]||[],o[n].push(r[e]);else r=null,o=null;l(r,o)}(t)})}else l&&l()},getType:function(t){if(void 0===t.type&&t.pattern instanceof RegExp&&(t.type="pattern"),"function"!=typeof t.validator&&t.type&&!k.hasOwnProperty(t.type))throw new Error(s("Unknown rule type %s",t.type));return t.type||"string"},getValidationMethod:function(t){if("function"==typeof t.validator)return t.validator;var e=Object.keys(t),n=e.indexOf("message");return-1!==n&&e.splice(n,1),1===e.length&&"required"===e[0]?k.required:k[this.getType(t)]||!1}},j.register=function(t,e){if("function"!=typeof e)throw new Error("Cannot register a validator by type, validator is not a function");k[t]=e},j.messages=O;e.default=j}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHNsaWIvdHNsaWIuZXM2LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy92dWUtcHJvcGVydHktZGVjb3JhdG9yL2xpYi92dWUtcHJvcGVydHktZGVjb3JhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2hlbHBlcnMvdHlwZW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3Jvb3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Z1ZS9kaXN0L3Z1ZS5ydW50aW1lLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdnVlLWNsYXNzLWNvbXBvbmVudC9kaXN0L3Z1ZS1jbGFzcy1jb21wb25lbnQuY29tbW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faGFzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldE5hdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9oZWxwZXJzL2V4dGVuZHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21peGlucy9lbWl0dGVyLnRzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faGlkZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1kcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2Rlc2NyaXB0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8taW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3drcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbWl4aW5zL2xvY2FsZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvYXNzaXN0LnRzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY29yZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2lzLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2ZhaWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNPYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc09iamVjdExpa2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hbi1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19wcm9wZXJ0eS1kZXNjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19saWJyYXJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdWlkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LXBpZS5qcyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy94Yi1pY29uL2luZGV4LnRzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX0xpc3RDYWNoZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hc3NvY0luZGV4T2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUdldFRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19uYXRpdmVDcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0TWFwRGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jb3B5T2JqZWN0LmpzIiwid2VicGFjazovLy8uL2V4YW1wbGVzL0FwcC52dWU/ZDVhNyIsIndlYnBhY2s6Ly8vLi9leGFtcGxlcy9BcHAudnVlPzgxYTEiLCJ3ZWJwYWNrOi8vLy4vZXhhbXBsZXMvY29tcG9uZW50cy9oZWFkZXIudnVlPzhjOTkiLCJ3ZWJwYWNrOi8vLy4vZXhhbXBsZXMvY29tcG9uZW50cy9oZWFkZXIudnVlPzkwMWUiLCJ3ZWJwYWNrOi8vLy4vZXhhbXBsZXMvY29tcG9uZW50cy9oZWFkZXIudnVlPzliNWQiLCJ3ZWJwYWNrOi8vLy4vZXhhbXBsZXMvQXBwLnZ1ZT8yNzEyIiwid2VicGFjazovLy8uL2V4YW1wbGVzL2NvbXBvbmVudHMvZGVtby1ibG9jay52dWU/OGQxYiIsIndlYnBhY2s6Ly8vLi9leGFtcGxlcy9jb21wb25lbnRzL2RlbW8tYmxvY2sudnVlPzJiZTMiLCJ3ZWJwYWNrOi8vLy4vZXhhbXBsZXMvY29tcG9uZW50cy9kZW1vLWJsb2NrLnZ1ZT9jNjE2Iiwid2VicGFjazovLy8uL3BhY2thZ2VzL3hiLWJ1dHRvbi9zcmMveGItYnV0dG9uLnZ1ZT80NDc2Iiwid2VicGFjazovLy8uL3BhY2thZ2VzL3hiLWJ1dHRvbi9zcmMveGItYnV0dG9uLnZ1ZT82YmQ1Iiwid2VicGFjazovLy8uL3BhY2thZ2VzL3hiLWNoZWNrYm94L3NyYy94Yi1jaGVja2JveC1ncm91cC52dWU/YmJiOSIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy94Yi1jaGVja2JveC9zcmMveGItY2hlY2tib3gtZ3JvdXAudnVlPzkzZDgiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMveGItY2hlY2tib3gvc3JjL3hiLWNoZWNrYm94LnZ1ZT8xZDhmIiwid2VicGFjazovLy8uL3BhY2thZ2VzL3hiLWNoZWNrYm94L3NyYy94Yi1jaGVja2JveC52dWU/ZjgyNSIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy94Yi1jb2xvci9zcmMveGItY29sb3IudnVlPzVjM2IiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMveGItY29sb3Ivc3JjL3hiLWNvbG9yLnZ1ZT82MjUzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL3hiLWZvcm0taXRlbS9zcmMveGItZm9ybS1pdGVtLnZ1ZT9lMGRjIiwid2VicGFjazovLy8uL3BhY2thZ2VzL3hiLWZvcm0taXRlbS9zcmMveGItZm9ybS1pdGVtLnZ1ZT8xMGNhIiwid2VicGFjazovLy8uL3BhY2thZ2VzL3hiLWZvcm0vc3JjL3hiLWZvcm0udnVlPzE3OTIiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMveGItZm9ybS9zcmMveGItZm9ybS52dWU/NTRmNiIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy94Yi1pY29uL3NyYy94Yi1pY29uLnZ1ZT8yNTBjIiwid2VicGFjazovLy8uL3BhY2thZ2VzL3hiLWljb24vc3JjL3hiLWljb24udnVlPzVlZGQiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMveGItaW5wdXQtbnVtYmVyL3NyYy94Yi1pbnB1dC1udW1iZXIudnVlPzRkYjciLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMveGItaW5wdXQtbnVtYmVyL3NyYy94Yi1pbnB1dC1udW1iZXIudnVlPzU0ZjciLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMveGItbG9hZGluZy9zcmMveGItbG9hZGluZy52dWU/OTRjMiIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy94Yi1sb2FkaW5nL3NyYy94Yi1sb2FkaW5nLnZ1ZT8zNjBmIiwid2VicGFjazovLy8uL3BhY2thZ2VzL3hiLW1lc3NhZ2UtdGlwcy9zcmMveGItbWVzc2FnZS10aXBzLnZ1ZT9kMmZlIiwid2VicGFjazovLy8uL3BhY2thZ2VzL3hiLW1lc3NhZ2UtdGlwcy9zcmMveGItbWVzc2FnZS10aXBzLnZ1ZT8zZGJlIiwid2VicGFjazovLy8uL3BhY2thZ2VzL3hiLXBvcHRpcC9zcmMveGItcG9wdGlwLnZ1ZT8wMTE3Iiwid2VicGFjazovLy8uL3BhY2thZ2VzL3hiLXBvcHRpcC9zcmMveGItcG9wdGlwLnZ1ZT83MmU5Iiwid2VicGFjazovLy8uL3BhY2thZ2VzL3hiLXBvcHVwLXdpbmRvdy9zcmMveGItcG9wdXAtd2luZG93LnZ1ZT9lZDcxIiwid2VicGFjazovLy8uL3BhY2thZ2VzL3hiLXBvcHVwLXdpbmRvdy9zcmMveGItcG9wdXAtd2luZG93LnZ1ZT9kZTIzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL3hiLXJhZGlvL3NyYy94Yi1yYWRpby1ncm91cC52dWU/YjA4ZCIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy94Yi1yYWRpby9zcmMveGItcmFkaW8tZ3JvdXAudnVlP2Q3NDgiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMveGItcmFkaW8vc3JjL3hiLXJhZGlvLnZ1ZT83YmRhIiwid2VicGFjazovLy8uL3BhY2thZ2VzL3hiLXJhZGlvL3NyYy94Yi1yYWRpby52dWU/Y2U4NyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy94Yi1zZWFyY2gtYnRuL3NyYy94Yi1zZWFyY2gtYnRuLnZ1ZT9jYTM5Iiwid2VicGFjazovLy8uL3BhY2thZ2VzL3hiLXNlYXJjaC1idG4vc3JjL3hiLXNlYXJjaC1idG4udnVlPzUyMjciLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMveGItdGFibGUvc3JjL3hiLXRhYmxlLnZ1ZT82MDcxIiwid2VicGFjazovLy8uL3BhY2thZ2VzL3hiLXRhYmxlL3NyYy94Yi10YWJsZS52dWU/ZjRhZiIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy94Yi10YWJsZS9zcmMveGItdGFibGUtaGVhZC52dWU/MmE4MiIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy94Yi10YWJsZS9zcmMveGItdGFibGUtaGVhZC52dWU/ZWZiOSIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy94Yi10YWJsZS9zcmMveGItdGFibGUtYm9keS52dWU/MDlhNSIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy94Yi10YWJsZS9zcmMveGItdGFibGUtYm9keS52dWU/OTYwNyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy94Yi10YWJsZS9zcmMveGItdGFibGUtdHIudnVlP2RlYjkiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMveGItdGFibGUvc3JjL3hiLXRhYmxlLXRyLnZ1ZT9jNmEwIiwid2VicGFjazovLy8uL3BhY2thZ2VzL3hiLXRhYmxlL3NyYy94Yi1jZWxsLnZ1ZT84M2VkIiwid2VicGFjazovLy8uL3BhY2thZ2VzL3hiLXRhYmxlL3NyYy94Yi1jZWxsLnZ1ZT8yM2Y4Iiwid2VicGFjazovLy8uL3BhY2thZ2VzL3hiLXRleHQvc3JjL3hiLXRleHQudnVlPzIzYmQiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMveGItdGV4dC9zcmMveGItdGV4dC52dWU/YjgxZCIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy94Yi11ZWRpdG9yL3NyYy94Yi11ZWRpdG9yLnZ1ZT8zYzJhIiwid2VicGFjazovLy8uL3BhY2thZ2VzL3hiLXVlZGl0b3Ivc3JjL3hiLXVlZGl0b3IudnVlPzZiNTEiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMveGItYnV0dG9uL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy91dGlscy91dGlscy50cyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy94Yi1jaGVja2JveC9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2V4cG9ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2RlZmluZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2hhcmVkLWtleS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3NoYXJlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2VudW0tYnVnLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ29wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2l0ZXJhdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3NldC10by1zdHJpbmctdGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fd2tzLWV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3drcy1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fTWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1N5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2tleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VVbmFyeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19ub2RlVXRpbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc1Byb3RvdHlwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRTeW1ib2xzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldFRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jbG9uZUFycmF5QnVmZmVyLmpzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL3hiLWljb24vc3JjL3hiLWljb24udnVlPzZjOTUiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMveGItaWNvbi9zcmMveGItaWNvbi52dWU/YzA1NyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy94Yi1wb3B0aXAvc3JjL3hiLXBvcHRpcC52dWU/Njc3NSIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy94Yi1wb3B0aXAvc3JjL3hiLXBvcHRpcC52dWU/OTlkYiIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy94Yi1mb3JtLWl0ZW0vc3JjL3hiLWZvcm0taXRlbS52dWU/MWFhMSIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy94Yi1mb3JtLWl0ZW0vc3JjL3hiLWZvcm0taXRlbS52dWU/MzVkYyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy94Yi11ZWRpdG9yL3NyYy94Yi11ZWRpdG9yLnZ1ZT8yYzhiIiwid2VicGFjazovLy8uL3BhY2thZ2VzL3hiLXVlZGl0b3Ivc3JjL3hiLXVlZGl0b3IudnVlPzNiMDkiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMveGItdGV4dC9zcmMveGItdGV4dC52dWU/Nzc3ZCIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy94Yi10ZXh0L3NyYy94Yi10ZXh0LnZ1ZT9mMDA2Iiwid2VicGFjazovLy8uL3BhY2thZ2VzL3hiLWJ1dHRvbi9zcmMveGItYnV0dG9uLnZ1ZT9hMjMwIiwid2VicGFjazovLy8uL3BhY2thZ2VzL3hiLWJ1dHRvbi9zcmMveGItYnV0dG9uLnZ1ZT9lNzdhIiwid2VicGFjazovLy8uL3BhY2thZ2VzL3hiLXRhYmxlL3NyYy94Yi10YWJsZS52dWU/ZDc5OCIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy94Yi10YWJsZS9zcmMveGItdGFibGUudnVlPzMzYzUiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMveGItc2VhcmNoLWJ0bi9zcmMveGItc2VhcmNoLWJ0bi52dWU/Y2E1MCIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy94Yi1zZWFyY2gtYnRuL3NyYy94Yi1zZWFyY2gtYnRuLnZ1ZT9iZDhlIiwid2VicGFjazovLy8uL3BhY2thZ2VzL3hiLXJhZGlvL3NyYy94Yi1yYWRpby52dWU/OTZmNyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy94Yi1yYWRpby9zcmMveGItcmFkaW8udnVlPzAyNzEiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMveGItcmFkaW8vc3JjL3hiLXJhZGlvLWdyb3VwLnZ1ZT9jMjk2Iiwid2VicGFjazovLy8uL3BhY2thZ2VzL3hiLXJhZGlvL3NyYy94Yi1yYWRpby1ncm91cC52dWU/Y2Q3ZiIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy94Yi1wb3B1cC13aW5kb3cvc3JjL3hiLXBvcHVwLXdpbmRvdy52dWU/YWIzZiIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy94Yi1wb3B1cC13aW5kb3cvc3JjL3hiLXBvcHVwLXdpbmRvdy52dWU/NjFiYyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy94Yi1sb2FkaW5nL3NyYy94Yi1sb2FkaW5nLnZ1ZT8yZGNjIiwid2VicGFjazovLy8uL3BhY2thZ2VzL3hiLWxvYWRpbmcvc3JjL3hiLWxvYWRpbmcudnVlPzNhMTEiLCJ3ZWJwYWNrOi8vLy4vZXhhbXBsZXMvQXBwLnZ1ZT84YTM4Iiwid2VicGFjazovLy8uL2V4YW1wbGVzL0FwcC52dWU/ZWNiOSIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy94Yi1pbnB1dC1udW1iZXIvc3JjL3hiLWlucHV0LW51bWJlci52dWU/NzhkMiIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy94Yi1pbnB1dC1udW1iZXIvc3JjL3hiLWlucHV0LW51bWJlci52dWU/NTY3MiIsIndlYnBhY2s6Ly8vLi9leGFtcGxlcy9jb21wb25lbnRzL2RlbW8tYmxvY2sudnVlPzQ0YTUiLCJ3ZWJwYWNrOi8vLy4vZXhhbXBsZXMvY29tcG9uZW50cy9kZW1vLWJsb2NrLnZ1ZT80MjY3Iiwid2VicGFjazovLy8uL3BhY2thZ2VzL3hiLWNoZWNrYm94L3NyYy94Yi1jaGVja2JveC1ncm91cC52dWU/NWI2MCIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy94Yi1jaGVja2JveC9zcmMveGItY2hlY2tib3gtZ3JvdXAudnVlPzEyMDUiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMveGItZm9ybS9zcmMveGItZm9ybS52dWU/MGY1MiIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy94Yi1mb3JtL3NyYy94Yi1mb3JtLnZ1ZT9iMzVkIiwid2VicGFjazovLy8uL3BhY2thZ2VzL3hiLWNoZWNrYm94L3NyYy94Yi1jaGVja2JveC52dWU/MDQ0YSIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy94Yi1jaGVja2JveC9zcmMveGItY2hlY2tib3gudnVlPzQzZmUiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMveGItbWVzc2FnZS10aXBzL3NyYy94Yi1tZXNzYWdlLXRpcHMudnVlP2ExM2QiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMveGItbWVzc2FnZS10aXBzL3NyYy94Yi1tZXNzYWdlLXRpcHMudnVlP2Q3ZTUiLCJ3ZWJwYWNrOi8vLy4vZXhhbXBsZXMvY29tcG9uZW50cy9oZWFkZXIudnVlP2NlZjMiLCJ3ZWJwYWNrOi8vLy4vZXhhbXBsZXMvY29tcG9uZW50cy9oZWFkZXIudnVlP2FkYTQiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMveGItY29sb3Ivc3JjL3hiLWNvbG9yLnZ1ZT9jNTU0Iiwid2VicGFjazovLy8uL3BhY2thZ2VzL3hiLWNvbG9yL3NyYy94Yi1jb2xvci52dWU/ZTU5OSIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy94Yi10YWJsZS9zcmMveGItdGFibGUtaGVhZC52dWU/YWRmYyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy94Yi10YWJsZS9zcmMveGItdGFibGUtaGVhZC52dWU/ZGJkYSIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy94Yi10YWJsZS9zcmMveGItdGFibGUtYm9keS52dWU/ZjU2ZiIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy94Yi10YWJsZS9zcmMveGItdGFibGUtYm9keS52dWU/MDZmOCIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy94Yi10YWJsZS9zcmMveGItY2VsbC52dWU/ZDFkNyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy94Yi10YWJsZS9zcmMveGItY2VsbC52dWU/NmJhYyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy94Yi10YWJsZS9zcmMveGItdGFibGUtdHIudnVlPzFkZjYiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMveGItdGFibGUvc3JjL3hiLXRhYmxlLXRyLnZ1ZT8yNWJhIiwid2VicGFjazovLy8uL2V4YW1wbGVzL3JvdXRlci9uYXYuY29uZmlnLmpzb24iLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9sb2Rhc2guanMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvdGhlbWUtY2hhbGsvc3JjL2ZvbnRzL2ljb21vb24uZW90Iiwid2VicGFjazovLy8uL3BhY2thZ2VzL3hiLWNoZWNrYm94LWdyb3VwL2luZGV4LnRzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faWU4LWRvbS1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19kb20tY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWtleXMtaW50ZXJuYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY29mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8tb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlci1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19yZWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ29wbi5qcyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy94Yi1wb3B0aXAvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMveGItdGFibGUvc3JjL21peGluLnRzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL3hiLXRhYmxlL3NyYy9leHBhbmQudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9jbG9uZURlZXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9lcS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzRnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZnJlZUdsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL190b1NvdXJjZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hc3NpZ25WYWx1ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlQXNzaWduVmFsdWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXJyYXlMaWtlS2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzQnVmZmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNMZW5ndGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fb3ZlckFyZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzQXJyYXlMaWtlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gva2V5c0luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvc3R1YkFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldFN5bWJvbHNJbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheVB1c2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0UHJvdG90eXBlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VHZXRBbGxLZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbGVtZW50LXJlc2l6ZS1kZXRlY3Rvci9zcmMvY29sbGVjdGlvbi11dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWxlbWVudC1yZXNpemUtZGV0ZWN0b3Ivc3JjL2Jyb3dzZXItZGV0ZWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vZXhhbXBsZXMvbWFpbi50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGltZXJzLWJyb3dzZXJpZnkvbWFpbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2V0aW1tZWRpYXRlL3NldEltbWVkaWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL2V4YW1wbGVzL0FwcC52dWUiLCJ3ZWJwYWNrOi8vLy4vZXhhbXBsZXMvY29tcG9uZW50cy9oZWFkZXIudnVlIiwid2VicGFjazovLy8uL2V4YW1wbGVzL2Fzc2V0cy9pbWcvYmFubmVyLnBuZyIsIndlYnBhY2s6Ly8vLi9leGFtcGxlcy9jb21wb25lbnRzL2hlYWRlci52dWU/MjQzMiIsIndlYnBhY2s6Ly8vLi9leGFtcGxlcy9jb21wb25lbnRzL2hlYWRlci52dWU/OGRkZCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi91cmxzLmpzIiwid2VicGFjazovLy8uL2V4YW1wbGVzL0FwcC52dWU/MzUxOSIsIndlYnBhY2s6Ly8vLi9leGFtcGxlcy9BcHAudnVlP2NjZmUiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpZ2hsaWdodC5qcy9zdHlsZXMvY29sb3ItYnJld2VyLmNzcyIsIndlYnBhY2s6Ly8vLi9leGFtcGxlcy9yb3V0ZXIvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Z1ZS1yb3V0ZXIvZGlzdC92dWUtcm91dGVyLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9leGFtcGxlcy9yb3V0ZXIvY29uZmlnLnRzIiwid2VicGFjazovLy8uL2V4YW1wbGVzL2NvbXBvbmVudHMvZGVtby1ibG9jay52dWUiLCJ3ZWJwYWNrOi8vLy4vZXhhbXBsZXMvY29tcG9uZW50cy9kZW1vLWJsb2NrLnZ1ZT9lMmQ3Iiwid2VicGFjazovLy8uL2V4YW1wbGVzL2NvbXBvbmVudHMvZGVtby1ibG9jay52dWU/NDE1MyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy90aGVtZS1jaGFsay9zcmMvaW5kZXgubGVzcz9hMmUzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL3RoZW1lLWNoYWxrL3NyYy9pbmRleC5sZXNzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi91cmwvZXNjYXBlLmpzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL3RoZW1lLWNoYWxrL3NyYy9mb250cy9pY29tb29uLnR0ZiIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy90aGVtZS1jaGFsay9zcmMvZm9udHMvaWNvbW9vbi53b2ZmIiwid2VicGFjazovLy8uL3BhY2thZ2VzL3RoZW1lLWNoYWxrL3NyYy9mb250cy9pY29tb29uLnN2ZyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcyBzeW5jIGluZGV4XFwudHMkIiwid2VicGFjazovLy8uL3BhY2thZ2VzL3hiLWJ1dHRvbi9zcmMveGItYnV0dG9uLnZ1ZSIsIndlYnBhY2s6Ly8vLi9zcmMvbG9jYWxlL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9sb2NhbGUvbGFuZy96aC1DTi50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGVlcG1lcmdlL2Rpc3QvZXMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xvY2FsZS9mb3JtYXQudHMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMveGItY2hlY2tib3gvc3JjL3hiLWNoZWNrYm94LWdyb3VwLnZ1ZSIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy94Yi1jaGVja2JveC9zcmMveGItY2hlY2tib3gudnVlIiwid2VicGFjazovLy8uL3BhY2thZ2VzL3hiLWNvbG9yL2luZGV4LnRzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL3hiLWNvbG9yL3NyYy94Yi1jb2xvci52dWUiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMveGItZm9ybS1pdGVtL2luZGV4LnRzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL3hiLWZvcm0taXRlbS9zcmMveGItZm9ybS1pdGVtLnZ1ZSIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9hc3NpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvYXNzaWduLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2N0eC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2EtZnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtYXNzaWduLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYXJyYXktaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1sZW5ndGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1hYnNvbHV0ZS1pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL3N5bWJvbC9pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbC9pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3N0cmluZy1hdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2l0ZXItY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWRwcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2h0bWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ3BvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYuYXJyYXkuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hZGQtdG8tdW5zY29wYWJsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLXN0ZXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9zeW1ib2wvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19tZXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZW51bS1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXMtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ29wbi1leHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ29wZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM3LnN5bWJvbC5hc3luYy1pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM3LnN5bWJvbC5vYnNlcnZhYmxlLmpzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL3hiLWZvcm0vaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMveGItZm9ybS9zcmMveGItZm9ybS52dWUiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMveGItaWNvbi9zcmMveGItaWNvbi52dWUiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMveGItaW5wdXQtbnVtYmVyL2luZGV4LnRzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL3hiLWlucHV0LW51bWJlci9zcmMveGItaW5wdXQtbnVtYmVyLnZ1ZSIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy94Yi1sb2FkaW5nL2luZGV4LnRzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL3hiLWxvYWRpbmcvc3JjL3hiLWxvYWRpbmcudnVlIiwid2VicGFjazovLy8uL3BhY2thZ2VzL3hiLW1lc3NhZ2UtdGlwcy9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy94Yi1tZXNzYWdlLXRpcHMvc3JjL21lc3NhZ2UtdGlwcy50cyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy94Yi1tZXNzYWdlLXRpcHMvc3JjL3hiLW1lc3NhZ2UtdGlwcy52dWUiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMveGItcG9wdGlwL3NyYy94Yi1wb3B0aXAudnVlIiwid2VicGFjazovLy8uL3BhY2thZ2VzL3hiLXBvcHVwLXdpbmRvdy9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy94Yi1wb3B1cC13aW5kb3cvc3JjL3hiLXBvcHVwLXdpbmRvdy52dWUiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMveGItcG9wdXAtd2luZG93L3NyYy9zY3JvbGxiYXIudHMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMveGItcmFkaW8tZ3JvdXAvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMveGItcmFkaW8vc3JjL3hiLXJhZGlvLWdyb3VwLnZ1ZSIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy94Yi1yYWRpby9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy94Yi1yYWRpby9zcmMveGItcmFkaW8udnVlIiwid2VicGFjazovLy8uL3BhY2thZ2VzL3hiLXNlYXJjaC1idG4vaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMveGItc2VhcmNoLWJ0bi9zcmMveGItc2VhcmNoLWJ0bi52dWUiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMveGItdGFibGUvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMveGItdGFibGUvc3JjL3hiLXRhYmxlLnZ1ZSIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy94Yi10YWJsZS9zcmMveGItdGFibGUtaGVhZC52dWUiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMveGItdGFibGUvc3JjL2hlYWRlci50cyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy94Yi10YWJsZS9zcmMveGItdGFibGUtYm9keS52dWUiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMveGItdGFibGUvc3JjL3hiLXRhYmxlLXRyLnZ1ZSIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy94Yi10YWJsZS9zcmMveGItY2VsbC52dWUiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzL2Nzdi50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlQ2xvbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fU3RhY2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbGlzdENhY2hlQ2xlYXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbGlzdENhY2hlRGVsZXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2xpc3RDYWNoZUdldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19saXN0Q2FjaGVIYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbGlzdENhY2hlU2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0YWNrQ2xlYXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RhY2tEZWxldGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RhY2tHZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RhY2tIYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RhY2tTZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzTmF0aXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldFJhd1RhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19vYmplY3RUb1N0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc01hc2tlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jb3JlSnNEYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldFZhbHVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX01hcENhY2hlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21hcENhY2hlQ2xlYXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fSGFzaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19oYXNoQ2xlYXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faGFzaERlbGV0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19oYXNoR2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc2hIYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faGFzaFNldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tYXBDYWNoZURlbGV0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc0tleWFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwQ2FjaGVHZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwQ2FjaGVIYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwQ2FjaGVTZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXJyYXlFYWNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2RlZmluZVByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VBc3NpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVRpbWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNBcmd1bWVudHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzQXJndW1lbnRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvc3R1YkZhbHNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzSW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc1R5cGVkQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzVHlwZWRBcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlS2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19uYXRpdmVLZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VBc3NpZ25Jbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlS2V5c0luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX25hdGl2ZUtleXNJbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jbG9uZUJ1ZmZlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jb3B5QXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY29weVN5bWJvbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXJyYXlGaWx0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY29weVN5bWJvbHNJbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRBbGxLZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldEFsbEtleXNJbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19EYXRhVmlldy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19Qcm9taXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1NldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19XZWFrTWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2luaXRDbG9uZUFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2luaXRDbG9uZUJ5VGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1VpbnQ4QXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY2xvbmVEYXRhVmlldy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jbG9uZVJlZ0V4cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jbG9uZVN5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jbG9uZVR5cGVkQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faW5pdENsb25lT2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VDcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc01hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXNNYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc1NldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXNTZXQuanMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMveGItdGFibGUvc3JjL2V4cG9ydC1jc3YudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VsZW1lbnQtcmVzaXplLWRldGVjdG9yL3NyYy9lbGVtZW50LXJlc2l6ZS1kZXRlY3Rvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWxlbWVudC1yZXNpemUtZGV0ZWN0b3Ivc3JjL2VsZW1lbnQtdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VsZW1lbnQtcmVzaXplLWRldGVjdG9yL3NyYy9saXN0ZW5lci1oYW5kbGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbGVtZW50LXJlc2l6ZS1kZXRlY3Rvci9zcmMvaWQtZ2VuZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbGVtZW50LXJlc2l6ZS1kZXRlY3Rvci9zcmMvaWQtaGFuZGxlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWxlbWVudC1yZXNpemUtZGV0ZWN0b3Ivc3JjL3JlcG9ydGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYXRjaC1wcm9jZXNzb3Ivc3JjL2JhdGNoLXByb2Nlc3Nvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmF0Y2gtcHJvY2Vzc29yL3NyYy91dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWxlbWVudC1yZXNpemUtZGV0ZWN0b3Ivc3JjL3N0YXRlLWhhbmRsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VsZW1lbnQtcmVzaXplLWRldGVjdG9yL3NyYy9kZXRlY3Rpb24tc3RyYXRlZ3kvb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbGVtZW50LXJlc2l6ZS1kZXRlY3Rvci9zcmMvZGV0ZWN0aW9uLXN0cmF0ZWd5L3Njcm9sbC5qcyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy94Yi10YWJsZS9zcmMvdXRpbC50cyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy94Yi10ZXh0L2luZGV4LnRzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL3hiLXRleHQvc3JjL3hiLXRleHQudnVlIiwid2VicGFjazovLy8uL3BhY2thZ2VzL3hiLXVlZGl0b3IvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMveGItdWVkaXRvci9zcmMveGItdWVkaXRvci52dWUiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FzeW5jLXZhbGlkYXRvci9lcy91dGlsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hc3luYy12YWxpZGF0b3IvZXMvcnVsZS9yZXF1aXJlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXN5bmMtdmFsaWRhdG9yL2VzL3J1bGUvd2hpdGVzcGFjZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXN5bmMtdmFsaWRhdG9yL2VzL3J1bGUvdHlwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXN5bmMtdmFsaWRhdG9yL2VzL3J1bGUvcmFuZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FzeW5jLXZhbGlkYXRvci9lcy9ydWxlL2VudW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FzeW5jLXZhbGlkYXRvci9lcy9ydWxlL3BhdHRlcm4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FzeW5jLXZhbGlkYXRvci9lcy9ydWxlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hc3luYy12YWxpZGF0b3IvZXMvdmFsaWRhdG9yL29iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXN5bmMtdmFsaWRhdG9yL2VzL3ZhbGlkYXRvci9lbnVtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hc3luYy12YWxpZGF0b3IvZXMvdmFsaWRhdG9yL3R5cGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FzeW5jLXZhbGlkYXRvci9lcy92YWxpZGF0b3IvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FzeW5jLXZhbGlkYXRvci9lcy92YWxpZGF0b3Ivc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hc3luYy12YWxpZGF0b3IvZXMvdmFsaWRhdG9yL21ldGhvZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXN5bmMtdmFsaWRhdG9yL2VzL3ZhbGlkYXRvci9udW1iZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FzeW5jLXZhbGlkYXRvci9lcy92YWxpZGF0b3IvYm9vbGVhbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXN5bmMtdmFsaWRhdG9yL2VzL3ZhbGlkYXRvci9yZWdleHAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FzeW5jLXZhbGlkYXRvci9lcy92YWxpZGF0b3IvaW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXN5bmMtdmFsaWRhdG9yL2VzL3ZhbGlkYXRvci9mbG9hdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXN5bmMtdmFsaWRhdG9yL2VzL3ZhbGlkYXRvci9hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXN5bmMtdmFsaWRhdG9yL2VzL3ZhbGlkYXRvci9wYXR0ZXJuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hc3luYy12YWxpZGF0b3IvZXMvdmFsaWRhdG9yL2RhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FzeW5jLXZhbGlkYXRvci9lcy92YWxpZGF0b3IvcmVxdWlyZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FzeW5jLXZhbGlkYXRvci9lcy9tZXNzYWdlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXN5bmMtdmFsaWRhdG9yL2VzL2luZGV4LmpzIl0sIm5hbWVzIjpbIndlYnBhY2tKc29ucENhbGxiYWNrIiwiZGF0YSIsIm1vZHVsZUlkIiwiY2h1bmtJZCIsImNodW5rSWRzIiwibW9yZU1vZHVsZXMiLCJpIiwicmVzb2x2ZXMiLCJsZW5ndGgiLCJpbnN0YWxsZWRDaHVua3MiLCJwdXNoIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwibW9kdWxlcyIsInBhcmVudEpzb25wRnVuY3Rpb24iLCJzaGlmdCIsImluc3RhbGxlZE1vZHVsZXMiLCIwIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsImV4cG9ydHMiLCJtb2R1bGUiLCJsIiwiZSIsInByb21pc2VzIiwiaW5zdGFsbGVkQ2h1bmtEYXRhIiwicHJvbWlzZSIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0Iiwib25TY3JpcHRDb21wbGV0ZSIsImhlYWQiLCJkb2N1bWVudCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwic2NyaXB0IiwiY3JlYXRlRWxlbWVudCIsImNoYXJzZXQiLCJ0aW1lb3V0IiwibmMiLCJzZXRBdHRyaWJ1dGUiLCJzcmMiLCJwIiwianNvbnBTY3JpcHRTcmMiLCJldmVudCIsIm9uZXJyb3IiLCJvbmxvYWQiLCJjbGVhclRpbWVvdXQiLCJjaHVuayIsImVycm9yVHlwZSIsInR5cGUiLCJyZWFsU3JjIiwidGFyZ2V0IiwiZXJyb3IiLCJFcnJvciIsInJlcXVlc3QiLCJ1bmRlZmluZWQiLCJzZXRUaW1lb3V0IiwiYXBwZW5kQ2hpbGQiLCJhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5Iiwib2UiLCJlcnIiLCJjb25zb2xlIiwianNvbnBBcnJheSIsIndpbmRvdyIsIm9sZEpzb25wRnVuY3Rpb24iLCJzbGljZSIsInMiLCJub3JtYWxpemVDb21wb25lbnQiLCJzY3JpcHRFeHBvcnRzIiwicmVuZGVyIiwic3RhdGljUmVuZGVyRm5zIiwiZnVuY3Rpb25hbFRlbXBsYXRlIiwiaW5qZWN0U3R5bGVzIiwic2NvcGVJZCIsIm1vZHVsZUlkZW50aWZpZXIiLCJzaGFkb3dNb2RlIiwiaG9vayIsIm9wdGlvbnMiLCJfY29tcGlsZWQiLCJmdW5jdGlvbmFsIiwiX3Njb3BlSWQiLCJjb250ZXh0IiwidGhpcyIsIiR2bm9kZSIsInNzckNvbnRleHQiLCJwYXJlbnQiLCJfX1ZVRV9TU1JfQ09OVEVYVF9fIiwiX3JlZ2lzdGVyZWRDb21wb25lbnRzIiwiYWRkIiwiX3NzclJlZ2lzdGVyIiwiJHJvb3QiLCIkb3B0aW9ucyIsInNoYWRvd1Jvb3QiLCJfaW5qZWN0U3R5bGVzIiwib3JpZ2luYWxSZW5kZXIiLCJoIiwiZXhpc3RpbmciLCJiZWZvcmVDcmVhdGUiLCJjb25jYXQiLCJfX3dlYnBhY2tfZXhwb3J0c19fIiwiX19leHRlbmRzIiwiX19hc3NpZ24iLCJfX3Jlc3QiLCJfX2RlY29yYXRlIiwiX19wYXJhbSIsIl9fbWV0YWRhdGEiLCJfX2F3YWl0ZXIiLCJfX2dlbmVyYXRvciIsIl9fZXhwb3J0U3RhciIsIl9fdmFsdWVzIiwiX19yZWFkIiwiX19zcHJlYWQiLCJfX2F3YWl0IiwiX19hc3luY0dlbmVyYXRvciIsIl9fYXN5bmNEZWxlZ2F0b3IiLCJfX2FzeW5jVmFsdWVzIiwiX19tYWtlVGVtcGxhdGVPYmplY3QiLCJfX2ltcG9ydFN0YXIiLCJfX2ltcG9ydERlZmF1bHQiLCJleHRlbmRTdGF0aWNzIiwiYiIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiQXJyYXkiLCJfXyIsImNvbnN0cnVjdG9yIiwiYXNzaWduIiwiYXJndW1lbnRzIiwiYXBwbHkiLCJpbmRleE9mIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiZGVjb3JhdG9ycyIsImRlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJSZWZsZWN0IiwiZGVjb3JhdGUiLCJwYXJhbUluZGV4IiwiZGVjb3JhdG9yIiwibWV0YWRhdGFLZXkiLCJtZXRhZGF0YVZhbHVlIiwibWV0YWRhdGEiLCJ0aGlzQXJnIiwiX2FyZ3VtZW50cyIsIlAiLCJnZW5lcmF0b3IiLCJmdWxmaWxsZWQiLCJzdGVwIiwibmV4dCIsInJlamVjdGVkIiwicmVzdWx0IiwiZG9uZSIsInRoZW4iLCJib2R5IiwiZiIsInkiLCJnIiwiXyIsImxhYmVsIiwic2VudCIsInRyeXMiLCJvcHMiLCJ2ZXJiIiwidGhyb3ciLCJyZXR1cm4iLCJpdGVyYXRvciIsInYiLCJvcCIsIlR5cGVFcnJvciIsInBvcCIsImFyIiwiYXN5bmNJdGVyYXRvciIsInEiLCJhIiwicmVzdW1lIiwiZnVsZmlsbCIsInNldHRsZSIsImNvb2tlZCIsInJhdyIsIm1vZCIsImsiLCJkZWZhdWx0IiwiSW5qZWN0IiwiUHJvdmlkZSIsIk1vZGVsIiwiUHJvcCIsIldhdGNoIiwiRW1pdCIsInZ1ZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwidnVlX2NsYXNzX2NvbXBvbmVudF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fIiwidnVlX2NsYXNzX2NvbXBvbmVudF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQiLCJjb21wb25lbnRPcHRpb25zIiwiaW5qZWN0IiwiaXNBcnJheSIsInByb3ZpZGUiLCJtYW5hZ2VkIiwib3JpZ2luYWxfMSIsInJ2IiwicHJvcHMiLCJtb2RlbCIsInByb3AiLCJwYXRoIiwiX2EiLCJkZWVwIiwiX2IiLCJpbW1lZGlhdGUiLCJoYW5kbGVyIiwid2F0Y2giLCJoeXBoZW5hdGVSRSIsImh5cGhlbmF0ZSIsInN0ciIsInJlcGxhY2UiLCJ0b0xvd2VyQ2FzZSIsIl90YXJnZXQiLCJkZXNjcmlwdG9yIiwib3JpZ2luYWwiLCJfdGhpcyIsImFyZ3MiLCJfaSIsImVtaXQiLCJyZXR1cm5WYWx1ZSIsInVuc2hpZnQiLCIkZW1pdCIsIm9iaiIsImlzUHJvbWlzZSIsIl9pdGVyYXRvcjIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX3N5bWJvbDIiLCJfdHlwZW9mIiwiZnJlZUdsb2JhbCIsImZyZWVTZWxmIiwic2VsZiIsInJvb3QiLCJGdW5jdGlvbiIsImdsb2JhbCIsInNldEltbWVkaWF0ZSIsImVtcHR5T2JqZWN0IiwiZnJlZXplIiwiaXNVbmRlZiIsImlzRGVmIiwiaXNUcnVlIiwiaXNQcmltaXRpdmUiLCJpc09iamVjdCIsIl90b1N0cmluZyIsInRvU3RyaW5nIiwiaXNQbGFpbk9iamVjdCIsImlzUmVnRXhwIiwiaXNWYWxpZEFycmF5SW5kZXgiLCJ2YWwiLCJwYXJzZUZsb2F0IiwiU3RyaW5nIiwiTWF0aCIsImZsb29yIiwiaXNGaW5pdGUiLCJKU09OIiwic3RyaW5naWZ5IiwidG9OdW1iZXIiLCJpc05hTiIsIm1ha2VNYXAiLCJleHBlY3RzTG93ZXJDYXNlIiwibWFwIiwibGlzdCIsInNwbGl0IiwiaXNSZXNlcnZlZEF0dHJpYnV0ZSIsInJlbW92ZSIsImFyciIsIml0ZW0iLCJpbmRleCIsInNwbGljZSIsImhhc093biIsImNhY2hlZCIsImZuIiwiY2FjaGUiLCJjYW1lbGl6ZVJFIiwiY2FtZWxpemUiLCJ0b1VwcGVyQ2FzZSIsImNhcGl0YWxpemUiLCJjaGFyQXQiLCJjdHgiLCJib3VuZEZuIiwiX2xlbmd0aCIsInRvQXJyYXkiLCJzdGFydCIsInJldCIsImV4dGVuZCIsInRvIiwiX2Zyb20iLCJ0b09iamVjdCIsInJlcyIsIm5vb3AiLCJubyIsImlkZW50aXR5IiwibG9vc2VFcXVhbCIsImlzT2JqZWN0QSIsImlzT2JqZWN0QiIsImlzQXJyYXlBIiwiaXNBcnJheUIiLCJldmVyeSIsImtleXNBIiwia2V5cyIsImtleXNCIiwibG9vc2VJbmRleE9mIiwib25jZSIsImNhbGxlZCIsIlNTUl9BVFRSIiwiQVNTRVRfVFlQRVMiLCJMSUZFQ1lDTEVfSE9PS1MiLCJjb25maWciLCJvcHRpb25NZXJnZVN0cmF0ZWdpZXMiLCJzaWxlbnQiLCJwcm9kdWN0aW9uVGlwIiwiZGV2dG9vbHMiLCJwZXJmb3JtYW5jZSIsImVycm9ySGFuZGxlciIsIndhcm5IYW5kbGVyIiwiaWdub3JlZEVsZW1lbnRzIiwia2V5Q29kZXMiLCJpc1Jlc2VydmVkVGFnIiwiaXNSZXNlcnZlZEF0dHIiLCJpc1Vua25vd25FbGVtZW50IiwiZ2V0VGFnTmFtZXNwYWNlIiwicGFyc2VQbGF0Zm9ybVRhZ05hbWUiLCJtdXN0VXNlUHJvcCIsIl9saWZlY3ljbGVIb29rcyIsImlzUmVzZXJ2ZWQiLCJjaGFyQ29kZUF0IiwiZGVmIiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJiYWlsUkUiLCJfaXNTZXJ2ZXIiLCJoYXNQcm90byIsImluQnJvd3NlciIsImluV2VleCIsIldYRW52aXJvbm1lbnQiLCJwbGF0Zm9ybSIsIndlZXhQbGF0Zm9ybSIsIlVBIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiaXNJRSIsInRlc3QiLCJpc0lFOSIsImlzRWRnZSIsImlzSU9TIiwibmF0aXZlV2F0Y2giLCJzdXBwb3J0c1Bhc3NpdmUiLCJvcHRzIiwiYWRkRXZlbnRMaXN0ZW5lciIsImlzU2VydmVyUmVuZGVyaW5nIiwiZW52IiwiVlVFX0VOViIsIl9fVlVFX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJpc05hdGl2ZSIsIkN0b3IiLCJfU2V0IiwiaGFzU3ltYm9sIiwib3duS2V5cyIsIlNldCIsInNldCIsImhhcyIsImNsZWFyIiwid2FybiIsInVpZCIsIkRlcCIsImlkIiwic3VicyIsImFkZFN1YiIsInN1YiIsInJlbW92ZVN1YiIsImRlcGVuZCIsImFkZERlcCIsIm5vdGlmeSIsInVwZGF0ZSIsInRhcmdldFN0YWNrIiwicHVzaFRhcmdldCIsInBvcFRhcmdldCIsIlZOb2RlIiwidGFnIiwiY2hpbGRyZW4iLCJ0ZXh0IiwiZWxtIiwiYXN5bmNGYWN0b3J5IiwiZm5Db250ZXh0IiwiZm5PcHRpb25zIiwiZm5TY29wZUlkIiwiY29tcG9uZW50SW5zdGFuY2UiLCJpc1N0YXRpYyIsImlzUm9vdEluc2VydCIsImlzQ29tbWVudCIsImlzQ2xvbmVkIiwiaXNPbmNlIiwiYXN5bmNNZXRhIiwiaXNBc3luY1BsYWNlaG9sZGVyIiwicHJvdG90eXBlQWNjZXNzb3JzIiwiY2hpbGQiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiY3JlYXRlRW1wdHlWTm9kZSIsIm5vZGUiLCJjcmVhdGVUZXh0Vk5vZGUiLCJjbG9uZVZOb2RlIiwidm5vZGUiLCJjbG9uZWQiLCJhcnJheVByb3RvIiwiYXJyYXlNZXRob2RzIiwiZm9yRWFjaCIsIm1ldGhvZCIsImxlbiIsImluc2VydGVkIiwib2IiLCJfX29iX18iLCJvYnNlcnZlQXJyYXkiLCJkZXAiLCJhcnJheUtleXMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwic2hvdWxkT2JzZXJ2ZSIsInRvZ2dsZU9ic2VydmluZyIsIk9ic2VydmVyIiwidm1Db3VudCIsInByb3RvQXVnbWVudCIsImNvcHlBdWdtZW50Iiwid2FsayIsIm9ic2VydmUiLCJhc1Jvb3REYXRhIiwiaXNFeHRlbnNpYmxlIiwiX2lzVnVlIiwiZGVmaW5lUmVhY3RpdmUiLCJjdXN0b21TZXR0ZXIiLCJzaGFsbG93Iiwic2V0dGVyIiwiY2hpbGRPYiIsImRlcGVuZEFycmF5IiwibmV3VmFsIiwibWF4IiwiZGVsIiwiaXRlbXMiLCJzdHJhdHMiLCJtZXJnZURhdGEiLCJmcm9tIiwidG9WYWwiLCJmcm9tVmFsIiwibWVyZ2VEYXRhT3JGbiIsInBhcmVudFZhbCIsImNoaWxkVmFsIiwidm0iLCJpbnN0YW5jZURhdGEiLCJkZWZhdWx0RGF0YSIsIm1lcmdlSG9vayIsIm1lcmdlQXNzZXRzIiwia2V5JDEiLCJtZXRob2RzIiwiY29tcHV0ZWQiLCJkZWZhdWx0U3RyYXQiLCJtZXJnZU9wdGlvbnMiLCJub3JtYWxpemVQcm9wcyIsIm5vcm1hbGl6ZWQiLCJub3JtYWxpemVJbmplY3QiLCJkaXJzIiwiZGlyZWN0aXZlcyIsIm5vcm1hbGl6ZURpcmVjdGl2ZXMiLCJleHRlbmRzRnJvbSIsImV4dGVuZHMiLCJtaXhpbnMiLCJtZXJnZUZpZWxkIiwic3RyYXQiLCJyZXNvbHZlQXNzZXQiLCJ3YXJuTWlzc2luZyIsImFzc2V0cyIsImNhbWVsaXplZElkIiwiUGFzY2FsQ2FzZUlkIiwidmFsaWRhdGVQcm9wIiwicHJvcE9wdGlvbnMiLCJwcm9wc0RhdGEiLCJhYnNlbnQiLCJib29sZWFuSW5kZXgiLCJnZXRUeXBlSW5kZXgiLCJCb29sZWFuIiwic3RyaW5nSW5kZXgiLCJfcHJvcHMiLCJnZXRUeXBlIiwiZ2V0UHJvcERlZmF1bHRWYWx1ZSIsInByZXZTaG91bGRPYnNlcnZlIiwibWF0Y2giLCJpc1NhbWVUeXBlIiwiZXhwZWN0ZWRUeXBlcyIsImhhbmRsZUVycm9yIiwiaW5mbyIsImN1ciIsIiRwYXJlbnQiLCJob29rcyIsImVycm9yQ2FwdHVyZWQiLCJnbG9iYWxIYW5kbGVFcnJvciIsImxvZ0Vycm9yIiwibWljcm9UaW1lckZ1bmMiLCJtYWNyb1RpbWVyRnVuYyIsImNhbGxiYWNrcyIsInBlbmRpbmciLCJmbHVzaENhbGxiYWNrcyIsImNvcGllcyIsInVzZU1hY3JvVGFzayIsIk1lc3NhZ2VDaGFubmVsIiwiY2hhbm5lbCIsInBvcnQiLCJwb3J0MiIsInBvcnQxIiwib25tZXNzYWdlIiwicG9zdE1lc3NhZ2UiLCJuZXh0VGljayIsImNiIiwiX3Jlc29sdmUiLCJzZWVuT2JqZWN0cyIsInRyYXZlcnNlIiwiX3RyYXZlcnNlIiwic2VlbiIsImlzQSIsImlzRnJvemVuIiwiZGVwSWQiLCJub3JtYWxpemVFdmVudCIsInBhc3NpdmUiLCJvbmNlJCQxIiwiY2FwdHVyZSIsImNyZWF0ZUZuSW52b2tlciIsImZucyIsImludm9rZXIiLCJhcmd1bWVudHMkMSIsInVwZGF0ZUxpc3RlbmVycyIsIm9uIiwib2xkT24iLCJyZW1vdmUkJDEiLCJvbGQiLCJwYXJhbXMiLCJtZXJnZVZOb2RlSG9vayIsImhvb2tLZXkiLCJvbGRIb29rIiwid3JhcHBlZEhvb2siLCJtZXJnZWQiLCJjaGVja1Byb3AiLCJoYXNoIiwiYWx0S2V5IiwicHJlc2VydmUiLCJub3JtYWxpemVDaGlsZHJlbiIsIm5vcm1hbGl6ZUFycmF5Q2hpbGRyZW4iLCJuZXN0ZWRJbmRleCIsImxhc3RJbmRleCIsImxhc3QiLCJpc1RleHROb2RlIiwiX2lzVkxpc3QiLCJpc0ZhbHNlIiwiZW5zdXJlQ3RvciIsImNvbXAiLCJiYXNlIiwiZ2V0Rmlyc3RDb21wb25lbnRDaGlsZCIsIiRvbmNlIiwiJG9uIiwicmVtb3ZlJDEiLCIkb2ZmIiwidXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzIiwibGlzdGVuZXJzIiwib2xkTGlzdGVuZXJzIiwicmVzb2x2ZVNsb3RzIiwic2xvdHMiLCJhdHRycyIsInNsb3QiLCJuYW1lJDEiLCJpc1doaXRlc3BhY2UiLCJyZXNvbHZlU2NvcGVkU2xvdHMiLCJhY3RpdmVJbnN0YW5jZSIsImlzSW5JbmFjdGl2ZVRyZWUiLCJfaW5hY3RpdmUiLCJhY3RpdmF0ZUNoaWxkQ29tcG9uZW50IiwiZGlyZWN0IiwiX2RpcmVjdEluYWN0aXZlIiwiJGNoaWxkcmVuIiwiY2FsbEhvb2siLCJoYW5kbGVycyIsImoiLCJfaGFzSG9va0V2ZW50IiwicXVldWUiLCJhY3RpdmF0ZWRDaGlsZHJlbiIsIndhaXRpbmciLCJmbHVzaGluZyIsImZsdXNoU2NoZWR1bGVyUXVldWUiLCJ3YXRjaGVyIiwic29ydCIsInJ1biIsImFjdGl2YXRlZFF1ZXVlIiwidXBkYXRlZFF1ZXVlIiwiY2FsbEFjdGl2YXRlZEhvb2tzIiwiX3dhdGNoZXIiLCJfaXNNb3VudGVkIiwiY2FsbFVwZGF0ZWRIb29rcyIsInVpZCQxIiwiV2F0Y2hlciIsImV4cE9yRm4iLCJpc1JlbmRlcldhdGNoZXIiLCJfd2F0Y2hlcnMiLCJ1c2VyIiwibGF6eSIsInN5bmMiLCJhY3RpdmUiLCJkaXJ0eSIsImRlcHMiLCJuZXdEZXBzIiwiZGVwSWRzIiwibmV3RGVwSWRzIiwiZXhwcmVzc2lvbiIsInNlZ21lbnRzIiwicGFyc2VQYXRoIiwiY2xlYW51cERlcHMiLCJ0bXAiLCJxdWV1ZVdhdGNoZXIiLCJvbGRWYWx1ZSIsImV2YWx1YXRlIiwidGVhcmRvd24iLCJfaXNCZWluZ0Rlc3Ryb3llZCIsInNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbiIsInByb3h5Iiwic291cmNlS2V5IiwiaW5pdFN0YXRlIiwicHJvcHNPcHRpb25zIiwiX3Byb3BLZXlzIiwibG9vcCIsImluaXRQcm9wcyIsImluaXRNZXRob2RzIiwiX2RhdGEiLCJnZXREYXRhIiwiaW5pdERhdGEiLCJ3YXRjaGVycyIsIl9jb21wdXRlZFdhdGNoZXJzIiwiaXNTU1IiLCJ1c2VyRGVmIiwiY29tcHV0ZWRXYXRjaGVyT3B0aW9ucyIsImRlZmluZUNvbXB1dGVkIiwiaW5pdENvbXB1dGVkIiwiY3JlYXRlV2F0Y2hlciIsImluaXRXYXRjaCIsInNob3VsZENhY2hlIiwiY3JlYXRlQ29tcHV0ZWRHZXR0ZXIiLCIkd2F0Y2giLCJyZXNvbHZlSW5qZWN0IiwiZmlsdGVyIiwicHJvdmlkZUtleSIsInNvdXJjZSIsIl9wcm92aWRlZCIsInByb3ZpZGVEZWZhdWx0IiwicmVuZGVyTGlzdCIsInJlbmRlclNsb3QiLCJmYWxsYmFjayIsImJpbmRPYmplY3QiLCJub2RlcyIsInNjb3BlZFNsb3RGbiIsIiRzY29wZWRTbG90cyIsInNsb3ROb2RlcyIsIiRzbG90cyIsIl9yZW5kZXJlZCIsIiRjcmVhdGVFbGVtZW50IiwicmVzb2x2ZUZpbHRlciIsImlzS2V5Tm90TWF0Y2giLCJleHBlY3QiLCJhY3R1YWwiLCJjaGVja0tleUNvZGVzIiwiZXZlbnRLZXlDb2RlIiwiYnVpbHRJbktleUNvZGUiLCJldmVudEtleU5hbWUiLCJidWlsdEluS2V5TmFtZSIsIm1hcHBlZEtleUNvZGUiLCJiaW5kT2JqZWN0UHJvcHMiLCJhc1Byb3AiLCJpc1N5bmMiLCJkb21Qcm9wcyIsIiRldmVudCIsInJlbmRlclN0YXRpYyIsImlzSW5Gb3IiLCJfc3RhdGljVHJlZXMiLCJ0cmVlIiwibWFya1N0YXRpYyIsIl9yZW5kZXJQcm94eSIsIm1hcmtPbmNlIiwibWFya1N0YXRpY05vZGUiLCJiaW5kT2JqZWN0TGlzdGVuZXJzIiwib3VycyIsImluc3RhbGxSZW5kZXJIZWxwZXJzIiwiX28iLCJfbiIsIl9zIiwiX2wiLCJfdCIsIl9xIiwiX20iLCJfZiIsIl9rIiwiX3YiLCJfZSIsIl91IiwiX2ciLCJGdW5jdGlvbmFsUmVuZGVyQ29udGV4dCIsImNvbnRleHRWbSIsIl9vcmlnaW5hbCIsImlzQ29tcGlsZWQiLCJuZWVkTm9ybWFsaXphdGlvbiIsImluamVjdGlvbnMiLCJzY29wZWRTbG90cyIsIl9jIiwiY2xvbmVBbmRNYXJrRnVuY3Rpb25hbFJlc3VsdCIsImNsb25lIiwibWVyZ2VQcm9wcyIsImNvbXBvbmVudFZOb2RlSG9va3MiLCJpbml0IiwiaHlkcmF0aW5nIiwicGFyZW50RWxtIiwicmVmRWxtIiwiX2lzRGVzdHJveWVkIiwia2VlcEFsaXZlIiwibW91bnRlZE5vZGUiLCJwcmVwYXRjaCIsIl9pc0NvbXBvbmVudCIsIl9wYXJlbnRWbm9kZSIsIl9wYXJlbnRFbG0iLCJfcmVmRWxtIiwiaW5saW5lVGVtcGxhdGUiLCJjcmVhdGVDb21wb25lbnRJbnN0YW5jZUZvclZub2RlIiwiJG1vdW50Iiwib2xkVm5vZGUiLCJwYXJlbnRWbm9kZSIsInJlbmRlckNoaWxkcmVuIiwiaGFzQ2hpbGRyZW4iLCJfcmVuZGVyQ2hpbGRyZW4iLCJfdm5vZGUiLCIkYXR0cnMiLCIkbGlzdGVuZXJzIiwicHJvcEtleXMiLCJfcGFyZW50TGlzdGVuZXJzIiwiJGZvcmNlVXBkYXRlIiwidXBkYXRlQ2hpbGRDb21wb25lbnQiLCJpbnNlcnQiLCJxdWV1ZUFjdGl2YXRlZENvbXBvbmVudCIsImRlc3Ryb3kiLCJkZWFjdGl2YXRlQ2hpbGRDb21wb25lbnQiLCIkZGVzdHJveSIsImhvb2tzVG9NZXJnZSIsImNyZWF0ZUNvbXBvbmVudCIsImJhc2VDdG9yIiwiX2Jhc2UiLCJjaWQiLCJmYWN0b3J5IiwiZXJyb3JDb21wIiwicmVzb2x2ZWQiLCJsb2FkaW5nIiwibG9hZGluZ0NvbXAiLCJjb250ZXh0cyIsImZvcmNlUmVuZGVyIiwicmVhc29uIiwiY29tcG9uZW50IiwiZGVsYXkiLCJyZXNvbHZlQXN5bmNDb21wb25lbnQiLCJjcmVhdGVBc3luY1BsYWNlaG9sZGVyIiwicmVzb2x2ZUNvbnN0cnVjdG9yT3B0aW9ucyIsImNhbGxiYWNrIiwidHJhbnNmb3JtTW9kZWwiLCJleHRyYWN0UHJvcHNGcm9tVk5vZGVEYXRhIiwicmVuZGVyQ29udGV4dCIsInZub2RlcyIsImNyZWF0ZUZ1bmN0aW9uYWxDb21wb25lbnQiLCJuYXRpdmVPbiIsImFic3RyYWN0IiwiaW5zdGFsbENvbXBvbmVudEhvb2tzIiwiU0lNUExFX05PUk1BTElaRSIsIkFMV0FZU19OT1JNQUxJWkUiLCJub3JtYWxpemF0aW9uVHlwZSIsImFsd2F5c05vcm1hbGl6ZSIsImlzIiwic2ltcGxlTm9ybWFsaXplQ2hpbGRyZW4iLCJhcHBseU5TIiwiZm9yY2UiLCJzdHlsZSIsImNsYXNzIiwicmVnaXN0ZXJEZWVwQmluZGluZ3MiLCJfY3JlYXRlRWxlbWVudCIsInVpZCQzIiwic3VwZXIiLCJzdXBlck9wdGlvbnMiLCJtb2RpZmllZE9wdGlvbnMiLCJtb2RpZmllZCIsImxhdGVzdCIsImV4dGVuZGVkIiwiZXh0ZW5kT3B0aW9ucyIsInNlYWxlZCIsInNlYWxlZE9wdGlvbnMiLCJkZWR1cGUiLCJyZXNvbHZlTW9kaWZpZWRPcHRpb25zIiwiY29tcG9uZW50cyIsIlZ1ZSIsIl9pbml0IiwiaW5pdEV4dGVuZCIsIlN1cGVyIiwiU3VwZXJJZCIsImNhY2hlZEN0b3JzIiwiX0N0b3IiLCJTdWIiLCJDb21wIiwiaW5pdFByb3BzJDEiLCJpbml0Q29tcHV0ZWQkMSIsIm1peGluIiwidXNlIiwiZ2V0Q29tcG9uZW50TmFtZSIsIm1hdGNoZXMiLCJwYXR0ZXJuIiwicHJ1bmVDYWNoZSIsImtlZXBBbGl2ZUluc3RhbmNlIiwiY2FjaGVkTm9kZSIsInBydW5lQ2FjaGVFbnRyeSIsImN1cnJlbnQiLCJjYWNoZWQkJDEiLCJfdWlkIiwidm5vZGVDb21wb25lbnRPcHRpb25zIiwiX2NvbXBvbmVudFRhZyIsImluaXRJbnRlcm5hbENvbXBvbmVudCIsIl9zZWxmIiwiJHJlZnMiLCJpbml0TGlmZWN5Y2xlIiwiX2V2ZW50cyIsImluaXRFdmVudHMiLCJwYXJlbnREYXRhIiwiaW5pdFJlbmRlciIsImluaXRJbmplY3Rpb25zIiwiaW5pdFByb3ZpZGUiLCJlbCIsImluaXRNaXhpbiIsImRhdGFEZWYiLCJwcm9wc0RlZiIsIiRzZXQiLCIkZGVsZXRlIiwic3RhdGVNaXhpbiIsImhvb2tSRSIsImNicyIsImkkMSIsImV2ZW50c01peGluIiwiX3VwZGF0ZSIsInByZXZFbCIsIiRlbCIsInByZXZWbm9kZSIsInByZXZBY3RpdmVJbnN0YW5jZSIsIl9fcGF0Y2hfXyIsIl9fdnVlX18iLCJsaWZlY3ljbGVNaXhpbiIsIiRuZXh0VGljayIsIl9yZW5kZXIiLCJyZWYiLCJyZW5kZXJNaXhpbiIsInBhdHRlcm5UeXBlcyIsIlJlZ0V4cCIsImJ1aWx0SW5Db21wb25lbnRzIiwiS2VlcEFsaXZlIiwiaW5jbHVkZSIsImV4Y2x1ZGUiLCJOdW1iZXIiLCJjcmVhdGVkIiwiZGVzdHJveWVkIiwibW91bnRlZCIsInRoaXMkMSIsInBhcnNlSW50IiwiY29uZmlnRGVmIiwidXRpbCIsImRlbGV0ZSIsInBsdWdpbiIsImluc3RhbGxlZFBsdWdpbnMiLCJfaW5zdGFsbGVkUGx1Z2lucyIsImluc3RhbGwiLCJpbml0VXNlIiwiaW5pdE1peGluJDEiLCJkZWZpbml0aW9uIiwiaW5pdEFzc2V0UmVnaXN0ZXJzIiwiaW5pdEdsb2JhbEFQSSIsInZlcnNpb24iLCJhY2NlcHRWYWx1ZSIsImlzRW51bWVyYXRlZEF0dHIiLCJpc0Jvb2xlYW5BdHRyIiwieGxpbmtOUyIsImlzWGxpbmsiLCJnZXRYbGlua1Byb3AiLCJpc0ZhbHN5QXR0clZhbHVlIiwiZ2VuQ2xhc3NGb3JWbm9kZSIsInBhcmVudE5vZGUiLCJjaGlsZE5vZGUiLCJtZXJnZUNsYXNzRGF0YSIsInN0YXRpY0NsYXNzIiwiZHluYW1pY0NsYXNzIiwic3RyaW5naWZ5Q2xhc3MiLCJyZW5kZXJDbGFzcyIsInN0cmluZ2lmaWVkIiwic3RyaW5naWZ5QXJyYXkiLCJzdHJpbmdpZnlPYmplY3QiLCJuYW1lc3BhY2VNYXAiLCJzdmciLCJtYXRoIiwiaXNIVE1MVGFnIiwiaXNTVkciLCJ1bmtub3duRWxlbWVudENhY2hlIiwiaXNUZXh0SW5wdXRUeXBlIiwibm9kZU9wcyIsInRhZ05hbWUiLCJtdWx0aXBsZSIsImNyZWF0ZUVsZW1lbnROUyIsIm5hbWVzcGFjZSIsImNyZWF0ZVRleHROb2RlIiwiY3JlYXRlQ29tbWVudCIsImluc2VydEJlZm9yZSIsIm5ld05vZGUiLCJyZWZlcmVuY2VOb2RlIiwicmVtb3ZlQ2hpbGQiLCJuZXh0U2libGluZyIsInNldFRleHRDb250ZW50IiwidGV4dENvbnRlbnQiLCJzZXRTdHlsZVNjb3BlIiwicmVnaXN0ZXJSZWYiLCJpc1JlbW92YWwiLCJyZWZzIiwicmVmSW5Gb3IiLCJlbXB0eU5vZGUiLCJzYW1lVm5vZGUiLCJ0eXBlQSIsInR5cGVCIiwic2FtZUlucHV0VHlwZSIsImNyZWF0ZUtleVRvT2xkSWR4IiwiYmVnaW5JZHgiLCJlbmRJZHgiLCJ1cGRhdGVEaXJlY3RpdmVzIiwib2xkRGlyIiwiZGlyIiwiaXNDcmVhdGUiLCJpc0Rlc3Ryb3kiLCJvbGREaXJzIiwibm9ybWFsaXplRGlyZWN0aXZlcyQxIiwibmV3RGlycyIsImRpcnNXaXRoSW5zZXJ0IiwiZGlyc1dpdGhQb3N0cGF0Y2giLCJjYWxsSG9vayQxIiwiY29tcG9uZW50VXBkYXRlZCIsImNhbGxJbnNlcnQiLCJlbXB0eU1vZGlmaWVycyIsIm1vZGlmaWVycyIsImdldFJhd0Rpck5hbWUiLCJyYXdOYW1lIiwiam9pbiIsImJhc2VNb2R1bGVzIiwidXBkYXRlQXR0cnMiLCJpbmhlcml0QXR0cnMiLCJvbGRBdHRycyIsInNldEF0dHIiLCJyZW1vdmVBdHRyaWJ1dGVOUyIsInJlbW92ZUF0dHJpYnV0ZSIsImJhc2VTZXRBdHRyIiwic2V0QXR0cmlidXRlTlMiLCJfX2llcGgiLCJibG9ja2VyIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInVwZGF0ZUNsYXNzIiwib2xkRGF0YSIsImNscyIsInRyYW5zaXRpb25DbGFzcyIsIl90cmFuc2l0aW9uQ2xhc3NlcyIsIl9wcmV2Q2xhc3MiLCJ0YXJnZXQkMSIsImtsYXNzIiwiUkFOR0VfVE9LRU4iLCJDSEVDS0JPWF9SQURJT19UT0tFTiIsImFkZCQxIiwiX3dpdGhUYXNrIiwid2l0aE1hY3JvVGFzayIsIm9uY2VIYW5kbGVyIiwicmVtb3ZlJDIiLCJjcmVhdGVPbmNlSGFuZGxlciIsInVwZGF0ZURPTUxpc3RlbmVycyIsImNoYW5nZSIsIm5vcm1hbGl6ZUV2ZW50cyIsImV2ZW50cyIsInVwZGF0ZURPTVByb3BzIiwib2xkUHJvcHMiLCJjaGlsZE5vZGVzIiwiX3ZhbHVlIiwic3RyQ3VyIiwic2hvdWxkVXBkYXRlVmFsdWUiLCJjaGVja1ZhbCIsImNvbXBvc2luZyIsIm5vdEluRm9jdXMiLCJhY3RpdmVFbGVtZW50IiwiaXNOb3RJbkZvY3VzQW5kRGlydHkiLCJfdk1vZGlmaWVycyIsIm51bWJlciIsInRyaW0iLCJpc0RpcnR5V2l0aE1vZGlmaWVycyIsInBhcnNlU3R5bGVUZXh0IiwiY3NzVGV4dCIsInByb3BlcnR5RGVsaW1pdGVyIiwibm9ybWFsaXplU3R5bGVEYXRhIiwibm9ybWFsaXplU3R5bGVCaW5kaW5nIiwic3RhdGljU3R5bGUiLCJiaW5kaW5nU3R5bGUiLCJlbXB0eVN0eWxlIiwiY3NzVmFyUkUiLCJpbXBvcnRhbnRSRSIsInNldFByb3AiLCJzZXRQcm9wZXJ0eSIsIm5vcm1hbGl6ZWROYW1lIiwibm9ybWFsaXplIiwidmVuZG9yTmFtZXMiLCJjYXBOYW1lIiwidXBkYXRlU3R5bGUiLCJvbGRTdGF0aWNTdHlsZSIsIm9sZFN0eWxlQmluZGluZyIsIm5vcm1hbGl6ZWRTdHlsZSIsIm9sZFN0eWxlIiwibmV3U3R5bGUiLCJjaGVja0NoaWxkIiwic3R5bGVEYXRhIiwiZ2V0U3R5bGUiLCJhZGRDbGFzcyIsImNsYXNzTGlzdCIsImdldEF0dHJpYnV0ZSIsInJlbW92ZUNsYXNzIiwidGFyIiwicmVzb2x2ZVRyYW5zaXRpb24iLCJjc3MiLCJhdXRvQ3NzVHJhbnNpdGlvbiIsImVudGVyQ2xhc3MiLCJlbnRlclRvQ2xhc3MiLCJlbnRlckFjdGl2ZUNsYXNzIiwibGVhdmVDbGFzcyIsImxlYXZlVG9DbGFzcyIsImxlYXZlQWN0aXZlQ2xhc3MiLCJoYXNUcmFuc2l0aW9uIiwiVFJBTlNJVElPTiIsIkFOSU1BVElPTiIsInRyYW5zaXRpb25Qcm9wIiwidHJhbnNpdGlvbkVuZEV2ZW50IiwiYW5pbWF0aW9uUHJvcCIsImFuaW1hdGlvbkVuZEV2ZW50Iiwib250cmFuc2l0aW9uZW5kIiwib253ZWJraXR0cmFuc2l0aW9uZW5kIiwib25hbmltYXRpb25lbmQiLCJvbndlYmtpdGFuaW1hdGlvbmVuZCIsInJhZiIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsIm5leHRGcmFtZSIsImFkZFRyYW5zaXRpb25DbGFzcyIsInRyYW5zaXRpb25DbGFzc2VzIiwicmVtb3ZlVHJhbnNpdGlvbkNsYXNzIiwid2hlblRyYW5zaXRpb25FbmRzIiwiZXhwZWN0ZWRUeXBlIiwiZ2V0VHJhbnNpdGlvbkluZm8iLCJwcm9wQ291bnQiLCJlbmRlZCIsImVuZCIsIm9uRW5kIiwidHJhbnNmb3JtUkUiLCJzdHlsZXMiLCJnZXRDb21wdXRlZFN0eWxlIiwidHJhbnNpdGlvbkRlbGF5cyIsInRyYW5zaXRpb25EdXJhdGlvbnMiLCJ0cmFuc2l0aW9uVGltZW91dCIsImdldFRpbWVvdXQiLCJhbmltYXRpb25EZWxheXMiLCJhbmltYXRpb25EdXJhdGlvbnMiLCJhbmltYXRpb25UaW1lb3V0IiwiaGFzVHJhbnNmb3JtIiwiZGVsYXlzIiwiZHVyYXRpb25zIiwidG9NcyIsImVudGVyIiwidG9nZ2xlRGlzcGxheSIsIl9sZWF2ZUNiIiwiY2FuY2VsbGVkIiwidHJhbnNpdGlvbiIsIl9lbnRlckNiIiwibm9kZVR5cGUiLCJhcHBlYXJDbGFzcyIsImFwcGVhclRvQ2xhc3MiLCJhcHBlYXJBY3RpdmVDbGFzcyIsImJlZm9yZUVudGVyIiwiYWZ0ZXJFbnRlciIsImVudGVyQ2FuY2VsbGVkIiwiYmVmb3JlQXBwZWFyIiwiYXBwZWFyIiwiYWZ0ZXJBcHBlYXIiLCJhcHBlYXJDYW5jZWxsZWQiLCJkdXJhdGlvbiIsInRyYW5zaXRpb25Ob2RlIiwiaXNBcHBlYXIiLCJzdGFydENsYXNzIiwiYWN0aXZlQ2xhc3MiLCJ0b0NsYXNzIiwiYmVmb3JlRW50ZXJIb29rIiwiZW50ZXJIb29rIiwiYWZ0ZXJFbnRlckhvb2siLCJlbnRlckNhbmNlbGxlZEhvb2siLCJleHBsaWNpdEVudGVyRHVyYXRpb24iLCJleHBlY3RzQ1NTIiwidXNlcldhbnRzQ29udHJvbCIsImdldEhvb2tBcmd1bWVudHNMZW5ndGgiLCJzaG93IiwicGVuZGluZ05vZGUiLCJfcGVuZGluZyIsImlzVmFsaWREdXJhdGlvbiIsImxlYXZlIiwicm0iLCJiZWZvcmVMZWF2ZSIsImFmdGVyTGVhdmUiLCJsZWF2ZUNhbmNlbGxlZCIsImRlbGF5TGVhdmUiLCJleHBsaWNpdExlYXZlRHVyYXRpb24iLCJwZXJmb3JtTGVhdmUiLCJpbnZva2VyRm5zIiwiX2VudGVyIiwicGF0Y2giLCJiYWNrZW5kIiwicmVtb3ZlTm9kZSIsImNyZWF0ZUVsbSIsImluc2VydGVkVm5vZGVRdWV1ZSIsIm5lc3RlZCIsIm93bmVyQXJyYXkiLCJpc1JlYWN0aXZhdGVkIiwiaW5pdENvbXBvbmVudCIsImlubmVyTm9kZSIsImFjdGl2YXRlIiwicmVhY3RpdmF0ZUNvbXBvbmVudCIsInNldFNjb3BlIiwiY3JlYXRlQ2hpbGRyZW4iLCJpbnZva2VDcmVhdGVIb29rcyIsInBlbmRpbmdJbnNlcnQiLCJpc1BhdGNoYWJsZSIsInJlZiQkMSIsImFuY2VzdG9yIiwiYWRkVm5vZGVzIiwic3RhcnRJZHgiLCJpbnZva2VEZXN0cm95SG9vayIsInJlbW92ZVZub2RlcyIsImNoIiwicmVtb3ZlQW5kSW52b2tlUmVtb3ZlSG9vayIsImNoaWxkRWxtIiwiY3JlYXRlUm1DYiIsImZpbmRJZHhJbk9sZCIsIm9sZENoIiwicGF0Y2hWbm9kZSIsInJlbW92ZU9ubHkiLCJoeWRyYXRlIiwibmV3Q2giLCJvbGRLZXlUb0lkeCIsImlkeEluT2xkIiwidm5vZGVUb01vdmUiLCJvbGRTdGFydElkeCIsIm5ld1N0YXJ0SWR4Iiwib2xkRW5kSWR4Iiwib2xkU3RhcnRWbm9kZSIsIm9sZEVuZFZub2RlIiwibmV3RW5kSWR4IiwibmV3U3RhcnRWbm9kZSIsIm5ld0VuZFZub2RlIiwiY2FuTW92ZSIsInVwZGF0ZUNoaWxkcmVuIiwicG9zdHBhdGNoIiwiaW52b2tlSW5zZXJ0SG9vayIsImluaXRpYWwiLCJpc1JlbmRlcmVkTW9kdWxlIiwiaW5WUHJlIiwicHJlIiwiaGFzQ2hpbGROb2RlcyIsImlubmVySFRNTCIsImNoaWxkcmVuTWF0Y2giLCJmaXJzdENoaWxkIiwiZnVsbEludm9rZSIsImlzSW5pdGlhbFBhdGNoIiwiaXNSZWFsRWxlbWVudCIsImhhc0F0dHJpYnV0ZSIsImVtcHR5Tm9kZUF0Iiwib2xkRWxtIiwicGFyZW50RWxtJDEiLCJwYXRjaGFibGUiLCJpJDIiLCJjcmVhdGVQYXRjaEZ1bmN0aW9uIiwidm1vZGVsIiwidHJpZ2dlciIsImRpcmVjdGl2ZSIsImJpbmRpbmciLCJfdk9wdGlvbnMiLCJzZXRTZWxlY3RlZCIsImdldFZhbHVlIiwib25Db21wb3NpdGlvblN0YXJ0Iiwib25Db21wb3NpdGlvbkVuZCIsInByZXZPcHRpb25zIiwiY3VyT3B0aW9ucyIsInNvbWUiLCJoYXNOb01hdGNoaW5nT3B0aW9uIiwiYWN0dWFsbHlTZXRTZWxlY3RlZCIsImlzTXVsdGlwbGUiLCJzZWxlY3RlZCIsIm9wdGlvbiIsInNlbGVjdGVkSW5kZXgiLCJjcmVhdGVFdmVudCIsImluaXRFdmVudCIsImRpc3BhdGNoRXZlbnQiLCJsb2NhdGVOb2RlIiwicGxhdGZvcm1EaXJlY3RpdmVzIiwidHJhbnNpdGlvbiQkMSIsIm9yaWdpbmFsRGlzcGxheSIsIl9fdk9yaWdpbmFsRGlzcGxheSIsImRpc3BsYXkiLCJ1bmJpbmQiLCJ0cmFuc2l0aW9uUHJvcHMiLCJnZXRSZWFsQ2hpbGQiLCJjb21wT3B0aW9ucyIsImV4dHJhY3RUcmFuc2l0aW9uRGF0YSIsInBsYWNlaG9sZGVyIiwicmF3Q2hpbGQiLCJUcmFuc2l0aW9uIiwiaGFzUGFyZW50VHJhbnNpdGlvbiIsIl9sZWF2aW5nIiwib2xkUmF3Q2hpbGQiLCJvbGRDaGlsZCIsImlzU2FtZUNoaWxkIiwiZGVsYXllZExlYXZlIiwibW92ZUNsYXNzIiwiY2FsbFBlbmRpbmdDYnMiLCJfbW92ZUNiIiwicmVjb3JkUG9zaXRpb24iLCJuZXdQb3MiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJhcHBseVRyYW5zbGF0aW9uIiwib2xkUG9zIiwicG9zIiwiZHgiLCJsZWZ0IiwiZHkiLCJ0b3AiLCJtb3ZlZCIsInRyYW5zZm9ybSIsIldlYmtpdFRyYW5zZm9ybSIsInRyYW5zaXRpb25EdXJhdGlvbiIsInBsYXRmb3JtQ29tcG9uZW50cyIsIlRyYW5zaXRpb25Hcm91cCIsInByZXZDaGlsZHJlbiIsInJhd0NoaWxkcmVuIiwidHJhbnNpdGlvbkRhdGEiLCJrZXB0IiwicmVtb3ZlZCIsImMkMSIsImJlZm9yZVVwZGF0ZSIsInVwZGF0ZWQiLCJoYXNNb3ZlIiwiX3JlZmxvdyIsIm9mZnNldEhlaWdodCIsInByb3BlcnR5TmFtZSIsIl9oYXNNb3ZlIiwiY2xvbmVOb2RlIiwiYXR0ciIsIkhUTUxVbmtub3duRWxlbWVudCIsIkhUTUxFbGVtZW50IiwibW91bnRDb21wb25lbnQiLCJxdWVyeVNlbGVjdG9yIiwicXVlcnkiLCJfX2ciLCJleCIsIl9pbnRlcm9wRGVmYXVsdCIsInJlZmxlY3Rpb25Jc1N1cHBvcnRlZCIsImRlZmluZU1ldGFkYXRhIiwiZm9yd2FyZE1ldGFkYXRhIiwicHJvcGVydHlLZXkiLCJnZXRPd25NZXRhZGF0YUtleXMiLCJtZXRhS2V5IiwiZ2V0T3duTWV0YWRhdGEiLCIkaW50ZXJuYWxIb29rcyIsImNvbXBvbmVudEZhY3RvcnkiLCJDb21wb25lbnQiLCJwcm90byIsIm9yaWdpbmFsSW5pdCIsInBsYWluRGF0YSIsImNvbGxlY3REYXRhRnJvbUNvbnN0cnVjdG9yIiwiX19kZWNvcmF0b3JzX18iLCJzdXBlclByb3RvIiwiZ2V0UHJvdG90eXBlT2YiLCJFeHRlbmRlZCIsIk9yaWdpbmFsIiwiZXh0ZW5kZWREZXNjcmlwdG9yIiwic3VwZXJEZXNjcmlwdG9yIiwiZm9yd2FyZFN0YXRpY01lbWJlcnMiLCJjb3B5UmVmbGVjdGlvbk1ldGFkYXRhIiwicmVnaXN0ZXJIb29rcyIsImNyZWF0ZURlY29yYXRvciIsIkN0b3JzIiwiaXQiLCJiYXNlSXNOYXRpdmUiLCJfYXNzaWduMiIsIl92dWVQcm9wZXJ0eURlY29yYXRvciIsIkVtaXR0ZXIiLCJfc3VwZXIiLCJ0c2xpYl8xIiwiZGlzcGF0Y2giLCJjb21wb25lbnROYW1lIiwiZXZlbnROYW1lIiwiYnJvYWRjYXN0IiwiZFAiLCJjcmVhdGVEZXNjIiwiYW5PYmplY3QiLCJJRThfRE9NX0RFRklORSIsInRvUHJpbWl0aXZlIiwiTyIsIkF0dHJpYnV0ZXMiLCJJT2JqZWN0IiwiZGVmaW5lZCIsInN0b3JlIiwiVVNFX1NZTUJPTCIsInVzZVNvdXJjZU1hcCIsImNvbnRlbnQiLCJjc3NNYXBwaW5nIiwiYnRvYSIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VNYXAiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsInRvQ29tbWVudCIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlUm9vdCIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJtZWRpYVF1ZXJ5IiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImV2YWwiLCJfbG9jYWxlIiwiTG9jYWxlIiwiY2FtZWxjYXNlVG9IeXBoZW4iLCJnZXRTY3JvbGxCYXJTaXplIiwiZnJlc2giLCJpc1NlcnZlciIsImlubmVyIiwid2lkdGgiLCJoZWlnaHQiLCJvdXRlciIsIm91dGVyU3R5bGUiLCJwb3NpdGlvbiIsInBvaW50ZXJFdmVudHMiLCJ2aXNpYmlsaXR5Iiwib3ZlcmZsb3ciLCJ3aWR0aENvbnRhaW5lZCIsIm9mZnNldFdpZHRoIiwid2lkdGhTY3JvbGwiLCJjbGllbnRXaWR0aCIsImVsZW1lbnQiLCJzdHlsZU5hbWUiLCJTUEVDSUFMX0NIQVJTX1JFR0VYUCIsInNlcGFyYXRvciIsImxldHRlciIsIm9mZnNldCIsIk1PWl9IQUNLX1JFR0VYUCIsImNhbWVsQ2FzZSIsIndhcm5Qcm9wIiwiY29ycmVjdFR5cGUiLCJ3cm9uZ1R5cGUiLCJfbG9kYXNoIiwidXBwZXJGaXJzdCIsInNjcm9sbFRvcCIsIndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZSIsIm1velJlcXVlc3RBbmltYXRpb25GcmFtZSIsIm1zUmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiZGlmZmVyZW5jZSIsImFicyIsInN0ZXBzIiwiY2VpbCIsInNjcm9sbCIsInNjcm9sbFRvIiwiZmluZENvbXBvbmVudFVwd2FyZCIsImZpbmRDb21wb25lbnREb3dud2FyZCIsImNoaWxkcmVucyIsImNoaWxkcmVuc18xIiwiZmluZENvbXBvbmVudHNEb3dud2FyZCIsInJlZHVjZSIsImZvdW5kQ2hpbGRzIiwiZmluZENvbXBvbmVudHNVcHdhcmQiLCJwYXJlbnRzIiwiZmluZEJyb3RoZXJzQ29tcG9uZW50cyIsImV4Y2VwdE1lIiwiZmluZEluZGV4IiwiaGFzQ2xhc3MiLCJjdXJDbGFzcyIsImNsYXNzTmFtZSIsImNsYXNzZXMiLCJjbHNOYW1lIiwiX3Z1ZTIiLCIkaXNTZXJ2ZXIiLCJNdXRhdGlvbk9ic2VydmVyIiwiV2ViS2l0TXV0YXRpb25PYnNlcnZlciIsIk1vek11dGF0aW9uT2JzZXJ2ZXIiLCJjb250YWlucyIsImRpbWVuc2lvbk1hcCIsInhzIiwic20iLCJtZCIsImxnIiwieGwiLCJjb3JlIiwiX19lIiwiZXhlYyIsInN0eWxlc0luRG9tIiwiaXNPbGRJRSIsIm1lbW8iLCJtZW1vaXplIiwiYXRvYiIsImdldEVsZW1lbnQiLCJzZWxlY3RvciIsInN0eWxlVGFyZ2V0IiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJzaW5nbGV0b24iLCJzaW5nbGV0b25Db3VudGVyIiwic3R5bGVzSW5zZXJ0ZWRBdFRvcCIsImZpeFVybHMiLCJhZGRTdHlsZXNUb0RvbSIsImRvbVN0eWxlIiwicGFydHMiLCJhZGRTdHlsZSIsImxpc3RUb1N0eWxlcyIsIm5ld1N0eWxlcyIsInBhcnQiLCJtZWRpYSIsImluc2VydFN0eWxlRWxlbWVudCIsImluc2VydEludG8iLCJsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCIsImluc2VydEF0IiwiYmVmb3JlIiwicmVtb3ZlU3R5bGVFbGVtZW50IiwiaWR4IiwiY3JlYXRlU3R5bGVFbGVtZW50IiwiYWRkQXR0cnMiLCJzdHlsZUluZGV4IiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsIlVSTCIsImNyZWF0ZU9iamVjdFVSTCIsInJldm9rZU9iamVjdFVSTCIsIkJsb2IiLCJsaW5rIiwicmVsIiwiY3JlYXRlTGlua0VsZW1lbnQiLCJhdXRvRml4VXJscyIsImNvbnZlcnRUb0Fic29sdXRlVXJscyIsImJsb2IiLCJvbGRTcmMiLCJocmVmIiwic3R5bGVTaGVldCIsIm5ld09iaiIsIkRFQlVHIiwibmV3TGlzdCIsIm1heVJlbW92ZSIsInJlcGxhY2VUZXh0IiwidGV4dFN0b3JlIiwicmVwbGFjZW1lbnQiLCJjc3NOb2RlIiwid2VicGFja1BvbHlmaWxsIiwiZGVwcmVjYXRlIiwicGF0aHMiLCJiaXRtYXAiLCIka2V5cyIsImVudW1CdWdLZXlzIiwicHgiLCJyYW5kb20iLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIl94Ykljb24yIiwieGJJY29uIiwibGlzdENhY2hlQ2xlYXIiLCJsaXN0Q2FjaGVEZWxldGUiLCJsaXN0Q2FjaGVHZXQiLCJsaXN0Q2FjaGVIYXMiLCJsaXN0Q2FjaGVTZXQiLCJMaXN0Q2FjaGUiLCJlbnRyaWVzIiwiZW50cnkiLCJlcSIsImFycmF5IiwiZ2V0UmF3VGFnIiwib2JqZWN0VG9TdHJpbmciLCJudWxsVGFnIiwidW5kZWZpbmVkVGFnIiwic3ltVG9TdHJpbmdUYWciLCJuYXRpdmVDcmVhdGUiLCJnZXROYXRpdmUiLCJpc0tleWFibGUiLCJfX2RhdGFfXyIsImFzc2lnblZhbHVlIiwiYmFzZUFzc2lnblZhbHVlIiwiY3VzdG9taXplciIsImlzTmV3IiwibmV3VmFsdWUiLCJfbm9kZV9tb2R1bGVzX2JhYmVsX2xvYWRlcl9saWJfaW5kZXhfanNfbm9kZV9tb2R1bGVzX3RzX2xvYWRlcl9pbmRleF9qc19yZWZfMF8xX25vZGVfbW9kdWxlc192dWVfbG9hZGVyX2xpYl9pbmRleF9qc192dWVfbG9hZGVyX29wdGlvbnNfQXBwX3Z1ZV92dWVfdHlwZV9zY3JpcHRfbGFuZ190c19fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsIl9ub2RlX21vZHVsZXNfYmFiZWxfbG9hZGVyX2xpYl9pbmRleF9qc19ub2RlX21vZHVsZXNfdHNfbG9hZGVyX2luZGV4X2pzX3JlZl8wXzFfbm9kZV9tb2R1bGVzX3Z1ZV9sb2FkZXJfbGliX2luZGV4X2pzX3Z1ZV9sb2FkZXJfb3B0aW9uc19BcHBfdnVlX3Z1ZV90eXBlX3NjcmlwdF9sYW5nX3RzX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQiLCJfX1dFQlBBQ0tfSU1QT1JUX0tFWV9fIiwiQXBwIiwibWFpbkhlYWRlciIsIl9oZWFkZXIyIiwiX25vZGVfbW9kdWxlc19iYWJlbF9sb2FkZXJfbGliX2luZGV4X2pzX25vZGVfbW9kdWxlc190c19sb2FkZXJfaW5kZXhfanNfcmVmXzBfMV9ub2RlX21vZHVsZXNfdnVlX2xvYWRlcl9saWJfaW5kZXhfanNfdnVlX2xvYWRlcl9vcHRpb25zX2hlYWRlcl92dWVfdnVlX3R5cGVfc2NyaXB0X2xhbmdfdHNfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJfbm9kZV9tb2R1bGVzX2JhYmVsX2xvYWRlcl9saWJfaW5kZXhfanNfbm9kZV9tb2R1bGVzX3RzX2xvYWRlcl9pbmRleF9qc19yZWZfMF8xX25vZGVfbW9kdWxlc192dWVfbG9hZGVyX2xpYl9pbmRleF9qc192dWVfbG9hZGVyX29wdGlvbnNfaGVhZGVyX3Z1ZV92dWVfdHlwZV9zY3JpcHRfbGFuZ190c19fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0IiwiTWFpbkhlYWRlciIsImhlYWRlckNvbmYiLCJfbmF2Q29uZmlnMiIsImhtciIsImxvY2FscyIsIl9ub2RlX21vZHVsZXNfYmFiZWxfbG9hZGVyX2xpYl9pbmRleF9qc19ub2RlX21vZHVsZXNfdHNfbG9hZGVyX2luZGV4X2pzX3JlZl8wXzFfbm9kZV9tb2R1bGVzX3Z1ZV9sb2FkZXJfbGliX2luZGV4X2pzX3Z1ZV9sb2FkZXJfb3B0aW9uc19kZW1vX2Jsb2NrX3Z1ZV92dWVfdHlwZV9zY3JpcHRfbGFuZ190c19fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsIl9ub2RlX21vZHVsZXNfYmFiZWxfbG9hZGVyX2xpYl9pbmRleF9qc19ub2RlX21vZHVsZXNfdHNfbG9hZGVyX2luZGV4X2pzX3JlZl8wXzFfbm9kZV9tb2R1bGVzX3Z1ZV9sb2FkZXJfbGliX2luZGV4X2pzX3Z1ZV9sb2FkZXJfb3B0aW9uc19kZW1vX2Jsb2NrX3Z1ZV92dWVfdHlwZV9zY3JpcHRfbGFuZ190c19fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0IiwiRGVtb0Jsb2NrIiwiaXNFeHBhbmQiLCJ0b2dnbGUiLCJfbm9kZV9tb2R1bGVzX2JhYmVsX2xvYWRlcl9saWJfaW5kZXhfanNfbm9kZV9tb2R1bGVzX3RzX2xvYWRlcl9pbmRleF9qc19yZWZfMF8xX25vZGVfbW9kdWxlc192dWVfbG9hZGVyX2xpYl9pbmRleF9qc192dWVfbG9hZGVyX29wdGlvbnNfeGJfYnV0dG9uX3Z1ZV92dWVfdHlwZV9zY3JpcHRfbGFuZ190c19fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsIl9ub2RlX21vZHVsZXNfYmFiZWxfbG9hZGVyX2xpYl9pbmRleF9qc19ub2RlX21vZHVsZXNfdHNfbG9hZGVyX2luZGV4X2pzX3JlZl8wXzFfbm9kZV9tb2R1bGVzX3Z1ZV9sb2FkZXJfbGliX2luZGV4X2pzX3Z1ZV9sb2FkZXJfb3B0aW9uc194Yl9idXR0b25fdnVlX3Z1ZV90eXBlX3NjcmlwdF9sYW5nX3RzX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQiLCJYYkJ1dHRvbiIsImhhbmRsZUNsaWNrIiwicHJlZml4Q2xzIiwic2l6ZSIsImRpc2FibGVkIiwibG9uZyIsIl9sb2NhbGUyIiwiX25vZGVfbW9kdWxlc19iYWJlbF9sb2FkZXJfbGliX2luZGV4X2pzX25vZGVfbW9kdWxlc190c19sb2FkZXJfaW5kZXhfanNfcmVmXzBfMV9ub2RlX21vZHVsZXNfdnVlX2xvYWRlcl9saWJfaW5kZXhfanNfdnVlX2xvYWRlcl9vcHRpb25zX3hiX2NoZWNrYm94X2dyb3VwX3Z1ZV92dWVfdHlwZV9zY3JpcHRfbGFuZ190c19fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsIl9ub2RlX21vZHVsZXNfYmFiZWxfbG9hZGVyX2xpYl9pbmRleF9qc19ub2RlX21vZHVsZXNfdHNfbG9hZGVyX2luZGV4X2pzX3JlZl8wXzFfbm9kZV9tb2R1bGVzX3Z1ZV9sb2FkZXJfbGliX2luZGV4X2pzX3Z1ZV9sb2FkZXJfb3B0aW9uc194Yl9jaGVja2JveF9ncm91cF92dWVfdnVlX3R5cGVfc2NyaXB0X2xhbmdfdHNfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCIsIl9hc3Npc3QiLCJYYkNoZWNrYm94R3JvdXAiLCJjdXJyZW50VmFsdWUiLCJ1cGRhdGVNb2RlbCIsIm9uVmFsdWVDaGFuZ2UiLCJ2YWx1ZV8xIiwiZ3JvdXAiLCJ2YWxpZGF0b3IiLCJpbmNsdWRlcyIsIk1peGlucyIsIl9lbWl0dGVyMiIsIl9ub2RlX21vZHVsZXNfYmFiZWxfbG9hZGVyX2xpYl9pbmRleF9qc19ub2RlX21vZHVsZXNfdHNfbG9hZGVyX2luZGV4X2pzX3JlZl8wXzFfbm9kZV9tb2R1bGVzX3Z1ZV9sb2FkZXJfbGliX2luZGV4X2pzX3Z1ZV9sb2FkZXJfb3B0aW9uc194Yl9jaGVja2JveF92dWVfdnVlX3R5cGVfc2NyaXB0X2xhbmdfdHNfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJfbm9kZV9tb2R1bGVzX2JhYmVsX2xvYWRlcl9saWJfaW5kZXhfanNfbm9kZV9tb2R1bGVzX3RzX2xvYWRlcl9pbmRleF9qc19yZWZfMF8xX25vZGVfbW9kdWxlc192dWVfbG9hZGVyX2xpYl9pbmRleF9qc192dWVfbG9hZGVyX29wdGlvbnNfeGJfY2hlY2tib3hfdnVlX3Z1ZV90eXBlX3NjcmlwdF9sYW5nX3RzX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQiLCJYYkNoZWNrYm94Iiwic2hvd1Nsb3QiLCJmb2N1c0lubmVyIiwidHJ1ZVZhbHVlIiwiY2hlY2tlZCIsImZhbHNlVmFsdWUiLCJvbkJsdXIiLCJvbkZvY3VzIiwib25WYWx1ZUNoYW5nZWQiLCJpbmRldGVybWluYXRlIiwiX25vZGVfbW9kdWxlc19iYWJlbF9sb2FkZXJfbGliX2luZGV4X2pzX25vZGVfbW9kdWxlc190c19sb2FkZXJfaW5kZXhfanNfcmVmXzBfMV9ub2RlX21vZHVsZXNfdnVlX2xvYWRlcl9saWJfaW5kZXhfanNfdnVlX2xvYWRlcl9vcHRpb25zX3hiX2NvbG9yX3Z1ZV92dWVfdHlwZV9zY3JpcHRfbGFuZ190c19fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsIl9ub2RlX21vZHVsZXNfYmFiZWxfbG9hZGVyX2xpYl9pbmRleF9qc19ub2RlX21vZHVsZXNfdHNfbG9hZGVyX2luZGV4X2pzX3JlZl8wXzFfbm9kZV9tb2R1bGVzX3Z1ZV9sb2FkZXJfbGliX2luZGV4X2pzX3Z1ZV9sb2FkZXJfb3B0aW9uc194Yl9jb2xvcl92dWVfdnVlX3R5cGVfc2NyaXB0X2xhbmdfdHNfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCIsIlhiQ29sb3IiLCJfbm9kZV9tb2R1bGVzX2JhYmVsX2xvYWRlcl9saWJfaW5kZXhfanNfbm9kZV9tb2R1bGVzX3RzX2xvYWRlcl9pbmRleF9qc19yZWZfMF8xX25vZGVfbW9kdWxlc192dWVfbG9hZGVyX2xpYl9pbmRleF9qc192dWVfbG9hZGVyX29wdGlvbnNfeGJfZm9ybV9pdGVtX3Z1ZV92dWVfdHlwZV9zY3JpcHRfbGFuZ190c19fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsIl9ub2RlX21vZHVsZXNfYmFiZWxfbG9hZGVyX2xpYl9pbmRleF9qc19ub2RlX21vZHVsZXNfdHNfbG9hZGVyX2luZGV4X2pzX3JlZl8wXzFfbm9kZV9tb2R1bGVzX3Z1ZV9sb2FkZXJfbGliX2luZGV4X2pzX3Z1ZV9sb2FkZXJfb3B0aW9uc194Yl9mb3JtX2l0ZW1fdnVlX3Z1ZV90eXBlX3NjcmlwdF9sYW5nX3RzX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQiLCJnZXRQcm9wQnlQYXRoIiwidGVtcE9iaiIsImtleUFyciIsIlhiRm9ybUl0ZW0iLCJpc1JlcXVpcmVkIiwidmFsaWRhdGVTdGF0ZSIsInZhbGlkYXRlTWVzc2FnZSIsInZhbGlkYXRlRGlzYWJsZWQiLCJyZXF1aXJlZCIsImZvcm0iLCJsYWJlbFdpZHRoIiwibWFyZ2luTGVmdCIsIm9uRXJyb3JDaGFuZ2VkIiwib25WYWxpZGF0ZVN0YXR1c0NoYW5nZWQiLCJvblJ1bGVzQ2hhbmdlZCIsInNldFJ1bGVzIiwicnVsZXMiLCJnZXRSdWxlcyIsInJ1bGUiLCJvbkZpZWxkQmx1ciIsIm9uRmllbGRDaGFuZ2UiLCJmb3JtUnVsZXMiLCJzZWxmUnVsZXMiLCJnZXRGaWx0ZXJlZFJ1bGUiLCJ2YWxpZGF0ZSIsIm1zZyIsIl9hc3luY1ZhbGlkYXRvcjIiLCJmaWVsZFZhbHVlIiwiZmlyc3RGaWVsZHMiLCJlcnJvcnMiLCJtZXNzYWdlIiwicmVzZXRGaWVsZCIsImluaXRpYWxWYWx1ZSIsImJlZm9yZURlc3Ryb3kiLCJfbm9kZV9tb2R1bGVzX2JhYmVsX2xvYWRlcl9saWJfaW5kZXhfanNfbm9kZV9tb2R1bGVzX3RzX2xvYWRlcl9pbmRleF9qc19yZWZfMF8xX25vZGVfbW9kdWxlc192dWVfbG9hZGVyX2xpYl9pbmRleF9qc192dWVfbG9hZGVyX29wdGlvbnNfeGJfZm9ybV92dWVfdnVlX3R5cGVfc2NyaXB0X2xhbmdfdHNfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJfbm9kZV9tb2R1bGVzX2JhYmVsX2xvYWRlcl9saWJfaW5kZXhfanNfbm9kZV9tb2R1bGVzX3RzX2xvYWRlcl9pbmRleF9qc19yZWZfMF8xX25vZGVfbW9kdWxlc192dWVfbG9hZGVyX2xpYl9pbmRleF9qc192dWVfbG9hZGVyX29wdGlvbnNfeGJfZm9ybV92dWVfdnVlX3R5cGVfc2NyaXB0X2xhbmdfdHNfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCIsIlhiRm9ybSIsImF1dG9jb21wbGV0ZSIsImZpZWxkcyIsImxhYmVsUG9zaXRpb24iLCJpbmxpbmUiLCJmaWVsZCIsInJlc2V0RmllbGRzIiwicmVzZXRGZWlsZCIsInZhbGlkYXRlcyIsInZhbGlkIiwieCIsInZhbGlkYXRlRmllbGQiLCJfbm9kZV9tb2R1bGVzX2JhYmVsX2xvYWRlcl9saWJfaW5kZXhfanNfbm9kZV9tb2R1bGVzX3RzX2xvYWRlcl9pbmRleF9qc19yZWZfMF8xX25vZGVfbW9kdWxlc192dWVfbG9hZGVyX2xpYl9pbmRleF9qc192dWVfbG9hZGVyX29wdGlvbnNfeGJfaWNvbl92dWVfdnVlX3R5cGVfc2NyaXB0X2xhbmdfdHNfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJfbm9kZV9tb2R1bGVzX2JhYmVsX2xvYWRlcl9saWJfaW5kZXhfanNfbm9kZV9tb2R1bGVzX3RzX2xvYWRlcl9pbmRleF9qc19yZWZfMF8xX25vZGVfbW9kdWxlc192dWVfbG9hZGVyX2xpYl9pbmRleF9qc192dWVfbG9hZGVyX29wdGlvbnNfeGJfaWNvbl92dWVfdnVlX3R5cGVfc2NyaXB0X2xhbmdfdHNfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCIsIlhiSWNvbiIsImNvbG9yIiwiX25vZGVfbW9kdWxlc19iYWJlbF9sb2FkZXJfbGliX2luZGV4X2pzX25vZGVfbW9kdWxlc190c19sb2FkZXJfaW5kZXhfanNfcmVmXzBfMV9ub2RlX21vZHVsZXNfdnVlX2xvYWRlcl9saWJfaW5kZXhfanNfdnVlX2xvYWRlcl9vcHRpb25zX3hiX2lucHV0X251bWJlcl92dWVfdnVlX3R5cGVfc2NyaXB0X2xhbmdfdHNfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJfbm9kZV9tb2R1bGVzX2JhYmVsX2xvYWRlcl9saWJfaW5kZXhfanNfbm9kZV9tb2R1bGVzX3RzX2xvYWRlcl9pbmRleF9qc19yZWZfMF8xX25vZGVfbW9kdWxlc192dWVfbG9hZGVyX2xpYl9pbmRleF9qc192dWVfbG9hZGVyX29wdGlvbnNfeGJfaW5wdXRfbnVtYmVyX3Z1ZV92dWVfdHlwZV9zY3JpcHRfbGFuZ190c19fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0IiwiWGJJbnB1dE51bWJlciIsIm51bSIsImZpcnN0TnVtIiwic2hvd051bSIsImFkZFZhbHVlIiwic3RhdGUiLCJpbnB1dE51bSIsImlucHV0Q2hhbmdlIiwic3VidHJhY3RWYWx1ZSIsIm1pbiIsInJlZ051bSIsInJlZ0V4cCIsImNoYW5nZUlucHV0IiwiZm9jdXMiLCJjaGFuZ2VOdW1UeXBlIiwiX25vZGVfbW9kdWxlc19iYWJlbF9sb2FkZXJfbGliX2luZGV4X2pzX25vZGVfbW9kdWxlc190c19sb2FkZXJfaW5kZXhfanNfcmVmXzBfMV9ub2RlX21vZHVsZXNfdnVlX2xvYWRlcl9saWJfaW5kZXhfanNfdnVlX2xvYWRlcl9vcHRpb25zX3hiX2xvYWRpbmdfdnVlX3Z1ZV90eXBlX3NjcmlwdF9sYW5nX3RzX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiX25vZGVfbW9kdWxlc19iYWJlbF9sb2FkZXJfbGliX2luZGV4X2pzX25vZGVfbW9kdWxlc190c19sb2FkZXJfaW5kZXhfanNfcmVmXzBfMV9ub2RlX21vZHVsZXNfdnVlX2xvYWRlcl9saWJfaW5kZXhfanNfdnVlX2xvYWRlcl9vcHRpb25zX3hiX2xvYWRpbmdfdnVlX3Z1ZV90eXBlX3NjcmlwdF9sYW5nX3RzX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQiLCJYYkxvYWRpbmciLCJsb2FkVHh0IiwiX25vZGVfbW9kdWxlc19iYWJlbF9sb2FkZXJfbGliX2luZGV4X2pzX25vZGVfbW9kdWxlc190c19sb2FkZXJfaW5kZXhfanNfcmVmXzBfMV9ub2RlX21vZHVsZXNfdnVlX2xvYWRlcl9saWJfaW5kZXhfanNfdnVlX2xvYWRlcl9vcHRpb25zX3hiX21lc3NhZ2VfdGlwc192dWVfdnVlX3R5cGVfc2NyaXB0X2xhbmdfdHNfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJfbm9kZV9tb2R1bGVzX2JhYmVsX2xvYWRlcl9saWJfaW5kZXhfanNfbm9kZV9tb2R1bGVzX3RzX2xvYWRlcl9pbmRleF9qc19yZWZfMF8xX25vZGVfbW9kdWxlc192dWVfbG9hZGVyX2xpYl9pbmRleF9qc192dWVfbG9hZGVyX29wdGlvbnNfeGJfbWVzc2FnZV90aXBzX3Z1ZV92dWVfdHlwZV9zY3JpcHRfbGFuZ190c19fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0IiwiWGJNZXNzYWdlVGlwcyIsImNsb3NhYmxlIiwiY2xvc2VDbGljayIsIl9ub2RlX21vZHVsZXNfYmFiZWxfbG9hZGVyX2xpYl9pbmRleF9qc19ub2RlX21vZHVsZXNfdHNfbG9hZGVyX2luZGV4X2pzX3JlZl8wXzFfbm9kZV9tb2R1bGVzX3Z1ZV9sb2FkZXJfbGliX2luZGV4X2pzX3Z1ZV9sb2FkZXJfb3B0aW9uc194Yl9wb3B0aXBfdnVlX3Z1ZV90eXBlX3NjcmlwdF9sYW5nX3RzX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiX25vZGVfbW9kdWxlc19iYWJlbF9sb2FkZXJfbGliX2luZGV4X2pzX25vZGVfbW9kdWxlc190c19sb2FkZXJfaW5kZXhfanNfcmVmXzBfMV9ub2RlX21vZHVsZXNfdnVlX2xvYWRlcl9saWJfaW5kZXhfanNfdnVlX2xvYWRlcl9vcHRpb25zX3hiX3BvcHRpcF92dWVfdnVlX3R5cGVfc2NyaXB0X2xhbmdfdHNfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCIsIlhiUG9wdGlwIiwiX25vZGVfbW9kdWxlc19iYWJlbF9sb2FkZXJfbGliX2luZGV4X2pzX25vZGVfbW9kdWxlc190c19sb2FkZXJfaW5kZXhfanNfcmVmXzBfMV9ub2RlX21vZHVsZXNfdnVlX2xvYWRlcl9saWJfaW5kZXhfanNfdnVlX2xvYWRlcl9vcHRpb25zX3hiX3BvcHVwX3dpbmRvd192dWVfdnVlX3R5cGVfc2NyaXB0X2xhbmdfdHNfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJfbm9kZV9tb2R1bGVzX2JhYmVsX2xvYWRlcl9saWJfaW5kZXhfanNfbm9kZV9tb2R1bGVzX3RzX2xvYWRlcl9pbmRleF9qc19yZWZfMF8xX25vZGVfbW9kdWxlc192dWVfbG9hZGVyX2xpYl9pbmRleF9qc192dWVfbG9hZGVyX29wdGlvbnNfeGJfcG9wdXBfd2luZG93X3Z1ZV92dWVfdHlwZV9zY3JpcHRfbGFuZ190c19fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0IiwiWGJQb3B1cFdpbmRvdyIsIndyYXBTaG93Iiwic2hvd0hlYWQiLCJ2aXNpYmxlIiwidGltZXIiLCJzdHlsZVdpZHRoIiwiY3VzdG9tU3R5bGUiLCJva1RleHQiLCJjYW5jZWxUZXh0IiwiaGVhZGVyIiwidGl0bGUiLCJjbG9zZSIsIm1hc2siLCJtYXNrQ2xvc2FibGUiLCJjYW5jZWwiLCJvayIsIm9udmlzaWJsZUNoYW5nZWQiLCJyZW1vdmVTY3JvbGxFZmZlY3QiLCJzY3JvbGxhYmxlIiwiYWRkU2Nyb2xsRWZmZWN0Iiwib25TY3JvbGxhYmxlQ2hhbmdlZCIsIl9zY3JvbGxiYXIyIiwiX3hiQnV0dG9uMiIsIl9ub2RlX21vZHVsZXNfYmFiZWxfbG9hZGVyX2xpYl9pbmRleF9qc19ub2RlX21vZHVsZXNfdHNfbG9hZGVyX2luZGV4X2pzX3JlZl8wXzFfbm9kZV9tb2R1bGVzX3Z1ZV9sb2FkZXJfbGliX2luZGV4X2pzX3Z1ZV9sb2FkZXJfb3B0aW9uc194Yl9yYWRpb19ncm91cF92dWVfdnVlX3R5cGVfc2NyaXB0X2xhbmdfdHNfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJfbm9kZV9tb2R1bGVzX2JhYmVsX2xvYWRlcl9saWJfaW5kZXhfanNfbm9kZV9tb2R1bGVzX3RzX2xvYWRlcl9pbmRleF9qc19yZWZfMF8xX25vZGVfbW9kdWxlc192dWVfbG9hZGVyX2xpYl9pbmRleF9qc192dWVfbG9hZGVyX29wdGlvbnNfeGJfcmFkaW9fZ3JvdXBfdnVlX3Z1ZV90eXBlX3NjcmlwdF9sYW5nX3RzX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQiLCJzZWVkIiwibm93IiwiRGF0ZSIsImdldFV1aWQiLCJYYlJhZGlvR3JvdXAiLCJ2ZXJ0aWNhbCIsInVwZGF0ZVZhbHVlIiwiX25vZGVfbW9kdWxlc19iYWJlbF9sb2FkZXJfbGliX2luZGV4X2pzX25vZGVfbW9kdWxlc190c19sb2FkZXJfaW5kZXhfanNfcmVmXzBfMV9ub2RlX21vZHVsZXNfdnVlX2xvYWRlcl9saWJfaW5kZXhfanNfdnVlX2xvYWRlcl9vcHRpb25zX3hiX3JhZGlvX3Z1ZV92dWVfdHlwZV9zY3JpcHRfbGFuZ190c19fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsIl9ub2RlX21vZHVsZXNfYmFiZWxfbG9hZGVyX2xpYl9pbmRleF9qc19ub2RlX21vZHVsZXNfdHNfbG9hZGVyX2luZGV4X2pzX3JlZl8wXzFfbm9kZV9tb2R1bGVzX3Z1ZV9sb2FkZXJfbGliX2luZGV4X2pzX3Z1ZV9sb2FkZXJfb3B0aW9uc194Yl9yYWRpb192dWVfdnVlX3R5cGVfc2NyaXB0X2xhbmdfdHNfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCIsIlhiUmFkaW8iLCJncm91cE5hbWUiLCJmb2N1c1dyYXBwZXIiLCJib3JkZXIiLCJfbm9kZV9tb2R1bGVzX2JhYmVsX2xvYWRlcl9saWJfaW5kZXhfanNfbm9kZV9tb2R1bGVzX3RzX2xvYWRlcl9pbmRleF9qc19yZWZfMF8xX25vZGVfbW9kdWxlc192dWVfbG9hZGVyX2xpYl9pbmRleF9qc192dWVfbG9hZGVyX29wdGlvbnNfeGJfc2VhcmNoX2J0bl92dWVfdnVlX3R5cGVfc2NyaXB0X2xhbmdfdHNfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJfbm9kZV9tb2R1bGVzX2JhYmVsX2xvYWRlcl9saWJfaW5kZXhfanNfbm9kZV9tb2R1bGVzX3RzX2xvYWRlcl9pbmRleF9qc19yZWZfMF8xX25vZGVfbW9kdWxlc192dWVfbG9hZGVyX2xpYl9pbmRleF9qc192dWVfbG9hZGVyX29wdGlvbnNfeGJfc2VhcmNoX2J0bl92dWVfdnVlX3R5cGVfc2NyaXB0X2xhbmdfdHNfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCIsIlhiU2VhcmNoQnRuIiwiaGlkZGVuIiwiX25vZGVfbW9kdWxlc19iYWJlbF9sb2FkZXJfbGliX2luZGV4X2pzX25vZGVfbW9kdWxlc190c19sb2FkZXJfaW5kZXhfanNfcmVmXzBfMV9ub2RlX21vZHVsZXNfdnVlX2xvYWRlcl9saWJfaW5kZXhfanNfdnVlX2xvYWRlcl9vcHRpb25zX3hiX3RhYmxlX3Z1ZV92dWVfdHlwZV9zY3JpcHRfbGFuZ190c19fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsIl9ub2RlX21vZHVsZXNfYmFiZWxfbG9hZGVyX2xpYl9pbmRleF9qc19ub2RlX21vZHVsZXNfdHNfbG9hZGVyX2luZGV4X2pzX3JlZl8wXzFfbm9kZV9tb2R1bGVzX3Z1ZV9sb2FkZXJfbGliX2luZGV4X2pzX3Z1ZV9sb2FkZXJfb3B0aW9uc194Yl90YWJsZV92dWVfdnVlX3R5cGVfc2NyaXB0X2xhbmdfdHNfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCIsIl91dGlscyIsIl91dGlsIiwicm93S2V5IiwiY29sdW1uS2V5IiwiWGJUYWJsZSIsImNvbHNXaXRoSWQiLCJtYWtlQ29sdW1uc0lkIiwiY29sdW1ucyIsInJlYWR5IiwidGFibGVXaWR0aCIsImNvbHVtbnNXaWR0aCIsImNvbXBpbGVkVWlkcyIsIm9iakRhdGEiLCJtYWtlT2JqRGF0YSIsInJlYnVpbGREYXRhIiwiY2xvbmVDb2x1bW5zIiwibWFrZUNvbHVtbnMiLCJjb2x1bW5Sb3dzIiwiY29udmVydFRvUm93cyIsImxlZnRGaXhlZENvbHVtblJvd3MiLCJyaWdodEZpeGVkQ29sdW1uUm93cyIsImFsbENvbHVtbnMiLCJnZXRBbGxDb2x1bW5zIiwic2hvd1Nsb3RIZWFkZXIiLCJzaG93U2xvdEZvb3RlciIsImJvZHlIZWlnaHQiLCJzY3JvbGxCYXJXaWR0aCIsImN1cnJlbnRDb250ZXh0IiwiY2xvbmVEYXRhIiwiX2Nsb25lRGVlcDIiLCJzaG93VmVydGljYWxTY3JvbGxCYXIiLCJzaG93SG9yaXpvbnRhbFNjcm9sbEJhciIsImhlYWRlcldpZHRoIiwiaGVhZGVySGVpZ2h0Iiwibm9EYXRhVGV4dCIsIm5vRmlsdGVyZWREYXRhVGV4dCIsInN0cmlwZSIsImxlZnRGaXhlZENvbHVtbnMiLCJjb2wiLCJmaXhlZCIsIl93aWR0aCIsInJpZ2h0Rml4ZWRDb2x1bW5zIiwicmlnaHQiLCJjb252ZXJ0Q29sdW1uT3JkZXIiLCJyb3dDbHNOYW1lIiwicm93Q2xhc3NOYW1lIiwiaGFuZGxlUmVzaXplIiwic3VtTWluV2lkdGgiLCJoYXNXaWR0aENvbHVtbnMiLCJub1dpZHRoQ29sdW1ucyIsIm1heFdpZHRoQ29sdW1ucyIsIm5vTWF4V2lkdGhDb2x1bW5zIiwibWluV2lkdGgiLCJtYXhXaWR0aCIsInVzYWJsZVdpZHRoIiwiY2VsbCIsInVzYWJsZUxlbmd0aCIsImNvbHVtbldpZHRoIiwiY29sdW1uIiwiX2luZGV4Iiwibm9NYXhXaWR0aENvbHVtbnNfMSIsImZpeGVkSGVhZGVyIiwiaGFuZGxlTW91c2VJbiIsImRpc2FibGVkSG92ZXIiLCJfaXNIb3ZlciIsImhhbmRsZU1vdXNlT3V0IiwiaGFuZGxlQ3VycmVudFJvdyIsIm9sZEluZGV4IiwiX2lzSGlnaGxpZ2h0IiwicGFyc2UiLCJuZXdEYXRhIiwiaGlnaGxpZ2h0Q3VycmVudFJvdyIsImhpZ2hsaWdodFJvdyIsImNsZWFyQ3VycmVudFJvdyIsImNsaWNrQ3VycmVudFJvdyIsImRibGNsaWNrQ3VycmVudFJvdyIsImdldFNlbGVjdGlvbiIsInNlbGVjdGlvbkluZGV4ZXMiLCJfaXNDaGVja2VkIiwidG9nZ2xlU2VsZWN0Iiwic3RhdHVzIiwic2VsZWN0aW9uIiwidG9nZ2xlRXhwYW5kIiwiX2lzRXhwYW5kZWQiLCJzZWxlY3RBbGwiLCJfaXNEaXNhYmxlZCIsInRpdGxlSGVpZ2h0IiwiZm9vdGVySGVpZ2h0IiwiZm9vdGVyIiwiZml4ZWRCb2R5IiwidGJvZHkiLCJib2R5Q29udGVudEVsIiwiYm9keUVsIiwicGFyZW50RWxlbWVudCIsImJvZHlDb250ZW50SGVpZ2h0IiwiaGlkZUNvbHVtbkZpbHRlciIsIl9maWx0ZXJWaXNpYmxlIiwiaGFuZGxlQm9keVNjcm9sbCIsInNob3dIZWFkZXIiLCJzY3JvbGxMZWZ0IiwiaXNMZWZ0Rml4ZWQiLCJpc1JpZ2h0Rml4ZWQiLCJmaXhlZFJpZ2h0Qm9keSIsImhhbmRsZUZpeGVkTW91c2V3aGVlbCIsImRlbHRhWSIsImRldGFpbCIsIndoZWVsRGVsdGFZIiwid2hlZWxEZWx0YSIsImN1cnJlbnRTY3JvbGxUb3AiLCJwcmV2ZW50RGVmYXVsdCIsInNjcm9sbEhlaWdodCIsImNsaWVudEhlaWdodCIsInRpbWVJZCIsInNldEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsImhhbmRsZU1vdXNlV2hlZWwiLCJkZWx0YVgiLCIkYm9keSIsInNvcnREYXRhIiwic29ydE1ldGhvZCIsImhhbmRsZVNvcnQiLCJHZXRPcmlnaW5hbEluZGV4IiwiX3NvcnRUeXBlIiwic29ydGFibGUiLCJtYWtlRGF0YVdpdGhGaWx0ZXIiLCJvcmRlciIsImhhbmRsZUZpbHRlckhpZGUiLCJfaXNGaWx0ZXJlZCIsIl9maWx0ZXJDaGVja2VkIiwiZmlsdGVyRGF0YSIsInJvdyIsImZpbHRlclJlbW90ZSIsImZpbHRlck1ldGhvZCIsImZpbHRlck90aGVyRGF0YSIsImNvbEluZGV4IiwiaGFuZGxlRmlsdGVyIiwibWFrZURhdGFXaXRoU29ydCIsImhhbmRsZUZpbHRlclNlbGVjdCIsImhhbmRsZUZpbHRlclJlc2V0IiwibWFrZURhdGEiLCJfcm93S2V5Iiwic29ydFR5cGUiLCJzb3J0SW5kZXgiLCJpc0N1c3RvbSIsIm1ha2VEYXRhV2l0aFNvcnRBbmRGaWx0ZXIiLCJuZXdSb3ciLCJfZGlzYWJsZWQiLCJfY2hlY2tlZCIsIl9leHBhbmRlZCIsIl9oaWdobGlnaHQiLCJfX2lkIiwiZ2V0UmFuZG9tU3RyIiwiY29scyIsImNlbnRlciIsIl9jb2x1bW5LZXkiLCJfZmlsdGVyTXVsdGlwbGUiLCJmaWx0ZXJNdWx0aXBsZSIsImZpbHRlcmVkVmFsdWUiLCJtYWtlQ29sdW1uUm93cyIsImZpeGVkVHlwZSIsImV4cG9ydENzdiIsImZpbGVuYW1lIiwiZGF0YXMiLCJub0hlYWRlciIsIl9jc3YyIiwiX2V4cG9ydENzdjIiLCJkb3dubG9hZCIsIm9ic2VydmVyIiwiX2VsZW1lbnRSZXNpemVEZXRlY3RvcjIiLCJsaXN0ZW5UbyIsIm9mZiIsInJlbW92ZUxpc3RlbmVyIiwidGFibGVIZWFkIiwiX3hiVGFibGVIZWFkMiIsInRhYmxlQm9keSIsIl94YlRhYmxlQm9keTIiLCJfbm9kZV9tb2R1bGVzX2JhYmVsX2xvYWRlcl9saWJfaW5kZXhfanNfbm9kZV9tb2R1bGVzX3RzX2xvYWRlcl9pbmRleF9qc19yZWZfMF8xX25vZGVfbW9kdWxlc192dWVfbG9hZGVyX2xpYl9pbmRleF9qc192dWVfbG9hZGVyX29wdGlvbnNfeGJfdGFibGVfaGVhZF92dWVfdnVlX3R5cGVfc2NyaXB0X2xhbmdfdHNfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJfbm9kZV9tb2R1bGVzX2JhYmVsX2xvYWRlcl9saWJfaW5kZXhfanNfbm9kZV9tb2R1bGVzX3RzX2xvYWRlcl9pbmRleF9qc19yZWZfMF8xX25vZGVfbW9kdWxlc192dWVfbG9hZGVyX2xpYl9pbmRleF9qc192dWVfbG9hZGVyX29wdGlvbnNfeGJfdGFibGVfaGVhZF92dWVfdnVlX3R5cGVfc2NyaXB0X2xhbmdfdHNfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCIsIlhiVGFibGVIZWFkIiwic3R5bGVPYmplY3QiLCJpc1NlbGVjdEFsbCIsImZpbmQiLCJmaXhlZENvbHVtblJvd3MiLCJjZWxsQ2xhc3NlcyIsInNjcm9sbEJhckNlbGxDbGFzcyIsImhhc1JpZ2h0Rml4ZWQiLCJoZWFkUm93cyIsImhlYWRSb3dzXzEiLCJpdGVtQ2xhc3NlcyIsIml0ZW1BbGxDbGFzc2VzIiwiaGFuZGxlU29ydEJ5SGVhZCIsImhhbmRsZVNlbGVjdCIsImhhbmRsZVJlc2V0IiwiZ2V0Q29sdW1uIiwicm93SW5kZXgiLCJpZF8xIiwiQ2hlY2tib3hHcm91cCIsIl94YkNoZWNrYm94R3JvdXAyIiwiQ2hlY2tib3giLCJfeGJDaGVja2JveDIiLCJQb3B0aXAiLCJfeGJQb3B0aXAyIiwiQnV0dG9uIiwicmVuZGVySGVhZGVyIiwiX21peGluMiIsIl9ub2RlX21vZHVsZXNfYmFiZWxfbG9hZGVyX2xpYl9pbmRleF9qc19ub2RlX21vZHVsZXNfdHNfbG9hZGVyX2luZGV4X2pzX3JlZl8wXzFfbm9kZV9tb2R1bGVzX3Z1ZV9sb2FkZXJfbGliX2luZGV4X2pzX3Z1ZV9sb2FkZXJfb3B0aW9uc194Yl90YWJsZV9ib2R5X3Z1ZV92dWVfdHlwZV9zY3JpcHRfbGFuZ190c19fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsIl9ub2RlX21vZHVsZXNfYmFiZWxfbG9hZGVyX2xpYl9pbmRleF9qc19ub2RlX21vZHVsZXNfdHNfbG9hZGVyX2luZGV4X2pzX3JlZl8wXzFfbm9kZV9tb2R1bGVzX3Z1ZV9sb2FkZXJfbGliX2luZGV4X2pzX3Z1ZV9sb2FkZXJfb3B0aW9uc194Yl90YWJsZV9ib2R5X3Z1ZV92dWVfdHlwZV9zY3JpcHRfbGFuZ190c19fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0IiwiWGJUYWJsZUJvZHkiLCJyb3dDaGVja2VkIiwicm93RGlzYWJsZWQiLCJyb3dFeHBhbmRlZCIsIkNlbGwiLCJfeGJDZWxsMiIsIkV4cGFuZCIsIl9leHBhbmQyIiwiWGJUYWJsZVRyIiwiX3hiVGFibGVUcjIiLCJfbm9kZV9tb2R1bGVzX2JhYmVsX2xvYWRlcl9saWJfaW5kZXhfanNfbm9kZV9tb2R1bGVzX3RzX2xvYWRlcl9pbmRleF9qc19yZWZfMF8xX25vZGVfbW9kdWxlc192dWVfbG9hZGVyX2xpYl9pbmRleF9qc192dWVfbG9hZGVyX29wdGlvbnNfeGJfdGFibGVfdHJfdnVlX3Z1ZV90eXBlX3NjcmlwdF9sYW5nX3RzX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiX25vZGVfbW9kdWxlc19iYWJlbF9sb2FkZXJfbGliX2luZGV4X2pzX25vZGVfbW9kdWxlc190c19sb2FkZXJfaW5kZXhfanNfcmVmXzBfMV9ub2RlX21vZHVsZXNfdnVlX2xvYWRlcl9saWJfaW5kZXhfanNfdnVlX2xvYWRlcl9vcHRpb25zX3hiX3RhYmxlX3RyX3Z1ZV92dWVfdHlwZV9zY3JpcHRfbGFuZ190c19fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0Iiwicm93Q2xhc3NlcyIsIl9ub2RlX21vZHVsZXNfYmFiZWxfbG9hZGVyX2xpYl9pbmRleF9qc19ub2RlX21vZHVsZXNfdHNfbG9hZGVyX2luZGV4X2pzX3JlZl8wXzFfbm9kZV9tb2R1bGVzX3Z1ZV9sb2FkZXJfbGliX2luZGV4X2pzX3Z1ZV9sb2FkZXJfb3B0aW9uc194Yl9jZWxsX3Z1ZV92dWVfdHlwZV9zY3JpcHRfbGFuZ190c19fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsIl9ub2RlX21vZHVsZXNfYmFiZWxfbG9hZGVyX2xpYl9pbmRleF9qc19ub2RlX21vZHVsZXNfdHNfbG9hZGVyX2luZGV4X2pzX3JlZl8wXzFfbm9kZV9tb2R1bGVzX3Z1ZV9sb2FkZXJfbGliX2luZGV4X2pzX3Z1ZV9sb2FkZXJfb3B0aW9uc194Yl9jZWxsX3Z1ZV92dWVfdHlwZV9zY3JpcHRfbGFuZ190c19fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0IiwiWGJUYWJsZUNlbGwiLCJyZW5kZXJUeXBlIiwiZWxsaXBzaXMiLCJleHBhbmRlZCIsIkljb24iLCJfbm9kZV9tb2R1bGVzX2JhYmVsX2xvYWRlcl9saWJfaW5kZXhfanNfbm9kZV9tb2R1bGVzX3RzX2xvYWRlcl9pbmRleF9qc19yZWZfMF8xX25vZGVfbW9kdWxlc192dWVfbG9hZGVyX2xpYl9pbmRleF9qc192dWVfbG9hZGVyX29wdGlvbnNfeGJfdGV4dF92dWVfdnVlX3R5cGVfc2NyaXB0X2xhbmdfdHNfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJfbm9kZV9tb2R1bGVzX2JhYmVsX2xvYWRlcl9saWJfaW5kZXhfanNfbm9kZV9tb2R1bGVzX3RzX2xvYWRlcl9pbmRleF9qc19yZWZfMF8xX25vZGVfbW9kdWxlc192dWVfbG9hZGVyX2xpYl9pbmRleF9qc192dWVfbG9hZGVyX29wdGlvbnNfeGJfdGV4dF92dWVfdnVlX3R5cGVfc2NyaXB0X2xhbmdfdHNfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCIsIlhiVGV4dCIsInRleHRWYWx1ZSIsImhlaWdodE51bSIsInJvd3MiLCJtYXhOdW0iLCJ0ZXh0YXJlYUNoYW5nZSIsImF1dG9zaXplIiwidGV4dGFyZWFIdG1sIiwiX3Njcm9sbEhlaWdodCIsIm1pbkhlaWdodCIsIm1heEhlaWdodCIsImNsZWFyQ2xpY2siLCJzdWZmaXhJY29uIiwicHJlZml4SWNvbiIsIl9ub2RlX21vZHVsZXNfYmFiZWxfbG9hZGVyX2xpYl9pbmRleF9qc19ub2RlX21vZHVsZXNfdHNfbG9hZGVyX2luZGV4X2pzX3JlZl8wXzFfbm9kZV9tb2R1bGVzX3Z1ZV9sb2FkZXJfbGliX2luZGV4X2pzX3Z1ZV9sb2FkZXJfb3B0aW9uc194Yl91ZWRpdG9yX3Z1ZV92dWVfdHlwZV9zY3JpcHRfbGFuZ190c19fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsIl9ub2RlX21vZHVsZXNfYmFiZWxfbG9hZGVyX2xpYl9pbmRleF9qc19ub2RlX21vZHVsZXNfdHNfbG9hZGVyX2luZGV4X2pzX3JlZl8wXzFfbm9kZV9tb2R1bGVzX3Z1ZV9sb2FkZXJfbGliX2luZGV4X2pzX3Z1ZV9sb2FkZXJfb3B0aW9uc194Yl91ZWRpdG9yX3Z1ZV92dWVfdHlwZV9zY3JpcHRfbGFuZ190c19fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0IiwiWGJVZWRpdG9yIiwiaW5zdGFuY2UiLCJyYW5kb21OdW1iZXIiLCJkZWZhdWx0Q29uZmlnIiwiaW5pdGlhbEZyYW1lSGVpZ2h0Iiwic2VydmVyVXJsIiwiVUVESVRPUl9IT01FX1VSTCIsInRvb2xiYXJzIiwiekluZGV4IiwiYXV0b0hlaWdodEVuYWJsZWQiLCJVRSIsImluaXRVZWRpdG9yIiwibG9hZFVlZGl0b3JKcyIsInRoYXQiLCJzdWJzdHJpbmciLCJnZXRFZGl0b3IiLCJhZGRMaXN0ZW5lciIsImpzVXJsIiwibGFuZyIsInNlcmllc0xvYWRTY3JpcHRzIiwiYWRkQ29udGVudCIsInNldENvbnRlbnQiLCJzZXRFbXB0eUNvbnRlbnQiLCJpbnNlcnRIdG1sIiwiZXhlY0NvbW1hbmQiLCJnZXRQbGFpbkNvbnRlbnQiLCJnZXRQbGFpblR4dCIsImdldEh0bWxTb3VyY2UiLCJnZXRDb250ZW50IiwieGJCdXR0b24iLCJwYXJhbGxlbExvYWRTY3JpcHRzIiwic2NyaXB0cyIsIkhFQUQiLCJkb2N1bWVudEVsZW1lbnQiLCJsb2FkZWQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWN1cnNpdmVMb2FkIiwibG9nIiwiYXR0YWNoRXZlbnQiLCJkZXRhY2hFdmVudCIsInhiQ2hlY2tib3giLCJoaWRlIiwiJGV4cG9ydCIsIm93biIsIm91dCIsIklTX0ZPUkNFRCIsIkYiLCJJU19HTE9CQUwiLCJHIiwiSVNfU1RBVElDIiwiUyIsIklTX1BST1RPIiwiSVNfQklORCIsIkIiLCJJU19XUkFQIiwiVyIsImV4cFByb3RvIiwiQyIsInZpcnR1YWwiLCJSIiwiVSIsInZhbHVlT2YiLCJzaGFyZWQiLCJjb3B5cmlnaHQiLCJUQUciLCJzdGF0IiwiTElCUkFSWSIsIndrc0V4dCIsIiRTeW1ib2wiLCJNYXAiLCJhcnJheUxpa2VLZXlzIiwiYmFzZUtleXMiLCJpc0FycmF5TGlrZSIsImZ1bmMiLCJmcmVlRXhwb3J0cyIsImZyZWVNb2R1bGUiLCJmcmVlUHJvY2VzcyIsInByb2Nlc3MiLCJub2RlVXRpbCIsInR5cGVzIiwicmVxdWlyZSIsIm9iamVjdFByb3RvIiwiYXJyYXlGaWx0ZXIiLCJzdHViQXJyYXkiLCJuYXRpdmVHZXRTeW1ib2xzIiwiZ2V0U3ltYm9scyIsInN5bWJvbCIsIkRhdGFWaWV3IiwiV2Vha01hcCIsImJhc2VHZXRUYWciLCJ0b1NvdXJjZSIsImRhdGFWaWV3Q3RvclN0cmluZyIsIm1hcEN0b3JTdHJpbmciLCJwcm9taXNlQ3RvclN0cmluZyIsInNldEN0b3JTdHJpbmciLCJ3ZWFrTWFwQ3RvclN0cmluZyIsImdldFRhZyIsIkFycmF5QnVmZmVyIiwiY3RvclN0cmluZyIsIlVpbnQ4QXJyYXkiLCJhcnJheUJ1ZmZlciIsImJ5dGVMZW5ndGgiLCJfaCIsIl93aXRoU3RyaXBwZWQiLCJfdm0iLCJsYWJlbFN0eWxlcyIsImZvciIsImxhYmVsRm9yIiwiY29udGVudFN0eWxlcyIsInNob3dNZXNzYWdlIiwiY2xhc3Nlc1RleHREaXYiLCJjbGFzc2VzVGV4dCIsImlucHV0U3R5bGUiLCJwbGFjZUhvbGRlciIsInJlYWRvbmx5IiwibWF4bGVuZ3RoIiwiaW5wdXQiLCJjbGFzc2VzVGV4dGFyZWEiLCJjbGFzc2VkUmlnaHRJY29uIiwiY2xpY2siLCJjbGFzc2VzQ2xvc2VJY29uIiwiY2xhc3Nlc1N1Y2Nlc3NJY29uIiwiY2xhc3Nlc0ZhaWxJY29uIiwiY2xhc3NlZExlZnRJY29uIiwiaWNvblN0eWxlIiwiaWNvbiIsIndyYXBDbGFzc2VzIiwibW91c2V3aGVlbCIsInByZWZpeC1jbHMiLCJ0YWJsZUhlYWRlclN0eWxlIiwiY29sdW1uLXJvd3MiLCJvYmotZGF0YSIsImNvbHVtbnMtd2lkdGgiLCJsb2NhbGVOb0RhdGFUZXh0IiwibG9jYWxlTm9GaWx0ZXJlZERhdGFUZXh0IiwiYm9keVN0eWxlIiwidGFibGVTdHlsZSIsImNlbGxzcGFjaW5nIiwiY2VsbHBhZGRpbmciLCJmaXhlZFRhYmxlU3R5bGUiLCJmaXhlZEhlYWRlckNsYXNzZXMiLCJmaXhlZC1jb2x1bW4tcm93cyIsImZpeGVkQm9keVN0eWxlIiwiRE9NTW91c2VTY3JvbGwiLCJmaXhlZFJpZ2h0VGFibGVTdHlsZSIsImZpeGVkUmlnaHRIZWFkZXJTdHlsZSIsImNsYXNzZXNEaXYiLCJjbGFzc2VzSW5wdXQiLCJjbGFzc2VzU2VhcmNoRGl2IiwiY2xhc3Nlc1NlYXJjaERpdkhpZGRlbiIsInJhZGlvQ2xhc3NlcyIsImlubmVyQ2xhc3NlcyIsImlucHV0Q2xhc3NlcyIsImJsdXIiLCJtYXNrQ2xhc3NlcyIsIm1haW5TdHlsZXMiLCJmb290ZXJIaWRlIiwibG9jYWxlT2tUZXh0IiwibG9jYWxlQ2FuY2VsVGV4dCIsImxvYWRTaG93IiwiY3VzdG9tQ2xhc3MiLCJsb2FkQ29sb3IiLCJsb2FkU2l6ZSIsInNob3dUeHQiLCJsb2NhbGVMb2FkVGV4dCIsIndob2xlQ2xhc3NlcyIsImlucHV0RGl2Q2xhc3NlcyIsImFycm93RGl2Q2xhc3NlcyIsImFycm93RG93bkNsYXNzZXMiLCJhcnJvd0NsYXNzZXMiLCJzcGFuIiwiY2hlY2tib3hDbGFzc2VzIiwiJCRhIiwiJCRlbCIsIiQkYyIsIiQkdiIsIiQkaSIsImFmdGVyLWxlYXZlIiwiJHJvdXRlIiwiY29uZiIsInNldENlbGxXaWR0aCIsImFsaWduQ2xzIiwiY29sc3BhbiIsImNvbFNwYW4iLCJyb3dzcGFuIiwicm93U3BhbiIsIm9uLWNoYW5nZSIsIl9vYmoiLCJpc1BvcHBlclNob3ciLCJwbGFjZW1lbnQiLCJwb3BwZXItY2xhc3MiLCJ0cmFuc2ZlciIsIm9uLXBvcHBlci1oaWRlIiwiZmlsdGVycyIsIm1vdXNlZW50ZXIiLCJzdG9wUHJvcGFnYXRpb24iLCJtb3VzZWxlYXZlIiwiZGJsY2xpY2siLCJuYXR1cmFsLWluZGV4IiwiZXhwYW5kUmVuZGVyIiwibmF0dXJhbEluZGV4IiwiX2Rpc2FibGVFeHBhbmQiLCJleHBhbmRDbHMiLCJncm91cHMiLCJmb2xkZXIiLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyIsIkxBUkdFX0FSUkFZX1NJWkUiLCJDT1JFX0VSUk9SX1RFWFQiLCJGVU5DX0VSUk9SX1RFWFQiLCJIQVNIX1VOREVGSU5FRCIsIk1BWF9NRU1PSVpFX1NJWkUiLCJQTEFDRUhPTERFUiIsIkNMT05FX0RFRVBfRkxBRyIsIkNMT05FX0ZMQVRfRkxBRyIsIkNMT05FX1NZTUJPTFNfRkxBRyIsIkNPTVBBUkVfUEFSVElBTF9GTEFHIiwiQ09NUEFSRV9VTk9SREVSRURfRkxBRyIsIldSQVBfQklORF9GTEFHIiwiV1JBUF9CSU5EX0tFWV9GTEFHIiwiV1JBUF9DVVJSWV9CT1VORF9GTEFHIiwiV1JBUF9DVVJSWV9GTEFHIiwiV1JBUF9DVVJSWV9SSUdIVF9GTEFHIiwiV1JBUF9QQVJUSUFMX0ZMQUciLCJXUkFQX1BBUlRJQUxfUklHSFRfRkxBRyIsIldSQVBfQVJZX0ZMQUciLCJXUkFQX1JFQVJHX0ZMQUciLCJXUkFQX0ZMSVBfRkxBRyIsIkRFRkFVTFRfVFJVTkNfTEVOR1RIIiwiREVGQVVMVF9UUlVOQ19PTUlTU0lPTiIsIkhPVF9DT1VOVCIsIkhPVF9TUEFOIiwiTEFaWV9GSUxURVJfRkxBRyIsIkxBWllfTUFQX0ZMQUciLCJJTkZJTklUWSIsIk1BWF9TQUZFX0lOVEVHRVIiLCJNQVhfSU5URUdFUiIsIk5BTiIsIk1BWF9BUlJBWV9MRU5HVEgiLCJNQVhfQVJSQVlfSU5ERVgiLCJIQUxGX01BWF9BUlJBWV9MRU5HVEgiLCJ3cmFwRmxhZ3MiLCJhcmdzVGFnIiwiYXJyYXlUYWciLCJhc3luY1RhZyIsImJvb2xUYWciLCJkYXRlVGFnIiwiZG9tRXhjVGFnIiwiZXJyb3JUYWciLCJmdW5jVGFnIiwiZ2VuVGFnIiwibWFwVGFnIiwibnVtYmVyVGFnIiwib2JqZWN0VGFnIiwicHJveHlUYWciLCJyZWdleHBUYWciLCJzZXRUYWciLCJzdHJpbmdUYWciLCJzeW1ib2xUYWciLCJ3ZWFrTWFwVGFnIiwid2Vha1NldFRhZyIsImFycmF5QnVmZmVyVGFnIiwiZGF0YVZpZXdUYWciLCJmbG9hdDMyVGFnIiwiZmxvYXQ2NFRhZyIsImludDhUYWciLCJpbnQxNlRhZyIsImludDMyVGFnIiwidWludDhUYWciLCJ1aW50OENsYW1wZWRUYWciLCJ1aW50MTZUYWciLCJ1aW50MzJUYWciLCJyZUVtcHR5U3RyaW5nTGVhZGluZyIsInJlRW1wdHlTdHJpbmdNaWRkbGUiLCJyZUVtcHR5U3RyaW5nVHJhaWxpbmciLCJyZUVzY2FwZWRIdG1sIiwicmVVbmVzY2FwZWRIdG1sIiwicmVIYXNFc2NhcGVkSHRtbCIsInJlSGFzVW5lc2NhcGVkSHRtbCIsInJlRXNjYXBlIiwicmVFdmFsdWF0ZSIsInJlSW50ZXJwb2xhdGUiLCJyZUlzRGVlcFByb3AiLCJyZUlzUGxhaW5Qcm9wIiwicmVQcm9wTmFtZSIsInJlUmVnRXhwQ2hhciIsInJlSGFzUmVnRXhwQ2hhciIsInJlVHJpbSIsInJlVHJpbVN0YXJ0IiwicmVUcmltRW5kIiwicmVXcmFwQ29tbWVudCIsInJlV3JhcERldGFpbHMiLCJyZVNwbGl0RGV0YWlscyIsInJlQXNjaWlXb3JkIiwicmVFc2NhcGVDaGFyIiwicmVFc1RlbXBsYXRlIiwicmVGbGFncyIsInJlSXNCYWRIZXgiLCJyZUlzQmluYXJ5IiwicmVJc0hvc3RDdG9yIiwicmVJc09jdGFsIiwicmVJc1VpbnQiLCJyZUxhdGluIiwicmVOb01hdGNoIiwicmVVbmVzY2FwZWRTdHJpbmciLCJyc0NvbWJvUmFuZ2UiLCJyc0NvbWJvTWFya3NSYW5nZSIsInJzQnJlYWtSYW5nZSIsInJzTWF0aE9wUmFuZ2UiLCJyc0FzdHJhbCIsInJzQnJlYWsiLCJyc0NvbWJvIiwicnNEaWdpdHMiLCJyc0RpbmdiYXQiLCJyc0xvd2VyIiwicnNNaXNjIiwicnNGaXR6IiwicnNOb25Bc3RyYWwiLCJyc1JlZ2lvbmFsIiwicnNTdXJyUGFpciIsInJzVXBwZXIiLCJyc01pc2NMb3dlciIsInJzTWlzY1VwcGVyIiwicmVPcHRNb2QiLCJyc1NlcSIsInJzRW1vamkiLCJyc1N5bWJvbCIsInJlQXBvcyIsInJlQ29tYm9NYXJrIiwicmVVbmljb2RlIiwicmVVbmljb2RlV29yZCIsInJlSGFzVW5pY29kZSIsInJlSGFzVW5pY29kZVdvcmQiLCJjb250ZXh0UHJvcHMiLCJ0ZW1wbGF0ZUNvdW50ZXIiLCJ0eXBlZEFycmF5VGFncyIsImNsb25lYWJsZVRhZ3MiLCJzdHJpbmdFc2NhcGVzIiwiXFwiLCInIiwiXG4iLCJcciIsIuKAqCIsIuKAqSIsImZyZWVQYXJzZUZsb2F0IiwiZnJlZVBhcnNlSW50IiwibW9kdWxlRXhwb3J0cyIsIm5vZGVJc0FycmF5QnVmZmVyIiwiaXNBcnJheUJ1ZmZlciIsIm5vZGVJc0RhdGUiLCJpc0RhdGUiLCJub2RlSXNNYXAiLCJpc01hcCIsIm5vZGVJc1JlZ0V4cCIsIm5vZGVJc1NldCIsImlzU2V0Iiwibm9kZUlzVHlwZWRBcnJheSIsImlzVHlwZWRBcnJheSIsImFycmF5QWdncmVnYXRvciIsIml0ZXJhdGVlIiwiYWNjdW11bGF0b3IiLCJhcnJheUVhY2giLCJhcnJheUVhY2hSaWdodCIsImFycmF5RXZlcnkiLCJwcmVkaWNhdGUiLCJyZXNJbmRleCIsImFycmF5SW5jbHVkZXMiLCJiYXNlSW5kZXhPZiIsImFycmF5SW5jbHVkZXNXaXRoIiwiY29tcGFyYXRvciIsImFycmF5TWFwIiwiYXJyYXlQdXNoIiwidmFsdWVzIiwiYXJyYXlSZWR1Y2UiLCJpbml0QWNjdW0iLCJhcnJheVJlZHVjZVJpZ2h0IiwiYXJyYXlTb21lIiwiYXNjaWlTaXplIiwiYmFzZVByb3BlcnR5IiwiYmFzZUZpbmRLZXkiLCJjb2xsZWN0aW9uIiwiZWFjaEZ1bmMiLCJiYXNlRmluZEluZGV4IiwiZnJvbUluZGV4IiwiZnJvbVJpZ2h0Iiwic3RyaWN0SW5kZXhPZiIsImJhc2VJc05hTiIsImJhc2VJbmRleE9mV2l0aCIsImJhc2VNZWFuIiwiYmFzZVN1bSIsImJhc2VQcm9wZXJ0eU9mIiwiYmFzZVJlZHVjZSIsImJhc2VUaW1lcyIsImJhc2VVbmFyeSIsImJhc2VWYWx1ZXMiLCJjYWNoZUhhcyIsImNoYXJzU3RhcnRJbmRleCIsInN0clN5bWJvbHMiLCJjaHJTeW1ib2xzIiwiY2hhcnNFbmRJbmRleCIsImRlYnVyckxldHRlciIsIsOAIiwiw4EiLCLDgiIsIsODIiwiw4QiLCLDhSIsIsOgIiwiw6EiLCLDoiIsIsOjIiwiw6QiLCLDpSIsIsOHIiwiw6ciLCLDkCIsIsOwIiwiw4giLCLDiSIsIsOKIiwiw4siLCLDqCIsIsOpIiwiw6oiLCLDqyIsIsOMIiwiw40iLCLDjiIsIsOPIiwiw6wiLCLDrSIsIsOuIiwiw68iLCLDkSIsIsOxIiwiw5IiLCLDkyIsIsOUIiwiw5UiLCLDliIsIsOYIiwiw7IiLCLDsyIsIsO0Iiwiw7UiLCLDtiIsIsO4Iiwiw5kiLCLDmiIsIsObIiwiw5wiLCLDuSIsIsO6Iiwiw7siLCLDvCIsIsOdIiwiw70iLCLDvyIsIsOGIiwiw6YiLCLDniIsIsO+Iiwiw58iLCLEgCIsIsSCIiwixIQiLCLEgSIsIsSDIiwixIUiLCLEhiIsIsSIIiwixIoiLCLEjCIsIsSHIiwixIkiLCLEiyIsIsSNIiwixI4iLCLEkCIsIsSPIiwixJEiLCLEkiIsIsSUIiwixJYiLCLEmCIsIsSaIiwixJMiLCLElSIsIsSXIiwixJkiLCLEmyIsIsScIiwixJ4iLCLEoCIsIsSiIiwixJ0iLCLEnyIsIsShIiwixKMiLCLEpCIsIsSmIiwixKUiLCLEpyIsIsSoIiwixKoiLCLErCIsIsSuIiwixLAiLCLEqSIsIsSrIiwixK0iLCLEryIsIsSxIiwixLQiLCLEtSIsIsS2IiwixLciLCLEuCIsIsS5IiwixLsiLCLEvSIsIsS/IiwixYEiLCLEuiIsIsS8IiwixL4iLCLFgCIsIsWCIiwixYMiLCLFhSIsIsWHIiwixYoiLCLFhCIsIsWGIiwixYgiLCLFiyIsIsWMIiwixY4iLCLFkCIsIsWNIiwixY8iLCLFkSIsIsWUIiwixZYiLCLFmCIsIsWVIiwixZciLCLFmSIsIsWaIiwixZwiLCLFniIsIsWgIiwixZsiLCLFnSIsIsWfIiwixaEiLCLFoiIsIsWkIiwixaYiLCLFoyIsIsWlIiwixaciLCLFqCIsIsWqIiwixawiLCLFriIsIsWwIiwixbIiLCLFqSIsIsWrIiwixa0iLCLFryIsIsWxIiwixbMiLCLFtCIsIsW1IiwixbYiLCLFtyIsIsW4IiwixbkiLCLFuyIsIsW9IiwixboiLCLFvCIsIsW+IiwixLIiLCLEsyIsIsWSIiwixZMiLCLFiSIsIsW/IiwiZXNjYXBlSHRtbENoYXIiLCImIiwiPCIsIj4iLCJcIiIsImVzY2FwZVN0cmluZ0NoYXIiLCJjaHIiLCJoYXNVbmljb2RlIiwic3RyaW5nIiwibWFwVG9BcnJheSIsIm92ZXJBcmciLCJhcmciLCJyZXBsYWNlSG9sZGVycyIsInNldFRvQXJyYXkiLCJzZXRUb1BhaXJzIiwic3RyaW5nU2l6ZSIsInVuaWNvZGVTaXplIiwic3RyaW5nVG9BcnJheSIsInVuaWNvZGVUb0FycmF5IiwiYXNjaWlUb0FycmF5IiwidW5lc2NhcGVIdG1sQ2hhciIsIiZhbXA7IiwiJmx0OyIsIiZndDsiLCImcXVvdDsiLCImIzM5OyIsInJ1bkluQ29udGV4dCIsImRlZmF1bHRzIiwicGljayIsImZ1bmNQcm90byIsImNvcmVKc0RhdGEiLCJmdW5jVG9TdHJpbmciLCJpZENvdW50ZXIiLCJtYXNrU3JjS2V5IiwiSUVfUFJPVE8iLCJuYXRpdmVPYmplY3RUb1N0cmluZyIsIm9iamVjdEN0b3JTdHJpbmciLCJvbGREYXNoIiwicmVJc05hdGl2ZSIsIkJ1ZmZlciIsImFsbG9jVW5zYWZlIiwiZ2V0UHJvdG90eXBlIiwib2JqZWN0Q3JlYXRlIiwic3ByZWFkYWJsZVN5bWJvbCIsImlzQ29uY2F0U3ByZWFkYWJsZSIsInN5bUl0ZXJhdG9yIiwiY3R4Q2xlYXJUaW1lb3V0IiwiY3R4Tm93IiwiY3R4U2V0VGltZW91dCIsIm5hdGl2ZUNlaWwiLCJuYXRpdmVGbG9vciIsIm5hdGl2ZUlzQnVmZmVyIiwiaXNCdWZmZXIiLCJuYXRpdmVJc0Zpbml0ZSIsIm5hdGl2ZUpvaW4iLCJuYXRpdmVLZXlzIiwibmF0aXZlTWF4IiwibmF0aXZlTWluIiwibmF0aXZlTm93IiwibmF0aXZlUGFyc2VJbnQiLCJuYXRpdmVSYW5kb20iLCJuYXRpdmVSZXZlcnNlIiwicmV2ZXJzZSIsIm1ldGFNYXAiLCJyZWFsTmFtZXMiLCJzeW1ib2xQcm90byIsInN5bWJvbFZhbHVlT2YiLCJzeW1ib2xUb1N0cmluZyIsImxvZGFzaCIsImlzT2JqZWN0TGlrZSIsIkxhenlXcmFwcGVyIiwiTG9kYXNoV3JhcHBlciIsIndyYXBwZXJDbG9uZSIsImJhc2VDcmVhdGUiLCJiYXNlTG9kYXNoIiwiY2hhaW5BbGwiLCJfX3dyYXBwZWRfXyIsIl9fYWN0aW9uc19fIiwiX19jaGFpbl9fIiwiX19pbmRleF9fIiwiX192YWx1ZXNfXyIsIl9fZGlyX18iLCJfX2ZpbHRlcmVkX18iLCJfX2l0ZXJhdGVlc19fIiwiX190YWtlQ291bnRfXyIsIl9fdmlld3NfXyIsIkhhc2giLCJNYXBDYWNoZSIsIlNldENhY2hlIiwiU3RhY2siLCJpbmhlcml0ZWQiLCJpc0FyciIsImlzQXJnIiwiaXNBcmd1bWVudHMiLCJpc0J1ZmYiLCJpc1R5cGUiLCJza2lwSW5kZXhlcyIsImlzSW5kZXgiLCJhcnJheVNhbXBsZSIsImJhc2VSYW5kb20iLCJhcnJheVNhbXBsZVNpemUiLCJzaHVmZmxlU2VsZiIsImNvcHlBcnJheSIsImJhc2VDbGFtcCIsImFycmF5U2h1ZmZsZSIsImFzc2lnbk1lcmdlVmFsdWUiLCJvYmpWYWx1ZSIsImFzc29jSW5kZXhPZiIsImJhc2VBZ2dyZWdhdG9yIiwiYmFzZUVhY2giLCJiYXNlQXNzaWduIiwiY29weU9iamVjdCIsImJhc2VBdCIsInNraXAiLCJsb3dlciIsInVwcGVyIiwiYmFzZUNsb25lIiwiYml0bWFzayIsInN0YWNrIiwiaXNEZWVwIiwiaXNGbGF0IiwiaXNGdWxsIiwiaW5pdENsb25lQXJyYXkiLCJpc0Z1bmMiLCJjbG9uZUJ1ZmZlciIsImluaXRDbG9uZU9iamVjdCIsImdldFN5bWJvbHNJbiIsImNvcHlTeW1ib2xzSW4iLCJrZXlzSW4iLCJiYXNlQXNzaWduSW4iLCJjb3B5U3ltYm9scyIsImNsb25lQXJyYXlCdWZmZXIiLCJkYXRhVmlldyIsImJ1ZmZlciIsImJ5dGVPZmZzZXQiLCJjbG9uZURhdGFWaWV3IiwiY2xvbmVUeXBlZEFycmF5IiwicmVnZXhwIiwiY2xvbmVSZWdFeHAiLCJjbG9uZVN5bWJvbCIsImluaXRDbG9uZUJ5VGFnIiwic3RhY2tlZCIsInN1YlZhbHVlIiwiZ2V0QWxsS2V5c0luIiwiZ2V0QWxsS2V5cyIsImJhc2VDb25mb3Jtc1RvIiwiYmFzZURlbGF5Iiwid2FpdCIsImJhc2VEaWZmZXJlbmNlIiwiaXNDb21tb24iLCJ2YWx1ZXNMZW5ndGgiLCJ2YWx1ZXNJbmRleCIsInRlbXBsYXRlU2V0dGluZ3MiLCJlc2NhcGUiLCJpbnRlcnBvbGF0ZSIsInZhcmlhYmxlIiwiaW1wb3J0cyIsImdldE1hcERhdGEiLCJwYWlycyIsImNyZWF0ZUJhc2VFYWNoIiwiYmFzZUZvck93biIsImJhc2VFYWNoUmlnaHQiLCJiYXNlRm9yT3duUmlnaHQiLCJiYXNlRXZlcnkiLCJiYXNlRXh0cmVtdW0iLCJpc1N5bWJvbCIsImJhc2VGaWx0ZXIiLCJiYXNlRmxhdHRlbiIsImRlcHRoIiwiaXNTdHJpY3QiLCJpc0ZsYXR0ZW5hYmxlIiwiYmFzZUZvciIsImNyZWF0ZUJhc2VGb3IiLCJiYXNlRm9yUmlnaHQiLCJiYXNlRnVuY3Rpb25zIiwiaXNGdW5jdGlvbiIsImJhc2VHZXQiLCJjYXN0UGF0aCIsInRvS2V5IiwiYmFzZUdldEFsbEtleXMiLCJrZXlzRnVuYyIsInN5bWJvbHNGdW5jIiwiaXNPd24iLCJ1bm1hc2tlZCIsImJhc2VHdCIsIm90aGVyIiwiYmFzZUhhcyIsImJhc2VIYXNJbiIsImJhc2VJbnRlcnNlY3Rpb24iLCJhcnJheXMiLCJvdGhMZW5ndGgiLCJvdGhJbmRleCIsImNhY2hlcyIsIm1heExlbmd0aCIsIkluZmluaXR5IiwiYmFzZUludm9rZSIsImJhc2VJc0FyZ3VtZW50cyIsImJhc2VJc0VxdWFsIiwiZXF1YWxGdW5jIiwib2JqSXNBcnIiLCJvdGhJc0FyciIsIm9ialRhZyIsIm90aFRhZyIsIm9iaklzT2JqIiwib3RoSXNPYmoiLCJpc1NhbWVUYWciLCJlcXVhbEFycmF5cyIsImNvbnZlcnQiLCJpc1BhcnRpYWwiLCJlcXVhbEJ5VGFnIiwib2JqSXNXcmFwcGVkIiwib3RoSXNXcmFwcGVkIiwib2JqVW53cmFwcGVkIiwib3RoVW53cmFwcGVkIiwib2JqUHJvcHMiLCJvYmpMZW5ndGgiLCJza2lwQ3RvciIsIm90aFZhbHVlIiwiY29tcGFyZWQiLCJvYmpDdG9yIiwib3RoQ3RvciIsImVxdWFsT2JqZWN0cyIsImJhc2VJc0VxdWFsRGVlcCIsImJhc2VJc01hdGNoIiwibWF0Y2hEYXRhIiwibm9DdXN0b21pemVyIiwic3JjVmFsdWUiLCJpc01hc2tlZCIsImJhc2VJdGVyYXRlZSIsImJhc2VNYXRjaGVzUHJvcGVydHkiLCJiYXNlTWF0Y2hlcyIsImlzUHJvdG90eXBlIiwiYmFzZUtleXNJbiIsIm5hdGl2ZUtleXNJbiIsImlzUHJvdG8iLCJiYXNlTHQiLCJiYXNlTWFwIiwiZ2V0TWF0Y2hEYXRhIiwibWF0Y2hlc1N0cmljdENvbXBhcmFibGUiLCJpc0tleSIsImlzU3RyaWN0Q29tcGFyYWJsZSIsImhhc0luIiwiYmFzZU1lcmdlIiwic3JjSW5kZXgiLCJtZXJnZUZ1bmMiLCJzYWZlR2V0IiwiaXNUeXBlZCIsImlzQXJyYXlMaWtlT2JqZWN0IiwidG9QbGFpbk9iamVjdCIsImJhc2VNZXJnZURlZXAiLCJiYXNlTnRoIiwiYmFzZU9yZGVyQnkiLCJpdGVyYXRlZXMiLCJvcmRlcnMiLCJnZXRJdGVyYXRlZSIsImNvbXBhcmVyIiwiYmFzZVNvcnRCeSIsImNyaXRlcmlhIiwib2JqQ3JpdGVyaWEiLCJvdGhDcml0ZXJpYSIsIm9yZGVyc0xlbmd0aCIsImNvbXBhcmVBc2NlbmRpbmciLCJjb21wYXJlTXVsdGlwbGUiLCJiYXNlUGlja0J5IiwiYmFzZVNldCIsImJhc2VQdWxsQWxsIiwiYmFzZVB1bGxBdCIsImluZGV4ZXMiLCJwcmV2aW91cyIsImJhc2VVbnNldCIsImJhc2VSZXBlYXQiLCJiYXNlUmVzdCIsInNldFRvU3RyaW5nIiwib3ZlclJlc3QiLCJiYXNlU2FtcGxlIiwiYmFzZVNhbXBsZVNpemUiLCJiYXNlU2V0RGF0YSIsImJhc2VTZXRUb1N0cmluZyIsImNvbnN0YW50IiwiYmFzZVNodWZmbGUiLCJiYXNlU2xpY2UiLCJiYXNlU29tZSIsImJhc2VTb3J0ZWRJbmRleCIsInJldEhpZ2hlc3QiLCJsb3ciLCJoaWdoIiwibWlkIiwiYmFzZVNvcnRlZEluZGV4QnkiLCJ2YWxJc05hTiIsInZhbElzTnVsbCIsInZhbElzU3ltYm9sIiwidmFsSXNVbmRlZmluZWQiLCJvdGhJc0RlZmluZWQiLCJvdGhJc051bGwiLCJvdGhJc1JlZmxleGl2ZSIsIm90aElzU3ltYm9sIiwic2V0TG93IiwiYmFzZVNvcnRlZFVuaXEiLCJiYXNlVG9OdW1iZXIiLCJiYXNlVG9TdHJpbmciLCJiYXNlVW5pcSIsImNyZWF0ZVNldCIsInNlZW5JbmRleCIsImJhc2VVcGRhdGUiLCJ1cGRhdGVyIiwiYmFzZVdoaWxlIiwiaXNEcm9wIiwiYmFzZVdyYXBwZXJWYWx1ZSIsImFjdGlvbnMiLCJhY3Rpb24iLCJiYXNlWG9yIiwiYmFzZVppcE9iamVjdCIsImFzc2lnbkZ1bmMiLCJ2YWxzTGVuZ3RoIiwiY2FzdEFycmF5TGlrZU9iamVjdCIsImNhc3RGdW5jdGlvbiIsInN0cmluZ1RvUGF0aCIsImNhc3RSZXN0IiwiY2FzdFNsaWNlIiwiY29weSIsInR5cGVkQXJyYXkiLCJ2YWxJc0RlZmluZWQiLCJ2YWxJc1JlZmxleGl2ZSIsImNvbXBvc2VBcmdzIiwicGFydGlhbHMiLCJob2xkZXJzIiwiaXNDdXJyaWVkIiwiYXJnc0luZGV4IiwiYXJnc0xlbmd0aCIsImhvbGRlcnNMZW5ndGgiLCJsZWZ0SW5kZXgiLCJsZWZ0TGVuZ3RoIiwicmFuZ2VMZW5ndGgiLCJpc1VuY3VycmllZCIsImNvbXBvc2VBcmdzUmlnaHQiLCJob2xkZXJzSW5kZXgiLCJyaWdodEluZGV4IiwicmlnaHRMZW5ndGgiLCJjcmVhdGVBZ2dyZWdhdG9yIiwiaW5pdGlhbGl6ZXIiLCJjcmVhdGVBc3NpZ25lciIsImFzc2lnbmVyIiwiZ3VhcmQiLCJpc0l0ZXJhdGVlQ2FsbCIsIml0ZXJhYmxlIiwiY3JlYXRlQ2FzZUZpcnN0IiwibWV0aG9kTmFtZSIsInRyYWlsaW5nIiwiY3JlYXRlQ29tcG91bmRlciIsIndvcmRzIiwiZGVidXJyIiwiY3JlYXRlQ3RvciIsInRoaXNCaW5kaW5nIiwiY3JlYXRlRmluZCIsImZpbmRJbmRleEZ1bmMiLCJjcmVhdGVGbG93IiwiZmxhdFJlc3QiLCJmdW5jcyIsInByZXJlcSIsInRocnUiLCJ3cmFwcGVyIiwiZ2V0RnVuY05hbWUiLCJmdW5jTmFtZSIsImlzTGF6aWFibGUiLCJwbGFudCIsImNyZWF0ZUh5YnJpZCIsInBhcnRpYWxzUmlnaHQiLCJob2xkZXJzUmlnaHQiLCJhcmdQb3MiLCJhcnkiLCJhcml0eSIsImlzQXJ5IiwiaXNCaW5kIiwiaXNCaW5kS2V5IiwiaXNGbGlwIiwiZ2V0SG9sZGVyIiwiaG9sZGVyc0NvdW50IiwiY291bnRIb2xkZXJzIiwibmV3SG9sZGVycyIsImNyZWF0ZVJlY3VycnkiLCJhcnJMZW5ndGgiLCJvbGRBcnJheSIsInJlb3JkZXIiLCJjcmVhdGVJbnZlcnRlciIsInRvSXRlcmF0ZWUiLCJiYXNlSW52ZXJ0ZXIiLCJjcmVhdGVNYXRoT3BlcmF0aW9uIiwib3BlcmF0b3IiLCJkZWZhdWx0VmFsdWUiLCJjcmVhdGVPdmVyIiwiYXJyYXlGdW5jIiwiY3JlYXRlUGFkZGluZyIsImNoYXJzIiwiY2hhcnNMZW5ndGgiLCJjcmVhdGVSYW5nZSIsInRvRmluaXRlIiwiYmFzZVJhbmdlIiwiY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbiIsIndyYXBGdW5jIiwiaXNDdXJyeSIsInNldERhdGEiLCJzZXRXcmFwVG9TdHJpbmciLCJjcmVhdGVSb3VuZCIsInByZWNpc2lvbiIsInRvSW50ZWdlciIsInBhaXIiLCJjcmVhdGVUb1BhaXJzIiwiYmFzZVRvUGFpcnMiLCJjcmVhdGVXcmFwIiwic3JjQml0bWFzayIsIm5ld0JpdG1hc2siLCJpc0NvbWJvIiwiY3JlYXRlQ3VycnkiLCJjcmVhdGVQYXJ0aWFsIiwiY3JlYXRlQmluZCIsImN1c3RvbURlZmF1bHRzQXNzaWduSW4iLCJjdXN0b21EZWZhdWx0c01lcmdlIiwiY3VzdG9tT21pdENsb25lIiwiYXJyVmFsdWUiLCJmbGF0dGVuIiwib3RoZXJGdW5jIiwiaGFzUGF0aCIsImhhc0Z1bmMiLCJpc0xlbmd0aCIsImlzTWFza2FibGUiLCJzdHViRmFsc2UiLCJvdGhlckFyZ3MiLCJzaG9ydE91dCIsInJlZmVyZW5jZSIsImRldGFpbHMiLCJpbnNlcnRXcmFwRGV0YWlscyIsInVwZGF0ZVdyYXBEZXRhaWxzIiwiZ2V0V3JhcERldGFpbHMiLCJjb3VudCIsImxhc3RDYWxsZWQiLCJzdGFtcCIsInJlbWFpbmluZyIsInJhbmQiLCJtZW1vaXplQ2FwcGVkIiwicXVvdGUiLCJzdWJTdHJpbmciLCJkaWZmZXJlbmNlQnkiLCJkaWZmZXJlbmNlV2l0aCIsImZpbmRMYXN0SW5kZXgiLCJpbnRlcnNlY3Rpb24iLCJtYXBwZWQiLCJpbnRlcnNlY3Rpb25CeSIsImludGVyc2VjdGlvbldpdGgiLCJwdWxsIiwicHVsbEFsbCIsInB1bGxBdCIsInVuaW9uIiwidW5pb25CeSIsInVuaW9uV2l0aCIsInVuemlwIiwidW56aXBXaXRoIiwid2l0aG91dCIsInhvciIsInhvckJ5IiwieG9yV2l0aCIsInppcCIsInppcFdpdGgiLCJjaGFpbiIsImludGVyY2VwdG9yIiwid3JhcHBlckF0IiwiY291bnRCeSIsImZpbmRMYXN0IiwiZm9yRWFjaFJpZ2h0IiwiZ3JvdXBCeSIsImludm9rZU1hcCIsImtleUJ5IiwicGFydGl0aW9uIiwic29ydEJ5IiwiYmluZEtleSIsImRlYm91bmNlIiwibGFzdEFyZ3MiLCJsYXN0VGhpcyIsIm1heFdhaXQiLCJ0aW1lcklkIiwibGFzdENhbGxUaW1lIiwibGFzdEludm9rZVRpbWUiLCJsZWFkaW5nIiwibWF4aW5nIiwiaW52b2tlRnVuYyIsInRpbWUiLCJzaG91bGRJbnZva2UiLCJ0aW1lU2luY2VMYXN0Q2FsbCIsInRpbWVyRXhwaXJlZCIsInRyYWlsaW5nRWRnZSIsInRpbWVXYWl0aW5nIiwicmVtYWluaW5nV2FpdCIsImRlYm91bmNlZCIsImlzSW52b2tpbmciLCJsZWFkaW5nRWRnZSIsImZsdXNoIiwiZGVmZXIiLCJyZXNvbHZlciIsIm1lbW9pemVkIiwiQ2FjaGUiLCJuZWdhdGUiLCJvdmVyQXJncyIsInRyYW5zZm9ybXMiLCJmdW5jc0xlbmd0aCIsInBhcnRpYWwiLCJwYXJ0aWFsUmlnaHQiLCJyZWFyZyIsImd0IiwiZ3RlIiwiaXNFcnJvciIsImlzSW50ZWdlciIsImlzTnVtYmVyIiwiaXNTdHJpbmciLCJsdCIsImx0ZSIsIml0ZXJhdG9yVG9BcnJheSIsInJlbWFpbmRlciIsInRvTGVuZ3RoIiwiaXNCaW5hcnkiLCJhc3NpZ25JbiIsImFzc2lnbkluV2l0aCIsImFzc2lnbldpdGgiLCJhdCIsInByb3BzSW5kZXgiLCJwcm9wc0xlbmd0aCIsImRlZmF1bHRzRGVlcCIsIm1lcmdlV2l0aCIsImludmVydCIsImludmVydEJ5IiwiaW52b2tlIiwibWVyZ2UiLCJvbWl0IiwiYmFzZVBpY2siLCJwaWNrQnkiLCJ0b1BhaXJzIiwidG9QYWlyc0luIiwid29yZCIsImtlYmFiQ2FzZSIsImxvd2VyQ2FzZSIsImxvd2VyRmlyc3QiLCJzbmFrZUNhc2UiLCJzdGFydENhc2UiLCJ1cHBlckNhc2UiLCJoYXNVbmljb2RlV29yZCIsInVuaWNvZGVXb3JkcyIsImFzY2lpV29yZHMiLCJhdHRlbXB0IiwiYmluZEFsbCIsIm1ldGhvZE5hbWVzIiwiZmxvdyIsImZsb3dSaWdodCIsIm1ldGhvZE9mIiwib3ZlciIsIm92ZXJFdmVyeSIsIm92ZXJTb21lIiwiYmFzZVByb3BlcnR5RGVlcCIsInJhbmdlIiwicmFuZ2VSaWdodCIsImF1Z2VuZCIsImFkZGVuZCIsImRpdmlkZSIsImRpdmlkZW5kIiwiZGl2aXNvciIsIm11bHRpcGx5IiwibXVsdGlwbGllciIsIm11bHRpcGxpY2FuZCIsInJvdW5kIiwic3VidHJhY3QiLCJtaW51ZW5kIiwic3VidHJhaGVuZCIsImFmdGVyIiwiY2FzdEFycmF5IiwiY29tcGFjdCIsImNvbmQiLCJjb25mb3JtcyIsImJhc2VDb25mb3JtcyIsInByb3BlcnRpZXMiLCJjdXJyeSIsImN1cnJ5UmlnaHQiLCJkcm9wIiwiZHJvcFJpZ2h0IiwiZHJvcFJpZ2h0V2hpbGUiLCJkcm9wV2hpbGUiLCJmaWxsIiwiYmFzZUZpbGwiLCJmbGF0TWFwIiwiZmxhdE1hcERlZXAiLCJmbGF0TWFwRGVwdGgiLCJmbGF0dGVuRGVlcCIsImZsYXR0ZW5EZXB0aCIsImZsaXAiLCJmcm9tUGFpcnMiLCJmdW5jdGlvbnMiLCJmdW5jdGlvbnNJbiIsIm1hcEtleXMiLCJtYXBWYWx1ZXMiLCJtYXRjaGVzUHJvcGVydHkiLCJudGhBcmciLCJvbWl0QnkiLCJvcmRlckJ5IiwicHJvcGVydHlPZiIsInB1bGxBbGxCeSIsInB1bGxBbGxXaXRoIiwicmVzdCIsInNhbXBsZVNpemUiLCJzZXRXaXRoIiwic2h1ZmZsZSIsInNvcnRlZFVuaXEiLCJzb3J0ZWRVbmlxQnkiLCJsaW1pdCIsInNwcmVhZCIsInRhaWwiLCJ0YWtlIiwidGFrZVJpZ2h0IiwidGFrZVJpZ2h0V2hpbGUiLCJ0YWtlV2hpbGUiLCJ0YXAiLCJ0aHJvdHRsZSIsInRvUGF0aCIsImlzQXJyTGlrZSIsInVuYXJ5IiwidW5pcSIsInVuaXFCeSIsInVuaXFXaXRoIiwidW5zZXQiLCJ1cGRhdGVXaXRoIiwidmFsdWVzSW4iLCJ3cmFwIiwiemlwT2JqZWN0IiwiemlwT2JqZWN0RGVlcCIsImVudHJpZXNJbiIsImV4dGVuZFdpdGgiLCJjbGFtcCIsImNsb25lRGVlcCIsImNsb25lRGVlcFdpdGgiLCJjbG9uZVdpdGgiLCJjb25mb3Jtc1RvIiwiZGVmYXVsdFRvIiwiZW5kc1dpdGgiLCJlc2NhcGVSZWdFeHAiLCJmaW5kS2V5IiwiZmluZExhc3RLZXkiLCJmb3JJbiIsImZvckluUmlnaHQiLCJmb3JPd24iLCJmb3JPd25SaWdodCIsImluUmFuZ2UiLCJiYXNlSW5SYW5nZSIsImlzQm9vbGVhbiIsImlzRWxlbWVudCIsImlzRW1wdHkiLCJpc0VxdWFsIiwiaXNFcXVhbFdpdGgiLCJpc01hdGNoIiwiaXNNYXRjaFdpdGgiLCJpc05pbCIsImlzTnVsbCIsImlzU2FmZUludGVnZXIiLCJpc1VuZGVmaW5lZCIsImlzV2Vha01hcCIsImlzV2Vha1NldCIsImxhc3RJbmRleE9mIiwic3RyaWN0TGFzdEluZGV4T2YiLCJtYXhCeSIsIm1lYW4iLCJtZWFuQnkiLCJtaW5CeSIsInN0dWJPYmplY3QiLCJzdHViU3RyaW5nIiwic3R1YlRydWUiLCJudGgiLCJub0NvbmZsaWN0IiwicGFkIiwic3RyTGVuZ3RoIiwicGFkRW5kIiwicGFkU3RhcnQiLCJyYWRpeCIsImZsb2F0aW5nIiwidGVtcCIsInJlZHVjZVJpZ2h0IiwicmVwZWF0Iiwic2FtcGxlIiwic29ydGVkSW5kZXgiLCJzb3J0ZWRJbmRleEJ5Iiwic29ydGVkSW5kZXhPZiIsInNvcnRlZExhc3RJbmRleCIsInNvcnRlZExhc3RJbmRleEJ5Iiwic29ydGVkTGFzdEluZGV4T2YiLCJzdGFydHNXaXRoIiwic3VtIiwic3VtQnkiLCJ0ZW1wbGF0ZSIsInNldHRpbmdzIiwiaXNFc2NhcGluZyIsImlzRXZhbHVhdGluZyIsImltcG9ydHNLZXlzIiwiaW1wb3J0c1ZhbHVlcyIsInJlRGVsaW1pdGVycyIsInNvdXJjZVVSTCIsImVzY2FwZVZhbHVlIiwiaW50ZXJwb2xhdGVWYWx1ZSIsImVzVGVtcGxhdGVWYWx1ZSIsImV2YWx1YXRlVmFsdWUiLCJ0aW1lcyIsInRvTG93ZXIiLCJ0b1NhZmVJbnRlZ2VyIiwidG9VcHBlciIsInRyaW1FbmQiLCJ0cmltU3RhcnQiLCJ0cnVuY2F0ZSIsIm9taXNzaW9uIiwic2VhcmNoIiwibmV3RW5kIiwidW5pcXVlSWQiLCJwcmVmaXgiLCJlYWNoIiwiZWFjaFJpZ2h0IiwiZmlyc3QiLCJWRVJTSU9OIiwiaXNGaWx0ZXIiLCJ0YWtlTmFtZSIsImRyb3BOYW1lIiwiY2hlY2tJdGVyYXRlZSIsImlzVGFrZXIiLCJsb2Rhc2hGdW5jIiwicmV0VW53cmFwcGVkIiwiaXNMYXp5IiwidXNlTGF6eSIsImlzSHlicmlkIiwiaXNVbndyYXBwZWQiLCJvbmx5TGF6eSIsImNoYWluTmFtZSIsImlzUmlnaHQiLCJ2aWV3IiwiZ2V0VmlldyIsIml0ZXJMZW5ndGgiLCJ0YWtlQ291bnQiLCJpdGVySW5kZXgiLCJjb21taXQiLCJ3cmFwcGVkIiwidG9KU09OIiwieGJDaGVja2JveEdyb3VwIiwidG9JT2JqZWN0IiwiYXJyYXlJbmRleE9mIiwibmFtZXMiLCJjb2YiLCJyZWRlZmluZSIsIkl0ZXJhdG9ycyIsIiRpdGVyQ3JlYXRlIiwic2V0VG9TdHJpbmdUYWciLCJJVEVSQVRPUiIsIkJVR0dZIiwicmV0dXJuVGhpcyIsIkJhc2UiLCJOQU1FIiwiQ29uc3RydWN0b3IiLCJERUZBVUxUIiwiSVNfU0VUIiwiRk9SQ0VEIiwiSXRlcmF0b3JQcm90b3R5cGUiLCJnZXRNZXRob2QiLCJraW5kIiwiREVGX1ZBTFVFUyIsIlZBTFVFU19CVUciLCIkbmF0aXZlIiwiJGRlZmF1bHQiLCIkZW50cmllcyIsIiRhbnlOYXRpdmUiLCJkUHMiLCJFbXB0eSIsImNyZWF0ZURpY3QiLCJpZnJhbWVEb2N1bWVudCIsImlmcmFtZSIsImNvbnRlbnRXaW5kb3ciLCJvcGVuIiwid3JpdGUiLCJQcm9wZXJ0aWVzIiwiaGlkZGVuS2V5cyIsInhiUG9wdGlwIiwiWGJUYWJsZU1peGluIiwiY2VsbENsYXNzTmFtZSIsImFsaWduIiwiZGV0ZWN0b3IiLCJhZ2VudCIsImlzQW55SWVWZXJzaW9uIiwiZGl2IiwidW5kZWYiLCJpc0xlZ2FjeU9wZXJhIiwib3BlcmEiLCJyZXF1aXJlQ29tcG9uZW50IiwiZmlsZU5hbWUiLCJjb21wb25lbnRDb25maWciLCIkbWVzc2FnZSIsIl9kZW1vQmxvY2syIiwiYXBwIiwicm91dGVyIiwiX3JvdXRlcjIiLCJfQXBwMiIsInNjb3BlIiwiVGltZW91dCIsImNsZWFyRm4iLCJfaWQiLCJfY2xlYXJGbiIsInVucmVmIiwiZW5yb2xsIiwibXNlY3MiLCJfaWRsZVRpbWVvdXRJZCIsIl9pZGxlVGltZW91dCIsInVuZW5yb2xsIiwiX3VucmVmQWN0aXZlIiwiX29uVGltZW91dCIsImNsZWFySW1tZWRpYXRlIiwicmVnaXN0ZXJJbW1lZGlhdGUiLCJuZXh0SGFuZGxlIiwidGFza3NCeUhhbmRsZSIsImN1cnJlbnRseVJ1bm5pbmdBVGFzayIsImRvYyIsImF0dGFjaFRvIiwiaGFuZGxlIiwicnVuSWZQcmVzZW50IiwiaW1wb3J0U2NyaXB0cyIsInBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXMiLCJvbGRPbk1lc3NhZ2UiLCJjYW5Vc2VQb3N0TWVzc2FnZSIsIm1lc3NhZ2VQcmVmaXgiLCJvbkdsb2JhbE1lc3NhZ2UiLCJpbnN0YWxsUG9zdE1lc3NhZ2VJbXBsZW1lbnRhdGlvbiIsImluc3RhbGxNZXNzYWdlQ2hhbm5lbEltcGxlbWVudGF0aW9uIiwiaHRtbCIsImluc3RhbGxSZWFkeVN0YXRlQ2hhbmdlSW1wbGVtZW50YXRpb24iLCJ0YXNrIiwiY2FjaGVkU2V0VGltZW91dCIsImNhY2hlZENsZWFyVGltZW91dCIsImRlZmF1bHRTZXRUaW1vdXQiLCJkZWZhdWx0Q2xlYXJUaW1lb3V0IiwicnVuVGltZW91dCIsImZ1biIsImN1cnJlbnRRdWV1ZSIsImRyYWluaW5nIiwicXVldWVJbmRleCIsImNsZWFuVXBOZXh0VGljayIsImRyYWluUXVldWUiLCJtYXJrZXIiLCJydW5DbGVhclRpbWVvdXQiLCJJdGVtIiwiYnJvd3NlciIsImFyZ3YiLCJ2ZXJzaW9ucyIsInJlbW92ZUFsbExpc3RlbmVycyIsInByZXBlbmRMaXN0ZW5lciIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJjd2QiLCJjaGRpciIsInVtYXNrIiwiX0FwcF92dWVfdnVlX3R5cGVfdGVtcGxhdGVfaWRfMWViY2FjNDlfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJfQXBwX3Z1ZV92dWVfdHlwZV9zY3JpcHRfbGFuZ190c19fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsIl9ub2RlX21vZHVsZXNfdnVlX2xvYWRlcl9saWJfcnVudGltZV9jb21wb25lbnROb3JtYWxpemVyX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18iLCJfX2ZpbGUiLCJfaGVhZGVyX3Z1ZV92dWVfdHlwZV90ZW1wbGF0ZV9pZF84OGM0MTEyNF9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsIl9oZWFkZXJfdnVlX3Z1ZV90eXBlX3NjcmlwdF9sYW5nX3RzX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fIiwiX25vZGVfbW9kdWxlc19zdHlsZV9sb2FkZXJfaW5kZXhfanNfbm9kZV9tb2R1bGVzX2Nzc19sb2FkZXJfaW5kZXhfanNfbm9kZV9tb2R1bGVzX3Z1ZV9sb2FkZXJfbGliX2xvYWRlcnNfc3R5bGVQb3N0TG9hZGVyX2pzX25vZGVfbW9kdWxlc19sZXNzX2xvYWRlcl9kaXN0X2Nqc19qc19ub2RlX21vZHVsZXNfdnVlX2xvYWRlcl9saWJfaW5kZXhfanNfdnVlX2xvYWRlcl9vcHRpb25zX2hlYWRlcl92dWVfdnVlX3R5cGVfc3R5bGVfaW5kZXhfMF9sYW5nX2xlc3NfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJsb2NhdGlvbiIsImJhc2VVcmwiLCJwcm90b2NvbCIsImhvc3QiLCJjdXJyZW50RGlyIiwicGF0aG5hbWUiLCJmdWxsTWF0Y2giLCJvcmlnVXJsIiwibmV3VXJsIiwidW5xdW90ZWRPcmlnVXJsIiwiJDEiLCJfbm9kZV9tb2R1bGVzX3N0eWxlX2xvYWRlcl9pbmRleF9qc19ub2RlX21vZHVsZXNfY3NzX2xvYWRlcl9pbmRleF9qc19ub2RlX21vZHVsZXNfdnVlX2xvYWRlcl9saWJfbG9hZGVyc19zdHlsZVBvc3RMb2FkZXJfanNfbm9kZV9tb2R1bGVzX2xlc3NfbG9hZGVyX2Rpc3RfY2pzX2pzX25vZGVfbW9kdWxlc192dWVfbG9hZGVyX2xpYl9pbmRleF9qc192dWVfbG9hZGVyX29wdGlvbnNfQXBwX3Z1ZV92dWVfdHlwZV9zdHlsZV9pbmRleF8wX2xhbmdfbGVzc19fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsIl92dWVSb3V0ZXIyIiwiaW5kZXhSb3V0ZSIsImNhdGNoIiwicm91dGVzIiwiX2NvbmZpZzIiLCJWaWV3Iiwicm91dGVyVmlldyIsInJvdXRlIiwiX3JvdXRlclZpZXdDYWNoZSIsImluYWN0aXZlIiwiX3JvdXRlclJvb3QiLCJyb3V0ZXJWaWV3RGVwdGgiLCJtYXRjaGVkIiwicmVnaXN0ZXJSb3V0ZUluc3RhbmNlIiwiaW5zdGFuY2VzIiwicHJvcHNUb1Bhc3MiLCJyZXNvbHZlUHJvcHMiLCJlbmNvZGVSZXNlcnZlUkUiLCJlbmNvZGVSZXNlcnZlUmVwbGFjZXIiLCJjb21tYVJFIiwiZW5jb2RlIiwiZGVjb2RlIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwicGFyc2VRdWVyeSIsInBhcmFtIiwic3RyaW5naWZ5UXVlcnkiLCJ2YWwyIiwidHJhaWxpbmdTbGFzaFJFIiwiY3JlYXRlUm91dGUiLCJyZWNvcmQiLCJyZWRpcmVjdGVkRnJvbSIsInN0cmluZ2lmeVF1ZXJ5JCQxIiwibWV0YSIsImZ1bGxQYXRoIiwiZ2V0RnVsbFBhdGgiLCJmb3JtYXRNYXRjaCIsIlNUQVJUIiwiX3N0cmluZ2lmeVF1ZXJ5IiwiaXNTYW1lUm91dGUiLCJpc09iamVjdEVxdWFsIiwiYUtleXMiLCJiS2V5cyIsImFWYWwiLCJiVmFsIiwiX1Z1ZSIsInRvVHlwZXMiLCJldmVudFR5cGVzIiwiTGluayIsImV4YWN0IiwiYXBwZW5kIiwiZXhhY3RBY3RpdmVDbGFzcyIsIiRyb3V0ZXIiLCJnbG9iYWxBY3RpdmVDbGFzcyIsImxpbmtBY3RpdmVDbGFzcyIsImdsb2JhbEV4YWN0QWN0aXZlQ2xhc3MiLCJsaW5rRXhhY3RBY3RpdmVDbGFzcyIsImFjdGl2ZUNsYXNzRmFsbGJhY2siLCJleGFjdEFjdGl2ZUNsYXNzRmFsbGJhY2siLCJjb21wYXJlVGFyZ2V0IiwicXVlcnlJbmNsdWRlcyIsImlzSW5jbHVkZWRSb3V0ZSIsImd1YXJkRXZlbnQiLCJmaW5kQW5jaG9yIiwiY3RybEtleSIsInNoaWZ0S2V5IiwiZGVmYXVsdFByZXZlbnRlZCIsImJ1dHRvbiIsImN1cnJlbnRUYXJnZXQiLCJyZXNvbHZlUGF0aCIsInJlbGF0aXZlIiwiZmlyc3RDaGFyIiwic2VnbWVudCIsImNsZWFuUGF0aCIsImlzYXJyYXkiLCJwYXRoVG9SZWdleHBfMSIsInBhdGhUb1JlZ2V4cCIsInBhcnNlXzEiLCJjb21waWxlXzEiLCJ0b2tlbnNUb0Z1bmN0aW9uIiwidG9rZW5zVG9GdW5jdGlvbl8xIiwidG9rZW5zVG9SZWdFeHBfMSIsInRva2Vuc1RvUmVnRXhwIiwiUEFUSF9SRUdFWFAiLCJ0b2tlbnMiLCJkZWZhdWx0RGVsaW1pdGVyIiwiZGVsaW1pdGVyIiwiZXNjYXBlZCIsIm1vZGlmaWVyIiwiYXN0ZXJpc2siLCJvcHRpb25hbCIsImVzY2FwZUdyb3VwIiwiZXNjYXBlU3RyaW5nIiwic3Vic3RyIiwiZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IiwiZW5jb2RlVVJJIiwiZW5jb2RlQXN0ZXJpc2siLCJwcmV0dHkiLCJ0b2tlbiIsImF0dGFjaEtleXMiLCJyZSIsImZsYWdzIiwic2Vuc2l0aXZlIiwic3RyaWN0IiwiZW5kc1dpdGhEZWxpbWl0ZXIiLCJyZWdleHBUb1JlZ2V4cCIsImFycmF5VG9SZWdleHAiLCJzdHJpbmdUb1JlZ2V4cCIsImNvbXBpbGUiLCJyZWdleHBDb21waWxlQ2FjaGUiLCJmaWxsUGFyYW1zIiwicm91dGVNc2ciLCJjcmVhdGVSb3V0ZU1hcCIsIm9sZFBhdGhMaXN0Iiwib2xkUGF0aE1hcCIsIm9sZE5hbWVNYXAiLCJwYXRoTGlzdCIsInBhdGhNYXAiLCJuYW1lTWFwIiwiYWRkUm91dGVSZWNvcmQiLCJtYXRjaEFzIiwicGF0aFRvUmVnZXhwT3B0aW9ucyIsIm5vcm1hbGl6ZWRQYXRoIiwibm9ybWFsaXplUGF0aCIsImNhc2VTZW5zaXRpdmUiLCJyZWdleCIsImNvbXBpbGVSb3V0ZVJlZ2V4IiwicmVkaXJlY3QiLCJjaGlsZE1hdGNoQXMiLCJhbGlhcyIsImFsaWFzZXMiLCJhbGlhc1JvdXRlIiwibm9ybWFsaXplTG9jYXRpb24iLCJfbm9ybWFsaXplZCIsInJhd1BhdGgiLCJwYXJzZWRQYXRoIiwiaGFzaEluZGV4IiwicXVlcnlJbmRleCIsImJhc2VQYXRoIiwiZXh0cmFRdWVyeSIsIl9wYXJzZVF1ZXJ5IiwicGFyc2VkUXVlcnkiLCJyZXNvbHZlUXVlcnkiLCJjcmVhdGVNYXRjaGVyIiwiY3VycmVudFJvdXRlIiwiX2NyZWF0ZVJvdXRlIiwicGFyYW1OYW1lcyIsInJlY29yZCQxIiwibWF0Y2hSb3V0ZSIsIm9yaWdpbmFsUmVkaXJlY3QiLCJyZXNvbHZlUmVjb3JkUGF0aCIsImFsaWFzZWRNYXRjaCIsImFsaWFzZWRSZWNvcmQiLCJhZGRSb3V0ZXMiLCJwb3NpdGlvblN0b3JlIiwic2V0dXBTY3JvbGwiLCJoaXN0b3J5IiwicmVwbGFjZVN0YXRlIiwiZ2V0U3RhdGVLZXkiLCJzYXZlU2Nyb2xsUG9zaXRpb24iLCJfa2V5Iiwic2V0U3RhdGVLZXkiLCJoYW5kbGVTY3JvbGwiLCJpc1BvcCIsImJlaGF2aW9yIiwic2Nyb2xsQmVoYXZpb3IiLCJnZXRTY3JvbGxQb3NpdGlvbiIsInNob3VsZFNjcm9sbCIsInNjcm9sbFRvUG9zaXRpb24iLCJwYWdlWE9mZnNldCIsInBhZ2VZT2Zmc2V0IiwiaXNWYWxpZFBvc2l0aW9uIiwibm9ybWFsaXplUG9zaXRpb24iLCJkb2NSZWN0IiwiZWxSZWN0IiwiZ2V0RWxlbWVudFBvc2l0aW9uIiwibm9ybWFsaXplT2Zmc2V0Iiwic3VwcG9ydHNQdXNoU3RhdGUiLCJ1YSIsIlRpbWUiLCJnZW5LZXkiLCJ0b0ZpeGVkIiwicHVzaFN0YXRlIiwidXJsIiwicnVuUXVldWUiLCJyZXNvbHZlQXN5bmNDb21wb25lbnRzIiwiaGFzQXN5bmMiLCJmbGF0TWFwQ29tcG9uZW50cyIsInJlc29sdmVkRGVmIiwiaXNFU01vZHVsZSIsIkhpc3RvcnkiLCJiYXNlRWwiLCJub3JtYWxpemVCYXNlIiwicmVhZHlDYnMiLCJyZWFkeUVycm9yQ2JzIiwiZXJyb3JDYnMiLCJleHRyYWN0R3VhcmRzIiwicmVjb3JkcyIsImd1YXJkcyIsImV4dHJhY3RHdWFyZCIsImJpbmRHdWFyZCIsImxpc3RlbiIsIm9uUmVhZHkiLCJlcnJvckNiIiwib25FcnJvciIsInRyYW5zaXRpb25UbyIsIm9uQ29tcGxldGUiLCJvbkFib3J0IiwiY29uZmlybVRyYW5zaXRpb24iLCJ1cGRhdGVSb3V0ZSIsImVuc3VyZVVSTCIsImFib3J0IiwiYWN0aXZhdGVkIiwiZGVhY3RpdmF0ZWQiLCJyZXNvbHZlUXVldWUiLCJleHRyYWN0TGVhdmVHdWFyZHMiLCJiZWZvcmVIb29rcyIsImV4dHJhY3RVcGRhdGVIb29rcyIsInBvc3RFbnRlckNicyIsImlzVmFsaWQiLCJwb2xsIiwiYmluZEVudGVyR3VhcmQiLCJleHRyYWN0RW50ZXJHdWFyZHMiLCJyZXNvbHZlSG9va3MiLCJwcmV2IiwiYWZ0ZXJIb29rcyIsIkhUTUw1SGlzdG9yeSIsIkhpc3RvcnkkJDEiLCJleHBlY3RTY3JvbGwiLCJpbml0TG9jYXRpb24iLCJnZXRMb2NhdGlvbiIsImdvIiwiZnJvbVJvdXRlIiwiZ2V0Q3VycmVudExvY2F0aW9uIiwiSGFzaEhpc3RvcnkiLCJjaGVja0ZhbGxiYWNrIiwiZW5zdXJlU2xhc2giLCJzZXR1cExpc3RlbmVycyIsInN1cHBvcnRzU2Nyb2xsIiwiZ2V0SGFzaCIsInJlcGxhY2VIYXNoIiwicHVzaEhhc2giLCJnZXRVcmwiLCJBYnN0cmFjdEhpc3RvcnkiLCJ0YXJnZXRJbmRleCIsIlZ1ZVJvdXRlciIsImFwcHMiLCJtYXRjaGVyIiwicmVnaXN0ZXJIb29rIiwic2V0dXBIYXNoTGlzdGVuZXIiLCJfcm91dGUiLCJiZWZvcmVFYWNoIiwiYmVmb3JlUmVzb2x2ZSIsImFmdGVyRWFjaCIsImJhY2siLCJmb3J3YXJkIiwiZ2V0TWF0Y2hlZENvbXBvbmVudHMiLCJjcmVhdGVIcmVmIiwibm9ybWFsaXplZFRvIiwiaW5zdGFsbGVkIiwicmVnaXN0ZXJJbnN0YW5jZSIsImNhbGxWYWwiLCJfcm91dGVyIiwiYmVmb3JlUm91dGVFbnRlciIsImJlZm9yZVJvdXRlTGVhdmUiLCJiZWZvcmVSb3V0ZVVwZGF0ZSIsIm5hdkNvbmZpZ3MiLCJyb3V0ZXJzIiwiYWRkRG9jc1JvdXRlIiwicGFnZSIsIm5hdkNvbmYiLCJpZHhSb3V0ZSIsIm5hdiIsInJlZ2lzdGVyUm91dGUiLCJfZGVtb19ibG9ja192dWVfdnVlX3R5cGVfdGVtcGxhdGVfaWRfNjIyMjZkODRfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJfZGVtb19ibG9ja192dWVfdnVlX3R5cGVfc2NyaXB0X2xhbmdfdHNfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18iLCJfbm9kZV9tb2R1bGVzX3N0eWxlX2xvYWRlcl9pbmRleF9qc19ub2RlX21vZHVsZXNfY3NzX2xvYWRlcl9pbmRleF9qc19ub2RlX21vZHVsZXNfdnVlX2xvYWRlcl9saWJfbG9hZGVyc19zdHlsZVBvc3RMb2FkZXJfanNfbm9kZV9tb2R1bGVzX2xlc3NfbG9hZGVyX2Rpc3RfY2pzX2pzX25vZGVfbW9kdWxlc192dWVfbG9hZGVyX2xpYl9pbmRleF9qc192dWVfbG9hZGVyX29wdGlvbnNfZGVtb19ibG9ja192dWVfdnVlX3R5cGVfc3R5bGVfaW5kZXhfMF9sYW5nX2xlc3NfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCIuL3hiLWJ1dHRvbi9pbmRleC50cyIsIi4veGItY2hlY2tib3gtZ3JvdXAvaW5kZXgudHMiLCIuL3hiLWNoZWNrYm94L2luZGV4LnRzIiwiLi94Yi1jb2xvci9pbmRleC50cyIsIi4veGItZm9ybS1pdGVtL2luZGV4LnRzIiwiLi94Yi1mb3JtL2luZGV4LnRzIiwiLi94Yi1pY29uL2luZGV4LnRzIiwiLi94Yi1pbnB1dC1udW1iZXIvaW5kZXgudHMiLCIuL3hiLWxvYWRpbmcvaW5kZXgudHMiLCIuL3hiLW1lc3NhZ2UtdGlwcy9pbmRleC50cyIsIi4veGItcG9wdGlwL2luZGV4LnRzIiwiLi94Yi1wb3B1cC13aW5kb3cvaW5kZXgudHMiLCIuL3hiLXJhZGlvLWdyb3VwL2luZGV4LnRzIiwiLi94Yi1yYWRpby9pbmRleC50cyIsIi4veGItc2VhcmNoLWJ0bi9pbmRleC50cyIsIi4veGItdGFibGUvaW5kZXgudHMiLCIuL3hiLXRleHQvaW5kZXgudHMiLCIuL3hiLXVlZGl0b3IvaW5kZXgudHMiLCJ3ZWJwYWNrQ29udGV4dCIsInJlcSIsIndlYnBhY2tDb250ZXh0UmVzb2x2ZSIsImNvZGUiLCJfeGJfYnV0dG9uX3Z1ZV92dWVfdHlwZV90ZW1wbGF0ZV9pZF8yOTFkMTU1Y19fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsIl94Yl9idXR0b25fdnVlX3Z1ZV90eXBlX3NjcmlwdF9sYW5nX3RzX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fIiwiX25vZGVfbW9kdWxlc192dWVfbG9hZGVyX2xpYl9ydW50aW1lX2NvbXBvbmVudE5vcm1hbGl6ZXJfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyIsImZvcm1hdCIsIl96aENOMiIsImkxOG5IYW5kbGVyIiwidnVlaTE4biIsIiR0IiwibG9jYWxlIiwiX2RlZXBtZXJnZTIiLCJpMThuIiwieGIiLCJwb3B1cFdpZG93IiwiaXNNZXJnZWFibGVPYmplY3QiLCJpc05vbk51bGxPYmplY3QiLCJzdHJpbmdWYWx1ZSIsIiQkdHlwZW9mIiwiUkVBQ1RfRUxFTUVOVF9UWVBFIiwiaXNSZWFjdEVsZW1lbnQiLCJpc1NwZWNpYWwiLCJjbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZCIsImRlZXBtZXJnZSIsImVtcHR5VGFyZ2V0IiwiZGVmYXVsdEFycmF5TWVyZ2UiLCJhcnJheU1lcmdlIiwic291cmNlSXNBcnJheSIsImRlc3RpbmF0aW9uIiwibWVyZ2VPYmplY3QiLCJkZWVwbWVyZ2VfMSIsIlJFX05BUkdTIiwiX3hiX2NoZWNrYm94X2dyb3VwX3Z1ZV92dWVfdHlwZV90ZW1wbGF0ZV9pZF8xZmQyYTIzMF9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsIl94Yl9jaGVja2JveF9ncm91cF92dWVfdnVlX3R5cGVfc2NyaXB0X2xhbmdfdHNfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18iLCJfeGJfY2hlY2tib3hfdnVlX3Z1ZV90eXBlX3RlbXBsYXRlX2lkX2IyZDU5NTg0X19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiX3hiX2NoZWNrYm94X3Z1ZV92dWVfdHlwZV9zY3JpcHRfbGFuZ190c19fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsIl94YkNvbG9yMiIsInhiQ29sb3IiLCJfeGJfY29sb3JfdnVlX3Z1ZV90eXBlX3RlbXBsYXRlX2lkXzU0OTYzYWU2X19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiX3hiX2NvbG9yX3Z1ZV92dWVfdHlwZV9zY3JpcHRfbGFuZ190c19fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsIl94YkZvcm1JdGVtMiIsInhiRm9ybUl0ZW0iLCJfeGJfZm9ybV9pdGVtX3Z1ZV92dWVfdHlwZV90ZW1wbGF0ZV9pZF83NWY2Y2YwNl9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsIl94Yl9mb3JtX2l0ZW1fdnVlX3Z1ZV90eXBlX3NjcmlwdF9sYW5nX3RzX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fIiwiYUZ1bmN0aW9uIiwiZ2V0S2V5cyIsImdPUFMiLCJwSUUiLCIkYXNzaWduIiwiQSIsIksiLCJUIiwiYUxlbiIsImlzRW51bSIsInRvQWJzb2x1dGVJbmRleCIsIklTX0lOQ0xVREVTIiwiJHRoaXMiLCIkYXQiLCJpdGVyYXRlZCIsInBvaW50IiwiVE9fU1RSSU5HIiwiT2JqZWN0UHJvdG8iLCJUT19TVFJJTkdfVEFHIiwiRE9NSXRlcmFibGVzIiwiQ29sbGVjdGlvbiIsImFkZFRvVW5zY29wYWJsZXMiLCJBcmd1bWVudHMiLCJERVNDUklQVE9SUyIsIk1FVEEiLCJLRVkiLCIkZmFpbHMiLCJ3a3MiLCJ3a3NEZWZpbmUiLCJlbnVtS2V5cyIsIl9jcmVhdGUiLCJnT1BORXh0IiwiJEdPUEQiLCIkRFAiLCJnT1BEIiwiZ09QTiIsIiRKU09OIiwiX3N0cmluZ2lmeSIsIkhJRERFTiIsIlRPX1BSSU1JVElWRSIsIlN5bWJvbFJlZ2lzdHJ5IiwiQWxsU3ltYm9scyIsIk9QU3ltYm9scyIsIlVTRV9OQVRJVkUiLCJRT2JqZWN0IiwiZmluZENoaWxkIiwic2V0U3ltYm9sRGVzYyIsIkQiLCJwcm90b0Rlc2MiLCJzeW0iLCIkZGVmaW5lUHJvcGVydHkiLCIkZGVmaW5lUHJvcGVydGllcyIsIiRwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIkUiLCIkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiJGdldE93blByb3BlcnR5TmFtZXMiLCIkZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiSVNfT1AiLCJlczZTeW1ib2xzIiwid2VsbEtub3duU3ltYm9scyIsImtleUZvciIsInVzZVNldHRlciIsInVzZVNpbXBsZSIsInJlcGxhY2VyIiwiJHJlcGxhY2VyIiwic2V0RGVzYyIsIkZSRUVaRSIsInByZXZlbnRFeHRlbnNpb25zIiwic2V0TWV0YSIsInciLCJORUVEIiwiZmFzdEtleSIsImdldFdlYWsiLCJvbkZyZWV6ZSIsInN5bWJvbHMiLCJ3aW5kb3dOYW1lcyIsImdldFdpbmRvd05hbWVzIiwiX3hiRm9ybTIiLCJ4YkZvcm0iLCJfeGJfZm9ybV92dWVfdnVlX3R5cGVfdGVtcGxhdGVfaWRfODAxYzBjODBfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJfeGJfZm9ybV92dWVfdnVlX3R5cGVfc2NyaXB0X2xhbmdfdHNfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18iLCJfeGJfaWNvbl92dWVfdnVlX3R5cGVfdGVtcGxhdGVfaWRfZTRkMTI2YWNfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJfeGJfaWNvbl92dWVfdnVlX3R5cGVfc2NyaXB0X2xhbmdfdHNfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18iLCJfeGJJbnB1dE51bWJlcjIiLCJ4YklucHV0TnVtYmVyIiwiX3hiX2lucHV0X251bWJlcl92dWVfdnVlX3R5cGVfdGVtcGxhdGVfaWRfMjFlMGY2OTBfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJfeGJfaW5wdXRfbnVtYmVyX3Z1ZV92dWVfdHlwZV9zY3JpcHRfbGFuZ190c19fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsIl94YkxvYWRpbmcyIiwieGJMb2FkaW5nIiwiX3hiX2xvYWRpbmdfdnVlX3Z1ZV90eXBlX3RlbXBsYXRlX2lkX2FlNDlkNTc0X19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiX3hiX2xvYWRpbmdfdnVlX3Z1ZV90eXBlX3NjcmlwdF9sYW5nX3RzX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fIiwiX21lc3NhZ2VUaXBzMiIsImljb25UeXBlcyIsInN1Y2Nlc3MiLCJ3YXJuaW5nIiwibWVzc2FnZUNvbnN0cnVjdG9yIiwiX3hiTWVzc2FnZVRpcHMyIiwibWVzc2FnZUJveCIsIk1lc3NhZ2VCb3giLCJnZXRDb250YWluZXIiLCJxdWVyeVNlbGVjdG9yQWxsIiwibWVzc2FnZUJveENvbnRhaW5lciIsIk1lc3NhZ2VUaXBzIiwiX3hiX21lc3NhZ2VfdGlwc192dWVfdnVlX3R5cGVfdGVtcGxhdGVfaWRfMmYzYjFjYjRfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJfeGJfbWVzc2FnZV90aXBzX3Z1ZV92dWVfdHlwZV9zY3JpcHRfbGFuZ190c19fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsIl94Yl9wb3B0aXBfdnVlX3Z1ZV90eXBlX3RlbXBsYXRlX2lkX2ZmN2ZjMzY4X19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiX3hiX3BvcHRpcF92dWVfdnVlX3R5cGVfc2NyaXB0X2xhbmdfdHNfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18iLCJfeGJQb3B1cFdpbmRvdzIiLCJ4YlBvcHVwV2luZG93IiwiX3hiX3BvcHVwX3dpbmRvd192dWVfdnVlX3R5cGVfdGVtcGxhdGVfaWRfYjk0MjhmY2NfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJfeGJfcG9wdXBfd2luZG93X3Z1ZV92dWVfdHlwZV9zY3JpcHRfbGFuZ190c19fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsImNoZWNrU2Nyb2xsQmFyIiwiZnVsbFdpbmRvd1dpZHRoIiwiaW5uZXJXaWR0aCIsImRvY3VtZW50RWxlbWVudFJlY3QiLCJib2R5SXNPdmVyZmxvd2luZyIsInNldFNjcm9sbEJhciIsInBhZGRpbmdSaWdodCIsInJlc2V0U2Nyb2xsQmFyIiwiX3hiUmFkaW9Hcm91cDIiLCJ4YlJhZGlvR3JvdXAiLCJfeGJfcmFkaW9fZ3JvdXBfdnVlX3Z1ZV90eXBlX3RlbXBsYXRlX2lkXzI1ZmM0MGQ4X19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiX3hiX3JhZGlvX2dyb3VwX3Z1ZV92dWVfdHlwZV9zY3JpcHRfbGFuZ190c19fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsIl94YlJhZGlvMiIsInhiUmFkaW8iLCJfeGJfcmFkaW9fdnVlX3Z1ZV90eXBlX3RlbXBsYXRlX2lkXzc5NjRmMWU2X19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiX3hiX3JhZGlvX3Z1ZV92dWVfdHlwZV9zY3JpcHRfbGFuZ190c19fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsIl94YlNlYXJjaEJ0bjIiLCJ4YlNlYXJjaEJ0biIsIl94Yl9zZWFyY2hfYnRuX3Z1ZV92dWVfdHlwZV90ZW1wbGF0ZV9pZF9kZWQ5ZjBiNF9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsIl94Yl9zZWFyY2hfYnRuX3Z1ZV92dWVfdHlwZV9zY3JpcHRfbGFuZ190c19fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsIl94YlRhYmxlMiIsInhiVGFibGUiLCJfeGJfdGFibGVfdnVlX3Z1ZV90eXBlX3RlbXBsYXRlX2lkXzM1YzcxMGM2X19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiX3hiX3RhYmxlX3Z1ZV92dWVfdHlwZV9zY3JpcHRfbGFuZ190c19fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsIl94Yl90YWJsZV9oZWFkX3Z1ZV92dWVfdHlwZV90ZW1wbGF0ZV9pZF81YmNlNjIzN19fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsIl94Yl90YWJsZV9oZWFkX3Z1ZV92dWVfdHlwZV9zY3JpcHRfbGFuZ190c19fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsIl94Yl90YWJsZV9ib2R5X3Z1ZV92dWVfdHlwZV90ZW1wbGF0ZV9pZF8wM2NjMWNmOV9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsIl94Yl90YWJsZV9ib2R5X3Z1ZV92dWVfdHlwZV9zY3JpcHRfbGFuZ190c19fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsIl94Yl90YWJsZV90cl92dWVfdnVlX3R5cGVfdGVtcGxhdGVfaWRfMjAzMGYwZDZfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJfeGJfdGFibGVfdHJfdnVlX3Z1ZV90eXBlX3NjcmlwdF9sYW5nX3RzX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fIiwiX3hiX2NlbGxfdnVlX3Z1ZV90eXBlX3RlbXBsYXRlX2lkXzYzNzI1NTlhX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiX3hiX2NlbGxfdnVlX3Z1ZV90eXBlX3NjcmlwdF9sYW5nX3RzX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fIiwiY29sdW1uT3JkZXIiLCJhcHBlbmRMaW5lIiwibmV3TGluZSIsInF1b3RlZCIsImxpbmUiLCJzdGFja0NsZWFyIiwic3RhY2tEZWxldGUiLCJzdGFja0dldCIsInN0YWNrSGFzIiwic3RhY2tTZXQiLCJtYXBDYWNoZUNsZWFyIiwibWFwQ2FjaGVEZWxldGUiLCJtYXBDYWNoZUdldCIsIm1hcENhY2hlSGFzIiwibWFwQ2FjaGVTZXQiLCJoYXNoQ2xlYXIiLCJoYXNoRGVsZXRlIiwiaGFzaEdldCIsImhhc2hIYXMiLCJoYXNoU2V0IiwiYmFzZUlzVHlwZWRBcnJheSIsImJhc2VJc01hcCIsImJhc2VJc1NldCIsIl9pc0lFMTEiLCJpZXYiLCJpZW9sZCIsInRyaWRlbnQiLCJhcHBWZXJzaW9uIiwiX2lzRWRnZSIsIl9nZXREb3dubG9hZFVybCIsImNzdkRhdGEiLCJvV2luIiwibXNTYXZlQmxvYiIsImVsZW1lbnRVdGlsc01ha2VyIiwibGlzdGVuZXJIYW5kbGVyTWFrZXIiLCJpZEdlbmVyYXRvck1ha2VyIiwiaWRIYW5kbGVyTWFrZXIiLCJyZXBvcnRlck1ha2VyIiwiYnJvd3NlckRldGVjdG9yIiwiYmF0Y2hQcm9jZXNzb3JNYWtlciIsInN0YXRlSGFuZGxlciIsIm9iamVjdFN0cmF0ZWd5TWFrZXIiLCJzY3JvbGxTdHJhdGVneU1ha2VyIiwiaXNDb2xsZWN0aW9uIiwiZ2V0T3B0aW9uIiwiaWRIYW5kbGVyIiwiaWRHZW5lcmF0b3IiLCJkZWZhdWx0SWRIYW5kbGVyIiwicmVwb3J0ZXIiLCJiYXRjaFByb2Nlc3NvciIsImdsb2JhbE9wdGlvbnMiLCJjYWxsT25BZGQiLCJkZWJ1ZyIsImRldGVjdGlvblN0cmF0ZWd5IiwiZXZlbnRMaXN0ZW5lckhhbmRsZXIiLCJlbGVtZW50VXRpbHMiLCJkZXNpcmVkU3RyYXRlZ3kiLCJzdHJhdGVneU9wdGlvbnMiLCJvblJlYWR5Q2FsbGJhY2tzIiwiZWxlbWVudHMiLCJsaXN0ZW5lciIsIm9uUmVzaXplQ2FsbGJhY2siLCJlbGVtZW50c1JlYWR5Iiwib25SZWFkeUNhbGxiYWNrIiwiZ2V0U3RhdGUiLCJpc0RldGVjdGFibGUiLCJpc0J1c3kiLCJtYXJrQnVzeSIsIm1ha2VEZXRlY3RhYmxlIiwibWFya0FzRGV0ZWN0YWJsZSIsInN0YXJ0U2l6ZSIsInVuaW5zdGFsbCIsImNsZWFuU3RhdGUiLCJidXN5IiwiZXZlbnRMaXN0ZW5lcnMiLCJnZXRMaXN0ZW5lcnMiLCJpZENvdW50IiwiZ2VuZXJhdGUiLCJxdWlldCIsImF0dGFjaEZ1bmN0aW9uIiwidXRpbHMiLCJCYXRjaCIsImJhdGNoIiwidG9wTGV2ZWwiLCJib3R0b21MZXZlbCIsImxldmVsIiwiYXN5bmNQcm9jZXNzIiwiYXV0b1Byb2Nlc3MiLCJhc3luY0ZyYW1lSGFuZGxlciIsImlzUHJvY2Vzc2luZyIsInByb2Nlc3NCYXRjaCIsInByb2Nlc3NpbmdCYXRjaCIsInByb2Nlc3NCYXRjaEFzeW5jIiwicmVxdWVzdEZyYW1lIiwibG9jYWxBc3luY1Byb2Nlc3MiLCJjYW5jZWxGcmFtZSIsImdldE9iamVjdCIsIk9CSkVDVF9TVFlMRSIsInBvc2l0aW9uQ2hlY2tQZXJmb3JtZWQiLCJtdXRhdGVEb20iLCJhbHRlclBvc2l0aW9uU3R5bGVzIiwicmVtb3ZlUmVsYXRpdmVTdHlsZXMiLCJnZXROdW1lcmljYWxWYWx1ZSIsInRhYkluZGV4IiwiZ2V0RG9jdW1lbnQiLCJvYmplY3REb2N1bWVudCIsImluamVjdE9iamVjdCIsImxpc3RlbmVyUHJveHkiLCJkZWZhdWx0VmlldyIsImhhc1N0YXRlIiwic2Nyb2xsYmFyU2l6ZXMiLCJjb250YWluZXIiLCJ3aWR0aFNpemUiLCJoZWlnaHRTaXplIiwiZ2V0U2Nyb2xsYmFyU2l6ZXMiLCJkZXRlY3Rpb25Db250YWluZXJDbGFzcyIsImFkZEV2ZW50IiwicmVtb3ZlRXZlbnQiLCJnZXRFeHBhbmRFbGVtZW50IiwiZ2V0U2hyaW5rRWxlbWVudCIsInN0eWxlSWQiLCJjb250YWluZXJDbGFzcyIsImdldEVsZW1lbnRCeUlkIiwiY29udGFpbmVyQW5pbWF0aW9uQ2xhc3MiLCJjb250YWluZXJBbmltYXRpb25BY3RpdmVDbGFzcyIsInN0eWxlRWxlbWVudCIsImluamVjdFN0eWxlIiwiaW5qZWN0U2Nyb2xsU3R5bGUiLCJpc1VucmVuZGVyZWQiLCJlbGVtZW50U3R5bGUiLCJib3R0b20iLCJ3aWR0aENTUyIsImhlaWdodENTUyIsInN0b3JlU3R5bGUiLCJzdG9yZUN1cnJlbnRTaXplIiwibGFzdFdpZHRoIiwibGFzdEhlaWdodCIsImdldFdpZHRoT2Zmc2V0IiwiZ2V0SGVpZ2h0T2Zmc2V0IiwiZ2V0RXhwYW5kV2lkdGgiLCJnZXRFeHBhbmRIZWlnaHQiLCJwb3NpdGlvblNjcm9sbGJhcnMiLCJleHBhbmQiLCJzaHJpbmsiLCJleHBhbmRXaWR0aCIsImV4cGFuZEhlaWdodCIsInNocmlua1dpZHRoIiwiZ2V0U2hyaW5rV2lkdGgiLCJzaHJpbmtIZWlnaHQiLCJnZXRTaHJpbmtIZWlnaHQiLCJpbmplY3RDb250YWluZXJFbGVtZW50IiwiYWRkQW5pbWF0aW9uQ2xhc3MiLCJvbkFuaW1hdGlvblN0YXJ0Iiwib25SZW5kZXJlZCIsImluamVjdFNjcm9sbEVsZW1lbnRzIiwicm9vdENvbnRhaW5lciIsInNjcm9sbGJhcldpZHRoIiwic2Nyb2xsYmFySGVpZ2h0IiwiY29udGFpbmVyU3R5bGUiLCJnZXRMZWZ0VG9wQm90dG9tUmlnaHRDc3NUZXh0IiwiY29udGFpbmVyQ29udGFpbmVyIiwiZXhwYW5kQ2hpbGQiLCJzaHJpbmtDaGlsZCIsIm9uRXhwYW5kU2Nyb2xsIiwib25TaHJpbmtTY3JvbGwiLCJvbkV4cGFuZCIsIm9uU2hyaW5rIiwicmVnaXN0ZXJMaXN0ZW5lcnNBbmRQb3NpdGlvbkVsZW1lbnRzIiwidXBkYXRlQ2hpbGRTaXplcyIsImdldEV4cGFuZENoaWxkRWxlbWVudCIsInVwZGF0ZURldGVjdG9yRWxlbWVudHMiLCJhcmVFbGVtZW50c0luamVjdGVkIiwibm90aWZ5TGlzdGVuZXJzSWZOZWVkZWQiLCJsYXN0Tm90aWZpZWRXaWR0aCIsImxhc3ROb3RpZmllZEhlaWdodCIsImZpbmFsaXplRG9tTXV0YXRpb24iLCJzdG9yZVN0YXJ0U2l6ZSIsIm93bmVyRG9jdW1lbnQiLCJpc0luRG9jdW1lbnQiLCJpc0RldGFjaGVkIiwiZm9yVGFibGVIZWFkIiwib3JpZ2luQ29sdW1ucyIsIm1heExldmVsIiwiY29sU3Bhbl8xIiwic3ViQ29sdW1uIiwiJGNoYXJzIiwibWF4UG9zIiwiX3hiVGV4dDIiLCJ4YlRleHQiLCJfeGJfdGV4dF92dWVfdnVlX3R5cGVfdGVtcGxhdGVfaWRfNGJiM2M3ZGNfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJfeGJfdGV4dF92dWVfdnVlX3R5cGVfc2NyaXB0X2xhbmdfdHNfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18iLCJfeGJVZWRpdG9yMiIsInhiVWVkaXRvciIsIl94Yl91ZWRpdG9yX3Z1ZV92dWVfdHlwZV90ZW1wbGF0ZV9pZF83Yzc4NGM4Nl9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsIl94Yl91ZWRpdG9yX3Z1ZV92dWVfdHlwZV9zY3JpcHRfbGFuZ190c19fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsImZvcm1hdFJlZ0V4cCIsIl9sZW4iLCJpc0VtcHR5VmFsdWUiLCJpc05hdGl2ZVN0cmluZ1R5cGUiLCJhc3luY1NlcmlhbEFycmF5IiwiYXN5bmNNYXAiLCJvYmpBcnIiLCJmbGF0dGVuT2JqQXJyIiwib2JqQXJyS2V5cyIsIm9iakFyckxlbmd0aCIsInRvdGFsIiwicmVzdWx0cyIsImFzeW5jUGFyYWxsZWxBcnJheSIsImNvbXBsZW1lbnRFcnJvciIsImZ1bGxGaWVsZCIsImRlZXBNZXJnZSIsInR5cGVvZl9kZWZhdWx0IiwiZXh0ZW5kc19kZWZhdWx0IiwicnVsZV9yZXF1aXJlZCIsIm1lc3NhZ2VzIiwicnVsZV93aGl0ZXNwYWNlIiwid2hpdGVzcGFjZSIsImVtYWlsIiwiaGV4IiwiaW50ZWdlciIsImZsb2F0IiwiZGF0ZSIsImdldFRpbWUiLCJnZXRNb250aCIsImdldFllYXIiLCJFTlVNIiwiZXNfcnVsZSIsInJ1bGVUeXBlIiwiZW51bSIsIm1pc21hdGNoIiwiZW51bV9FTlVNIiwidmFsaWRhdG9yX3R5cGUiLCJlc192YWxpZGF0b3IiLCJib29sZWFuIiwiZGF0ZU9iamVjdCIsIm5ld01lc3NhZ2VzIiwiaW52YWxpZCIsIm1lc3NhZ2VzX21lc3NhZ2VzIiwiU2NoZW1hIiwiX21lc3NhZ2VzIiwiZGVmaW5lIiwieiIsInNvdXJjZV8iLCJvYyIsInNlcmllcyIsImdldFZhbGlkYXRpb25NZXRob2QiLCJlcnJvckZpZWxkcyIsImRvSXQiLCJkZWZhdWx0RmllbGQiLCJhZGRGdWxsZmllbGQiLCJzY2hlbWEiLCJmaWVsZHNTY2hlbWEiLCJmaWVsZFNjaGVtYSIsImVycnMiLCJjb21wbGV0ZSIsIm1lc3NhZ2VJbmRleCIsInJlZ2lzdGVyIl0sIm1hcHBpbmdzIjoiYUFDQSxTQUFBQSxFQUFBQyxHQVFBLElBUEEsSUFNQUMsRUFBQUMsRUFOQUMsRUFBQUgsRUFBQSxHQUNBSSxFQUFBSixFQUFBLEdBS0FLLEVBQUEsRUFBQUMsS0FDUUQsRUFBQUYsRUFBQUksT0FBb0JGLElBQzVCSCxFQUFBQyxFQUFBRSxHQUNBRyxFQUFBTixJQUNBSSxFQUFBRyxLQUFBRCxFQUFBTixHQUFBLElBRUFNLEVBQUFOLEdBQUEsRUFFQSxJQUFBRCxLQUFBRyxFQUNBTSxPQUFBQyxVQUFBQyxlQUFBQyxLQUFBVCxFQUFBSCxLQUNBYSxFQUFBYixHQUFBRyxFQUFBSCxJQUtBLElBRkFjLEtBQUFmLEdBRUFNLEVBQUFDLFFBQ0FELEVBQUFVLE9BQUFWLEdBT0EsSUFBQVcsS0FLQVQsR0FDQVUsRUFBQSxHQVdBLFNBQUFDLEVBQUFsQixHQUdBLEdBQUFnQixFQUFBaEIsR0FDQSxPQUFBZ0IsRUFBQWhCLEdBQUFtQixRQUdBLElBQUFDLEVBQUFKLEVBQUFoQixJQUNBSSxFQUFBSixFQUNBcUIsR0FBQSxFQUNBRixZQVVBLE9BTkFOLEVBQUFiLEdBQUFZLEtBQUFRLEVBQUFELFFBQUFDLElBQUFELFFBQUFELEdBR0FF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LElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxLQUFBQyxJQUFBLEtBQ0FDLElBQUEsS0FBQUMsSUFBQSxLQUNBQyxJQUFBLEtBRUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFDQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUNBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQUFDLElBQUEsSUFBQUMsSUFBQSxJQUFBQyxJQUFBLElBQ0FDLElBQUEsSUFBQUMsSUFBQSxJ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QUFBNC9DLEVBQUFsZ0QsTUFBQWtnRCxFQUFBdnZCLG1CQUFBNEMsU0FDQTJzQixFQUFBbGdELEtBQUEsV0FFQSxtQkFBQWtnRCxFQUFBdkMsV0FBQXVDLEVBQUFsZ0QsT0FBOERxK0gsRUFBVTFnSSxlQUFBdWlELEVBQUFsZ0QsTUFDeEUsVUFBQUksTUFBc0Jta0gsRUFBTSx1QkFBQXJrRSxFQUFBbGdELE9BRTVCLE9BQUFrZ0QsRUFBQWxnRCxNQUFBLFVBRUFrL0gsb0JBQUEsU0FBQWgvRSxHQUNBLHNCQUFBQSxFQUFBdkMsVUFDQSxPQUFBdUMsRUFBQXZDLFVBRUEsSUFBQTNzQyxFQUFBdlQsT0FBQXVULEtBQUFrdkMsR0FDQTAvRSxFQUFBNXVILEVBQUF6SyxRQUFBLFdBSUEsT0FIQSxJQUFBcTVILEdBQ0E1dUgsRUFBQS9CLE9BQUEyd0gsRUFBQSxHQUVBLElBQUE1dUgsRUFBQTFULFFBQUEsYUFBQTBULEVBQUEsR0FDYXF0SCxFQUFVNytFLFNBRVo2K0UsRUFBVTc2SCxLQUFBNFksUUFBQThqQyxNQUFBLElBSXJCeStFLEVBQUFrQixTQUFBLFNBQUE3L0gsRUFBQTI5QyxHQUNBLHNCQUFBQSxFQUNBLFVBQUF2OUMsTUFBQSxvRUFFRWkrSCxFQUFVcitILEdBQUEyOUMsR0FHWmdoRixFQUFBeEIsU0FBa0J1QixFQUVIajZILEVBQUEiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gaW5zdGFsbCBhIEpTT05QIGNhbGxiYWNrIGZvciBjaHVuayBsb2FkaW5nXG4gXHRmdW5jdGlvbiB3ZWJwYWNrSnNvbnBDYWxsYmFjayhkYXRhKSB7XG4gXHRcdHZhciBjaHVua0lkcyA9IGRhdGFbMF07XG4gXHRcdHZhciBtb3JlTW9kdWxlcyA9IGRhdGFbMV07XG5cblxuIFx0XHQvLyBhZGQgXCJtb3JlTW9kdWxlc1wiIHRvIHRoZSBtb2R1bGVzIG9iamVjdCxcbiBcdFx0Ly8gdGhlbiBmbGFnIGFsbCBcImNodW5rSWRzXCIgYXMgbG9hZGVkIGFuZCBmaXJlIGNhbGxiYWNrXG4gXHRcdHZhciBtb2R1bGVJZCwgY2h1bmtJZCwgaSA9IDAsIHJlc29sdmVzID0gW107XG4gXHRcdGZvcig7aSA8IGNodW5rSWRzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0Y2h1bmtJZCA9IGNodW5rSWRzW2ldO1xuIFx0XHRcdGlmKGluc3RhbGxlZENodW5rc1tjaHVua0lkXSkge1xuIFx0XHRcdFx0cmVzb2x2ZXMucHVzaChpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF1bMF0pO1xuIFx0XHRcdH1cbiBcdFx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSAwO1xuIFx0XHR9XG4gXHRcdGZvcihtb2R1bGVJZCBpbiBtb3JlTW9kdWxlcykge1xuIFx0XHRcdGlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb3JlTW9kdWxlcywgbW9kdWxlSWQpKSB7XG4gXHRcdFx0XHRtb2R1bGVzW21vZHVsZUlkXSA9IG1vcmVNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0XHR9XG4gXHRcdH1cbiBcdFx0aWYocGFyZW50SnNvbnBGdW5jdGlvbikgcGFyZW50SnNvbnBGdW5jdGlvbihkYXRhKTtcblxuIFx0XHR3aGlsZShyZXNvbHZlcy5sZW5ndGgpIHtcbiBcdFx0XHRyZXNvbHZlcy5zaGlmdCgpKCk7XG4gXHRcdH1cblxuIFx0fTtcblxuXG4gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIGFuZCBsb2FkaW5nIGNodW5rc1xuIFx0Ly8gdW5kZWZpbmVkID0gY2h1bmsgbm90IGxvYWRlZCwgbnVsbCA9IGNodW5rIHByZWxvYWRlZC9wcmVmZXRjaGVkXG4gXHQvLyBQcm9taXNlID0gY2h1bmsgbG9hZGluZywgMCA9IGNodW5rIGxvYWRlZFxuIFx0dmFyIGluc3RhbGxlZENodW5rcyA9IHtcbiBcdFx0MDogMFxuIFx0fTtcblxuXG5cbiBcdC8vIHNjcmlwdCBwYXRoIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBqc29ucFNjcmlwdFNyYyhjaHVua0lkKSB7XG4gXHRcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBcIlwiICsgKHt9W2NodW5rSWRdfHxjaHVua0lkKSArIFwiLmpzXCJcbiBcdH1cblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG4gXHQvLyBUaGlzIGZpbGUgY29udGFpbnMgb25seSB0aGUgZW50cnkgY2h1bmsuXG4gXHQvLyBUaGUgY2h1bmsgbG9hZGluZyBmdW5jdGlvbiBmb3IgYWRkaXRpb25hbCBjaHVua3NcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZSA9IGZ1bmN0aW9uIHJlcXVpcmVFbnN1cmUoY2h1bmtJZCkge1xuIFx0XHR2YXIgcHJvbWlzZXMgPSBbXTtcblxuXG4gXHRcdC8vIEpTT05QIGNodW5rIGxvYWRpbmcgZm9yIGphdmFzY3JpcHRcblxuIFx0XHR2YXIgaW5zdGFsbGVkQ2h1bmtEYXRhID0gaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdO1xuIFx0XHRpZihpbnN0YWxsZWRDaHVua0RhdGEgIT09IDApIHsgLy8gMCBtZWFucyBcImFscmVhZHkgaW5zdGFsbGVkXCIuXG5cbiBcdFx0XHQvLyBhIFByb21pc2UgbWVhbnMgXCJjdXJyZW50bHkgbG9hZGluZ1wiLlxuIFx0XHRcdGlmKGluc3RhbGxlZENodW5rRGF0YSkge1xuIFx0XHRcdFx0cHJvbWlzZXMucHVzaChpbnN0YWxsZWRDaHVua0RhdGFbMl0pO1xuIFx0XHRcdH0gZWxzZSB7XG4gXHRcdFx0XHQvLyBzZXR1cCBQcm9taXNlIGluIGNodW5rIGNhY2hlXG4gXHRcdFx0XHR2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuIFx0XHRcdFx0XHRpbnN0YWxsZWRDaHVua0RhdGEgPSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSBbcmVzb2x2ZSwgcmVqZWN0XTtcbiBcdFx0XHRcdH0pO1xuIFx0XHRcdFx0cHJvbWlzZXMucHVzaChpbnN0YWxsZWRDaHVua0RhdGFbMl0gPSBwcm9taXNlKTtcblxuIFx0XHRcdFx0Ly8gc3RhcnQgY2h1bmsgbG9hZGluZ1xuIFx0XHRcdFx0dmFyIGhlYWQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdO1xuIFx0XHRcdFx0dmFyIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuIFx0XHRcdFx0dmFyIG9uU2NyaXB0Q29tcGxldGU7XG5cbiBcdFx0XHRcdHNjcmlwdC5jaGFyc2V0ID0gJ3V0Zi04JztcbiBcdFx0XHRcdHNjcmlwdC50aW1lb3V0ID0gMTIwO1xuIFx0XHRcdFx0aWYgKF9fd2VicGFja19yZXF1aXJlX18ubmMpIHtcbiBcdFx0XHRcdFx0c2NyaXB0LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIF9fd2VicGFja19yZXF1aXJlX18ubmMpO1xuIFx0XHRcdFx0fVxuIFx0XHRcdFx0c2NyaXB0LnNyYyA9IGpzb25wU2NyaXB0U3JjKGNodW5rSWQpO1xuXG4gXHRcdFx0XHRvblNjcmlwdENvbXBsZXRlID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gXHRcdFx0XHRcdC8vIGF2b2lkIG1lbSBsZWFrcyBpbiBJRS5cbiBcdFx0XHRcdFx0c2NyaXB0Lm9uZXJyb3IgPSBzY3JpcHQub25sb2FkID0gbnVsbDtcbiBcdFx0XHRcdFx0Y2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuIFx0XHRcdFx0XHR2YXIgY2h1bmsgPSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF07XG4gXHRcdFx0XHRcdGlmKGNodW5rICE9PSAwKSB7XG4gXHRcdFx0XHRcdFx0aWYoY2h1bmspIHtcbiBcdFx0XHRcdFx0XHRcdHZhciBlcnJvclR5cGUgPSBldmVudCAmJiAoZXZlbnQudHlwZSA9PT0gJ2xvYWQnID8gJ21pc3NpbmcnIDogZXZlbnQudHlwZSk7XG4gXHRcdFx0XHRcdFx0XHR2YXIgcmVhbFNyYyA9IGV2ZW50ICYmIGV2ZW50LnRhcmdldCAmJiBldmVudC50YXJnZXQuc3JjO1xuIFx0XHRcdFx0XHRcdFx0dmFyIGVycm9yID0gbmV3IEVycm9yKCdMb2FkaW5nIGNodW5rICcgKyBjaHVua0lkICsgJyBmYWlsZWQuXFxuKCcgKyBlcnJvclR5cGUgKyAnOiAnICsgcmVhbFNyYyArICcpJyk7XG4gXHRcdFx0XHRcdFx0XHRlcnJvci50eXBlID0gZXJyb3JUeXBlO1xuIFx0XHRcdFx0XHRcdFx0ZXJyb3IucmVxdWVzdCA9IHJlYWxTcmM7XG4gXHRcdFx0XHRcdFx0XHRjaHVua1sxXShlcnJvcik7XG4gXHRcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9IHVuZGVmaW5lZDtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0fTtcbiBcdFx0XHRcdHZhciB0aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpe1xuIFx0XHRcdFx0XHRvblNjcmlwdENvbXBsZXRlKHsgdHlwZTogJ3RpbWVvdXQnLCB0YXJnZXQ6IHNjcmlwdCB9KTtcbiBcdFx0XHRcdH0sIDEyMDAwMCk7XG4gXHRcdFx0XHRzY3JpcHQub25lcnJvciA9IHNjcmlwdC5vbmxvYWQgPSBvblNjcmlwdENvbXBsZXRlO1xuIFx0XHRcdFx0aGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpO1xuIFx0XHRcdH1cbiBcdFx0fVxuIFx0XHRyZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xuIFx0fTtcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHQvLyBvbiBlcnJvciBmdW5jdGlvbiBmb3IgYXN5bmMgbG9hZGluZ1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vZSA9IGZ1bmN0aW9uKGVycikgeyBjb25zb2xlLmVycm9yKGVycik7IHRocm93IGVycjsgfTtcblxuIFx0dmFyIGpzb25wQXJyYXkgPSB3aW5kb3dbXCJ3ZWJwYWNrSnNvbnBcIl0gPSB3aW5kb3dbXCJ3ZWJwYWNrSnNvbnBcIl0gfHwgW107XG4gXHR2YXIgb2xkSnNvbnBGdW5jdGlvbiA9IGpzb25wQXJyYXkucHVzaC5iaW5kKGpzb25wQXJyYXkpO1xuIFx0anNvbnBBcnJheS5wdXNoID0gd2VicGFja0pzb25wQ2FsbGJhY2s7XG4gXHRqc29ucEFycmF5ID0ganNvbnBBcnJheS5zbGljZSgpO1xuIFx0Zm9yKHZhciBpID0gMDsgaSA8IGpzb25wQXJyYXkubGVuZ3RoOyBpKyspIHdlYnBhY2tKc29ucENhbGxiYWNrKGpzb25wQXJyYXlbaV0pO1xuIFx0dmFyIHBhcmVudEpzb25wRnVuY3Rpb24gPSBvbGRKc29ucEZ1bmN0aW9uO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMTgxKTtcbiIsIi8qIGdsb2JhbHMgX19WVUVfU1NSX0NPTlRFWFRfXyAqL1xuXG4vLyBJTVBPUlRBTlQ6IERvIE5PVCB1c2UgRVMyMDE1IGZlYXR1cmVzIGluIHRoaXMgZmlsZSAoZXhjZXB0IGZvciBtb2R1bGVzKS5cbi8vIFRoaXMgbW9kdWxlIGlzIGEgcnVudGltZSB1dGlsaXR5IGZvciBjbGVhbmVyIGNvbXBvbmVudCBtb2R1bGUgb3V0cHV0IGFuZCB3aWxsXG4vLyBiZSBpbmNsdWRlZCBpbiB0aGUgZmluYWwgd2VicGFjayB1c2VyIGJ1bmRsZS5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbm9ybWFsaXplQ29tcG9uZW50IChcbiAgc2NyaXB0RXhwb3J0cyxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZ1bmN0aW9uYWxUZW1wbGF0ZSxcbiAgaW5qZWN0U3R5bGVzLFxuICBzY29wZUlkLFxuICBtb2R1bGVJZGVudGlmaWVyLCAvKiBzZXJ2ZXIgb25seSAqL1xuICBzaGFkb3dNb2RlIC8qIHZ1ZS1jbGkgb25seSAqL1xuKSB7XG4gIC8vIFZ1ZS5leHRlbmQgY29uc3RydWN0b3IgZXhwb3J0IGludGVyb3BcbiAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygc2NyaXB0RXhwb3J0cyA9PT0gJ2Z1bmN0aW9uJ1xuICAgID8gc2NyaXB0RXhwb3J0cy5vcHRpb25zXG4gICAgOiBzY3JpcHRFeHBvcnRzXG5cbiAgLy8gcmVuZGVyIGZ1bmN0aW9uc1xuICBpZiAocmVuZGVyKSB7XG4gICAgb3B0aW9ucy5yZW5kZXIgPSByZW5kZXJcbiAgICBvcHRpb25zLnN0YXRpY1JlbmRlckZucyA9IHN0YXRpY1JlbmRlckZuc1xuICAgIG9wdGlvbnMuX2NvbXBpbGVkID0gdHJ1ZVxuICB9XG5cbiAgLy8gZnVuY3Rpb25hbCB0ZW1wbGF0ZVxuICBpZiAoZnVuY3Rpb25hbFRlbXBsYXRlKSB7XG4gICAgb3B0aW9ucy5mdW5jdGlvbmFsID0gdHJ1ZVxuICB9XG5cbiAgLy8gc2NvcGVkSWRcbiAgaWYgKHNjb3BlSWQpIHtcbiAgICBvcHRpb25zLl9zY29wZUlkID0gJ2RhdGEtdi0nICsgc2NvcGVJZFxuICB9XG5cbiAgdmFyIGhvb2tcbiAgaWYgKG1vZHVsZUlkZW50aWZpZXIpIHsgLy8gc2VydmVyIGJ1aWxkXG4gICAgaG9vayA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAvLyAyLjMgaW5qZWN0aW9uXG4gICAgICBjb250ZXh0ID1cbiAgICAgICAgY29udGV4dCB8fCAvLyBjYWNoZWQgY2FsbFxuICAgICAgICAodGhpcy4kdm5vZGUgJiYgdGhpcy4kdm5vZGUuc3NyQ29udGV4dCkgfHwgLy8gc3RhdGVmdWxcbiAgICAgICAgKHRoaXMucGFyZW50ICYmIHRoaXMucGFyZW50LiR2bm9kZSAmJiB0aGlzLnBhcmVudC4kdm5vZGUuc3NyQ29udGV4dCkgLy8gZnVuY3Rpb25hbFxuICAgICAgLy8gMi4yIHdpdGggcnVuSW5OZXdDb250ZXh0OiB0cnVlXG4gICAgICBpZiAoIWNvbnRleHQgJiYgdHlwZW9mIF9fVlVFX1NTUl9DT05URVhUX18gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbnRleHQgPSBfX1ZVRV9TU1JfQ09OVEVYVF9fXG4gICAgICB9XG4gICAgICAvLyBpbmplY3QgY29tcG9uZW50IHN0eWxlc1xuICAgICAgaWYgKGluamVjdFN0eWxlcykge1xuICAgICAgICBpbmplY3RTdHlsZXMuY2FsbCh0aGlzLCBjb250ZXh0KVxuICAgICAgfVxuICAgICAgLy8gcmVnaXN0ZXIgY29tcG9uZW50IG1vZHVsZSBpZGVudGlmaWVyIGZvciBhc3luYyBjaHVuayBpbmZlcnJlbmNlXG4gICAgICBpZiAoY29udGV4dCAmJiBjb250ZXh0Ll9yZWdpc3RlcmVkQ29tcG9uZW50cykge1xuICAgICAgICBjb250ZXh0Ll9yZWdpc3RlcmVkQ29tcG9uZW50cy5hZGQobW9kdWxlSWRlbnRpZmllcilcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gdXNlZCBieSBzc3IgaW4gY2FzZSBjb21wb25lbnQgaXMgY2FjaGVkIGFuZCBiZWZvcmVDcmVhdGVcbiAgICAvLyBuZXZlciBnZXRzIGNhbGxlZFxuICAgIG9wdGlvbnMuX3NzclJlZ2lzdGVyID0gaG9va1xuICB9IGVsc2UgaWYgKGluamVjdFN0eWxlcykge1xuICAgIGhvb2sgPSBzaGFkb3dNb2RlXG4gICAgICA/IGZ1bmN0aW9uICgpIHsgaW5qZWN0U3R5bGVzLmNhbGwodGhpcywgdGhpcy4kcm9vdC4kb3B0aW9ucy5zaGFkb3dSb290KSB9XG4gICAgICA6IGluamVjdFN0eWxlc1xuICB9XG5cbiAgaWYgKGhvb2spIHtcbiAgICBpZiAob3B0aW9ucy5mdW5jdGlvbmFsKSB7XG4gICAgICAvLyBmb3IgdGVtcGxhdGUtb25seSBob3QtcmVsb2FkIGJlY2F1c2UgaW4gdGhhdCBjYXNlIHRoZSByZW5kZXIgZm4gZG9lc24ndFxuICAgICAgLy8gZ28gdGhyb3VnaCB0aGUgbm9ybWFsaXplclxuICAgICAgb3B0aW9ucy5faW5qZWN0U3R5bGVzID0gaG9va1xuICAgICAgLy8gcmVnaXN0ZXIgZm9yIGZ1bmN0aW9hbCBjb21wb25lbnQgaW4gdnVlIGZpbGVcbiAgICAgIHZhciBvcmlnaW5hbFJlbmRlciA9IG9wdGlvbnMucmVuZGVyXG4gICAgICBvcHRpb25zLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcldpdGhTdHlsZUluamVjdGlvbiAoaCwgY29udGV4dCkge1xuICAgICAgICBob29rLmNhbGwoY29udGV4dClcbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsUmVuZGVyKGgsIGNvbnRleHQpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGluamVjdCBjb21wb25lbnQgcmVnaXN0cmF0aW9uIGFzIGJlZm9yZUNyZWF0ZSBob29rXG4gICAgICB2YXIgZXhpc3RpbmcgPSBvcHRpb25zLmJlZm9yZUNyZWF0ZVxuICAgICAgb3B0aW9ucy5iZWZvcmVDcmVhdGUgPSBleGlzdGluZ1xuICAgICAgICA/IFtdLmNvbmNhdChleGlzdGluZywgaG9vaylcbiAgICAgICAgOiBbaG9va11cbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGV4cG9ydHM6IHNjcmlwdEV4cG9ydHMsXG4gICAgb3B0aW9uczogb3B0aW9uc1xuICB9XG59XG4iLCIvKiEgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZVxyXG50aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZVxyXG5MaWNlbnNlIGF0IGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG5cclxuVEhJUyBDT0RFIElTIFBST1ZJREVEIE9OIEFOICpBUyBJUyogQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxyXG5LSU5ELCBFSVRIRVIgRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgV0lUSE9VVCBMSU1JVEFUSU9OIEFOWSBJTVBMSUVEXHJcbldBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBUSVRMRSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UsXHJcbk1FUkNIQU5UQUJMSVRZIE9SIE5PTi1JTkZSSU5HRU1FTlQuXHJcblxyXG5TZWUgdGhlIEFwYWNoZSBWZXJzaW9uIDIuMCBMaWNlbnNlIGZvciBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnNcclxuYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xyXG4vKiBnbG9iYWwgUmVmbGVjdCwgUHJvbWlzZSAqL1xyXG5cclxudmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbihkLCBiKSB7XHJcbiAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xyXG4gICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHRlbmRzKGQsIGIpIHtcclxuICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxufVxyXG5cclxuZXhwb3J0IHZhciBfX2Fzc2lnbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uIF9fYXNzaWduKHQpIHtcclxuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcclxuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKSB0W3BdID0gc1twXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVzdChzLCBlKSB7XHJcbiAgICB2YXIgdCA9IHt9O1xyXG4gICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXHJcbiAgICAgICAgdFtwXSA9IHNbcF07XHJcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDApXHJcbiAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xyXG4gICAgcmV0dXJuIHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2RlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XHJcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XHJcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19wYXJhbShwYXJhbUluZGV4LCBkZWNvcmF0b3IpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHsgZGVjb3JhdG9yKHRhcmdldCwga2V5LCBwYXJhbUluZGV4KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSkge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXRlcih0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUocmVzdWx0LnZhbHVlKTsgfSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19nZW5lcmF0b3IodGhpc0FyZywgYm9keSkge1xyXG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcclxuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XHJcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xyXG4gICAgICAgIHdoaWxlIChfKSB0cnkge1xyXG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XHJcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcclxuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XHJcbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2V4cG9ydFN0YXIobSwgZXhwb3J0cykge1xyXG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAoIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX192YWx1ZXMobykge1xyXG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdLCBpID0gMDtcclxuICAgIGlmIChtKSByZXR1cm4gbS5jYWxsKG8pO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChvICYmIGkgPj0gby5sZW5ndGgpIG8gPSB2b2lkIDA7XHJcbiAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiBvICYmIG9baSsrXSwgZG9uZTogIW8gfTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19yZWFkKG8sIG4pIHtcclxuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcclxuICAgIGlmICghbSkgcmV0dXJuIG87XHJcbiAgICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cclxuICAgIGZpbmFsbHkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cclxuICAgIH1cclxuICAgIHJldHVybiBhcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkKCkge1xyXG4gICAgZm9yICh2YXIgYXIgPSBbXSwgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspXHJcbiAgICAgICAgYXIgPSBhci5jb25jYXQoX19yZWFkKGFyZ3VtZW50c1tpXSkpO1xyXG4gICAgcmV0dXJuIGFyO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdCh2KSB7XHJcbiAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIF9fYXdhaXQgPyAodGhpcy52ID0gdiwgdGhpcykgOiBuZXcgX19hd2FpdCh2KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNHZW5lcmF0b3IodGhpc0FyZywgX2FyZ3VtZW50cywgZ2VuZXJhdG9yKSB7XHJcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgdmFyIGcgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSksIGksIHEgPSBbXTtcclxuICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyBpZiAoZ1tuXSkgaVtuXSA9IGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAoYSwgYikgeyBxLnB1c2goW24sIHYsIGEsIGJdKSA+IDEgfHwgcmVzdW1lKG4sIHYpOyB9KTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gcmVzdW1lKG4sIHYpIHsgdHJ5IHsgc3RlcChnW25dKHYpKTsgfSBjYXRjaCAoZSkgeyBzZXR0bGUocVswXVszXSwgZSk7IH0gfVxyXG4gICAgZnVuY3Rpb24gc3RlcChyKSB7IHIudmFsdWUgaW5zdGFuY2VvZiBfX2F3YWl0ID8gUHJvbWlzZS5yZXNvbHZlKHIudmFsdWUudikudGhlbihmdWxmaWxsLCByZWplY3QpIDogc2V0dGxlKHFbMF1bMl0sIHIpOyB9XHJcbiAgICBmdW5jdGlvbiBmdWxmaWxsKHZhbHVlKSB7IHJlc3VtZShcIm5leHRcIiwgdmFsdWUpOyB9XHJcbiAgICBmdW5jdGlvbiByZWplY3QodmFsdWUpIHsgcmVzdW1lKFwidGhyb3dcIiwgdmFsdWUpOyB9XHJcbiAgICBmdW5jdGlvbiBzZXR0bGUoZiwgdikgeyBpZiAoZih2KSwgcS5zaGlmdCgpLCBxLmxlbmd0aCkgcmVzdW1lKHFbMF1bMF0sIHFbMF1bMV0pOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jRGVsZWdhdG9yKG8pIHtcclxuICAgIHZhciBpLCBwO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiLCBmdW5jdGlvbiAoZSkgeyB0aHJvdyBlOyB9KSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobiwgZikgeyBpW25dID0gb1tuXSA/IGZ1bmN0aW9uICh2KSB7IHJldHVybiAocCA9ICFwKSA/IHsgdmFsdWU6IF9fYXdhaXQob1tuXSh2KSksIGRvbmU6IG4gPT09IFwicmV0dXJuXCIgfSA6IGYgPyBmKHYpIDogdjsgfSA6IGY7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNWYWx1ZXMobykge1xyXG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgIHZhciBtID0gb1tTeW1ib2wuYXN5bmNJdGVyYXRvcl0sIGk7XHJcbiAgICByZXR1cm4gbSA/IG0uY2FsbChvKSA6IChvID0gdHlwZW9mIF9fdmFsdWVzID09PSBcImZ1bmN0aW9uXCIgPyBfX3ZhbHVlcyhvKSA6IG9bU3ltYm9sLml0ZXJhdG9yXSgpLCBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaSk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaVtuXSA9IG9bbl0gJiYgZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdiA9IG9bbl0odiksIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHYuZG9uZSwgdi52YWx1ZSk7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCBkLCB2KSB7IFByb21pc2UucmVzb2x2ZSh2KS50aGVuKGZ1bmN0aW9uKHYpIHsgcmVzb2x2ZSh7IHZhbHVlOiB2LCBkb25lOiBkIH0pOyB9LCByZWplY3QpOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX21ha2VUZW1wbGF0ZU9iamVjdChjb29rZWQsIHJhdykge1xyXG4gICAgaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29va2VkLCBcInJhd1wiLCB7IHZhbHVlOiByYXcgfSk7IH0gZWxzZSB7IGNvb2tlZC5yYXcgPSByYXc7IH1cclxuICAgIHJldHVybiBjb29rZWQ7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnRTdGFyKG1vZCkge1xyXG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcclxuICAgIHZhciByZXN1bHQgPSB7fTtcclxuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSByZXN1bHRba10gPSBtb2Rba107XHJcbiAgICByZXN1bHQuZGVmYXVsdCA9IG1vZDtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydERlZmF1bHQobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IGRlZmF1bHQ6IG1vZCB9O1xyXG59XHJcbiIsIi8qKiB2dWUtcHJvcGVydHktZGVjb3JhdG9yIHZlcnNvbiA3LjIuMCBNSVQgTElDRU5TRSBjb3B5cmlnaHQgMjAxOCBrYW9ydW4zNDMgKi9cbid1c2Ugc3RyaWN0JztcbmltcG9ydCBWdWUgZnJvbSAndnVlJztcbmltcG9ydCBDb21wb25lbnQsIHsgY3JlYXRlRGVjb3JhdG9yLCBtaXhpbnMgfSBmcm9tICd2dWUtY2xhc3MtY29tcG9uZW50JztcbmV4cG9ydCB7IENvbXBvbmVudCwgVnVlLCBtaXhpbnMgYXMgTWl4aW5zIH07XG4vKipcbiAqIGRlY29yYXRvciBvZiBhbiBpbmplY3RcbiAqIEBwYXJhbSBmcm9tIGtleVxuICogQHJldHVybiBQcm9wZXJ0eURlY29yYXRvclxuICovXG5leHBvcnQgZnVuY3Rpb24gSW5qZWN0KG9wdGlvbnMpIHtcbiAgICByZXR1cm4gY3JlYXRlRGVjb3JhdG9yKGZ1bmN0aW9uIChjb21wb25lbnRPcHRpb25zLCBrZXkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBjb21wb25lbnRPcHRpb25zLmluamVjdCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGNvbXBvbmVudE9wdGlvbnMuaW5qZWN0ID0ge307XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGNvbXBvbmVudE9wdGlvbnMuaW5qZWN0KSkge1xuICAgICAgICAgICAgY29tcG9uZW50T3B0aW9ucy5pbmplY3Rba2V5XSA9IG9wdGlvbnMgfHwga2V5O1xuICAgICAgICB9XG4gICAgfSk7XG59XG4vKipcbiAqIGRlY29yYXRvciBvZiBhIHByb3ZpZGVcbiAqIEBwYXJhbSBrZXkga2V5XG4gKiBAcmV0dXJuIFByb3BlcnR5RGVjb3JhdG9yIHwgdm9pZFxuICovXG5leHBvcnQgZnVuY3Rpb24gUHJvdmlkZShrZXkpIHtcbiAgICByZXR1cm4gY3JlYXRlRGVjb3JhdG9yKGZ1bmN0aW9uIChjb21wb25lbnRPcHRpb25zLCBrKSB7XG4gICAgICAgIHZhciBwcm92aWRlID0gY29tcG9uZW50T3B0aW9ucy5wcm92aWRlO1xuICAgICAgICBpZiAodHlwZW9mIHByb3ZpZGUgIT09ICdmdW5jdGlvbicgfHwgIXByb3ZpZGUubWFuYWdlZCkge1xuICAgICAgICAgICAgdmFyIG9yaWdpbmFsXzEgPSBjb21wb25lbnRPcHRpb25zLnByb3ZpZGU7XG4gICAgICAgICAgICBwcm92aWRlID0gY29tcG9uZW50T3B0aW9ucy5wcm92aWRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBydiA9IE9iamVjdC5jcmVhdGUoKHR5cGVvZiBvcmlnaW5hbF8xID09PSAnZnVuY3Rpb24nID8gb3JpZ2luYWxfMS5jYWxsKHRoaXMpIDogb3JpZ2luYWxfMSkgfHwgbnVsbCk7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSBpbiBwcm92aWRlLm1hbmFnZWQpXG4gICAgICAgICAgICAgICAgICAgIHJ2W3Byb3ZpZGUubWFuYWdlZFtpXV0gPSB0aGlzW2ldO1xuICAgICAgICAgICAgICAgIHJldHVybiBydjtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBwcm92aWRlLm1hbmFnZWQgPSB7fTtcbiAgICAgICAgfVxuICAgICAgICBwcm92aWRlLm1hbmFnZWRba10gPSBrZXkgfHwgaztcbiAgICB9KTtcbn1cbi8qKlxuICogZGVjb3JhdG9yIG9mIG1vZGVsXG4gKiBAcGFyYW0gIGV2ZW50IGV2ZW50IG5hbWVcbiAqIEBwYXJhbSBvcHRpb25zIG9wdGlvbnNcbiAqIEByZXR1cm4gUHJvcGVydHlEZWNvcmF0b3JcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIE1vZGVsKGV2ZW50LCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICByZXR1cm4gY3JlYXRlRGVjb3JhdG9yKGZ1bmN0aW9uIChjb21wb25lbnRPcHRpb25zLCBrKSB7XG4gICAgICAgIChjb21wb25lbnRPcHRpb25zLnByb3BzIHx8IChjb21wb25lbnRPcHRpb25zLnByb3BzID0ge30pKVtrXSA9IG9wdGlvbnM7XG4gICAgICAgIGNvbXBvbmVudE9wdGlvbnMubW9kZWwgPSB7IHByb3A6IGssIGV2ZW50OiBldmVudCB8fCBrIH07XG4gICAgfSk7XG59XG4vKipcbiAqIGRlY29yYXRvciBvZiBhIHByb3BcbiAqIEBwYXJhbSAgb3B0aW9ucyB0aGUgb3B0aW9ucyBmb3IgdGhlIHByb3BcbiAqIEByZXR1cm4gUHJvcGVydHlEZWNvcmF0b3IgfCB2b2lkXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBQcm9wKG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgIHJldHVybiBjcmVhdGVEZWNvcmF0b3IoZnVuY3Rpb24gKGNvbXBvbmVudE9wdGlvbnMsIGspIHtcbiAgICAgICAgKGNvbXBvbmVudE9wdGlvbnMucHJvcHMgfHwgKGNvbXBvbmVudE9wdGlvbnMucHJvcHMgPSB7fSkpW2tdID0gb3B0aW9ucztcbiAgICB9KTtcbn1cbi8qKlxuICogZGVjb3JhdG9yIG9mIGEgd2F0Y2ggZnVuY3Rpb25cbiAqIEBwYXJhbSAgcGF0aCB0aGUgcGF0aCBvciB0aGUgZXhwcmVzc2lvbiB0byBvYnNlcnZlXG4gKiBAcGFyYW0gIFdhdGNoT3B0aW9uXG4gKiBAcmV0dXJuIE1ldGhvZERlY29yYXRvclxuICovXG5leHBvcnQgZnVuY3Rpb24gV2F0Y2gocGF0aCwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgdmFyIF9hID0gb3B0aW9ucy5kZWVwLCBkZWVwID0gX2EgPT09IHZvaWQgMCA/IGZhbHNlIDogX2EsIF9iID0gb3B0aW9ucy5pbW1lZGlhdGUsIGltbWVkaWF0ZSA9IF9iID09PSB2b2lkIDAgPyBmYWxzZSA6IF9iO1xuICAgIHJldHVybiBjcmVhdGVEZWNvcmF0b3IoZnVuY3Rpb24gKGNvbXBvbmVudE9wdGlvbnMsIGhhbmRsZXIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBjb21wb25lbnRPcHRpb25zLndhdGNoICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgY29tcG9uZW50T3B0aW9ucy53YXRjaCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIH1cbiAgICAgICAgY29tcG9uZW50T3B0aW9ucy53YXRjaFtwYXRoXSA9IHsgaGFuZGxlcjogaGFuZGxlciwgZGVlcDogZGVlcCwgaW1tZWRpYXRlOiBpbW1lZGlhdGUgfTtcbiAgICB9KTtcbn1cbi8vIENvZGUgY29waWVkIGZyb20gVnVlL3NyYy9zaGFyZWQvdXRpbC5qc1xudmFyIGh5cGhlbmF0ZVJFID0gL1xcQihbQS1aXSkvZztcbnZhciBoeXBoZW5hdGUgPSBmdW5jdGlvbiAoc3RyKSB7IHJldHVybiBzdHIucmVwbGFjZShoeXBoZW5hdGVSRSwgJy0kMScpLnRvTG93ZXJDYXNlKCk7IH07XG4vKipcbiAqIGRlY29yYXRvciBvZiBhbiBldmVudC1lbWl0dGVyIGZ1bmN0aW9uXG4gKiBAcGFyYW0gIGV2ZW50IFRoZSBuYW1lIG9mIHRoZSBldmVudFxuICogQHJldHVybiBNZXRob2REZWNvcmF0b3JcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIEVtaXQoZXZlbnQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKF90YXJnZXQsIGtleSwgZGVzY3JpcHRvcikge1xuICAgICAgICBrZXkgPSBoeXBoZW5hdGUoa2V5KTtcbiAgICAgICAgdmFyIG9yaWdpbmFsID0gZGVzY3JpcHRvci52YWx1ZTtcbiAgICAgICAgZGVzY3JpcHRvci52YWx1ZSA9IGZ1bmN0aW9uIGVtaXR0ZXIoKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGVtaXQgPSBmdW5jdGlvbiAocmV0dXJuVmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAocmV0dXJuVmFsdWUgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgYXJncy51bnNoaWZ0KHJldHVyblZhbHVlKTtcbiAgICAgICAgICAgICAgICBfdGhpcy4kZW1pdC5hcHBseShfdGhpcywgW2V2ZW50IHx8IGtleV0uY29uY2F0KGFyZ3MpKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB2YXIgcmV0dXJuVmFsdWUgPSBvcmlnaW5hbC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgICAgIGlmIChpc1Byb21pc2UocmV0dXJuVmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuVmFsdWUudGhlbihmdW5jdGlvbiAocmV0dXJuVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgZW1pdChyZXR1cm5WYWx1ZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBlbWl0KHJldHVyblZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9O1xufVxuZnVuY3Rpb24gaXNQcm9taXNlKG9iaikge1xuICAgIHJldHVybiBvYmogaW5zdGFuY2VvZiBQcm9taXNlIHx8IChvYmogJiYgdHlwZW9mIG9iai50aGVuID09PSAnZnVuY3Rpb24nKTtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2l0ZXJhdG9yID0gcmVxdWlyZShcIi4uL2NvcmUtanMvc3ltYm9sL2l0ZXJhdG9yXCIpO1xuXG52YXIgX2l0ZXJhdG9yMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2l0ZXJhdG9yKTtcblxudmFyIF9zeW1ib2wgPSByZXF1aXJlKFwiLi4vY29yZS1qcy9zeW1ib2xcIik7XG5cbnZhciBfc3ltYm9sMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3N5bWJvbCk7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIF9zeW1ib2wyLmRlZmF1bHQgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgX2l0ZXJhdG9yMi5kZWZhdWx0ID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgX3N5bWJvbDIuZGVmYXVsdCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gX3N5bWJvbDIuZGVmYXVsdCAmJiBvYmogIT09IF9zeW1ib2wyLmRlZmF1bHQucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IHR5cGVvZiBfc3ltYm9sMi5kZWZhdWx0ID09PSBcImZ1bmN0aW9uXCIgJiYgX3R5cGVvZihfaXRlcmF0b3IyLmRlZmF1bHQpID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKG9iaik7XG59IDogZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gb2JqICYmIHR5cGVvZiBfc3ltYm9sMi5kZWZhdWx0ID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBfc3ltYm9sMi5kZWZhdWx0ICYmIG9iaiAhPT0gX3N5bWJvbDIuZGVmYXVsdC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iaiA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKG9iaik7XG59OyIsInZhciBmcmVlR2xvYmFsID0gcmVxdWlyZSgnLi9fZnJlZUdsb2JhbCcpO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHNlbGZgLiAqL1xudmFyIGZyZWVTZWxmID0gdHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZiAmJiBzZWxmLk9iamVjdCA9PT0gT2JqZWN0ICYmIHNlbGY7XG5cbi8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xudmFyIHJvb3QgPSBmcmVlR2xvYmFsIHx8IGZyZWVTZWxmIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gcm9vdDtcbiIsIi8qIVxuICogVnVlLmpzIHYyLjUuMTdcbiAqIChjKSAyMDE0LTIwMTggRXZhbiBZb3VcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbiAqL1xuLyogICovXG5cbnZhciBlbXB0eU9iamVjdCA9IE9iamVjdC5mcmVlemUoe30pO1xuXG4vLyB0aGVzZSBoZWxwZXJzIHByb2R1Y2VzIGJldHRlciB2bSBjb2RlIGluIEpTIGVuZ2luZXMgZHVlIHRvIHRoZWlyXG4vLyBleHBsaWNpdG5lc3MgYW5kIGZ1bmN0aW9uIGlubGluaW5nXG5mdW5jdGlvbiBpc1VuZGVmICh2KSB7XG4gIHJldHVybiB2ID09PSB1bmRlZmluZWQgfHwgdiA9PT0gbnVsbFxufVxuXG5mdW5jdGlvbiBpc0RlZiAodikge1xuICByZXR1cm4gdiAhPT0gdW5kZWZpbmVkICYmIHYgIT09IG51bGxcbn1cblxuZnVuY3Rpb24gaXNUcnVlICh2KSB7XG4gIHJldHVybiB2ID09PSB0cnVlXG59XG5cbmZ1bmN0aW9uIGlzRmFsc2UgKHYpIHtcbiAgcmV0dXJuIHYgPT09IGZhbHNlXG59XG5cbi8qKlxuICogQ2hlY2sgaWYgdmFsdWUgaXMgcHJpbWl0aXZlXG4gKi9cbmZ1bmN0aW9uIGlzUHJpbWl0aXZlICh2YWx1ZSkge1xuICByZXR1cm4gKFxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgfHxcbiAgICB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInIHx8XG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgdHlwZW9mIHZhbHVlID09PSAnc3ltYm9sJyB8fFxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nXG4gIClcbn1cblxuLyoqXG4gKiBRdWljayBvYmplY3QgY2hlY2sgLSB0aGlzIGlzIHByaW1hcmlseSB1c2VkIHRvIHRlbGxcbiAqIE9iamVjdHMgZnJvbSBwcmltaXRpdmUgdmFsdWVzIHdoZW4gd2Uga25vdyB0aGUgdmFsdWVcbiAqIGlzIGEgSlNPTi1jb21wbGlhbnQgdHlwZS5cbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QgKG9iaikge1xuICByZXR1cm4gb2JqICE9PSBudWxsICYmIHR5cGVvZiBvYmogPT09ICdvYmplY3QnXG59XG5cbi8qKlxuICogR2V0IHRoZSByYXcgdHlwZSBzdHJpbmcgb2YgYSB2YWx1ZSBlLmcuIFtvYmplY3QgT2JqZWN0XVxuICovXG52YXIgX3RvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuZnVuY3Rpb24gdG9SYXdUeXBlICh2YWx1ZSkge1xuICByZXR1cm4gX3RvU3RyaW5nLmNhbGwodmFsdWUpLnNsaWNlKDgsIC0xKVxufVxuXG4vKipcbiAqIFN0cmljdCBvYmplY3QgdHlwZSBjaGVjay4gT25seSByZXR1cm5zIHRydWVcbiAqIGZvciBwbGFpbiBKYXZhU2NyaXB0IG9iamVjdHMuXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QgKG9iaikge1xuICByZXR1cm4gX3RvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgT2JqZWN0XSdcbn1cblxuZnVuY3Rpb24gaXNSZWdFeHAgKHYpIHtcbiAgcmV0dXJuIF90b1N0cmluZy5jYWxsKHYpID09PSAnW29iamVjdCBSZWdFeHBdJ1xufVxuXG4vKipcbiAqIENoZWNrIGlmIHZhbCBpcyBhIHZhbGlkIGFycmF5IGluZGV4LlxuICovXG5mdW5jdGlvbiBpc1ZhbGlkQXJyYXlJbmRleCAodmFsKSB7XG4gIHZhciBuID0gcGFyc2VGbG9hdChTdHJpbmcodmFsKSk7XG4gIHJldHVybiBuID49IDAgJiYgTWF0aC5mbG9vcihuKSA9PT0gbiAmJiBpc0Zpbml0ZSh2YWwpXG59XG5cbi8qKlxuICogQ29udmVydCBhIHZhbHVlIHRvIGEgc3RyaW5nIHRoYXQgaXMgYWN0dWFsbHkgcmVuZGVyZWQuXG4gKi9cbmZ1bmN0aW9uIHRvU3RyaW5nICh2YWwpIHtcbiAgcmV0dXJuIHZhbCA9PSBudWxsXG4gICAgPyAnJ1xuICAgIDogdHlwZW9mIHZhbCA9PT0gJ29iamVjdCdcbiAgICAgID8gSlNPTi5zdHJpbmdpZnkodmFsLCBudWxsLCAyKVxuICAgICAgOiBTdHJpbmcodmFsKVxufVxuXG4vKipcbiAqIENvbnZlcnQgYSBpbnB1dCB2YWx1ZSB0byBhIG51bWJlciBmb3IgcGVyc2lzdGVuY2UuXG4gKiBJZiB0aGUgY29udmVyc2lvbiBmYWlscywgcmV0dXJuIG9yaWdpbmFsIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gdG9OdW1iZXIgKHZhbCkge1xuICB2YXIgbiA9IHBhcnNlRmxvYXQodmFsKTtcbiAgcmV0dXJuIGlzTmFOKG4pID8gdmFsIDogblxufVxuXG4vKipcbiAqIE1ha2UgYSBtYXAgYW5kIHJldHVybiBhIGZ1bmN0aW9uIGZvciBjaGVja2luZyBpZiBhIGtleVxuICogaXMgaW4gdGhhdCBtYXAuXG4gKi9cbmZ1bmN0aW9uIG1ha2VNYXAgKFxuICBzdHIsXG4gIGV4cGVjdHNMb3dlckNhc2Vcbikge1xuICB2YXIgbWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdmFyIGxpc3QgPSBzdHIuc3BsaXQoJywnKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgbWFwW2xpc3RbaV1dID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZXhwZWN0c0xvd2VyQ2FzZVxuICAgID8gZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gbWFwW3ZhbC50b0xvd2VyQ2FzZSgpXTsgfVxuICAgIDogZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gbWFwW3ZhbF07IH1cbn1cblxuLyoqXG4gKiBDaGVjayBpZiBhIHRhZyBpcyBhIGJ1aWx0LWluIHRhZy5cbiAqL1xudmFyIGlzQnVpbHRJblRhZyA9IG1ha2VNYXAoJ3Nsb3QsY29tcG9uZW50JywgdHJ1ZSk7XG5cbi8qKlxuICogQ2hlY2sgaWYgYSBhdHRyaWJ1dGUgaXMgYSByZXNlcnZlZCBhdHRyaWJ1dGUuXG4gKi9cbnZhciBpc1Jlc2VydmVkQXR0cmlidXRlID0gbWFrZU1hcCgna2V5LHJlZixzbG90LHNsb3Qtc2NvcGUsaXMnKTtcblxuLyoqXG4gKiBSZW1vdmUgYW4gaXRlbSBmcm9tIGFuIGFycmF5XG4gKi9cbmZ1bmN0aW9uIHJlbW92ZSAoYXJyLCBpdGVtKSB7XG4gIGlmIChhcnIubGVuZ3RoKSB7XG4gICAgdmFyIGluZGV4ID0gYXJyLmluZGV4T2YoaXRlbSk7XG4gICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgIHJldHVybiBhcnIuc3BsaWNlKGluZGV4LCAxKVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIENoZWNrIHdoZXRoZXIgdGhlIG9iamVjdCBoYXMgdGhlIHByb3BlcnR5LlxuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuZnVuY3Rpb24gaGFzT3duIChvYmosIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSlcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBjYWNoZWQgdmVyc2lvbiBvZiBhIHB1cmUgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNhY2hlZCAoZm4pIHtcbiAgdmFyIGNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgcmV0dXJuIChmdW5jdGlvbiBjYWNoZWRGbiAoc3RyKSB7XG4gICAgdmFyIGhpdCA9IGNhY2hlW3N0cl07XG4gICAgcmV0dXJuIGhpdCB8fCAoY2FjaGVbc3RyXSA9IGZuKHN0cikpXG4gIH0pXG59XG5cbi8qKlxuICogQ2FtZWxpemUgYSBoeXBoZW4tZGVsaW1pdGVkIHN0cmluZy5cbiAqL1xudmFyIGNhbWVsaXplUkUgPSAvLShcXHcpL2c7XG52YXIgY2FtZWxpemUgPSBjYWNoZWQoZnVuY3Rpb24gKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoY2FtZWxpemVSRSwgZnVuY3Rpb24gKF8sIGMpIHsgcmV0dXJuIGMgPyBjLnRvVXBwZXJDYXNlKCkgOiAnJzsgfSlcbn0pO1xuXG4vKipcbiAqIENhcGl0YWxpemUgYSBzdHJpbmcuXG4gKi9cbnZhciBjYXBpdGFsaXplID0gY2FjaGVkKGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0ci5zbGljZSgxKVxufSk7XG5cbi8qKlxuICogSHlwaGVuYXRlIGEgY2FtZWxDYXNlIHN0cmluZy5cbiAqL1xudmFyIGh5cGhlbmF0ZVJFID0gL1xcQihbQS1aXSkvZztcbnZhciBoeXBoZW5hdGUgPSBjYWNoZWQoZnVuY3Rpb24gKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoaHlwaGVuYXRlUkUsICctJDEnKS50b0xvd2VyQ2FzZSgpXG59KTtcblxuLyoqXG4gKiBTaW1wbGUgYmluZCBwb2x5ZmlsbCBmb3IgZW52aXJvbm1lbnRzIHRoYXQgZG8gbm90IHN1cHBvcnQgaXQuLi4gZS5nLlxuICogUGhhbnRvbUpTIDEueC4gVGVjaG5pY2FsbHkgd2UgZG9uJ3QgbmVlZCB0aGlzIGFueW1vcmUgc2luY2UgbmF0aXZlIGJpbmQgaXNcbiAqIG5vdyBtb3JlIHBlcmZvcm1hbnQgaW4gbW9zdCBicm93c2VycywgYnV0IHJlbW92aW5nIGl0IHdvdWxkIGJlIGJyZWFraW5nIGZvclxuICogY29kZSB0aGF0IHdhcyBhYmxlIHRvIHJ1biBpbiBQaGFudG9tSlMgMS54LCBzbyB0aGlzIG11c3QgYmUga2VwdCBmb3JcbiAqIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LlxuICovXG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiBwb2x5ZmlsbEJpbmQgKGZuLCBjdHgpIHtcbiAgZnVuY3Rpb24gYm91bmRGbiAoYSkge1xuICAgIHZhciBsID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICByZXR1cm4gbFxuICAgICAgPyBsID4gMVxuICAgICAgICA/IGZuLmFwcGx5KGN0eCwgYXJndW1lbnRzKVxuICAgICAgICA6IGZuLmNhbGwoY3R4LCBhKVxuICAgICAgOiBmbi5jYWxsKGN0eClcbiAgfVxuXG4gIGJvdW5kRm4uX2xlbmd0aCA9IGZuLmxlbmd0aDtcbiAgcmV0dXJuIGJvdW5kRm5cbn1cblxuZnVuY3Rpb24gbmF0aXZlQmluZCAoZm4sIGN0eCkge1xuICByZXR1cm4gZm4uYmluZChjdHgpXG59XG5cbnZhciBiaW5kID0gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmRcbiAgPyBuYXRpdmVCaW5kXG4gIDogcG9seWZpbGxCaW5kO1xuXG4vKipcbiAqIENvbnZlcnQgYW4gQXJyYXktbGlrZSBvYmplY3QgdG8gYSByZWFsIEFycmF5LlxuICovXG5mdW5jdGlvbiB0b0FycmF5IChsaXN0LCBzdGFydCkge1xuICBzdGFydCA9IHN0YXJ0IHx8IDA7XG4gIHZhciBpID0gbGlzdC5sZW5ndGggLSBzdGFydDtcbiAgdmFyIHJldCA9IG5ldyBBcnJheShpKTtcbiAgd2hpbGUgKGktLSkge1xuICAgIHJldFtpXSA9IGxpc3RbaSArIHN0YXJ0XTtcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbi8qKlxuICogTWl4IHByb3BlcnRpZXMgaW50byB0YXJnZXQgb2JqZWN0LlxuICovXG5mdW5jdGlvbiBleHRlbmQgKHRvLCBfZnJvbSkge1xuICBmb3IgKHZhciBrZXkgaW4gX2Zyb20pIHtcbiAgICB0b1trZXldID0gX2Zyb21ba2V5XTtcbiAgfVxuICByZXR1cm4gdG9cbn1cblxuLyoqXG4gKiBNZXJnZSBhbiBBcnJheSBvZiBPYmplY3RzIGludG8gYSBzaW5nbGUgT2JqZWN0LlxuICovXG5mdW5jdGlvbiB0b09iamVjdCAoYXJyKSB7XG4gIHZhciByZXMgPSB7fTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoYXJyW2ldKSB7XG4gICAgICBleHRlbmQocmVzLCBhcnJbaV0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qKlxuICogUGVyZm9ybSBubyBvcGVyYXRpb24uXG4gKiBTdHViYmluZyBhcmdzIHRvIG1ha2UgRmxvdyBoYXBweSB3aXRob3V0IGxlYXZpbmcgdXNlbGVzcyB0cmFuc3BpbGVkIGNvZGVcbiAqIHdpdGggLi4ucmVzdCAoaHR0cHM6Ly9mbG93Lm9yZy9ibG9nLzIwMTcvMDUvMDcvU3RyaWN0LUZ1bmN0aW9uLUNhbGwtQXJpdHkvKVxuICovXG5mdW5jdGlvbiBub29wIChhLCBiLCBjKSB7fVxuXG4vKipcbiAqIEFsd2F5cyByZXR1cm4gZmFsc2UuXG4gKi9cbnZhciBubyA9IGZ1bmN0aW9uIChhLCBiLCBjKSB7IHJldHVybiBmYWxzZTsgfTtcblxuLyoqXG4gKiBSZXR1cm4gc2FtZSB2YWx1ZVxuICovXG52YXIgaWRlbnRpdHkgPSBmdW5jdGlvbiAoXykgeyByZXR1cm4gXzsgfTtcblxuLyoqXG4gKiBHZW5lcmF0ZSBhIHN0YXRpYyBrZXlzIHN0cmluZyBmcm9tIGNvbXBpbGVyIG1vZHVsZXMuXG4gKi9cblxuXG4vKipcbiAqIENoZWNrIGlmIHR3byB2YWx1ZXMgYXJlIGxvb3NlbHkgZXF1YWwgLSB0aGF0IGlzLFxuICogaWYgdGhleSBhcmUgcGxhaW4gb2JqZWN0cywgZG8gdGhleSBoYXZlIHRoZSBzYW1lIHNoYXBlP1xuICovXG5mdW5jdGlvbiBsb29zZUVxdWFsIChhLCBiKSB7XG4gIGlmIChhID09PSBiKSB7IHJldHVybiB0cnVlIH1cbiAgdmFyIGlzT2JqZWN0QSA9IGlzT2JqZWN0KGEpO1xuICB2YXIgaXNPYmplY3RCID0gaXNPYmplY3QoYik7XG4gIGlmIChpc09iamVjdEEgJiYgaXNPYmplY3RCKSB7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBpc0FycmF5QSA9IEFycmF5LmlzQXJyYXkoYSk7XG4gICAgICB2YXIgaXNBcnJheUIgPSBBcnJheS5pc0FycmF5KGIpO1xuICAgICAgaWYgKGlzQXJyYXlBICYmIGlzQXJyYXlCKSB7XG4gICAgICAgIHJldHVybiBhLmxlbmd0aCA9PT0gYi5sZW5ndGggJiYgYS5ldmVyeShmdW5jdGlvbiAoZSwgaSkge1xuICAgICAgICAgIHJldHVybiBsb29zZUVxdWFsKGUsIGJbaV0pXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2UgaWYgKCFpc0FycmF5QSAmJiAhaXNBcnJheUIpIHtcbiAgICAgICAgdmFyIGtleXNBID0gT2JqZWN0LmtleXMoYSk7XG4gICAgICAgIHZhciBrZXlzQiA9IE9iamVjdC5rZXlzKGIpO1xuICAgICAgICByZXR1cm4ga2V5c0EubGVuZ3RoID09PSBrZXlzQi5sZW5ndGggJiYga2V5c0EuZXZlcnkoZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgIHJldHVybiBsb29zZUVxdWFsKGFba2V5XSwgYltrZXldKVxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgfSBlbHNlIGlmICghaXNPYmplY3RBICYmICFpc09iamVjdEIpIHtcbiAgICByZXR1cm4gU3RyaW5nKGEpID09PSBTdHJpbmcoYilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5mdW5jdGlvbiBsb29zZUluZGV4T2YgKGFyciwgdmFsKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGxvb3NlRXF1YWwoYXJyW2ldLCB2YWwpKSB7IHJldHVybiBpIH1cbiAgfVxuICByZXR1cm4gLTFcbn1cblxuLyoqXG4gKiBFbnN1cmUgYSBmdW5jdGlvbiBpcyBjYWxsZWQgb25seSBvbmNlLlxuICovXG5mdW5jdGlvbiBvbmNlIChmbikge1xuICB2YXIgY2FsbGVkID0gZmFsc2U7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFjYWxsZWQpIHtcbiAgICAgIGNhbGxlZCA9IHRydWU7XG4gICAgICBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfVxufVxuXG52YXIgU1NSX0FUVFIgPSAnZGF0YS1zZXJ2ZXItcmVuZGVyZWQnO1xuXG52YXIgQVNTRVRfVFlQRVMgPSBbXG4gICdjb21wb25lbnQnLFxuICAnZGlyZWN0aXZlJyxcbiAgJ2ZpbHRlcidcbl07XG5cbnZhciBMSUZFQ1lDTEVfSE9PS1MgPSBbXG4gICdiZWZvcmVDcmVhdGUnLFxuICAnY3JlYXRlZCcsXG4gICdiZWZvcmVNb3VudCcsXG4gICdtb3VudGVkJyxcbiAgJ2JlZm9yZVVwZGF0ZScsXG4gICd1cGRhdGVkJyxcbiAgJ2JlZm9yZURlc3Ryb3knLFxuICAnZGVzdHJveWVkJyxcbiAgJ2FjdGl2YXRlZCcsXG4gICdkZWFjdGl2YXRlZCcsXG4gICdlcnJvckNhcHR1cmVkJ1xuXTtcblxuLyogICovXG5cbnZhciBjb25maWcgPSAoe1xuICAvKipcbiAgICogT3B0aW9uIG1lcmdlIHN0cmF0ZWdpZXMgKHVzZWQgaW4gY29yZS91dGlsL29wdGlvbnMpXG4gICAqL1xuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgb3B0aW9uTWVyZ2VTdHJhdGVnaWVzOiBPYmplY3QuY3JlYXRlKG51bGwpLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIHN1cHByZXNzIHdhcm5pbmdzLlxuICAgKi9cbiAgc2lsZW50OiBmYWxzZSxcblxuICAvKipcbiAgICogU2hvdyBwcm9kdWN0aW9uIG1vZGUgdGlwIG1lc3NhZ2Ugb24gYm9vdD9cbiAgICovXG4gIHByb2R1Y3Rpb25UaXA6IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicsXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gZW5hYmxlIGRldnRvb2xzXG4gICAqL1xuICBkZXZ0b29sczogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyxcblxuICAvKipcbiAgICogV2hldGhlciB0byByZWNvcmQgcGVyZlxuICAgKi9cbiAgcGVyZm9ybWFuY2U6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBFcnJvciBoYW5kbGVyIGZvciB3YXRjaGVyIGVycm9yc1xuICAgKi9cbiAgZXJyb3JIYW5kbGVyOiBudWxsLFxuXG4gIC8qKlxuICAgKiBXYXJuIGhhbmRsZXIgZm9yIHdhdGNoZXIgd2FybnNcbiAgICovXG4gIHdhcm5IYW5kbGVyOiBudWxsLFxuXG4gIC8qKlxuICAgKiBJZ25vcmUgY2VydGFpbiBjdXN0b20gZWxlbWVudHNcbiAgICovXG4gIGlnbm9yZWRFbGVtZW50czogW10sXG5cbiAgLyoqXG4gICAqIEN1c3RvbSB1c2VyIGtleSBhbGlhc2VzIGZvciB2LW9uXG4gICAqL1xuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAga2V5Q29kZXM6IE9iamVjdC5jcmVhdGUobnVsbCksXG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGEgdGFnIGlzIHJlc2VydmVkIHNvIHRoYXQgaXQgY2Fubm90IGJlIHJlZ2lzdGVyZWQgYXMgYVxuICAgKiBjb21wb25lbnQuIFRoaXMgaXMgcGxhdGZvcm0tZGVwZW5kZW50IGFuZCBtYXkgYmUgb3ZlcndyaXR0ZW4uXG4gICAqL1xuICBpc1Jlc2VydmVkVGFnOiBubyxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYW4gYXR0cmlidXRlIGlzIHJlc2VydmVkIHNvIHRoYXQgaXQgY2Fubm90IGJlIHVzZWQgYXMgYSBjb21wb25lbnRcbiAgICogcHJvcC4gVGhpcyBpcyBwbGF0Zm9ybS1kZXBlbmRlbnQgYW5kIG1heSBiZSBvdmVyd3JpdHRlbi5cbiAgICovXG4gIGlzUmVzZXJ2ZWRBdHRyOiBubyxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYSB0YWcgaXMgYW4gdW5rbm93biBlbGVtZW50LlxuICAgKiBQbGF0Zm9ybS1kZXBlbmRlbnQuXG4gICAqL1xuICBpc1Vua25vd25FbGVtZW50OiBubyxcblxuICAvKipcbiAgICogR2V0IHRoZSBuYW1lc3BhY2Ugb2YgYW4gZWxlbWVudFxuICAgKi9cbiAgZ2V0VGFnTmFtZXNwYWNlOiBub29wLFxuXG4gIC8qKlxuICAgKiBQYXJzZSB0aGUgcmVhbCB0YWcgbmFtZSBmb3IgdGhlIHNwZWNpZmljIHBsYXRmb3JtLlxuICAgKi9cbiAgcGFyc2VQbGF0Zm9ybVRhZ05hbWU6IGlkZW50aXR5LFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhbiBhdHRyaWJ1dGUgbXVzdCBiZSBib3VuZCB1c2luZyBwcm9wZXJ0eSwgZS5nLiB2YWx1ZVxuICAgKiBQbGF0Zm9ybS1kZXBlbmRlbnQuXG4gICAqL1xuICBtdXN0VXNlUHJvcDogbm8sXG5cbiAgLyoqXG4gICAqIEV4cG9zZWQgZm9yIGxlZ2FjeSByZWFzb25zXG4gICAqL1xuICBfbGlmZWN5Y2xlSG9va3M6IExJRkVDWUNMRV9IT09LU1xufSlcblxuLyogICovXG5cbi8qKlxuICogQ2hlY2sgaWYgYSBzdHJpbmcgc3RhcnRzIHdpdGggJCBvciBfXG4gKi9cbmZ1bmN0aW9uIGlzUmVzZXJ2ZWQgKHN0cikge1xuICB2YXIgYyA9IChzdHIgKyAnJykuY2hhckNvZGVBdCgwKTtcbiAgcmV0dXJuIGMgPT09IDB4MjQgfHwgYyA9PT0gMHg1RlxufVxuXG4vKipcbiAqIERlZmluZSBhIHByb3BlcnR5LlxuICovXG5mdW5jdGlvbiBkZWYgKG9iaiwga2V5LCB2YWwsIGVudW1lcmFibGUpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgdmFsdWU6IHZhbCxcbiAgICBlbnVtZXJhYmxlOiAhIWVudW1lcmFibGUsXG4gICAgd3JpdGFibGU6IHRydWUsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xufVxuXG4vKipcbiAqIFBhcnNlIHNpbXBsZSBwYXRoLlxuICovXG52YXIgYmFpbFJFID0gL1teXFx3LiRdLztcbmZ1bmN0aW9uIHBhcnNlUGF0aCAocGF0aCkge1xuICBpZiAoYmFpbFJFLnRlc3QocGF0aCkpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgc2VnbWVudHMgPSBwYXRoLnNwbGl0KCcuJyk7XG4gIHJldHVybiBmdW5jdGlvbiAob2JqKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWdtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKCFvYmopIHsgcmV0dXJuIH1cbiAgICAgIG9iaiA9IG9ialtzZWdtZW50c1tpXV07XG4gICAgfVxuICAgIHJldHVybiBvYmpcbiAgfVxufVxuXG4vKiAgKi9cblxuLy8gY2FuIHdlIHVzZSBfX3Byb3RvX18/XG52YXIgaGFzUHJvdG8gPSAnX19wcm90b19fJyBpbiB7fTtcblxuLy8gQnJvd3NlciBlbnZpcm9ubWVudCBzbmlmZmluZ1xudmFyIGluQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnO1xudmFyIGluV2VleCA9IHR5cGVvZiBXWEVudmlyb25tZW50ICE9PSAndW5kZWZpbmVkJyAmJiAhIVdYRW52aXJvbm1lbnQucGxhdGZvcm07XG52YXIgd2VleFBsYXRmb3JtID0gaW5XZWV4ICYmIFdYRW52aXJvbm1lbnQucGxhdGZvcm0udG9Mb3dlckNhc2UoKTtcbnZhciBVQSA9IGluQnJvd3NlciAmJiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpO1xudmFyIGlzSUUgPSBVQSAmJiAvbXNpZXx0cmlkZW50Ly50ZXN0KFVBKTtcbnZhciBpc0lFOSA9IFVBICYmIFVBLmluZGV4T2YoJ21zaWUgOS4wJykgPiAwO1xudmFyIGlzRWRnZSA9IFVBICYmIFVBLmluZGV4T2YoJ2VkZ2UvJykgPiAwO1xudmFyIGlzQW5kcm9pZCA9IChVQSAmJiBVQS5pbmRleE9mKCdhbmRyb2lkJykgPiAwKSB8fCAod2VleFBsYXRmb3JtID09PSAnYW5kcm9pZCcpO1xudmFyIGlzSU9TID0gKFVBICYmIC9pcGhvbmV8aXBhZHxpcG9kfGlvcy8udGVzdChVQSkpIHx8ICh3ZWV4UGxhdGZvcm0gPT09ICdpb3MnKTtcbnZhciBpc0Nocm9tZSA9IFVBICYmIC9jaHJvbWVcXC9cXGQrLy50ZXN0KFVBKSAmJiAhaXNFZGdlO1xuXG4vLyBGaXJlZm94IGhhcyBhIFwid2F0Y2hcIiBmdW5jdGlvbiBvbiBPYmplY3QucHJvdG90eXBlLi4uXG52YXIgbmF0aXZlV2F0Y2ggPSAoe30pLndhdGNoO1xuXG52YXIgc3VwcG9ydHNQYXNzaXZlID0gZmFsc2U7XG5pZiAoaW5Ccm93c2VyKSB7XG4gIHRyeSB7XG4gICAgdmFyIG9wdHMgPSB7fTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob3B0cywgJ3Bhc3NpdmUnLCAoe1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQgKCkge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICBzdXBwb3J0c1Bhc3NpdmUgPSB0cnVlO1xuICAgICAgfVxuICAgIH0pKTsgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2Zsb3cvaXNzdWVzLzI4NVxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0ZXN0LXBhc3NpdmUnLCBudWxsLCBvcHRzKTtcbiAgfSBjYXRjaCAoZSkge31cbn1cblxuLy8gdGhpcyBuZWVkcyB0byBiZSBsYXp5LWV2YWxlZCBiZWNhdXNlIHZ1ZSBtYXkgYmUgcmVxdWlyZWQgYmVmb3JlXG4vLyB2dWUtc2VydmVyLXJlbmRlcmVyIGNhbiBzZXQgVlVFX0VOVlxudmFyIF9pc1NlcnZlcjtcbnZhciBpc1NlcnZlclJlbmRlcmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKF9pc1NlcnZlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCFpbkJyb3dzZXIgJiYgIWluV2VleCAmJiB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gZGV0ZWN0IHByZXNlbmNlIG9mIHZ1ZS1zZXJ2ZXItcmVuZGVyZXIgYW5kIGF2b2lkXG4gICAgICAvLyBXZWJwYWNrIHNoaW1taW5nIHRoZSBwcm9jZXNzXG4gICAgICBfaXNTZXJ2ZXIgPSBnbG9iYWxbJ3Byb2Nlc3MnXS5lbnYuVlVFX0VOViA9PT0gJ3NlcnZlcic7XG4gICAgfSBlbHNlIHtcbiAgICAgIF9pc1NlcnZlciA9IGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gX2lzU2VydmVyXG59O1xuXG4vLyBkZXRlY3QgZGV2dG9vbHNcbnZhciBkZXZ0b29scyA9IGluQnJvd3NlciAmJiB3aW5kb3cuX19WVUVfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIGlzTmF0aXZlIChDdG9yKSB7XG4gIHJldHVybiB0eXBlb2YgQ3RvciA9PT0gJ2Z1bmN0aW9uJyAmJiAvbmF0aXZlIGNvZGUvLnRlc3QoQ3Rvci50b1N0cmluZygpKVxufVxuXG52YXIgaGFzU3ltYm9sID1cbiAgdHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoU3ltYm9sKSAmJlxuICB0eXBlb2YgUmVmbGVjdCAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoUmVmbGVjdC5vd25LZXlzKTtcblxudmFyIF9TZXQ7XG4vKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi8gLy8gJGZsb3ctZGlzYWJsZS1saW5lXG5pZiAodHlwZW9mIFNldCAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoU2V0KSkge1xuICAvLyB1c2UgbmF0aXZlIFNldCB3aGVuIGF2YWlsYWJsZS5cbiAgX1NldCA9IFNldDtcbn0gZWxzZSB7XG4gIC8vIGEgbm9uLXN0YW5kYXJkIFNldCBwb2x5ZmlsbCB0aGF0IG9ubHkgd29ya3Mgd2l0aCBwcmltaXRpdmUga2V5cy5cbiAgX1NldCA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU2V0ICgpIHtcbiAgICAgIHRoaXMuc2V0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB9XG4gICAgU2V0LnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbiBoYXMgKGtleSkge1xuICAgICAgcmV0dXJuIHRoaXMuc2V0W2tleV0gPT09IHRydWVcbiAgICB9O1xuICAgIFNldC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkIChrZXkpIHtcbiAgICAgIHRoaXMuc2V0W2tleV0gPSB0cnVlO1xuICAgIH07XG4gICAgU2V0LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyICgpIHtcbiAgICAgIHRoaXMuc2V0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFNldDtcbiAgfSgpKTtcbn1cblxuLyogICovXG5cbnZhciB3YXJuID0gbm9vcDtcbnZhciB0aXAgPSBub29wO1xudmFyIGdlbmVyYXRlQ29tcG9uZW50VHJhY2UgPSAobm9vcCk7IC8vIHdvcmsgYXJvdW5kIGZsb3cgY2hlY2tcbnZhciBmb3JtYXRDb21wb25lbnROYW1lID0gKG5vb3ApO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgaGFzQ29uc29sZSA9IHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJztcbiAgdmFyIGNsYXNzaWZ5UkUgPSAvKD86XnxbLV9dKShcXHcpL2c7XG4gIHZhciBjbGFzc2lmeSA9IGZ1bmN0aW9uIChzdHIpIHsgcmV0dXJuIHN0clxuICAgIC5yZXBsYWNlKGNsYXNzaWZ5UkUsIGZ1bmN0aW9uIChjKSB7IHJldHVybiBjLnRvVXBwZXJDYXNlKCk7IH0pXG4gICAgLnJlcGxhY2UoL1stX10vZywgJycpOyB9O1xuXG4gIHdhcm4gPSBmdW5jdGlvbiAobXNnLCB2bSkge1xuICAgIHZhciB0cmFjZSA9IHZtID8gZ2VuZXJhdGVDb21wb25lbnRUcmFjZSh2bSkgOiAnJztcblxuICAgIGlmIChjb25maWcud2FybkhhbmRsZXIpIHtcbiAgICAgIGNvbmZpZy53YXJuSGFuZGxlci5jYWxsKG51bGwsIG1zZywgdm0sIHRyYWNlKTtcbiAgICB9IGVsc2UgaWYgKGhhc0NvbnNvbGUgJiYgKCFjb25maWcuc2lsZW50KSkge1xuICAgICAgY29uc29sZS5lcnJvcigoXCJbVnVlIHdhcm5dOiBcIiArIG1zZyArIHRyYWNlKSk7XG4gICAgfVxuICB9O1xuXG4gIHRpcCA9IGZ1bmN0aW9uIChtc2csIHZtKSB7XG4gICAgaWYgKGhhc0NvbnNvbGUgJiYgKCFjb25maWcuc2lsZW50KSkge1xuICAgICAgY29uc29sZS53YXJuKFwiW1Z1ZSB0aXBdOiBcIiArIG1zZyArIChcbiAgICAgICAgdm0gPyBnZW5lcmF0ZUNvbXBvbmVudFRyYWNlKHZtKSA6ICcnXG4gICAgICApKTtcbiAgICB9XG4gIH07XG5cbiAgZm9ybWF0Q29tcG9uZW50TmFtZSA9IGZ1bmN0aW9uICh2bSwgaW5jbHVkZUZpbGUpIHtcbiAgICBpZiAodm0uJHJvb3QgPT09IHZtKSB7XG4gICAgICByZXR1cm4gJzxSb290PidcbiAgICB9XG4gICAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygdm0gPT09ICdmdW5jdGlvbicgJiYgdm0uY2lkICE9IG51bGxcbiAgICAgID8gdm0ub3B0aW9uc1xuICAgICAgOiB2bS5faXNWdWVcbiAgICAgICAgPyB2bS4kb3B0aW9ucyB8fCB2bS5jb25zdHJ1Y3Rvci5vcHRpb25zXG4gICAgICAgIDogdm0gfHwge307XG4gICAgdmFyIG5hbWUgPSBvcHRpb25zLm5hbWUgfHwgb3B0aW9ucy5fY29tcG9uZW50VGFnO1xuICAgIHZhciBmaWxlID0gb3B0aW9ucy5fX2ZpbGU7XG4gICAgaWYgKCFuYW1lICYmIGZpbGUpIHtcbiAgICAgIHZhciBtYXRjaCA9IGZpbGUubWF0Y2goLyhbXi9cXFxcXSspXFwudnVlJC8pO1xuICAgICAgbmFtZSA9IG1hdGNoICYmIG1hdGNoWzFdO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICAobmFtZSA/IChcIjxcIiArIChjbGFzc2lmeShuYW1lKSkgKyBcIj5cIikgOiBcIjxBbm9ueW1vdXM+XCIpICtcbiAgICAgIChmaWxlICYmIGluY2x1ZGVGaWxlICE9PSBmYWxzZSA/IChcIiBhdCBcIiArIGZpbGUpIDogJycpXG4gICAgKVxuICB9O1xuXG4gIHZhciByZXBlYXQgPSBmdW5jdGlvbiAoc3RyLCBuKSB7XG4gICAgdmFyIHJlcyA9ICcnO1xuICAgIHdoaWxlIChuKSB7XG4gICAgICBpZiAobiAlIDIgPT09IDEpIHsgcmVzICs9IHN0cjsgfVxuICAgICAgaWYgKG4gPiAxKSB7IHN0ciArPSBzdHI7IH1cbiAgICAgIG4gPj49IDE7XG4gICAgfVxuICAgIHJldHVybiByZXNcbiAgfTtcblxuICBnZW5lcmF0ZUNvbXBvbmVudFRyYWNlID0gZnVuY3Rpb24gKHZtKSB7XG4gICAgaWYgKHZtLl9pc1Z1ZSAmJiB2bS4kcGFyZW50KSB7XG4gICAgICB2YXIgdHJlZSA9IFtdO1xuICAgICAgdmFyIGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZSA9IDA7XG4gICAgICB3aGlsZSAodm0pIHtcbiAgICAgICAgaWYgKHRyZWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHZhciBsYXN0ID0gdHJlZVt0cmVlLmxlbmd0aCAtIDFdO1xuICAgICAgICAgIGlmIChsYXN0LmNvbnN0cnVjdG9yID09PSB2bS5jb25zdHJ1Y3Rvcikge1xuICAgICAgICAgICAgY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlKys7XG4gICAgICAgICAgICB2bSA9IHZtLiRwYXJlbnQ7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlID4gMCkge1xuICAgICAgICAgICAgdHJlZVt0cmVlLmxlbmd0aCAtIDFdID0gW2xhc3QsIGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZV07XG4gICAgICAgICAgICBjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2UgPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0cmVlLnB1c2godm0pO1xuICAgICAgICB2bSA9IHZtLiRwYXJlbnQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gJ1xcblxcbmZvdW5kIGluXFxuXFxuJyArIHRyZWVcbiAgICAgICAgLm1hcChmdW5jdGlvbiAodm0sIGkpIHsgcmV0dXJuIChcIlwiICsgKGkgPT09IDAgPyAnLS0tPiAnIDogcmVwZWF0KCcgJywgNSArIGkgKiAyKSkgKyAoQXJyYXkuaXNBcnJheSh2bSlcbiAgICAgICAgICAgID8gKChmb3JtYXRDb21wb25lbnROYW1lKHZtWzBdKSkgKyBcIi4uLiAoXCIgKyAodm1bMV0pICsgXCIgcmVjdXJzaXZlIGNhbGxzKVwiKVxuICAgICAgICAgICAgOiBmb3JtYXRDb21wb25lbnROYW1lKHZtKSkpOyB9KVxuICAgICAgICAuam9pbignXFxuJylcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIChcIlxcblxcbihmb3VuZCBpbiBcIiArIChmb3JtYXRDb21wb25lbnROYW1lKHZtKSkgKyBcIilcIilcbiAgICB9XG4gIH07XG59XG5cbi8qICAqL1xuXG5cbnZhciB1aWQgPSAwO1xuXG4vKipcbiAqIEEgZGVwIGlzIGFuIG9ic2VydmFibGUgdGhhdCBjYW4gaGF2ZSBtdWx0aXBsZVxuICogZGlyZWN0aXZlcyBzdWJzY3JpYmluZyB0byBpdC5cbiAqL1xudmFyIERlcCA9IGZ1bmN0aW9uIERlcCAoKSB7XG4gIHRoaXMuaWQgPSB1aWQrKztcbiAgdGhpcy5zdWJzID0gW107XG59O1xuXG5EZXAucHJvdG90eXBlLmFkZFN1YiA9IGZ1bmN0aW9uIGFkZFN1YiAoc3ViKSB7XG4gIHRoaXMuc3Vicy5wdXNoKHN1Yik7XG59O1xuXG5EZXAucHJvdG90eXBlLnJlbW92ZVN1YiA9IGZ1bmN0aW9uIHJlbW92ZVN1YiAoc3ViKSB7XG4gIHJlbW92ZSh0aGlzLnN1YnMsIHN1Yik7XG59O1xuXG5EZXAucHJvdG90eXBlLmRlcGVuZCA9IGZ1bmN0aW9uIGRlcGVuZCAoKSB7XG4gIGlmIChEZXAudGFyZ2V0KSB7XG4gICAgRGVwLnRhcmdldC5hZGREZXAodGhpcyk7XG4gIH1cbn07XG5cbkRlcC5wcm90b3R5cGUubm90aWZ5ID0gZnVuY3Rpb24gbm90aWZ5ICgpIHtcbiAgLy8gc3RhYmlsaXplIHRoZSBzdWJzY3JpYmVyIGxpc3QgZmlyc3RcbiAgdmFyIHN1YnMgPSB0aGlzLnN1YnMuc2xpY2UoKTtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBzdWJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHN1YnNbaV0udXBkYXRlKCk7XG4gIH1cbn07XG5cbi8vIHRoZSBjdXJyZW50IHRhcmdldCB3YXRjaGVyIGJlaW5nIGV2YWx1YXRlZC5cbi8vIHRoaXMgaXMgZ2xvYmFsbHkgdW5pcXVlIGJlY2F1c2UgdGhlcmUgY291bGQgYmUgb25seSBvbmVcbi8vIHdhdGNoZXIgYmVpbmcgZXZhbHVhdGVkIGF0IGFueSB0aW1lLlxuRGVwLnRhcmdldCA9IG51bGw7XG52YXIgdGFyZ2V0U3RhY2sgPSBbXTtcblxuZnVuY3Rpb24gcHVzaFRhcmdldCAoX3RhcmdldCkge1xuICBpZiAoRGVwLnRhcmdldCkgeyB0YXJnZXRTdGFjay5wdXNoKERlcC50YXJnZXQpOyB9XG4gIERlcC50YXJnZXQgPSBfdGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBwb3BUYXJnZXQgKCkge1xuICBEZXAudGFyZ2V0ID0gdGFyZ2V0U3RhY2sucG9wKCk7XG59XG5cbi8qICAqL1xuXG52YXIgVk5vZGUgPSBmdW5jdGlvbiBWTm9kZSAoXG4gIHRhZyxcbiAgZGF0YSxcbiAgY2hpbGRyZW4sXG4gIHRleHQsXG4gIGVsbSxcbiAgY29udGV4dCxcbiAgY29tcG9uZW50T3B0aW9ucyxcbiAgYXN5bmNGYWN0b3J5XG4pIHtcbiAgdGhpcy50YWcgPSB0YWc7XG4gIHRoaXMuZGF0YSA9IGRhdGE7XG4gIHRoaXMuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgdGhpcy50ZXh0ID0gdGV4dDtcbiAgdGhpcy5lbG0gPSBlbG07XG4gIHRoaXMubnMgPSB1bmRlZmluZWQ7XG4gIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gIHRoaXMuZm5Db250ZXh0ID0gdW5kZWZpbmVkO1xuICB0aGlzLmZuT3B0aW9ucyA9IHVuZGVmaW5lZDtcbiAgdGhpcy5mblNjb3BlSWQgPSB1bmRlZmluZWQ7XG4gIHRoaXMua2V5ID0gZGF0YSAmJiBkYXRhLmtleTtcbiAgdGhpcy5jb21wb25lbnRPcHRpb25zID0gY29tcG9uZW50T3B0aW9ucztcbiAgdGhpcy5jb21wb25lbnRJbnN0YW5jZSA9IHVuZGVmaW5lZDtcbiAgdGhpcy5wYXJlbnQgPSB1bmRlZmluZWQ7XG4gIHRoaXMucmF3ID0gZmFsc2U7XG4gIHRoaXMuaXNTdGF0aWMgPSBmYWxzZTtcbiAgdGhpcy5pc1Jvb3RJbnNlcnQgPSB0cnVlO1xuICB0aGlzLmlzQ29tbWVudCA9IGZhbHNlO1xuICB0aGlzLmlzQ2xvbmVkID0gZmFsc2U7XG4gIHRoaXMuaXNPbmNlID0gZmFsc2U7XG4gIHRoaXMuYXN5bmNGYWN0b3J5ID0gYXN5bmNGYWN0b3J5O1xuICB0aGlzLmFzeW5jTWV0YSA9IHVuZGVmaW5lZDtcbiAgdGhpcy5pc0FzeW5jUGxhY2Vob2xkZXIgPSBmYWxzZTtcbn07XG5cbnZhciBwcm90b3R5cGVBY2Nlc3NvcnMgPSB7IGNoaWxkOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH07XG5cbi8vIERFUFJFQ0FURUQ6IGFsaWFzIGZvciBjb21wb25lbnRJbnN0YW5jZSBmb3IgYmFja3dhcmRzIGNvbXBhdC5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5wcm90b3R5cGVBY2Nlc3NvcnMuY2hpbGQuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5jb21wb25lbnRJbnN0YW5jZVxufTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIFZOb2RlLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzICk7XG5cbnZhciBjcmVhdGVFbXB0eVZOb2RlID0gZnVuY3Rpb24gKHRleHQpIHtcbiAgaWYgKCB0ZXh0ID09PSB2b2lkIDAgKSB0ZXh0ID0gJyc7XG5cbiAgdmFyIG5vZGUgPSBuZXcgVk5vZGUoKTtcbiAgbm9kZS50ZXh0ID0gdGV4dDtcbiAgbm9kZS5pc0NvbW1lbnQgPSB0cnVlO1xuICByZXR1cm4gbm9kZVxufTtcblxuZnVuY3Rpb24gY3JlYXRlVGV4dFZOb2RlICh2YWwpIHtcbiAgcmV0dXJuIG5ldyBWTm9kZSh1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBTdHJpbmcodmFsKSlcbn1cblxuLy8gb3B0aW1pemVkIHNoYWxsb3cgY2xvbmVcbi8vIHVzZWQgZm9yIHN0YXRpYyBub2RlcyBhbmQgc2xvdCBub2RlcyBiZWNhdXNlIHRoZXkgbWF5IGJlIHJldXNlZCBhY3Jvc3Ncbi8vIG11bHRpcGxlIHJlbmRlcnMsIGNsb25pbmcgdGhlbSBhdm9pZHMgZXJyb3JzIHdoZW4gRE9NIG1hbmlwdWxhdGlvbnMgcmVseVxuLy8gb24gdGhlaXIgZWxtIHJlZmVyZW5jZS5cbmZ1bmN0aW9uIGNsb25lVk5vZGUgKHZub2RlKSB7XG4gIHZhciBjbG9uZWQgPSBuZXcgVk5vZGUoXG4gICAgdm5vZGUudGFnLFxuICAgIHZub2RlLmRhdGEsXG4gICAgdm5vZGUuY2hpbGRyZW4sXG4gICAgdm5vZGUudGV4dCxcbiAgICB2bm9kZS5lbG0sXG4gICAgdm5vZGUuY29udGV4dCxcbiAgICB2bm9kZS5jb21wb25lbnRPcHRpb25zLFxuICAgIHZub2RlLmFzeW5jRmFjdG9yeVxuICApO1xuICBjbG9uZWQubnMgPSB2bm9kZS5ucztcbiAgY2xvbmVkLmlzU3RhdGljID0gdm5vZGUuaXNTdGF0aWM7XG4gIGNsb25lZC5rZXkgPSB2bm9kZS5rZXk7XG4gIGNsb25lZC5pc0NvbW1lbnQgPSB2bm9kZS5pc0NvbW1lbnQ7XG4gIGNsb25lZC5mbkNvbnRleHQgPSB2bm9kZS5mbkNvbnRleHQ7XG4gIGNsb25lZC5mbk9wdGlvbnMgPSB2bm9kZS5mbk9wdGlvbnM7XG4gIGNsb25lZC5mblNjb3BlSWQgPSB2bm9kZS5mblNjb3BlSWQ7XG4gIGNsb25lZC5pc0Nsb25lZCA9IHRydWU7XG4gIHJldHVybiBjbG9uZWRcbn1cblxuLypcbiAqIG5vdCB0eXBlIGNoZWNraW5nIHRoaXMgZmlsZSBiZWNhdXNlIGZsb3cgZG9lc24ndCBwbGF5IHdlbGwgd2l0aFxuICogZHluYW1pY2FsbHkgYWNjZXNzaW5nIG1ldGhvZHMgb24gQXJyYXkgcHJvdG90eXBlXG4gKi9cblxudmFyIGFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG52YXIgYXJyYXlNZXRob2RzID0gT2JqZWN0LmNyZWF0ZShhcnJheVByb3RvKTtcblxudmFyIG1ldGhvZHNUb1BhdGNoID0gW1xuICAncHVzaCcsXG4gICdwb3AnLFxuICAnc2hpZnQnLFxuICAndW5zaGlmdCcsXG4gICdzcGxpY2UnLFxuICAnc29ydCcsXG4gICdyZXZlcnNlJ1xuXTtcblxuLyoqXG4gKiBJbnRlcmNlcHQgbXV0YXRpbmcgbWV0aG9kcyBhbmQgZW1pdCBldmVudHNcbiAqL1xubWV0aG9kc1RvUGF0Y2guZm9yRWFjaChmdW5jdGlvbiAobWV0aG9kKSB7XG4gIC8vIGNhY2hlIG9yaWdpbmFsIG1ldGhvZFxuICB2YXIgb3JpZ2luYWwgPSBhcnJheVByb3RvW21ldGhvZF07XG4gIGRlZihhcnJheU1ldGhvZHMsIG1ldGhvZCwgZnVuY3Rpb24gbXV0YXRvciAoKSB7XG4gICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgdmFyIHJlc3VsdCA9IG9yaWdpbmFsLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIHZhciBvYiA9IHRoaXMuX19vYl9fO1xuICAgIHZhciBpbnNlcnRlZDtcbiAgICBzd2l0Y2ggKG1ldGhvZCkge1xuICAgICAgY2FzZSAncHVzaCc6XG4gICAgICBjYXNlICd1bnNoaWZ0JzpcbiAgICAgICAgaW5zZXJ0ZWQgPSBhcmdzO1xuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnc3BsaWNlJzpcbiAgICAgICAgaW5zZXJ0ZWQgPSBhcmdzLnNsaWNlKDIpO1xuICAgICAgICBicmVha1xuICAgIH1cbiAgICBpZiAoaW5zZXJ0ZWQpIHsgb2Iub2JzZXJ2ZUFycmF5KGluc2VydGVkKTsgfVxuICAgIC8vIG5vdGlmeSBjaGFuZ2VcbiAgICBvYi5kZXAubm90aWZ5KCk7XG4gICAgcmV0dXJuIHJlc3VsdFxuICB9KTtcbn0pO1xuXG4vKiAgKi9cblxudmFyIGFycmF5S2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGFycmF5TWV0aG9kcyk7XG5cbi8qKlxuICogSW4gc29tZSBjYXNlcyB3ZSBtYXkgd2FudCB0byBkaXNhYmxlIG9ic2VydmF0aW9uIGluc2lkZSBhIGNvbXBvbmVudCdzXG4gKiB1cGRhdGUgY29tcHV0YXRpb24uXG4gKi9cbnZhciBzaG91bGRPYnNlcnZlID0gdHJ1ZTtcblxuZnVuY3Rpb24gdG9nZ2xlT2JzZXJ2aW5nICh2YWx1ZSkge1xuICBzaG91bGRPYnNlcnZlID0gdmFsdWU7XG59XG5cbi8qKlxuICogT2JzZXJ2ZXIgY2xhc3MgdGhhdCBpcyBhdHRhY2hlZCB0byBlYWNoIG9ic2VydmVkXG4gKiBvYmplY3QuIE9uY2UgYXR0YWNoZWQsIHRoZSBvYnNlcnZlciBjb252ZXJ0cyB0aGUgdGFyZ2V0XG4gKiBvYmplY3QncyBwcm9wZXJ0eSBrZXlzIGludG8gZ2V0dGVyL3NldHRlcnMgdGhhdFxuICogY29sbGVjdCBkZXBlbmRlbmNpZXMgYW5kIGRpc3BhdGNoIHVwZGF0ZXMuXG4gKi9cbnZhciBPYnNlcnZlciA9IGZ1bmN0aW9uIE9ic2VydmVyICh2YWx1ZSkge1xuICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gIHRoaXMuZGVwID0gbmV3IERlcCgpO1xuICB0aGlzLnZtQ291bnQgPSAwO1xuICBkZWYodmFsdWUsICdfX29iX18nLCB0aGlzKTtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgdmFyIGF1Z21lbnQgPSBoYXNQcm90b1xuICAgICAgPyBwcm90b0F1Z21lbnRcbiAgICAgIDogY29weUF1Z21lbnQ7XG4gICAgYXVnbWVudCh2YWx1ZSwgYXJyYXlNZXRob2RzLCBhcnJheUtleXMpO1xuICAgIHRoaXMub2JzZXJ2ZUFycmF5KHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLndhbGsodmFsdWUpO1xuICB9XG59O1xuXG4vKipcbiAqIFdhbGsgdGhyb3VnaCBlYWNoIHByb3BlcnR5IGFuZCBjb252ZXJ0IHRoZW0gaW50b1xuICogZ2V0dGVyL3NldHRlcnMuIFRoaXMgbWV0aG9kIHNob3VsZCBvbmx5IGJlIGNhbGxlZCB3aGVuXG4gKiB2YWx1ZSB0eXBlIGlzIE9iamVjdC5cbiAqL1xuT2JzZXJ2ZXIucHJvdG90eXBlLndhbGsgPSBmdW5jdGlvbiB3YWxrIChvYmopIHtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBkZWZpbmVSZWFjdGl2ZShvYmosIGtleXNbaV0pO1xuICB9XG59O1xuXG4vKipcbiAqIE9ic2VydmUgYSBsaXN0IG9mIEFycmF5IGl0ZW1zLlxuICovXG5PYnNlcnZlci5wcm90b3R5cGUub2JzZXJ2ZUFycmF5ID0gZnVuY3Rpb24gb2JzZXJ2ZUFycmF5IChpdGVtcykge1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGl0ZW1zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIG9ic2VydmUoaXRlbXNbaV0pO1xuICB9XG59O1xuXG4vLyBoZWxwZXJzXG5cbi8qKlxuICogQXVnbWVudCBhbiB0YXJnZXQgT2JqZWN0IG9yIEFycmF5IGJ5IGludGVyY2VwdGluZ1xuICogdGhlIHByb3RvdHlwZSBjaGFpbiB1c2luZyBfX3Byb3RvX19cbiAqL1xuZnVuY3Rpb24gcHJvdG9BdWdtZW50ICh0YXJnZXQsIHNyYywga2V5cykge1xuICAvKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xuICB0YXJnZXQuX19wcm90b19fID0gc3JjO1xuICAvKiBlc2xpbnQtZW5hYmxlIG5vLXByb3RvICovXG59XG5cbi8qKlxuICogQXVnbWVudCBhbiB0YXJnZXQgT2JqZWN0IG9yIEFycmF5IGJ5IGRlZmluaW5nXG4gKiBoaWRkZW4gcHJvcGVydGllcy5cbiAqL1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIGNvcHlBdWdtZW50ICh0YXJnZXQsIHNyYywga2V5cykge1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGtleXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgZGVmKHRhcmdldCwga2V5LCBzcmNba2V5XSk7XG4gIH1cbn1cblxuLyoqXG4gKiBBdHRlbXB0IHRvIGNyZWF0ZSBhbiBvYnNlcnZlciBpbnN0YW5jZSBmb3IgYSB2YWx1ZSxcbiAqIHJldHVybnMgdGhlIG5ldyBvYnNlcnZlciBpZiBzdWNjZXNzZnVsbHkgb2JzZXJ2ZWQsXG4gKiBvciB0aGUgZXhpc3Rpbmcgb2JzZXJ2ZXIgaWYgdGhlIHZhbHVlIGFscmVhZHkgaGFzIG9uZS5cbiAqL1xuZnVuY3Rpb24gb2JzZXJ2ZSAodmFsdWUsIGFzUm9vdERhdGEpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkgfHwgdmFsdWUgaW5zdGFuY2VvZiBWTm9kZSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBvYjtcbiAgaWYgKGhhc093bih2YWx1ZSwgJ19fb2JfXycpICYmIHZhbHVlLl9fb2JfXyBpbnN0YW5jZW9mIE9ic2VydmVyKSB7XG4gICAgb2IgPSB2YWx1ZS5fX29iX187XG4gIH0gZWxzZSBpZiAoXG4gICAgc2hvdWxkT2JzZXJ2ZSAmJlxuICAgICFpc1NlcnZlclJlbmRlcmluZygpICYmXG4gICAgKEFycmF5LmlzQXJyYXkodmFsdWUpIHx8IGlzUGxhaW5PYmplY3QodmFsdWUpKSAmJlxuICAgIE9iamVjdC5pc0V4dGVuc2libGUodmFsdWUpICYmXG4gICAgIXZhbHVlLl9pc1Z1ZVxuICApIHtcbiAgICBvYiA9IG5ldyBPYnNlcnZlcih2YWx1ZSk7XG4gIH1cbiAgaWYgKGFzUm9vdERhdGEgJiYgb2IpIHtcbiAgICBvYi52bUNvdW50Kys7XG4gIH1cbiAgcmV0dXJuIG9iXG59XG5cbi8qKlxuICogRGVmaW5lIGEgcmVhY3RpdmUgcHJvcGVydHkgb24gYW4gT2JqZWN0LlxuICovXG5mdW5jdGlvbiBkZWZpbmVSZWFjdGl2ZSAoXG4gIG9iaixcbiAga2V5LFxuICB2YWwsXG4gIGN1c3RvbVNldHRlcixcbiAgc2hhbGxvd1xuKSB7XG4gIHZhciBkZXAgPSBuZXcgRGVwKCk7XG5cbiAgdmFyIHByb3BlcnR5ID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSk7XG4gIGlmIChwcm9wZXJ0eSAmJiBwcm9wZXJ0eS5jb25maWd1cmFibGUgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvLyBjYXRlciBmb3IgcHJlLWRlZmluZWQgZ2V0dGVyL3NldHRlcnNcbiAgdmFyIGdldHRlciA9IHByb3BlcnR5ICYmIHByb3BlcnR5LmdldDtcbiAgaWYgKCFnZXR0ZXIgJiYgYXJndW1lbnRzLmxlbmd0aCA9PT0gMikge1xuICAgIHZhbCA9IG9ialtrZXldO1xuICB9XG4gIHZhciBzZXR0ZXIgPSBwcm9wZXJ0eSAmJiBwcm9wZXJ0eS5zZXQ7XG5cbiAgdmFyIGNoaWxkT2IgPSAhc2hhbGxvdyAmJiBvYnNlcnZlKHZhbCk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gcmVhY3RpdmVHZXR0ZXIgKCkge1xuICAgICAgdmFyIHZhbHVlID0gZ2V0dGVyID8gZ2V0dGVyLmNhbGwob2JqKSA6IHZhbDtcbiAgICAgIGlmIChEZXAudGFyZ2V0KSB7XG4gICAgICAgIGRlcC5kZXBlbmQoKTtcbiAgICAgICAgaWYgKGNoaWxkT2IpIHtcbiAgICAgICAgICBjaGlsZE9iLmRlcC5kZXBlbmQoKTtcbiAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIGRlcGVuZEFycmF5KHZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZVxuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiByZWFjdGl2ZVNldHRlciAobmV3VmFsKSB7XG4gICAgICB2YXIgdmFsdWUgPSBnZXR0ZXIgPyBnZXR0ZXIuY2FsbChvYmopIDogdmFsO1xuICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tc2VsZi1jb21wYXJlICovXG4gICAgICBpZiAobmV3VmFsID09PSB2YWx1ZSB8fCAobmV3VmFsICE9PSBuZXdWYWwgJiYgdmFsdWUgIT09IHZhbHVlKSkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIC8qIGVzbGludC1lbmFibGUgbm8tc2VsZi1jb21wYXJlICovXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjdXN0b21TZXR0ZXIpIHtcbiAgICAgICAgY3VzdG9tU2V0dGVyKCk7XG4gICAgICB9XG4gICAgICBpZiAoc2V0dGVyKSB7XG4gICAgICAgIHNldHRlci5jYWxsKG9iaiwgbmV3VmFsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbCA9IG5ld1ZhbDtcbiAgICAgIH1cbiAgICAgIGNoaWxkT2IgPSAhc2hhbGxvdyAmJiBvYnNlcnZlKG5ld1ZhbCk7XG4gICAgICBkZXAubm90aWZ5KCk7XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBTZXQgYSBwcm9wZXJ0eSBvbiBhbiBvYmplY3QuIEFkZHMgdGhlIG5ldyBwcm9wZXJ0eSBhbmRcbiAqIHRyaWdnZXJzIGNoYW5nZSBub3RpZmljYXRpb24gaWYgdGhlIHByb3BlcnR5IGRvZXNuJ3RcbiAqIGFscmVhZHkgZXhpc3QuXG4gKi9cbmZ1bmN0aW9uIHNldCAodGFyZ2V0LCBrZXksIHZhbCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgIChpc1VuZGVmKHRhcmdldCkgfHwgaXNQcmltaXRpdmUodGFyZ2V0KSlcbiAgKSB7XG4gICAgd2FybigoXCJDYW5ub3Qgc2V0IHJlYWN0aXZlIHByb3BlcnR5IG9uIHVuZGVmaW5lZCwgbnVsbCwgb3IgcHJpbWl0aXZlIHZhbHVlOiBcIiArICgodGFyZ2V0KSkpKTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheSh0YXJnZXQpICYmIGlzVmFsaWRBcnJheUluZGV4KGtleSkpIHtcbiAgICB0YXJnZXQubGVuZ3RoID0gTWF0aC5tYXgodGFyZ2V0Lmxlbmd0aCwga2V5KTtcbiAgICB0YXJnZXQuc3BsaWNlKGtleSwgMSwgdmFsKTtcbiAgICByZXR1cm4gdmFsXG4gIH1cbiAgaWYgKGtleSBpbiB0YXJnZXQgJiYgIShrZXkgaW4gT2JqZWN0LnByb3RvdHlwZSkpIHtcbiAgICB0YXJnZXRba2V5XSA9IHZhbDtcbiAgICByZXR1cm4gdmFsXG4gIH1cbiAgdmFyIG9iID0gKHRhcmdldCkuX19vYl9fO1xuICBpZiAodGFyZ2V0Ll9pc1Z1ZSB8fCAob2IgJiYgb2Iudm1Db3VudCkpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAnQXZvaWQgYWRkaW5nIHJlYWN0aXZlIHByb3BlcnRpZXMgdG8gYSBWdWUgaW5zdGFuY2Ugb3IgaXRzIHJvb3QgJGRhdGEgJyArXG4gICAgICAnYXQgcnVudGltZSAtIGRlY2xhcmUgaXQgdXBmcm9udCBpbiB0aGUgZGF0YSBvcHRpb24uJ1xuICAgICk7XG4gICAgcmV0dXJuIHZhbFxuICB9XG4gIGlmICghb2IpIHtcbiAgICB0YXJnZXRba2V5XSA9IHZhbDtcbiAgICByZXR1cm4gdmFsXG4gIH1cbiAgZGVmaW5lUmVhY3RpdmUob2IudmFsdWUsIGtleSwgdmFsKTtcbiAgb2IuZGVwLm5vdGlmeSgpO1xuICByZXR1cm4gdmFsXG59XG5cbi8qKlxuICogRGVsZXRlIGEgcHJvcGVydHkgYW5kIHRyaWdnZXIgY2hhbmdlIGlmIG5lY2Vzc2FyeS5cbiAqL1xuZnVuY3Rpb24gZGVsICh0YXJnZXQsIGtleSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgIChpc1VuZGVmKHRhcmdldCkgfHwgaXNQcmltaXRpdmUodGFyZ2V0KSlcbiAgKSB7XG4gICAgd2FybigoXCJDYW5ub3QgZGVsZXRlIHJlYWN0aXZlIHByb3BlcnR5IG9uIHVuZGVmaW5lZCwgbnVsbCwgb3IgcHJpbWl0aXZlIHZhbHVlOiBcIiArICgodGFyZ2V0KSkpKTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheSh0YXJnZXQpICYmIGlzVmFsaWRBcnJheUluZGV4KGtleSkpIHtcbiAgICB0YXJnZXQuc3BsaWNlKGtleSwgMSk7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIG9iID0gKHRhcmdldCkuX19vYl9fO1xuICBpZiAodGFyZ2V0Ll9pc1Z1ZSB8fCAob2IgJiYgb2Iudm1Db3VudCkpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAnQXZvaWQgZGVsZXRpbmcgcHJvcGVydGllcyBvbiBhIFZ1ZSBpbnN0YW5jZSBvciBpdHMgcm9vdCAkZGF0YSAnICtcbiAgICAgICctIGp1c3Qgc2V0IGl0IHRvIG51bGwuJ1xuICAgICk7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKCFoYXNPd24odGFyZ2V0LCBrZXkpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgZGVsZXRlIHRhcmdldFtrZXldO1xuICBpZiAoIW9iKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgb2IuZGVwLm5vdGlmeSgpO1xufVxuXG4vKipcbiAqIENvbGxlY3QgZGVwZW5kZW5jaWVzIG9uIGFycmF5IGVsZW1lbnRzIHdoZW4gdGhlIGFycmF5IGlzIHRvdWNoZWQsIHNpbmNlXG4gKiB3ZSBjYW5ub3QgaW50ZXJjZXB0IGFycmF5IGVsZW1lbnQgYWNjZXNzIGxpa2UgcHJvcGVydHkgZ2V0dGVycy5cbiAqL1xuZnVuY3Rpb24gZGVwZW5kQXJyYXkgKHZhbHVlKSB7XG4gIGZvciAodmFyIGUgPSAodm9pZCAwKSwgaSA9IDAsIGwgPSB2YWx1ZS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBlID0gdmFsdWVbaV07XG4gICAgZSAmJiBlLl9fb2JfXyAmJiBlLl9fb2JfXy5kZXAuZGVwZW5kKCk7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZSkpIHtcbiAgICAgIGRlcGVuZEFycmF5KGUpO1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBPcHRpb24gb3ZlcndyaXRpbmcgc3RyYXRlZ2llcyBhcmUgZnVuY3Rpb25zIHRoYXQgaGFuZGxlXG4gKiBob3cgdG8gbWVyZ2UgYSBwYXJlbnQgb3B0aW9uIHZhbHVlIGFuZCBhIGNoaWxkIG9wdGlvblxuICogdmFsdWUgaW50byB0aGUgZmluYWwgdmFsdWUuXG4gKi9cbnZhciBzdHJhdHMgPSBjb25maWcub3B0aW9uTWVyZ2VTdHJhdGVnaWVzO1xuXG4vKipcbiAqIE9wdGlvbnMgd2l0aCByZXN0cmljdGlvbnNcbiAqL1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgc3RyYXRzLmVsID0gc3RyYXRzLnByb3BzRGF0YSA9IGZ1bmN0aW9uIChwYXJlbnQsIGNoaWxkLCB2bSwga2V5KSB7XG4gICAgaWYgKCF2bSkge1xuICAgICAgd2FybihcbiAgICAgICAgXCJvcHRpb24gXFxcIlwiICsga2V5ICsgXCJcXFwiIGNhbiBvbmx5IGJlIHVzZWQgZHVyaW5nIGluc3RhbmNlIFwiICtcbiAgICAgICAgJ2NyZWF0aW9uIHdpdGggdGhlIGBuZXdgIGtleXdvcmQuJ1xuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIGRlZmF1bHRTdHJhdChwYXJlbnQsIGNoaWxkKVxuICB9O1xufVxuXG4vKipcbiAqIEhlbHBlciB0aGF0IHJlY3Vyc2l2ZWx5IG1lcmdlcyB0d28gZGF0YSBvYmplY3RzIHRvZ2V0aGVyLlxuICovXG5mdW5jdGlvbiBtZXJnZURhdGEgKHRvLCBmcm9tKSB7XG4gIGlmICghZnJvbSkgeyByZXR1cm4gdG8gfVxuICB2YXIga2V5LCB0b1ZhbCwgZnJvbVZhbDtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhmcm9tKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0ga2V5c1tpXTtcbiAgICB0b1ZhbCA9IHRvW2tleV07XG4gICAgZnJvbVZhbCA9IGZyb21ba2V5XTtcbiAgICBpZiAoIWhhc093bih0bywga2V5KSkge1xuICAgICAgc2V0KHRvLCBrZXksIGZyb21WYWwpO1xuICAgIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdCh0b1ZhbCkgJiYgaXNQbGFpbk9iamVjdChmcm9tVmFsKSkge1xuICAgICAgbWVyZ2VEYXRhKHRvVmFsLCBmcm9tVmFsKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRvXG59XG5cbi8qKlxuICogRGF0YVxuICovXG5mdW5jdGlvbiBtZXJnZURhdGFPckZuIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbCxcbiAgdm1cbikge1xuICBpZiAoIXZtKSB7XG4gICAgLy8gaW4gYSBWdWUuZXh0ZW5kIG1lcmdlLCBib3RoIHNob3VsZCBiZSBmdW5jdGlvbnNcbiAgICBpZiAoIWNoaWxkVmFsKSB7XG4gICAgICByZXR1cm4gcGFyZW50VmFsXG4gICAgfVxuICAgIGlmICghcGFyZW50VmFsKSB7XG4gICAgICByZXR1cm4gY2hpbGRWYWxcbiAgICB9XG4gICAgLy8gd2hlbiBwYXJlbnRWYWwgJiBjaGlsZFZhbCBhcmUgYm90aCBwcmVzZW50LFxuICAgIC8vIHdlIG5lZWQgdG8gcmV0dXJuIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZVxuICAgIC8vIG1lcmdlZCByZXN1bHQgb2YgYm90aCBmdW5jdGlvbnMuLi4gbm8gbmVlZCB0b1xuICAgIC8vIGNoZWNrIGlmIHBhcmVudFZhbCBpcyBhIGZ1bmN0aW9uIGhlcmUgYmVjYXVzZVxuICAgIC8vIGl0IGhhcyB0byBiZSBhIGZ1bmN0aW9uIHRvIHBhc3MgcHJldmlvdXMgbWVyZ2VzLlxuICAgIHJldHVybiBmdW5jdGlvbiBtZXJnZWREYXRhRm4gKCkge1xuICAgICAgcmV0dXJuIG1lcmdlRGF0YShcbiAgICAgICAgdHlwZW9mIGNoaWxkVmFsID09PSAnZnVuY3Rpb24nID8gY2hpbGRWYWwuY2FsbCh0aGlzLCB0aGlzKSA6IGNoaWxkVmFsLFxuICAgICAgICB0eXBlb2YgcGFyZW50VmFsID09PSAnZnVuY3Rpb24nID8gcGFyZW50VmFsLmNhbGwodGhpcywgdGhpcykgOiBwYXJlbnRWYWxcbiAgICAgIClcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIG1lcmdlZEluc3RhbmNlRGF0YUZuICgpIHtcbiAgICAgIC8vIGluc3RhbmNlIG1lcmdlXG4gICAgICB2YXIgaW5zdGFuY2VEYXRhID0gdHlwZW9mIGNoaWxkVmFsID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gY2hpbGRWYWwuY2FsbCh2bSwgdm0pXG4gICAgICAgIDogY2hpbGRWYWw7XG4gICAgICB2YXIgZGVmYXVsdERhdGEgPSB0eXBlb2YgcGFyZW50VmFsID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gcGFyZW50VmFsLmNhbGwodm0sIHZtKVxuICAgICAgICA6IHBhcmVudFZhbDtcbiAgICAgIGlmIChpbnN0YW5jZURhdGEpIHtcbiAgICAgICAgcmV0dXJuIG1lcmdlRGF0YShpbnN0YW5jZURhdGEsIGRlZmF1bHREYXRhKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHREYXRhXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbnN0cmF0cy5kYXRhID0gZnVuY3Rpb24gKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsLFxuICB2bVxuKSB7XG4gIGlmICghdm0pIHtcbiAgICBpZiAoY2hpbGRWYWwgJiYgdHlwZW9mIGNoaWxkVmFsICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgICdUaGUgXCJkYXRhXCIgb3B0aW9uIHNob3VsZCBiZSBhIGZ1bmN0aW9uICcgK1xuICAgICAgICAndGhhdCByZXR1cm5zIGEgcGVyLWluc3RhbmNlIHZhbHVlIGluIGNvbXBvbmVudCAnICtcbiAgICAgICAgJ2RlZmluaXRpb25zLicsXG4gICAgICAgIHZtXG4gICAgICApO1xuXG4gICAgICByZXR1cm4gcGFyZW50VmFsXG4gICAgfVxuICAgIHJldHVybiBtZXJnZURhdGFPckZuKHBhcmVudFZhbCwgY2hpbGRWYWwpXG4gIH1cblxuICByZXR1cm4gbWVyZ2VEYXRhT3JGbihwYXJlbnRWYWwsIGNoaWxkVmFsLCB2bSlcbn07XG5cbi8qKlxuICogSG9va3MgYW5kIHByb3BzIGFyZSBtZXJnZWQgYXMgYXJyYXlzLlxuICovXG5mdW5jdGlvbiBtZXJnZUhvb2sgKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsXG4pIHtcbiAgcmV0dXJuIGNoaWxkVmFsXG4gICAgPyBwYXJlbnRWYWxcbiAgICAgID8gcGFyZW50VmFsLmNvbmNhdChjaGlsZFZhbClcbiAgICAgIDogQXJyYXkuaXNBcnJheShjaGlsZFZhbClcbiAgICAgICAgPyBjaGlsZFZhbFxuICAgICAgICA6IFtjaGlsZFZhbF1cbiAgICA6IHBhcmVudFZhbFxufVxuXG5MSUZFQ1lDTEVfSE9PS1MuZm9yRWFjaChmdW5jdGlvbiAoaG9vaykge1xuICBzdHJhdHNbaG9va10gPSBtZXJnZUhvb2s7XG59KTtcblxuLyoqXG4gKiBBc3NldHNcbiAqXG4gKiBXaGVuIGEgdm0gaXMgcHJlc2VudCAoaW5zdGFuY2UgY3JlYXRpb24pLCB3ZSBuZWVkIHRvIGRvXG4gKiBhIHRocmVlLXdheSBtZXJnZSBiZXR3ZWVuIGNvbnN0cnVjdG9yIG9wdGlvbnMsIGluc3RhbmNlXG4gKiBvcHRpb25zIGFuZCBwYXJlbnQgb3B0aW9ucy5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VBc3NldHMgKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsLFxuICB2bSxcbiAga2V5XG4pIHtcbiAgdmFyIHJlcyA9IE9iamVjdC5jcmVhdGUocGFyZW50VmFsIHx8IG51bGwpO1xuICBpZiAoY2hpbGRWYWwpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGFzc2VydE9iamVjdFR5cGUoa2V5LCBjaGlsZFZhbCwgdm0pO1xuICAgIHJldHVybiBleHRlbmQocmVzLCBjaGlsZFZhbClcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcmVzXG4gIH1cbn1cblxuQVNTRVRfVFlQRVMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICBzdHJhdHNbdHlwZSArICdzJ10gPSBtZXJnZUFzc2V0cztcbn0pO1xuXG4vKipcbiAqIFdhdGNoZXJzLlxuICpcbiAqIFdhdGNoZXJzIGhhc2hlcyBzaG91bGQgbm90IG92ZXJ3cml0ZSBvbmVcbiAqIGFub3RoZXIsIHNvIHdlIG1lcmdlIHRoZW0gYXMgYXJyYXlzLlxuICovXG5zdHJhdHMud2F0Y2ggPSBmdW5jdGlvbiAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWwsXG4gIHZtLFxuICBrZXlcbikge1xuICAvLyB3b3JrIGFyb3VuZCBGaXJlZm94J3MgT2JqZWN0LnByb3RvdHlwZS53YXRjaC4uLlxuICBpZiAocGFyZW50VmFsID09PSBuYXRpdmVXYXRjaCkgeyBwYXJlbnRWYWwgPSB1bmRlZmluZWQ7IH1cbiAgaWYgKGNoaWxkVmFsID09PSBuYXRpdmVXYXRjaCkgeyBjaGlsZFZhbCA9IHVuZGVmaW5lZDsgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKCFjaGlsZFZhbCkgeyByZXR1cm4gT2JqZWN0LmNyZWF0ZShwYXJlbnRWYWwgfHwgbnVsbCkgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGFzc2VydE9iamVjdFR5cGUoa2V5LCBjaGlsZFZhbCwgdm0pO1xuICB9XG4gIGlmICghcGFyZW50VmFsKSB7IHJldHVybiBjaGlsZFZhbCB9XG4gIHZhciByZXQgPSB7fTtcbiAgZXh0ZW5kKHJldCwgcGFyZW50VmFsKTtcbiAgZm9yICh2YXIga2V5JDEgaW4gY2hpbGRWYWwpIHtcbiAgICB2YXIgcGFyZW50ID0gcmV0W2tleSQxXTtcbiAgICB2YXIgY2hpbGQgPSBjaGlsZFZhbFtrZXkkMV07XG4gICAgaWYgKHBhcmVudCAmJiAhQXJyYXkuaXNBcnJheShwYXJlbnQpKSB7XG4gICAgICBwYXJlbnQgPSBbcGFyZW50XTtcbiAgICB9XG4gICAgcmV0W2tleSQxXSA9IHBhcmVudFxuICAgICAgPyBwYXJlbnQuY29uY2F0KGNoaWxkKVxuICAgICAgOiBBcnJheS5pc0FycmF5KGNoaWxkKSA/IGNoaWxkIDogW2NoaWxkXTtcbiAgfVxuICByZXR1cm4gcmV0XG59O1xuXG4vKipcbiAqIE90aGVyIG9iamVjdCBoYXNoZXMuXG4gKi9cbnN0cmF0cy5wcm9wcyA9XG5zdHJhdHMubWV0aG9kcyA9XG5zdHJhdHMuaW5qZWN0ID1cbnN0cmF0cy5jb21wdXRlZCA9IGZ1bmN0aW9uIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbCxcbiAgdm0sXG4gIGtleVxuKSB7XG4gIGlmIChjaGlsZFZhbCAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgYXNzZXJ0T2JqZWN0VHlwZShrZXksIGNoaWxkVmFsLCB2bSk7XG4gIH1cbiAgaWYgKCFwYXJlbnRWYWwpIHsgcmV0dXJuIGNoaWxkVmFsIH1cbiAgdmFyIHJldCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGV4dGVuZChyZXQsIHBhcmVudFZhbCk7XG4gIGlmIChjaGlsZFZhbCkgeyBleHRlbmQocmV0LCBjaGlsZFZhbCk7IH1cbiAgcmV0dXJuIHJldFxufTtcbnN0cmF0cy5wcm92aWRlID0gbWVyZ2VEYXRhT3JGbjtcblxuLyoqXG4gKiBEZWZhdWx0IHN0cmF0ZWd5LlxuICovXG52YXIgZGVmYXVsdFN0cmF0ID0gZnVuY3Rpb24gKHBhcmVudFZhbCwgY2hpbGRWYWwpIHtcbiAgcmV0dXJuIGNoaWxkVmFsID09PSB1bmRlZmluZWRcbiAgICA/IHBhcmVudFZhbFxuICAgIDogY2hpbGRWYWxcbn07XG5cbi8qKlxuICogVmFsaWRhdGUgY29tcG9uZW50IG5hbWVzXG4gKi9cbmZ1bmN0aW9uIGNoZWNrQ29tcG9uZW50cyAob3B0aW9ucykge1xuICBmb3IgKHZhciBrZXkgaW4gb3B0aW9ucy5jb21wb25lbnRzKSB7XG4gICAgdmFsaWRhdGVDb21wb25lbnROYW1lKGtleSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVDb21wb25lbnROYW1lIChuYW1lKSB7XG4gIGlmICghL15bYS16QS1aXVtcXHctXSokLy50ZXN0KG5hbWUpKSB7XG4gICAgd2FybihcbiAgICAgICdJbnZhbGlkIGNvbXBvbmVudCBuYW1lOiBcIicgKyBuYW1lICsgJ1wiLiBDb21wb25lbnQgbmFtZXMgJyArXG4gICAgICAnY2FuIG9ubHkgY29udGFpbiBhbHBoYW51bWVyaWMgY2hhcmFjdGVycyBhbmQgdGhlIGh5cGhlbiwgJyArXG4gICAgICAnYW5kIG11c3Qgc3RhcnQgd2l0aCBhIGxldHRlci4nXG4gICAgKTtcbiAgfVxuICBpZiAoaXNCdWlsdEluVGFnKG5hbWUpIHx8IGNvbmZpZy5pc1Jlc2VydmVkVGFnKG5hbWUpKSB7XG4gICAgd2FybihcbiAgICAgICdEbyBub3QgdXNlIGJ1aWx0LWluIG9yIHJlc2VydmVkIEhUTUwgZWxlbWVudHMgYXMgY29tcG9uZW50ICcgK1xuICAgICAgJ2lkOiAnICsgbmFtZVxuICAgICk7XG4gIH1cbn1cblxuLyoqXG4gKiBFbnN1cmUgYWxsIHByb3BzIG9wdGlvbiBzeW50YXggYXJlIG5vcm1hbGl6ZWQgaW50byB0aGVcbiAqIE9iamVjdC1iYXNlZCBmb3JtYXQuXG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZVByb3BzIChvcHRpb25zLCB2bSkge1xuICB2YXIgcHJvcHMgPSBvcHRpb25zLnByb3BzO1xuICBpZiAoIXByb3BzKSB7IHJldHVybiB9XG4gIHZhciByZXMgPSB7fTtcbiAgdmFyIGksIHZhbCwgbmFtZTtcbiAgaWYgKEFycmF5LmlzQXJyYXkocHJvcHMpKSB7XG4gICAgaSA9IHByb3BzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB2YWwgPSBwcm9wc1tpXTtcbiAgICAgIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgICAgICBuYW1lID0gY2FtZWxpemUodmFsKTtcbiAgICAgICAgcmVzW25hbWVdID0geyB0eXBlOiBudWxsIH07XG4gICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgd2FybigncHJvcHMgbXVzdCBiZSBzdHJpbmdzIHdoZW4gdXNpbmcgYXJyYXkgc3ludGF4LicpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHByb3BzKSkge1xuICAgIGZvciAodmFyIGtleSBpbiBwcm9wcykge1xuICAgICAgdmFsID0gcHJvcHNba2V5XTtcbiAgICAgIG5hbWUgPSBjYW1lbGl6ZShrZXkpO1xuICAgICAgcmVzW25hbWVdID0gaXNQbGFpbk9iamVjdCh2YWwpXG4gICAgICAgID8gdmFsXG4gICAgICAgIDogeyB0eXBlOiB2YWwgfTtcbiAgICB9XG4gIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHdhcm4oXG4gICAgICBcIkludmFsaWQgdmFsdWUgZm9yIG9wdGlvbiBcXFwicHJvcHNcXFwiOiBleHBlY3RlZCBhbiBBcnJheSBvciBhbiBPYmplY3QsIFwiICtcbiAgICAgIFwiYnV0IGdvdCBcIiArICh0b1Jhd1R5cGUocHJvcHMpKSArIFwiLlwiLFxuICAgICAgdm1cbiAgICApO1xuICB9XG4gIG9wdGlvbnMucHJvcHMgPSByZXM7XG59XG5cbi8qKlxuICogTm9ybWFsaXplIGFsbCBpbmplY3Rpb25zIGludG8gT2JqZWN0LWJhc2VkIGZvcm1hdFxuICovXG5mdW5jdGlvbiBub3JtYWxpemVJbmplY3QgKG9wdGlvbnMsIHZtKSB7XG4gIHZhciBpbmplY3QgPSBvcHRpb25zLmluamVjdDtcbiAgaWYgKCFpbmplY3QpIHsgcmV0dXJuIH1cbiAgdmFyIG5vcm1hbGl6ZWQgPSBvcHRpb25zLmluamVjdCA9IHt9O1xuICBpZiAoQXJyYXkuaXNBcnJheShpbmplY3QpKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbmplY3QubGVuZ3RoOyBpKyspIHtcbiAgICAgIG5vcm1hbGl6ZWRbaW5qZWN0W2ldXSA9IHsgZnJvbTogaW5qZWN0W2ldIH07XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QoaW5qZWN0KSkge1xuICAgIGZvciAodmFyIGtleSBpbiBpbmplY3QpIHtcbiAgICAgIHZhciB2YWwgPSBpbmplY3Rba2V5XTtcbiAgICAgIG5vcm1hbGl6ZWRba2V5XSA9IGlzUGxhaW5PYmplY3QodmFsKVxuICAgICAgICA/IGV4dGVuZCh7IGZyb206IGtleSB9LCB2YWwpXG4gICAgICAgIDogeyBmcm9tOiB2YWwgfTtcbiAgICB9XG4gIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHdhcm4oXG4gICAgICBcIkludmFsaWQgdmFsdWUgZm9yIG9wdGlvbiBcXFwiaW5qZWN0XFxcIjogZXhwZWN0ZWQgYW4gQXJyYXkgb3IgYW4gT2JqZWN0LCBcIiArXG4gICAgICBcImJ1dCBnb3QgXCIgKyAodG9SYXdUeXBlKGluamVjdCkpICsgXCIuXCIsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgcmF3IGZ1bmN0aW9uIGRpcmVjdGl2ZXMgaW50byBvYmplY3QgZm9ybWF0LlxuICovXG5mdW5jdGlvbiBub3JtYWxpemVEaXJlY3RpdmVzIChvcHRpb25zKSB7XG4gIHZhciBkaXJzID0gb3B0aW9ucy5kaXJlY3RpdmVzO1xuICBpZiAoZGlycykge1xuICAgIGZvciAodmFyIGtleSBpbiBkaXJzKSB7XG4gICAgICB2YXIgZGVmID0gZGlyc1trZXldO1xuICAgICAgaWYgKHR5cGVvZiBkZWYgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgZGlyc1trZXldID0geyBiaW5kOiBkZWYsIHVwZGF0ZTogZGVmIH07XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2VydE9iamVjdFR5cGUgKG5hbWUsIHZhbHVlLCB2bSkge1xuICBpZiAoIWlzUGxhaW5PYmplY3QodmFsdWUpKSB7XG4gICAgd2FybihcbiAgICAgIFwiSW52YWxpZCB2YWx1ZSBmb3Igb3B0aW9uIFxcXCJcIiArIG5hbWUgKyBcIlxcXCI6IGV4cGVjdGVkIGFuIE9iamVjdCwgXCIgK1xuICAgICAgXCJidXQgZ290IFwiICsgKHRvUmF3VHlwZSh2YWx1ZSkpICsgXCIuXCIsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbn1cblxuLyoqXG4gKiBNZXJnZSB0d28gb3B0aW9uIG9iamVjdHMgaW50byBhIG5ldyBvbmUuXG4gKiBDb3JlIHV0aWxpdHkgdXNlZCBpbiBib3RoIGluc3RhbnRpYXRpb24gYW5kIGluaGVyaXRhbmNlLlxuICovXG5mdW5jdGlvbiBtZXJnZU9wdGlvbnMgKFxuICBwYXJlbnQsXG4gIGNoaWxkLFxuICB2bVxuKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY2hlY2tDb21wb25lbnRzKGNoaWxkKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgY2hpbGQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjaGlsZCA9IGNoaWxkLm9wdGlvbnM7XG4gIH1cblxuICBub3JtYWxpemVQcm9wcyhjaGlsZCwgdm0pO1xuICBub3JtYWxpemVJbmplY3QoY2hpbGQsIHZtKTtcbiAgbm9ybWFsaXplRGlyZWN0aXZlcyhjaGlsZCk7XG4gIHZhciBleHRlbmRzRnJvbSA9IGNoaWxkLmV4dGVuZHM7XG4gIGlmIChleHRlbmRzRnJvbSkge1xuICAgIHBhcmVudCA9IG1lcmdlT3B0aW9ucyhwYXJlbnQsIGV4dGVuZHNGcm9tLCB2bSk7XG4gIH1cbiAgaWYgKGNoaWxkLm1peGlucykge1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gY2hpbGQubWl4aW5zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgcGFyZW50ID0gbWVyZ2VPcHRpb25zKHBhcmVudCwgY2hpbGQubWl4aW5zW2ldLCB2bSk7XG4gICAgfVxuICB9XG4gIHZhciBvcHRpb25zID0ge307XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIHBhcmVudCkge1xuICAgIG1lcmdlRmllbGQoa2V5KTtcbiAgfVxuICBmb3IgKGtleSBpbiBjaGlsZCkge1xuICAgIGlmICghaGFzT3duKHBhcmVudCwga2V5KSkge1xuICAgICAgbWVyZ2VGaWVsZChrZXkpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBtZXJnZUZpZWxkIChrZXkpIHtcbiAgICB2YXIgc3RyYXQgPSBzdHJhdHNba2V5XSB8fCBkZWZhdWx0U3RyYXQ7XG4gICAgb3B0aW9uc1trZXldID0gc3RyYXQocGFyZW50W2tleV0sIGNoaWxkW2tleV0sIHZtLCBrZXkpO1xuICB9XG4gIHJldHVybiBvcHRpb25zXG59XG5cbi8qKlxuICogUmVzb2x2ZSBhbiBhc3NldC5cbiAqIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCBiZWNhdXNlIGNoaWxkIGluc3RhbmNlcyBuZWVkIGFjY2Vzc1xuICogdG8gYXNzZXRzIGRlZmluZWQgaW4gaXRzIGFuY2VzdG9yIGNoYWluLlxuICovXG5mdW5jdGlvbiByZXNvbHZlQXNzZXQgKFxuICBvcHRpb25zLFxuICB0eXBlLFxuICBpZCxcbiAgd2Fybk1pc3Npbmdcbikge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHR5cGVvZiBpZCAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgYXNzZXRzID0gb3B0aW9uc1t0eXBlXTtcbiAgLy8gY2hlY2sgbG9jYWwgcmVnaXN0cmF0aW9uIHZhcmlhdGlvbnMgZmlyc3RcbiAgaWYgKGhhc093bihhc3NldHMsIGlkKSkgeyByZXR1cm4gYXNzZXRzW2lkXSB9XG4gIHZhciBjYW1lbGl6ZWRJZCA9IGNhbWVsaXplKGlkKTtcbiAgaWYgKGhhc093bihhc3NldHMsIGNhbWVsaXplZElkKSkgeyByZXR1cm4gYXNzZXRzW2NhbWVsaXplZElkXSB9XG4gIHZhciBQYXNjYWxDYXNlSWQgPSBjYXBpdGFsaXplKGNhbWVsaXplZElkKTtcbiAgaWYgKGhhc093bihhc3NldHMsIFBhc2NhbENhc2VJZCkpIHsgcmV0dXJuIGFzc2V0c1tQYXNjYWxDYXNlSWRdIH1cbiAgLy8gZmFsbGJhY2sgdG8gcHJvdG90eXBlIGNoYWluXG4gIHZhciByZXMgPSBhc3NldHNbaWRdIHx8IGFzc2V0c1tjYW1lbGl6ZWRJZF0gfHwgYXNzZXRzW1Bhc2NhbENhc2VJZF07XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm5NaXNzaW5nICYmICFyZXMpIHtcbiAgICB3YXJuKFxuICAgICAgJ0ZhaWxlZCB0byByZXNvbHZlICcgKyB0eXBlLnNsaWNlKDAsIC0xKSArICc6ICcgKyBpZCxcbiAgICAgIG9wdGlvbnNcbiAgICApO1xuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIHZhbGlkYXRlUHJvcCAoXG4gIGtleSxcbiAgcHJvcE9wdGlvbnMsXG4gIHByb3BzRGF0YSxcbiAgdm1cbikge1xuICB2YXIgcHJvcCA9IHByb3BPcHRpb25zW2tleV07XG4gIHZhciBhYnNlbnQgPSAhaGFzT3duKHByb3BzRGF0YSwga2V5KTtcbiAgdmFyIHZhbHVlID0gcHJvcHNEYXRhW2tleV07XG4gIC8vIGJvb2xlYW4gY2FzdGluZ1xuICB2YXIgYm9vbGVhbkluZGV4ID0gZ2V0VHlwZUluZGV4KEJvb2xlYW4sIHByb3AudHlwZSk7XG4gIGlmIChib29sZWFuSW5kZXggPiAtMSkge1xuICAgIGlmIChhYnNlbnQgJiYgIWhhc093bihwcm9wLCAnZGVmYXVsdCcpKSB7XG4gICAgICB2YWx1ZSA9IGZhbHNlO1xuICAgIH0gZWxzZSBpZiAodmFsdWUgPT09ICcnIHx8IHZhbHVlID09PSBoeXBoZW5hdGUoa2V5KSkge1xuICAgICAgLy8gb25seSBjYXN0IGVtcHR5IHN0cmluZyAvIHNhbWUgbmFtZSB0byBib29sZWFuIGlmXG4gICAgICAvLyBib29sZWFuIGhhcyBoaWdoZXIgcHJpb3JpdHlcbiAgICAgIHZhciBzdHJpbmdJbmRleCA9IGdldFR5cGVJbmRleChTdHJpbmcsIHByb3AudHlwZSk7XG4gICAgICBpZiAoc3RyaW5nSW5kZXggPCAwIHx8IGJvb2xlYW5JbmRleCA8IHN0cmluZ0luZGV4KSB7XG4gICAgICAgIHZhbHVlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLy8gY2hlY2sgZGVmYXVsdCB2YWx1ZVxuICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgIHZhbHVlID0gZ2V0UHJvcERlZmF1bHRWYWx1ZSh2bSwgcHJvcCwga2V5KTtcbiAgICAvLyBzaW5jZSB0aGUgZGVmYXVsdCB2YWx1ZSBpcyBhIGZyZXNoIGNvcHksXG4gICAgLy8gbWFrZSBzdXJlIHRvIG9ic2VydmUgaXQuXG4gICAgdmFyIHByZXZTaG91bGRPYnNlcnZlID0gc2hvdWxkT2JzZXJ2ZTtcbiAgICB0b2dnbGVPYnNlcnZpbmcodHJ1ZSk7XG4gICAgb2JzZXJ2ZSh2YWx1ZSk7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKHByZXZTaG91bGRPYnNlcnZlKTtcbiAgfVxuICBpZiAoXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgIC8vIHNraXAgdmFsaWRhdGlvbiBmb3Igd2VleCByZWN5Y2xlLWxpc3QgY2hpbGQgY29tcG9uZW50IHByb3BzXG4gICAgIShmYWxzZSAmJiBpc09iamVjdCh2YWx1ZSkgJiYgKCdAYmluZGluZycgaW4gdmFsdWUpKVxuICApIHtcbiAgICBhc3NlcnRQcm9wKHByb3AsIGtleSwgdmFsdWUsIHZtLCBhYnNlbnQpO1xuICB9XG4gIHJldHVybiB2YWx1ZVxufVxuXG4vKipcbiAqIEdldCB0aGUgZGVmYXVsdCB2YWx1ZSBvZiBhIHByb3AuXG4gKi9cbmZ1bmN0aW9uIGdldFByb3BEZWZhdWx0VmFsdWUgKHZtLCBwcm9wLCBrZXkpIHtcbiAgLy8gbm8gZGVmYXVsdCwgcmV0dXJuIHVuZGVmaW5lZFxuICBpZiAoIWhhc093bihwcm9wLCAnZGVmYXVsdCcpKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZFxuICB9XG4gIHZhciBkZWYgPSBwcm9wLmRlZmF1bHQ7XG4gIC8vIHdhcm4gYWdhaW5zdCBub24tZmFjdG9yeSBkZWZhdWx0cyBmb3IgT2JqZWN0ICYgQXJyYXlcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgaXNPYmplY3QoZGVmKSkge1xuICAgIHdhcm4oXG4gICAgICAnSW52YWxpZCBkZWZhdWx0IHZhbHVlIGZvciBwcm9wIFwiJyArIGtleSArICdcIjogJyArXG4gICAgICAnUHJvcHMgd2l0aCB0eXBlIE9iamVjdC9BcnJheSBtdXN0IHVzZSBhIGZhY3RvcnkgZnVuY3Rpb24gJyArXG4gICAgICAndG8gcmV0dXJuIHRoZSBkZWZhdWx0IHZhbHVlLicsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbiAgLy8gdGhlIHJhdyBwcm9wIHZhbHVlIHdhcyBhbHNvIHVuZGVmaW5lZCBmcm9tIHByZXZpb3VzIHJlbmRlcixcbiAgLy8gcmV0dXJuIHByZXZpb3VzIGRlZmF1bHQgdmFsdWUgdG8gYXZvaWQgdW5uZWNlc3Nhcnkgd2F0Y2hlciB0cmlnZ2VyXG4gIGlmICh2bSAmJiB2bS4kb3B0aW9ucy5wcm9wc0RhdGEgJiZcbiAgICB2bS4kb3B0aW9ucy5wcm9wc0RhdGFba2V5XSA9PT0gdW5kZWZpbmVkICYmXG4gICAgdm0uX3Byb3BzW2tleV0gIT09IHVuZGVmaW5lZFxuICApIHtcbiAgICByZXR1cm4gdm0uX3Byb3BzW2tleV1cbiAgfVxuICAvLyBjYWxsIGZhY3RvcnkgZnVuY3Rpb24gZm9yIG5vbi1GdW5jdGlvbiB0eXBlc1xuICAvLyBhIHZhbHVlIGlzIEZ1bmN0aW9uIGlmIGl0cyBwcm90b3R5cGUgaXMgZnVuY3Rpb24gZXZlbiBhY3Jvc3MgZGlmZmVyZW50IGV4ZWN1dGlvbiBjb250ZXh0XG4gIHJldHVybiB0eXBlb2YgZGVmID09PSAnZnVuY3Rpb24nICYmIGdldFR5cGUocHJvcC50eXBlKSAhPT0gJ0Z1bmN0aW9uJ1xuICAgID8gZGVmLmNhbGwodm0pXG4gICAgOiBkZWZcbn1cblxuLyoqXG4gKiBBc3NlcnQgd2hldGhlciBhIHByb3AgaXMgdmFsaWQuXG4gKi9cbmZ1bmN0aW9uIGFzc2VydFByb3AgKFxuICBwcm9wLFxuICBuYW1lLFxuICB2YWx1ZSxcbiAgdm0sXG4gIGFic2VudFxuKSB7XG4gIGlmIChwcm9wLnJlcXVpcmVkICYmIGFic2VudCkge1xuICAgIHdhcm4oXG4gICAgICAnTWlzc2luZyByZXF1aXJlZCBwcm9wOiBcIicgKyBuYW1lICsgJ1wiJyxcbiAgICAgIHZtXG4gICAgKTtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAodmFsdWUgPT0gbnVsbCAmJiAhcHJvcC5yZXF1aXJlZCkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciB0eXBlID0gcHJvcC50eXBlO1xuICB2YXIgdmFsaWQgPSAhdHlwZSB8fCB0eXBlID09PSB0cnVlO1xuICB2YXIgZXhwZWN0ZWRUeXBlcyA9IFtdO1xuICBpZiAodHlwZSkge1xuICAgIGlmICghQXJyYXkuaXNBcnJheSh0eXBlKSkge1xuICAgICAgdHlwZSA9IFt0eXBlXTtcbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0eXBlLmxlbmd0aCAmJiAhdmFsaWQ7IGkrKykge1xuICAgICAgdmFyIGFzc2VydGVkVHlwZSA9IGFzc2VydFR5cGUodmFsdWUsIHR5cGVbaV0pO1xuICAgICAgZXhwZWN0ZWRUeXBlcy5wdXNoKGFzc2VydGVkVHlwZS5leHBlY3RlZFR5cGUgfHwgJycpO1xuICAgICAgdmFsaWQgPSBhc3NlcnRlZFR5cGUudmFsaWQ7XG4gICAgfVxuICB9XG4gIGlmICghdmFsaWQpIHtcbiAgICB3YXJuKFxuICAgICAgXCJJbnZhbGlkIHByb3A6IHR5cGUgY2hlY2sgZmFpbGVkIGZvciBwcm9wIFxcXCJcIiArIG5hbWUgKyBcIlxcXCIuXCIgK1xuICAgICAgXCIgRXhwZWN0ZWQgXCIgKyAoZXhwZWN0ZWRUeXBlcy5tYXAoY2FwaXRhbGl6ZSkuam9pbignLCAnKSkgK1xuICAgICAgXCIsIGdvdCBcIiArICh0b1Jhd1R5cGUodmFsdWUpKSArIFwiLlwiLFxuICAgICAgdm1cbiAgICApO1xuICAgIHJldHVyblxuICB9XG4gIHZhciB2YWxpZGF0b3IgPSBwcm9wLnZhbGlkYXRvcjtcbiAgaWYgKHZhbGlkYXRvcikge1xuICAgIGlmICghdmFsaWRhdG9yKHZhbHVlKSkge1xuICAgICAgd2FybihcbiAgICAgICAgJ0ludmFsaWQgcHJvcDogY3VzdG9tIHZhbGlkYXRvciBjaGVjayBmYWlsZWQgZm9yIHByb3AgXCInICsgbmFtZSArICdcIi4nLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIHNpbXBsZUNoZWNrUkUgPSAvXihTdHJpbmd8TnVtYmVyfEJvb2xlYW58RnVuY3Rpb258U3ltYm9sKSQvO1xuXG5mdW5jdGlvbiBhc3NlcnRUeXBlICh2YWx1ZSwgdHlwZSkge1xuICB2YXIgdmFsaWQ7XG4gIHZhciBleHBlY3RlZFR5cGUgPSBnZXRUeXBlKHR5cGUpO1xuICBpZiAoc2ltcGxlQ2hlY2tSRS50ZXN0KGV4cGVjdGVkVHlwZSkpIHtcbiAgICB2YXIgdCA9IHR5cGVvZiB2YWx1ZTtcbiAgICB2YWxpZCA9IHQgPT09IGV4cGVjdGVkVHlwZS50b0xvd2VyQ2FzZSgpO1xuICAgIC8vIGZvciBwcmltaXRpdmUgd3JhcHBlciBvYmplY3RzXG4gICAgaWYgKCF2YWxpZCAmJiB0ID09PSAnb2JqZWN0Jykge1xuICAgICAgdmFsaWQgPSB2YWx1ZSBpbnN0YW5jZW9mIHR5cGU7XG4gICAgfVxuICB9IGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gJ09iamVjdCcpIHtcbiAgICB2YWxpZCA9IGlzUGxhaW5PYmplY3QodmFsdWUpO1xuICB9IGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gJ0FycmF5Jykge1xuICAgIHZhbGlkID0gQXJyYXkuaXNBcnJheSh2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFsaWQgPSB2YWx1ZSBpbnN0YW5jZW9mIHR5cGU7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB2YWxpZDogdmFsaWQsXG4gICAgZXhwZWN0ZWRUeXBlOiBleHBlY3RlZFR5cGVcbiAgfVxufVxuXG4vKipcbiAqIFVzZSBmdW5jdGlvbiBzdHJpbmcgbmFtZSB0byBjaGVjayBidWlsdC1pbiB0eXBlcyxcbiAqIGJlY2F1c2UgYSBzaW1wbGUgZXF1YWxpdHkgY2hlY2sgd2lsbCBmYWlsIHdoZW4gcnVubmluZ1xuICogYWNyb3NzIGRpZmZlcmVudCB2bXMgLyBpZnJhbWVzLlxuICovXG5mdW5jdGlvbiBnZXRUeXBlIChmbikge1xuICB2YXIgbWF0Y2ggPSBmbiAmJiBmbi50b1N0cmluZygpLm1hdGNoKC9eXFxzKmZ1bmN0aW9uIChcXHcrKS8pO1xuICByZXR1cm4gbWF0Y2ggPyBtYXRjaFsxXSA6ICcnXG59XG5cbmZ1bmN0aW9uIGlzU2FtZVR5cGUgKGEsIGIpIHtcbiAgcmV0dXJuIGdldFR5cGUoYSkgPT09IGdldFR5cGUoYilcbn1cblxuZnVuY3Rpb24gZ2V0VHlwZUluZGV4ICh0eXBlLCBleHBlY3RlZFR5cGVzKSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShleHBlY3RlZFR5cGVzKSkge1xuICAgIHJldHVybiBpc1NhbWVUeXBlKGV4cGVjdGVkVHlwZXMsIHR5cGUpID8gMCA6IC0xXG4gIH1cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGV4cGVjdGVkVHlwZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoaXNTYW1lVHlwZShleHBlY3RlZFR5cGVzW2ldLCB0eXBlKSkge1xuICAgICAgcmV0dXJuIGlcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBoYW5kbGVFcnJvciAoZXJyLCB2bSwgaW5mbykge1xuICBpZiAodm0pIHtcbiAgICB2YXIgY3VyID0gdm07XG4gICAgd2hpbGUgKChjdXIgPSBjdXIuJHBhcmVudCkpIHtcbiAgICAgIHZhciBob29rcyA9IGN1ci4kb3B0aW9ucy5lcnJvckNhcHR1cmVkO1xuICAgICAgaWYgKGhvb2tzKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaG9va3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIGNhcHR1cmUgPSBob29rc1tpXS5jYWxsKGN1ciwgZXJyLCB2bSwgaW5mbykgPT09IGZhbHNlO1xuICAgICAgICAgICAgaWYgKGNhcHR1cmUpIHsgcmV0dXJuIH1cbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBnbG9iYWxIYW5kbGVFcnJvcihlLCBjdXIsICdlcnJvckNhcHR1cmVkIGhvb2snKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZ2xvYmFsSGFuZGxlRXJyb3IoZXJyLCB2bSwgaW5mbyk7XG59XG5cbmZ1bmN0aW9uIGdsb2JhbEhhbmRsZUVycm9yIChlcnIsIHZtLCBpbmZvKSB7XG4gIGlmIChjb25maWcuZXJyb3JIYW5kbGVyKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBjb25maWcuZXJyb3JIYW5kbGVyLmNhbGwobnVsbCwgZXJyLCB2bSwgaW5mbylcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBsb2dFcnJvcihlLCBudWxsLCAnY29uZmlnLmVycm9ySGFuZGxlcicpO1xuICAgIH1cbiAgfVxuICBsb2dFcnJvcihlcnIsIHZtLCBpbmZvKTtcbn1cblxuZnVuY3Rpb24gbG9nRXJyb3IgKGVyciwgdm0sIGluZm8pIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB3YXJuKChcIkVycm9yIGluIFwiICsgaW5mbyArIFwiOiBcXFwiXCIgKyAoZXJyLnRvU3RyaW5nKCkpICsgXCJcXFwiXCIpLCB2bSk7XG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKChpbkJyb3dzZXIgfHwgaW5XZWV4KSAmJiB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgZXJyXG4gIH1cbn1cblxuLyogICovXG4vKiBnbG9iYWxzIE1lc3NhZ2VDaGFubmVsICovXG5cbnZhciBjYWxsYmFja3MgPSBbXTtcbnZhciBwZW5kaW5nID0gZmFsc2U7XG5cbmZ1bmN0aW9uIGZsdXNoQ2FsbGJhY2tzICgpIHtcbiAgcGVuZGluZyA9IGZhbHNlO1xuICB2YXIgY29waWVzID0gY2FsbGJhY2tzLnNsaWNlKDApO1xuICBjYWxsYmFja3MubGVuZ3RoID0gMDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3BpZXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb3BpZXNbaV0oKTtcbiAgfVxufVxuXG4vLyBIZXJlIHdlIGhhdmUgYXN5bmMgZGVmZXJyaW5nIHdyYXBwZXJzIHVzaW5nIGJvdGggbWljcm90YXNrcyBhbmQgKG1hY3JvKSB0YXNrcy5cbi8vIEluIDwgMi40IHdlIHVzZWQgbWljcm90YXNrcyBldmVyeXdoZXJlLCBidXQgdGhlcmUgYXJlIHNvbWUgc2NlbmFyaW9zIHdoZXJlXG4vLyBtaWNyb3Rhc2tzIGhhdmUgdG9vIGhpZ2ggYSBwcmlvcml0eSBhbmQgZmlyZSBpbiBiZXR3ZWVuIHN1cHBvc2VkbHlcbi8vIHNlcXVlbnRpYWwgZXZlbnRzIChlLmcuICM0NTIxLCAjNjY5MCkgb3IgZXZlbiBiZXR3ZWVuIGJ1YmJsaW5nIG9mIHRoZSBzYW1lXG4vLyBldmVudCAoIzY1NjYpLiBIb3dldmVyLCB1c2luZyAobWFjcm8pIHRhc2tzIGV2ZXJ5d2hlcmUgYWxzbyBoYXMgc3VidGxlIHByb2JsZW1zXG4vLyB3aGVuIHN0YXRlIGlzIGNoYW5nZWQgcmlnaHQgYmVmb3JlIHJlcGFpbnQgKGUuZy4gIzY4MTMsIG91dC1pbiB0cmFuc2l0aW9ucykuXG4vLyBIZXJlIHdlIHVzZSBtaWNyb3Rhc2sgYnkgZGVmYXVsdCwgYnV0IGV4cG9zZSBhIHdheSB0byBmb3JjZSAobWFjcm8pIHRhc2sgd2hlblxuLy8gbmVlZGVkIChlLmcuIGluIGV2ZW50IGhhbmRsZXJzIGF0dGFjaGVkIGJ5IHYtb24pLlxudmFyIG1pY3JvVGltZXJGdW5jO1xudmFyIG1hY3JvVGltZXJGdW5jO1xudmFyIHVzZU1hY3JvVGFzayA9IGZhbHNlO1xuXG4vLyBEZXRlcm1pbmUgKG1hY3JvKSB0YXNrIGRlZmVyIGltcGxlbWVudGF0aW9uLlxuLy8gVGVjaG5pY2FsbHkgc2V0SW1tZWRpYXRlIHNob3VsZCBiZSB0aGUgaWRlYWwgY2hvaWNlLCBidXQgaXQncyBvbmx5IGF2YWlsYWJsZVxuLy8gaW4gSUUuIFRoZSBvbmx5IHBvbHlmaWxsIHRoYXQgY29uc2lzdGVudGx5IHF1ZXVlcyB0aGUgY2FsbGJhY2sgYWZ0ZXIgYWxsIERPTVxuLy8gZXZlbnRzIHRyaWdnZXJlZCBpbiB0aGUgc2FtZSBsb29wIGlzIGJ5IHVzaW5nIE1lc3NhZ2VDaGFubmVsLlxuLyogaXN0YW5idWwgaWdub3JlIGlmICovXG5pZiAodHlwZW9mIHNldEltbWVkaWF0ZSAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoc2V0SW1tZWRpYXRlKSkge1xuICBtYWNyb1RpbWVyRnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICBzZXRJbW1lZGlhdGUoZmx1c2hDYWxsYmFja3MpO1xuICB9O1xufSBlbHNlIGlmICh0eXBlb2YgTWVzc2FnZUNoYW5uZWwgIT09ICd1bmRlZmluZWQnICYmIChcbiAgaXNOYXRpdmUoTWVzc2FnZUNoYW5uZWwpIHx8XG4gIC8vIFBoYW50b21KU1xuICBNZXNzYWdlQ2hhbm5lbC50b1N0cmluZygpID09PSAnW29iamVjdCBNZXNzYWdlQ2hhbm5lbENvbnN0cnVjdG9yXSdcbikpIHtcbiAgdmFyIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgdmFyIHBvcnQgPSBjaGFubmVsLnBvcnQyO1xuICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGZsdXNoQ2FsbGJhY2tzO1xuICBtYWNyb1RpbWVyRnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICBwb3J0LnBvc3RNZXNzYWdlKDEpO1xuICB9O1xufSBlbHNlIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgbWFjcm9UaW1lckZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgc2V0VGltZW91dChmbHVzaENhbGxiYWNrcywgMCk7XG4gIH07XG59XG5cbi8vIERldGVybWluZSBtaWNyb3Rhc2sgZGVmZXIgaW1wbGVtZW50YXRpb24uXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCwgJGZsb3ctZGlzYWJsZS1saW5lICovXG5pZiAodHlwZW9mIFByb21pc2UgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKFByb21pc2UpKSB7XG4gIHZhciBwID0gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIG1pY3JvVGltZXJGdW5jID0gZnVuY3Rpb24gKCkge1xuICAgIHAudGhlbihmbHVzaENhbGxiYWNrcyk7XG4gICAgLy8gaW4gcHJvYmxlbWF0aWMgVUlXZWJWaWV3cywgUHJvbWlzZS50aGVuIGRvZXNuJ3QgY29tcGxldGVseSBicmVhaywgYnV0XG4gICAgLy8gaXQgY2FuIGdldCBzdHVjayBpbiBhIHdlaXJkIHN0YXRlIHdoZXJlIGNhbGxiYWNrcyBhcmUgcHVzaGVkIGludG8gdGhlXG4gICAgLy8gbWljcm90YXNrIHF1ZXVlIGJ1dCB0aGUgcXVldWUgaXNuJ3QgYmVpbmcgZmx1c2hlZCwgdW50aWwgdGhlIGJyb3dzZXJcbiAgICAvLyBuZWVkcyB0byBkbyBzb21lIG90aGVyIHdvcmssIGUuZy4gaGFuZGxlIGEgdGltZXIuIFRoZXJlZm9yZSB3ZSBjYW5cbiAgICAvLyBcImZvcmNlXCIgdGhlIG1pY3JvdGFzayBxdWV1ZSB0byBiZSBmbHVzaGVkIGJ5IGFkZGluZyBhbiBlbXB0eSB0aW1lci5cbiAgICBpZiAoaXNJT1MpIHsgc2V0VGltZW91dChub29wKTsgfVxuICB9O1xufSBlbHNlIHtcbiAgLy8gZmFsbGJhY2sgdG8gbWFjcm9cbiAgbWljcm9UaW1lckZ1bmMgPSBtYWNyb1RpbWVyRnVuYztcbn1cblxuLyoqXG4gKiBXcmFwIGEgZnVuY3Rpb24gc28gdGhhdCBpZiBhbnkgY29kZSBpbnNpZGUgdHJpZ2dlcnMgc3RhdGUgY2hhbmdlLFxuICogdGhlIGNoYW5nZXMgYXJlIHF1ZXVlZCB1c2luZyBhIChtYWNybykgdGFzayBpbnN0ZWFkIG9mIGEgbWljcm90YXNrLlxuICovXG5mdW5jdGlvbiB3aXRoTWFjcm9UYXNrIChmbikge1xuICByZXR1cm4gZm4uX3dpdGhUYXNrIHx8IChmbi5fd2l0aFRhc2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgdXNlTWFjcm9UYXNrID0gdHJ1ZTtcbiAgICB2YXIgcmVzID0gZm4uYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICB1c2VNYWNyb1Rhc2sgPSBmYWxzZTtcbiAgICByZXR1cm4gcmVzXG4gIH0pXG59XG5cbmZ1bmN0aW9uIG5leHRUaWNrIChjYiwgY3R4KSB7XG4gIHZhciBfcmVzb2x2ZTtcbiAgY2FsbGJhY2tzLnB1c2goZnVuY3Rpb24gKCkge1xuICAgIGlmIChjYikge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY2IuY2FsbChjdHgpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBoYW5kbGVFcnJvcihlLCBjdHgsICduZXh0VGljaycpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoX3Jlc29sdmUpIHtcbiAgICAgIF9yZXNvbHZlKGN0eCk7XG4gICAgfVxuICB9KTtcbiAgaWYgKCFwZW5kaW5nKSB7XG4gICAgcGVuZGluZyA9IHRydWU7XG4gICAgaWYgKHVzZU1hY3JvVGFzaykge1xuICAgICAgbWFjcm9UaW1lckZ1bmMoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbWljcm9UaW1lckZ1bmMoKTtcbiAgICB9XG4gIH1cbiAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gIGlmICghY2IgJiYgdHlwZW9mIFByb21pc2UgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICBfcmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgfSlcbiAgfVxufVxuXG4vKiAgKi9cblxuLyogbm90IHR5cGUgY2hlY2tpbmcgdGhpcyBmaWxlIGJlY2F1c2UgZmxvdyBkb2Vzbid0IHBsYXkgd2VsbCB3aXRoIFByb3h5ICovXG5cbnZhciBpbml0UHJveHk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBhbGxvd2VkR2xvYmFscyA9IG1ha2VNYXAoXG4gICAgJ0luZmluaXR5LHVuZGVmaW5lZCxOYU4saXNGaW5pdGUsaXNOYU4sJyArXG4gICAgJ3BhcnNlRmxvYXQscGFyc2VJbnQsZGVjb2RlVVJJLGRlY29kZVVSSUNvbXBvbmVudCxlbmNvZGVVUkksZW5jb2RlVVJJQ29tcG9uZW50LCcgK1xuICAgICdNYXRoLE51bWJlcixEYXRlLEFycmF5LE9iamVjdCxCb29sZWFuLFN0cmluZyxSZWdFeHAsTWFwLFNldCxKU09OLEludGwsJyArXG4gICAgJ3JlcXVpcmUnIC8vIGZvciBXZWJwYWNrL0Jyb3dzZXJpZnlcbiAgKTtcblxuICB2YXIgd2Fybk5vblByZXNlbnQgPSBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHtcbiAgICB3YXJuKFxuICAgICAgXCJQcm9wZXJ0eSBvciBtZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIG5vdCBkZWZpbmVkIG9uIHRoZSBpbnN0YW5jZSBidXQgXCIgK1xuICAgICAgJ3JlZmVyZW5jZWQgZHVyaW5nIHJlbmRlci4gTWFrZSBzdXJlIHRoYXQgdGhpcyBwcm9wZXJ0eSBpcyByZWFjdGl2ZSwgJyArXG4gICAgICAnZWl0aGVyIGluIHRoZSBkYXRhIG9wdGlvbiwgb3IgZm9yIGNsYXNzLWJhc2VkIGNvbXBvbmVudHMsIGJ5ICcgK1xuICAgICAgJ2luaXRpYWxpemluZyB0aGUgcHJvcGVydHkuICcgK1xuICAgICAgJ1NlZTogaHR0cHM6Ly92dWVqcy5vcmcvdjIvZ3VpZGUvcmVhY3Rpdml0eS5odG1sI0RlY2xhcmluZy1SZWFjdGl2ZS1Qcm9wZXJ0aWVzLicsXG4gICAgICB0YXJnZXRcbiAgICApO1xuICB9O1xuXG4gIHZhciBoYXNQcm94eSA9XG4gICAgdHlwZW9mIFByb3h5ICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShQcm94eSk7XG5cbiAgaWYgKGhhc1Byb3h5KSB7XG4gICAgdmFyIGlzQnVpbHRJbk1vZGlmaWVyID0gbWFrZU1hcCgnc3RvcCxwcmV2ZW50LHNlbGYsY3RybCxzaGlmdCxhbHQsbWV0YSxleGFjdCcpO1xuICAgIGNvbmZpZy5rZXlDb2RlcyA9IG5ldyBQcm94eShjb25maWcua2V5Q29kZXMsIHtcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0ICh0YXJnZXQsIGtleSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKGlzQnVpbHRJbk1vZGlmaWVyKGtleSkpIHtcbiAgICAgICAgICB3YXJuKChcIkF2b2lkIG92ZXJ3cml0aW5nIGJ1aWx0LWluIG1vZGlmaWVyIGluIGNvbmZpZy5rZXlDb2RlczogLlwiICsga2V5KSk7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICB2YXIgaGFzSGFuZGxlciA9IHtcbiAgICBoYXM6IGZ1bmN0aW9uIGhhcyAodGFyZ2V0LCBrZXkpIHtcbiAgICAgIHZhciBoYXMgPSBrZXkgaW4gdGFyZ2V0O1xuICAgICAgdmFyIGlzQWxsb3dlZCA9IGFsbG93ZWRHbG9iYWxzKGtleSkgfHwga2V5LmNoYXJBdCgwKSA9PT0gJ18nO1xuICAgICAgaWYgKCFoYXMgJiYgIWlzQWxsb3dlZCkge1xuICAgICAgICB3YXJuTm9uUHJlc2VudCh0YXJnZXQsIGtleSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gaGFzIHx8ICFpc0FsbG93ZWRcbiAgICB9XG4gIH07XG5cbiAgdmFyIGdldEhhbmRsZXIgPSB7XG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQgKHRhcmdldCwga2V5KSB7XG4gICAgICBpZiAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycgJiYgIShrZXkgaW4gdGFyZ2V0KSkge1xuICAgICAgICB3YXJuTm9uUHJlc2VudCh0YXJnZXQsIGtleSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGFyZ2V0W2tleV1cbiAgICB9XG4gIH07XG5cbiAgaW5pdFByb3h5ID0gZnVuY3Rpb24gaW5pdFByb3h5ICh2bSkge1xuICAgIGlmIChoYXNQcm94eSkge1xuICAgICAgLy8gZGV0ZXJtaW5lIHdoaWNoIHByb3h5IGhhbmRsZXIgdG8gdXNlXG4gICAgICB2YXIgb3B0aW9ucyA9IHZtLiRvcHRpb25zO1xuICAgICAgdmFyIGhhbmRsZXJzID0gb3B0aW9ucy5yZW5kZXIgJiYgb3B0aW9ucy5yZW5kZXIuX3dpdGhTdHJpcHBlZFxuICAgICAgICA/IGdldEhhbmRsZXJcbiAgICAgICAgOiBoYXNIYW5kbGVyO1xuICAgICAgdm0uX3JlbmRlclByb3h5ID0gbmV3IFByb3h5KHZtLCBoYW5kbGVycyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZtLl9yZW5kZXJQcm94eSA9IHZtO1xuICAgIH1cbiAgfTtcbn1cblxuLyogICovXG5cbnZhciBzZWVuT2JqZWN0cyA9IG5ldyBfU2V0KCk7XG5cbi8qKlxuICogUmVjdXJzaXZlbHkgdHJhdmVyc2UgYW4gb2JqZWN0IHRvIGV2b2tlIGFsbCBjb252ZXJ0ZWRcbiAqIGdldHRlcnMsIHNvIHRoYXQgZXZlcnkgbmVzdGVkIHByb3BlcnR5IGluc2lkZSB0aGUgb2JqZWN0XG4gKiBpcyBjb2xsZWN0ZWQgYXMgYSBcImRlZXBcIiBkZXBlbmRlbmN5LlxuICovXG5mdW5jdGlvbiB0cmF2ZXJzZSAodmFsKSB7XG4gIF90cmF2ZXJzZSh2YWwsIHNlZW5PYmplY3RzKTtcbiAgc2Vlbk9iamVjdHMuY2xlYXIoKTtcbn1cblxuZnVuY3Rpb24gX3RyYXZlcnNlICh2YWwsIHNlZW4pIHtcbiAgdmFyIGksIGtleXM7XG4gIHZhciBpc0EgPSBBcnJheS5pc0FycmF5KHZhbCk7XG4gIGlmICgoIWlzQSAmJiAhaXNPYmplY3QodmFsKSkgfHwgT2JqZWN0LmlzRnJvemVuKHZhbCkgfHwgdmFsIGluc3RhbmNlb2YgVk5vZGUpIHtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAodmFsLl9fb2JfXykge1xuICAgIHZhciBkZXBJZCA9IHZhbC5fX29iX18uZGVwLmlkO1xuICAgIGlmIChzZWVuLmhhcyhkZXBJZCkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBzZWVuLmFkZChkZXBJZCk7XG4gIH1cbiAgaWYgKGlzQSkge1xuICAgIGkgPSB2YWwubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHsgX3RyYXZlcnNlKHZhbFtpXSwgc2Vlbik7IH1cbiAgfSBlbHNlIHtcbiAgICBrZXlzID0gT2JqZWN0LmtleXModmFsKTtcbiAgICBpID0ga2V5cy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkgeyBfdHJhdmVyc2UodmFsW2tleXNbaV1dLCBzZWVuKTsgfVxuICB9XG59XG5cbnZhciBtYXJrO1xudmFyIG1lYXN1cmU7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBwZXJmID0gaW5Ccm93c2VyICYmIHdpbmRvdy5wZXJmb3JtYW5jZTtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChcbiAgICBwZXJmICYmXG4gICAgcGVyZi5tYXJrICYmXG4gICAgcGVyZi5tZWFzdXJlICYmXG4gICAgcGVyZi5jbGVhck1hcmtzICYmXG4gICAgcGVyZi5jbGVhck1lYXN1cmVzXG4gICkge1xuICAgIG1hcmsgPSBmdW5jdGlvbiAodGFnKSB7IHJldHVybiBwZXJmLm1hcmsodGFnKTsgfTtcbiAgICBtZWFzdXJlID0gZnVuY3Rpb24gKG5hbWUsIHN0YXJ0VGFnLCBlbmRUYWcpIHtcbiAgICAgIHBlcmYubWVhc3VyZShuYW1lLCBzdGFydFRhZywgZW5kVGFnKTtcbiAgICAgIHBlcmYuY2xlYXJNYXJrcyhzdGFydFRhZyk7XG4gICAgICBwZXJmLmNsZWFyTWFya3MoZW5kVGFnKTtcbiAgICAgIHBlcmYuY2xlYXJNZWFzdXJlcyhuYW1lKTtcbiAgICB9O1xuICB9XG59XG5cbi8qICAqL1xuXG52YXIgbm9ybWFsaXplRXZlbnQgPSBjYWNoZWQoZnVuY3Rpb24gKG5hbWUpIHtcbiAgdmFyIHBhc3NpdmUgPSBuYW1lLmNoYXJBdCgwKSA9PT0gJyYnO1xuICBuYW1lID0gcGFzc2l2ZSA/IG5hbWUuc2xpY2UoMSkgOiBuYW1lO1xuICB2YXIgb25jZSQkMSA9IG5hbWUuY2hhckF0KDApID09PSAnfic7IC8vIFByZWZpeGVkIGxhc3QsIGNoZWNrZWQgZmlyc3RcbiAgbmFtZSA9IG9uY2UkJDEgPyBuYW1lLnNsaWNlKDEpIDogbmFtZTtcbiAgdmFyIGNhcHR1cmUgPSBuYW1lLmNoYXJBdCgwKSA9PT0gJyEnO1xuICBuYW1lID0gY2FwdHVyZSA/IG5hbWUuc2xpY2UoMSkgOiBuYW1lO1xuICByZXR1cm4ge1xuICAgIG5hbWU6IG5hbWUsXG4gICAgb25jZTogb25jZSQkMSxcbiAgICBjYXB0dXJlOiBjYXB0dXJlLFxuICAgIHBhc3NpdmU6IHBhc3NpdmVcbiAgfVxufSk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUZuSW52b2tlciAoZm5zKSB7XG4gIGZ1bmN0aW9uIGludm9rZXIgKCkge1xuICAgIHZhciBhcmd1bWVudHMkMSA9IGFyZ3VtZW50cztcblxuICAgIHZhciBmbnMgPSBpbnZva2VyLmZucztcbiAgICBpZiAoQXJyYXkuaXNBcnJheShmbnMpKSB7XG4gICAgICB2YXIgY2xvbmVkID0gZm5zLnNsaWNlKCk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNsb25lZC5sZW5ndGg7IGkrKykge1xuICAgICAgICBjbG9uZWRbaV0uYXBwbHkobnVsbCwgYXJndW1lbnRzJDEpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyByZXR1cm4gaGFuZGxlciByZXR1cm4gdmFsdWUgZm9yIHNpbmdsZSBoYW5kbGVyc1xuICAgICAgcmV0dXJuIGZucy5hcHBseShudWxsLCBhcmd1bWVudHMpXG4gICAgfVxuICB9XG4gIGludm9rZXIuZm5zID0gZm5zO1xuICByZXR1cm4gaW52b2tlclxufVxuXG5mdW5jdGlvbiB1cGRhdGVMaXN0ZW5lcnMgKFxuICBvbixcbiAgb2xkT24sXG4gIGFkZCxcbiAgcmVtb3ZlJCQxLFxuICB2bVxuKSB7XG4gIHZhciBuYW1lLCBkZWYsIGN1ciwgb2xkLCBldmVudDtcbiAgZm9yIChuYW1lIGluIG9uKSB7XG4gICAgZGVmID0gY3VyID0gb25bbmFtZV07XG4gICAgb2xkID0gb2xkT25bbmFtZV07XG4gICAgZXZlbnQgPSBub3JtYWxpemVFdmVudChuYW1lKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoaXNVbmRlZihjdXIpKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgIFwiSW52YWxpZCBoYW5kbGVyIGZvciBldmVudCBcXFwiXCIgKyAoZXZlbnQubmFtZSkgKyBcIlxcXCI6IGdvdCBcIiArIFN0cmluZyhjdXIpLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKGlzVW5kZWYob2xkKSkge1xuICAgICAgaWYgKGlzVW5kZWYoY3VyLmZucykpIHtcbiAgICAgICAgY3VyID0gb25bbmFtZV0gPSBjcmVhdGVGbkludm9rZXIoY3VyKTtcbiAgICAgIH1cbiAgICAgIGFkZChldmVudC5uYW1lLCBjdXIsIGV2ZW50Lm9uY2UsIGV2ZW50LmNhcHR1cmUsIGV2ZW50LnBhc3NpdmUsIGV2ZW50LnBhcmFtcyk7XG4gICAgfSBlbHNlIGlmIChjdXIgIT09IG9sZCkge1xuICAgICAgb2xkLmZucyA9IGN1cjtcbiAgICAgIG9uW25hbWVdID0gb2xkO1xuICAgIH1cbiAgfVxuICBmb3IgKG5hbWUgaW4gb2xkT24pIHtcbiAgICBpZiAoaXNVbmRlZihvbltuYW1lXSkpIHtcbiAgICAgIGV2ZW50ID0gbm9ybWFsaXplRXZlbnQobmFtZSk7XG4gICAgICByZW1vdmUkJDEoZXZlbnQubmFtZSwgb2xkT25bbmFtZV0sIGV2ZW50LmNhcHR1cmUpO1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gbWVyZ2VWTm9kZUhvb2sgKGRlZiwgaG9va0tleSwgaG9vaykge1xuICBpZiAoZGVmIGluc3RhbmNlb2YgVk5vZGUpIHtcbiAgICBkZWYgPSBkZWYuZGF0YS5ob29rIHx8IChkZWYuZGF0YS5ob29rID0ge30pO1xuICB9XG4gIHZhciBpbnZva2VyO1xuICB2YXIgb2xkSG9vayA9IGRlZltob29rS2V5XTtcblxuICBmdW5jdGlvbiB3cmFwcGVkSG9vayAoKSB7XG4gICAgaG9vay5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIC8vIGltcG9ydGFudDogcmVtb3ZlIG1lcmdlZCBob29rIHRvIGVuc3VyZSBpdCdzIGNhbGxlZCBvbmx5IG9uY2VcbiAgICAvLyBhbmQgcHJldmVudCBtZW1vcnkgbGVha1xuICAgIHJlbW92ZShpbnZva2VyLmZucywgd3JhcHBlZEhvb2spO1xuICB9XG5cbiAgaWYgKGlzVW5kZWYob2xkSG9vaykpIHtcbiAgICAvLyBubyBleGlzdGluZyBob29rXG4gICAgaW52b2tlciA9IGNyZWF0ZUZuSW52b2tlcihbd3JhcHBlZEhvb2tdKTtcbiAgfSBlbHNlIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoaXNEZWYob2xkSG9vay5mbnMpICYmIGlzVHJ1ZShvbGRIb29rLm1lcmdlZCkpIHtcbiAgICAgIC8vIGFscmVhZHkgYSBtZXJnZWQgaW52b2tlclxuICAgICAgaW52b2tlciA9IG9sZEhvb2s7XG4gICAgICBpbnZva2VyLmZucy5wdXNoKHdyYXBwZWRIb29rKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZXhpc3RpbmcgcGxhaW4gaG9va1xuICAgICAgaW52b2tlciA9IGNyZWF0ZUZuSW52b2tlcihbb2xkSG9vaywgd3JhcHBlZEhvb2tdKTtcbiAgICB9XG4gIH1cblxuICBpbnZva2VyLm1lcmdlZCA9IHRydWU7XG4gIGRlZltob29rS2V5XSA9IGludm9rZXI7XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBleHRyYWN0UHJvcHNGcm9tVk5vZGVEYXRhIChcbiAgZGF0YSxcbiAgQ3RvcixcbiAgdGFnXG4pIHtcbiAgLy8gd2UgYXJlIG9ubHkgZXh0cmFjdGluZyByYXcgdmFsdWVzIGhlcmUuXG4gIC8vIHZhbGlkYXRpb24gYW5kIGRlZmF1bHQgdmFsdWVzIGFyZSBoYW5kbGVkIGluIHRoZSBjaGlsZFxuICAvLyBjb21wb25lbnQgaXRzZWxmLlxuICB2YXIgcHJvcE9wdGlvbnMgPSBDdG9yLm9wdGlvbnMucHJvcHM7XG4gIGlmIChpc1VuZGVmKHByb3BPcHRpb25zKSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciByZXMgPSB7fTtcbiAgdmFyIGF0dHJzID0gZGF0YS5hdHRycztcbiAgdmFyIHByb3BzID0gZGF0YS5wcm9wcztcbiAgaWYgKGlzRGVmKGF0dHJzKSB8fCBpc0RlZihwcm9wcykpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcE9wdGlvbnMpIHtcbiAgICAgIHZhciBhbHRLZXkgPSBoeXBoZW5hdGUoa2V5KTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHZhciBrZXlJbkxvd2VyQ2FzZSA9IGtleS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAoXG4gICAgICAgICAga2V5ICE9PSBrZXlJbkxvd2VyQ2FzZSAmJlxuICAgICAgICAgIGF0dHJzICYmIGhhc093bihhdHRycywga2V5SW5Mb3dlckNhc2UpXG4gICAgICAgICkge1xuICAgICAgICAgIHRpcChcbiAgICAgICAgICAgIFwiUHJvcCBcXFwiXCIgKyBrZXlJbkxvd2VyQ2FzZSArIFwiXFxcIiBpcyBwYXNzZWQgdG8gY29tcG9uZW50IFwiICtcbiAgICAgICAgICAgIChmb3JtYXRDb21wb25lbnROYW1lKHRhZyB8fCBDdG9yKSkgKyBcIiwgYnV0IHRoZSBkZWNsYXJlZCBwcm9wIG5hbWUgaXNcIiArXG4gICAgICAgICAgICBcIiBcXFwiXCIgKyBrZXkgKyBcIlxcXCIuIFwiICtcbiAgICAgICAgICAgIFwiTm90ZSB0aGF0IEhUTUwgYXR0cmlidXRlcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZSBhbmQgY2FtZWxDYXNlZCBcIiArXG4gICAgICAgICAgICBcInByb3BzIG5lZWQgdG8gdXNlIHRoZWlyIGtlYmFiLWNhc2UgZXF1aXZhbGVudHMgd2hlbiB1c2luZyBpbi1ET00gXCIgK1xuICAgICAgICAgICAgXCJ0ZW1wbGF0ZXMuIFlvdSBzaG91bGQgcHJvYmFibHkgdXNlIFxcXCJcIiArIGFsdEtleSArIFwiXFxcIiBpbnN0ZWFkIG9mIFxcXCJcIiArIGtleSArIFwiXFxcIi5cIlxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNoZWNrUHJvcChyZXMsIHByb3BzLCBrZXksIGFsdEtleSwgdHJ1ZSkgfHxcbiAgICAgIGNoZWNrUHJvcChyZXMsIGF0dHJzLCBrZXksIGFsdEtleSwgZmFsc2UpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGNoZWNrUHJvcCAoXG4gIHJlcyxcbiAgaGFzaCxcbiAga2V5LFxuICBhbHRLZXksXG4gIHByZXNlcnZlXG4pIHtcbiAgaWYgKGlzRGVmKGhhc2gpKSB7XG4gICAgaWYgKGhhc093bihoYXNoLCBrZXkpKSB7XG4gICAgICByZXNba2V5XSA9IGhhc2hba2V5XTtcbiAgICAgIGlmICghcHJlc2VydmUpIHtcbiAgICAgICAgZGVsZXRlIGhhc2hba2V5XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlXG4gICAgfSBlbHNlIGlmIChoYXNPd24oaGFzaCwgYWx0S2V5KSkge1xuICAgICAgcmVzW2tleV0gPSBoYXNoW2FsdEtleV07XG4gICAgICBpZiAoIXByZXNlcnZlKSB7XG4gICAgICAgIGRlbGV0ZSBoYXNoW2FsdEtleV07XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2Vcbn1cblxuLyogICovXG5cbi8vIFRoZSB0ZW1wbGF0ZSBjb21waWxlciBhdHRlbXB0cyB0byBtaW5pbWl6ZSB0aGUgbmVlZCBmb3Igbm9ybWFsaXphdGlvbiBieVxuLy8gc3RhdGljYWxseSBhbmFseXppbmcgdGhlIHRlbXBsYXRlIGF0IGNvbXBpbGUgdGltZS5cbi8vXG4vLyBGb3IgcGxhaW4gSFRNTCBtYXJrdXAsIG5vcm1hbGl6YXRpb24gY2FuIGJlIGNvbXBsZXRlbHkgc2tpcHBlZCBiZWNhdXNlIHRoZVxuLy8gZ2VuZXJhdGVkIHJlbmRlciBmdW5jdGlvbiBpcyBndWFyYW50ZWVkIHRvIHJldHVybiBBcnJheTxWTm9kZT4uIFRoZXJlIGFyZVxuLy8gdHdvIGNhc2VzIHdoZXJlIGV4dHJhIG5vcm1hbGl6YXRpb24gaXMgbmVlZGVkOlxuXG4vLyAxLiBXaGVuIHRoZSBjaGlsZHJlbiBjb250YWlucyBjb21wb25lbnRzIC0gYmVjYXVzZSBhIGZ1bmN0aW9uYWwgY29tcG9uZW50XG4vLyBtYXkgcmV0dXJuIGFuIEFycmF5IGluc3RlYWQgb2YgYSBzaW5nbGUgcm9vdC4gSW4gdGhpcyBjYXNlLCBqdXN0IGEgc2ltcGxlXG4vLyBub3JtYWxpemF0aW9uIGlzIG5lZWRlZCAtIGlmIGFueSBjaGlsZCBpcyBhbiBBcnJheSwgd2UgZmxhdHRlbiB0aGUgd2hvbGVcbi8vIHRoaW5nIHdpdGggQXJyYXkucHJvdG90eXBlLmNvbmNhdC4gSXQgaXMgZ3VhcmFudGVlZCB0byBiZSBvbmx5IDEtbGV2ZWwgZGVlcFxuLy8gYmVjYXVzZSBmdW5jdGlvbmFsIGNvbXBvbmVudHMgYWxyZWFkeSBub3JtYWxpemUgdGhlaXIgb3duIGNoaWxkcmVuLlxuZnVuY3Rpb24gc2ltcGxlTm9ybWFsaXplQ2hpbGRyZW4gKGNoaWxkcmVuKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbltpXSkpIHtcbiAgICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuY29uY2F0LmFwcGx5KFtdLCBjaGlsZHJlbilcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNoaWxkcmVuXG59XG5cbi8vIDIuIFdoZW4gdGhlIGNoaWxkcmVuIGNvbnRhaW5zIGNvbnN0cnVjdHMgdGhhdCBhbHdheXMgZ2VuZXJhdGVkIG5lc3RlZCBBcnJheXMsXG4vLyBlLmcuIDx0ZW1wbGF0ZT4sIDxzbG90Piwgdi1mb3IsIG9yIHdoZW4gdGhlIGNoaWxkcmVuIGlzIHByb3ZpZGVkIGJ5IHVzZXJcbi8vIHdpdGggaGFuZC13cml0dGVuIHJlbmRlciBmdW5jdGlvbnMgLyBKU1guIEluIHN1Y2ggY2FzZXMgYSBmdWxsIG5vcm1hbGl6YXRpb25cbi8vIGlzIG5lZWRlZCB0byBjYXRlciB0byBhbGwgcG9zc2libGUgdHlwZXMgb2YgY2hpbGRyZW4gdmFsdWVzLlxuZnVuY3Rpb24gbm9ybWFsaXplQ2hpbGRyZW4gKGNoaWxkcmVuKSB7XG4gIHJldHVybiBpc1ByaW1pdGl2ZShjaGlsZHJlbilcbiAgICA/IFtjcmVhdGVUZXh0Vk5vZGUoY2hpbGRyZW4pXVxuICAgIDogQXJyYXkuaXNBcnJheShjaGlsZHJlbilcbiAgICAgID8gbm9ybWFsaXplQXJyYXlDaGlsZHJlbihjaGlsZHJlbilcbiAgICAgIDogdW5kZWZpbmVkXG59XG5cbmZ1bmN0aW9uIGlzVGV4dE5vZGUgKG5vZGUpIHtcbiAgcmV0dXJuIGlzRGVmKG5vZGUpICYmIGlzRGVmKG5vZGUudGV4dCkgJiYgaXNGYWxzZShub2RlLmlzQ29tbWVudClcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplQXJyYXlDaGlsZHJlbiAoY2hpbGRyZW4sIG5lc3RlZEluZGV4KSB7XG4gIHZhciByZXMgPSBbXTtcbiAgdmFyIGksIGMsIGxhc3RJbmRleCwgbGFzdDtcbiAgZm9yIChpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgYyA9IGNoaWxkcmVuW2ldO1xuICAgIGlmIChpc1VuZGVmKGMpIHx8IHR5cGVvZiBjID09PSAnYm9vbGVhbicpIHsgY29udGludWUgfVxuICAgIGxhc3RJbmRleCA9IHJlcy5sZW5ndGggLSAxO1xuICAgIGxhc3QgPSByZXNbbGFzdEluZGV4XTtcbiAgICAvLyAgbmVzdGVkXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYykpIHtcbiAgICAgIGlmIChjLmxlbmd0aCA+IDApIHtcbiAgICAgICAgYyA9IG5vcm1hbGl6ZUFycmF5Q2hpbGRyZW4oYywgKChuZXN0ZWRJbmRleCB8fCAnJykgKyBcIl9cIiArIGkpKTtcbiAgICAgICAgLy8gbWVyZ2UgYWRqYWNlbnQgdGV4dCBub2Rlc1xuICAgICAgICBpZiAoaXNUZXh0Tm9kZShjWzBdKSAmJiBpc1RleHROb2RlKGxhc3QpKSB7XG4gICAgICAgICAgcmVzW2xhc3RJbmRleF0gPSBjcmVhdGVUZXh0Vk5vZGUobGFzdC50ZXh0ICsgKGNbMF0pLnRleHQpO1xuICAgICAgICAgIGMuc2hpZnQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXMucHVzaC5hcHBseShyZXMsIGMpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNQcmltaXRpdmUoYykpIHtcbiAgICAgIGlmIChpc1RleHROb2RlKGxhc3QpKSB7XG4gICAgICAgIC8vIG1lcmdlIGFkamFjZW50IHRleHQgbm9kZXNcbiAgICAgICAgLy8gdGhpcyBpcyBuZWNlc3NhcnkgZm9yIFNTUiBoeWRyYXRpb24gYmVjYXVzZSB0ZXh0IG5vZGVzIGFyZVxuICAgICAgICAvLyBlc3NlbnRpYWxseSBtZXJnZWQgd2hlbiByZW5kZXJlZCB0byBIVE1MIHN0cmluZ3NcbiAgICAgICAgcmVzW2xhc3RJbmRleF0gPSBjcmVhdGVUZXh0Vk5vZGUobGFzdC50ZXh0ICsgYyk7XG4gICAgICB9IGVsc2UgaWYgKGMgIT09ICcnKSB7XG4gICAgICAgIC8vIGNvbnZlcnQgcHJpbWl0aXZlIHRvIHZub2RlXG4gICAgICAgIHJlcy5wdXNoKGNyZWF0ZVRleHRWTm9kZShjKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChpc1RleHROb2RlKGMpICYmIGlzVGV4dE5vZGUobGFzdCkpIHtcbiAgICAgICAgLy8gbWVyZ2UgYWRqYWNlbnQgdGV4dCBub2Rlc1xuICAgICAgICByZXNbbGFzdEluZGV4XSA9IGNyZWF0ZVRleHRWTm9kZShsYXN0LnRleHQgKyBjLnRleHQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZGVmYXVsdCBrZXkgZm9yIG5lc3RlZCBhcnJheSBjaGlsZHJlbiAobGlrZWx5IGdlbmVyYXRlZCBieSB2LWZvcilcbiAgICAgICAgaWYgKGlzVHJ1ZShjaGlsZHJlbi5faXNWTGlzdCkgJiZcbiAgICAgICAgICBpc0RlZihjLnRhZykgJiZcbiAgICAgICAgICBpc1VuZGVmKGMua2V5KSAmJlxuICAgICAgICAgIGlzRGVmKG5lc3RlZEluZGV4KSkge1xuICAgICAgICAgIGMua2V5ID0gXCJfX3ZsaXN0XCIgKyBuZXN0ZWRJbmRleCArIFwiX1wiICsgaSArIFwiX19cIjtcbiAgICAgICAgfVxuICAgICAgICByZXMucHVzaChjKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gZW5zdXJlQ3RvciAoY29tcCwgYmFzZSkge1xuICBpZiAoXG4gICAgY29tcC5fX2VzTW9kdWxlIHx8XG4gICAgKGhhc1N5bWJvbCAmJiBjb21wW1N5bWJvbC50b1N0cmluZ1RhZ10gPT09ICdNb2R1bGUnKVxuICApIHtcbiAgICBjb21wID0gY29tcC5kZWZhdWx0O1xuICB9XG4gIHJldHVybiBpc09iamVjdChjb21wKVxuICAgID8gYmFzZS5leHRlbmQoY29tcClcbiAgICA6IGNvbXBcbn1cblxuZnVuY3Rpb24gY3JlYXRlQXN5bmNQbGFjZWhvbGRlciAoXG4gIGZhY3RvcnksXG4gIGRhdGEsXG4gIGNvbnRleHQsXG4gIGNoaWxkcmVuLFxuICB0YWdcbikge1xuICB2YXIgbm9kZSA9IGNyZWF0ZUVtcHR5Vk5vZGUoKTtcbiAgbm9kZS5hc3luY0ZhY3RvcnkgPSBmYWN0b3J5O1xuICBub2RlLmFzeW5jTWV0YSA9IHsgZGF0YTogZGF0YSwgY29udGV4dDogY29udGV4dCwgY2hpbGRyZW46IGNoaWxkcmVuLCB0YWc6IHRhZyB9O1xuICByZXR1cm4gbm9kZVxufVxuXG5mdW5jdGlvbiByZXNvbHZlQXN5bmNDb21wb25lbnQgKFxuICBmYWN0b3J5LFxuICBiYXNlQ3RvcixcbiAgY29udGV4dFxuKSB7XG4gIGlmIChpc1RydWUoZmFjdG9yeS5lcnJvcikgJiYgaXNEZWYoZmFjdG9yeS5lcnJvckNvbXApKSB7XG4gICAgcmV0dXJuIGZhY3RvcnkuZXJyb3JDb21wXG4gIH1cblxuICBpZiAoaXNEZWYoZmFjdG9yeS5yZXNvbHZlZCkpIHtcbiAgICByZXR1cm4gZmFjdG9yeS5yZXNvbHZlZFxuICB9XG5cbiAgaWYgKGlzVHJ1ZShmYWN0b3J5LmxvYWRpbmcpICYmIGlzRGVmKGZhY3RvcnkubG9hZGluZ0NvbXApKSB7XG4gICAgcmV0dXJuIGZhY3RvcnkubG9hZGluZ0NvbXBcbiAgfVxuXG4gIGlmIChpc0RlZihmYWN0b3J5LmNvbnRleHRzKSkge1xuICAgIC8vIGFscmVhZHkgcGVuZGluZ1xuICAgIGZhY3RvcnkuY29udGV4dHMucHVzaChjb250ZXh0KTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgY29udGV4dHMgPSBmYWN0b3J5LmNvbnRleHRzID0gW2NvbnRleHRdO1xuICAgIHZhciBzeW5jID0gdHJ1ZTtcblxuICAgIHZhciBmb3JjZVJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gY29udGV4dHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGNvbnRleHRzW2ldLiRmb3JjZVVwZGF0ZSgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgcmVzb2x2ZSA9IG9uY2UoZnVuY3Rpb24gKHJlcykge1xuICAgICAgLy8gY2FjaGUgcmVzb2x2ZWRcbiAgICAgIGZhY3RvcnkucmVzb2x2ZWQgPSBlbnN1cmVDdG9yKHJlcywgYmFzZUN0b3IpO1xuICAgICAgLy8gaW52b2tlIGNhbGxiYWNrcyBvbmx5IGlmIHRoaXMgaXMgbm90IGEgc3luY2hyb25vdXMgcmVzb2x2ZVxuICAgICAgLy8gKGFzeW5jIHJlc29sdmVzIGFyZSBzaGltbWVkIGFzIHN5bmNocm9ub3VzIGR1cmluZyBTU1IpXG4gICAgICBpZiAoIXN5bmMpIHtcbiAgICAgICAgZm9yY2VSZW5kZXIoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHZhciByZWplY3QgPSBvbmNlKGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgXCJGYWlsZWQgdG8gcmVzb2x2ZSBhc3luYyBjb21wb25lbnQ6IFwiICsgKFN0cmluZyhmYWN0b3J5KSkgK1xuICAgICAgICAocmVhc29uID8gKFwiXFxuUmVhc29uOiBcIiArIHJlYXNvbikgOiAnJylcbiAgICAgICk7XG4gICAgICBpZiAoaXNEZWYoZmFjdG9yeS5lcnJvckNvbXApKSB7XG4gICAgICAgIGZhY3RvcnkuZXJyb3IgPSB0cnVlO1xuICAgICAgICBmb3JjZVJlbmRlcigpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdmFyIHJlcyA9IGZhY3RvcnkocmVzb2x2ZSwgcmVqZWN0KTtcblxuICAgIGlmIChpc09iamVjdChyZXMpKSB7XG4gICAgICBpZiAodHlwZW9mIHJlcy50aGVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIC8vICgpID0+IFByb21pc2VcbiAgICAgICAgaWYgKGlzVW5kZWYoZmFjdG9yeS5yZXNvbHZlZCkpIHtcbiAgICAgICAgICByZXMudGhlbihyZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGlzRGVmKHJlcy5jb21wb25lbnQpICYmIHR5cGVvZiByZXMuY29tcG9uZW50LnRoZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmVzLmNvbXBvbmVudC50aGVuKHJlc29sdmUsIHJlamVjdCk7XG5cbiAgICAgICAgaWYgKGlzRGVmKHJlcy5lcnJvcikpIHtcbiAgICAgICAgICBmYWN0b3J5LmVycm9yQ29tcCA9IGVuc3VyZUN0b3IocmVzLmVycm9yLCBiYXNlQ3Rvcik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNEZWYocmVzLmxvYWRpbmcpKSB7XG4gICAgICAgICAgZmFjdG9yeS5sb2FkaW5nQ29tcCA9IGVuc3VyZUN0b3IocmVzLmxvYWRpbmcsIGJhc2VDdG9yKTtcbiAgICAgICAgICBpZiAocmVzLmRlbGF5ID09PSAwKSB7XG4gICAgICAgICAgICBmYWN0b3J5LmxvYWRpbmcgPSB0cnVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgaWYgKGlzVW5kZWYoZmFjdG9yeS5yZXNvbHZlZCkgJiYgaXNVbmRlZihmYWN0b3J5LmVycm9yKSkge1xuICAgICAgICAgICAgICAgIGZhY3RvcnkubG9hZGluZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgZm9yY2VSZW5kZXIoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgcmVzLmRlbGF5IHx8IDIwMCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzRGVmKHJlcy50aW1lb3V0KSkge1xuICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGlzVW5kZWYoZmFjdG9yeS5yZXNvbHZlZCkpIHtcbiAgICAgICAgICAgICAgcmVqZWN0KFxuICAgICAgICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbidcbiAgICAgICAgICAgICAgICAgID8gKFwidGltZW91dCAoXCIgKyAocmVzLnRpbWVvdXQpICsgXCJtcylcIilcbiAgICAgICAgICAgICAgICAgIDogbnVsbFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIHJlcy50aW1lb3V0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHN5bmMgPSBmYWxzZTtcbiAgICAvLyByZXR1cm4gaW4gY2FzZSByZXNvbHZlZCBzeW5jaHJvbm91c2x5XG4gICAgcmV0dXJuIGZhY3RvcnkubG9hZGluZ1xuICAgICAgPyBmYWN0b3J5LmxvYWRpbmdDb21wXG4gICAgICA6IGZhY3RvcnkucmVzb2x2ZWRcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaXNBc3luY1BsYWNlaG9sZGVyIChub2RlKSB7XG4gIHJldHVybiBub2RlLmlzQ29tbWVudCAmJiBub2RlLmFzeW5jRmFjdG9yeVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gZ2V0Rmlyc3RDb21wb25lbnRDaGlsZCAoY2hpbGRyZW4pIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGMgPSBjaGlsZHJlbltpXTtcbiAgICAgIGlmIChpc0RlZihjKSAmJiAoaXNEZWYoYy5jb21wb25lbnRPcHRpb25zKSB8fCBpc0FzeW5jUGxhY2Vob2xkZXIoYykpKSB7XG4gICAgICAgIHJldHVybiBjXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdEV2ZW50cyAodm0pIHtcbiAgdm0uX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHZtLl9oYXNIb29rRXZlbnQgPSBmYWxzZTtcbiAgLy8gaW5pdCBwYXJlbnQgYXR0YWNoZWQgZXZlbnRzXG4gIHZhciBsaXN0ZW5lcnMgPSB2bS4kb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzO1xuICBpZiAobGlzdGVuZXJzKSB7XG4gICAgdXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzKHZtLCBsaXN0ZW5lcnMpO1xuICB9XG59XG5cbnZhciB0YXJnZXQ7XG5cbmZ1bmN0aW9uIGFkZCAoZXZlbnQsIGZuLCBvbmNlKSB7XG4gIGlmIChvbmNlKSB7XG4gICAgdGFyZ2V0LiRvbmNlKGV2ZW50LCBmbik7XG4gIH0gZWxzZSB7XG4gICAgdGFyZ2V0LiRvbihldmVudCwgZm4pO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSQxIChldmVudCwgZm4pIHtcbiAgdGFyZ2V0LiRvZmYoZXZlbnQsIGZuKTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzIChcbiAgdm0sXG4gIGxpc3RlbmVycyxcbiAgb2xkTGlzdGVuZXJzXG4pIHtcbiAgdGFyZ2V0ID0gdm07XG4gIHVwZGF0ZUxpc3RlbmVycyhsaXN0ZW5lcnMsIG9sZExpc3RlbmVycyB8fCB7fSwgYWRkLCByZW1vdmUkMSwgdm0pO1xuICB0YXJnZXQgPSB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGV2ZW50c01peGluIChWdWUpIHtcbiAgdmFyIGhvb2tSRSA9IC9eaG9vazovO1xuICBWdWUucHJvdG90eXBlLiRvbiA9IGZ1bmN0aW9uIChldmVudCwgZm4pIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZXZlbnQpKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGV2ZW50Lmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICB0aGlzJDEuJG9uKGV2ZW50W2ldLCBmbik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICh2bS5fZXZlbnRzW2V2ZW50XSB8fCAodm0uX2V2ZW50c1tldmVudF0gPSBbXSkpLnB1c2goZm4pO1xuICAgICAgLy8gb3B0aW1pemUgaG9vazpldmVudCBjb3N0IGJ5IHVzaW5nIGEgYm9vbGVhbiBmbGFnIG1hcmtlZCBhdCByZWdpc3RyYXRpb25cbiAgICAgIC8vIGluc3RlYWQgb2YgYSBoYXNoIGxvb2t1cFxuICAgICAgaWYgKGhvb2tSRS50ZXN0KGV2ZW50KSkge1xuICAgICAgICB2bS5faGFzSG9va0V2ZW50ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZtXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kb25jZSA9IGZ1bmN0aW9uIChldmVudCwgZm4pIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGZ1bmN0aW9uIG9uICgpIHtcbiAgICAgIHZtLiRvZmYoZXZlbnQsIG9uKTtcbiAgICAgIGZuLmFwcGx5KHZtLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgICBvbi5mbiA9IGZuO1xuICAgIHZtLiRvbihldmVudCwgb24pO1xuICAgIHJldHVybiB2bVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJG9mZiA9IGZ1bmN0aW9uIChldmVudCwgZm4pIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgLy8gYWxsXG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICB2bS5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgIHJldHVybiB2bVxuICAgIH1cbiAgICAvLyBhcnJheSBvZiBldmVudHNcbiAgICBpZiAoQXJyYXkuaXNBcnJheShldmVudCkpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gZXZlbnQubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHRoaXMkMS4kb2ZmKGV2ZW50W2ldLCBmbik7XG4gICAgICB9XG4gICAgICByZXR1cm4gdm1cbiAgICB9XG4gICAgLy8gc3BlY2lmaWMgZXZlbnRcbiAgICB2YXIgY2JzID0gdm0uX2V2ZW50c1tldmVudF07XG4gICAgaWYgKCFjYnMpIHtcbiAgICAgIHJldHVybiB2bVxuICAgIH1cbiAgICBpZiAoIWZuKSB7XG4gICAgICB2bS5fZXZlbnRzW2V2ZW50XSA9IG51bGw7XG4gICAgICByZXR1cm4gdm1cbiAgICB9XG4gICAgaWYgKGZuKSB7XG4gICAgICAvLyBzcGVjaWZpYyBoYW5kbGVyXG4gICAgICB2YXIgY2I7XG4gICAgICB2YXIgaSQxID0gY2JzLmxlbmd0aDtcbiAgICAgIHdoaWxlIChpJDEtLSkge1xuICAgICAgICBjYiA9IGNic1tpJDFdO1xuICAgICAgICBpZiAoY2IgPT09IGZuIHx8IGNiLmZuID09PSBmbikge1xuICAgICAgICAgIGNicy5zcGxpY2UoaSQxLCAxKTtcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2bVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJGVtaXQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgbG93ZXJDYXNlRXZlbnQgPSBldmVudC50b0xvd2VyQ2FzZSgpO1xuICAgICAgaWYgKGxvd2VyQ2FzZUV2ZW50ICE9PSBldmVudCAmJiB2bS5fZXZlbnRzW2xvd2VyQ2FzZUV2ZW50XSkge1xuICAgICAgICB0aXAoXG4gICAgICAgICAgXCJFdmVudCBcXFwiXCIgKyBsb3dlckNhc2VFdmVudCArIFwiXFxcIiBpcyBlbWl0dGVkIGluIGNvbXBvbmVudCBcIiArXG4gICAgICAgICAgKGZvcm1hdENvbXBvbmVudE5hbWUodm0pKSArIFwiIGJ1dCB0aGUgaGFuZGxlciBpcyByZWdpc3RlcmVkIGZvciBcXFwiXCIgKyBldmVudCArIFwiXFxcIi4gXCIgK1xuICAgICAgICAgIFwiTm90ZSB0aGF0IEhUTUwgYXR0cmlidXRlcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZSBhbmQgeW91IGNhbm5vdCB1c2UgXCIgK1xuICAgICAgICAgIFwidi1vbiB0byBsaXN0ZW4gdG8gY2FtZWxDYXNlIGV2ZW50cyB3aGVuIHVzaW5nIGluLURPTSB0ZW1wbGF0ZXMuIFwiICtcbiAgICAgICAgICBcIllvdSBzaG91bGQgcHJvYmFibHkgdXNlIFxcXCJcIiArIChoeXBoZW5hdGUoZXZlbnQpKSArIFwiXFxcIiBpbnN0ZWFkIG9mIFxcXCJcIiArIGV2ZW50ICsgXCJcXFwiLlwiXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBjYnMgPSB2bS5fZXZlbnRzW2V2ZW50XTtcbiAgICBpZiAoY2JzKSB7XG4gICAgICBjYnMgPSBjYnMubGVuZ3RoID4gMSA/IHRvQXJyYXkoY2JzKSA6IGNicztcbiAgICAgIHZhciBhcmdzID0gdG9BcnJheShhcmd1bWVudHMsIDEpO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBjYnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY2JzW2ldLmFwcGx5KHZtLCBhcmdzKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGhhbmRsZUVycm9yKGUsIHZtLCAoXCJldmVudCBoYW5kbGVyIGZvciBcXFwiXCIgKyBldmVudCArIFwiXFxcIlwiKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZtXG4gIH07XG59XG5cbi8qICAqL1xuXG5cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVzb2x2aW5nIHJhdyBjaGlsZHJlbiBWTm9kZXMgaW50byBhIHNsb3Qgb2JqZWN0LlxuICovXG5mdW5jdGlvbiByZXNvbHZlU2xvdHMgKFxuICBjaGlsZHJlbixcbiAgY29udGV4dFxuKSB7XG4gIHZhciBzbG90cyA9IHt9O1xuICBpZiAoIWNoaWxkcmVuKSB7XG4gICAgcmV0dXJuIHNsb3RzXG4gIH1cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICB2YXIgY2hpbGQgPSBjaGlsZHJlbltpXTtcbiAgICB2YXIgZGF0YSA9IGNoaWxkLmRhdGE7XG4gICAgLy8gcmVtb3ZlIHNsb3QgYXR0cmlidXRlIGlmIHRoZSBub2RlIGlzIHJlc29sdmVkIGFzIGEgVnVlIHNsb3Qgbm9kZVxuICAgIGlmIChkYXRhICYmIGRhdGEuYXR0cnMgJiYgZGF0YS5hdHRycy5zbG90KSB7XG4gICAgICBkZWxldGUgZGF0YS5hdHRycy5zbG90O1xuICAgIH1cbiAgICAvLyBuYW1lZCBzbG90cyBzaG91bGQgb25seSBiZSByZXNwZWN0ZWQgaWYgdGhlIHZub2RlIHdhcyByZW5kZXJlZCBpbiB0aGVcbiAgICAvLyBzYW1lIGNvbnRleHQuXG4gICAgaWYgKChjaGlsZC5jb250ZXh0ID09PSBjb250ZXh0IHx8IGNoaWxkLmZuQ29udGV4dCA9PT0gY29udGV4dCkgJiZcbiAgICAgIGRhdGEgJiYgZGF0YS5zbG90ICE9IG51bGxcbiAgICApIHtcbiAgICAgIHZhciBuYW1lID0gZGF0YS5zbG90O1xuICAgICAgdmFyIHNsb3QgPSAoc2xvdHNbbmFtZV0gfHwgKHNsb3RzW25hbWVdID0gW10pKTtcbiAgICAgIGlmIChjaGlsZC50YWcgPT09ICd0ZW1wbGF0ZScpIHtcbiAgICAgICAgc2xvdC5wdXNoLmFwcGx5KHNsb3QsIGNoaWxkLmNoaWxkcmVuIHx8IFtdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNsb3QucHVzaChjaGlsZCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIChzbG90cy5kZWZhdWx0IHx8IChzbG90cy5kZWZhdWx0ID0gW10pKS5wdXNoKGNoaWxkKTtcbiAgICB9XG4gIH1cbiAgLy8gaWdub3JlIHNsb3RzIHRoYXQgY29udGFpbnMgb25seSB3aGl0ZXNwYWNlXG4gIGZvciAodmFyIG5hbWUkMSBpbiBzbG90cykge1xuICAgIGlmIChzbG90c1tuYW1lJDFdLmV2ZXJ5KGlzV2hpdGVzcGFjZSkpIHtcbiAgICAgIGRlbGV0ZSBzbG90c1tuYW1lJDFdO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc2xvdHNcbn1cblxuZnVuY3Rpb24gaXNXaGl0ZXNwYWNlIChub2RlKSB7XG4gIHJldHVybiAobm9kZS5pc0NvbW1lbnQgJiYgIW5vZGUuYXN5bmNGYWN0b3J5KSB8fCBub2RlLnRleHQgPT09ICcgJ1xufVxuXG5mdW5jdGlvbiByZXNvbHZlU2NvcGVkU2xvdHMgKFxuICBmbnMsIC8vIHNlZSBmbG93L3Zub2RlXG4gIHJlc1xuKSB7XG4gIHJlcyA9IHJlcyB8fCB7fTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBmbnMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShmbnNbaV0pKSB7XG4gICAgICByZXNvbHZlU2NvcGVkU2xvdHMoZm5zW2ldLCByZXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXNbZm5zW2ldLmtleV0gPSBmbnNbaV0uZm47XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cbnZhciBhY3RpdmVJbnN0YW5jZSA9IG51bGw7XG52YXIgaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ID0gZmFsc2U7XG5cbmZ1bmN0aW9uIGluaXRMaWZlY3ljbGUgKHZtKSB7XG4gIHZhciBvcHRpb25zID0gdm0uJG9wdGlvbnM7XG5cbiAgLy8gbG9jYXRlIGZpcnN0IG5vbi1hYnN0cmFjdCBwYXJlbnRcbiAgdmFyIHBhcmVudCA9IG9wdGlvbnMucGFyZW50O1xuICBpZiAocGFyZW50ICYmICFvcHRpb25zLmFic3RyYWN0KSB7XG4gICAgd2hpbGUgKHBhcmVudC4kb3B0aW9ucy5hYnN0cmFjdCAmJiBwYXJlbnQuJHBhcmVudCkge1xuICAgICAgcGFyZW50ID0gcGFyZW50LiRwYXJlbnQ7XG4gICAgfVxuICAgIHBhcmVudC4kY2hpbGRyZW4ucHVzaCh2bSk7XG4gIH1cblxuICB2bS4kcGFyZW50ID0gcGFyZW50O1xuICB2bS4kcm9vdCA9IHBhcmVudCA/IHBhcmVudC4kcm9vdCA6IHZtO1xuXG4gIHZtLiRjaGlsZHJlbiA9IFtdO1xuICB2bS4kcmVmcyA9IHt9O1xuXG4gIHZtLl93YXRjaGVyID0gbnVsbDtcbiAgdm0uX2luYWN0aXZlID0gbnVsbDtcbiAgdm0uX2RpcmVjdEluYWN0aXZlID0gZmFsc2U7XG4gIHZtLl9pc01vdW50ZWQgPSBmYWxzZTtcbiAgdm0uX2lzRGVzdHJveWVkID0gZmFsc2U7XG4gIHZtLl9pc0JlaW5nRGVzdHJveWVkID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGxpZmVjeWNsZU1peGluIChWdWUpIHtcbiAgVnVlLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKHZub2RlLCBoeWRyYXRpbmcpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmICh2bS5faXNNb3VudGVkKSB7XG4gICAgICBjYWxsSG9vayh2bSwgJ2JlZm9yZVVwZGF0ZScpO1xuICAgIH1cbiAgICB2YXIgcHJldkVsID0gdm0uJGVsO1xuICAgIHZhciBwcmV2Vm5vZGUgPSB2bS5fdm5vZGU7XG4gICAgdmFyIHByZXZBY3RpdmVJbnN0YW5jZSA9IGFjdGl2ZUluc3RhbmNlO1xuICAgIGFjdGl2ZUluc3RhbmNlID0gdm07XG4gICAgdm0uX3Zub2RlID0gdm5vZGU7XG4gICAgLy8gVnVlLnByb3RvdHlwZS5fX3BhdGNoX18gaXMgaW5qZWN0ZWQgaW4gZW50cnkgcG9pbnRzXG4gICAgLy8gYmFzZWQgb24gdGhlIHJlbmRlcmluZyBiYWNrZW5kIHVzZWQuXG4gICAgaWYgKCFwcmV2Vm5vZGUpIHtcbiAgICAgIC8vIGluaXRpYWwgcmVuZGVyXG4gICAgICB2bS4kZWwgPSB2bS5fX3BhdGNoX18oXG4gICAgICAgIHZtLiRlbCwgdm5vZGUsIGh5ZHJhdGluZywgZmFsc2UgLyogcmVtb3ZlT25seSAqLyxcbiAgICAgICAgdm0uJG9wdGlvbnMuX3BhcmVudEVsbSxcbiAgICAgICAgdm0uJG9wdGlvbnMuX3JlZkVsbVxuICAgICAgKTtcbiAgICAgIC8vIG5vIG5lZWQgZm9yIHRoZSByZWYgbm9kZXMgYWZ0ZXIgaW5pdGlhbCBwYXRjaFxuICAgICAgLy8gdGhpcyBwcmV2ZW50cyBrZWVwaW5nIGEgZGV0YWNoZWQgRE9NIHRyZWUgaW4gbWVtb3J5ICgjNTg1MSlcbiAgICAgIHZtLiRvcHRpb25zLl9wYXJlbnRFbG0gPSB2bS4kb3B0aW9ucy5fcmVmRWxtID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdXBkYXRlc1xuICAgICAgdm0uJGVsID0gdm0uX19wYXRjaF9fKHByZXZWbm9kZSwgdm5vZGUpO1xuICAgIH1cbiAgICBhY3RpdmVJbnN0YW5jZSA9IHByZXZBY3RpdmVJbnN0YW5jZTtcbiAgICAvLyB1cGRhdGUgX192dWVfXyByZWZlcmVuY2VcbiAgICBpZiAocHJldkVsKSB7XG4gICAgICBwcmV2RWwuX192dWVfXyA9IG51bGw7XG4gICAgfVxuICAgIGlmICh2bS4kZWwpIHtcbiAgICAgIHZtLiRlbC5fX3Z1ZV9fID0gdm07XG4gICAgfVxuICAgIC8vIGlmIHBhcmVudCBpcyBhbiBIT0MsIHVwZGF0ZSBpdHMgJGVsIGFzIHdlbGxcbiAgICBpZiAodm0uJHZub2RlICYmIHZtLiRwYXJlbnQgJiYgdm0uJHZub2RlID09PSB2bS4kcGFyZW50Ll92bm9kZSkge1xuICAgICAgdm0uJHBhcmVudC4kZWwgPSB2bS4kZWw7XG4gICAgfVxuICAgIC8vIHVwZGF0ZWQgaG9vayBpcyBjYWxsZWQgYnkgdGhlIHNjaGVkdWxlciB0byBlbnN1cmUgdGhhdCBjaGlsZHJlbiBhcmVcbiAgICAvLyB1cGRhdGVkIGluIGEgcGFyZW50J3MgdXBkYXRlZCBob29rLlxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJGZvcmNlVXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKHZtLl93YXRjaGVyKSB7XG4gICAgICB2bS5fd2F0Y2hlci51cGRhdGUoKTtcbiAgICB9XG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmICh2bS5faXNCZWluZ0Rlc3Ryb3llZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGNhbGxIb29rKHZtLCAnYmVmb3JlRGVzdHJveScpO1xuICAgIHZtLl9pc0JlaW5nRGVzdHJveWVkID0gdHJ1ZTtcbiAgICAvLyByZW1vdmUgc2VsZiBmcm9tIHBhcmVudFxuICAgIHZhciBwYXJlbnQgPSB2bS4kcGFyZW50O1xuICAgIGlmIChwYXJlbnQgJiYgIXBhcmVudC5faXNCZWluZ0Rlc3Ryb3llZCAmJiAhdm0uJG9wdGlvbnMuYWJzdHJhY3QpIHtcbiAgICAgIHJlbW92ZShwYXJlbnQuJGNoaWxkcmVuLCB2bSk7XG4gICAgfVxuICAgIC8vIHRlYXJkb3duIHdhdGNoZXJzXG4gICAgaWYgKHZtLl93YXRjaGVyKSB7XG4gICAgICB2bS5fd2F0Y2hlci50ZWFyZG93bigpO1xuICAgIH1cbiAgICB2YXIgaSA9IHZtLl93YXRjaGVycy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdm0uX3dhdGNoZXJzW2ldLnRlYXJkb3duKCk7XG4gICAgfVxuICAgIC8vIHJlbW92ZSByZWZlcmVuY2UgZnJvbSBkYXRhIG9iXG4gICAgLy8gZnJvemVuIG9iamVjdCBtYXkgbm90IGhhdmUgb2JzZXJ2ZXIuXG4gICAgaWYgKHZtLl9kYXRhLl9fb2JfXykge1xuICAgICAgdm0uX2RhdGEuX19vYl9fLnZtQ291bnQtLTtcbiAgICB9XG4gICAgLy8gY2FsbCB0aGUgbGFzdCBob29rLi4uXG4gICAgdm0uX2lzRGVzdHJveWVkID0gdHJ1ZTtcbiAgICAvLyBpbnZva2UgZGVzdHJveSBob29rcyBvbiBjdXJyZW50IHJlbmRlcmVkIHRyZWVcbiAgICB2bS5fX3BhdGNoX18odm0uX3Zub2RlLCBudWxsKTtcbiAgICAvLyBmaXJlIGRlc3Ryb3llZCBob29rXG4gICAgY2FsbEhvb2sodm0sICdkZXN0cm95ZWQnKTtcbiAgICAvLyB0dXJuIG9mZiBhbGwgaW5zdGFuY2UgbGlzdGVuZXJzLlxuICAgIHZtLiRvZmYoKTtcbiAgICAvLyByZW1vdmUgX192dWVfXyByZWZlcmVuY2VcbiAgICBpZiAodm0uJGVsKSB7XG4gICAgICB2bS4kZWwuX192dWVfXyA9IG51bGw7XG4gICAgfVxuICAgIC8vIHJlbGVhc2UgY2lyY3VsYXIgcmVmZXJlbmNlICgjNjc1OSlcbiAgICBpZiAodm0uJHZub2RlKSB7XG4gICAgICB2bS4kdm5vZGUucGFyZW50ID0gbnVsbDtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIG1vdW50Q29tcG9uZW50IChcbiAgdm0sXG4gIGVsLFxuICBoeWRyYXRpbmdcbikge1xuICB2bS4kZWwgPSBlbDtcbiAgaWYgKCF2bS4kb3B0aW9ucy5yZW5kZXIpIHtcbiAgICB2bS4kb3B0aW9ucy5yZW5kZXIgPSBjcmVhdGVFbXB0eVZOb2RlO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmICgodm0uJG9wdGlvbnMudGVtcGxhdGUgJiYgdm0uJG9wdGlvbnMudGVtcGxhdGUuY2hhckF0KDApICE9PSAnIycpIHx8XG4gICAgICAgIHZtLiRvcHRpb25zLmVsIHx8IGVsKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ1lvdSBhcmUgdXNpbmcgdGhlIHJ1bnRpbWUtb25seSBidWlsZCBvZiBWdWUgd2hlcmUgdGhlIHRlbXBsYXRlICcgK1xuICAgICAgICAgICdjb21waWxlciBpcyBub3QgYXZhaWxhYmxlLiBFaXRoZXIgcHJlLWNvbXBpbGUgdGhlIHRlbXBsYXRlcyBpbnRvICcgK1xuICAgICAgICAgICdyZW5kZXIgZnVuY3Rpb25zLCBvciB1c2UgdGhlIGNvbXBpbGVyLWluY2x1ZGVkIGJ1aWxkLicsXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ0ZhaWxlZCB0byBtb3VudCBjb21wb25lbnQ6IHRlbXBsYXRlIG9yIHJlbmRlciBmdW5jdGlvbiBub3QgZGVmaW5lZC4nLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGNhbGxIb29rKHZtLCAnYmVmb3JlTW91bnQnKTtcblxuICB2YXIgdXBkYXRlQ29tcG9uZW50O1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY29uZmlnLnBlcmZvcm1hbmNlICYmIG1hcmspIHtcbiAgICB1cGRhdGVDb21wb25lbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgbmFtZSA9IHZtLl9uYW1lO1xuICAgICAgdmFyIGlkID0gdm0uX3VpZDtcbiAgICAgIHZhciBzdGFydFRhZyA9IFwidnVlLXBlcmYtc3RhcnQ6XCIgKyBpZDtcbiAgICAgIHZhciBlbmRUYWcgPSBcInZ1ZS1wZXJmLWVuZDpcIiArIGlkO1xuXG4gICAgICBtYXJrKHN0YXJ0VGFnKTtcbiAgICAgIHZhciB2bm9kZSA9IHZtLl9yZW5kZXIoKTtcbiAgICAgIG1hcmsoZW5kVGFnKTtcbiAgICAgIG1lYXN1cmUoKFwidnVlIFwiICsgbmFtZSArIFwiIHJlbmRlclwiKSwgc3RhcnRUYWcsIGVuZFRhZyk7XG5cbiAgICAgIG1hcmsoc3RhcnRUYWcpO1xuICAgICAgdm0uX3VwZGF0ZSh2bm9kZSwgaHlkcmF0aW5nKTtcbiAgICAgIG1hcmsoZW5kVGFnKTtcbiAgICAgIG1lYXN1cmUoKFwidnVlIFwiICsgbmFtZSArIFwiIHBhdGNoXCIpLCBzdGFydFRhZywgZW5kVGFnKTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHVwZGF0ZUNvbXBvbmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZtLl91cGRhdGUodm0uX3JlbmRlcigpLCBoeWRyYXRpbmcpO1xuICAgIH07XG4gIH1cblxuICAvLyB3ZSBzZXQgdGhpcyB0byB2bS5fd2F0Y2hlciBpbnNpZGUgdGhlIHdhdGNoZXIncyBjb25zdHJ1Y3RvclxuICAvLyBzaW5jZSB0aGUgd2F0Y2hlcidzIGluaXRpYWwgcGF0Y2ggbWF5IGNhbGwgJGZvcmNlVXBkYXRlIChlLmcuIGluc2lkZSBjaGlsZFxuICAvLyBjb21wb25lbnQncyBtb3VudGVkIGhvb2spLCB3aGljaCByZWxpZXMgb24gdm0uX3dhdGNoZXIgYmVpbmcgYWxyZWFkeSBkZWZpbmVkXG4gIG5ldyBXYXRjaGVyKHZtLCB1cGRhdGVDb21wb25lbnQsIG5vb3AsIG51bGwsIHRydWUgLyogaXNSZW5kZXJXYXRjaGVyICovKTtcbiAgaHlkcmF0aW5nID0gZmFsc2U7XG5cbiAgLy8gbWFudWFsbHkgbW91bnRlZCBpbnN0YW5jZSwgY2FsbCBtb3VudGVkIG9uIHNlbGZcbiAgLy8gbW91bnRlZCBpcyBjYWxsZWQgZm9yIHJlbmRlci1jcmVhdGVkIGNoaWxkIGNvbXBvbmVudHMgaW4gaXRzIGluc2VydGVkIGhvb2tcbiAgaWYgKHZtLiR2bm9kZSA9PSBudWxsKSB7XG4gICAgdm0uX2lzTW91bnRlZCA9IHRydWU7XG4gICAgY2FsbEhvb2sodm0sICdtb3VudGVkJyk7XG4gIH1cbiAgcmV0dXJuIHZtXG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUNoaWxkQ29tcG9uZW50IChcbiAgdm0sXG4gIHByb3BzRGF0YSxcbiAgbGlzdGVuZXJzLFxuICBwYXJlbnRWbm9kZSxcbiAgcmVuZGVyQ2hpbGRyZW5cbikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCA9IHRydWU7XG4gIH1cblxuICAvLyBkZXRlcm1pbmUgd2hldGhlciBjb21wb25lbnQgaGFzIHNsb3QgY2hpbGRyZW5cbiAgLy8gd2UgbmVlZCB0byBkbyB0aGlzIGJlZm9yZSBvdmVyd3JpdGluZyAkb3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW5cbiAgdmFyIGhhc0NoaWxkcmVuID0gISEoXG4gICAgcmVuZGVyQ2hpbGRyZW4gfHwgICAgICAgICAgICAgICAvLyBoYXMgbmV3IHN0YXRpYyBzbG90c1xuICAgIHZtLiRvcHRpb25zLl9yZW5kZXJDaGlsZHJlbiB8fCAgLy8gaGFzIG9sZCBzdGF0aWMgc2xvdHNcbiAgICBwYXJlbnRWbm9kZS5kYXRhLnNjb3BlZFNsb3RzIHx8IC8vIGhhcyBuZXcgc2NvcGVkIHNsb3RzXG4gICAgdm0uJHNjb3BlZFNsb3RzICE9PSBlbXB0eU9iamVjdCAvLyBoYXMgb2xkIHNjb3BlZCBzbG90c1xuICApO1xuXG4gIHZtLiRvcHRpb25zLl9wYXJlbnRWbm9kZSA9IHBhcmVudFZub2RlO1xuICB2bS4kdm5vZGUgPSBwYXJlbnRWbm9kZTsgLy8gdXBkYXRlIHZtJ3MgcGxhY2Vob2xkZXIgbm9kZSB3aXRob3V0IHJlLXJlbmRlclxuXG4gIGlmICh2bS5fdm5vZGUpIHsgLy8gdXBkYXRlIGNoaWxkIHRyZWUncyBwYXJlbnRcbiAgICB2bS5fdm5vZGUucGFyZW50ID0gcGFyZW50Vm5vZGU7XG4gIH1cbiAgdm0uJG9wdGlvbnMuX3JlbmRlckNoaWxkcmVuID0gcmVuZGVyQ2hpbGRyZW47XG5cbiAgLy8gdXBkYXRlICRhdHRycyBhbmQgJGxpc3RlbmVycyBoYXNoXG4gIC8vIHRoZXNlIGFyZSBhbHNvIHJlYWN0aXZlIHNvIHRoZXkgbWF5IHRyaWdnZXIgY2hpbGQgdXBkYXRlIGlmIHRoZSBjaGlsZFxuICAvLyB1c2VkIHRoZW0gZHVyaW5nIHJlbmRlclxuICB2bS4kYXR0cnMgPSBwYXJlbnRWbm9kZS5kYXRhLmF0dHJzIHx8IGVtcHR5T2JqZWN0O1xuICB2bS4kbGlzdGVuZXJzID0gbGlzdGVuZXJzIHx8IGVtcHR5T2JqZWN0O1xuXG4gIC8vIHVwZGF0ZSBwcm9wc1xuICBpZiAocHJvcHNEYXRhICYmIHZtLiRvcHRpb25zLnByb3BzKSB7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKGZhbHNlKTtcbiAgICB2YXIgcHJvcHMgPSB2bS5fcHJvcHM7XG4gICAgdmFyIHByb3BLZXlzID0gdm0uJG9wdGlvbnMuX3Byb3BLZXlzIHx8IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcEtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBrZXkgPSBwcm9wS2V5c1tpXTtcbiAgICAgIHZhciBwcm9wT3B0aW9ucyA9IHZtLiRvcHRpb25zLnByb3BzOyAvLyB3dGYgZmxvdz9cbiAgICAgIHByb3BzW2tleV0gPSB2YWxpZGF0ZVByb3Aoa2V5LCBwcm9wT3B0aW9ucywgcHJvcHNEYXRhLCB2bSk7XG4gICAgfVxuICAgIHRvZ2dsZU9ic2VydmluZyh0cnVlKTtcbiAgICAvLyBrZWVwIGEgY29weSBvZiByYXcgcHJvcHNEYXRhXG4gICAgdm0uJG9wdGlvbnMucHJvcHNEYXRhID0gcHJvcHNEYXRhO1xuICB9XG5cbiAgLy8gdXBkYXRlIGxpc3RlbmVyc1xuICBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMgfHwgZW1wdHlPYmplY3Q7XG4gIHZhciBvbGRMaXN0ZW5lcnMgPSB2bS4kb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzO1xuICB2bS4kb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzID0gbGlzdGVuZXJzO1xuICB1cGRhdGVDb21wb25lbnRMaXN0ZW5lcnModm0sIGxpc3RlbmVycywgb2xkTGlzdGVuZXJzKTtcblxuICAvLyByZXNvbHZlIHNsb3RzICsgZm9yY2UgdXBkYXRlIGlmIGhhcyBjaGlsZHJlblxuICBpZiAoaGFzQ2hpbGRyZW4pIHtcbiAgICB2bS4kc2xvdHMgPSByZXNvbHZlU2xvdHMocmVuZGVyQ2hpbGRyZW4sIHBhcmVudFZub2RlLmNvbnRleHQpO1xuICAgIHZtLiRmb3JjZVVwZGF0ZSgpO1xuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgPSBmYWxzZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc0luSW5hY3RpdmVUcmVlICh2bSkge1xuICB3aGlsZSAodm0gJiYgKHZtID0gdm0uJHBhcmVudCkpIHtcbiAgICBpZiAodm0uX2luYWN0aXZlKSB7IHJldHVybiB0cnVlIH1cbiAgfVxuICByZXR1cm4gZmFsc2Vcbn1cblxuZnVuY3Rpb24gYWN0aXZhdGVDaGlsZENvbXBvbmVudCAodm0sIGRpcmVjdCkge1xuICBpZiAoZGlyZWN0KSB7XG4gICAgdm0uX2RpcmVjdEluYWN0aXZlID0gZmFsc2U7XG4gICAgaWYgKGlzSW5JbmFjdGl2ZVRyZWUodm0pKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gIH0gZWxzZSBpZiAodm0uX2RpcmVjdEluYWN0aXZlKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKHZtLl9pbmFjdGl2ZSB8fCB2bS5faW5hY3RpdmUgPT09IG51bGwpIHtcbiAgICB2bS5faW5hY3RpdmUgPSBmYWxzZTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZtLiRjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgYWN0aXZhdGVDaGlsZENvbXBvbmVudCh2bS4kY2hpbGRyZW5baV0pO1xuICAgIH1cbiAgICBjYWxsSG9vayh2bSwgJ2FjdGl2YXRlZCcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRlYWN0aXZhdGVDaGlsZENvbXBvbmVudCAodm0sIGRpcmVjdCkge1xuICBpZiAoZGlyZWN0KSB7XG4gICAgdm0uX2RpcmVjdEluYWN0aXZlID0gdHJ1ZTtcbiAgICBpZiAoaXNJbkluYWN0aXZlVHJlZSh2bSkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgfVxuICBpZiAoIXZtLl9pbmFjdGl2ZSkge1xuICAgIHZtLl9pbmFjdGl2ZSA9IHRydWU7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2bS4kY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGRlYWN0aXZhdGVDaGlsZENvbXBvbmVudCh2bS4kY2hpbGRyZW5baV0pO1xuICAgIH1cbiAgICBjYWxsSG9vayh2bSwgJ2RlYWN0aXZhdGVkJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FsbEhvb2sgKHZtLCBob29rKSB7XG4gIC8vICM3NTczIGRpc2FibGUgZGVwIGNvbGxlY3Rpb24gd2hlbiBpbnZva2luZyBsaWZlY3ljbGUgaG9va3NcbiAgcHVzaFRhcmdldCgpO1xuICB2YXIgaGFuZGxlcnMgPSB2bS4kb3B0aW9uc1tob29rXTtcbiAgaWYgKGhhbmRsZXJzKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGogPSBoYW5kbGVycy5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGhhbmRsZXJzW2ldLmNhbGwodm0pO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBoYW5kbGVFcnJvcihlLCB2bSwgKGhvb2sgKyBcIiBob29rXCIpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKHZtLl9oYXNIb29rRXZlbnQpIHtcbiAgICB2bS4kZW1pdCgnaG9vazonICsgaG9vayk7XG4gIH1cbiAgcG9wVGFyZ2V0KCk7XG59XG5cbi8qICAqL1xuXG5cbnZhciBNQVhfVVBEQVRFX0NPVU5UID0gMTAwO1xuXG52YXIgcXVldWUgPSBbXTtcbnZhciBhY3RpdmF0ZWRDaGlsZHJlbiA9IFtdO1xudmFyIGhhcyA9IHt9O1xudmFyIGNpcmN1bGFyID0ge307XG52YXIgd2FpdGluZyA9IGZhbHNlO1xudmFyIGZsdXNoaW5nID0gZmFsc2U7XG52YXIgaW5kZXggPSAwO1xuXG4vKipcbiAqIFJlc2V0IHRoZSBzY2hlZHVsZXIncyBzdGF0ZS5cbiAqL1xuZnVuY3Rpb24gcmVzZXRTY2hlZHVsZXJTdGF0ZSAoKSB7XG4gIGluZGV4ID0gcXVldWUubGVuZ3RoID0gYWN0aXZhdGVkQ2hpbGRyZW4ubGVuZ3RoID0gMDtcbiAgaGFzID0ge307XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY2lyY3VsYXIgPSB7fTtcbiAgfVxuICB3YWl0aW5nID0gZmx1c2hpbmcgPSBmYWxzZTtcbn1cblxuLyoqXG4gKiBGbHVzaCBib3RoIHF1ZXVlcyBhbmQgcnVuIHRoZSB3YXRjaGVycy5cbiAqL1xuZnVuY3Rpb24gZmx1c2hTY2hlZHVsZXJRdWV1ZSAoKSB7XG4gIGZsdXNoaW5nID0gdHJ1ZTtcbiAgdmFyIHdhdGNoZXIsIGlkO1xuXG4gIC8vIFNvcnQgcXVldWUgYmVmb3JlIGZsdXNoLlxuICAvLyBUaGlzIGVuc3VyZXMgdGhhdDpcbiAgLy8gMS4gQ29tcG9uZW50cyBhcmUgdXBkYXRlZCBmcm9tIHBhcmVudCB0byBjaGlsZC4gKGJlY2F1c2UgcGFyZW50IGlzIGFsd2F5c1xuICAvLyAgICBjcmVhdGVkIGJlZm9yZSB0aGUgY2hpbGQpXG4gIC8vIDIuIEEgY29tcG9uZW50J3MgdXNlciB3YXRjaGVycyBhcmUgcnVuIGJlZm9yZSBpdHMgcmVuZGVyIHdhdGNoZXIgKGJlY2F1c2VcbiAgLy8gICAgdXNlciB3YXRjaGVycyBhcmUgY3JlYXRlZCBiZWZvcmUgdGhlIHJlbmRlciB3YXRjaGVyKVxuICAvLyAzLiBJZiBhIGNvbXBvbmVudCBpcyBkZXN0cm95ZWQgZHVyaW5nIGEgcGFyZW50IGNvbXBvbmVudCdzIHdhdGNoZXIgcnVuLFxuICAvLyAgICBpdHMgd2F0Y2hlcnMgY2FuIGJlIHNraXBwZWQuXG4gIHF1ZXVlLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGEuaWQgLSBiLmlkOyB9KTtcblxuICAvLyBkbyBub3QgY2FjaGUgbGVuZ3RoIGJlY2F1c2UgbW9yZSB3YXRjaGVycyBtaWdodCBiZSBwdXNoZWRcbiAgLy8gYXMgd2UgcnVuIGV4aXN0aW5nIHdhdGNoZXJzXG4gIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IHF1ZXVlLmxlbmd0aDsgaW5kZXgrKykge1xuICAgIHdhdGNoZXIgPSBxdWV1ZVtpbmRleF07XG4gICAgaWQgPSB3YXRjaGVyLmlkO1xuICAgIGhhc1tpZF0gPSBudWxsO1xuICAgIHdhdGNoZXIucnVuKCk7XG4gICAgLy8gaW4gZGV2IGJ1aWxkLCBjaGVjayBhbmQgc3RvcCBjaXJjdWxhciB1cGRhdGVzLlxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGhhc1tpZF0gIT0gbnVsbCkge1xuICAgICAgY2lyY3VsYXJbaWRdID0gKGNpcmN1bGFyW2lkXSB8fCAwKSArIDE7XG4gICAgICBpZiAoY2lyY3VsYXJbaWRdID4gTUFYX1VQREFURV9DT1VOVCkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgICdZb3UgbWF5IGhhdmUgYW4gaW5maW5pdGUgdXBkYXRlIGxvb3AgJyArIChcbiAgICAgICAgICAgIHdhdGNoZXIudXNlclxuICAgICAgICAgICAgICA/IChcImluIHdhdGNoZXIgd2l0aCBleHByZXNzaW9uIFxcXCJcIiArICh3YXRjaGVyLmV4cHJlc3Npb24pICsgXCJcXFwiXCIpXG4gICAgICAgICAgICAgIDogXCJpbiBhIGNvbXBvbmVudCByZW5kZXIgZnVuY3Rpb24uXCJcbiAgICAgICAgICApLFxuICAgICAgICAgIHdhdGNoZXIudm1cbiAgICAgICAgKTtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBrZWVwIGNvcGllcyBvZiBwb3N0IHF1ZXVlcyBiZWZvcmUgcmVzZXR0aW5nIHN0YXRlXG4gIHZhciBhY3RpdmF0ZWRRdWV1ZSA9IGFjdGl2YXRlZENoaWxkcmVuLnNsaWNlKCk7XG4gIHZhciB1cGRhdGVkUXVldWUgPSBxdWV1ZS5zbGljZSgpO1xuXG4gIHJlc2V0U2NoZWR1bGVyU3RhdGUoKTtcblxuICAvLyBjYWxsIGNvbXBvbmVudCB1cGRhdGVkIGFuZCBhY3RpdmF0ZWQgaG9va3NcbiAgY2FsbEFjdGl2YXRlZEhvb2tzKGFjdGl2YXRlZFF1ZXVlKTtcbiAgY2FsbFVwZGF0ZWRIb29rcyh1cGRhdGVkUXVldWUpO1xuXG4gIC8vIGRldnRvb2wgaG9va1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGRldnRvb2xzICYmIGNvbmZpZy5kZXZ0b29scykge1xuICAgIGRldnRvb2xzLmVtaXQoJ2ZsdXNoJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FsbFVwZGF0ZWRIb29rcyAocXVldWUpIHtcbiAgdmFyIGkgPSBxdWV1ZS5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICB2YXIgd2F0Y2hlciA9IHF1ZXVlW2ldO1xuICAgIHZhciB2bSA9IHdhdGNoZXIudm07XG4gICAgaWYgKHZtLl93YXRjaGVyID09PSB3YXRjaGVyICYmIHZtLl9pc01vdW50ZWQpIHtcbiAgICAgIGNhbGxIb29rKHZtLCAndXBkYXRlZCcpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFF1ZXVlIGEga2VwdC1hbGl2ZSBjb21wb25lbnQgdGhhdCB3YXMgYWN0aXZhdGVkIGR1cmluZyBwYXRjaC5cbiAqIFRoZSBxdWV1ZSB3aWxsIGJlIHByb2Nlc3NlZCBhZnRlciB0aGUgZW50aXJlIHRyZWUgaGFzIGJlZW4gcGF0Y2hlZC5cbiAqL1xuZnVuY3Rpb24gcXVldWVBY3RpdmF0ZWRDb21wb25lbnQgKHZtKSB7XG4gIC8vIHNldHRpbmcgX2luYWN0aXZlIHRvIGZhbHNlIGhlcmUgc28gdGhhdCBhIHJlbmRlciBmdW5jdGlvbiBjYW5cbiAgLy8gcmVseSBvbiBjaGVja2luZyB3aGV0aGVyIGl0J3MgaW4gYW4gaW5hY3RpdmUgdHJlZSAoZS5nLiByb3V0ZXItdmlldylcbiAgdm0uX2luYWN0aXZlID0gZmFsc2U7XG4gIGFjdGl2YXRlZENoaWxkcmVuLnB1c2godm0pO1xufVxuXG5mdW5jdGlvbiBjYWxsQWN0aXZhdGVkSG9va3MgKHF1ZXVlKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyBpKyspIHtcbiAgICBxdWV1ZVtpXS5faW5hY3RpdmUgPSB0cnVlO1xuICAgIGFjdGl2YXRlQ2hpbGRDb21wb25lbnQocXVldWVbaV0sIHRydWUgLyogdHJ1ZSAqLyk7XG4gIH1cbn1cblxuLyoqXG4gKiBQdXNoIGEgd2F0Y2hlciBpbnRvIHRoZSB3YXRjaGVyIHF1ZXVlLlxuICogSm9icyB3aXRoIGR1cGxpY2F0ZSBJRHMgd2lsbCBiZSBza2lwcGVkIHVubGVzcyBpdCdzXG4gKiBwdXNoZWQgd2hlbiB0aGUgcXVldWUgaXMgYmVpbmcgZmx1c2hlZC5cbiAqL1xuZnVuY3Rpb24gcXVldWVXYXRjaGVyICh3YXRjaGVyKSB7XG4gIHZhciBpZCA9IHdhdGNoZXIuaWQ7XG4gIGlmIChoYXNbaWRdID09IG51bGwpIHtcbiAgICBoYXNbaWRdID0gdHJ1ZTtcbiAgICBpZiAoIWZsdXNoaW5nKSB7XG4gICAgICBxdWV1ZS5wdXNoKHdhdGNoZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpZiBhbHJlYWR5IGZsdXNoaW5nLCBzcGxpY2UgdGhlIHdhdGNoZXIgYmFzZWQgb24gaXRzIGlkXG4gICAgICAvLyBpZiBhbHJlYWR5IHBhc3QgaXRzIGlkLCBpdCB3aWxsIGJlIHJ1biBuZXh0IGltbWVkaWF0ZWx5LlxuICAgICAgdmFyIGkgPSBxdWV1ZS5sZW5ndGggLSAxO1xuICAgICAgd2hpbGUgKGkgPiBpbmRleCAmJiBxdWV1ZVtpXS5pZCA+IHdhdGNoZXIuaWQpIHtcbiAgICAgICAgaS0tO1xuICAgICAgfVxuICAgICAgcXVldWUuc3BsaWNlKGkgKyAxLCAwLCB3YXRjaGVyKTtcbiAgICB9XG4gICAgLy8gcXVldWUgdGhlIGZsdXNoXG4gICAgaWYgKCF3YWl0aW5nKSB7XG4gICAgICB3YWl0aW5nID0gdHJ1ZTtcbiAgICAgIG5leHRUaWNrKGZsdXNoU2NoZWR1bGVyUXVldWUpO1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIHVpZCQxID0gMDtcblxuLyoqXG4gKiBBIHdhdGNoZXIgcGFyc2VzIGFuIGV4cHJlc3Npb24sIGNvbGxlY3RzIGRlcGVuZGVuY2llcyxcbiAqIGFuZCBmaXJlcyBjYWxsYmFjayB3aGVuIHRoZSBleHByZXNzaW9uIHZhbHVlIGNoYW5nZXMuXG4gKiBUaGlzIGlzIHVzZWQgZm9yIGJvdGggdGhlICR3YXRjaCgpIGFwaSBhbmQgZGlyZWN0aXZlcy5cbiAqL1xudmFyIFdhdGNoZXIgPSBmdW5jdGlvbiBXYXRjaGVyIChcbiAgdm0sXG4gIGV4cE9yRm4sXG4gIGNiLFxuICBvcHRpb25zLFxuICBpc1JlbmRlcldhdGNoZXJcbikge1xuICB0aGlzLnZtID0gdm07XG4gIGlmIChpc1JlbmRlcldhdGNoZXIpIHtcbiAgICB2bS5fd2F0Y2hlciA9IHRoaXM7XG4gIH1cbiAgdm0uX3dhdGNoZXJzLnB1c2godGhpcyk7XG4gIC8vIG9wdGlvbnNcbiAgaWYgKG9wdGlvbnMpIHtcbiAgICB0aGlzLmRlZXAgPSAhIW9wdGlvbnMuZGVlcDtcbiAgICB0aGlzLnVzZXIgPSAhIW9wdGlvbnMudXNlcjtcbiAgICB0aGlzLmxhenkgPSAhIW9wdGlvbnMubGF6eTtcbiAgICB0aGlzLnN5bmMgPSAhIW9wdGlvbnMuc3luYztcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmRlZXAgPSB0aGlzLnVzZXIgPSB0aGlzLmxhenkgPSB0aGlzLnN5bmMgPSBmYWxzZTtcbiAgfVxuICB0aGlzLmNiID0gY2I7XG4gIHRoaXMuaWQgPSArK3VpZCQxOyAvLyB1aWQgZm9yIGJhdGNoaW5nXG4gIHRoaXMuYWN0aXZlID0gdHJ1ZTtcbiAgdGhpcy5kaXJ0eSA9IHRoaXMubGF6eTsgLy8gZm9yIGxhenkgd2F0Y2hlcnNcbiAgdGhpcy5kZXBzID0gW107XG4gIHRoaXMubmV3RGVwcyA9IFtdO1xuICB0aGlzLmRlcElkcyA9IG5ldyBfU2V0KCk7XG4gIHRoaXMubmV3RGVwSWRzID0gbmV3IF9TZXQoKTtcbiAgdGhpcy5leHByZXNzaW9uID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJ1xuICAgID8gZXhwT3JGbi50b1N0cmluZygpXG4gICAgOiAnJztcbiAgLy8gcGFyc2UgZXhwcmVzc2lvbiBmb3IgZ2V0dGVyXG4gIGlmICh0eXBlb2YgZXhwT3JGbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHRoaXMuZ2V0dGVyID0gZXhwT3JGbjtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmdldHRlciA9IHBhcnNlUGF0aChleHBPckZuKTtcbiAgICBpZiAoIXRoaXMuZ2V0dGVyKSB7XG4gICAgICB0aGlzLmdldHRlciA9IGZ1bmN0aW9uICgpIHt9O1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICBcIkZhaWxlZCB3YXRjaGluZyBwYXRoOiBcXFwiXCIgKyBleHBPckZuICsgXCJcXFwiIFwiICtcbiAgICAgICAgJ1dhdGNoZXIgb25seSBhY2NlcHRzIHNpbXBsZSBkb3QtZGVsaW1pdGVkIHBhdGhzLiAnICtcbiAgICAgICAgJ0ZvciBmdWxsIGNvbnRyb2wsIHVzZSBhIGZ1bmN0aW9uIGluc3RlYWQuJyxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfVxuICB9XG4gIHRoaXMudmFsdWUgPSB0aGlzLmxhenlcbiAgICA/IHVuZGVmaW5lZFxuICAgIDogdGhpcy5nZXQoKTtcbn07XG5cbi8qKlxuICogRXZhbHVhdGUgdGhlIGdldHRlciwgYW5kIHJlLWNvbGxlY3QgZGVwZW5kZW5jaWVzLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiBnZXQgKCkge1xuICBwdXNoVGFyZ2V0KHRoaXMpO1xuICB2YXIgdmFsdWU7XG4gIHZhciB2bSA9IHRoaXMudm07XG4gIHRyeSB7XG4gICAgdmFsdWUgPSB0aGlzLmdldHRlci5jYWxsKHZtLCB2bSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAodGhpcy51c2VyKSB7XG4gICAgICBoYW5kbGVFcnJvcihlLCB2bSwgKFwiZ2V0dGVyIGZvciB3YXRjaGVyIFxcXCJcIiArICh0aGlzLmV4cHJlc3Npb24pICsgXCJcXFwiXCIpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgZVxuICAgIH1cbiAgfSBmaW5hbGx5IHtcbiAgICAvLyBcInRvdWNoXCIgZXZlcnkgcHJvcGVydHkgc28gdGhleSBhcmUgYWxsIHRyYWNrZWQgYXNcbiAgICAvLyBkZXBlbmRlbmNpZXMgZm9yIGRlZXAgd2F0Y2hpbmdcbiAgICBpZiAodGhpcy5kZWVwKSB7XG4gICAgICB0cmF2ZXJzZSh2YWx1ZSk7XG4gICAgfVxuICAgIHBvcFRhcmdldCgpO1xuICAgIHRoaXMuY2xlYW51cERlcHMoKTtcbiAgfVxuICByZXR1cm4gdmFsdWVcbn07XG5cbi8qKlxuICogQWRkIGEgZGVwZW5kZW5jeSB0byB0aGlzIGRpcmVjdGl2ZS5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuYWRkRGVwID0gZnVuY3Rpb24gYWRkRGVwIChkZXApIHtcbiAgdmFyIGlkID0gZGVwLmlkO1xuICBpZiAoIXRoaXMubmV3RGVwSWRzLmhhcyhpZCkpIHtcbiAgICB0aGlzLm5ld0RlcElkcy5hZGQoaWQpO1xuICAgIHRoaXMubmV3RGVwcy5wdXNoKGRlcCk7XG4gICAgaWYgKCF0aGlzLmRlcElkcy5oYXMoaWQpKSB7XG4gICAgICBkZXAuYWRkU3ViKHRoaXMpO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBDbGVhbiB1cCBmb3IgZGVwZW5kZW5jeSBjb2xsZWN0aW9uLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5jbGVhbnVwRGVwcyA9IGZ1bmN0aW9uIGNsZWFudXBEZXBzICgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICB2YXIgaSA9IHRoaXMuZGVwcy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICB2YXIgZGVwID0gdGhpcyQxLmRlcHNbaV07XG4gICAgaWYgKCF0aGlzJDEubmV3RGVwSWRzLmhhcyhkZXAuaWQpKSB7XG4gICAgICBkZXAucmVtb3ZlU3ViKHRoaXMkMSk7XG4gICAgfVxuICB9XG4gIHZhciB0bXAgPSB0aGlzLmRlcElkcztcbiAgdGhpcy5kZXBJZHMgPSB0aGlzLm5ld0RlcElkcztcbiAgdGhpcy5uZXdEZXBJZHMgPSB0bXA7XG4gIHRoaXMubmV3RGVwSWRzLmNsZWFyKCk7XG4gIHRtcCA9IHRoaXMuZGVwcztcbiAgdGhpcy5kZXBzID0gdGhpcy5uZXdEZXBzO1xuICB0aGlzLm5ld0RlcHMgPSB0bXA7XG4gIHRoaXMubmV3RGVwcy5sZW5ndGggPSAwO1xufTtcblxuLyoqXG4gKiBTdWJzY3JpYmVyIGludGVyZmFjZS5cbiAqIFdpbGwgYmUgY2FsbGVkIHdoZW4gYSBkZXBlbmRlbmN5IGNoYW5nZXMuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSAoKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmICh0aGlzLmxhenkpIHtcbiAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcbiAgfSBlbHNlIGlmICh0aGlzLnN5bmMpIHtcbiAgICB0aGlzLnJ1bigpO1xuICB9IGVsc2Uge1xuICAgIHF1ZXVlV2F0Y2hlcih0aGlzKTtcbiAgfVxufTtcblxuLyoqXG4gKiBTY2hlZHVsZXIgam9iIGludGVyZmFjZS5cbiAqIFdpbGwgYmUgY2FsbGVkIGJ5IHRoZSBzY2hlZHVsZXIuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uIHJ1biAoKSB7XG4gIGlmICh0aGlzLmFjdGl2ZSkge1xuICAgIHZhciB2YWx1ZSA9IHRoaXMuZ2V0KCk7XG4gICAgaWYgKFxuICAgICAgdmFsdWUgIT09IHRoaXMudmFsdWUgfHxcbiAgICAgIC8vIERlZXAgd2F0Y2hlcnMgYW5kIHdhdGNoZXJzIG9uIE9iamVjdC9BcnJheXMgc2hvdWxkIGZpcmUgZXZlblxuICAgICAgLy8gd2hlbiB0aGUgdmFsdWUgaXMgdGhlIHNhbWUsIGJlY2F1c2UgdGhlIHZhbHVlIG1heVxuICAgICAgLy8gaGF2ZSBtdXRhdGVkLlxuICAgICAgaXNPYmplY3QodmFsdWUpIHx8XG4gICAgICB0aGlzLmRlZXBcbiAgICApIHtcbiAgICAgIC8vIHNldCBuZXcgdmFsdWVcbiAgICAgIHZhciBvbGRWYWx1ZSA9IHRoaXMudmFsdWU7XG4gICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICBpZiAodGhpcy51c2VyKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhpcy5jYi5jYWxsKHRoaXMudm0sIHZhbHVlLCBvbGRWYWx1ZSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBoYW5kbGVFcnJvcihlLCB0aGlzLnZtLCAoXCJjYWxsYmFjayBmb3Igd2F0Y2hlciBcXFwiXCIgKyAodGhpcy5leHByZXNzaW9uKSArIFwiXFxcIlwiKSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuY2IuY2FsbCh0aGlzLnZtLCB2YWx1ZSwgb2xkVmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBFdmFsdWF0ZSB0aGUgdmFsdWUgb2YgdGhlIHdhdGNoZXIuXG4gKiBUaGlzIG9ubHkgZ2V0cyBjYWxsZWQgZm9yIGxhenkgd2F0Y2hlcnMuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLmV2YWx1YXRlID0gZnVuY3Rpb24gZXZhbHVhdGUgKCkge1xuICB0aGlzLnZhbHVlID0gdGhpcy5nZXQoKTtcbiAgdGhpcy5kaXJ0eSA9IGZhbHNlO1xufTtcblxuLyoqXG4gKiBEZXBlbmQgb24gYWxsIGRlcHMgY29sbGVjdGVkIGJ5IHRoaXMgd2F0Y2hlci5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuZGVwZW5kID0gZnVuY3Rpb24gZGVwZW5kICgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICB2YXIgaSA9IHRoaXMuZGVwcy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICB0aGlzJDEuZGVwc1tpXS5kZXBlbmQoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBSZW1vdmUgc2VsZiBmcm9tIGFsbCBkZXBlbmRlbmNpZXMnIHN1YnNjcmliZXIgbGlzdC5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUudGVhcmRvd24gPSBmdW5jdGlvbiB0ZWFyZG93biAoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgaWYgKHRoaXMuYWN0aXZlKSB7XG4gICAgLy8gcmVtb3ZlIHNlbGYgZnJvbSB2bSdzIHdhdGNoZXIgbGlzdFxuICAgIC8vIHRoaXMgaXMgYSBzb21ld2hhdCBleHBlbnNpdmUgb3BlcmF0aW9uIHNvIHdlIHNraXAgaXRcbiAgICAvLyBpZiB0aGUgdm0gaXMgYmVpbmcgZGVzdHJveWVkLlxuICAgIGlmICghdGhpcy52bS5faXNCZWluZ0Rlc3Ryb3llZCkge1xuICAgICAgcmVtb3ZlKHRoaXMudm0uX3dhdGNoZXJzLCB0aGlzKTtcbiAgICB9XG4gICAgdmFyIGkgPSB0aGlzLmRlcHMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHRoaXMkMS5kZXBzW2ldLnJlbW92ZVN1Yih0aGlzJDEpO1xuICAgIH1cbiAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xuICB9XG59O1xuXG4vKiAgKi9cblxudmFyIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbiA9IHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IG5vb3AsXG4gIHNldDogbm9vcFxufTtcblxuZnVuY3Rpb24gcHJveHkgKHRhcmdldCwgc291cmNlS2V5LCBrZXkpIHtcbiAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLmdldCA9IGZ1bmN0aW9uIHByb3h5R2V0dGVyICgpIHtcbiAgICByZXR1cm4gdGhpc1tzb3VyY2VLZXldW2tleV1cbiAgfTtcbiAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9IGZ1bmN0aW9uIHByb3h5U2V0dGVyICh2YWwpIHtcbiAgICB0aGlzW3NvdXJjZUtleV1ba2V5XSA9IHZhbDtcbiAgfTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24pO1xufVxuXG5mdW5jdGlvbiBpbml0U3RhdGUgKHZtKSB7XG4gIHZtLl93YXRjaGVycyA9IFtdO1xuICB2YXIgb3B0cyA9IHZtLiRvcHRpb25zO1xuICBpZiAob3B0cy5wcm9wcykgeyBpbml0UHJvcHModm0sIG9wdHMucHJvcHMpOyB9XG4gIGlmIChvcHRzLm1ldGhvZHMpIHsgaW5pdE1ldGhvZHModm0sIG9wdHMubWV0aG9kcyk7IH1cbiAgaWYgKG9wdHMuZGF0YSkge1xuICAgIGluaXREYXRhKHZtKTtcbiAgfSBlbHNlIHtcbiAgICBvYnNlcnZlKHZtLl9kYXRhID0ge30sIHRydWUgLyogYXNSb290RGF0YSAqLyk7XG4gIH1cbiAgaWYgKG9wdHMuY29tcHV0ZWQpIHsgaW5pdENvbXB1dGVkKHZtLCBvcHRzLmNvbXB1dGVkKTsgfVxuICBpZiAob3B0cy53YXRjaCAmJiBvcHRzLndhdGNoICE9PSBuYXRpdmVXYXRjaCkge1xuICAgIGluaXRXYXRjaCh2bSwgb3B0cy53YXRjaCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdFByb3BzICh2bSwgcHJvcHNPcHRpb25zKSB7XG4gIHZhciBwcm9wc0RhdGEgPSB2bS4kb3B0aW9ucy5wcm9wc0RhdGEgfHwge307XG4gIHZhciBwcm9wcyA9IHZtLl9wcm9wcyA9IHt9O1xuICAvLyBjYWNoZSBwcm9wIGtleXMgc28gdGhhdCBmdXR1cmUgcHJvcHMgdXBkYXRlcyBjYW4gaXRlcmF0ZSB1c2luZyBBcnJheVxuICAvLyBpbnN0ZWFkIG9mIGR5bmFtaWMgb2JqZWN0IGtleSBlbnVtZXJhdGlvbi5cbiAgdmFyIGtleXMgPSB2bS4kb3B0aW9ucy5fcHJvcEtleXMgPSBbXTtcbiAgdmFyIGlzUm9vdCA9ICF2bS4kcGFyZW50O1xuICAvLyByb290IGluc3RhbmNlIHByb3BzIHNob3VsZCBiZSBjb252ZXJ0ZWRcbiAgaWYgKCFpc1Jvb3QpIHtcbiAgICB0b2dnbGVPYnNlcnZpbmcoZmFsc2UpO1xuICB9XG4gIHZhciBsb29wID0gZnVuY3Rpb24gKCBrZXkgKSB7XG4gICAga2V5cy5wdXNoKGtleSk7XG4gICAgdmFyIHZhbHVlID0gdmFsaWRhdGVQcm9wKGtleSwgcHJvcHNPcHRpb25zLCBwcm9wc0RhdGEsIHZtKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgaHlwaGVuYXRlZEtleSA9IGh5cGhlbmF0ZShrZXkpO1xuICAgICAgaWYgKGlzUmVzZXJ2ZWRBdHRyaWJ1dGUoaHlwaGVuYXRlZEtleSkgfHxcbiAgICAgICAgICBjb25maWcuaXNSZXNlcnZlZEF0dHIoaHlwaGVuYXRlZEtleSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAoXCJcXFwiXCIgKyBoeXBoZW5hdGVkS2V5ICsgXCJcXFwiIGlzIGEgcmVzZXJ2ZWQgYXR0cmlidXRlIGFuZCBjYW5ub3QgYmUgdXNlZCBhcyBjb21wb25lbnQgcHJvcC5cIiksXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGRlZmluZVJlYWN0aXZlKHByb3BzLCBrZXksIHZhbHVlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh2bS4kcGFyZW50ICYmICFpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQpIHtcbiAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgXCJBdm9pZCBtdXRhdGluZyBhIHByb3AgZGlyZWN0bHkgc2luY2UgdGhlIHZhbHVlIHdpbGwgYmUgXCIgK1xuICAgICAgICAgICAgXCJvdmVyd3JpdHRlbiB3aGVuZXZlciB0aGUgcGFyZW50IGNvbXBvbmVudCByZS1yZW5kZXJzLiBcIiArXG4gICAgICAgICAgICBcIkluc3RlYWQsIHVzZSBhIGRhdGEgb3IgY29tcHV0ZWQgcHJvcGVydHkgYmFzZWQgb24gdGhlIHByb3AncyBcIiArXG4gICAgICAgICAgICBcInZhbHVlLiBQcm9wIGJlaW5nIG11dGF0ZWQ6IFxcXCJcIiArIGtleSArIFwiXFxcIlwiLFxuICAgICAgICAgICAgdm1cbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVmaW5lUmVhY3RpdmUocHJvcHMsIGtleSwgdmFsdWUpO1xuICAgIH1cbiAgICAvLyBzdGF0aWMgcHJvcHMgYXJlIGFscmVhZHkgcHJveGllZCBvbiB0aGUgY29tcG9uZW50J3MgcHJvdG90eXBlXG4gICAgLy8gZHVyaW5nIFZ1ZS5leHRlbmQoKS4gV2Ugb25seSBuZWVkIHRvIHByb3h5IHByb3BzIGRlZmluZWQgYXRcbiAgICAvLyBpbnN0YW50aWF0aW9uIGhlcmUuXG4gICAgaWYgKCEoa2V5IGluIHZtKSkge1xuICAgICAgcHJveHkodm0sIFwiX3Byb3BzXCIsIGtleSk7XG4gICAgfVxuICB9O1xuXG4gIGZvciAodmFyIGtleSBpbiBwcm9wc09wdGlvbnMpIGxvb3AoIGtleSApO1xuICB0b2dnbGVPYnNlcnZpbmcodHJ1ZSk7XG59XG5cbmZ1bmN0aW9uIGluaXREYXRhICh2bSkge1xuICB2YXIgZGF0YSA9IHZtLiRvcHRpb25zLmRhdGE7XG4gIGRhdGEgPSB2bS5fZGF0YSA9IHR5cGVvZiBkYXRhID09PSAnZnVuY3Rpb24nXG4gICAgPyBnZXREYXRhKGRhdGEsIHZtKVxuICAgIDogZGF0YSB8fCB7fTtcbiAgaWYgKCFpc1BsYWluT2JqZWN0KGRhdGEpKSB7XG4gICAgZGF0YSA9IHt9O1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICdkYXRhIGZ1bmN0aW9ucyBzaG91bGQgcmV0dXJuIGFuIG9iamVjdDpcXG4nICtcbiAgICAgICdodHRwczovL3Z1ZWpzLm9yZy92Mi9ndWlkZS9jb21wb25lbnRzLmh0bWwjZGF0YS1NdXN0LUJlLWEtRnVuY3Rpb24nLFxuICAgICAgdm1cbiAgICApO1xuICB9XG4gIC8vIHByb3h5IGRhdGEgb24gaW5zdGFuY2VcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhkYXRhKTtcbiAgdmFyIHByb3BzID0gdm0uJG9wdGlvbnMucHJvcHM7XG4gIHZhciBtZXRob2RzID0gdm0uJG9wdGlvbnMubWV0aG9kcztcbiAgdmFyIGkgPSBrZXlzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAobWV0aG9kcyAmJiBoYXNPd24obWV0aG9kcywga2V5KSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIChcIk1ldGhvZCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaGFzIGFscmVhZHkgYmVlbiBkZWZpbmVkIGFzIGEgZGF0YSBwcm9wZXJ0eS5cIiksXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHByb3BzICYmIGhhc093bihwcm9wcywga2V5KSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICBcIlRoZSBkYXRhIHByb3BlcnR5IFxcXCJcIiArIGtleSArIFwiXFxcIiBpcyBhbHJlYWR5IGRlY2xhcmVkIGFzIGEgcHJvcC4gXCIgK1xuICAgICAgICBcIlVzZSBwcm9wIGRlZmF1bHQgdmFsdWUgaW5zdGVhZC5cIixcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfSBlbHNlIGlmICghaXNSZXNlcnZlZChrZXkpKSB7XG4gICAgICBwcm94eSh2bSwgXCJfZGF0YVwiLCBrZXkpO1xuICAgIH1cbiAgfVxuICAvLyBvYnNlcnZlIGRhdGFcbiAgb2JzZXJ2ZShkYXRhLCB0cnVlIC8qIGFzUm9vdERhdGEgKi8pO1xufVxuXG5mdW5jdGlvbiBnZXREYXRhIChkYXRhLCB2bSkge1xuICAvLyAjNzU3MyBkaXNhYmxlIGRlcCBjb2xsZWN0aW9uIHdoZW4gaW52b2tpbmcgZGF0YSBnZXR0ZXJzXG4gIHB1c2hUYXJnZXQoKTtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZGF0YS5jYWxsKHZtLCB2bSlcbiAgfSBjYXRjaCAoZSkge1xuICAgIGhhbmRsZUVycm9yKGUsIHZtLCBcImRhdGEoKVwiKTtcbiAgICByZXR1cm4ge31cbiAgfSBmaW5hbGx5IHtcbiAgICBwb3BUYXJnZXQoKTtcbiAgfVxufVxuXG52YXIgY29tcHV0ZWRXYXRjaGVyT3B0aW9ucyA9IHsgbGF6eTogdHJ1ZSB9O1xuXG5mdW5jdGlvbiBpbml0Q29tcHV0ZWQgKHZtLCBjb21wdXRlZCkge1xuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgdmFyIHdhdGNoZXJzID0gdm0uX2NvbXB1dGVkV2F0Y2hlcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAvLyBjb21wdXRlZCBwcm9wZXJ0aWVzIGFyZSBqdXN0IGdldHRlcnMgZHVyaW5nIFNTUlxuICB2YXIgaXNTU1IgPSBpc1NlcnZlclJlbmRlcmluZygpO1xuXG4gIGZvciAodmFyIGtleSBpbiBjb21wdXRlZCkge1xuICAgIHZhciB1c2VyRGVmID0gY29tcHV0ZWRba2V5XTtcbiAgICB2YXIgZ2V0dGVyID0gdHlwZW9mIHVzZXJEZWYgPT09ICdmdW5jdGlvbicgPyB1c2VyRGVmIDogdXNlckRlZi5nZXQ7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgZ2V0dGVyID09IG51bGwpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIChcIkdldHRlciBpcyBtaXNzaW5nIGZvciBjb21wdXRlZCBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIuXCIpLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoIWlzU1NSKSB7XG4gICAgICAvLyBjcmVhdGUgaW50ZXJuYWwgd2F0Y2hlciBmb3IgdGhlIGNvbXB1dGVkIHByb3BlcnR5LlxuICAgICAgd2F0Y2hlcnNba2V5XSA9IG5ldyBXYXRjaGVyKFxuICAgICAgICB2bSxcbiAgICAgICAgZ2V0dGVyIHx8IG5vb3AsXG4gICAgICAgIG5vb3AsXG4gICAgICAgIGNvbXB1dGVkV2F0Y2hlck9wdGlvbnNcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gY29tcG9uZW50LWRlZmluZWQgY29tcHV0ZWQgcHJvcGVydGllcyBhcmUgYWxyZWFkeSBkZWZpbmVkIG9uIHRoZVxuICAgIC8vIGNvbXBvbmVudCBwcm90b3R5cGUuIFdlIG9ubHkgbmVlZCB0byBkZWZpbmUgY29tcHV0ZWQgcHJvcGVydGllcyBkZWZpbmVkXG4gICAgLy8gYXQgaW5zdGFudGlhdGlvbiBoZXJlLlxuICAgIGlmICghKGtleSBpbiB2bSkpIHtcbiAgICAgIGRlZmluZUNvbXB1dGVkKHZtLCBrZXksIHVzZXJEZWYpO1xuICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKGtleSBpbiB2bS4kZGF0YSkge1xuICAgICAgICB3YXJuKChcIlRoZSBjb21wdXRlZCBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaXMgYWxyZWFkeSBkZWZpbmVkIGluIGRhdGEuXCIpLCB2bSk7XG4gICAgICB9IGVsc2UgaWYgKHZtLiRvcHRpb25zLnByb3BzICYmIGtleSBpbiB2bS4kb3B0aW9ucy5wcm9wcykge1xuICAgICAgICB3YXJuKChcIlRoZSBjb21wdXRlZCBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaXMgYWxyZWFkeSBkZWZpbmVkIGFzIGEgcHJvcC5cIiksIHZtKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZGVmaW5lQ29tcHV0ZWQgKFxuICB0YXJnZXQsXG4gIGtleSxcbiAgdXNlckRlZlxuKSB7XG4gIHZhciBzaG91bGRDYWNoZSA9ICFpc1NlcnZlclJlbmRlcmluZygpO1xuICBpZiAodHlwZW9mIHVzZXJEZWYgPT09ICdmdW5jdGlvbicpIHtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uZ2V0ID0gc2hvdWxkQ2FjaGVcbiAgICAgID8gY3JlYXRlQ29tcHV0ZWRHZXR0ZXIoa2V5KVxuICAgICAgOiB1c2VyRGVmO1xuICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPSBub29wO1xuICB9IGVsc2Uge1xuICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5nZXQgPSB1c2VyRGVmLmdldFxuICAgICAgPyBzaG91bGRDYWNoZSAmJiB1c2VyRGVmLmNhY2hlICE9PSBmYWxzZVxuICAgICAgICA/IGNyZWF0ZUNvbXB1dGVkR2V0dGVyKGtleSlcbiAgICAgICAgOiB1c2VyRGVmLmdldFxuICAgICAgOiBub29wO1xuICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPSB1c2VyRGVmLnNldFxuICAgICAgPyB1c2VyRGVmLnNldFxuICAgICAgOiBub29wO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uc2V0ID09PSBub29wKSB7XG4gICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIChcIkNvbXB1dGVkIHByb3BlcnR5IFxcXCJcIiArIGtleSArIFwiXFxcIiB3YXMgYXNzaWduZWQgdG8gYnV0IGl0IGhhcyBubyBzZXR0ZXIuXCIpLFxuICAgICAgICB0aGlzXG4gICAgICApO1xuICAgIH07XG4gIH1cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVDb21wdXRlZEdldHRlciAoa2V5KSB7XG4gIHJldHVybiBmdW5jdGlvbiBjb21wdXRlZEdldHRlciAoKSB7XG4gICAgdmFyIHdhdGNoZXIgPSB0aGlzLl9jb21wdXRlZFdhdGNoZXJzICYmIHRoaXMuX2NvbXB1dGVkV2F0Y2hlcnNba2V5XTtcbiAgICBpZiAod2F0Y2hlcikge1xuICAgICAgaWYgKHdhdGNoZXIuZGlydHkpIHtcbiAgICAgICAgd2F0Y2hlci5ldmFsdWF0ZSgpO1xuICAgICAgfVxuICAgICAgaWYgKERlcC50YXJnZXQpIHtcbiAgICAgICAgd2F0Y2hlci5kZXBlbmQoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB3YXRjaGVyLnZhbHVlXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRNZXRob2RzICh2bSwgbWV0aG9kcykge1xuICB2YXIgcHJvcHMgPSB2bS4kb3B0aW9ucy5wcm9wcztcbiAgZm9yICh2YXIga2V5IGluIG1ldGhvZHMpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKG1ldGhvZHNba2V5XSA9PSBudWxsKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgXCJNZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGhhcyBhbiB1bmRlZmluZWQgdmFsdWUgaW4gdGhlIGNvbXBvbmVudCBkZWZpbml0aW9uLiBcIiArXG4gICAgICAgICAgXCJEaWQgeW91IHJlZmVyZW5jZSB0aGUgZnVuY3Rpb24gY29ycmVjdGx5P1wiLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAocHJvcHMgJiYgaGFzT3duKHByb3BzLCBrZXkpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgKFwiTWV0aG9kIFxcXCJcIiArIGtleSArIFwiXFxcIiBoYXMgYWxyZWFkeSBiZWVuIGRlZmluZWQgYXMgYSBwcm9wLlwiKSxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKChrZXkgaW4gdm0pICYmIGlzUmVzZXJ2ZWQoa2V5KSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIFwiTWV0aG9kIFxcXCJcIiArIGtleSArIFwiXFxcIiBjb25mbGljdHMgd2l0aCBhbiBleGlzdGluZyBWdWUgaW5zdGFuY2UgbWV0aG9kLiBcIiArXG4gICAgICAgICAgXCJBdm9pZCBkZWZpbmluZyBjb21wb25lbnQgbWV0aG9kcyB0aGF0IHN0YXJ0IHdpdGggXyBvciAkLlwiXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIHZtW2tleV0gPSBtZXRob2RzW2tleV0gPT0gbnVsbCA/IG5vb3AgOiBiaW5kKG1ldGhvZHNba2V5XSwgdm0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRXYXRjaCAodm0sIHdhdGNoKSB7XG4gIGZvciAodmFyIGtleSBpbiB3YXRjaCkge1xuICAgIHZhciBoYW5kbGVyID0gd2F0Y2hba2V5XTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShoYW5kbGVyKSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBoYW5kbGVyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNyZWF0ZVdhdGNoZXIodm0sIGtleSwgaGFuZGxlcltpXSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNyZWF0ZVdhdGNoZXIodm0sIGtleSwgaGFuZGxlcik7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVdhdGNoZXIgKFxuICB2bSxcbiAgZXhwT3JGbixcbiAgaGFuZGxlcixcbiAgb3B0aW9uc1xuKSB7XG4gIGlmIChpc1BsYWluT2JqZWN0KGhhbmRsZXIpKSB7XG4gICAgb3B0aW9ucyA9IGhhbmRsZXI7XG4gICAgaGFuZGxlciA9IGhhbmRsZXIuaGFuZGxlcjtcbiAgfVxuICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICdzdHJpbmcnKSB7XG4gICAgaGFuZGxlciA9IHZtW2hhbmRsZXJdO1xuICB9XG4gIHJldHVybiB2bS4kd2F0Y2goZXhwT3JGbiwgaGFuZGxlciwgb3B0aW9ucylcbn1cblxuZnVuY3Rpb24gc3RhdGVNaXhpbiAoVnVlKSB7XG4gIC8vIGZsb3cgc29tZWhvdyBoYXMgcHJvYmxlbXMgd2l0aCBkaXJlY3RseSBkZWNsYXJlZCBkZWZpbml0aW9uIG9iamVjdFxuICAvLyB3aGVuIHVzaW5nIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSwgc28gd2UgaGF2ZSB0byBwcm9jZWR1cmFsbHkgYnVpbGQgdXBcbiAgLy8gdGhlIG9iamVjdCBoZXJlLlxuICB2YXIgZGF0YURlZiA9IHt9O1xuICBkYXRhRGVmLmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RhdGEgfTtcbiAgdmFyIHByb3BzRGVmID0ge307XG4gIHByb3BzRGVmLmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX3Byb3BzIH07XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgZGF0YURlZi5zZXQgPSBmdW5jdGlvbiAobmV3RGF0YSkge1xuICAgICAgd2FybihcbiAgICAgICAgJ0F2b2lkIHJlcGxhY2luZyBpbnN0YW5jZSByb290ICRkYXRhLiAnICtcbiAgICAgICAgJ1VzZSBuZXN0ZWQgZGF0YSBwcm9wZXJ0aWVzIGluc3RlYWQuJyxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9O1xuICAgIHByb3BzRGVmLnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdhcm4oXCIkcHJvcHMgaXMgcmVhZG9ubHkuXCIsIHRoaXMpO1xuICAgIH07XG4gIH1cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZS5wcm90b3R5cGUsICckZGF0YScsIGRhdGFEZWYpO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRwcm9wcycsIHByb3BzRGVmKTtcblxuICBWdWUucHJvdG90eXBlLiRzZXQgPSBzZXQ7XG4gIFZ1ZS5wcm90b3R5cGUuJGRlbGV0ZSA9IGRlbDtcblxuICBWdWUucHJvdG90eXBlLiR3YXRjaCA9IGZ1bmN0aW9uIChcbiAgICBleHBPckZuLFxuICAgIGNiLFxuICAgIG9wdGlvbnNcbiAgKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBpZiAoaXNQbGFpbk9iamVjdChjYikpIHtcbiAgICAgIHJldHVybiBjcmVhdGVXYXRjaGVyKHZtLCBleHBPckZuLCBjYiwgb3B0aW9ucylcbiAgICB9XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgb3B0aW9ucy51c2VyID0gdHJ1ZTtcbiAgICB2YXIgd2F0Y2hlciA9IG5ldyBXYXRjaGVyKHZtLCBleHBPckZuLCBjYiwgb3B0aW9ucyk7XG4gICAgaWYgKG9wdGlvbnMuaW1tZWRpYXRlKSB7XG4gICAgICBjYi5jYWxsKHZtLCB3YXRjaGVyLnZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHVud2F0Y2hGbiAoKSB7XG4gICAgICB3YXRjaGVyLnRlYXJkb3duKCk7XG4gICAgfVxuICB9O1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdFByb3ZpZGUgKHZtKSB7XG4gIHZhciBwcm92aWRlID0gdm0uJG9wdGlvbnMucHJvdmlkZTtcbiAgaWYgKHByb3ZpZGUpIHtcbiAgICB2bS5fcHJvdmlkZWQgPSB0eXBlb2YgcHJvdmlkZSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgPyBwcm92aWRlLmNhbGwodm0pXG4gICAgICA6IHByb3ZpZGU7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdEluamVjdGlvbnMgKHZtKSB7XG4gIHZhciByZXN1bHQgPSByZXNvbHZlSW5qZWN0KHZtLiRvcHRpb25zLmluamVjdCwgdm0pO1xuICBpZiAocmVzdWx0KSB7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKGZhbHNlKTtcbiAgICBPYmplY3Qua2V5cyhyZXN1bHQpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGRlZmluZVJlYWN0aXZlKHZtLCBrZXksIHJlc3VsdFtrZXldLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgd2FybihcbiAgICAgICAgICAgIFwiQXZvaWQgbXV0YXRpbmcgYW4gaW5qZWN0ZWQgdmFsdWUgZGlyZWN0bHkgc2luY2UgdGhlIGNoYW5nZXMgd2lsbCBiZSBcIiArXG4gICAgICAgICAgICBcIm92ZXJ3cml0dGVuIHdoZW5ldmVyIHRoZSBwcm92aWRlZCBjb21wb25lbnQgcmUtcmVuZGVycy4gXCIgK1xuICAgICAgICAgICAgXCJpbmplY3Rpb24gYmVpbmcgbXV0YXRlZDogXFxcIlwiICsga2V5ICsgXCJcXFwiXCIsXG4gICAgICAgICAgICB2bVxuICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVmaW5lUmVhY3RpdmUodm0sIGtleSwgcmVzdWx0W2tleV0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRvZ2dsZU9ic2VydmluZyh0cnVlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZXNvbHZlSW5qZWN0IChpbmplY3QsIHZtKSB7XG4gIGlmIChpbmplY3QpIHtcbiAgICAvLyBpbmplY3QgaXMgOmFueSBiZWNhdXNlIGZsb3cgaXMgbm90IHNtYXJ0IGVub3VnaCB0byBmaWd1cmUgb3V0IGNhY2hlZFxuICAgIHZhciByZXN1bHQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHZhciBrZXlzID0gaGFzU3ltYm9sXG4gICAgICA/IFJlZmxlY3Qub3duS2V5cyhpbmplY3QpLmZpbHRlcihmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGluamVjdCwga2V5KS5lbnVtZXJhYmxlXG4gICAgICB9KVxuICAgICAgOiBPYmplY3Qua2V5cyhpbmplY3QpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgIHZhciBwcm92aWRlS2V5ID0gaW5qZWN0W2tleV0uZnJvbTtcbiAgICAgIHZhciBzb3VyY2UgPSB2bTtcbiAgICAgIHdoaWxlIChzb3VyY2UpIHtcbiAgICAgICAgaWYgKHNvdXJjZS5fcHJvdmlkZWQgJiYgaGFzT3duKHNvdXJjZS5fcHJvdmlkZWQsIHByb3ZpZGVLZXkpKSB7XG4gICAgICAgICAgcmVzdWx0W2tleV0gPSBzb3VyY2UuX3Byb3ZpZGVkW3Byb3ZpZGVLZXldO1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgICAgc291cmNlID0gc291cmNlLiRwYXJlbnQ7XG4gICAgICB9XG4gICAgICBpZiAoIXNvdXJjZSkge1xuICAgICAgICBpZiAoJ2RlZmF1bHQnIGluIGluamVjdFtrZXldKSB7XG4gICAgICAgICAgdmFyIHByb3ZpZGVEZWZhdWx0ID0gaW5qZWN0W2tleV0uZGVmYXVsdDtcbiAgICAgICAgICByZXN1bHRba2V5XSA9IHR5cGVvZiBwcm92aWRlRGVmYXVsdCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgPyBwcm92aWRlRGVmYXVsdC5jYWxsKHZtKVxuICAgICAgICAgICAgOiBwcm92aWRlRGVmYXVsdDtcbiAgICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgd2FybigoXCJJbmplY3Rpb24gXFxcIlwiICsga2V5ICsgXCJcXFwiIG5vdCBmb3VuZFwiKSwgdm0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRcbiAgfVxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVuZGVyaW5nIHYtZm9yIGxpc3RzLlxuICovXG5mdW5jdGlvbiByZW5kZXJMaXN0IChcbiAgdmFsLFxuICByZW5kZXJcbikge1xuICB2YXIgcmV0LCBpLCBsLCBrZXlzLCBrZXk7XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbCkgfHwgdHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICByZXQgPSBuZXcgQXJyYXkodmFsLmxlbmd0aCk7XG4gICAgZm9yIChpID0gMCwgbCA9IHZhbC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHJldFtpXSA9IHJlbmRlcih2YWxbaV0sIGkpO1xuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHJldCA9IG5ldyBBcnJheSh2YWwpO1xuICAgIGZvciAoaSA9IDA7IGkgPCB2YWw7IGkrKykge1xuICAgICAgcmV0W2ldID0gcmVuZGVyKGkgKyAxLCBpKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNPYmplY3QodmFsKSkge1xuICAgIGtleXMgPSBPYmplY3Qua2V5cyh2YWwpO1xuICAgIHJldCA9IG5ldyBBcnJheShrZXlzLmxlbmd0aCk7XG4gICAgZm9yIChpID0gMCwgbCA9IGtleXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgcmV0W2ldID0gcmVuZGVyKHZhbFtrZXldLCBrZXksIGkpO1xuICAgIH1cbiAgfVxuICBpZiAoaXNEZWYocmV0KSkge1xuICAgIChyZXQpLl9pc1ZMaXN0ID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciByZW5kZXJpbmcgPHNsb3Q+XG4gKi9cbmZ1bmN0aW9uIHJlbmRlclNsb3QgKFxuICBuYW1lLFxuICBmYWxsYmFjayxcbiAgcHJvcHMsXG4gIGJpbmRPYmplY3Rcbikge1xuICB2YXIgc2NvcGVkU2xvdEZuID0gdGhpcy4kc2NvcGVkU2xvdHNbbmFtZV07XG4gIHZhciBub2RlcztcbiAgaWYgKHNjb3BlZFNsb3RGbikgeyAvLyBzY29wZWQgc2xvdFxuICAgIHByb3BzID0gcHJvcHMgfHwge307XG4gICAgaWYgKGJpbmRPYmplY3QpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFpc09iamVjdChiaW5kT2JqZWN0KSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgICdzbG90IHYtYmluZCB3aXRob3V0IGFyZ3VtZW50IGV4cGVjdHMgYW4gT2JqZWN0JyxcbiAgICAgICAgICB0aGlzXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBwcm9wcyA9IGV4dGVuZChleHRlbmQoe30sIGJpbmRPYmplY3QpLCBwcm9wcyk7XG4gICAgfVxuICAgIG5vZGVzID0gc2NvcGVkU2xvdEZuKHByb3BzKSB8fCBmYWxsYmFjaztcbiAgfSBlbHNlIHtcbiAgICB2YXIgc2xvdE5vZGVzID0gdGhpcy4kc2xvdHNbbmFtZV07XG4gICAgLy8gd2FybiBkdXBsaWNhdGUgc2xvdCB1c2FnZVxuICAgIGlmIChzbG90Tm9kZXMpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHNsb3ROb2Rlcy5fcmVuZGVyZWQpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICBcIkR1cGxpY2F0ZSBwcmVzZW5jZSBvZiBzbG90IFxcXCJcIiArIG5hbWUgKyBcIlxcXCIgZm91bmQgaW4gdGhlIHNhbWUgcmVuZGVyIHRyZWUgXCIgK1xuICAgICAgICAgIFwiLSB0aGlzIHdpbGwgbGlrZWx5IGNhdXNlIHJlbmRlciBlcnJvcnMuXCIsXG4gICAgICAgICAgdGhpc1xuICAgICAgICApO1xuICAgICAgfVxuICAgICAgc2xvdE5vZGVzLl9yZW5kZXJlZCA9IHRydWU7XG4gICAgfVxuICAgIG5vZGVzID0gc2xvdE5vZGVzIHx8IGZhbGxiYWNrO1xuICB9XG5cbiAgdmFyIHRhcmdldCA9IHByb3BzICYmIHByb3BzLnNsb3Q7XG4gIGlmICh0YXJnZXQpIHtcbiAgICByZXR1cm4gdGhpcy4kY3JlYXRlRWxlbWVudCgndGVtcGxhdGUnLCB7IHNsb3Q6IHRhcmdldCB9LCBub2RlcylcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbm9kZXNcbiAgfVxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVzb2x2aW5nIGZpbHRlcnNcbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZUZpbHRlciAoaWQpIHtcbiAgcmV0dXJuIHJlc29sdmVBc3NldCh0aGlzLiRvcHRpb25zLCAnZmlsdGVycycsIGlkLCB0cnVlKSB8fCBpZGVudGl0eVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaXNLZXlOb3RNYXRjaCAoZXhwZWN0LCBhY3R1YWwpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoZXhwZWN0KSkge1xuICAgIHJldHVybiBleHBlY3QuaW5kZXhPZihhY3R1YWwpID09PSAtMVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBleHBlY3QgIT09IGFjdHVhbFxuICB9XG59XG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIGNoZWNraW5nIGtleUNvZGVzIGZyb20gY29uZmlnLlxuICogZXhwb3NlZCBhcyBWdWUucHJvdG90eXBlLl9rXG4gKiBwYXNzaW5nIGluIGV2ZW50S2V5TmFtZSBhcyBsYXN0IGFyZ3VtZW50IHNlcGFyYXRlbHkgZm9yIGJhY2t3YXJkcyBjb21wYXRcbiAqL1xuZnVuY3Rpb24gY2hlY2tLZXlDb2RlcyAoXG4gIGV2ZW50S2V5Q29kZSxcbiAga2V5LFxuICBidWlsdEluS2V5Q29kZSxcbiAgZXZlbnRLZXlOYW1lLFxuICBidWlsdEluS2V5TmFtZVxuKSB7XG4gIHZhciBtYXBwZWRLZXlDb2RlID0gY29uZmlnLmtleUNvZGVzW2tleV0gfHwgYnVpbHRJbktleUNvZGU7XG4gIGlmIChidWlsdEluS2V5TmFtZSAmJiBldmVudEtleU5hbWUgJiYgIWNvbmZpZy5rZXlDb2Rlc1trZXldKSB7XG4gICAgcmV0dXJuIGlzS2V5Tm90TWF0Y2goYnVpbHRJbktleU5hbWUsIGV2ZW50S2V5TmFtZSlcbiAgfSBlbHNlIGlmIChtYXBwZWRLZXlDb2RlKSB7XG4gICAgcmV0dXJuIGlzS2V5Tm90TWF0Y2gobWFwcGVkS2V5Q29kZSwgZXZlbnRLZXlDb2RlKVxuICB9IGVsc2UgaWYgKGV2ZW50S2V5TmFtZSkge1xuICAgIHJldHVybiBoeXBoZW5hdGUoZXZlbnRLZXlOYW1lKSAhPT0ga2V5XG4gIH1cbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIG1lcmdpbmcgdi1iaW5kPVwib2JqZWN0XCIgaW50byBhIFZOb2RlJ3MgZGF0YS5cbiAqL1xuZnVuY3Rpb24gYmluZE9iamVjdFByb3BzIChcbiAgZGF0YSxcbiAgdGFnLFxuICB2YWx1ZSxcbiAgYXNQcm9wLFxuICBpc1N5bmNcbikge1xuICBpZiAodmFsdWUpIHtcbiAgICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICAndi1iaW5kIHdpdGhvdXQgYXJndW1lbnQgZXhwZWN0cyBhbiBPYmplY3Qgb3IgQXJyYXkgdmFsdWUnLFxuICAgICAgICB0aGlzXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWUgPSB0b09iamVjdCh2YWx1ZSk7XG4gICAgICB9XG4gICAgICB2YXIgaGFzaDtcbiAgICAgIHZhciBsb29wID0gZnVuY3Rpb24gKCBrZXkgKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBrZXkgPT09ICdjbGFzcycgfHxcbiAgICAgICAgICBrZXkgPT09ICdzdHlsZScgfHxcbiAgICAgICAgICBpc1Jlc2VydmVkQXR0cmlidXRlKGtleSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgaGFzaCA9IGRhdGE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHR5cGUgPSBkYXRhLmF0dHJzICYmIGRhdGEuYXR0cnMudHlwZTtcbiAgICAgICAgICBoYXNoID0gYXNQcm9wIHx8IGNvbmZpZy5tdXN0VXNlUHJvcCh0YWcsIHR5cGUsIGtleSlcbiAgICAgICAgICAgID8gZGF0YS5kb21Qcm9wcyB8fCAoZGF0YS5kb21Qcm9wcyA9IHt9KVxuICAgICAgICAgICAgOiBkYXRhLmF0dHJzIHx8IChkYXRhLmF0dHJzID0ge30pO1xuICAgICAgICB9XG4gICAgICAgIGlmICghKGtleSBpbiBoYXNoKSkge1xuICAgICAgICAgIGhhc2hba2V5XSA9IHZhbHVlW2tleV07XG5cbiAgICAgICAgICBpZiAoaXNTeW5jKSB7XG4gICAgICAgICAgICB2YXIgb24gPSBkYXRhLm9uIHx8IChkYXRhLm9uID0ge30pO1xuICAgICAgICAgICAgb25bKFwidXBkYXRlOlwiICsga2V5KV0gPSBmdW5jdGlvbiAoJGV2ZW50KSB7XG4gICAgICAgICAgICAgIHZhbHVlW2tleV0gPSAkZXZlbnQ7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHZhbHVlKSBsb29wKCBrZXkgKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRhdGFcbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHJlbmRlcmluZyBzdGF0aWMgdHJlZXMuXG4gKi9cbmZ1bmN0aW9uIHJlbmRlclN0YXRpYyAoXG4gIGluZGV4LFxuICBpc0luRm9yXG4pIHtcbiAgdmFyIGNhY2hlZCA9IHRoaXMuX3N0YXRpY1RyZWVzIHx8ICh0aGlzLl9zdGF0aWNUcmVlcyA9IFtdKTtcbiAgdmFyIHRyZWUgPSBjYWNoZWRbaW5kZXhdO1xuICAvLyBpZiBoYXMgYWxyZWFkeS1yZW5kZXJlZCBzdGF0aWMgdHJlZSBhbmQgbm90IGluc2lkZSB2LWZvcixcbiAgLy8gd2UgY2FuIHJldXNlIHRoZSBzYW1lIHRyZWUuXG4gIGlmICh0cmVlICYmICFpc0luRm9yKSB7XG4gICAgcmV0dXJuIHRyZWVcbiAgfVxuICAvLyBvdGhlcndpc2UsIHJlbmRlciBhIGZyZXNoIHRyZWUuXG4gIHRyZWUgPSBjYWNoZWRbaW5kZXhdID0gdGhpcy4kb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnNbaW5kZXhdLmNhbGwoXG4gICAgdGhpcy5fcmVuZGVyUHJveHksXG4gICAgbnVsbCxcbiAgICB0aGlzIC8vIGZvciByZW5kZXIgZm5zIGdlbmVyYXRlZCBmb3IgZnVuY3Rpb25hbCBjb21wb25lbnQgdGVtcGxhdGVzXG4gICk7XG4gIG1hcmtTdGF0aWModHJlZSwgKFwiX19zdGF0aWNfX1wiICsgaW5kZXgpLCBmYWxzZSk7XG4gIHJldHVybiB0cmVlXG59XG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHYtb25jZS5cbiAqIEVmZmVjdGl2ZWx5IGl0IG1lYW5zIG1hcmtpbmcgdGhlIG5vZGUgYXMgc3RhdGljIHdpdGggYSB1bmlxdWUga2V5LlxuICovXG5mdW5jdGlvbiBtYXJrT25jZSAoXG4gIHRyZWUsXG4gIGluZGV4LFxuICBrZXlcbikge1xuICBtYXJrU3RhdGljKHRyZWUsIChcIl9fb25jZV9fXCIgKyBpbmRleCArIChrZXkgPyAoXCJfXCIgKyBrZXkpIDogXCJcIikpLCB0cnVlKTtcbiAgcmV0dXJuIHRyZWVcbn1cblxuZnVuY3Rpb24gbWFya1N0YXRpYyAoXG4gIHRyZWUsXG4gIGtleSxcbiAgaXNPbmNlXG4pIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkodHJlZSkpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRyZWUubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICh0cmVlW2ldICYmIHR5cGVvZiB0cmVlW2ldICE9PSAnc3RyaW5nJykge1xuICAgICAgICBtYXJrU3RhdGljTm9kZSh0cmVlW2ldLCAoa2V5ICsgXCJfXCIgKyBpKSwgaXNPbmNlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbWFya1N0YXRpY05vZGUodHJlZSwga2V5LCBpc09uY2UpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1hcmtTdGF0aWNOb2RlIChub2RlLCBrZXksIGlzT25jZSkge1xuICBub2RlLmlzU3RhdGljID0gdHJ1ZTtcbiAgbm9kZS5rZXkgPSBrZXk7XG4gIG5vZGUuaXNPbmNlID0gaXNPbmNlO1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gYmluZE9iamVjdExpc3RlbmVycyAoZGF0YSwgdmFsdWUpIHtcbiAgaWYgKHZhbHVlKSB7XG4gICAgaWYgKCFpc1BsYWluT2JqZWN0KHZhbHVlKSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICAndi1vbiB3aXRob3V0IGFyZ3VtZW50IGV4cGVjdHMgYW4gT2JqZWN0IHZhbHVlJyxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIG9uID0gZGF0YS5vbiA9IGRhdGEub24gPyBleHRlbmQoe30sIGRhdGEub24pIDoge307XG4gICAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICAgICAgdmFyIGV4aXN0aW5nID0gb25ba2V5XTtcbiAgICAgICAgdmFyIG91cnMgPSB2YWx1ZVtrZXldO1xuICAgICAgICBvbltrZXldID0gZXhpc3RpbmcgPyBbXS5jb25jYXQoZXhpc3RpbmcsIG91cnMpIDogb3VycztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRhdGFcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluc3RhbGxSZW5kZXJIZWxwZXJzICh0YXJnZXQpIHtcbiAgdGFyZ2V0Ll9vID0gbWFya09uY2U7XG4gIHRhcmdldC5fbiA9IHRvTnVtYmVyO1xuICB0YXJnZXQuX3MgPSB0b1N0cmluZztcbiAgdGFyZ2V0Ll9sID0gcmVuZGVyTGlzdDtcbiAgdGFyZ2V0Ll90ID0gcmVuZGVyU2xvdDtcbiAgdGFyZ2V0Ll9xID0gbG9vc2VFcXVhbDtcbiAgdGFyZ2V0Ll9pID0gbG9vc2VJbmRleE9mO1xuICB0YXJnZXQuX20gPSByZW5kZXJTdGF0aWM7XG4gIHRhcmdldC5fZiA9IHJlc29sdmVGaWx0ZXI7XG4gIHRhcmdldC5fayA9IGNoZWNrS2V5Q29kZXM7XG4gIHRhcmdldC5fYiA9IGJpbmRPYmplY3RQcm9wcztcbiAgdGFyZ2V0Ll92ID0gY3JlYXRlVGV4dFZOb2RlO1xuICB0YXJnZXQuX2UgPSBjcmVhdGVFbXB0eVZOb2RlO1xuICB0YXJnZXQuX3UgPSByZXNvbHZlU2NvcGVkU2xvdHM7XG4gIHRhcmdldC5fZyA9IGJpbmRPYmplY3RMaXN0ZW5lcnM7XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBGdW5jdGlvbmFsUmVuZGVyQ29udGV4dCAoXG4gIGRhdGEsXG4gIHByb3BzLFxuICBjaGlsZHJlbixcbiAgcGFyZW50LFxuICBDdG9yXG4pIHtcbiAgdmFyIG9wdGlvbnMgPSBDdG9yLm9wdGlvbnM7XG4gIC8vIGVuc3VyZSB0aGUgY3JlYXRlRWxlbWVudCBmdW5jdGlvbiBpbiBmdW5jdGlvbmFsIGNvbXBvbmVudHNcbiAgLy8gZ2V0cyBhIHVuaXF1ZSBjb250ZXh0IC0gdGhpcyBpcyBuZWNlc3NhcnkgZm9yIGNvcnJlY3QgbmFtZWQgc2xvdCBjaGVja1xuICB2YXIgY29udGV4dFZtO1xuICBpZiAoaGFzT3duKHBhcmVudCwgJ191aWQnKSkge1xuICAgIGNvbnRleHRWbSA9IE9iamVjdC5jcmVhdGUocGFyZW50KTtcbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICBjb250ZXh0Vm0uX29yaWdpbmFsID0gcGFyZW50O1xuICB9IGVsc2Uge1xuICAgIC8vIHRoZSBjb250ZXh0IHZtIHBhc3NlZCBpbiBpcyBhIGZ1bmN0aW9uYWwgY29udGV4dCBhcyB3ZWxsLlxuICAgIC8vIGluIHRoaXMgY2FzZSB3ZSB3YW50IHRvIG1ha2Ugc3VyZSB3ZSBhcmUgYWJsZSB0byBnZXQgYSBob2xkIHRvIHRoZVxuICAgIC8vIHJlYWwgY29udGV4dCBpbnN0YW5jZS5cbiAgICBjb250ZXh0Vm0gPSBwYXJlbnQ7XG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgcGFyZW50ID0gcGFyZW50Ll9vcmlnaW5hbDtcbiAgfVxuICB2YXIgaXNDb21waWxlZCA9IGlzVHJ1ZShvcHRpb25zLl9jb21waWxlZCk7XG4gIHZhciBuZWVkTm9ybWFsaXphdGlvbiA9ICFpc0NvbXBpbGVkO1xuXG4gIHRoaXMuZGF0YSA9IGRhdGE7XG4gIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgdGhpcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICB0aGlzLnBhcmVudCA9IHBhcmVudDtcbiAgdGhpcy5saXN0ZW5lcnMgPSBkYXRhLm9uIHx8IGVtcHR5T2JqZWN0O1xuICB0aGlzLmluamVjdGlvbnMgPSByZXNvbHZlSW5qZWN0KG9wdGlvbnMuaW5qZWN0LCBwYXJlbnQpO1xuICB0aGlzLnNsb3RzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVzb2x2ZVNsb3RzKGNoaWxkcmVuLCBwYXJlbnQpOyB9O1xuXG4gIC8vIHN1cHBvcnQgZm9yIGNvbXBpbGVkIGZ1bmN0aW9uYWwgdGVtcGxhdGVcbiAgaWYgKGlzQ29tcGlsZWQpIHtcbiAgICAvLyBleHBvc2luZyAkb3B0aW9ucyBmb3IgcmVuZGVyU3RhdGljKClcbiAgICB0aGlzLiRvcHRpb25zID0gb3B0aW9ucztcbiAgICAvLyBwcmUtcmVzb2x2ZSBzbG90cyBmb3IgcmVuZGVyU2xvdCgpXG4gICAgdGhpcy4kc2xvdHMgPSB0aGlzLnNsb3RzKCk7XG4gICAgdGhpcy4kc2NvcGVkU2xvdHMgPSBkYXRhLnNjb3BlZFNsb3RzIHx8IGVtcHR5T2JqZWN0O1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuX3Njb3BlSWQpIHtcbiAgICB0aGlzLl9jID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHtcbiAgICAgIHZhciB2bm9kZSA9IGNyZWF0ZUVsZW1lbnQoY29udGV4dFZtLCBhLCBiLCBjLCBkLCBuZWVkTm9ybWFsaXphdGlvbik7XG4gICAgICBpZiAodm5vZGUgJiYgIUFycmF5LmlzQXJyYXkodm5vZGUpKSB7XG4gICAgICAgIHZub2RlLmZuU2NvcGVJZCA9IG9wdGlvbnMuX3Njb3BlSWQ7XG4gICAgICAgIHZub2RlLmZuQ29udGV4dCA9IHBhcmVudDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2bm9kZVxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fYyA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7IHJldHVybiBjcmVhdGVFbGVtZW50KGNvbnRleHRWbSwgYSwgYiwgYywgZCwgbmVlZE5vcm1hbGl6YXRpb24pOyB9O1xuICB9XG59XG5cbmluc3RhbGxSZW5kZXJIZWxwZXJzKEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0LnByb3RvdHlwZSk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUZ1bmN0aW9uYWxDb21wb25lbnQgKFxuICBDdG9yLFxuICBwcm9wc0RhdGEsXG4gIGRhdGEsXG4gIGNvbnRleHRWbSxcbiAgY2hpbGRyZW5cbikge1xuICB2YXIgb3B0aW9ucyA9IEN0b3Iub3B0aW9ucztcbiAgdmFyIHByb3BzID0ge307XG4gIHZhciBwcm9wT3B0aW9ucyA9IG9wdGlvbnMucHJvcHM7XG4gIGlmIChpc0RlZihwcm9wT3B0aW9ucykpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcE9wdGlvbnMpIHtcbiAgICAgIHByb3BzW2tleV0gPSB2YWxpZGF0ZVByb3Aoa2V5LCBwcm9wT3B0aW9ucywgcHJvcHNEYXRhIHx8IGVtcHR5T2JqZWN0KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGlzRGVmKGRhdGEuYXR0cnMpKSB7IG1lcmdlUHJvcHMocHJvcHMsIGRhdGEuYXR0cnMpOyB9XG4gICAgaWYgKGlzRGVmKGRhdGEucHJvcHMpKSB7IG1lcmdlUHJvcHMocHJvcHMsIGRhdGEucHJvcHMpOyB9XG4gIH1cblxuICB2YXIgcmVuZGVyQ29udGV4dCA9IG5ldyBGdW5jdGlvbmFsUmVuZGVyQ29udGV4dChcbiAgICBkYXRhLFxuICAgIHByb3BzLFxuICAgIGNoaWxkcmVuLFxuICAgIGNvbnRleHRWbSxcbiAgICBDdG9yXG4gICk7XG5cbiAgdmFyIHZub2RlID0gb3B0aW9ucy5yZW5kZXIuY2FsbChudWxsLCByZW5kZXJDb250ZXh0Ll9jLCByZW5kZXJDb250ZXh0KTtcblxuICBpZiAodm5vZGUgaW5zdGFuY2VvZiBWTm9kZSkge1xuICAgIHJldHVybiBjbG9uZUFuZE1hcmtGdW5jdGlvbmFsUmVzdWx0KHZub2RlLCBkYXRhLCByZW5kZXJDb250ZXh0LnBhcmVudCwgb3B0aW9ucylcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHZub2RlKSkge1xuICAgIHZhciB2bm9kZXMgPSBub3JtYWxpemVDaGlsZHJlbih2bm9kZSkgfHwgW107XG4gICAgdmFyIHJlcyA9IG5ldyBBcnJheSh2bm9kZXMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgcmVzW2ldID0gY2xvbmVBbmRNYXJrRnVuY3Rpb25hbFJlc3VsdCh2bm9kZXNbaV0sIGRhdGEsIHJlbmRlckNvbnRleHQucGFyZW50LCBvcHRpb25zKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc1xuICB9XG59XG5cbmZ1bmN0aW9uIGNsb25lQW5kTWFya0Z1bmN0aW9uYWxSZXN1bHQgKHZub2RlLCBkYXRhLCBjb250ZXh0Vm0sIG9wdGlvbnMpIHtcbiAgLy8gIzc4MTcgY2xvbmUgbm9kZSBiZWZvcmUgc2V0dGluZyBmbkNvbnRleHQsIG90aGVyd2lzZSBpZiB0aGUgbm9kZSBpcyByZXVzZWRcbiAgLy8gKGUuZy4gaXQgd2FzIGZyb20gYSBjYWNoZWQgbm9ybWFsIHNsb3QpIHRoZSBmbkNvbnRleHQgY2F1c2VzIG5hbWVkIHNsb3RzXG4gIC8vIHRoYXQgc2hvdWxkIG5vdCBiZSBtYXRjaGVkIHRvIG1hdGNoLlxuICB2YXIgY2xvbmUgPSBjbG9uZVZOb2RlKHZub2RlKTtcbiAgY2xvbmUuZm5Db250ZXh0ID0gY29udGV4dFZtO1xuICBjbG9uZS5mbk9wdGlvbnMgPSBvcHRpb25zO1xuICBpZiAoZGF0YS5zbG90KSB7XG4gICAgKGNsb25lLmRhdGEgfHwgKGNsb25lLmRhdGEgPSB7fSkpLnNsb3QgPSBkYXRhLnNsb3Q7XG4gIH1cbiAgcmV0dXJuIGNsb25lXG59XG5cbmZ1bmN0aW9uIG1lcmdlUHJvcHMgKHRvLCBmcm9tKSB7XG4gIGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG4gICAgdG9bY2FtZWxpemUoa2V5KV0gPSBmcm9tW2tleV07XG4gIH1cbn1cblxuLyogICovXG5cblxuXG5cbi8vIFJlZ2lzdGVyIHRoZSBjb21wb25lbnQgaG9vayB0byB3ZWV4IG5hdGl2ZSByZW5kZXIgZW5naW5lLlxuLy8gVGhlIGhvb2sgd2lsbCBiZSB0cmlnZ2VyZWQgYnkgbmF0aXZlLCBub3QgamF2YXNjcmlwdC5cblxuXG4vLyBVcGRhdGVzIHRoZSBzdGF0ZSBvZiB0aGUgY29tcG9uZW50IHRvIHdlZXggbmF0aXZlIHJlbmRlciBlbmdpbmUuXG5cbi8qICAqL1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vSGFua3MxMDEwMC93ZWV4LW5hdGl2ZS1kaXJlY3RpdmUvdHJlZS9tYXN0ZXIvY29tcG9uZW50XG5cbi8vIGxpc3RlbmluZyBvbiBuYXRpdmUgY2FsbGJhY2tcblxuLyogICovXG5cbi8qICAqL1xuXG4vLyBpbmxpbmUgaG9va3MgdG8gYmUgaW52b2tlZCBvbiBjb21wb25lbnQgVk5vZGVzIGR1cmluZyBwYXRjaFxudmFyIGNvbXBvbmVudFZOb2RlSG9va3MgPSB7XG4gIGluaXQ6IGZ1bmN0aW9uIGluaXQgKFxuICAgIHZub2RlLFxuICAgIGh5ZHJhdGluZyxcbiAgICBwYXJlbnRFbG0sXG4gICAgcmVmRWxtXG4gICkge1xuICAgIGlmIChcbiAgICAgIHZub2RlLmNvbXBvbmVudEluc3RhbmNlICYmXG4gICAgICAhdm5vZGUuY29tcG9uZW50SW5zdGFuY2UuX2lzRGVzdHJveWVkICYmXG4gICAgICB2bm9kZS5kYXRhLmtlZXBBbGl2ZVxuICAgICkge1xuICAgICAgLy8ga2VwdC1hbGl2ZSBjb21wb25lbnRzLCB0cmVhdCBhcyBhIHBhdGNoXG4gICAgICB2YXIgbW91bnRlZE5vZGUgPSB2bm9kZTsgLy8gd29yayBhcm91bmQgZmxvd1xuICAgICAgY29tcG9uZW50Vk5vZGVIb29rcy5wcmVwYXRjaChtb3VudGVkTm9kZSwgbW91bnRlZE5vZGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgY2hpbGQgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSA9IGNyZWF0ZUNvbXBvbmVudEluc3RhbmNlRm9yVm5vZGUoXG4gICAgICAgIHZub2RlLFxuICAgICAgICBhY3RpdmVJbnN0YW5jZSxcbiAgICAgICAgcGFyZW50RWxtLFxuICAgICAgICByZWZFbG1cbiAgICAgICk7XG4gICAgICBjaGlsZC4kbW91bnQoaHlkcmF0aW5nID8gdm5vZGUuZWxtIDogdW5kZWZpbmVkLCBoeWRyYXRpbmcpO1xuICAgIH1cbiAgfSxcblxuICBwcmVwYXRjaDogZnVuY3Rpb24gcHJlcGF0Y2ggKG9sZFZub2RlLCB2bm9kZSkge1xuICAgIHZhciBvcHRpb25zID0gdm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgICB2YXIgY2hpbGQgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSA9IG9sZFZub2RlLmNvbXBvbmVudEluc3RhbmNlO1xuICAgIHVwZGF0ZUNoaWxkQ29tcG9uZW50KFxuICAgICAgY2hpbGQsXG4gICAgICBvcHRpb25zLnByb3BzRGF0YSwgLy8gdXBkYXRlZCBwcm9wc1xuICAgICAgb3B0aW9ucy5saXN0ZW5lcnMsIC8vIHVwZGF0ZWQgbGlzdGVuZXJzXG4gICAgICB2bm9kZSwgLy8gbmV3IHBhcmVudCB2bm9kZVxuICAgICAgb3B0aW9ucy5jaGlsZHJlbiAvLyBuZXcgY2hpbGRyZW5cbiAgICApO1xuICB9LFxuXG4gIGluc2VydDogZnVuY3Rpb24gaW5zZXJ0ICh2bm9kZSkge1xuICAgIHZhciBjb250ZXh0ID0gdm5vZGUuY29udGV4dDtcbiAgICB2YXIgY29tcG9uZW50SW5zdGFuY2UgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICBpZiAoIWNvbXBvbmVudEluc3RhbmNlLl9pc01vdW50ZWQpIHtcbiAgICAgIGNvbXBvbmVudEluc3RhbmNlLl9pc01vdW50ZWQgPSB0cnVlO1xuICAgICAgY2FsbEhvb2soY29tcG9uZW50SW5zdGFuY2UsICdtb3VudGVkJyk7XG4gICAgfVxuICAgIGlmICh2bm9kZS5kYXRhLmtlZXBBbGl2ZSkge1xuICAgICAgaWYgKGNvbnRleHQuX2lzTW91bnRlZCkge1xuICAgICAgICAvLyB2dWUtcm91dGVyIzEyMTJcbiAgICAgICAgLy8gRHVyaW5nIHVwZGF0ZXMsIGEga2VwdC1hbGl2ZSBjb21wb25lbnQncyBjaGlsZCBjb21wb25lbnRzIG1heVxuICAgICAgICAvLyBjaGFuZ2UsIHNvIGRpcmVjdGx5IHdhbGtpbmcgdGhlIHRyZWUgaGVyZSBtYXkgY2FsbCBhY3RpdmF0ZWQgaG9va3NcbiAgICAgICAgLy8gb24gaW5jb3JyZWN0IGNoaWxkcmVuLiBJbnN0ZWFkIHdlIHB1c2ggdGhlbSBpbnRvIGEgcXVldWUgd2hpY2ggd2lsbFxuICAgICAgICAvLyBiZSBwcm9jZXNzZWQgYWZ0ZXIgdGhlIHdob2xlIHBhdGNoIHByb2Nlc3MgZW5kZWQuXG4gICAgICAgIHF1ZXVlQWN0aXZhdGVkQ29tcG9uZW50KGNvbXBvbmVudEluc3RhbmNlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFjdGl2YXRlQ2hpbGRDb21wb25lbnQoY29tcG9uZW50SW5zdGFuY2UsIHRydWUgLyogZGlyZWN0ICovKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSAodm5vZGUpIHtcbiAgICB2YXIgY29tcG9uZW50SW5zdGFuY2UgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICBpZiAoIWNvbXBvbmVudEluc3RhbmNlLl9pc0Rlc3Ryb3llZCkge1xuICAgICAgaWYgKCF2bm9kZS5kYXRhLmtlZXBBbGl2ZSkge1xuICAgICAgICBjb21wb25lbnRJbnN0YW5jZS4kZGVzdHJveSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KGNvbXBvbmVudEluc3RhbmNlLCB0cnVlIC8qIGRpcmVjdCAqLyk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG52YXIgaG9va3NUb01lcmdlID0gT2JqZWN0LmtleXMoY29tcG9uZW50Vk5vZGVIb29rcyk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbXBvbmVudCAoXG4gIEN0b3IsXG4gIGRhdGEsXG4gIGNvbnRleHQsXG4gIGNoaWxkcmVuLFxuICB0YWdcbikge1xuICBpZiAoaXNVbmRlZihDdG9yKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGJhc2VDdG9yID0gY29udGV4dC4kb3B0aW9ucy5fYmFzZTtcblxuICAvLyBwbGFpbiBvcHRpb25zIG9iamVjdDogdHVybiBpdCBpbnRvIGEgY29uc3RydWN0b3JcbiAgaWYgKGlzT2JqZWN0KEN0b3IpKSB7XG4gICAgQ3RvciA9IGJhc2VDdG9yLmV4dGVuZChDdG9yKTtcbiAgfVxuXG4gIC8vIGlmIGF0IHRoaXMgc3RhZ2UgaXQncyBub3QgYSBjb25zdHJ1Y3RvciBvciBhbiBhc3luYyBjb21wb25lbnQgZmFjdG9yeSxcbiAgLy8gcmVqZWN0LlxuICBpZiAodHlwZW9mIEN0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgd2FybigoXCJJbnZhbGlkIENvbXBvbmVudCBkZWZpbml0aW9uOiBcIiArIChTdHJpbmcoQ3RvcikpKSwgY29udGV4dCk7XG4gICAgfVxuICAgIHJldHVyblxuICB9XG5cbiAgLy8gYXN5bmMgY29tcG9uZW50XG4gIHZhciBhc3luY0ZhY3Rvcnk7XG4gIGlmIChpc1VuZGVmKEN0b3IuY2lkKSkge1xuICAgIGFzeW5jRmFjdG9yeSA9IEN0b3I7XG4gICAgQ3RvciA9IHJlc29sdmVBc3luY0NvbXBvbmVudChhc3luY0ZhY3RvcnksIGJhc2VDdG9yLCBjb250ZXh0KTtcbiAgICBpZiAoQ3RvciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyByZXR1cm4gYSBwbGFjZWhvbGRlciBub2RlIGZvciBhc3luYyBjb21wb25lbnQsIHdoaWNoIGlzIHJlbmRlcmVkXG4gICAgICAvLyBhcyBhIGNvbW1lbnQgbm9kZSBidXQgcHJlc2VydmVzIGFsbCB0aGUgcmF3IGluZm9ybWF0aW9uIGZvciB0aGUgbm9kZS5cbiAgICAgIC8vIHRoZSBpbmZvcm1hdGlvbiB3aWxsIGJlIHVzZWQgZm9yIGFzeW5jIHNlcnZlci1yZW5kZXJpbmcgYW5kIGh5ZHJhdGlvbi5cbiAgICAgIHJldHVybiBjcmVhdGVBc3luY1BsYWNlaG9sZGVyKFxuICAgICAgICBhc3luY0ZhY3RvcnksXG4gICAgICAgIGRhdGEsXG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGNoaWxkcmVuLFxuICAgICAgICB0YWdcbiAgICAgIClcbiAgICB9XG4gIH1cblxuICBkYXRhID0gZGF0YSB8fCB7fTtcblxuICAvLyByZXNvbHZlIGNvbnN0cnVjdG9yIG9wdGlvbnMgaW4gY2FzZSBnbG9iYWwgbWl4aW5zIGFyZSBhcHBsaWVkIGFmdGVyXG4gIC8vIGNvbXBvbmVudCBjb25zdHJ1Y3RvciBjcmVhdGlvblxuICByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zKEN0b3IpO1xuXG4gIC8vIHRyYW5zZm9ybSBjb21wb25lbnQgdi1tb2RlbCBkYXRhIGludG8gcHJvcHMgJiBldmVudHNcbiAgaWYgKGlzRGVmKGRhdGEubW9kZWwpKSB7XG4gICAgdHJhbnNmb3JtTW9kZWwoQ3Rvci5vcHRpb25zLCBkYXRhKTtcbiAgfVxuXG4gIC8vIGV4dHJhY3QgcHJvcHNcbiAgdmFyIHByb3BzRGF0YSA9IGV4dHJhY3RQcm9wc0Zyb21WTm9kZURhdGEoZGF0YSwgQ3RvciwgdGFnKTtcblxuICAvLyBmdW5jdGlvbmFsIGNvbXBvbmVudFxuICBpZiAoaXNUcnVlKEN0b3Iub3B0aW9ucy5mdW5jdGlvbmFsKSkge1xuICAgIHJldHVybiBjcmVhdGVGdW5jdGlvbmFsQ29tcG9uZW50KEN0b3IsIHByb3BzRGF0YSwgZGF0YSwgY29udGV4dCwgY2hpbGRyZW4pXG4gIH1cblxuICAvLyBleHRyYWN0IGxpc3RlbmVycywgc2luY2UgdGhlc2UgbmVlZHMgdG8gYmUgdHJlYXRlZCBhc1xuICAvLyBjaGlsZCBjb21wb25lbnQgbGlzdGVuZXJzIGluc3RlYWQgb2YgRE9NIGxpc3RlbmVyc1xuICB2YXIgbGlzdGVuZXJzID0gZGF0YS5vbjtcbiAgLy8gcmVwbGFjZSB3aXRoIGxpc3RlbmVycyB3aXRoIC5uYXRpdmUgbW9kaWZpZXJcbiAgLy8gc28gaXQgZ2V0cyBwcm9jZXNzZWQgZHVyaW5nIHBhcmVudCBjb21wb25lbnQgcGF0Y2guXG4gIGRhdGEub24gPSBkYXRhLm5hdGl2ZU9uO1xuXG4gIGlmIChpc1RydWUoQ3Rvci5vcHRpb25zLmFic3RyYWN0KSkge1xuICAgIC8vIGFic3RyYWN0IGNvbXBvbmVudHMgZG8gbm90IGtlZXAgYW55dGhpbmdcbiAgICAvLyBvdGhlciB0aGFuIHByb3BzICYgbGlzdGVuZXJzICYgc2xvdFxuXG4gICAgLy8gd29yayBhcm91bmQgZmxvd1xuICAgIHZhciBzbG90ID0gZGF0YS5zbG90O1xuICAgIGRhdGEgPSB7fTtcbiAgICBpZiAoc2xvdCkge1xuICAgICAgZGF0YS5zbG90ID0gc2xvdDtcbiAgICB9XG4gIH1cblxuICAvLyBpbnN0YWxsIGNvbXBvbmVudCBtYW5hZ2VtZW50IGhvb2tzIG9udG8gdGhlIHBsYWNlaG9sZGVyIG5vZGVcbiAgaW5zdGFsbENvbXBvbmVudEhvb2tzKGRhdGEpO1xuXG4gIC8vIHJldHVybiBhIHBsYWNlaG9sZGVyIHZub2RlXG4gIHZhciBuYW1lID0gQ3Rvci5vcHRpb25zLm5hbWUgfHwgdGFnO1xuICB2YXIgdm5vZGUgPSBuZXcgVk5vZGUoXG4gICAgKFwidnVlLWNvbXBvbmVudC1cIiArIChDdG9yLmNpZCkgKyAobmFtZSA/IChcIi1cIiArIG5hbWUpIDogJycpKSxcbiAgICBkYXRhLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBjb250ZXh0LFxuICAgIHsgQ3RvcjogQ3RvciwgcHJvcHNEYXRhOiBwcm9wc0RhdGEsIGxpc3RlbmVyczogbGlzdGVuZXJzLCB0YWc6IHRhZywgY2hpbGRyZW46IGNoaWxkcmVuIH0sXG4gICAgYXN5bmNGYWN0b3J5XG4gICk7XG5cbiAgLy8gV2VleCBzcGVjaWZpYzogaW52b2tlIHJlY3ljbGUtbGlzdCBvcHRpbWl6ZWQgQHJlbmRlciBmdW5jdGlvbiBmb3JcbiAgLy8gZXh0cmFjdGluZyBjZWxsLXNsb3QgdGVtcGxhdGUuXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9IYW5rczEwMTAwL3dlZXgtbmF0aXZlLWRpcmVjdGl2ZS90cmVlL21hc3Rlci9jb21wb25lbnRcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIHJldHVybiB2bm9kZVxufVxuXG5mdW5jdGlvbiBjcmVhdGVDb21wb25lbnRJbnN0YW5jZUZvclZub2RlIChcbiAgdm5vZGUsIC8vIHdlIGtub3cgaXQncyBNb3VudGVkQ29tcG9uZW50Vk5vZGUgYnV0IGZsb3cgZG9lc24ndFxuICBwYXJlbnQsIC8vIGFjdGl2ZUluc3RhbmNlIGluIGxpZmVjeWNsZSBzdGF0ZVxuICBwYXJlbnRFbG0sXG4gIHJlZkVsbVxuKSB7XG4gIHZhciBvcHRpb25zID0ge1xuICAgIF9pc0NvbXBvbmVudDogdHJ1ZSxcbiAgICBwYXJlbnQ6IHBhcmVudCxcbiAgICBfcGFyZW50Vm5vZGU6IHZub2RlLFxuICAgIF9wYXJlbnRFbG06IHBhcmVudEVsbSB8fCBudWxsLFxuICAgIF9yZWZFbG06IHJlZkVsbSB8fCBudWxsXG4gIH07XG4gIC8vIGNoZWNrIGlubGluZS10ZW1wbGF0ZSByZW5kZXIgZnVuY3Rpb25zXG4gIHZhciBpbmxpbmVUZW1wbGF0ZSA9IHZub2RlLmRhdGEuaW5saW5lVGVtcGxhdGU7XG4gIGlmIChpc0RlZihpbmxpbmVUZW1wbGF0ZSkpIHtcbiAgICBvcHRpb25zLnJlbmRlciA9IGlubGluZVRlbXBsYXRlLnJlbmRlcjtcbiAgICBvcHRpb25zLnN0YXRpY1JlbmRlckZucyA9IGlubGluZVRlbXBsYXRlLnN0YXRpY1JlbmRlckZucztcbiAgfVxuICByZXR1cm4gbmV3IHZub2RlLmNvbXBvbmVudE9wdGlvbnMuQ3RvcihvcHRpb25zKVxufVxuXG5mdW5jdGlvbiBpbnN0YWxsQ29tcG9uZW50SG9va3MgKGRhdGEpIHtcbiAgdmFyIGhvb2tzID0gZGF0YS5ob29rIHx8IChkYXRhLmhvb2sgPSB7fSk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgaG9va3NUb01lcmdlLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGhvb2tzVG9NZXJnZVtpXTtcbiAgICBob29rc1trZXldID0gY29tcG9uZW50Vk5vZGVIb29rc1trZXldO1xuICB9XG59XG5cbi8vIHRyYW5zZm9ybSBjb21wb25lbnQgdi1tb2RlbCBpbmZvICh2YWx1ZSBhbmQgY2FsbGJhY2spIGludG9cbi8vIHByb3AgYW5kIGV2ZW50IGhhbmRsZXIgcmVzcGVjdGl2ZWx5LlxuZnVuY3Rpb24gdHJhbnNmb3JtTW9kZWwgKG9wdGlvbnMsIGRhdGEpIHtcbiAgdmFyIHByb3AgPSAob3B0aW9ucy5tb2RlbCAmJiBvcHRpb25zLm1vZGVsLnByb3ApIHx8ICd2YWx1ZSc7XG4gIHZhciBldmVudCA9IChvcHRpb25zLm1vZGVsICYmIG9wdGlvbnMubW9kZWwuZXZlbnQpIHx8ICdpbnB1dCc7KGRhdGEucHJvcHMgfHwgKGRhdGEucHJvcHMgPSB7fSkpW3Byb3BdID0gZGF0YS5tb2RlbC52YWx1ZTtcbiAgdmFyIG9uID0gZGF0YS5vbiB8fCAoZGF0YS5vbiA9IHt9KTtcbiAgaWYgKGlzRGVmKG9uW2V2ZW50XSkpIHtcbiAgICBvbltldmVudF0gPSBbZGF0YS5tb2RlbC5jYWxsYmFja10uY29uY2F0KG9uW2V2ZW50XSk7XG4gIH0gZWxzZSB7XG4gICAgb25bZXZlbnRdID0gZGF0YS5tb2RlbC5jYWxsYmFjaztcbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIFNJTVBMRV9OT1JNQUxJWkUgPSAxO1xudmFyIEFMV0FZU19OT1JNQUxJWkUgPSAyO1xuXG4vLyB3cmFwcGVyIGZ1bmN0aW9uIGZvciBwcm92aWRpbmcgYSBtb3JlIGZsZXhpYmxlIGludGVyZmFjZVxuLy8gd2l0aG91dCBnZXR0aW5nIHllbGxlZCBhdCBieSBmbG93XG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50IChcbiAgY29udGV4dCxcbiAgdGFnLFxuICBkYXRhLFxuICBjaGlsZHJlbixcbiAgbm9ybWFsaXphdGlvblR5cGUsXG4gIGFsd2F5c05vcm1hbGl6ZVxuKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGRhdGEpIHx8IGlzUHJpbWl0aXZlKGRhdGEpKSB7XG4gICAgbm9ybWFsaXphdGlvblR5cGUgPSBjaGlsZHJlbjtcbiAgICBjaGlsZHJlbiA9IGRhdGE7XG4gICAgZGF0YSA9IHVuZGVmaW5lZDtcbiAgfVxuICBpZiAoaXNUcnVlKGFsd2F5c05vcm1hbGl6ZSkpIHtcbiAgICBub3JtYWxpemF0aW9uVHlwZSA9IEFMV0FZU19OT1JNQUxJWkU7XG4gIH1cbiAgcmV0dXJuIF9jcmVhdGVFbGVtZW50KGNvbnRleHQsIHRhZywgZGF0YSwgY2hpbGRyZW4sIG5vcm1hbGl6YXRpb25UeXBlKVxufVxuXG5mdW5jdGlvbiBfY3JlYXRlRWxlbWVudCAoXG4gIGNvbnRleHQsXG4gIHRhZyxcbiAgZGF0YSxcbiAgY2hpbGRyZW4sXG4gIG5vcm1hbGl6YXRpb25UeXBlXG4pIHtcbiAgaWYgKGlzRGVmKGRhdGEpICYmIGlzRGVmKChkYXRhKS5fX29iX18pKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgXCJBdm9pZCB1c2luZyBvYnNlcnZlZCBkYXRhIG9iamVjdCBhcyB2bm9kZSBkYXRhOiBcIiArIChKU09OLnN0cmluZ2lmeShkYXRhKSkgKyBcIlxcblwiICtcbiAgICAgICdBbHdheXMgY3JlYXRlIGZyZXNoIHZub2RlIGRhdGEgb2JqZWN0cyBpbiBlYWNoIHJlbmRlciEnLFxuICAgICAgY29udGV4dFxuICAgICk7XG4gICAgcmV0dXJuIGNyZWF0ZUVtcHR5Vk5vZGUoKVxuICB9XG4gIC8vIG9iamVjdCBzeW50YXggaW4gdi1iaW5kXG4gIGlmIChpc0RlZihkYXRhKSAmJiBpc0RlZihkYXRhLmlzKSkge1xuICAgIHRhZyA9IGRhdGEuaXM7XG4gIH1cbiAgaWYgKCF0YWcpIHtcbiAgICAvLyBpbiBjYXNlIG9mIGNvbXBvbmVudCA6aXMgc2V0IHRvIGZhbHN5IHZhbHVlXG4gICAgcmV0dXJuIGNyZWF0ZUVtcHR5Vk5vZGUoKVxuICB9XG4gIC8vIHdhcm4gYWdhaW5zdCBub24tcHJpbWl0aXZlIGtleVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgIGlzRGVmKGRhdGEpICYmIGlzRGVmKGRhdGEua2V5KSAmJiAhaXNQcmltaXRpdmUoZGF0YS5rZXkpXG4gICkge1xuICAgIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdBdm9pZCB1c2luZyBub24tcHJpbWl0aXZlIHZhbHVlIGFzIGtleSwgJyArXG4gICAgICAgICd1c2Ugc3RyaW5nL251bWJlciB2YWx1ZSBpbnN0ZWFkLicsXG4gICAgICAgIGNvbnRleHRcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIC8vIHN1cHBvcnQgc2luZ2xlIGZ1bmN0aW9uIGNoaWxkcmVuIGFzIGRlZmF1bHQgc2NvcGVkIHNsb3RcbiAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pICYmXG4gICAgdHlwZW9mIGNoaWxkcmVuWzBdID09PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIGRhdGEgPSBkYXRhIHx8IHt9O1xuICAgIGRhdGEuc2NvcGVkU2xvdHMgPSB7IGRlZmF1bHQ6IGNoaWxkcmVuWzBdIH07XG4gICAgY2hpbGRyZW4ubGVuZ3RoID0gMDtcbiAgfVxuICBpZiAobm9ybWFsaXphdGlvblR5cGUgPT09IEFMV0FZU19OT1JNQUxJWkUpIHtcbiAgICBjaGlsZHJlbiA9IG5vcm1hbGl6ZUNoaWxkcmVuKGNoaWxkcmVuKTtcbiAgfSBlbHNlIGlmIChub3JtYWxpemF0aW9uVHlwZSA9PT0gU0lNUExFX05PUk1BTElaRSkge1xuICAgIGNoaWxkcmVuID0gc2ltcGxlTm9ybWFsaXplQ2hpbGRyZW4oY2hpbGRyZW4pO1xuICB9XG4gIHZhciB2bm9kZSwgbnM7XG4gIGlmICh0eXBlb2YgdGFnID09PSAnc3RyaW5nJykge1xuICAgIHZhciBDdG9yO1xuICAgIG5zID0gKGNvbnRleHQuJHZub2RlICYmIGNvbnRleHQuJHZub2RlLm5zKSB8fCBjb25maWcuZ2V0VGFnTmFtZXNwYWNlKHRhZyk7XG4gICAgaWYgKGNvbmZpZy5pc1Jlc2VydmVkVGFnKHRhZykpIHtcbiAgICAgIC8vIHBsYXRmb3JtIGJ1aWx0LWluIGVsZW1lbnRzXG4gICAgICB2bm9kZSA9IG5ldyBWTm9kZShcbiAgICAgICAgY29uZmlnLnBhcnNlUGxhdGZvcm1UYWdOYW1lKHRhZyksIGRhdGEsIGNoaWxkcmVuLFxuICAgICAgICB1bmRlZmluZWQsIHVuZGVmaW5lZCwgY29udGV4dFxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKGlzRGVmKEN0b3IgPSByZXNvbHZlQXNzZXQoY29udGV4dC4kb3B0aW9ucywgJ2NvbXBvbmVudHMnLCB0YWcpKSkge1xuICAgICAgLy8gY29tcG9uZW50XG4gICAgICB2bm9kZSA9IGNyZWF0ZUNvbXBvbmVudChDdG9yLCBkYXRhLCBjb250ZXh0LCBjaGlsZHJlbiwgdGFnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdW5rbm93biBvciB1bmxpc3RlZCBuYW1lc3BhY2VkIGVsZW1lbnRzXG4gICAgICAvLyBjaGVjayBhdCBydW50aW1lIGJlY2F1c2UgaXQgbWF5IGdldCBhc3NpZ25lZCBhIG5hbWVzcGFjZSB3aGVuIGl0c1xuICAgICAgLy8gcGFyZW50IG5vcm1hbGl6ZXMgY2hpbGRyZW5cbiAgICAgIHZub2RlID0gbmV3IFZOb2RlKFxuICAgICAgICB0YWcsIGRhdGEsIGNoaWxkcmVuLFxuICAgICAgICB1bmRlZmluZWQsIHVuZGVmaW5lZCwgY29udGV4dFxuICAgICAgKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gZGlyZWN0IGNvbXBvbmVudCBvcHRpb25zIC8gY29uc3RydWN0b3JcbiAgICB2bm9kZSA9IGNyZWF0ZUNvbXBvbmVudCh0YWcsIGRhdGEsIGNvbnRleHQsIGNoaWxkcmVuKTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheSh2bm9kZSkpIHtcbiAgICByZXR1cm4gdm5vZGVcbiAgfSBlbHNlIGlmIChpc0RlZih2bm9kZSkpIHtcbiAgICBpZiAoaXNEZWYobnMpKSB7IGFwcGx5TlModm5vZGUsIG5zKTsgfVxuICAgIGlmIChpc0RlZihkYXRhKSkgeyByZWdpc3RlckRlZXBCaW5kaW5ncyhkYXRhKTsgfVxuICAgIHJldHVybiB2bm9kZVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBjcmVhdGVFbXB0eVZOb2RlKClcbiAgfVxufVxuXG5mdW5jdGlvbiBhcHBseU5TICh2bm9kZSwgbnMsIGZvcmNlKSB7XG4gIHZub2RlLm5zID0gbnM7XG4gIGlmICh2bm9kZS50YWcgPT09ICdmb3JlaWduT2JqZWN0Jykge1xuICAgIC8vIHVzZSBkZWZhdWx0IG5hbWVzcGFjZSBpbnNpZGUgZm9yZWlnbk9iamVjdFxuICAgIG5zID0gdW5kZWZpbmVkO1xuICAgIGZvcmNlID0gdHJ1ZTtcbiAgfVxuICBpZiAoaXNEZWYodm5vZGUuY2hpbGRyZW4pKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSB2bm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHZhciBjaGlsZCA9IHZub2RlLmNoaWxkcmVuW2ldO1xuICAgICAgaWYgKGlzRGVmKGNoaWxkLnRhZykgJiYgKFxuICAgICAgICBpc1VuZGVmKGNoaWxkLm5zKSB8fCAoaXNUcnVlKGZvcmNlKSAmJiBjaGlsZC50YWcgIT09ICdzdmcnKSkpIHtcbiAgICAgICAgYXBwbHlOUyhjaGlsZCwgbnMsIGZvcmNlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLy8gcmVmICM1MzE4XG4vLyBuZWNlc3NhcnkgdG8gZW5zdXJlIHBhcmVudCByZS1yZW5kZXIgd2hlbiBkZWVwIGJpbmRpbmdzIGxpa2UgOnN0eWxlIGFuZFxuLy8gOmNsYXNzIGFyZSB1c2VkIG9uIHNsb3Qgbm9kZXNcbmZ1bmN0aW9uIHJlZ2lzdGVyRGVlcEJpbmRpbmdzIChkYXRhKSB7XG4gIGlmIChpc09iamVjdChkYXRhLnN0eWxlKSkge1xuICAgIHRyYXZlcnNlKGRhdGEuc3R5bGUpO1xuICB9XG4gIGlmIChpc09iamVjdChkYXRhLmNsYXNzKSkge1xuICAgIHRyYXZlcnNlKGRhdGEuY2xhc3MpO1xuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0UmVuZGVyICh2bSkge1xuICB2bS5fdm5vZGUgPSBudWxsOyAvLyB0aGUgcm9vdCBvZiB0aGUgY2hpbGQgdHJlZVxuICB2bS5fc3RhdGljVHJlZXMgPSBudWxsOyAvLyB2LW9uY2UgY2FjaGVkIHRyZWVzXG4gIHZhciBvcHRpb25zID0gdm0uJG9wdGlvbnM7XG4gIHZhciBwYXJlbnRWbm9kZSA9IHZtLiR2bm9kZSA9IG9wdGlvbnMuX3BhcmVudFZub2RlOyAvLyB0aGUgcGxhY2Vob2xkZXIgbm9kZSBpbiBwYXJlbnQgdHJlZVxuICB2YXIgcmVuZGVyQ29udGV4dCA9IHBhcmVudFZub2RlICYmIHBhcmVudFZub2RlLmNvbnRleHQ7XG4gIHZtLiRzbG90cyA9IHJlc29sdmVTbG90cyhvcHRpb25zLl9yZW5kZXJDaGlsZHJlbiwgcmVuZGVyQ29udGV4dCk7XG4gIHZtLiRzY29wZWRTbG90cyA9IGVtcHR5T2JqZWN0O1xuICAvLyBiaW5kIHRoZSBjcmVhdGVFbGVtZW50IGZuIHRvIHRoaXMgaW5zdGFuY2VcbiAgLy8gc28gdGhhdCB3ZSBnZXQgcHJvcGVyIHJlbmRlciBjb250ZXh0IGluc2lkZSBpdC5cbiAgLy8gYXJncyBvcmRlcjogdGFnLCBkYXRhLCBjaGlsZHJlbiwgbm9ybWFsaXphdGlvblR5cGUsIGFsd2F5c05vcm1hbGl6ZVxuICAvLyBpbnRlcm5hbCB2ZXJzaW9uIGlzIHVzZWQgYnkgcmVuZGVyIGZ1bmN0aW9ucyBjb21waWxlZCBmcm9tIHRlbXBsYXRlc1xuICB2bS5fYyA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7IHJldHVybiBjcmVhdGVFbGVtZW50KHZtLCBhLCBiLCBjLCBkLCBmYWxzZSk7IH07XG4gIC8vIG5vcm1hbGl6YXRpb24gaXMgYWx3YXlzIGFwcGxpZWQgZm9yIHRoZSBwdWJsaWMgdmVyc2lvbiwgdXNlZCBpblxuICAvLyB1c2VyLXdyaXR0ZW4gcmVuZGVyIGZ1bmN0aW9ucy5cbiAgdm0uJGNyZWF0ZUVsZW1lbnQgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkgeyByZXR1cm4gY3JlYXRlRWxlbWVudCh2bSwgYSwgYiwgYywgZCwgdHJ1ZSk7IH07XG5cbiAgLy8gJGF0dHJzICYgJGxpc3RlbmVycyBhcmUgZXhwb3NlZCBmb3IgZWFzaWVyIEhPQyBjcmVhdGlvbi5cbiAgLy8gdGhleSBuZWVkIHRvIGJlIHJlYWN0aXZlIHNvIHRoYXQgSE9DcyB1c2luZyB0aGVtIGFyZSBhbHdheXMgdXBkYXRlZFxuICB2YXIgcGFyZW50RGF0YSA9IHBhcmVudFZub2RlICYmIHBhcmVudFZub2RlLmRhdGE7XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBkZWZpbmVSZWFjdGl2ZSh2bSwgJyRhdHRycycsIHBhcmVudERhdGEgJiYgcGFyZW50RGF0YS5hdHRycyB8fCBlbXB0eU9iamVjdCwgZnVuY3Rpb24gKCkge1xuICAgICAgIWlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCAmJiB3YXJuKFwiJGF0dHJzIGlzIHJlYWRvbmx5LlwiLCB2bSk7XG4gICAgfSwgdHJ1ZSk7XG4gICAgZGVmaW5lUmVhY3RpdmUodm0sICckbGlzdGVuZXJzJywgb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzIHx8IGVtcHR5T2JqZWN0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAhaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ICYmIHdhcm4oXCIkbGlzdGVuZXJzIGlzIHJlYWRvbmx5LlwiLCB2bSk7XG4gICAgfSwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgZGVmaW5lUmVhY3RpdmUodm0sICckYXR0cnMnLCBwYXJlbnREYXRhICYmIHBhcmVudERhdGEuYXR0cnMgfHwgZW1wdHlPYmplY3QsIG51bGwsIHRydWUpO1xuICAgIGRlZmluZVJlYWN0aXZlKHZtLCAnJGxpc3RlbmVycycsIG9wdGlvbnMuX3BhcmVudExpc3RlbmVycyB8fCBlbXB0eU9iamVjdCwgbnVsbCwgdHJ1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVuZGVyTWl4aW4gKFZ1ZSkge1xuICAvLyBpbnN0YWxsIHJ1bnRpbWUgY29udmVuaWVuY2UgaGVscGVyc1xuICBpbnN0YWxsUmVuZGVySGVscGVycyhWdWUucHJvdG90eXBlKTtcblxuICBWdWUucHJvdG90eXBlLiRuZXh0VGljayA9IGZ1bmN0aW9uIChmbikge1xuICAgIHJldHVybiBuZXh0VGljayhmbiwgdGhpcylcbiAgfTtcblxuICBWdWUucHJvdG90eXBlLl9yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICB2YXIgcmVmID0gdm0uJG9wdGlvbnM7XG4gICAgdmFyIHJlbmRlciA9IHJlZi5yZW5kZXI7XG4gICAgdmFyIF9wYXJlbnRWbm9kZSA9IHJlZi5fcGFyZW50Vm5vZGU7XG5cbiAgICAvLyByZXNldCBfcmVuZGVyZWQgZmxhZyBvbiBzbG90cyBmb3IgZHVwbGljYXRlIHNsb3QgY2hlY2tcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgZm9yICh2YXIga2V5IGluIHZtLiRzbG90cykge1xuICAgICAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICAgICAgdm0uJHNsb3RzW2tleV0uX3JlbmRlcmVkID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKF9wYXJlbnRWbm9kZSkge1xuICAgICAgdm0uJHNjb3BlZFNsb3RzID0gX3BhcmVudFZub2RlLmRhdGEuc2NvcGVkU2xvdHMgfHwgZW1wdHlPYmplY3Q7XG4gICAgfVxuXG4gICAgLy8gc2V0IHBhcmVudCB2bm9kZS4gdGhpcyBhbGxvd3MgcmVuZGVyIGZ1bmN0aW9ucyB0byBoYXZlIGFjY2Vzc1xuICAgIC8vIHRvIHRoZSBkYXRhIG9uIHRoZSBwbGFjZWhvbGRlciBub2RlLlxuICAgIHZtLiR2bm9kZSA9IF9wYXJlbnRWbm9kZTtcbiAgICAvLyByZW5kZXIgc2VsZlxuICAgIHZhciB2bm9kZTtcbiAgICB0cnkge1xuICAgICAgdm5vZGUgPSByZW5kZXIuY2FsbCh2bS5fcmVuZGVyUHJveHksIHZtLiRjcmVhdGVFbGVtZW50KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBoYW5kbGVFcnJvcihlLCB2bSwgXCJyZW5kZXJcIik7XG4gICAgICAvLyByZXR1cm4gZXJyb3IgcmVuZGVyIHJlc3VsdCxcbiAgICAgIC8vIG9yIHByZXZpb3VzIHZub2RlIHRvIHByZXZlbnQgcmVuZGVyIGVycm9yIGNhdXNpbmcgYmxhbmsgY29tcG9uZW50XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgaWYgKHZtLiRvcHRpb25zLnJlbmRlckVycm9yKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZub2RlID0gdm0uJG9wdGlvbnMucmVuZGVyRXJyb3IuY2FsbCh2bS5fcmVuZGVyUHJveHksIHZtLiRjcmVhdGVFbGVtZW50LCBlKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBoYW5kbGVFcnJvcihlLCB2bSwgXCJyZW5kZXJFcnJvclwiKTtcbiAgICAgICAgICAgIHZub2RlID0gdm0uX3Zub2RlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2bm9kZSA9IHZtLl92bm9kZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdm5vZGUgPSB2bS5fdm5vZGU7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIHJldHVybiBlbXB0eSB2bm9kZSBpbiBjYXNlIHRoZSByZW5kZXIgZnVuY3Rpb24gZXJyb3JlZCBvdXRcbiAgICBpZiAoISh2bm9kZSBpbnN0YW5jZW9mIFZOb2RlKSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgQXJyYXkuaXNBcnJheSh2bm9kZSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnTXVsdGlwbGUgcm9vdCBub2RlcyByZXR1cm5lZCBmcm9tIHJlbmRlciBmdW5jdGlvbi4gUmVuZGVyIGZ1bmN0aW9uICcgK1xuICAgICAgICAgICdzaG91bGQgcmV0dXJuIGEgc2luZ2xlIHJvb3Qgbm9kZS4nLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICB2bm9kZSA9IGNyZWF0ZUVtcHR5Vk5vZGUoKTtcbiAgICB9XG4gICAgLy8gc2V0IHBhcmVudFxuICAgIHZub2RlLnBhcmVudCA9IF9wYXJlbnRWbm9kZTtcbiAgICByZXR1cm4gdm5vZGVcbiAgfTtcbn1cblxuLyogICovXG5cbnZhciB1aWQkMyA9IDA7XG5cbmZ1bmN0aW9uIGluaXRNaXhpbiAoVnVlKSB7XG4gIFZ1ZS5wcm90b3R5cGUuX2luaXQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgLy8gYSB1aWRcbiAgICB2bS5fdWlkID0gdWlkJDMrKztcblxuICAgIHZhciBzdGFydFRhZywgZW5kVGFnO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGNvbmZpZy5wZXJmb3JtYW5jZSAmJiBtYXJrKSB7XG4gICAgICBzdGFydFRhZyA9IFwidnVlLXBlcmYtc3RhcnQ6XCIgKyAodm0uX3VpZCk7XG4gICAgICBlbmRUYWcgPSBcInZ1ZS1wZXJmLWVuZDpcIiArICh2bS5fdWlkKTtcbiAgICAgIG1hcmsoc3RhcnRUYWcpO1xuICAgIH1cblxuICAgIC8vIGEgZmxhZyB0byBhdm9pZCB0aGlzIGJlaW5nIG9ic2VydmVkXG4gICAgdm0uX2lzVnVlID0gdHJ1ZTtcbiAgICAvLyBtZXJnZSBvcHRpb25zXG4gICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5faXNDb21wb25lbnQpIHtcbiAgICAgIC8vIG9wdGltaXplIGludGVybmFsIGNvbXBvbmVudCBpbnN0YW50aWF0aW9uXG4gICAgICAvLyBzaW5jZSBkeW5hbWljIG9wdGlvbnMgbWVyZ2luZyBpcyBwcmV0dHkgc2xvdywgYW5kIG5vbmUgb2YgdGhlXG4gICAgICAvLyBpbnRlcm5hbCBjb21wb25lbnQgb3B0aW9ucyBuZWVkcyBzcGVjaWFsIHRyZWF0bWVudC5cbiAgICAgIGluaXRJbnRlcm5hbENvbXBvbmVudCh2bSwgb3B0aW9ucyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZtLiRvcHRpb25zID0gbWVyZ2VPcHRpb25zKFxuICAgICAgICByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zKHZtLmNvbnN0cnVjdG9yKSxcbiAgICAgICAgb3B0aW9ucyB8fCB7fSxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfVxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGluaXRQcm94eSh2bSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZtLl9yZW5kZXJQcm94eSA9IHZtO1xuICAgIH1cbiAgICAvLyBleHBvc2UgcmVhbCBzZWxmXG4gICAgdm0uX3NlbGYgPSB2bTtcbiAgICBpbml0TGlmZWN5Y2xlKHZtKTtcbiAgICBpbml0RXZlbnRzKHZtKTtcbiAgICBpbml0UmVuZGVyKHZtKTtcbiAgICBjYWxsSG9vayh2bSwgJ2JlZm9yZUNyZWF0ZScpO1xuICAgIGluaXRJbmplY3Rpb25zKHZtKTsgLy8gcmVzb2x2ZSBpbmplY3Rpb25zIGJlZm9yZSBkYXRhL3Byb3BzXG4gICAgaW5pdFN0YXRlKHZtKTtcbiAgICBpbml0UHJvdmlkZSh2bSk7IC8vIHJlc29sdmUgcHJvdmlkZSBhZnRlciBkYXRhL3Byb3BzXG4gICAgY2FsbEhvb2sodm0sICdjcmVhdGVkJyk7XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjb25maWcucGVyZm9ybWFuY2UgJiYgbWFyaykge1xuICAgICAgdm0uX25hbWUgPSBmb3JtYXRDb21wb25lbnROYW1lKHZtLCBmYWxzZSk7XG4gICAgICBtYXJrKGVuZFRhZyk7XG4gICAgICBtZWFzdXJlKChcInZ1ZSBcIiArICh2bS5fbmFtZSkgKyBcIiBpbml0XCIpLCBzdGFydFRhZywgZW5kVGFnKTtcbiAgICB9XG5cbiAgICBpZiAodm0uJG9wdGlvbnMuZWwpIHtcbiAgICAgIHZtLiRtb3VudCh2bS4kb3B0aW9ucy5lbCk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBpbml0SW50ZXJuYWxDb21wb25lbnQgKHZtLCBvcHRpb25zKSB7XG4gIHZhciBvcHRzID0gdm0uJG9wdGlvbnMgPSBPYmplY3QuY3JlYXRlKHZtLmNvbnN0cnVjdG9yLm9wdGlvbnMpO1xuICAvLyBkb2luZyB0aGlzIGJlY2F1c2UgaXQncyBmYXN0ZXIgdGhhbiBkeW5hbWljIGVudW1lcmF0aW9uLlxuICB2YXIgcGFyZW50Vm5vZGUgPSBvcHRpb25zLl9wYXJlbnRWbm9kZTtcbiAgb3B0cy5wYXJlbnQgPSBvcHRpb25zLnBhcmVudDtcbiAgb3B0cy5fcGFyZW50Vm5vZGUgPSBwYXJlbnRWbm9kZTtcbiAgb3B0cy5fcGFyZW50RWxtID0gb3B0aW9ucy5fcGFyZW50RWxtO1xuICBvcHRzLl9yZWZFbG0gPSBvcHRpb25zLl9yZWZFbG07XG5cbiAgdmFyIHZub2RlQ29tcG9uZW50T3B0aW9ucyA9IHBhcmVudFZub2RlLmNvbXBvbmVudE9wdGlvbnM7XG4gIG9wdHMucHJvcHNEYXRhID0gdm5vZGVDb21wb25lbnRPcHRpb25zLnByb3BzRGF0YTtcbiAgb3B0cy5fcGFyZW50TGlzdGVuZXJzID0gdm5vZGVDb21wb25lbnRPcHRpb25zLmxpc3RlbmVycztcbiAgb3B0cy5fcmVuZGVyQ2hpbGRyZW4gPSB2bm9kZUNvbXBvbmVudE9wdGlvbnMuY2hpbGRyZW47XG4gIG9wdHMuX2NvbXBvbmVudFRhZyA9IHZub2RlQ29tcG9uZW50T3B0aW9ucy50YWc7XG5cbiAgaWYgKG9wdGlvbnMucmVuZGVyKSB7XG4gICAgb3B0cy5yZW5kZXIgPSBvcHRpb25zLnJlbmRlcjtcbiAgICBvcHRzLnN0YXRpY1JlbmRlckZucyA9IG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnMgKEN0b3IpIHtcbiAgdmFyIG9wdGlvbnMgPSBDdG9yLm9wdGlvbnM7XG4gIGlmIChDdG9yLnN1cGVyKSB7XG4gICAgdmFyIHN1cGVyT3B0aW9ucyA9IHJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnMoQ3Rvci5zdXBlcik7XG4gICAgdmFyIGNhY2hlZFN1cGVyT3B0aW9ucyA9IEN0b3Iuc3VwZXJPcHRpb25zO1xuICAgIGlmIChzdXBlck9wdGlvbnMgIT09IGNhY2hlZFN1cGVyT3B0aW9ucykge1xuICAgICAgLy8gc3VwZXIgb3B0aW9uIGNoYW5nZWQsXG4gICAgICAvLyBuZWVkIHRvIHJlc29sdmUgbmV3IG9wdGlvbnMuXG4gICAgICBDdG9yLnN1cGVyT3B0aW9ucyA9IHN1cGVyT3B0aW9ucztcbiAgICAgIC8vIGNoZWNrIGlmIHRoZXJlIGFyZSBhbnkgbGF0ZS1tb2RpZmllZC9hdHRhY2hlZCBvcHRpb25zICgjNDk3NilcbiAgICAgIHZhciBtb2RpZmllZE9wdGlvbnMgPSByZXNvbHZlTW9kaWZpZWRPcHRpb25zKEN0b3IpO1xuICAgICAgLy8gdXBkYXRlIGJhc2UgZXh0ZW5kIG9wdGlvbnNcbiAgICAgIGlmIChtb2RpZmllZE9wdGlvbnMpIHtcbiAgICAgICAgZXh0ZW5kKEN0b3IuZXh0ZW5kT3B0aW9ucywgbW9kaWZpZWRPcHRpb25zKTtcbiAgICAgIH1cbiAgICAgIG9wdGlvbnMgPSBDdG9yLm9wdGlvbnMgPSBtZXJnZU9wdGlvbnMoc3VwZXJPcHRpb25zLCBDdG9yLmV4dGVuZE9wdGlvbnMpO1xuICAgICAgaWYgKG9wdGlvbnMubmFtZSkge1xuICAgICAgICBvcHRpb25zLmNvbXBvbmVudHNbb3B0aW9ucy5uYW1lXSA9IEN0b3I7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBvcHRpb25zXG59XG5cbmZ1bmN0aW9uIHJlc29sdmVNb2RpZmllZE9wdGlvbnMgKEN0b3IpIHtcbiAgdmFyIG1vZGlmaWVkO1xuICB2YXIgbGF0ZXN0ID0gQ3Rvci5vcHRpb25zO1xuICB2YXIgZXh0ZW5kZWQgPSBDdG9yLmV4dGVuZE9wdGlvbnM7XG4gIHZhciBzZWFsZWQgPSBDdG9yLnNlYWxlZE9wdGlvbnM7XG4gIGZvciAodmFyIGtleSBpbiBsYXRlc3QpIHtcbiAgICBpZiAobGF0ZXN0W2tleV0gIT09IHNlYWxlZFtrZXldKSB7XG4gICAgICBpZiAoIW1vZGlmaWVkKSB7IG1vZGlmaWVkID0ge307IH1cbiAgICAgIG1vZGlmaWVkW2tleV0gPSBkZWR1cGUobGF0ZXN0W2tleV0sIGV4dGVuZGVkW2tleV0sIHNlYWxlZFtrZXldKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1vZGlmaWVkXG59XG5cbmZ1bmN0aW9uIGRlZHVwZSAobGF0ZXN0LCBleHRlbmRlZCwgc2VhbGVkKSB7XG4gIC8vIGNvbXBhcmUgbGF0ZXN0IGFuZCBzZWFsZWQgdG8gZW5zdXJlIGxpZmVjeWNsZSBob29rcyB3b24ndCBiZSBkdXBsaWNhdGVkXG4gIC8vIGJldHdlZW4gbWVyZ2VzXG4gIGlmIChBcnJheS5pc0FycmF5KGxhdGVzdCkpIHtcbiAgICB2YXIgcmVzID0gW107XG4gICAgc2VhbGVkID0gQXJyYXkuaXNBcnJheShzZWFsZWQpID8gc2VhbGVkIDogW3NlYWxlZF07XG4gICAgZXh0ZW5kZWQgPSBBcnJheS5pc0FycmF5KGV4dGVuZGVkKSA/IGV4dGVuZGVkIDogW2V4dGVuZGVkXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhdGVzdC5sZW5ndGg7IGkrKykge1xuICAgICAgLy8gcHVzaCBvcmlnaW5hbCBvcHRpb25zIGFuZCBub3Qgc2VhbGVkIG9wdGlvbnMgdG8gZXhjbHVkZSBkdXBsaWNhdGVkIG9wdGlvbnNcbiAgICAgIGlmIChleHRlbmRlZC5pbmRleE9mKGxhdGVzdFtpXSkgPj0gMCB8fCBzZWFsZWQuaW5kZXhPZihsYXRlc3RbaV0pIDwgMCkge1xuICAgICAgICByZXMucHVzaChsYXRlc3RbaV0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGxhdGVzdFxuICB9XG59XG5cbmZ1bmN0aW9uIFZ1ZSAob3B0aW9ucykge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICEodGhpcyBpbnN0YW5jZW9mIFZ1ZSlcbiAgKSB7XG4gICAgd2FybignVnVlIGlzIGEgY29uc3RydWN0b3IgYW5kIHNob3VsZCBiZSBjYWxsZWQgd2l0aCB0aGUgYG5ld2Aga2V5d29yZCcpO1xuICB9XG4gIHRoaXMuX2luaXQob3B0aW9ucyk7XG59XG5cbmluaXRNaXhpbihWdWUpO1xuc3RhdGVNaXhpbihWdWUpO1xuZXZlbnRzTWl4aW4oVnVlKTtcbmxpZmVjeWNsZU1peGluKFZ1ZSk7XG5yZW5kZXJNaXhpbihWdWUpO1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdFVzZSAoVnVlKSB7XG4gIFZ1ZS51c2UgPSBmdW5jdGlvbiAocGx1Z2luKSB7XG4gICAgdmFyIGluc3RhbGxlZFBsdWdpbnMgPSAodGhpcy5faW5zdGFsbGVkUGx1Z2lucyB8fCAodGhpcy5faW5zdGFsbGVkUGx1Z2lucyA9IFtdKSk7XG4gICAgaWYgKGluc3RhbGxlZFBsdWdpbnMuaW5kZXhPZihwbHVnaW4pID4gLTEpIHtcbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgLy8gYWRkaXRpb25hbCBwYXJhbWV0ZXJzXG4gICAgdmFyIGFyZ3MgPSB0b0FycmF5KGFyZ3VtZW50cywgMSk7XG4gICAgYXJncy51bnNoaWZ0KHRoaXMpO1xuICAgIGlmICh0eXBlb2YgcGx1Z2luLmluc3RhbGwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHBsdWdpbi5pbnN0YWxsLmFwcGx5KHBsdWdpbiwgYXJncyk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgcGx1Z2luID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBwbHVnaW4uYXBwbHkobnVsbCwgYXJncyk7XG4gICAgfVxuICAgIGluc3RhbGxlZFBsdWdpbnMucHVzaChwbHVnaW4pO1xuICAgIHJldHVybiB0aGlzXG4gIH07XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0TWl4aW4kMSAoVnVlKSB7XG4gIFZ1ZS5taXhpbiA9IGZ1bmN0aW9uIChtaXhpbikge1xuICAgIHRoaXMub3B0aW9ucyA9IG1lcmdlT3B0aW9ucyh0aGlzLm9wdGlvbnMsIG1peGluKTtcbiAgICByZXR1cm4gdGhpc1xuICB9O1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdEV4dGVuZCAoVnVlKSB7XG4gIC8qKlxuICAgKiBFYWNoIGluc3RhbmNlIGNvbnN0cnVjdG9yLCBpbmNsdWRpbmcgVnVlLCBoYXMgYSB1bmlxdWVcbiAgICogY2lkLiBUaGlzIGVuYWJsZXMgdXMgdG8gY3JlYXRlIHdyYXBwZWQgXCJjaGlsZFxuICAgKiBjb25zdHJ1Y3RvcnNcIiBmb3IgcHJvdG90eXBhbCBpbmhlcml0YW5jZSBhbmQgY2FjaGUgdGhlbS5cbiAgICovXG4gIFZ1ZS5jaWQgPSAwO1xuICB2YXIgY2lkID0gMTtcblxuICAvKipcbiAgICogQ2xhc3MgaW5oZXJpdGFuY2VcbiAgICovXG4gIFZ1ZS5leHRlbmQgPSBmdW5jdGlvbiAoZXh0ZW5kT3B0aW9ucykge1xuICAgIGV4dGVuZE9wdGlvbnMgPSBleHRlbmRPcHRpb25zIHx8IHt9O1xuICAgIHZhciBTdXBlciA9IHRoaXM7XG4gICAgdmFyIFN1cGVySWQgPSBTdXBlci5jaWQ7XG4gICAgdmFyIGNhY2hlZEN0b3JzID0gZXh0ZW5kT3B0aW9ucy5fQ3RvciB8fCAoZXh0ZW5kT3B0aW9ucy5fQ3RvciA9IHt9KTtcbiAgICBpZiAoY2FjaGVkQ3RvcnNbU3VwZXJJZF0pIHtcbiAgICAgIHJldHVybiBjYWNoZWRDdG9yc1tTdXBlcklkXVxuICAgIH1cblxuICAgIHZhciBuYW1lID0gZXh0ZW5kT3B0aW9ucy5uYW1lIHx8IFN1cGVyLm9wdGlvbnMubmFtZTtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBuYW1lKSB7XG4gICAgICB2YWxpZGF0ZUNvbXBvbmVudE5hbWUobmFtZSk7XG4gICAgfVxuXG4gICAgdmFyIFN1YiA9IGZ1bmN0aW9uIFZ1ZUNvbXBvbmVudCAob3B0aW9ucykge1xuICAgICAgdGhpcy5faW5pdChvcHRpb25zKTtcbiAgICB9O1xuICAgIFN1Yi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFN1cGVyLnByb3RvdHlwZSk7XG4gICAgU3ViLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFN1YjtcbiAgICBTdWIuY2lkID0gY2lkKys7XG4gICAgU3ViLm9wdGlvbnMgPSBtZXJnZU9wdGlvbnMoXG4gICAgICBTdXBlci5vcHRpb25zLFxuICAgICAgZXh0ZW5kT3B0aW9uc1xuICAgICk7XG4gICAgU3ViWydzdXBlciddID0gU3VwZXI7XG5cbiAgICAvLyBGb3IgcHJvcHMgYW5kIGNvbXB1dGVkIHByb3BlcnRpZXMsIHdlIGRlZmluZSB0aGUgcHJveHkgZ2V0dGVycyBvblxuICAgIC8vIHRoZSBWdWUgaW5zdGFuY2VzIGF0IGV4dGVuc2lvbiB0aW1lLCBvbiB0aGUgZXh0ZW5kZWQgcHJvdG90eXBlLiBUaGlzXG4gICAgLy8gYXZvaWRzIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSBjYWxscyBmb3IgZWFjaCBpbnN0YW5jZSBjcmVhdGVkLlxuICAgIGlmIChTdWIub3B0aW9ucy5wcm9wcykge1xuICAgICAgaW5pdFByb3BzJDEoU3ViKTtcbiAgICB9XG4gICAgaWYgKFN1Yi5vcHRpb25zLmNvbXB1dGVkKSB7XG4gICAgICBpbml0Q29tcHV0ZWQkMShTdWIpO1xuICAgIH1cblxuICAgIC8vIGFsbG93IGZ1cnRoZXIgZXh0ZW5zaW9uL21peGluL3BsdWdpbiB1c2FnZVxuICAgIFN1Yi5leHRlbmQgPSBTdXBlci5leHRlbmQ7XG4gICAgU3ViLm1peGluID0gU3VwZXIubWl4aW47XG4gICAgU3ViLnVzZSA9IFN1cGVyLnVzZTtcblxuICAgIC8vIGNyZWF0ZSBhc3NldCByZWdpc3RlcnMsIHNvIGV4dGVuZGVkIGNsYXNzZXNcbiAgICAvLyBjYW4gaGF2ZSB0aGVpciBwcml2YXRlIGFzc2V0cyB0b28uXG4gICAgQVNTRVRfVFlQRVMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgICAgU3ViW3R5cGVdID0gU3VwZXJbdHlwZV07XG4gICAgfSk7XG4gICAgLy8gZW5hYmxlIHJlY3Vyc2l2ZSBzZWxmLWxvb2t1cFxuICAgIGlmIChuYW1lKSB7XG4gICAgICBTdWIub3B0aW9ucy5jb21wb25lbnRzW25hbWVdID0gU3ViO1xuICAgIH1cblxuICAgIC8vIGtlZXAgYSByZWZlcmVuY2UgdG8gdGhlIHN1cGVyIG9wdGlvbnMgYXQgZXh0ZW5zaW9uIHRpbWUuXG4gICAgLy8gbGF0ZXIgYXQgaW5zdGFudGlhdGlvbiB3ZSBjYW4gY2hlY2sgaWYgU3VwZXIncyBvcHRpb25zIGhhdmVcbiAgICAvLyBiZWVuIHVwZGF0ZWQuXG4gICAgU3ViLnN1cGVyT3B0aW9ucyA9IFN1cGVyLm9wdGlvbnM7XG4gICAgU3ViLmV4dGVuZE9wdGlvbnMgPSBleHRlbmRPcHRpb25zO1xuICAgIFN1Yi5zZWFsZWRPcHRpb25zID0gZXh0ZW5kKHt9LCBTdWIub3B0aW9ucyk7XG5cbiAgICAvLyBjYWNoZSBjb25zdHJ1Y3RvclxuICAgIGNhY2hlZEN0b3JzW1N1cGVySWRdID0gU3ViO1xuICAgIHJldHVybiBTdWJcbiAgfTtcbn1cblxuZnVuY3Rpb24gaW5pdFByb3BzJDEgKENvbXApIHtcbiAgdmFyIHByb3BzID0gQ29tcC5vcHRpb25zLnByb3BzO1xuICBmb3IgKHZhciBrZXkgaW4gcHJvcHMpIHtcbiAgICBwcm94eShDb21wLnByb3RvdHlwZSwgXCJfcHJvcHNcIiwga2V5KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0Q29tcHV0ZWQkMSAoQ29tcCkge1xuICB2YXIgY29tcHV0ZWQgPSBDb21wLm9wdGlvbnMuY29tcHV0ZWQ7XG4gIGZvciAodmFyIGtleSBpbiBjb21wdXRlZCkge1xuICAgIGRlZmluZUNvbXB1dGVkKENvbXAucHJvdG90eXBlLCBrZXksIGNvbXB1dGVkW2tleV0pO1xuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0QXNzZXRSZWdpc3RlcnMgKFZ1ZSkge1xuICAvKipcbiAgICogQ3JlYXRlIGFzc2V0IHJlZ2lzdHJhdGlvbiBtZXRob2RzLlxuICAgKi9cbiAgQVNTRVRfVFlQRVMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgIFZ1ZVt0eXBlXSA9IGZ1bmN0aW9uIChcbiAgICAgIGlkLFxuICAgICAgZGVmaW5pdGlvblxuICAgICkge1xuICAgICAgaWYgKCFkZWZpbml0aW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnNbdHlwZSArICdzJ11baWRdXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdHlwZSA9PT0gJ2NvbXBvbmVudCcpIHtcbiAgICAgICAgICB2YWxpZGF0ZUNvbXBvbmVudE5hbWUoaWQpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlID09PSAnY29tcG9uZW50JyAmJiBpc1BsYWluT2JqZWN0KGRlZmluaXRpb24pKSB7XG4gICAgICAgICAgZGVmaW5pdGlvbi5uYW1lID0gZGVmaW5pdGlvbi5uYW1lIHx8IGlkO1xuICAgICAgICAgIGRlZmluaXRpb24gPSB0aGlzLm9wdGlvbnMuX2Jhc2UuZXh0ZW5kKGRlZmluaXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlID09PSAnZGlyZWN0aXZlJyAmJiB0eXBlb2YgZGVmaW5pdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGRlZmluaXRpb24gPSB7IGJpbmQ6IGRlZmluaXRpb24sIHVwZGF0ZTogZGVmaW5pdGlvbiB9O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub3B0aW9uc1t0eXBlICsgJ3MnXVtpZF0gPSBkZWZpbml0aW9uO1xuICAgICAgICByZXR1cm4gZGVmaW5pdGlvblxuICAgICAgfVxuICAgIH07XG4gIH0pO1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gZ2V0Q29tcG9uZW50TmFtZSAob3B0cykge1xuICByZXR1cm4gb3B0cyAmJiAob3B0cy5DdG9yLm9wdGlvbnMubmFtZSB8fCBvcHRzLnRhZylcbn1cblxuZnVuY3Rpb24gbWF0Y2hlcyAocGF0dGVybiwgbmFtZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheShwYXR0ZXJuKSkge1xuICAgIHJldHVybiBwYXR0ZXJuLmluZGV4T2YobmFtZSkgPiAtMVxuICB9IGVsc2UgaWYgKHR5cGVvZiBwYXR0ZXJuID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBwYXR0ZXJuLnNwbGl0KCcsJykuaW5kZXhPZihuYW1lKSA+IC0xXG4gIH0gZWxzZSBpZiAoaXNSZWdFeHAocGF0dGVybikpIHtcbiAgICByZXR1cm4gcGF0dGVybi50ZXN0KG5hbWUpXG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgcmV0dXJuIGZhbHNlXG59XG5cbmZ1bmN0aW9uIHBydW5lQ2FjaGUgKGtlZXBBbGl2ZUluc3RhbmNlLCBmaWx0ZXIpIHtcbiAgdmFyIGNhY2hlID0ga2VlcEFsaXZlSW5zdGFuY2UuY2FjaGU7XG4gIHZhciBrZXlzID0ga2VlcEFsaXZlSW5zdGFuY2Uua2V5cztcbiAgdmFyIF92bm9kZSA9IGtlZXBBbGl2ZUluc3RhbmNlLl92bm9kZTtcbiAgZm9yICh2YXIga2V5IGluIGNhY2hlKSB7XG4gICAgdmFyIGNhY2hlZE5vZGUgPSBjYWNoZVtrZXldO1xuICAgIGlmIChjYWNoZWROb2RlKSB7XG4gICAgICB2YXIgbmFtZSA9IGdldENvbXBvbmVudE5hbWUoY2FjaGVkTm9kZS5jb21wb25lbnRPcHRpb25zKTtcbiAgICAgIGlmIChuYW1lICYmICFmaWx0ZXIobmFtZSkpIHtcbiAgICAgICAgcHJ1bmVDYWNoZUVudHJ5KGNhY2hlLCBrZXksIGtleXMsIF92bm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHBydW5lQ2FjaGVFbnRyeSAoXG4gIGNhY2hlLFxuICBrZXksXG4gIGtleXMsXG4gIGN1cnJlbnRcbikge1xuICB2YXIgY2FjaGVkJCQxID0gY2FjaGVba2V5XTtcbiAgaWYgKGNhY2hlZCQkMSAmJiAoIWN1cnJlbnQgfHwgY2FjaGVkJCQxLnRhZyAhPT0gY3VycmVudC50YWcpKSB7XG4gICAgY2FjaGVkJCQxLmNvbXBvbmVudEluc3RhbmNlLiRkZXN0cm95KCk7XG4gIH1cbiAgY2FjaGVba2V5XSA9IG51bGw7XG4gIHJlbW92ZShrZXlzLCBrZXkpO1xufVxuXG52YXIgcGF0dGVyblR5cGVzID0gW1N0cmluZywgUmVnRXhwLCBBcnJheV07XG5cbnZhciBLZWVwQWxpdmUgPSB7XG4gIG5hbWU6ICdrZWVwLWFsaXZlJyxcbiAgYWJzdHJhY3Q6IHRydWUsXG5cbiAgcHJvcHM6IHtcbiAgICBpbmNsdWRlOiBwYXR0ZXJuVHlwZXMsXG4gICAgZXhjbHVkZTogcGF0dGVyblR5cGVzLFxuICAgIG1heDogW1N0cmluZywgTnVtYmVyXVxuICB9LFxuXG4gIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQgKCkge1xuICAgIHRoaXMuY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMua2V5cyA9IFtdO1xuICB9LFxuXG4gIGRlc3Ryb3llZDogZnVuY3Rpb24gZGVzdHJveWVkICgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIGZvciAodmFyIGtleSBpbiB0aGlzJDEuY2FjaGUpIHtcbiAgICAgIHBydW5lQ2FjaGVFbnRyeSh0aGlzJDEuY2FjaGUsIGtleSwgdGhpcyQxLmtleXMpO1xuICAgIH1cbiAgfSxcblxuICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkICgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHRoaXMuJHdhdGNoKCdpbmNsdWRlJywgZnVuY3Rpb24gKHZhbCkge1xuICAgICAgcHJ1bmVDYWNoZSh0aGlzJDEsIGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBtYXRjaGVzKHZhbCwgbmFtZSk7IH0pO1xuICAgIH0pO1xuICAgIHRoaXMuJHdhdGNoKCdleGNsdWRlJywgZnVuY3Rpb24gKHZhbCkge1xuICAgICAgcHJ1bmVDYWNoZSh0aGlzJDEsIGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiAhbWF0Y2hlcyh2YWwsIG5hbWUpOyB9KTtcbiAgICB9KTtcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlciAoKSB7XG4gICAgdmFyIHNsb3QgPSB0aGlzLiRzbG90cy5kZWZhdWx0O1xuICAgIHZhciB2bm9kZSA9IGdldEZpcnN0Q29tcG9uZW50Q2hpbGQoc2xvdCk7XG4gICAgdmFyIGNvbXBvbmVudE9wdGlvbnMgPSB2bm9kZSAmJiB2bm9kZS5jb21wb25lbnRPcHRpb25zO1xuICAgIGlmIChjb21wb25lbnRPcHRpb25zKSB7XG4gICAgICAvLyBjaGVjayBwYXR0ZXJuXG4gICAgICB2YXIgbmFtZSA9IGdldENvbXBvbmVudE5hbWUoY29tcG9uZW50T3B0aW9ucyk7XG4gICAgICB2YXIgcmVmID0gdGhpcztcbiAgICAgIHZhciBpbmNsdWRlID0gcmVmLmluY2x1ZGU7XG4gICAgICB2YXIgZXhjbHVkZSA9IHJlZi5leGNsdWRlO1xuICAgICAgaWYgKFxuICAgICAgICAvLyBub3QgaW5jbHVkZWRcbiAgICAgICAgKGluY2x1ZGUgJiYgKCFuYW1lIHx8ICFtYXRjaGVzKGluY2x1ZGUsIG5hbWUpKSkgfHxcbiAgICAgICAgLy8gZXhjbHVkZWRcbiAgICAgICAgKGV4Y2x1ZGUgJiYgbmFtZSAmJiBtYXRjaGVzKGV4Y2x1ZGUsIG5hbWUpKVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiB2bm9kZVxuICAgICAgfVxuXG4gICAgICB2YXIgcmVmJDEgPSB0aGlzO1xuICAgICAgdmFyIGNhY2hlID0gcmVmJDEuY2FjaGU7XG4gICAgICB2YXIga2V5cyA9IHJlZiQxLmtleXM7XG4gICAgICB2YXIga2V5ID0gdm5vZGUua2V5ID09IG51bGxcbiAgICAgICAgLy8gc2FtZSBjb25zdHJ1Y3RvciBtYXkgZ2V0IHJlZ2lzdGVyZWQgYXMgZGlmZmVyZW50IGxvY2FsIGNvbXBvbmVudHNcbiAgICAgICAgLy8gc28gY2lkIGFsb25lIGlzIG5vdCBlbm91Z2ggKCMzMjY5KVxuICAgICAgICA/IGNvbXBvbmVudE9wdGlvbnMuQ3Rvci5jaWQgKyAoY29tcG9uZW50T3B0aW9ucy50YWcgPyAoXCI6OlwiICsgKGNvbXBvbmVudE9wdGlvbnMudGFnKSkgOiAnJylcbiAgICAgICAgOiB2bm9kZS5rZXk7XG4gICAgICBpZiAoY2FjaGVba2V5XSkge1xuICAgICAgICB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSA9IGNhY2hlW2tleV0uY29tcG9uZW50SW5zdGFuY2U7XG4gICAgICAgIC8vIG1ha2UgY3VycmVudCBrZXkgZnJlc2hlc3RcbiAgICAgICAgcmVtb3ZlKGtleXMsIGtleSk7XG4gICAgICAgIGtleXMucHVzaChrZXkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FjaGVba2V5XSA9IHZub2RlO1xuICAgICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICAgICAgLy8gcHJ1bmUgb2xkZXN0IGVudHJ5XG4gICAgICAgIGlmICh0aGlzLm1heCAmJiBrZXlzLmxlbmd0aCA+IHBhcnNlSW50KHRoaXMubWF4KSkge1xuICAgICAgICAgIHBydW5lQ2FjaGVFbnRyeShjYWNoZSwga2V5c1swXSwga2V5cywgdGhpcy5fdm5vZGUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZub2RlLmRhdGEua2VlcEFsaXZlID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHZub2RlIHx8IChzbG90ICYmIHNsb3RbMF0pXG4gIH1cbn1cblxudmFyIGJ1aWx0SW5Db21wb25lbnRzID0ge1xuICBLZWVwQWxpdmU6IEtlZXBBbGl2ZVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdEdsb2JhbEFQSSAoVnVlKSB7XG4gIC8vIGNvbmZpZ1xuICB2YXIgY29uZmlnRGVmID0ge307XG4gIGNvbmZpZ0RlZi5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBjb25maWc7IH07XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY29uZmlnRGVmLnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdEbyBub3QgcmVwbGFjZSB0aGUgVnVlLmNvbmZpZyBvYmplY3QsIHNldCBpbmRpdmlkdWFsIGZpZWxkcyBpbnN0ZWFkLidcbiAgICAgICk7XG4gICAgfTtcbiAgfVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLCAnY29uZmlnJywgY29uZmlnRGVmKTtcblxuICAvLyBleHBvc2VkIHV0aWwgbWV0aG9kcy5cbiAgLy8gTk9URTogdGhlc2UgYXJlIG5vdCBjb25zaWRlcmVkIHBhcnQgb2YgdGhlIHB1YmxpYyBBUEkgLSBhdm9pZCByZWx5aW5nIG9uXG4gIC8vIHRoZW0gdW5sZXNzIHlvdSBhcmUgYXdhcmUgb2YgdGhlIHJpc2suXG4gIFZ1ZS51dGlsID0ge1xuICAgIHdhcm46IHdhcm4sXG4gICAgZXh0ZW5kOiBleHRlbmQsXG4gICAgbWVyZ2VPcHRpb25zOiBtZXJnZU9wdGlvbnMsXG4gICAgZGVmaW5lUmVhY3RpdmU6IGRlZmluZVJlYWN0aXZlXG4gIH07XG5cbiAgVnVlLnNldCA9IHNldDtcbiAgVnVlLmRlbGV0ZSA9IGRlbDtcbiAgVnVlLm5leHRUaWNrID0gbmV4dFRpY2s7XG5cbiAgVnVlLm9wdGlvbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBBU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgVnVlLm9wdGlvbnNbdHlwZSArICdzJ10gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB9KTtcblxuICAvLyB0aGlzIGlzIHVzZWQgdG8gaWRlbnRpZnkgdGhlIFwiYmFzZVwiIGNvbnN0cnVjdG9yIHRvIGV4dGVuZCBhbGwgcGxhaW4tb2JqZWN0XG4gIC8vIGNvbXBvbmVudHMgd2l0aCBpbiBXZWV4J3MgbXVsdGktaW5zdGFuY2Ugc2NlbmFyaW9zLlxuICBWdWUub3B0aW9ucy5fYmFzZSA9IFZ1ZTtcblxuICBleHRlbmQoVnVlLm9wdGlvbnMuY29tcG9uZW50cywgYnVpbHRJbkNvbXBvbmVudHMpO1xuXG4gIGluaXRVc2UoVnVlKTtcbiAgaW5pdE1peGluJDEoVnVlKTtcbiAgaW5pdEV4dGVuZChWdWUpO1xuICBpbml0QXNzZXRSZWdpc3RlcnMoVnVlKTtcbn1cblxuaW5pdEdsb2JhbEFQSShWdWUpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRpc1NlcnZlcicsIHtcbiAgZ2V0OiBpc1NlcnZlclJlbmRlcmluZ1xufSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJHNzckNvbnRleHQnLCB7XG4gIGdldDogZnVuY3Rpb24gZ2V0ICgpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHJldHVybiB0aGlzLiR2bm9kZSAmJiB0aGlzLiR2bm9kZS5zc3JDb250ZXh0XG4gIH1cbn0pO1xuXG4vLyBleHBvc2UgRnVuY3Rpb25hbFJlbmRlckNvbnRleHQgZm9yIHNzciBydW50aW1lIGhlbHBlciBpbnN0YWxsYXRpb25cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUsICdGdW5jdGlvbmFsUmVuZGVyQ29udGV4dCcsIHtcbiAgdmFsdWU6IEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0XG59KTtcblxuVnVlLnZlcnNpb24gPSAnMi41LjE3JztcblxuLyogICovXG5cbi8vIHRoZXNlIGFyZSByZXNlcnZlZCBmb3Igd2ViIGJlY2F1c2UgdGhleSBhcmUgZGlyZWN0bHkgY29tcGlsZWQgYXdheVxuLy8gZHVyaW5nIHRlbXBsYXRlIGNvbXBpbGF0aW9uXG52YXIgaXNSZXNlcnZlZEF0dHIgPSBtYWtlTWFwKCdzdHlsZSxjbGFzcycpO1xuXG4vLyBhdHRyaWJ1dGVzIHRoYXQgc2hvdWxkIGJlIHVzaW5nIHByb3BzIGZvciBiaW5kaW5nXG52YXIgYWNjZXB0VmFsdWUgPSBtYWtlTWFwKCdpbnB1dCx0ZXh0YXJlYSxvcHRpb24sc2VsZWN0LHByb2dyZXNzJyk7XG52YXIgbXVzdFVzZVByb3AgPSBmdW5jdGlvbiAodGFnLCB0eXBlLCBhdHRyKSB7XG4gIHJldHVybiAoXG4gICAgKGF0dHIgPT09ICd2YWx1ZScgJiYgYWNjZXB0VmFsdWUodGFnKSkgJiYgdHlwZSAhPT0gJ2J1dHRvbicgfHxcbiAgICAoYXR0ciA9PT0gJ3NlbGVjdGVkJyAmJiB0YWcgPT09ICdvcHRpb24nKSB8fFxuICAgIChhdHRyID09PSAnY2hlY2tlZCcgJiYgdGFnID09PSAnaW5wdXQnKSB8fFxuICAgIChhdHRyID09PSAnbXV0ZWQnICYmIHRhZyA9PT0gJ3ZpZGVvJylcbiAgKVxufTtcblxudmFyIGlzRW51bWVyYXRlZEF0dHIgPSBtYWtlTWFwKCdjb250ZW50ZWRpdGFibGUsZHJhZ2dhYmxlLHNwZWxsY2hlY2snKTtcblxudmFyIGlzQm9vbGVhbkF0dHIgPSBtYWtlTWFwKFxuICAnYWxsb3dmdWxsc2NyZWVuLGFzeW5jLGF1dG9mb2N1cyxhdXRvcGxheSxjaGVja2VkLGNvbXBhY3QsY29udHJvbHMsZGVjbGFyZSwnICtcbiAgJ2RlZmF1bHQsZGVmYXVsdGNoZWNrZWQsZGVmYXVsdG11dGVkLGRlZmF1bHRzZWxlY3RlZCxkZWZlcixkaXNhYmxlZCwnICtcbiAgJ2VuYWJsZWQsZm9ybW5vdmFsaWRhdGUsaGlkZGVuLGluZGV0ZXJtaW5hdGUsaW5lcnQsaXNtYXAsaXRlbXNjb3BlLGxvb3AsbXVsdGlwbGUsJyArXG4gICdtdXRlZCxub2hyZWYsbm9yZXNpemUsbm9zaGFkZSxub3ZhbGlkYXRlLG5vd3JhcCxvcGVuLHBhdXNlb25leGl0LHJlYWRvbmx5LCcgK1xuICAncmVxdWlyZWQscmV2ZXJzZWQsc2NvcGVkLHNlYW1sZXNzLHNlbGVjdGVkLHNvcnRhYmxlLHRyYW5zbGF0ZSwnICtcbiAgJ3RydWVzcGVlZCx0eXBlbXVzdG1hdGNoLHZpc2libGUnXG4pO1xuXG52YXIgeGxpbmtOUyA9ICdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJztcblxudmFyIGlzWGxpbmsgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gbmFtZS5jaGFyQXQoNSkgPT09ICc6JyAmJiBuYW1lLnNsaWNlKDAsIDUpID09PSAneGxpbmsnXG59O1xuXG52YXIgZ2V0WGxpbmtQcm9wID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIGlzWGxpbmsobmFtZSkgPyBuYW1lLnNsaWNlKDYsIG5hbWUubGVuZ3RoKSA6ICcnXG59O1xuXG52YXIgaXNGYWxzeUF0dHJWYWx1ZSA9IGZ1bmN0aW9uICh2YWwpIHtcbiAgcmV0dXJuIHZhbCA9PSBudWxsIHx8IHZhbCA9PT0gZmFsc2Vcbn07XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBnZW5DbGFzc0ZvclZub2RlICh2bm9kZSkge1xuICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gIHZhciBwYXJlbnROb2RlID0gdm5vZGU7XG4gIHZhciBjaGlsZE5vZGUgPSB2bm9kZTtcbiAgd2hpbGUgKGlzRGVmKGNoaWxkTm9kZS5jb21wb25lbnRJbnN0YW5jZSkpIHtcbiAgICBjaGlsZE5vZGUgPSBjaGlsZE5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlO1xuICAgIGlmIChjaGlsZE5vZGUgJiYgY2hpbGROb2RlLmRhdGEpIHtcbiAgICAgIGRhdGEgPSBtZXJnZUNsYXNzRGF0YShjaGlsZE5vZGUuZGF0YSwgZGF0YSk7XG4gICAgfVxuICB9XG4gIHdoaWxlIChpc0RlZihwYXJlbnROb2RlID0gcGFyZW50Tm9kZS5wYXJlbnQpKSB7XG4gICAgaWYgKHBhcmVudE5vZGUgJiYgcGFyZW50Tm9kZS5kYXRhKSB7XG4gICAgICBkYXRhID0gbWVyZ2VDbGFzc0RhdGEoZGF0YSwgcGFyZW50Tm9kZS5kYXRhKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlbmRlckNsYXNzKGRhdGEuc3RhdGljQ2xhc3MsIGRhdGEuY2xhc3MpXG59XG5cbmZ1bmN0aW9uIG1lcmdlQ2xhc3NEYXRhIChjaGlsZCwgcGFyZW50KSB7XG4gIHJldHVybiB7XG4gICAgc3RhdGljQ2xhc3M6IGNvbmNhdChjaGlsZC5zdGF0aWNDbGFzcywgcGFyZW50LnN0YXRpY0NsYXNzKSxcbiAgICBjbGFzczogaXNEZWYoY2hpbGQuY2xhc3MpXG4gICAgICA/IFtjaGlsZC5jbGFzcywgcGFyZW50LmNsYXNzXVxuICAgICAgOiBwYXJlbnQuY2xhc3NcbiAgfVxufVxuXG5mdW5jdGlvbiByZW5kZXJDbGFzcyAoXG4gIHN0YXRpY0NsYXNzLFxuICBkeW5hbWljQ2xhc3Ncbikge1xuICBpZiAoaXNEZWYoc3RhdGljQ2xhc3MpIHx8IGlzRGVmKGR5bmFtaWNDbGFzcykpIHtcbiAgICByZXR1cm4gY29uY2F0KHN0YXRpY0NsYXNzLCBzdHJpbmdpZnlDbGFzcyhkeW5hbWljQ2xhc3MpKVxuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHJldHVybiAnJ1xufVxuXG5mdW5jdGlvbiBjb25jYXQgKGEsIGIpIHtcbiAgcmV0dXJuIGEgPyBiID8gKGEgKyAnICcgKyBiKSA6IGEgOiAoYiB8fCAnJylcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5Q2xhc3MgKHZhbHVlKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiBzdHJpbmdpZnlBcnJheSh2YWx1ZSlcbiAgfVxuICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgcmV0dXJuIHN0cmluZ2lmeU9iamVjdCh2YWx1ZSlcbiAgfVxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB2YWx1ZVxuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHJldHVybiAnJ1xufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnlBcnJheSAodmFsdWUpIHtcbiAgdmFyIHJlcyA9ICcnO1xuICB2YXIgc3RyaW5naWZpZWQ7XG4gIGZvciAodmFyIGkgPSAwLCBsID0gdmFsdWUubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgaWYgKGlzRGVmKHN0cmluZ2lmaWVkID0gc3RyaW5naWZ5Q2xhc3ModmFsdWVbaV0pKSAmJiBzdHJpbmdpZmllZCAhPT0gJycpIHtcbiAgICAgIGlmIChyZXMpIHsgcmVzICs9ICcgJzsgfVxuICAgICAgcmVzICs9IHN0cmluZ2lmaWVkO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeU9iamVjdCAodmFsdWUpIHtcbiAgdmFyIHJlcyA9ICcnO1xuICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICBpZiAodmFsdWVba2V5XSkge1xuICAgICAgaWYgKHJlcykgeyByZXMgKz0gJyAnOyB9XG4gICAgICByZXMgKz0ga2V5O1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qICAqL1xuXG52YXIgbmFtZXNwYWNlTWFwID0ge1xuICBzdmc6ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsXG4gIG1hdGg6ICdodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MJ1xufTtcblxudmFyIGlzSFRNTFRhZyA9IG1ha2VNYXAoXG4gICdodG1sLGJvZHksYmFzZSxoZWFkLGxpbmssbWV0YSxzdHlsZSx0aXRsZSwnICtcbiAgJ2FkZHJlc3MsYXJ0aWNsZSxhc2lkZSxmb290ZXIsaGVhZGVyLGgxLGgyLGgzLGg0LGg1LGg2LGhncm91cCxuYXYsc2VjdGlvbiwnICtcbiAgJ2RpdixkZCxkbCxkdCxmaWdjYXB0aW9uLGZpZ3VyZSxwaWN0dXJlLGhyLGltZyxsaSxtYWluLG9sLHAscHJlLHVsLCcgK1xuICAnYSxiLGFiYnIsYmRpLGJkbyxicixjaXRlLGNvZGUsZGF0YSxkZm4sZW0saSxrYmQsbWFyayxxLHJwLHJ0LHJ0YyxydWJ5LCcgK1xuICAncyxzYW1wLHNtYWxsLHNwYW4sc3Ryb25nLHN1YixzdXAsdGltZSx1LHZhcix3YnIsYXJlYSxhdWRpbyxtYXAsdHJhY2ssdmlkZW8sJyArXG4gICdlbWJlZCxvYmplY3QscGFyYW0sc291cmNlLGNhbnZhcyxzY3JpcHQsbm9zY3JpcHQsZGVsLGlucywnICtcbiAgJ2NhcHRpb24sY29sLGNvbGdyb3VwLHRhYmxlLHRoZWFkLHRib2R5LHRkLHRoLHRyLCcgK1xuICAnYnV0dG9uLGRhdGFsaXN0LGZpZWxkc2V0LGZvcm0saW5wdXQsbGFiZWwsbGVnZW5kLG1ldGVyLG9wdGdyb3VwLG9wdGlvbiwnICtcbiAgJ291dHB1dCxwcm9ncmVzcyxzZWxlY3QsdGV4dGFyZWEsJyArXG4gICdkZXRhaWxzLGRpYWxvZyxtZW51LG1lbnVpdGVtLHN1bW1hcnksJyArXG4gICdjb250ZW50LGVsZW1lbnQsc2hhZG93LHRlbXBsYXRlLGJsb2NrcXVvdGUsaWZyYW1lLHRmb290J1xuKTtcblxuLy8gdGhpcyBtYXAgaXMgaW50ZW50aW9uYWxseSBzZWxlY3RpdmUsIG9ubHkgY292ZXJpbmcgU1ZHIGVsZW1lbnRzIHRoYXQgbWF5XG4vLyBjb250YWluIGNoaWxkIGVsZW1lbnRzLlxudmFyIGlzU1ZHID0gbWFrZU1hcChcbiAgJ3N2ZyxhbmltYXRlLGNpcmNsZSxjbGlwcGF0aCxjdXJzb3IsZGVmcyxkZXNjLGVsbGlwc2UsZmlsdGVyLGZvbnQtZmFjZSwnICtcbiAgJ2ZvcmVpZ25PYmplY3QsZyxnbHlwaCxpbWFnZSxsaW5lLG1hcmtlcixtYXNrLG1pc3NpbmctZ2x5cGgscGF0aCxwYXR0ZXJuLCcgK1xuICAncG9seWdvbixwb2x5bGluZSxyZWN0LHN3aXRjaCxzeW1ib2wsdGV4dCx0ZXh0cGF0aCx0c3Bhbix1c2UsdmlldycsXG4gIHRydWVcbik7XG5cblxuXG52YXIgaXNSZXNlcnZlZFRhZyA9IGZ1bmN0aW9uICh0YWcpIHtcbiAgcmV0dXJuIGlzSFRNTFRhZyh0YWcpIHx8IGlzU1ZHKHRhZylcbn07XG5cbmZ1bmN0aW9uIGdldFRhZ05hbWVzcGFjZSAodGFnKSB7XG4gIGlmIChpc1NWRyh0YWcpKSB7XG4gICAgcmV0dXJuICdzdmcnXG4gIH1cbiAgLy8gYmFzaWMgc3VwcG9ydCBmb3IgTWF0aE1MXG4gIC8vIG5vdGUgaXQgZG9lc24ndCBzdXBwb3J0IG90aGVyIE1hdGhNTCBlbGVtZW50cyBiZWluZyBjb21wb25lbnQgcm9vdHNcbiAgaWYgKHRhZyA9PT0gJ21hdGgnKSB7XG4gICAgcmV0dXJuICdtYXRoJ1xuICB9XG59XG5cbnZhciB1bmtub3duRWxlbWVudENhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbmZ1bmN0aW9uIGlzVW5rbm93bkVsZW1lbnQgKHRhZykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKCFpbkJyb3dzZXIpIHtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG4gIGlmIChpc1Jlc2VydmVkVGFnKHRhZykpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuICB0YWcgPSB0YWcudG9Mb3dlckNhc2UoKTtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICh1bmtub3duRWxlbWVudENhY2hlW3RhZ10gIT0gbnVsbCkge1xuICAgIHJldHVybiB1bmtub3duRWxlbWVudENhY2hlW3RhZ11cbiAgfVxuICB2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZyk7XG4gIGlmICh0YWcuaW5kZXhPZignLScpID4gLTEpIHtcbiAgICAvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yODIxMDM2NC8xMDcwMjQ0XG4gICAgcmV0dXJuICh1bmtub3duRWxlbWVudENhY2hlW3RhZ10gPSAoXG4gICAgICBlbC5jb25zdHJ1Y3RvciA9PT0gd2luZG93LkhUTUxVbmtub3duRWxlbWVudCB8fFxuICAgICAgZWwuY29uc3RydWN0b3IgPT09IHdpbmRvdy5IVE1MRWxlbWVudFxuICAgICkpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuICh1bmtub3duRWxlbWVudENhY2hlW3RhZ10gPSAvSFRNTFVua25vd25FbGVtZW50Ly50ZXN0KGVsLnRvU3RyaW5nKCkpKVxuICB9XG59XG5cbnZhciBpc1RleHRJbnB1dFR5cGUgPSBtYWtlTWFwKCd0ZXh0LG51bWJlcixwYXNzd29yZCxzZWFyY2gsZW1haWwsdGVsLHVybCcpO1xuXG4vKiAgKi9cblxuLyoqXG4gKiBRdWVyeSBhbiBlbGVtZW50IHNlbGVjdG9yIGlmIGl0J3Mgbm90IGFuIGVsZW1lbnQgYWxyZWFkeS5cbiAqL1xuZnVuY3Rpb24gcXVlcnkgKGVsKSB7XG4gIGlmICh0eXBlb2YgZWwgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFyIHNlbGVjdGVkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlbCk7XG4gICAgaWYgKCFzZWxlY3RlZCkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICAnQ2Fubm90IGZpbmQgZWxlbWVudDogJyArIGVsXG4gICAgICApO1xuICAgICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgfVxuICAgIHJldHVybiBzZWxlY3RlZFxuICB9IGVsc2Uge1xuICAgIHJldHVybiBlbFxuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50JDEgKHRhZ05hbWUsIHZub2RlKSB7XG4gIHZhciBlbG0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZ05hbWUpO1xuICBpZiAodGFnTmFtZSAhPT0gJ3NlbGVjdCcpIHtcbiAgICByZXR1cm4gZWxtXG4gIH1cbiAgLy8gZmFsc2Ugb3IgbnVsbCB3aWxsIHJlbW92ZSB0aGUgYXR0cmlidXRlIGJ1dCB1bmRlZmluZWQgd2lsbCBub3RcbiAgaWYgKHZub2RlLmRhdGEgJiYgdm5vZGUuZGF0YS5hdHRycyAmJiB2bm9kZS5kYXRhLmF0dHJzLm11bHRpcGxlICE9PSB1bmRlZmluZWQpIHtcbiAgICBlbG0uc2V0QXR0cmlidXRlKCdtdWx0aXBsZScsICdtdWx0aXBsZScpO1xuICB9XG4gIHJldHVybiBlbG1cbn1cblxuZnVuY3Rpb24gY3JlYXRlRWxlbWVudE5TIChuYW1lc3BhY2UsIHRhZ05hbWUpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhuYW1lc3BhY2VNYXBbbmFtZXNwYWNlXSwgdGFnTmFtZSlcbn1cblxuZnVuY3Rpb24gY3JlYXRlVGV4dE5vZGUgKHRleHQpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRleHQpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbW1lbnQgKHRleHQpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQodGV4dClcbn1cblxuZnVuY3Rpb24gaW5zZXJ0QmVmb3JlIChwYXJlbnROb2RlLCBuZXdOb2RlLCByZWZlcmVuY2VOb2RlKSB7XG4gIHBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5ld05vZGUsIHJlZmVyZW5jZU5vZGUpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVDaGlsZCAobm9kZSwgY2hpbGQpIHtcbiAgbm9kZS5yZW1vdmVDaGlsZChjaGlsZCk7XG59XG5cbmZ1bmN0aW9uIGFwcGVuZENoaWxkIChub2RlLCBjaGlsZCkge1xuICBub2RlLmFwcGVuZENoaWxkKGNoaWxkKTtcbn1cblxuZnVuY3Rpb24gcGFyZW50Tm9kZSAobm9kZSkge1xuICByZXR1cm4gbm9kZS5wYXJlbnROb2RlXG59XG5cbmZ1bmN0aW9uIG5leHRTaWJsaW5nIChub2RlKSB7XG4gIHJldHVybiBub2RlLm5leHRTaWJsaW5nXG59XG5cbmZ1bmN0aW9uIHRhZ05hbWUgKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUudGFnTmFtZVxufVxuXG5mdW5jdGlvbiBzZXRUZXh0Q29udGVudCAobm9kZSwgdGV4dCkge1xuICBub2RlLnRleHRDb250ZW50ID0gdGV4dDtcbn1cblxuZnVuY3Rpb24gc2V0U3R5bGVTY29wZSAobm9kZSwgc2NvcGVJZCkge1xuICBub2RlLnNldEF0dHJpYnV0ZShzY29wZUlkLCAnJyk7XG59XG5cblxudmFyIG5vZGVPcHMgPSBPYmplY3QuZnJlZXplKHtcblx0Y3JlYXRlRWxlbWVudDogY3JlYXRlRWxlbWVudCQxLFxuXHRjcmVhdGVFbGVtZW50TlM6IGNyZWF0ZUVsZW1lbnROUyxcblx0Y3JlYXRlVGV4dE5vZGU6IGNyZWF0ZVRleHROb2RlLFxuXHRjcmVhdGVDb21tZW50OiBjcmVhdGVDb21tZW50LFxuXHRpbnNlcnRCZWZvcmU6IGluc2VydEJlZm9yZSxcblx0cmVtb3ZlQ2hpbGQ6IHJlbW92ZUNoaWxkLFxuXHRhcHBlbmRDaGlsZDogYXBwZW5kQ2hpbGQsXG5cdHBhcmVudE5vZGU6IHBhcmVudE5vZGUsXG5cdG5leHRTaWJsaW5nOiBuZXh0U2libGluZyxcblx0dGFnTmFtZTogdGFnTmFtZSxcblx0c2V0VGV4dENvbnRlbnQ6IHNldFRleHRDb250ZW50LFxuXHRzZXRTdHlsZVNjb3BlOiBzZXRTdHlsZVNjb3BlXG59KTtcblxuLyogICovXG5cbnZhciByZWYgPSB7XG4gIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlIChfLCB2bm9kZSkge1xuICAgIHJlZ2lzdGVyUmVmKHZub2RlKTtcbiAgfSxcbiAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUgKG9sZFZub2RlLCB2bm9kZSkge1xuICAgIGlmIChvbGRWbm9kZS5kYXRhLnJlZiAhPT0gdm5vZGUuZGF0YS5yZWYpIHtcbiAgICAgIHJlZ2lzdGVyUmVmKG9sZFZub2RlLCB0cnVlKTtcbiAgICAgIHJlZ2lzdGVyUmVmKHZub2RlKTtcbiAgICB9XG4gIH0sXG4gIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3kgKHZub2RlKSB7XG4gICAgcmVnaXN0ZXJSZWYodm5vZGUsIHRydWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyUmVmICh2bm9kZSwgaXNSZW1vdmFsKSB7XG4gIHZhciBrZXkgPSB2bm9kZS5kYXRhLnJlZjtcbiAgaWYgKCFpc0RlZihrZXkpKSB7IHJldHVybiB9XG5cbiAgdmFyIHZtID0gdm5vZGUuY29udGV4dDtcbiAgdmFyIHJlZiA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlIHx8IHZub2RlLmVsbTtcbiAgdmFyIHJlZnMgPSB2bS4kcmVmcztcbiAgaWYgKGlzUmVtb3ZhbCkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHJlZnNba2V5XSkpIHtcbiAgICAgIHJlbW92ZShyZWZzW2tleV0sIHJlZik7XG4gICAgfSBlbHNlIGlmIChyZWZzW2tleV0gPT09IHJlZikge1xuICAgICAgcmVmc1trZXldID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAodm5vZGUuZGF0YS5yZWZJbkZvcikge1xuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHJlZnNba2V5XSkpIHtcbiAgICAgICAgcmVmc1trZXldID0gW3JlZl07XG4gICAgICB9IGVsc2UgaWYgKHJlZnNba2V5XS5pbmRleE9mKHJlZikgPCAwKSB7XG4gICAgICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgICAgICByZWZzW2tleV0ucHVzaChyZWYpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZWZzW2tleV0gPSByZWY7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogVmlydHVhbCBET00gcGF0Y2hpbmcgYWxnb3JpdGhtIGJhc2VkIG9uIFNuYWJiZG9tIGJ5XG4gKiBTaW1vbiBGcmlpcyBWaW5kdW0gKEBwYWxkZXBpbmQpXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2VcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9wYWxkZXBpbmQvc25hYmJkb20vYmxvYi9tYXN0ZXIvTElDRU5TRVxuICpcbiAqIG1vZGlmaWVkIGJ5IEV2YW4gWW91IChAeXl4OTkwODAzKVxuICpcbiAqIE5vdCB0eXBlLWNoZWNraW5nIHRoaXMgYmVjYXVzZSB0aGlzIGZpbGUgaXMgcGVyZi1jcml0aWNhbCBhbmQgdGhlIGNvc3RcbiAqIG9mIG1ha2luZyBmbG93IHVuZGVyc3RhbmQgaXQgaXMgbm90IHdvcnRoIGl0LlxuICovXG5cbnZhciBlbXB0eU5vZGUgPSBuZXcgVk5vZGUoJycsIHt9LCBbXSk7XG5cbnZhciBob29rcyA9IFsnY3JlYXRlJywgJ2FjdGl2YXRlJywgJ3VwZGF0ZScsICdyZW1vdmUnLCAnZGVzdHJveSddO1xuXG5mdW5jdGlvbiBzYW1lVm5vZGUgKGEsIGIpIHtcbiAgcmV0dXJuIChcbiAgICBhLmtleSA9PT0gYi5rZXkgJiYgKFxuICAgICAgKFxuICAgICAgICBhLnRhZyA9PT0gYi50YWcgJiZcbiAgICAgICAgYS5pc0NvbW1lbnQgPT09IGIuaXNDb21tZW50ICYmXG4gICAgICAgIGlzRGVmKGEuZGF0YSkgPT09IGlzRGVmKGIuZGF0YSkgJiZcbiAgICAgICAgc2FtZUlucHV0VHlwZShhLCBiKVxuICAgICAgKSB8fCAoXG4gICAgICAgIGlzVHJ1ZShhLmlzQXN5bmNQbGFjZWhvbGRlcikgJiZcbiAgICAgICAgYS5hc3luY0ZhY3RvcnkgPT09IGIuYXN5bmNGYWN0b3J5ICYmXG4gICAgICAgIGlzVW5kZWYoYi5hc3luY0ZhY3RvcnkuZXJyb3IpXG4gICAgICApXG4gICAgKVxuICApXG59XG5cbmZ1bmN0aW9uIHNhbWVJbnB1dFR5cGUgKGEsIGIpIHtcbiAgaWYgKGEudGFnICE9PSAnaW5wdXQnKSB7IHJldHVybiB0cnVlIH1cbiAgdmFyIGk7XG4gIHZhciB0eXBlQSA9IGlzRGVmKGkgPSBhLmRhdGEpICYmIGlzRGVmKGkgPSBpLmF0dHJzKSAmJiBpLnR5cGU7XG4gIHZhciB0eXBlQiA9IGlzRGVmKGkgPSBiLmRhdGEpICYmIGlzRGVmKGkgPSBpLmF0dHJzKSAmJiBpLnR5cGU7XG4gIHJldHVybiB0eXBlQSA9PT0gdHlwZUIgfHwgaXNUZXh0SW5wdXRUeXBlKHR5cGVBKSAmJiBpc1RleHRJbnB1dFR5cGUodHlwZUIpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUtleVRvT2xkSWR4IChjaGlsZHJlbiwgYmVnaW5JZHgsIGVuZElkeCkge1xuICB2YXIgaSwga2V5O1xuICB2YXIgbWFwID0ge307XG4gIGZvciAoaSA9IGJlZ2luSWR4OyBpIDw9IGVuZElkeDsgKytpKSB7XG4gICAga2V5ID0gY2hpbGRyZW5baV0ua2V5O1xuICAgIGlmIChpc0RlZihrZXkpKSB7IG1hcFtrZXldID0gaTsgfVxuICB9XG4gIHJldHVybiBtYXBcbn1cblxuZnVuY3Rpb24gY3JlYXRlUGF0Y2hGdW5jdGlvbiAoYmFja2VuZCkge1xuICB2YXIgaSwgajtcbiAgdmFyIGNicyA9IHt9O1xuXG4gIHZhciBtb2R1bGVzID0gYmFja2VuZC5tb2R1bGVzO1xuICB2YXIgbm9kZU9wcyA9IGJhY2tlbmQubm9kZU9wcztcblxuICBmb3IgKGkgPSAwOyBpIDwgaG9va3MubGVuZ3RoOyArK2kpIHtcbiAgICBjYnNbaG9va3NbaV1dID0gW107XG4gICAgZm9yIChqID0gMDsgaiA8IG1vZHVsZXMubGVuZ3RoOyArK2opIHtcbiAgICAgIGlmIChpc0RlZihtb2R1bGVzW2pdW2hvb2tzW2ldXSkpIHtcbiAgICAgICAgY2JzW2hvb2tzW2ldXS5wdXNoKG1vZHVsZXNbal1baG9va3NbaV1dKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBlbXB0eU5vZGVBdCAoZWxtKSB7XG4gICAgcmV0dXJuIG5ldyBWTm9kZShub2RlT3BzLnRhZ05hbWUoZWxtKS50b0xvd2VyQ2FzZSgpLCB7fSwgW10sIHVuZGVmaW5lZCwgZWxtKVxuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlUm1DYiAoY2hpbGRFbG0sIGxpc3RlbmVycykge1xuICAgIGZ1bmN0aW9uIHJlbW92ZSAoKSB7XG4gICAgICBpZiAoLS1yZW1vdmUubGlzdGVuZXJzID09PSAwKSB7XG4gICAgICAgIHJlbW92ZU5vZGUoY2hpbGRFbG0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZW1vdmUubGlzdGVuZXJzID0gbGlzdGVuZXJzO1xuICAgIHJldHVybiByZW1vdmVcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZU5vZGUgKGVsKSB7XG4gICAgdmFyIHBhcmVudCA9IG5vZGVPcHMucGFyZW50Tm9kZShlbCk7XG4gICAgLy8gZWxlbWVudCBtYXkgaGF2ZSBhbHJlYWR5IGJlZW4gcmVtb3ZlZCBkdWUgdG8gdi1odG1sIC8gdi10ZXh0XG4gICAgaWYgKGlzRGVmKHBhcmVudCkpIHtcbiAgICAgIG5vZGVPcHMucmVtb3ZlQ2hpbGQocGFyZW50LCBlbCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaXNVbmtub3duRWxlbWVudCQkMSAodm5vZGUsIGluVlByZSkge1xuICAgIHJldHVybiAoXG4gICAgICAhaW5WUHJlICYmXG4gICAgICAhdm5vZGUubnMgJiZcbiAgICAgICEoXG4gICAgICAgIGNvbmZpZy5pZ25vcmVkRWxlbWVudHMubGVuZ3RoICYmXG4gICAgICAgIGNvbmZpZy5pZ25vcmVkRWxlbWVudHMuc29tZShmdW5jdGlvbiAoaWdub3JlKSB7XG4gICAgICAgICAgcmV0dXJuIGlzUmVnRXhwKGlnbm9yZSlcbiAgICAgICAgICAgID8gaWdub3JlLnRlc3Qodm5vZGUudGFnKVxuICAgICAgICAgICAgOiBpZ25vcmUgPT09IHZub2RlLnRhZ1xuICAgICAgICB9KVxuICAgICAgKSAmJlxuICAgICAgY29uZmlnLmlzVW5rbm93bkVsZW1lbnQodm5vZGUudGFnKVxuICAgIClcbiAgfVxuXG4gIHZhciBjcmVhdGluZ0VsbUluVlByZSA9IDA7XG5cbiAgZnVuY3Rpb24gY3JlYXRlRWxtIChcbiAgICB2bm9kZSxcbiAgICBpbnNlcnRlZFZub2RlUXVldWUsXG4gICAgcGFyZW50RWxtLFxuICAgIHJlZkVsbSxcbiAgICBuZXN0ZWQsXG4gICAgb3duZXJBcnJheSxcbiAgICBpbmRleFxuICApIHtcbiAgICBpZiAoaXNEZWYodm5vZGUuZWxtKSAmJiBpc0RlZihvd25lckFycmF5KSkge1xuICAgICAgLy8gVGhpcyB2bm9kZSB3YXMgdXNlZCBpbiBhIHByZXZpb3VzIHJlbmRlciFcbiAgICAgIC8vIG5vdyBpdCdzIHVzZWQgYXMgYSBuZXcgbm9kZSwgb3ZlcndyaXRpbmcgaXRzIGVsbSB3b3VsZCBjYXVzZVxuICAgICAgLy8gcG90ZW50aWFsIHBhdGNoIGVycm9ycyBkb3duIHRoZSByb2FkIHdoZW4gaXQncyB1c2VkIGFzIGFuIGluc2VydGlvblxuICAgICAgLy8gcmVmZXJlbmNlIG5vZGUuIEluc3RlYWQsIHdlIGNsb25lIHRoZSBub2RlIG9uLWRlbWFuZCBiZWZvcmUgY3JlYXRpbmdcbiAgICAgIC8vIGFzc29jaWF0ZWQgRE9NIGVsZW1lbnQgZm9yIGl0LlxuICAgICAgdm5vZGUgPSBvd25lckFycmF5W2luZGV4XSA9IGNsb25lVk5vZGUodm5vZGUpO1xuICAgIH1cblxuICAgIHZub2RlLmlzUm9vdEluc2VydCA9ICFuZXN0ZWQ7IC8vIGZvciB0cmFuc2l0aW9uIGVudGVyIGNoZWNrXG4gICAgaWYgKGNyZWF0ZUNvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICB2YXIgY2hpbGRyZW4gPSB2bm9kZS5jaGlsZHJlbjtcbiAgICB2YXIgdGFnID0gdm5vZGUudGFnO1xuICAgIGlmIChpc0RlZih0YWcpKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAoZGF0YSAmJiBkYXRhLnByZSkge1xuICAgICAgICAgIGNyZWF0aW5nRWxtSW5WUHJlKys7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzVW5rbm93bkVsZW1lbnQkJDEodm5vZGUsIGNyZWF0aW5nRWxtSW5WUHJlKSkge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAnVW5rbm93biBjdXN0b20gZWxlbWVudDogPCcgKyB0YWcgKyAnPiAtIGRpZCB5b3UgJyArXG4gICAgICAgICAgICAncmVnaXN0ZXIgdGhlIGNvbXBvbmVudCBjb3JyZWN0bHk/IEZvciByZWN1cnNpdmUgY29tcG9uZW50cywgJyArXG4gICAgICAgICAgICAnbWFrZSBzdXJlIHRvIHByb3ZpZGUgdGhlIFwibmFtZVwiIG9wdGlvbi4nLFxuICAgICAgICAgICAgdm5vZGUuY29udGV4dFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdm5vZGUuZWxtID0gdm5vZGUubnNcbiAgICAgICAgPyBub2RlT3BzLmNyZWF0ZUVsZW1lbnROUyh2bm9kZS5ucywgdGFnKVxuICAgICAgICA6IG5vZGVPcHMuY3JlYXRlRWxlbWVudCh0YWcsIHZub2RlKTtcbiAgICAgIHNldFNjb3BlKHZub2RlKTtcblxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICB7XG4gICAgICAgIGNyZWF0ZUNoaWxkcmVuKHZub2RlLCBjaGlsZHJlbiwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICAgICAgaW52b2tlQ3JlYXRlSG9va3Modm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBkYXRhICYmIGRhdGEucHJlKSB7XG4gICAgICAgIGNyZWF0aW5nRWxtSW5WUHJlLS07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc1RydWUodm5vZGUuaXNDb21tZW50KSkge1xuICAgICAgdm5vZGUuZWxtID0gbm9kZU9wcy5jcmVhdGVDb21tZW50KHZub2RlLnRleHQpO1xuICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB2bm9kZS5lbG0gPSBub2RlT3BzLmNyZWF0ZVRleHROb2RlKHZub2RlLnRleHQpO1xuICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUNvbXBvbmVudCAodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pIHtcbiAgICB2YXIgaSA9IHZub2RlLmRhdGE7XG4gICAgaWYgKGlzRGVmKGkpKSB7XG4gICAgICB2YXIgaXNSZWFjdGl2YXRlZCA9IGlzRGVmKHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSAmJiBpLmtlZXBBbGl2ZTtcbiAgICAgIGlmIChpc0RlZihpID0gaS5ob29rKSAmJiBpc0RlZihpID0gaS5pbml0KSkge1xuICAgICAgICBpKHZub2RlLCBmYWxzZSAvKiBoeWRyYXRpbmcgKi8sIHBhcmVudEVsbSwgcmVmRWxtKTtcbiAgICAgIH1cbiAgICAgIC8vIGFmdGVyIGNhbGxpbmcgdGhlIGluaXQgaG9vaywgaWYgdGhlIHZub2RlIGlzIGEgY2hpbGQgY29tcG9uZW50XG4gICAgICAvLyBpdCBzaG91bGQndmUgY3JlYXRlZCBhIGNoaWxkIGluc3RhbmNlIGFuZCBtb3VudGVkIGl0LiB0aGUgY2hpbGRcbiAgICAgIC8vIGNvbXBvbmVudCBhbHNvIGhhcyBzZXQgdGhlIHBsYWNlaG9sZGVyIHZub2RlJ3MgZWxtLlxuICAgICAgLy8gaW4gdGhhdCBjYXNlIHdlIGNhbiBqdXN0IHJldHVybiB0aGUgZWxlbWVudCBhbmQgYmUgZG9uZS5cbiAgICAgIGlmIChpc0RlZih2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkpIHtcbiAgICAgICAgaW5pdENvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgaWYgKGlzVHJ1ZShpc1JlYWN0aXZhdGVkKSkge1xuICAgICAgICAgIHJlYWN0aXZhdGVDb21wb25lbnQodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW5pdENvbXBvbmVudCAodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSkge1xuICAgIGlmIChpc0RlZih2bm9kZS5kYXRhLnBlbmRpbmdJbnNlcnQpKSB7XG4gICAgICBpbnNlcnRlZFZub2RlUXVldWUucHVzaC5hcHBseShpbnNlcnRlZFZub2RlUXVldWUsIHZub2RlLmRhdGEucGVuZGluZ0luc2VydCk7XG4gICAgICB2bm9kZS5kYXRhLnBlbmRpbmdJbnNlcnQgPSBudWxsO1xuICAgIH1cbiAgICB2bm9kZS5lbG0gPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZS4kZWw7XG4gICAgaWYgKGlzUGF0Y2hhYmxlKHZub2RlKSkge1xuICAgICAgaW52b2tlQ3JlYXRlSG9va3Modm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICBzZXRTY29wZSh2bm9kZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGVtcHR5IGNvbXBvbmVudCByb290LlxuICAgICAgLy8gc2tpcCBhbGwgZWxlbWVudC1yZWxhdGVkIG1vZHVsZXMgZXhjZXB0IGZvciByZWYgKCMzNDU1KVxuICAgICAgcmVnaXN0ZXJSZWYodm5vZGUpO1xuICAgICAgLy8gbWFrZSBzdXJlIHRvIGludm9rZSB0aGUgaW5zZXJ0IGhvb2tcbiAgICAgIGluc2VydGVkVm5vZGVRdWV1ZS5wdXNoKHZub2RlKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZWFjdGl2YXRlQ29tcG9uZW50ICh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSkge1xuICAgIHZhciBpO1xuICAgIC8vIGhhY2sgZm9yICM0MzM5OiBhIHJlYWN0aXZhdGVkIGNvbXBvbmVudCB3aXRoIGlubmVyIHRyYW5zaXRpb25cbiAgICAvLyBkb2VzIG5vdCB0cmlnZ2VyIGJlY2F1c2UgdGhlIGlubmVyIG5vZGUncyBjcmVhdGVkIGhvb2tzIGFyZSBub3QgY2FsbGVkXG4gICAgLy8gYWdhaW4uIEl0J3Mgbm90IGlkZWFsIHRvIGludm9sdmUgbW9kdWxlLXNwZWNpZmljIGxvZ2ljIGluIGhlcmUgYnV0XG4gICAgLy8gdGhlcmUgZG9lc24ndCBzZWVtIHRvIGJlIGEgYmV0dGVyIHdheSB0byBkbyBpdC5cbiAgICB2YXIgaW5uZXJOb2RlID0gdm5vZGU7XG4gICAgd2hpbGUgKGlubmVyTm9kZS5jb21wb25lbnRJbnN0YW5jZSkge1xuICAgICAgaW5uZXJOb2RlID0gaW5uZXJOb2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZTtcbiAgICAgIGlmIChpc0RlZihpID0gaW5uZXJOb2RlLmRhdGEpICYmIGlzRGVmKGkgPSBpLnRyYW5zaXRpb24pKSB7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBjYnMuYWN0aXZhdGUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICBjYnMuYWN0aXZhdGVbaV0oZW1wdHlOb2RlLCBpbm5lck5vZGUpO1xuICAgICAgICB9XG4gICAgICAgIGluc2VydGVkVm5vZGVRdWV1ZS5wdXNoKGlubmVyTm9kZSk7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICAgIC8vIHVubGlrZSBhIG5ld2x5IGNyZWF0ZWQgY29tcG9uZW50LFxuICAgIC8vIGEgcmVhY3RpdmF0ZWQga2VlcC1hbGl2ZSBjb21wb25lbnQgZG9lc24ndCBpbnNlcnQgaXRzZWxmXG4gICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5zZXJ0IChwYXJlbnQsIGVsbSwgcmVmJCQxKSB7XG4gICAgaWYgKGlzRGVmKHBhcmVudCkpIHtcbiAgICAgIGlmIChpc0RlZihyZWYkJDEpKSB7XG4gICAgICAgIGlmIChyZWYkJDEucGFyZW50Tm9kZSA9PT0gcGFyZW50KSB7XG4gICAgICAgICAgbm9kZU9wcy5pbnNlcnRCZWZvcmUocGFyZW50LCBlbG0sIHJlZiQkMSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGVPcHMuYXBwZW5kQ2hpbGQocGFyZW50LCBlbG0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUNoaWxkcmVuICh2bm9kZSwgY2hpbGRyZW4sIGluc2VydGVkVm5vZGVRdWV1ZSkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgY2hlY2tEdXBsaWNhdGVLZXlzKGNoaWxkcmVuKTtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgY3JlYXRlRWxtKGNoaWxkcmVuW2ldLCBpbnNlcnRlZFZub2RlUXVldWUsIHZub2RlLmVsbSwgbnVsbCwgdHJ1ZSwgY2hpbGRyZW4sIGkpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNQcmltaXRpdmUodm5vZGUudGV4dCkpIHtcbiAgICAgIG5vZGVPcHMuYXBwZW5kQ2hpbGQodm5vZGUuZWxtLCBub2RlT3BzLmNyZWF0ZVRleHROb2RlKFN0cmluZyh2bm9kZS50ZXh0KSkpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGlzUGF0Y2hhYmxlICh2bm9kZSkge1xuICAgIHdoaWxlICh2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkge1xuICAgICAgdm5vZGUgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGU7XG4gICAgfVxuICAgIHJldHVybiBpc0RlZih2bm9kZS50YWcpXG4gIH1cblxuICBmdW5jdGlvbiBpbnZva2VDcmVhdGVIb29rcyAodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSkge1xuICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IGNicy5jcmVhdGUubGVuZ3RoOyArK2kkMSkge1xuICAgICAgY2JzLmNyZWF0ZVtpJDFdKGVtcHR5Tm9kZSwgdm5vZGUpO1xuICAgIH1cbiAgICBpID0gdm5vZGUuZGF0YS5ob29rOyAvLyBSZXVzZSB2YXJpYWJsZVxuICAgIGlmIChpc0RlZihpKSkge1xuICAgICAgaWYgKGlzRGVmKGkuY3JlYXRlKSkgeyBpLmNyZWF0ZShlbXB0eU5vZGUsIHZub2RlKTsgfVxuICAgICAgaWYgKGlzRGVmKGkuaW5zZXJ0KSkgeyBpbnNlcnRlZFZub2RlUXVldWUucHVzaCh2bm9kZSk7IH1cbiAgICB9XG4gIH1cblxuICAvLyBzZXQgc2NvcGUgaWQgYXR0cmlidXRlIGZvciBzY29wZWQgQ1NTLlxuICAvLyB0aGlzIGlzIGltcGxlbWVudGVkIGFzIGEgc3BlY2lhbCBjYXNlIHRvIGF2b2lkIHRoZSBvdmVyaGVhZFxuICAvLyBvZiBnb2luZyB0aHJvdWdoIHRoZSBub3JtYWwgYXR0cmlidXRlIHBhdGNoaW5nIHByb2Nlc3MuXG4gIGZ1bmN0aW9uIHNldFNjb3BlICh2bm9kZSkge1xuICAgIHZhciBpO1xuICAgIGlmIChpc0RlZihpID0gdm5vZGUuZm5TY29wZUlkKSkge1xuICAgICAgbm9kZU9wcy5zZXRTdHlsZVNjb3BlKHZub2RlLmVsbSwgaSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhbmNlc3RvciA9IHZub2RlO1xuICAgICAgd2hpbGUgKGFuY2VzdG9yKSB7XG4gICAgICAgIGlmIChpc0RlZihpID0gYW5jZXN0b3IuY29udGV4dCkgJiYgaXNEZWYoaSA9IGkuJG9wdGlvbnMuX3Njb3BlSWQpKSB7XG4gICAgICAgICAgbm9kZU9wcy5zZXRTdHlsZVNjb3BlKHZub2RlLmVsbSwgaSk7XG4gICAgICAgIH1cbiAgICAgICAgYW5jZXN0b3IgPSBhbmNlc3Rvci5wYXJlbnQ7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIGZvciBzbG90IGNvbnRlbnQgdGhleSBzaG91bGQgYWxzbyBnZXQgdGhlIHNjb3BlSWQgZnJvbSB0aGUgaG9zdCBpbnN0YW5jZS5cbiAgICBpZiAoaXNEZWYoaSA9IGFjdGl2ZUluc3RhbmNlKSAmJlxuICAgICAgaSAhPT0gdm5vZGUuY29udGV4dCAmJlxuICAgICAgaSAhPT0gdm5vZGUuZm5Db250ZXh0ICYmXG4gICAgICBpc0RlZihpID0gaS4kb3B0aW9ucy5fc2NvcGVJZClcbiAgICApIHtcbiAgICAgIG5vZGVPcHMuc2V0U3R5bGVTY29wZSh2bm9kZS5lbG0sIGkpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZFZub2RlcyAocGFyZW50RWxtLCByZWZFbG0sIHZub2Rlcywgc3RhcnRJZHgsIGVuZElkeCwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSB7XG4gICAgZm9yICg7IHN0YXJ0SWR4IDw9IGVuZElkeDsgKytzdGFydElkeCkge1xuICAgICAgY3JlYXRlRWxtKHZub2Rlc1tzdGFydElkeF0sIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0sIGZhbHNlLCB2bm9kZXMsIHN0YXJ0SWR4KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbnZva2VEZXN0cm95SG9vayAodm5vZGUpIHtcbiAgICB2YXIgaSwgajtcbiAgICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICBpZiAoaXNEZWYoaSA9IGRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkuZGVzdHJveSkpIHsgaSh2bm9kZSk7IH1cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBjYnMuZGVzdHJveS5sZW5ndGg7ICsraSkgeyBjYnMuZGVzdHJveVtpXSh2bm9kZSk7IH1cbiAgICB9XG4gICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5jaGlsZHJlbikpIHtcbiAgICAgIGZvciAoaiA9IDA7IGogPCB2bm9kZS5jaGlsZHJlbi5sZW5ndGg7ICsraikge1xuICAgICAgICBpbnZva2VEZXN0cm95SG9vayh2bm9kZS5jaGlsZHJlbltqXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlVm5vZGVzIChwYXJlbnRFbG0sIHZub2Rlcywgc3RhcnRJZHgsIGVuZElkeCkge1xuICAgIGZvciAoOyBzdGFydElkeCA8PSBlbmRJZHg7ICsrc3RhcnRJZHgpIHtcbiAgICAgIHZhciBjaCA9IHZub2Rlc1tzdGFydElkeF07XG4gICAgICBpZiAoaXNEZWYoY2gpKSB7XG4gICAgICAgIGlmIChpc0RlZihjaC50YWcpKSB7XG4gICAgICAgICAgcmVtb3ZlQW5kSW52b2tlUmVtb3ZlSG9vayhjaCk7XG4gICAgICAgICAgaW52b2tlRGVzdHJveUhvb2soY2gpO1xuICAgICAgICB9IGVsc2UgeyAvLyBUZXh0IG5vZGVcbiAgICAgICAgICByZW1vdmVOb2RlKGNoLmVsbSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVBbmRJbnZva2VSZW1vdmVIb29rICh2bm9kZSwgcm0pIHtcbiAgICBpZiAoaXNEZWYocm0pIHx8IGlzRGVmKHZub2RlLmRhdGEpKSB7XG4gICAgICB2YXIgaTtcbiAgICAgIHZhciBsaXN0ZW5lcnMgPSBjYnMucmVtb3ZlLmxlbmd0aCArIDE7XG4gICAgICBpZiAoaXNEZWYocm0pKSB7XG4gICAgICAgIC8vIHdlIGhhdmUgYSByZWN1cnNpdmVseSBwYXNzZWQgZG93biBybSBjYWxsYmFja1xuICAgICAgICAvLyBpbmNyZWFzZSB0aGUgbGlzdGVuZXJzIGNvdW50XG4gICAgICAgIHJtLmxpc3RlbmVycyArPSBsaXN0ZW5lcnM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBkaXJlY3RseSByZW1vdmluZ1xuICAgICAgICBybSA9IGNyZWF0ZVJtQ2Iodm5vZGUuZWxtLCBsaXN0ZW5lcnMpO1xuICAgICAgfVxuICAgICAgLy8gcmVjdXJzaXZlbHkgaW52b2tlIGhvb2tzIG9uIGNoaWxkIGNvbXBvbmVudCByb290IG5vZGVcbiAgICAgIGlmIChpc0RlZihpID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UpICYmIGlzRGVmKGkgPSBpLl92bm9kZSkgJiYgaXNEZWYoaS5kYXRhKSkge1xuICAgICAgICByZW1vdmVBbmRJbnZva2VSZW1vdmVIb29rKGksIHJtKTtcbiAgICAgIH1cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBjYnMucmVtb3ZlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNicy5yZW1vdmVbaV0odm5vZGUsIHJtKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0RlZihpID0gdm5vZGUuZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5yZW1vdmUpKSB7XG4gICAgICAgIGkodm5vZGUsIHJtKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJtKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW92ZU5vZGUodm5vZGUuZWxtKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVDaGlsZHJlbiAocGFyZW50RWxtLCBvbGRDaCwgbmV3Q2gsIGluc2VydGVkVm5vZGVRdWV1ZSwgcmVtb3ZlT25seSkge1xuICAgIHZhciBvbGRTdGFydElkeCA9IDA7XG4gICAgdmFyIG5ld1N0YXJ0SWR4ID0gMDtcbiAgICB2YXIgb2xkRW5kSWR4ID0gb2xkQ2gubGVuZ3RoIC0gMTtcbiAgICB2YXIgb2xkU3RhcnRWbm9kZSA9IG9sZENoWzBdO1xuICAgIHZhciBvbGRFbmRWbm9kZSA9IG9sZENoW29sZEVuZElkeF07XG4gICAgdmFyIG5ld0VuZElkeCA9IG5ld0NoLmxlbmd0aCAtIDE7XG4gICAgdmFyIG5ld1N0YXJ0Vm5vZGUgPSBuZXdDaFswXTtcbiAgICB2YXIgbmV3RW5kVm5vZGUgPSBuZXdDaFtuZXdFbmRJZHhdO1xuICAgIHZhciBvbGRLZXlUb0lkeCwgaWR4SW5PbGQsIHZub2RlVG9Nb3ZlLCByZWZFbG07XG5cbiAgICAvLyByZW1vdmVPbmx5IGlzIGEgc3BlY2lhbCBmbGFnIHVzZWQgb25seSBieSA8dHJhbnNpdGlvbi1ncm91cD5cbiAgICAvLyB0byBlbnN1cmUgcmVtb3ZlZCBlbGVtZW50cyBzdGF5IGluIGNvcnJlY3QgcmVsYXRpdmUgcG9zaXRpb25zXG4gICAgLy8gZHVyaW5nIGxlYXZpbmcgdHJhbnNpdGlvbnNcbiAgICB2YXIgY2FuTW92ZSA9ICFyZW1vdmVPbmx5O1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNoZWNrRHVwbGljYXRlS2V5cyhuZXdDaCk7XG4gICAgfVxuXG4gICAgd2hpbGUgKG9sZFN0YXJ0SWR4IDw9IG9sZEVuZElkeCAmJiBuZXdTdGFydElkeCA8PSBuZXdFbmRJZHgpIHtcbiAgICAgIGlmIChpc1VuZGVmKG9sZFN0YXJ0Vm5vZGUpKSB7XG4gICAgICAgIG9sZFN0YXJ0Vm5vZGUgPSBvbGRDaFsrK29sZFN0YXJ0SWR4XTsgLy8gVm5vZGUgaGFzIGJlZW4gbW92ZWQgbGVmdFxuICAgICAgfSBlbHNlIGlmIChpc1VuZGVmKG9sZEVuZFZub2RlKSkge1xuICAgICAgICBvbGRFbmRWbm9kZSA9IG9sZENoWy0tb2xkRW5kSWR4XTtcbiAgICAgIH0gZWxzZSBpZiAoc2FtZVZub2RlKG9sZFN0YXJ0Vm5vZGUsIG5ld1N0YXJ0Vm5vZGUpKSB7XG4gICAgICAgIHBhdGNoVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgb2xkU3RhcnRWbm9kZSA9IG9sZENoWysrb2xkU3RhcnRJZHhdO1xuICAgICAgICBuZXdTdGFydFZub2RlID0gbmV3Q2hbKytuZXdTdGFydElkeF07XG4gICAgICB9IGVsc2UgaWYgKHNhbWVWbm9kZShvbGRFbmRWbm9kZSwgbmV3RW5kVm5vZGUpKSB7XG4gICAgICAgIHBhdGNoVm5vZGUob2xkRW5kVm5vZGUsIG5ld0VuZFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICBvbGRFbmRWbm9kZSA9IG9sZENoWy0tb2xkRW5kSWR4XTtcbiAgICAgICAgbmV3RW5kVm5vZGUgPSBuZXdDaFstLW5ld0VuZElkeF07XG4gICAgICB9IGVsc2UgaWYgKHNhbWVWbm9kZShvbGRTdGFydFZub2RlLCBuZXdFbmRWbm9kZSkpIHsgLy8gVm5vZGUgbW92ZWQgcmlnaHRcbiAgICAgICAgcGF0Y2hWbm9kZShvbGRTdGFydFZub2RlLCBuZXdFbmRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgY2FuTW92ZSAmJiBub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnRFbG0sIG9sZFN0YXJ0Vm5vZGUuZWxtLCBub2RlT3BzLm5leHRTaWJsaW5nKG9sZEVuZFZub2RlLmVsbSkpO1xuICAgICAgICBvbGRTdGFydFZub2RlID0gb2xkQ2hbKytvbGRTdGFydElkeF07XG4gICAgICAgIG5ld0VuZFZub2RlID0gbmV3Q2hbLS1uZXdFbmRJZHhdO1xuICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkRW5kVm5vZGUsIG5ld1N0YXJ0Vm5vZGUpKSB7IC8vIFZub2RlIG1vdmVkIGxlZnRcbiAgICAgICAgcGF0Y2hWbm9kZShvbGRFbmRWbm9kZSwgbmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgY2FuTW92ZSAmJiBub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnRFbG0sIG9sZEVuZFZub2RlLmVsbSwgb2xkU3RhcnRWbm9kZS5lbG0pO1xuICAgICAgICBvbGRFbmRWbm9kZSA9IG9sZENoWy0tb2xkRW5kSWR4XTtcbiAgICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGlzVW5kZWYob2xkS2V5VG9JZHgpKSB7IG9sZEtleVRvSWR4ID0gY3JlYXRlS2V5VG9PbGRJZHgob2xkQ2gsIG9sZFN0YXJ0SWR4LCBvbGRFbmRJZHgpOyB9XG4gICAgICAgIGlkeEluT2xkID0gaXNEZWYobmV3U3RhcnRWbm9kZS5rZXkpXG4gICAgICAgICAgPyBvbGRLZXlUb0lkeFtuZXdTdGFydFZub2RlLmtleV1cbiAgICAgICAgICA6IGZpbmRJZHhJbk9sZChuZXdTdGFydFZub2RlLCBvbGRDaCwgb2xkU3RhcnRJZHgsIG9sZEVuZElkeCk7XG4gICAgICAgIGlmIChpc1VuZGVmKGlkeEluT2xkKSkgeyAvLyBOZXcgZWxlbWVudFxuICAgICAgICAgIGNyZWF0ZUVsbShuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgb2xkU3RhcnRWbm9kZS5lbG0sIGZhbHNlLCBuZXdDaCwgbmV3U3RhcnRJZHgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZub2RlVG9Nb3ZlID0gb2xkQ2hbaWR4SW5PbGRdO1xuICAgICAgICAgIGlmIChzYW1lVm5vZGUodm5vZGVUb01vdmUsIG5ld1N0YXJ0Vm5vZGUpKSB7XG4gICAgICAgICAgICBwYXRjaFZub2RlKHZub2RlVG9Nb3ZlLCBuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICAgICAgb2xkQ2hbaWR4SW5PbGRdID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgY2FuTW92ZSAmJiBub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnRFbG0sIHZub2RlVG9Nb3ZlLmVsbSwgb2xkU3RhcnRWbm9kZS5lbG0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBzYW1lIGtleSBidXQgZGlmZmVyZW50IGVsZW1lbnQuIHRyZWF0IGFzIG5ldyBlbGVtZW50XG4gICAgICAgICAgICBjcmVhdGVFbG0obmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIG9sZFN0YXJ0Vm5vZGUuZWxtLCBmYWxzZSwgbmV3Q2gsIG5ld1N0YXJ0SWR4KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAob2xkU3RhcnRJZHggPiBvbGRFbmRJZHgpIHtcbiAgICAgIHJlZkVsbSA9IGlzVW5kZWYobmV3Q2hbbmV3RW5kSWR4ICsgMV0pID8gbnVsbCA6IG5ld0NoW25ld0VuZElkeCArIDFdLmVsbTtcbiAgICAgIGFkZFZub2RlcyhwYXJlbnRFbG0sIHJlZkVsbSwgbmV3Q2gsIG5ld1N0YXJ0SWR4LCBuZXdFbmRJZHgsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgfSBlbHNlIGlmIChuZXdTdGFydElkeCA+IG5ld0VuZElkeCkge1xuICAgICAgcmVtb3ZlVm5vZGVzKHBhcmVudEVsbSwgb2xkQ2gsIG9sZFN0YXJ0SWR4LCBvbGRFbmRJZHgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNoZWNrRHVwbGljYXRlS2V5cyAoY2hpbGRyZW4pIHtcbiAgICB2YXIgc2VlbktleXMgPSB7fTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdm5vZGUgPSBjaGlsZHJlbltpXTtcbiAgICAgIHZhciBrZXkgPSB2bm9kZS5rZXk7XG4gICAgICBpZiAoaXNEZWYoa2V5KSkge1xuICAgICAgICBpZiAoc2VlbktleXNba2V5XSkge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAoXCJEdXBsaWNhdGUga2V5cyBkZXRlY3RlZDogJ1wiICsga2V5ICsgXCInLiBUaGlzIG1heSBjYXVzZSBhbiB1cGRhdGUgZXJyb3IuXCIpLFxuICAgICAgICAgICAgdm5vZGUuY29udGV4dFxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2VlbktleXNba2V5XSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBmaW5kSWR4SW5PbGQgKG5vZGUsIG9sZENoLCBzdGFydCwgZW5kKSB7XG4gICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKyspIHtcbiAgICAgIHZhciBjID0gb2xkQ2hbaV07XG4gICAgICBpZiAoaXNEZWYoYykgJiYgc2FtZVZub2RlKG5vZGUsIGMpKSB7IHJldHVybiBpIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwYXRjaFZub2RlIChvbGRWbm9kZSwgdm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcmVtb3ZlT25seSkge1xuICAgIGlmIChvbGRWbm9kZSA9PT0gdm5vZGUpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHZhciBlbG0gPSB2bm9kZS5lbG0gPSBvbGRWbm9kZS5lbG07XG5cbiAgICBpZiAoaXNUcnVlKG9sZFZub2RlLmlzQXN5bmNQbGFjZWhvbGRlcikpIHtcbiAgICAgIGlmIChpc0RlZih2bm9kZS5hc3luY0ZhY3RvcnkucmVzb2x2ZWQpKSB7XG4gICAgICAgIGh5ZHJhdGUob2xkVm5vZGUuZWxtLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZub2RlLmlzQXN5bmNQbGFjZWhvbGRlciA9IHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyByZXVzZSBlbGVtZW50IGZvciBzdGF0aWMgdHJlZXMuXG4gICAgLy8gbm90ZSB3ZSBvbmx5IGRvIHRoaXMgaWYgdGhlIHZub2RlIGlzIGNsb25lZCAtXG4gICAgLy8gaWYgdGhlIG5ldyBub2RlIGlzIG5vdCBjbG9uZWQgaXQgbWVhbnMgdGhlIHJlbmRlciBmdW5jdGlvbnMgaGF2ZSBiZWVuXG4gICAgLy8gcmVzZXQgYnkgdGhlIGhvdC1yZWxvYWQtYXBpIGFuZCB3ZSBuZWVkIHRvIGRvIGEgcHJvcGVyIHJlLXJlbmRlci5cbiAgICBpZiAoaXNUcnVlKHZub2RlLmlzU3RhdGljKSAmJlxuICAgICAgaXNUcnVlKG9sZFZub2RlLmlzU3RhdGljKSAmJlxuICAgICAgdm5vZGUua2V5ID09PSBvbGRWbm9kZS5rZXkgJiZcbiAgICAgIChpc1RydWUodm5vZGUuaXNDbG9uZWQpIHx8IGlzVHJ1ZSh2bm9kZS5pc09uY2UpKVxuICAgICkge1xuICAgICAgdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgPSBvbGRWbm9kZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHZhciBpO1xuICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICBpZiAoaXNEZWYoZGF0YSkgJiYgaXNEZWYoaSA9IGRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkucHJlcGF0Y2gpKSB7XG4gICAgICBpKG9sZFZub2RlLCB2bm9kZSk7XG4gICAgfVxuXG4gICAgdmFyIG9sZENoID0gb2xkVm5vZGUuY2hpbGRyZW47XG4gICAgdmFyIGNoID0gdm5vZGUuY2hpbGRyZW47XG4gICAgaWYgKGlzRGVmKGRhdGEpICYmIGlzUGF0Y2hhYmxlKHZub2RlKSkge1xuICAgICAgZm9yIChpID0gMDsgaSA8IGNicy51cGRhdGUubGVuZ3RoOyArK2kpIHsgY2JzLnVwZGF0ZVtpXShvbGRWbm9kZSwgdm5vZGUpOyB9XG4gICAgICBpZiAoaXNEZWYoaSA9IGRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkudXBkYXRlKSkgeyBpKG9sZFZub2RlLCB2bm9kZSk7IH1cbiAgICB9XG4gICAgaWYgKGlzVW5kZWYodm5vZGUudGV4dCkpIHtcbiAgICAgIGlmIChpc0RlZihvbGRDaCkgJiYgaXNEZWYoY2gpKSB7XG4gICAgICAgIGlmIChvbGRDaCAhPT0gY2gpIHsgdXBkYXRlQ2hpbGRyZW4oZWxtLCBvbGRDaCwgY2gsIGluc2VydGVkVm5vZGVRdWV1ZSwgcmVtb3ZlT25seSk7IH1cbiAgICAgIH0gZWxzZSBpZiAoaXNEZWYoY2gpKSB7XG4gICAgICAgIGlmIChpc0RlZihvbGRWbm9kZS50ZXh0KSkgeyBub2RlT3BzLnNldFRleHRDb250ZW50KGVsbSwgJycpOyB9XG4gICAgICAgIGFkZFZub2RlcyhlbG0sIG51bGwsIGNoLCAwLCBjaC5sZW5ndGggLSAxLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgfSBlbHNlIGlmIChpc0RlZihvbGRDaCkpIHtcbiAgICAgICAgcmVtb3ZlVm5vZGVzKGVsbSwgb2xkQ2gsIDAsIG9sZENoLmxlbmd0aCAtIDEpO1xuICAgICAgfSBlbHNlIGlmIChpc0RlZihvbGRWbm9kZS50ZXh0KSkge1xuICAgICAgICBub2RlT3BzLnNldFRleHRDb250ZW50KGVsbSwgJycpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAob2xkVm5vZGUudGV4dCAhPT0gdm5vZGUudGV4dCkge1xuICAgICAgbm9kZU9wcy5zZXRUZXh0Q29udGVudChlbG0sIHZub2RlLnRleHQpO1xuICAgIH1cbiAgICBpZiAoaXNEZWYoZGF0YSkpIHtcbiAgICAgIGlmIChpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5wb3N0cGF0Y2gpKSB7IGkob2xkVm5vZGUsIHZub2RlKTsgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGludm9rZUluc2VydEhvb2sgKHZub2RlLCBxdWV1ZSwgaW5pdGlhbCkge1xuICAgIC8vIGRlbGF5IGluc2VydCBob29rcyBmb3IgY29tcG9uZW50IHJvb3Qgbm9kZXMsIGludm9rZSB0aGVtIGFmdGVyIHRoZVxuICAgIC8vIGVsZW1lbnQgaXMgcmVhbGx5IGluc2VydGVkXG4gICAgaWYgKGlzVHJ1ZShpbml0aWFsKSAmJiBpc0RlZih2bm9kZS5wYXJlbnQpKSB7XG4gICAgICB2bm9kZS5wYXJlbnQuZGF0YS5wZW5kaW5nSW5zZXJ0ID0gcXVldWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgcXVldWVbaV0uZGF0YS5ob29rLmluc2VydChxdWV1ZVtpXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIGh5ZHJhdGlvbkJhaWxlZCA9IGZhbHNlO1xuICAvLyBsaXN0IG9mIG1vZHVsZXMgdGhhdCBjYW4gc2tpcCBjcmVhdGUgaG9vayBkdXJpbmcgaHlkcmF0aW9uIGJlY2F1c2UgdGhleVxuICAvLyBhcmUgYWxyZWFkeSByZW5kZXJlZCBvbiB0aGUgY2xpZW50IG9yIGhhcyBubyBuZWVkIGZvciBpbml0aWFsaXphdGlvblxuICAvLyBOb3RlOiBzdHlsZSBpcyBleGNsdWRlZCBiZWNhdXNlIGl0IHJlbGllcyBvbiBpbml0aWFsIGNsb25lIGZvciBmdXR1cmVcbiAgLy8gZGVlcCB1cGRhdGVzICgjNzA2MykuXG4gIHZhciBpc1JlbmRlcmVkTW9kdWxlID0gbWFrZU1hcCgnYXR0cnMsY2xhc3Msc3RhdGljQ2xhc3Msc3RhdGljU3R5bGUsa2V5Jyk7XG5cbiAgLy8gTm90ZTogdGhpcyBpcyBhIGJyb3dzZXItb25seSBmdW5jdGlvbiBzbyB3ZSBjYW4gYXNzdW1lIGVsbXMgYXJlIERPTSBub2Rlcy5cbiAgZnVuY3Rpb24gaHlkcmF0ZSAoZWxtLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBpblZQcmUpIHtcbiAgICB2YXIgaTtcbiAgICB2YXIgdGFnID0gdm5vZGUudGFnO1xuICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICB2YXIgY2hpbGRyZW4gPSB2bm9kZS5jaGlsZHJlbjtcbiAgICBpblZQcmUgPSBpblZQcmUgfHwgKGRhdGEgJiYgZGF0YS5wcmUpO1xuICAgIHZub2RlLmVsbSA9IGVsbTtcblxuICAgIGlmIChpc1RydWUodm5vZGUuaXNDb21tZW50KSAmJiBpc0RlZih2bm9kZS5hc3luY0ZhY3RvcnkpKSB7XG4gICAgICB2bm9kZS5pc0FzeW5jUGxhY2Vob2xkZXIgPSB0cnVlO1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgLy8gYXNzZXJ0IG5vZGUgbWF0Y2hcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKCFhc3NlcnROb2RlTWF0Y2goZWxtLCB2bm9kZSwgaW5WUHJlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICBpZiAoaXNEZWYoaSA9IGRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkuaW5pdCkpIHsgaSh2bm9kZSwgdHJ1ZSAvKiBoeWRyYXRpbmcgKi8pOyB9XG4gICAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSkge1xuICAgICAgICAvLyBjaGlsZCBjb21wb25lbnQuIGl0IHNob3VsZCBoYXZlIGh5ZHJhdGVkIGl0cyBvd24gdHJlZS5cbiAgICAgICAgaW5pdENvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzRGVmKHRhZykpIHtcbiAgICAgIGlmIChpc0RlZihjaGlsZHJlbikpIHtcbiAgICAgICAgLy8gZW1wdHkgZWxlbWVudCwgYWxsb3cgY2xpZW50IHRvIHBpY2sgdXAgYW5kIHBvcHVsYXRlIGNoaWxkcmVuXG4gICAgICAgIGlmICghZWxtLmhhc0NoaWxkTm9kZXMoKSkge1xuICAgICAgICAgIGNyZWF0ZUNoaWxkcmVuKHZub2RlLCBjaGlsZHJlbiwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyB2LWh0bWwgYW5kIGRvbVByb3BzOiBpbm5lckhUTUxcbiAgICAgICAgICBpZiAoaXNEZWYoaSA9IGRhdGEpICYmIGlzRGVmKGkgPSBpLmRvbVByb3BzKSAmJiBpc0RlZihpID0gaS5pbm5lckhUTUwpKSB7XG4gICAgICAgICAgICBpZiAoaSAhPT0gZWxtLmlubmVySFRNTCkge1xuICAgICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgICAgICAhaHlkcmF0aW9uQmFpbGVkXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGh5ZHJhdGlvbkJhaWxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdQYXJlbnQ6ICcsIGVsbSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdzZXJ2ZXIgaW5uZXJIVE1MOiAnLCBpKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ2NsaWVudCBpbm5lckhUTUw6ICcsIGVsbS5pbm5lckhUTUwpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBpdGVyYXRlIGFuZCBjb21wYXJlIGNoaWxkcmVuIGxpc3RzXG4gICAgICAgICAgICB2YXIgY2hpbGRyZW5NYXRjaCA9IHRydWU7XG4gICAgICAgICAgICB2YXIgY2hpbGROb2RlID0gZWxtLmZpcnN0Q2hpbGQ7XG4gICAgICAgICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBjaGlsZHJlbi5sZW5ndGg7IGkkMSsrKSB7XG4gICAgICAgICAgICAgIGlmICghY2hpbGROb2RlIHx8ICFoeWRyYXRlKGNoaWxkTm9kZSwgY2hpbGRyZW5baSQxXSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBpblZQcmUpKSB7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW5NYXRjaCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY2hpbGROb2RlID0gY2hpbGROb2RlLm5leHRTaWJsaW5nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gaWYgY2hpbGROb2RlIGlzIG5vdCBudWxsLCBpdCBtZWFucyB0aGUgYWN0dWFsIGNoaWxkTm9kZXMgbGlzdCBpc1xuICAgICAgICAgICAgLy8gbG9uZ2VyIHRoYW4gdGhlIHZpcnR1YWwgY2hpbGRyZW4gbGlzdC5cbiAgICAgICAgICAgIGlmICghY2hpbGRyZW5NYXRjaCB8fCBjaGlsZE5vZGUpIHtcbiAgICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICAgICAgIWh5ZHJhdGlvbkJhaWxlZFxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBoeWRyYXRpb25CYWlsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignUGFyZW50OiAnLCBlbG0pO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignTWlzbWF0Y2hpbmcgY2hpbGROb2RlcyB2cy4gVk5vZGVzOiAnLCBlbG0uY2hpbGROb2RlcywgY2hpbGRyZW4pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICAgIHZhciBmdWxsSW52b2tlID0gZmFsc2U7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBkYXRhKSB7XG4gICAgICAgICAgaWYgKCFpc1JlbmRlcmVkTW9kdWxlKGtleSkpIHtcbiAgICAgICAgICAgIGZ1bGxJbnZva2UgPSB0cnVlO1xuICAgICAgICAgICAgaW52b2tlQ3JlYXRlSG9va3Modm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIWZ1bGxJbnZva2UgJiYgZGF0YVsnY2xhc3MnXSkge1xuICAgICAgICAgIC8vIGVuc3VyZSBjb2xsZWN0aW5nIGRlcHMgZm9yIGRlZXAgY2xhc3MgYmluZGluZ3MgZm9yIGZ1dHVyZSB1cGRhdGVzXG4gICAgICAgICAgdHJhdmVyc2UoZGF0YVsnY2xhc3MnXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGVsbS5kYXRhICE9PSB2bm9kZS50ZXh0KSB7XG4gICAgICBlbG0uZGF0YSA9IHZub2RlLnRleHQ7XG4gICAgfVxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBmdW5jdGlvbiBhc3NlcnROb2RlTWF0Y2ggKG5vZGUsIHZub2RlLCBpblZQcmUpIHtcbiAgICBpZiAoaXNEZWYodm5vZGUudGFnKSkge1xuICAgICAgcmV0dXJuIHZub2RlLnRhZy5pbmRleE9mKCd2dWUtY29tcG9uZW50JykgPT09IDAgfHwgKFxuICAgICAgICAhaXNVbmtub3duRWxlbWVudCQkMSh2bm9kZSwgaW5WUHJlKSAmJlxuICAgICAgICB2bm9kZS50YWcudG9Mb3dlckNhc2UoKSA9PT0gKG5vZGUudGFnTmFtZSAmJiBub2RlLnRhZ05hbWUudG9Mb3dlckNhc2UoKSlcbiAgICAgIClcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5vZGUubm9kZVR5cGUgPT09ICh2bm9kZS5pc0NvbW1lbnQgPyA4IDogMylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gcGF0Y2ggKG9sZFZub2RlLCB2bm9kZSwgaHlkcmF0aW5nLCByZW1vdmVPbmx5LCBwYXJlbnRFbG0sIHJlZkVsbSkge1xuICAgIGlmIChpc1VuZGVmKHZub2RlKSkge1xuICAgICAgaWYgKGlzRGVmKG9sZFZub2RlKSkgeyBpbnZva2VEZXN0cm95SG9vayhvbGRWbm9kZSk7IH1cbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHZhciBpc0luaXRpYWxQYXRjaCA9IGZhbHNlO1xuICAgIHZhciBpbnNlcnRlZFZub2RlUXVldWUgPSBbXTtcblxuICAgIGlmIChpc1VuZGVmKG9sZFZub2RlKSkge1xuICAgICAgLy8gZW1wdHkgbW91bnQgKGxpa2VseSBhcyBjb21wb25lbnQpLCBjcmVhdGUgbmV3IHJvb3QgZWxlbWVudFxuICAgICAgaXNJbml0aWFsUGF0Y2ggPSB0cnVlO1xuICAgICAgY3JlYXRlRWxtKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGlzUmVhbEVsZW1lbnQgPSBpc0RlZihvbGRWbm9kZS5ub2RlVHlwZSk7XG4gICAgICBpZiAoIWlzUmVhbEVsZW1lbnQgJiYgc2FtZVZub2RlKG9sZFZub2RlLCB2bm9kZSkpIHtcbiAgICAgICAgLy8gcGF0Y2ggZXhpc3Rpbmcgcm9vdCBub2RlXG4gICAgICAgIHBhdGNoVm5vZGUob2xkVm5vZGUsIHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHJlbW92ZU9ubHkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGlzUmVhbEVsZW1lbnQpIHtcbiAgICAgICAgICAvLyBtb3VudGluZyB0byBhIHJlYWwgZWxlbWVudFxuICAgICAgICAgIC8vIGNoZWNrIGlmIHRoaXMgaXMgc2VydmVyLXJlbmRlcmVkIGNvbnRlbnQgYW5kIGlmIHdlIGNhbiBwZXJmb3JtXG4gICAgICAgICAgLy8gYSBzdWNjZXNzZnVsIGh5ZHJhdGlvbi5cbiAgICAgICAgICBpZiAob2xkVm5vZGUubm9kZVR5cGUgPT09IDEgJiYgb2xkVm5vZGUuaGFzQXR0cmlidXRlKFNTUl9BVFRSKSkge1xuICAgICAgICAgICAgb2xkVm5vZGUucmVtb3ZlQXR0cmlidXRlKFNTUl9BVFRSKTtcbiAgICAgICAgICAgIGh5ZHJhdGluZyA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpc1RydWUoaHlkcmF0aW5nKSkge1xuICAgICAgICAgICAgaWYgKGh5ZHJhdGUob2xkVm5vZGUsIHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpKSB7XG4gICAgICAgICAgICAgIGludm9rZUluc2VydEhvb2sodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgIHJldHVybiBvbGRWbm9kZVxuICAgICAgICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAgICAgJ1RoZSBjbGllbnQtc2lkZSByZW5kZXJlZCB2aXJ0dWFsIERPTSB0cmVlIGlzIG5vdCBtYXRjaGluZyAnICtcbiAgICAgICAgICAgICAgICAnc2VydmVyLXJlbmRlcmVkIGNvbnRlbnQuIFRoaXMgaXMgbGlrZWx5IGNhdXNlZCBieSBpbmNvcnJlY3QgJyArXG4gICAgICAgICAgICAgICAgJ0hUTUwgbWFya3VwLCBmb3IgZXhhbXBsZSBuZXN0aW5nIGJsb2NrLWxldmVsIGVsZW1lbnRzIGluc2lkZSAnICtcbiAgICAgICAgICAgICAgICAnPHA+LCBvciBtaXNzaW5nIDx0Ym9keT4uIEJhaWxpbmcgaHlkcmF0aW9uIGFuZCBwZXJmb3JtaW5nICcgK1xuICAgICAgICAgICAgICAgICdmdWxsIGNsaWVudC1zaWRlIHJlbmRlci4nXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIGVpdGhlciBub3Qgc2VydmVyLXJlbmRlcmVkLCBvciBoeWRyYXRpb24gZmFpbGVkLlxuICAgICAgICAgIC8vIGNyZWF0ZSBhbiBlbXB0eSBub2RlIGFuZCByZXBsYWNlIGl0XG4gICAgICAgICAgb2xkVm5vZGUgPSBlbXB0eU5vZGVBdChvbGRWbm9kZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyByZXBsYWNpbmcgZXhpc3RpbmcgZWxlbWVudFxuICAgICAgICB2YXIgb2xkRWxtID0gb2xkVm5vZGUuZWxtO1xuICAgICAgICB2YXIgcGFyZW50RWxtJDEgPSBub2RlT3BzLnBhcmVudE5vZGUob2xkRWxtKTtcblxuICAgICAgICAvLyBjcmVhdGUgbmV3IG5vZGVcbiAgICAgICAgY3JlYXRlRWxtKFxuICAgICAgICAgIHZub2RlLFxuICAgICAgICAgIGluc2VydGVkVm5vZGVRdWV1ZSxcbiAgICAgICAgICAvLyBleHRyZW1lbHkgcmFyZSBlZGdlIGNhc2U6IGRvIG5vdCBpbnNlcnQgaWYgb2xkIGVsZW1lbnQgaXMgaW4gYVxuICAgICAgICAgIC8vIGxlYXZpbmcgdHJhbnNpdGlvbi4gT25seSBoYXBwZW5zIHdoZW4gY29tYmluaW5nIHRyYW5zaXRpb24gK1xuICAgICAgICAgIC8vIGtlZXAtYWxpdmUgKyBIT0NzLiAoIzQ1OTApXG4gICAgICAgICAgb2xkRWxtLl9sZWF2ZUNiID8gbnVsbCA6IHBhcmVudEVsbSQxLFxuICAgICAgICAgIG5vZGVPcHMubmV4dFNpYmxpbmcob2xkRWxtKVxuICAgICAgICApO1xuXG4gICAgICAgIC8vIHVwZGF0ZSBwYXJlbnQgcGxhY2Vob2xkZXIgbm9kZSBlbGVtZW50LCByZWN1cnNpdmVseVxuICAgICAgICBpZiAoaXNEZWYodm5vZGUucGFyZW50KSkge1xuICAgICAgICAgIHZhciBhbmNlc3RvciA9IHZub2RlLnBhcmVudDtcbiAgICAgICAgICB2YXIgcGF0Y2hhYmxlID0gaXNQYXRjaGFibGUodm5vZGUpO1xuICAgICAgICAgIHdoaWxlIChhbmNlc3Rvcikge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjYnMuZGVzdHJveS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICBjYnMuZGVzdHJveVtpXShhbmNlc3Rvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhbmNlc3Rvci5lbG0gPSB2bm9kZS5lbG07XG4gICAgICAgICAgICBpZiAocGF0Y2hhYmxlKSB7XG4gICAgICAgICAgICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IGNicy5jcmVhdGUubGVuZ3RoOyArK2kkMSkge1xuICAgICAgICAgICAgICAgIGNicy5jcmVhdGVbaSQxXShlbXB0eU5vZGUsIGFuY2VzdG9yKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAvLyAjNjUxM1xuICAgICAgICAgICAgICAvLyBpbnZva2UgaW5zZXJ0IGhvb2tzIHRoYXQgbWF5IGhhdmUgYmVlbiBtZXJnZWQgYnkgY3JlYXRlIGhvb2tzLlxuICAgICAgICAgICAgICAvLyBlLmcuIGZvciBkaXJlY3RpdmVzIHRoYXQgdXNlcyB0aGUgXCJpbnNlcnRlZFwiIGhvb2suXG4gICAgICAgICAgICAgIHZhciBpbnNlcnQgPSBhbmNlc3Rvci5kYXRhLmhvb2suaW5zZXJ0O1xuICAgICAgICAgICAgICBpZiAoaW5zZXJ0Lm1lcmdlZCkge1xuICAgICAgICAgICAgICAgIC8vIHN0YXJ0IGF0IGluZGV4IDEgdG8gYXZvaWQgcmUtaW52b2tpbmcgY29tcG9uZW50IG1vdW50ZWQgaG9va1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkkMiA9IDE7IGkkMiA8IGluc2VydC5mbnMubGVuZ3RoOyBpJDIrKykge1xuICAgICAgICAgICAgICAgICAgaW5zZXJ0LmZuc1tpJDJdKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZWdpc3RlclJlZihhbmNlc3Rvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhbmNlc3RvciA9IGFuY2VzdG9yLnBhcmVudDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBkZXN0cm95IG9sZCBub2RlXG4gICAgICAgIGlmIChpc0RlZihwYXJlbnRFbG0kMSkpIHtcbiAgICAgICAgICByZW1vdmVWbm9kZXMocGFyZW50RWxtJDEsIFtvbGRWbm9kZV0sIDAsIDApO1xuICAgICAgICB9IGVsc2UgaWYgKGlzRGVmKG9sZFZub2RlLnRhZykpIHtcbiAgICAgICAgICBpbnZva2VEZXN0cm95SG9vayhvbGRWbm9kZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpbnZva2VJbnNlcnRIb29rKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIGlzSW5pdGlhbFBhdGNoKTtcbiAgICByZXR1cm4gdm5vZGUuZWxtXG4gIH1cbn1cblxuLyogICovXG5cbnZhciBkaXJlY3RpdmVzID0ge1xuICBjcmVhdGU6IHVwZGF0ZURpcmVjdGl2ZXMsXG4gIHVwZGF0ZTogdXBkYXRlRGlyZWN0aXZlcyxcbiAgZGVzdHJveTogZnVuY3Rpb24gdW5iaW5kRGlyZWN0aXZlcyAodm5vZGUpIHtcbiAgICB1cGRhdGVEaXJlY3RpdmVzKHZub2RlLCBlbXB0eU5vZGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZURpcmVjdGl2ZXMgKG9sZFZub2RlLCB2bm9kZSkge1xuICBpZiAob2xkVm5vZGUuZGF0YS5kaXJlY3RpdmVzIHx8IHZub2RlLmRhdGEuZGlyZWN0aXZlcykge1xuICAgIF91cGRhdGUob2xkVm5vZGUsIHZub2RlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfdXBkYXRlIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgdmFyIGlzQ3JlYXRlID0gb2xkVm5vZGUgPT09IGVtcHR5Tm9kZTtcbiAgdmFyIGlzRGVzdHJveSA9IHZub2RlID09PSBlbXB0eU5vZGU7XG4gIHZhciBvbGREaXJzID0gbm9ybWFsaXplRGlyZWN0aXZlcyQxKG9sZFZub2RlLmRhdGEuZGlyZWN0aXZlcywgb2xkVm5vZGUuY29udGV4dCk7XG4gIHZhciBuZXdEaXJzID0gbm9ybWFsaXplRGlyZWN0aXZlcyQxKHZub2RlLmRhdGEuZGlyZWN0aXZlcywgdm5vZGUuY29udGV4dCk7XG5cbiAgdmFyIGRpcnNXaXRoSW5zZXJ0ID0gW107XG4gIHZhciBkaXJzV2l0aFBvc3RwYXRjaCA9IFtdO1xuXG4gIHZhciBrZXksIG9sZERpciwgZGlyO1xuICBmb3IgKGtleSBpbiBuZXdEaXJzKSB7XG4gICAgb2xkRGlyID0gb2xkRGlyc1trZXldO1xuICAgIGRpciA9IG5ld0RpcnNba2V5XTtcbiAgICBpZiAoIW9sZERpcikge1xuICAgICAgLy8gbmV3IGRpcmVjdGl2ZSwgYmluZFxuICAgICAgY2FsbEhvb2skMShkaXIsICdiaW5kJywgdm5vZGUsIG9sZFZub2RlKTtcbiAgICAgIGlmIChkaXIuZGVmICYmIGRpci5kZWYuaW5zZXJ0ZWQpIHtcbiAgICAgICAgZGlyc1dpdGhJbnNlcnQucHVzaChkaXIpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBleGlzdGluZyBkaXJlY3RpdmUsIHVwZGF0ZVxuICAgICAgZGlyLm9sZFZhbHVlID0gb2xkRGlyLnZhbHVlO1xuICAgICAgY2FsbEhvb2skMShkaXIsICd1cGRhdGUnLCB2bm9kZSwgb2xkVm5vZGUpO1xuICAgICAgaWYgKGRpci5kZWYgJiYgZGlyLmRlZi5jb21wb25lbnRVcGRhdGVkKSB7XG4gICAgICAgIGRpcnNXaXRoUG9zdHBhdGNoLnB1c2goZGlyKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoZGlyc1dpdGhJbnNlcnQubGVuZ3RoKSB7XG4gICAgdmFyIGNhbGxJbnNlcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRpcnNXaXRoSW5zZXJ0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNhbGxIb29rJDEoZGlyc1dpdGhJbnNlcnRbaV0sICdpbnNlcnRlZCcsIHZub2RlLCBvbGRWbm9kZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBpZiAoaXNDcmVhdGUpIHtcbiAgICAgIG1lcmdlVk5vZGVIb29rKHZub2RlLCAnaW5zZXJ0JywgY2FsbEluc2VydCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxJbnNlcnQoKTtcbiAgICB9XG4gIH1cblxuICBpZiAoZGlyc1dpdGhQb3N0cGF0Y2gubGVuZ3RoKSB7XG4gICAgbWVyZ2VWTm9kZUhvb2sodm5vZGUsICdwb3N0cGF0Y2gnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRpcnNXaXRoUG9zdHBhdGNoLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNhbGxIb29rJDEoZGlyc1dpdGhQb3N0cGF0Y2hbaV0sICdjb21wb25lbnRVcGRhdGVkJywgdm5vZGUsIG9sZFZub2RlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGlmICghaXNDcmVhdGUpIHtcbiAgICBmb3IgKGtleSBpbiBvbGREaXJzKSB7XG4gICAgICBpZiAoIW5ld0RpcnNba2V5XSkge1xuICAgICAgICAvLyBubyBsb25nZXIgcHJlc2VudCwgdW5iaW5kXG4gICAgICAgIGNhbGxIb29rJDEob2xkRGlyc1trZXldLCAndW5iaW5kJywgb2xkVm5vZGUsIG9sZFZub2RlLCBpc0Rlc3Ryb3kpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG52YXIgZW1wdHlNb2RpZmllcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG5mdW5jdGlvbiBub3JtYWxpemVEaXJlY3RpdmVzJDEgKFxuICBkaXJzLFxuICB2bVxuKSB7XG4gIHZhciByZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBpZiAoIWRpcnMpIHtcbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICByZXR1cm4gcmVzXG4gIH1cbiAgdmFyIGksIGRpcjtcbiAgZm9yIChpID0gMDsgaSA8IGRpcnMubGVuZ3RoOyBpKyspIHtcbiAgICBkaXIgPSBkaXJzW2ldO1xuICAgIGlmICghZGlyLm1vZGlmaWVycykge1xuICAgICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgICBkaXIubW9kaWZpZXJzID0gZW1wdHlNb2RpZmllcnM7XG4gICAgfVxuICAgIHJlc1tnZXRSYXdEaXJOYW1lKGRpcildID0gZGlyO1xuICAgIGRpci5kZWYgPSByZXNvbHZlQXNzZXQodm0uJG9wdGlvbnMsICdkaXJlY3RpdmVzJywgZGlyLm5hbWUsIHRydWUpO1xuICB9XG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGdldFJhd0Rpck5hbWUgKGRpcikge1xuICByZXR1cm4gZGlyLnJhd05hbWUgfHwgKChkaXIubmFtZSkgKyBcIi5cIiArIChPYmplY3Qua2V5cyhkaXIubW9kaWZpZXJzIHx8IHt9KS5qb2luKCcuJykpKVxufVxuXG5mdW5jdGlvbiBjYWxsSG9vayQxIChkaXIsIGhvb2ssIHZub2RlLCBvbGRWbm9kZSwgaXNEZXN0cm95KSB7XG4gIHZhciBmbiA9IGRpci5kZWYgJiYgZGlyLmRlZltob29rXTtcbiAgaWYgKGZuKSB7XG4gICAgdHJ5IHtcbiAgICAgIGZuKHZub2RlLmVsbSwgZGlyLCB2bm9kZSwgb2xkVm5vZGUsIGlzRGVzdHJveSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaGFuZGxlRXJyb3IoZSwgdm5vZGUuY29udGV4dCwgKFwiZGlyZWN0aXZlIFwiICsgKGRpci5uYW1lKSArIFwiIFwiICsgaG9vayArIFwiIGhvb2tcIikpO1xuICAgIH1cbiAgfVxufVxuXG52YXIgYmFzZU1vZHVsZXMgPSBbXG4gIHJlZixcbiAgZGlyZWN0aXZlc1xuXVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gdXBkYXRlQXR0cnMgKG9sZFZub2RlLCB2bm9kZSkge1xuICB2YXIgb3B0cyA9IHZub2RlLmNvbXBvbmVudE9wdGlvbnM7XG4gIGlmIChpc0RlZihvcHRzKSAmJiBvcHRzLkN0b3Iub3B0aW9ucy5pbmhlcml0QXR0cnMgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKGlzVW5kZWYob2xkVm5vZGUuZGF0YS5hdHRycykgJiYgaXNVbmRlZih2bm9kZS5kYXRhLmF0dHJzKSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBrZXksIGN1ciwgb2xkO1xuICB2YXIgZWxtID0gdm5vZGUuZWxtO1xuICB2YXIgb2xkQXR0cnMgPSBvbGRWbm9kZS5kYXRhLmF0dHJzIHx8IHt9O1xuICB2YXIgYXR0cnMgPSB2bm9kZS5kYXRhLmF0dHJzIHx8IHt9O1xuICAvLyBjbG9uZSBvYnNlcnZlZCBvYmplY3RzLCBhcyB0aGUgdXNlciBwcm9iYWJseSB3YW50cyB0byBtdXRhdGUgaXRcbiAgaWYgKGlzRGVmKGF0dHJzLl9fb2JfXykpIHtcbiAgICBhdHRycyA9IHZub2RlLmRhdGEuYXR0cnMgPSBleHRlbmQoe30sIGF0dHJzKTtcbiAgfVxuXG4gIGZvciAoa2V5IGluIGF0dHJzKSB7XG4gICAgY3VyID0gYXR0cnNba2V5XTtcbiAgICBvbGQgPSBvbGRBdHRyc1trZXldO1xuICAgIGlmIChvbGQgIT09IGN1cikge1xuICAgICAgc2V0QXR0cihlbG0sIGtleSwgY3VyKTtcbiAgICB9XG4gIH1cbiAgLy8gIzQzOTE6IGluIElFOSwgc2V0dGluZyB0eXBlIGNhbiByZXNldCB2YWx1ZSBmb3IgaW5wdXRbdHlwZT1yYWRpb11cbiAgLy8gIzY2NjY6IElFL0VkZ2UgZm9yY2VzIHByb2dyZXNzIHZhbHVlIGRvd24gdG8gMSBiZWZvcmUgc2V0dGluZyBhIG1heFxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKChpc0lFIHx8IGlzRWRnZSkgJiYgYXR0cnMudmFsdWUgIT09IG9sZEF0dHJzLnZhbHVlKSB7XG4gICAgc2V0QXR0cihlbG0sICd2YWx1ZScsIGF0dHJzLnZhbHVlKTtcbiAgfVxuICBmb3IgKGtleSBpbiBvbGRBdHRycykge1xuICAgIGlmIChpc1VuZGVmKGF0dHJzW2tleV0pKSB7XG4gICAgICBpZiAoaXNYbGluayhrZXkpKSB7XG4gICAgICAgIGVsbS5yZW1vdmVBdHRyaWJ1dGVOUyh4bGlua05TLCBnZXRYbGlua1Byb3Aoa2V5KSk7XG4gICAgICB9IGVsc2UgaWYgKCFpc0VudW1lcmF0ZWRBdHRyKGtleSkpIHtcbiAgICAgICAgZWxtLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBzZXRBdHRyIChlbCwga2V5LCB2YWx1ZSkge1xuICBpZiAoZWwudGFnTmFtZS5pbmRleE9mKCctJykgPiAtMSkge1xuICAgIGJhc2VTZXRBdHRyKGVsLCBrZXksIHZhbHVlKTtcbiAgfSBlbHNlIGlmIChpc0Jvb2xlYW5BdHRyKGtleSkpIHtcbiAgICAvLyBzZXQgYXR0cmlidXRlIGZvciBibGFuayB2YWx1ZVxuICAgIC8vIGUuZy4gPG9wdGlvbiBkaXNhYmxlZD5TZWxlY3Qgb25lPC9vcHRpb24+XG4gICAgaWYgKGlzRmFsc3lBdHRyVmFsdWUodmFsdWUpKSB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdGVjaG5pY2FsbHkgYWxsb3dmdWxsc2NyZWVuIGlzIGEgYm9vbGVhbiBhdHRyaWJ1dGUgZm9yIDxpZnJhbWU+LFxuICAgICAgLy8gYnV0IEZsYXNoIGV4cGVjdHMgYSB2YWx1ZSBvZiBcInRydWVcIiB3aGVuIHVzZWQgb24gPGVtYmVkPiB0YWdcbiAgICAgIHZhbHVlID0ga2V5ID09PSAnYWxsb3dmdWxsc2NyZWVuJyAmJiBlbC50YWdOYW1lID09PSAnRU1CRUQnXG4gICAgICAgID8gJ3RydWUnXG4gICAgICAgIDoga2V5O1xuICAgICAgZWwuc2V0QXR0cmlidXRlKGtleSwgdmFsdWUpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc0VudW1lcmF0ZWRBdHRyKGtleSkpIHtcbiAgICBlbC5zZXRBdHRyaWJ1dGUoa2V5LCBpc0ZhbHN5QXR0clZhbHVlKHZhbHVlKSB8fCB2YWx1ZSA9PT0gJ2ZhbHNlJyA/ICdmYWxzZScgOiAndHJ1ZScpO1xuICB9IGVsc2UgaWYgKGlzWGxpbmsoa2V5KSkge1xuICAgIGlmIChpc0ZhbHN5QXR0clZhbHVlKHZhbHVlKSkge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlTlMoeGxpbmtOUywgZ2V0WGxpbmtQcm9wKGtleSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGVOUyh4bGlua05TLCBrZXksIHZhbHVlKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgYmFzZVNldEF0dHIoZWwsIGtleSwgdmFsdWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGJhc2VTZXRBdHRyIChlbCwga2V5LCB2YWx1ZSkge1xuICBpZiAoaXNGYWxzeUF0dHJWYWx1ZSh2YWx1ZSkpIHtcbiAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgfSBlbHNlIHtcbiAgICAvLyAjNzEzODogSUUxMCAmIDExIGZpcmVzIGlucHV0IGV2ZW50IHdoZW4gc2V0dGluZyBwbGFjZWhvbGRlciBvblxuICAgIC8vIDx0ZXh0YXJlYT4uLi4gYmxvY2sgdGhlIGZpcnN0IGlucHV0IGV2ZW50IGFuZCByZW1vdmUgdGhlIGJsb2NrZXJcbiAgICAvLyBpbW1lZGlhdGVseS5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoXG4gICAgICBpc0lFICYmICFpc0lFOSAmJlxuICAgICAgZWwudGFnTmFtZSA9PT0gJ1RFWFRBUkVBJyAmJlxuICAgICAga2V5ID09PSAncGxhY2Vob2xkZXInICYmICFlbC5fX2llcGhcbiAgICApIHtcbiAgICAgIHZhciBibG9ja2VyID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBibG9ja2VyKTtcbiAgICAgIH07XG4gICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIGJsb2NrZXIpO1xuICAgICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgICBlbC5fX2llcGggPSB0cnVlOyAvKiBJRSBwbGFjZWhvbGRlciBwYXRjaGVkICovXG4gICAgfVxuICAgIGVsLnNldEF0dHJpYnV0ZShrZXksIHZhbHVlKTtcbiAgfVxufVxuXG52YXIgYXR0cnMgPSB7XG4gIGNyZWF0ZTogdXBkYXRlQXR0cnMsXG4gIHVwZGF0ZTogdXBkYXRlQXR0cnNcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIHVwZGF0ZUNsYXNzIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgdmFyIGVsID0gdm5vZGUuZWxtO1xuICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gIHZhciBvbGREYXRhID0gb2xkVm5vZGUuZGF0YTtcbiAgaWYgKFxuICAgIGlzVW5kZWYoZGF0YS5zdGF0aWNDbGFzcykgJiZcbiAgICBpc1VuZGVmKGRhdGEuY2xhc3MpICYmIChcbiAgICAgIGlzVW5kZWYob2xkRGF0YSkgfHwgKFxuICAgICAgICBpc1VuZGVmKG9sZERhdGEuc3RhdGljQ2xhc3MpICYmXG4gICAgICAgIGlzVW5kZWYob2xkRGF0YS5jbGFzcylcbiAgICAgIClcbiAgICApXG4gICkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGNscyA9IGdlbkNsYXNzRm9yVm5vZGUodm5vZGUpO1xuXG4gIC8vIGhhbmRsZSB0cmFuc2l0aW9uIGNsYXNzZXNcbiAgdmFyIHRyYW5zaXRpb25DbGFzcyA9IGVsLl90cmFuc2l0aW9uQ2xhc3NlcztcbiAgaWYgKGlzRGVmKHRyYW5zaXRpb25DbGFzcykpIHtcbiAgICBjbHMgPSBjb25jYXQoY2xzLCBzdHJpbmdpZnlDbGFzcyh0cmFuc2l0aW9uQ2xhc3MpKTtcbiAgfVxuXG4gIC8vIHNldCB0aGUgY2xhc3NcbiAgaWYgKGNscyAhPT0gZWwuX3ByZXZDbGFzcykge1xuICAgIGVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCBjbHMpO1xuICAgIGVsLl9wcmV2Q2xhc3MgPSBjbHM7XG4gIH1cbn1cblxudmFyIGtsYXNzID0ge1xuICBjcmVhdGU6IHVwZGF0ZUNsYXNzLFxuICB1cGRhdGU6IHVwZGF0ZUNsYXNzXG59XG5cbi8qICAqL1xuXG4vKiAgKi9cblxuXG5cblxuXG5cblxuXG5cbi8vIGFkZCBhIHJhdyBhdHRyICh1c2UgdGhpcyBpbiBwcmVUcmFuc2Zvcm1zKVxuXG5cblxuXG5cblxuXG5cbi8vIG5vdGU6IHRoaXMgb25seSByZW1vdmVzIHRoZSBhdHRyIGZyb20gdGhlIEFycmF5IChhdHRyc0xpc3QpIHNvIHRoYXQgaXRcbi8vIGRvZXNuJ3QgZ2V0IHByb2Nlc3NlZCBieSBwcm9jZXNzQXR0cnMuXG4vLyBCeSBkZWZhdWx0IGl0IGRvZXMgTk9UIHJlbW92ZSBpdCBmcm9tIHRoZSBtYXAgKGF0dHJzTWFwKSBiZWNhdXNlIHRoZSBtYXAgaXNcbi8vIG5lZWRlZCBkdXJpbmcgY29kZWdlbi5cblxuLyogICovXG5cbi8qKlxuICogQ3Jvc3MtcGxhdGZvcm0gY29kZSBnZW5lcmF0aW9uIGZvciBjb21wb25lbnQgdi1tb2RlbFxuICovXG5cblxuLyoqXG4gKiBDcm9zcy1wbGF0Zm9ybSBjb2RlZ2VuIGhlbHBlciBmb3IgZ2VuZXJhdGluZyB2LW1vZGVsIHZhbHVlIGFzc2lnbm1lbnQgY29kZS5cbiAqL1xuXG4vKiAgKi9cblxuLy8gaW4gc29tZSBjYXNlcywgdGhlIGV2ZW50IHVzZWQgaGFzIHRvIGJlIGRldGVybWluZWQgYXQgcnVudGltZVxuLy8gc28gd2UgdXNlZCBzb21lIHJlc2VydmVkIHRva2VucyBkdXJpbmcgY29tcGlsZS5cbnZhciBSQU5HRV9UT0tFTiA9ICdfX3InO1xudmFyIENIRUNLQk9YX1JBRElPX1RPS0VOID0gJ19fYyc7XG5cbi8qICAqL1xuXG4vLyBub3JtYWxpemUgdi1tb2RlbCBldmVudCB0b2tlbnMgdGhhdCBjYW4gb25seSBiZSBkZXRlcm1pbmVkIGF0IHJ1bnRpbWUuXG4vLyBpdCdzIGltcG9ydGFudCB0byBwbGFjZSB0aGUgZXZlbnQgYXMgdGhlIGZpcnN0IGluIHRoZSBhcnJheSBiZWNhdXNlXG4vLyB0aGUgd2hvbGUgcG9pbnQgaXMgZW5zdXJpbmcgdGhlIHYtbW9kZWwgY2FsbGJhY2sgZ2V0cyBjYWxsZWQgYmVmb3JlXG4vLyB1c2VyLWF0dGFjaGVkIGhhbmRsZXJzLlxuZnVuY3Rpb24gbm9ybWFsaXplRXZlbnRzIChvbikge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGlzRGVmKG9uW1JBTkdFX1RPS0VOXSkpIHtcbiAgICAvLyBJRSBpbnB1dFt0eXBlPXJhbmdlXSBvbmx5IHN1cHBvcnRzIGBjaGFuZ2VgIGV2ZW50XG4gICAgdmFyIGV2ZW50ID0gaXNJRSA/ICdjaGFuZ2UnIDogJ2lucHV0JztcbiAgICBvbltldmVudF0gPSBbXS5jb25jYXQob25bUkFOR0VfVE9LRU5dLCBvbltldmVudF0gfHwgW10pO1xuICAgIGRlbGV0ZSBvbltSQU5HRV9UT0tFTl07XG4gIH1cbiAgLy8gVGhpcyB3YXMgb3JpZ2luYWxseSBpbnRlbmRlZCB0byBmaXggIzQ1MjEgYnV0IG5vIGxvbmdlciBuZWNlc3NhcnlcbiAgLy8gYWZ0ZXIgMi41LiBLZWVwaW5nIGl0IGZvciBiYWNrd2FyZHMgY29tcGF0IHdpdGggZ2VuZXJhdGVkIGNvZGUgZnJvbSA8IDIuNFxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGlzRGVmKG9uW0NIRUNLQk9YX1JBRElPX1RPS0VOXSkpIHtcbiAgICBvbi5jaGFuZ2UgPSBbXS5jb25jYXQob25bQ0hFQ0tCT1hfUkFESU9fVE9LRU5dLCBvbi5jaGFuZ2UgfHwgW10pO1xuICAgIGRlbGV0ZSBvbltDSEVDS0JPWF9SQURJT19UT0tFTl07XG4gIH1cbn1cblxudmFyIHRhcmdldCQxO1xuXG5mdW5jdGlvbiBjcmVhdGVPbmNlSGFuZGxlciAoaGFuZGxlciwgZXZlbnQsIGNhcHR1cmUpIHtcbiAgdmFyIF90YXJnZXQgPSB0YXJnZXQkMTsgLy8gc2F2ZSBjdXJyZW50IHRhcmdldCBlbGVtZW50IGluIGNsb3N1cmVcbiAgcmV0dXJuIGZ1bmN0aW9uIG9uY2VIYW5kbGVyICgpIHtcbiAgICB2YXIgcmVzID0gaGFuZGxlci5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIGlmIChyZXMgIT09IG51bGwpIHtcbiAgICAgIHJlbW92ZSQyKGV2ZW50LCBvbmNlSGFuZGxlciwgY2FwdHVyZSwgX3RhcmdldCk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFkZCQxIChcbiAgZXZlbnQsXG4gIGhhbmRsZXIsXG4gIG9uY2UkJDEsXG4gIGNhcHR1cmUsXG4gIHBhc3NpdmVcbikge1xuICBoYW5kbGVyID0gd2l0aE1hY3JvVGFzayhoYW5kbGVyKTtcbiAgaWYgKG9uY2UkJDEpIHsgaGFuZGxlciA9IGNyZWF0ZU9uY2VIYW5kbGVyKGhhbmRsZXIsIGV2ZW50LCBjYXB0dXJlKTsgfVxuICB0YXJnZXQkMS5hZGRFdmVudExpc3RlbmVyKFxuICAgIGV2ZW50LFxuICAgIGhhbmRsZXIsXG4gICAgc3VwcG9ydHNQYXNzaXZlXG4gICAgICA/IHsgY2FwdHVyZTogY2FwdHVyZSwgcGFzc2l2ZTogcGFzc2l2ZSB9XG4gICAgICA6IGNhcHR1cmVcbiAgKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlJDIgKFxuICBldmVudCxcbiAgaGFuZGxlcixcbiAgY2FwdHVyZSxcbiAgX3RhcmdldFxuKSB7XG4gIChfdGFyZ2V0IHx8IHRhcmdldCQxKS5yZW1vdmVFdmVudExpc3RlbmVyKFxuICAgIGV2ZW50LFxuICAgIGhhbmRsZXIuX3dpdGhUYXNrIHx8IGhhbmRsZXIsXG4gICAgY2FwdHVyZVxuICApO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVET01MaXN0ZW5lcnMgKG9sZFZub2RlLCB2bm9kZSkge1xuICBpZiAoaXNVbmRlZihvbGRWbm9kZS5kYXRhLm9uKSAmJiBpc1VuZGVmKHZub2RlLmRhdGEub24pKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIG9uID0gdm5vZGUuZGF0YS5vbiB8fCB7fTtcbiAgdmFyIG9sZE9uID0gb2xkVm5vZGUuZGF0YS5vbiB8fCB7fTtcbiAgdGFyZ2V0JDEgPSB2bm9kZS5lbG07XG4gIG5vcm1hbGl6ZUV2ZW50cyhvbik7XG4gIHVwZGF0ZUxpc3RlbmVycyhvbiwgb2xkT24sIGFkZCQxLCByZW1vdmUkMiwgdm5vZGUuY29udGV4dCk7XG4gIHRhcmdldCQxID0gdW5kZWZpbmVkO1xufVxuXG52YXIgZXZlbnRzID0ge1xuICBjcmVhdGU6IHVwZGF0ZURPTUxpc3RlbmVycyxcbiAgdXBkYXRlOiB1cGRhdGVET01MaXN0ZW5lcnNcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIHVwZGF0ZURPTVByb3BzIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgaWYgKGlzVW5kZWYob2xkVm5vZGUuZGF0YS5kb21Qcm9wcykgJiYgaXNVbmRlZih2bm9kZS5kYXRhLmRvbVByb3BzKSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBrZXksIGN1cjtcbiAgdmFyIGVsbSA9IHZub2RlLmVsbTtcbiAgdmFyIG9sZFByb3BzID0gb2xkVm5vZGUuZGF0YS5kb21Qcm9wcyB8fCB7fTtcbiAgdmFyIHByb3BzID0gdm5vZGUuZGF0YS5kb21Qcm9wcyB8fCB7fTtcbiAgLy8gY2xvbmUgb2JzZXJ2ZWQgb2JqZWN0cywgYXMgdGhlIHVzZXIgcHJvYmFibHkgd2FudHMgdG8gbXV0YXRlIGl0XG4gIGlmIChpc0RlZihwcm9wcy5fX29iX18pKSB7XG4gICAgcHJvcHMgPSB2bm9kZS5kYXRhLmRvbVByb3BzID0gZXh0ZW5kKHt9LCBwcm9wcyk7XG4gIH1cblxuICBmb3IgKGtleSBpbiBvbGRQcm9wcykge1xuICAgIGlmIChpc1VuZGVmKHByb3BzW2tleV0pKSB7XG4gICAgICBlbG1ba2V5XSA9ICcnO1xuICAgIH1cbiAgfVxuICBmb3IgKGtleSBpbiBwcm9wcykge1xuICAgIGN1ciA9IHByb3BzW2tleV07XG4gICAgLy8gaWdub3JlIGNoaWxkcmVuIGlmIHRoZSBub2RlIGhhcyB0ZXh0Q29udGVudCBvciBpbm5lckhUTUwsXG4gICAgLy8gYXMgdGhlc2Ugd2lsbCB0aHJvdyBhd2F5IGV4aXN0aW5nIERPTSBub2RlcyBhbmQgY2F1c2UgcmVtb3ZhbCBlcnJvcnNcbiAgICAvLyBvbiBzdWJzZXF1ZW50IHBhdGNoZXMgKCMzMzYwKVxuICAgIGlmIChrZXkgPT09ICd0ZXh0Q29udGVudCcgfHwga2V5ID09PSAnaW5uZXJIVE1MJykge1xuICAgICAgaWYgKHZub2RlLmNoaWxkcmVuKSB7IHZub2RlLmNoaWxkcmVuLmxlbmd0aCA9IDA7IH1cbiAgICAgIGlmIChjdXIgPT09IG9sZFByb3BzW2tleV0pIHsgY29udGludWUgfVxuICAgICAgLy8gIzY2MDEgd29yayBhcm91bmQgQ2hyb21lIHZlcnNpb24gPD0gNTUgYnVnIHdoZXJlIHNpbmdsZSB0ZXh0Tm9kZVxuICAgICAgLy8gcmVwbGFjZWQgYnkgaW5uZXJIVE1ML3RleHRDb250ZW50IHJldGFpbnMgaXRzIHBhcmVudE5vZGUgcHJvcGVydHlcbiAgICAgIGlmIChlbG0uY2hpbGROb2Rlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgZWxtLnJlbW92ZUNoaWxkKGVsbS5jaGlsZE5vZGVzWzBdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoa2V5ID09PSAndmFsdWUnKSB7XG4gICAgICAvLyBzdG9yZSB2YWx1ZSBhcyBfdmFsdWUgYXMgd2VsbCBzaW5jZVxuICAgICAgLy8gbm9uLXN0cmluZyB2YWx1ZXMgd2lsbCBiZSBzdHJpbmdpZmllZFxuICAgICAgZWxtLl92YWx1ZSA9IGN1cjtcbiAgICAgIC8vIGF2b2lkIHJlc2V0dGluZyBjdXJzb3IgcG9zaXRpb24gd2hlbiB2YWx1ZSBpcyB0aGUgc2FtZVxuICAgICAgdmFyIHN0ckN1ciA9IGlzVW5kZWYoY3VyKSA/ICcnIDogU3RyaW5nKGN1cik7XG4gICAgICBpZiAoc2hvdWxkVXBkYXRlVmFsdWUoZWxtLCBzdHJDdXIpKSB7XG4gICAgICAgIGVsbS52YWx1ZSA9IHN0ckN1cjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZWxtW2tleV0gPSBjdXI7XG4gICAgfVxuICB9XG59XG5cbi8vIGNoZWNrIHBsYXRmb3Jtcy93ZWIvdXRpbC9hdHRycy5qcyBhY2NlcHRWYWx1ZVxuXG5cbmZ1bmN0aW9uIHNob3VsZFVwZGF0ZVZhbHVlIChlbG0sIGNoZWNrVmFsKSB7XG4gIHJldHVybiAoIWVsbS5jb21wb3NpbmcgJiYgKFxuICAgIGVsbS50YWdOYW1lID09PSAnT1BUSU9OJyB8fFxuICAgIGlzTm90SW5Gb2N1c0FuZERpcnR5KGVsbSwgY2hlY2tWYWwpIHx8XG4gICAgaXNEaXJ0eVdpdGhNb2RpZmllcnMoZWxtLCBjaGVja1ZhbClcbiAgKSlcbn1cblxuZnVuY3Rpb24gaXNOb3RJbkZvY3VzQW5kRGlydHkgKGVsbSwgY2hlY2tWYWwpIHtcbiAgLy8gcmV0dXJuIHRydWUgd2hlbiB0ZXh0Ym94ICgubnVtYmVyIGFuZCAudHJpbSkgbG9zZXMgZm9jdXMgYW5kIGl0cyB2YWx1ZSBpc1xuICAvLyBub3QgZXF1YWwgdG8gdGhlIHVwZGF0ZWQgdmFsdWVcbiAgdmFyIG5vdEluRm9jdXMgPSB0cnVlO1xuICAvLyAjNjE1N1xuICAvLyB3b3JrIGFyb3VuZCBJRSBidWcgd2hlbiBhY2Nlc3NpbmcgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBpbiBhbiBpZnJhbWVcbiAgdHJ5IHsgbm90SW5Gb2N1cyA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgIT09IGVsbTsgfSBjYXRjaCAoZSkge31cbiAgcmV0dXJuIG5vdEluRm9jdXMgJiYgZWxtLnZhbHVlICE9PSBjaGVja1ZhbFxufVxuXG5mdW5jdGlvbiBpc0RpcnR5V2l0aE1vZGlmaWVycyAoZWxtLCBuZXdWYWwpIHtcbiAgdmFyIHZhbHVlID0gZWxtLnZhbHVlO1xuICB2YXIgbW9kaWZpZXJzID0gZWxtLl92TW9kaWZpZXJzOyAvLyBpbmplY3RlZCBieSB2LW1vZGVsIHJ1bnRpbWVcbiAgaWYgKGlzRGVmKG1vZGlmaWVycykpIHtcbiAgICBpZiAobW9kaWZpZXJzLmxhenkpIHtcbiAgICAgIC8vIGlucHV0cyB3aXRoIGxhenkgc2hvdWxkIG9ubHkgYmUgdXBkYXRlZCB3aGVuIG5vdCBpbiBmb2N1c1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIGlmIChtb2RpZmllcnMubnVtYmVyKSB7XG4gICAgICByZXR1cm4gdG9OdW1iZXIodmFsdWUpICE9PSB0b051bWJlcihuZXdWYWwpXG4gICAgfVxuICAgIGlmIChtb2RpZmllcnMudHJpbSkge1xuICAgICAgcmV0dXJuIHZhbHVlLnRyaW0oKSAhPT0gbmV3VmFsLnRyaW0oKVxuICAgIH1cbiAgfVxuICByZXR1cm4gdmFsdWUgIT09IG5ld1ZhbFxufVxuXG52YXIgZG9tUHJvcHMgPSB7XG4gIGNyZWF0ZTogdXBkYXRlRE9NUHJvcHMsXG4gIHVwZGF0ZTogdXBkYXRlRE9NUHJvcHNcbn1cblxuLyogICovXG5cbnZhciBwYXJzZVN0eWxlVGV4dCA9IGNhY2hlZChmdW5jdGlvbiAoY3NzVGV4dCkge1xuICB2YXIgcmVzID0ge307XG4gIHZhciBsaXN0RGVsaW1pdGVyID0gLzsoPyFbXihdKlxcKSkvZztcbiAgdmFyIHByb3BlcnR5RGVsaW1pdGVyID0gLzooLispLztcbiAgY3NzVGV4dC5zcGxpdChsaXN0RGVsaW1pdGVyKS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgaWYgKGl0ZW0pIHtcbiAgICAgIHZhciB0bXAgPSBpdGVtLnNwbGl0KHByb3BlcnR5RGVsaW1pdGVyKTtcbiAgICAgIHRtcC5sZW5ndGggPiAxICYmIChyZXNbdG1wWzBdLnRyaW0oKV0gPSB0bXBbMV0udHJpbSgpKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzXG59KTtcblxuLy8gbWVyZ2Ugc3RhdGljIGFuZCBkeW5hbWljIHN0eWxlIGRhdGEgb24gdGhlIHNhbWUgdm5vZGVcbmZ1bmN0aW9uIG5vcm1hbGl6ZVN0eWxlRGF0YSAoZGF0YSkge1xuICB2YXIgc3R5bGUgPSBub3JtYWxpemVTdHlsZUJpbmRpbmcoZGF0YS5zdHlsZSk7XG4gIC8vIHN0YXRpYyBzdHlsZSBpcyBwcmUtcHJvY2Vzc2VkIGludG8gYW4gb2JqZWN0IGR1cmluZyBjb21waWxhdGlvblxuICAvLyBhbmQgaXMgYWx3YXlzIGEgZnJlc2ggb2JqZWN0LCBzbyBpdCdzIHNhZmUgdG8gbWVyZ2UgaW50byBpdFxuICByZXR1cm4gZGF0YS5zdGF0aWNTdHlsZVxuICAgID8gZXh0ZW5kKGRhdGEuc3RhdGljU3R5bGUsIHN0eWxlKVxuICAgIDogc3R5bGVcbn1cblxuLy8gbm9ybWFsaXplIHBvc3NpYmxlIGFycmF5IC8gc3RyaW5nIHZhbHVlcyBpbnRvIE9iamVjdFxuZnVuY3Rpb24gbm9ybWFsaXplU3R5bGVCaW5kaW5nIChiaW5kaW5nU3R5bGUpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYmluZGluZ1N0eWxlKSkge1xuICAgIHJldHVybiB0b09iamVjdChiaW5kaW5nU3R5bGUpXG4gIH1cbiAgaWYgKHR5cGVvZiBiaW5kaW5nU3R5bGUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHBhcnNlU3R5bGVUZXh0KGJpbmRpbmdTdHlsZSlcbiAgfVxuICByZXR1cm4gYmluZGluZ1N0eWxlXG59XG5cbi8qKlxuICogcGFyZW50IGNvbXBvbmVudCBzdHlsZSBzaG91bGQgYmUgYWZ0ZXIgY2hpbGQnc1xuICogc28gdGhhdCBwYXJlbnQgY29tcG9uZW50J3Mgc3R5bGUgY291bGQgb3ZlcnJpZGUgaXRcbiAqL1xuZnVuY3Rpb24gZ2V0U3R5bGUgKHZub2RlLCBjaGVja0NoaWxkKSB7XG4gIHZhciByZXMgPSB7fTtcbiAgdmFyIHN0eWxlRGF0YTtcblxuICBpZiAoY2hlY2tDaGlsZCkge1xuICAgIHZhciBjaGlsZE5vZGUgPSB2bm9kZTtcbiAgICB3aGlsZSAoY2hpbGROb2RlLmNvbXBvbmVudEluc3RhbmNlKSB7XG4gICAgICBjaGlsZE5vZGUgPSBjaGlsZE5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlO1xuICAgICAgaWYgKFxuICAgICAgICBjaGlsZE5vZGUgJiYgY2hpbGROb2RlLmRhdGEgJiZcbiAgICAgICAgKHN0eWxlRGF0YSA9IG5vcm1hbGl6ZVN0eWxlRGF0YShjaGlsZE5vZGUuZGF0YSkpXG4gICAgICApIHtcbiAgICAgICAgZXh0ZW5kKHJlcywgc3R5bGVEYXRhKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoKHN0eWxlRGF0YSA9IG5vcm1hbGl6ZVN0eWxlRGF0YSh2bm9kZS5kYXRhKSkpIHtcbiAgICBleHRlbmQocmVzLCBzdHlsZURhdGEpO1xuICB9XG5cbiAgdmFyIHBhcmVudE5vZGUgPSB2bm9kZTtcbiAgd2hpbGUgKChwYXJlbnROb2RlID0gcGFyZW50Tm9kZS5wYXJlbnQpKSB7XG4gICAgaWYgKHBhcmVudE5vZGUuZGF0YSAmJiAoc3R5bGVEYXRhID0gbm9ybWFsaXplU3R5bGVEYXRhKHBhcmVudE5vZGUuZGF0YSkpKSB7XG4gICAgICBleHRlbmQocmVzLCBzdHlsZURhdGEpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qICAqL1xuXG52YXIgY3NzVmFyUkUgPSAvXi0tLztcbnZhciBpbXBvcnRhbnRSRSA9IC9cXHMqIWltcG9ydGFudCQvO1xudmFyIHNldFByb3AgPSBmdW5jdGlvbiAoZWwsIG5hbWUsIHZhbCkge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGNzc1ZhclJFLnRlc3QobmFtZSkpIHtcbiAgICBlbC5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCB2YWwpO1xuICB9IGVsc2UgaWYgKGltcG9ydGFudFJFLnRlc3QodmFsKSkge1xuICAgIGVsLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIHZhbC5yZXBsYWNlKGltcG9ydGFudFJFLCAnJyksICdpbXBvcnRhbnQnKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbm9ybWFsaXplZE5hbWUgPSBub3JtYWxpemUobmFtZSk7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSkge1xuICAgICAgLy8gU3VwcG9ydCB2YWx1ZXMgYXJyYXkgY3JlYXRlZCBieSBhdXRvcHJlZml4ZXIsIGUuZy5cbiAgICAgIC8vIHtkaXNwbGF5OiBbXCItd2Via2l0LWJveFwiLCBcIi1tcy1mbGV4Ym94XCIsIFwiZmxleFwiXX1cbiAgICAgIC8vIFNldCB0aGVtIG9uZSBieSBvbmUsIGFuZCB0aGUgYnJvd3NlciB3aWxsIG9ubHkgc2V0IHRob3NlIGl0IGNhbiByZWNvZ25pemVcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB2YWwubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgZWwuc3R5bGVbbm9ybWFsaXplZE5hbWVdID0gdmFsW2ldO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBlbC5zdHlsZVtub3JtYWxpemVkTmFtZV0gPSB2YWw7XG4gICAgfVxuICB9XG59O1xuXG52YXIgdmVuZG9yTmFtZXMgPSBbJ1dlYmtpdCcsICdNb3onLCAnbXMnXTtcblxudmFyIGVtcHR5U3R5bGU7XG52YXIgbm9ybWFsaXplID0gY2FjaGVkKGZ1bmN0aW9uIChwcm9wKSB7XG4gIGVtcHR5U3R5bGUgPSBlbXB0eVN0eWxlIHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLnN0eWxlO1xuICBwcm9wID0gY2FtZWxpemUocHJvcCk7XG4gIGlmIChwcm9wICE9PSAnZmlsdGVyJyAmJiAocHJvcCBpbiBlbXB0eVN0eWxlKSkge1xuICAgIHJldHVybiBwcm9wXG4gIH1cbiAgdmFyIGNhcE5hbWUgPSBwcm9wLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcHJvcC5zbGljZSgxKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB2ZW5kb3JOYW1lcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBuYW1lID0gdmVuZG9yTmFtZXNbaV0gKyBjYXBOYW1lO1xuICAgIGlmIChuYW1lIGluIGVtcHR5U3R5bGUpIHtcbiAgICAgIHJldHVybiBuYW1lXG4gICAgfVxuICB9XG59KTtcblxuZnVuY3Rpb24gdXBkYXRlU3R5bGUgKG9sZFZub2RlLCB2bm9kZSkge1xuICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gIHZhciBvbGREYXRhID0gb2xkVm5vZGUuZGF0YTtcblxuICBpZiAoaXNVbmRlZihkYXRhLnN0YXRpY1N0eWxlKSAmJiBpc1VuZGVmKGRhdGEuc3R5bGUpICYmXG4gICAgaXNVbmRlZihvbGREYXRhLnN0YXRpY1N0eWxlKSAmJiBpc1VuZGVmKG9sZERhdGEuc3R5bGUpXG4gICkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGN1ciwgbmFtZTtcbiAgdmFyIGVsID0gdm5vZGUuZWxtO1xuICB2YXIgb2xkU3RhdGljU3R5bGUgPSBvbGREYXRhLnN0YXRpY1N0eWxlO1xuICB2YXIgb2xkU3R5bGVCaW5kaW5nID0gb2xkRGF0YS5ub3JtYWxpemVkU3R5bGUgfHwgb2xkRGF0YS5zdHlsZSB8fCB7fTtcblxuICAvLyBpZiBzdGF0aWMgc3R5bGUgZXhpc3RzLCBzdHlsZWJpbmRpbmcgYWxyZWFkeSBtZXJnZWQgaW50byBpdCB3aGVuIGRvaW5nIG5vcm1hbGl6ZVN0eWxlRGF0YVxuICB2YXIgb2xkU3R5bGUgPSBvbGRTdGF0aWNTdHlsZSB8fCBvbGRTdHlsZUJpbmRpbmc7XG5cbiAgdmFyIHN0eWxlID0gbm9ybWFsaXplU3R5bGVCaW5kaW5nKHZub2RlLmRhdGEuc3R5bGUpIHx8IHt9O1xuXG4gIC8vIHN0b3JlIG5vcm1hbGl6ZWQgc3R5bGUgdW5kZXIgYSBkaWZmZXJlbnQga2V5IGZvciBuZXh0IGRpZmZcbiAgLy8gbWFrZSBzdXJlIHRvIGNsb25lIGl0IGlmIGl0J3MgcmVhY3RpdmUsIHNpbmNlIHRoZSB1c2VyIGxpa2VseSB3YW50c1xuICAvLyB0byBtdXRhdGUgaXQuXG4gIHZub2RlLmRhdGEubm9ybWFsaXplZFN0eWxlID0gaXNEZWYoc3R5bGUuX19vYl9fKVxuICAgID8gZXh0ZW5kKHt9LCBzdHlsZSlcbiAgICA6IHN0eWxlO1xuXG4gIHZhciBuZXdTdHlsZSA9IGdldFN0eWxlKHZub2RlLCB0cnVlKTtcblxuICBmb3IgKG5hbWUgaW4gb2xkU3R5bGUpIHtcbiAgICBpZiAoaXNVbmRlZihuZXdTdHlsZVtuYW1lXSkpIHtcbiAgICAgIHNldFByb3AoZWwsIG5hbWUsICcnKTtcbiAgICB9XG4gIH1cbiAgZm9yIChuYW1lIGluIG5ld1N0eWxlKSB7XG4gICAgY3VyID0gbmV3U3R5bGVbbmFtZV07XG4gICAgaWYgKGN1ciAhPT0gb2xkU3R5bGVbbmFtZV0pIHtcbiAgICAgIC8vIGllOSBzZXR0aW5nIHRvIG51bGwgaGFzIG5vIGVmZmVjdCwgbXVzdCB1c2UgZW1wdHkgc3RyaW5nXG4gICAgICBzZXRQcm9wKGVsLCBuYW1lLCBjdXIgPT0gbnVsbCA/ICcnIDogY3VyKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIHN0eWxlID0ge1xuICBjcmVhdGU6IHVwZGF0ZVN0eWxlLFxuICB1cGRhdGU6IHVwZGF0ZVN0eWxlXG59XG5cbi8qICAqL1xuXG4vKipcbiAqIEFkZCBjbGFzcyB3aXRoIGNvbXBhdGliaWxpdHkgZm9yIFNWRyBzaW5jZSBjbGFzc0xpc3QgaXMgbm90IHN1cHBvcnRlZCBvblxuICogU1ZHIGVsZW1lbnRzIGluIElFXG4gKi9cbmZ1bmN0aW9uIGFkZENsYXNzIChlbCwgY2xzKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoIWNscyB8fCAhKGNscyA9IGNscy50cmltKCkpKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAoZWwuY2xhc3NMaXN0KSB7XG4gICAgaWYgKGNscy5pbmRleE9mKCcgJykgPiAtMSkge1xuICAgICAgY2xzLnNwbGl0KC9cXHMrLykuZm9yRWFjaChmdW5jdGlvbiAoYykgeyByZXR1cm4gZWwuY2xhc3NMaXN0LmFkZChjKTsgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLmNsYXNzTGlzdC5hZGQoY2xzKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGN1ciA9IFwiIFwiICsgKGVsLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSB8fCAnJykgKyBcIiBcIjtcbiAgICBpZiAoY3VyLmluZGV4T2YoJyAnICsgY2xzICsgJyAnKSA8IDApIHtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAoY3VyICsgY2xzKS50cmltKCkpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFJlbW92ZSBjbGFzcyB3aXRoIGNvbXBhdGliaWxpdHkgZm9yIFNWRyBzaW5jZSBjbGFzc0xpc3QgaXMgbm90IHN1cHBvcnRlZCBvblxuICogU1ZHIGVsZW1lbnRzIGluIElFXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUNsYXNzIChlbCwgY2xzKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoIWNscyB8fCAhKGNscyA9IGNscy50cmltKCkpKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAoZWwuY2xhc3NMaXN0KSB7XG4gICAgaWYgKGNscy5pbmRleE9mKCcgJykgPiAtMSkge1xuICAgICAgY2xzLnNwbGl0KC9cXHMrLykuZm9yRWFjaChmdW5jdGlvbiAoYykgeyByZXR1cm4gZWwuY2xhc3NMaXN0LnJlbW92ZShjKTsgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoY2xzKTtcbiAgICB9XG4gICAgaWYgKCFlbC5jbGFzc0xpc3QubGVuZ3RoKSB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoJ2NsYXNzJyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBjdXIgPSBcIiBcIiArIChlbC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgfHwgJycpICsgXCIgXCI7XG4gICAgdmFyIHRhciA9ICcgJyArIGNscyArICcgJztcbiAgICB3aGlsZSAoY3VyLmluZGV4T2YodGFyKSA+PSAwKSB7XG4gICAgICBjdXIgPSBjdXIucmVwbGFjZSh0YXIsICcgJyk7XG4gICAgfVxuICAgIGN1ciA9IGN1ci50cmltKCk7XG4gICAgaWYgKGN1cikge1xuICAgICAgZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsIGN1cik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZSgnY2xhc3MnKTtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIHJlc29sdmVUcmFuc2l0aW9uIChkZWYpIHtcbiAgaWYgKCFkZWYpIHtcbiAgICByZXR1cm5cbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAodHlwZW9mIGRlZiA9PT0gJ29iamVjdCcpIHtcbiAgICB2YXIgcmVzID0ge307XG4gICAgaWYgKGRlZi5jc3MgIT09IGZhbHNlKSB7XG4gICAgICBleHRlbmQocmVzLCBhdXRvQ3NzVHJhbnNpdGlvbihkZWYubmFtZSB8fCAndicpKTtcbiAgICB9XG4gICAgZXh0ZW5kKHJlcywgZGVmKTtcbiAgICByZXR1cm4gcmVzXG4gIH0gZWxzZSBpZiAodHlwZW9mIGRlZiA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gYXV0b0Nzc1RyYW5zaXRpb24oZGVmKVxuICB9XG59XG5cbnZhciBhdXRvQ3NzVHJhbnNpdGlvbiA9IGNhY2hlZChmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4ge1xuICAgIGVudGVyQ2xhc3M6IChuYW1lICsgXCItZW50ZXJcIiksXG4gICAgZW50ZXJUb0NsYXNzOiAobmFtZSArIFwiLWVudGVyLXRvXCIpLFxuICAgIGVudGVyQWN0aXZlQ2xhc3M6IChuYW1lICsgXCItZW50ZXItYWN0aXZlXCIpLFxuICAgIGxlYXZlQ2xhc3M6IChuYW1lICsgXCItbGVhdmVcIiksXG4gICAgbGVhdmVUb0NsYXNzOiAobmFtZSArIFwiLWxlYXZlLXRvXCIpLFxuICAgIGxlYXZlQWN0aXZlQ2xhc3M6IChuYW1lICsgXCItbGVhdmUtYWN0aXZlXCIpXG4gIH1cbn0pO1xuXG52YXIgaGFzVHJhbnNpdGlvbiA9IGluQnJvd3NlciAmJiAhaXNJRTk7XG52YXIgVFJBTlNJVElPTiA9ICd0cmFuc2l0aW9uJztcbnZhciBBTklNQVRJT04gPSAnYW5pbWF0aW9uJztcblxuLy8gVHJhbnNpdGlvbiBwcm9wZXJ0eS9ldmVudCBzbmlmZmluZ1xudmFyIHRyYW5zaXRpb25Qcm9wID0gJ3RyYW5zaXRpb24nO1xudmFyIHRyYW5zaXRpb25FbmRFdmVudCA9ICd0cmFuc2l0aW9uZW5kJztcbnZhciBhbmltYXRpb25Qcm9wID0gJ2FuaW1hdGlvbic7XG52YXIgYW5pbWF0aW9uRW5kRXZlbnQgPSAnYW5pbWF0aW9uZW5kJztcbmlmIChoYXNUcmFuc2l0aW9uKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAod2luZG93Lm9udHJhbnNpdGlvbmVuZCA9PT0gdW5kZWZpbmVkICYmXG4gICAgd2luZG93Lm9ud2Via2l0dHJhbnNpdGlvbmVuZCAhPT0gdW5kZWZpbmVkXG4gICkge1xuICAgIHRyYW5zaXRpb25Qcm9wID0gJ1dlYmtpdFRyYW5zaXRpb24nO1xuICAgIHRyYW5zaXRpb25FbmRFdmVudCA9ICd3ZWJraXRUcmFuc2l0aW9uRW5kJztcbiAgfVxuICBpZiAod2luZG93Lm9uYW5pbWF0aW9uZW5kID09PSB1bmRlZmluZWQgJiZcbiAgICB3aW5kb3cub253ZWJraXRhbmltYXRpb25lbmQgIT09IHVuZGVmaW5lZFxuICApIHtcbiAgICBhbmltYXRpb25Qcm9wID0gJ1dlYmtpdEFuaW1hdGlvbic7XG4gICAgYW5pbWF0aW9uRW5kRXZlbnQgPSAnd2Via2l0QW5pbWF0aW9uRW5kJztcbiAgfVxufVxuXG4vLyBiaW5kaW5nIHRvIHdpbmRvdyBpcyBuZWNlc3NhcnkgdG8gbWFrZSBob3QgcmVsb2FkIHdvcmsgaW4gSUUgaW4gc3RyaWN0IG1vZGVcbnZhciByYWYgPSBpbkJyb3dzZXJcbiAgPyB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lXG4gICAgPyB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lLmJpbmQod2luZG93KVxuICAgIDogc2V0VGltZW91dFxuICA6IC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIGZ1bmN0aW9uIChmbikgeyByZXR1cm4gZm4oKTsgfTtcblxuZnVuY3Rpb24gbmV4dEZyYW1lIChmbikge1xuICByYWYoZnVuY3Rpb24gKCkge1xuICAgIHJhZihmbik7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBhZGRUcmFuc2l0aW9uQ2xhc3MgKGVsLCBjbHMpIHtcbiAgdmFyIHRyYW5zaXRpb25DbGFzc2VzID0gZWwuX3RyYW5zaXRpb25DbGFzc2VzIHx8IChlbC5fdHJhbnNpdGlvbkNsYXNzZXMgPSBbXSk7XG4gIGlmICh0cmFuc2l0aW9uQ2xhc3Nlcy5pbmRleE9mKGNscykgPCAwKSB7XG4gICAgdHJhbnNpdGlvbkNsYXNzZXMucHVzaChjbHMpO1xuICAgIGFkZENsYXNzKGVsLCBjbHMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVRyYW5zaXRpb25DbGFzcyAoZWwsIGNscykge1xuICBpZiAoZWwuX3RyYW5zaXRpb25DbGFzc2VzKSB7XG4gICAgcmVtb3ZlKGVsLl90cmFuc2l0aW9uQ2xhc3NlcywgY2xzKTtcbiAgfVxuICByZW1vdmVDbGFzcyhlbCwgY2xzKTtcbn1cblxuZnVuY3Rpb24gd2hlblRyYW5zaXRpb25FbmRzIChcbiAgZWwsXG4gIGV4cGVjdGVkVHlwZSxcbiAgY2Jcbikge1xuICB2YXIgcmVmID0gZ2V0VHJhbnNpdGlvbkluZm8oZWwsIGV4cGVjdGVkVHlwZSk7XG4gIHZhciB0eXBlID0gcmVmLnR5cGU7XG4gIHZhciB0aW1lb3V0ID0gcmVmLnRpbWVvdXQ7XG4gIHZhciBwcm9wQ291bnQgPSByZWYucHJvcENvdW50O1xuICBpZiAoIXR5cGUpIHsgcmV0dXJuIGNiKCkgfVxuICB2YXIgZXZlbnQgPSB0eXBlID09PSBUUkFOU0lUSU9OID8gdHJhbnNpdGlvbkVuZEV2ZW50IDogYW5pbWF0aW9uRW5kRXZlbnQ7XG4gIHZhciBlbmRlZCA9IDA7XG4gIHZhciBlbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgb25FbmQpO1xuICAgIGNiKCk7XG4gIH07XG4gIHZhciBvbkVuZCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgaWYgKGUudGFyZ2V0ID09PSBlbCkge1xuICAgICAgaWYgKCsrZW5kZWQgPj0gcHJvcENvdW50KSB7XG4gICAgICAgIGVuZCgpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGVuZGVkIDwgcHJvcENvdW50KSB7XG4gICAgICBlbmQoKTtcbiAgICB9XG4gIH0sIHRpbWVvdXQgKyAxKTtcbiAgZWwuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgb25FbmQpO1xufVxuXG52YXIgdHJhbnNmb3JtUkUgPSAvXFxiKHRyYW5zZm9ybXxhbGwpKCx8JCkvO1xuXG5mdW5jdGlvbiBnZXRUcmFuc2l0aW9uSW5mbyAoZWwsIGV4cGVjdGVkVHlwZSkge1xuICB2YXIgc3R5bGVzID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwpO1xuICB2YXIgdHJhbnNpdGlvbkRlbGF5cyA9IHN0eWxlc1t0cmFuc2l0aW9uUHJvcCArICdEZWxheSddLnNwbGl0KCcsICcpO1xuICB2YXIgdHJhbnNpdGlvbkR1cmF0aW9ucyA9IHN0eWxlc1t0cmFuc2l0aW9uUHJvcCArICdEdXJhdGlvbiddLnNwbGl0KCcsICcpO1xuICB2YXIgdHJhbnNpdGlvblRpbWVvdXQgPSBnZXRUaW1lb3V0KHRyYW5zaXRpb25EZWxheXMsIHRyYW5zaXRpb25EdXJhdGlvbnMpO1xuICB2YXIgYW5pbWF0aW9uRGVsYXlzID0gc3R5bGVzW2FuaW1hdGlvblByb3AgKyAnRGVsYXknXS5zcGxpdCgnLCAnKTtcbiAgdmFyIGFuaW1hdGlvbkR1cmF0aW9ucyA9IHN0eWxlc1thbmltYXRpb25Qcm9wICsgJ0R1cmF0aW9uJ10uc3BsaXQoJywgJyk7XG4gIHZhciBhbmltYXRpb25UaW1lb3V0ID0gZ2V0VGltZW91dChhbmltYXRpb25EZWxheXMsIGFuaW1hdGlvbkR1cmF0aW9ucyk7XG5cbiAgdmFyIHR5cGU7XG4gIHZhciB0aW1lb3V0ID0gMDtcbiAgdmFyIHByb3BDb3VudCA9IDA7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoZXhwZWN0ZWRUeXBlID09PSBUUkFOU0lUSU9OKSB7XG4gICAgaWYgKHRyYW5zaXRpb25UaW1lb3V0ID4gMCkge1xuICAgICAgdHlwZSA9IFRSQU5TSVRJT047XG4gICAgICB0aW1lb3V0ID0gdHJhbnNpdGlvblRpbWVvdXQ7XG4gICAgICBwcm9wQ291bnQgPSB0cmFuc2l0aW9uRHVyYXRpb25zLmxlbmd0aDtcbiAgICB9XG4gIH0gZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSBBTklNQVRJT04pIHtcbiAgICBpZiAoYW5pbWF0aW9uVGltZW91dCA+IDApIHtcbiAgICAgIHR5cGUgPSBBTklNQVRJT047XG4gICAgICB0aW1lb3V0ID0gYW5pbWF0aW9uVGltZW91dDtcbiAgICAgIHByb3BDb3VudCA9IGFuaW1hdGlvbkR1cmF0aW9ucy5sZW5ndGg7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRpbWVvdXQgPSBNYXRoLm1heCh0cmFuc2l0aW9uVGltZW91dCwgYW5pbWF0aW9uVGltZW91dCk7XG4gICAgdHlwZSA9IHRpbWVvdXQgPiAwXG4gICAgICA/IHRyYW5zaXRpb25UaW1lb3V0ID4gYW5pbWF0aW9uVGltZW91dFxuICAgICAgICA/IFRSQU5TSVRJT05cbiAgICAgICAgOiBBTklNQVRJT05cbiAgICAgIDogbnVsbDtcbiAgICBwcm9wQ291bnQgPSB0eXBlXG4gICAgICA/IHR5cGUgPT09IFRSQU5TSVRJT05cbiAgICAgICAgPyB0cmFuc2l0aW9uRHVyYXRpb25zLmxlbmd0aFxuICAgICAgICA6IGFuaW1hdGlvbkR1cmF0aW9ucy5sZW5ndGhcbiAgICAgIDogMDtcbiAgfVxuICB2YXIgaGFzVHJhbnNmb3JtID1cbiAgICB0eXBlID09PSBUUkFOU0lUSU9OICYmXG4gICAgdHJhbnNmb3JtUkUudGVzdChzdHlsZXNbdHJhbnNpdGlvblByb3AgKyAnUHJvcGVydHknXSk7XG4gIHJldHVybiB7XG4gICAgdHlwZTogdHlwZSxcbiAgICB0aW1lb3V0OiB0aW1lb3V0LFxuICAgIHByb3BDb3VudDogcHJvcENvdW50LFxuICAgIGhhc1RyYW5zZm9ybTogaGFzVHJhbnNmb3JtXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0VGltZW91dCAoZGVsYXlzLCBkdXJhdGlvbnMpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgd2hpbGUgKGRlbGF5cy5sZW5ndGggPCBkdXJhdGlvbnMubGVuZ3RoKSB7XG4gICAgZGVsYXlzID0gZGVsYXlzLmNvbmNhdChkZWxheXMpO1xuICB9XG5cbiAgcmV0dXJuIE1hdGgubWF4LmFwcGx5KG51bGwsIGR1cmF0aW9ucy5tYXAoZnVuY3Rpb24gKGQsIGkpIHtcbiAgICByZXR1cm4gdG9NcyhkKSArIHRvTXMoZGVsYXlzW2ldKVxuICB9KSlcbn1cblxuZnVuY3Rpb24gdG9NcyAocykge1xuICByZXR1cm4gTnVtYmVyKHMuc2xpY2UoMCwgLTEpKSAqIDEwMDBcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGVudGVyICh2bm9kZSwgdG9nZ2xlRGlzcGxheSkge1xuICB2YXIgZWwgPSB2bm9kZS5lbG07XG5cbiAgLy8gY2FsbCBsZWF2ZSBjYWxsYmFjayBub3dcbiAgaWYgKGlzRGVmKGVsLl9sZWF2ZUNiKSkge1xuICAgIGVsLl9sZWF2ZUNiLmNhbmNlbGxlZCA9IHRydWU7XG4gICAgZWwuX2xlYXZlQ2IoKTtcbiAgfVxuXG4gIHZhciBkYXRhID0gcmVzb2x2ZVRyYW5zaXRpb24odm5vZGUuZGF0YS50cmFuc2l0aW9uKTtcbiAgaWYgKGlzVW5kZWYoZGF0YSkpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoaXNEZWYoZWwuX2VudGVyQ2IpIHx8IGVsLm5vZGVUeXBlICE9PSAxKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgY3NzID0gZGF0YS5jc3M7XG4gIHZhciB0eXBlID0gZGF0YS50eXBlO1xuICB2YXIgZW50ZXJDbGFzcyA9IGRhdGEuZW50ZXJDbGFzcztcbiAgdmFyIGVudGVyVG9DbGFzcyA9IGRhdGEuZW50ZXJUb0NsYXNzO1xuICB2YXIgZW50ZXJBY3RpdmVDbGFzcyA9IGRhdGEuZW50ZXJBY3RpdmVDbGFzcztcbiAgdmFyIGFwcGVhckNsYXNzID0gZGF0YS5hcHBlYXJDbGFzcztcbiAgdmFyIGFwcGVhclRvQ2xhc3MgPSBkYXRhLmFwcGVhclRvQ2xhc3M7XG4gIHZhciBhcHBlYXJBY3RpdmVDbGFzcyA9IGRhdGEuYXBwZWFyQWN0aXZlQ2xhc3M7XG4gIHZhciBiZWZvcmVFbnRlciA9IGRhdGEuYmVmb3JlRW50ZXI7XG4gIHZhciBlbnRlciA9IGRhdGEuZW50ZXI7XG4gIHZhciBhZnRlckVudGVyID0gZGF0YS5hZnRlckVudGVyO1xuICB2YXIgZW50ZXJDYW5jZWxsZWQgPSBkYXRhLmVudGVyQ2FuY2VsbGVkO1xuICB2YXIgYmVmb3JlQXBwZWFyID0gZGF0YS5iZWZvcmVBcHBlYXI7XG4gIHZhciBhcHBlYXIgPSBkYXRhLmFwcGVhcjtcbiAgdmFyIGFmdGVyQXBwZWFyID0gZGF0YS5hZnRlckFwcGVhcjtcbiAgdmFyIGFwcGVhckNhbmNlbGxlZCA9IGRhdGEuYXBwZWFyQ2FuY2VsbGVkO1xuICB2YXIgZHVyYXRpb24gPSBkYXRhLmR1cmF0aW9uO1xuXG4gIC8vIGFjdGl2ZUluc3RhbmNlIHdpbGwgYWx3YXlzIGJlIHRoZSA8dHJhbnNpdGlvbj4gY29tcG9uZW50IG1hbmFnaW5nIHRoaXNcbiAgLy8gdHJhbnNpdGlvbi4gT25lIGVkZ2UgY2FzZSB0byBjaGVjayBpcyB3aGVuIHRoZSA8dHJhbnNpdGlvbj4gaXMgcGxhY2VkXG4gIC8vIGFzIHRoZSByb290IG5vZGUgb2YgYSBjaGlsZCBjb21wb25lbnQuIEluIHRoYXQgY2FzZSB3ZSBuZWVkIHRvIGNoZWNrXG4gIC8vIDx0cmFuc2l0aW9uPidzIHBhcmVudCBmb3IgYXBwZWFyIGNoZWNrLlxuICB2YXIgY29udGV4dCA9IGFjdGl2ZUluc3RhbmNlO1xuICB2YXIgdHJhbnNpdGlvbk5vZGUgPSBhY3RpdmVJbnN0YW5jZS4kdm5vZGU7XG4gIHdoaWxlICh0cmFuc2l0aW9uTm9kZSAmJiB0cmFuc2l0aW9uTm9kZS5wYXJlbnQpIHtcbiAgICB0cmFuc2l0aW9uTm9kZSA9IHRyYW5zaXRpb25Ob2RlLnBhcmVudDtcbiAgICBjb250ZXh0ID0gdHJhbnNpdGlvbk5vZGUuY29udGV4dDtcbiAgfVxuXG4gIHZhciBpc0FwcGVhciA9ICFjb250ZXh0Ll9pc01vdW50ZWQgfHwgIXZub2RlLmlzUm9vdEluc2VydDtcblxuICBpZiAoaXNBcHBlYXIgJiYgIWFwcGVhciAmJiBhcHBlYXIgIT09ICcnKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgc3RhcnRDbGFzcyA9IGlzQXBwZWFyICYmIGFwcGVhckNsYXNzXG4gICAgPyBhcHBlYXJDbGFzc1xuICAgIDogZW50ZXJDbGFzcztcbiAgdmFyIGFjdGl2ZUNsYXNzID0gaXNBcHBlYXIgJiYgYXBwZWFyQWN0aXZlQ2xhc3NcbiAgICA/IGFwcGVhckFjdGl2ZUNsYXNzXG4gICAgOiBlbnRlckFjdGl2ZUNsYXNzO1xuICB2YXIgdG9DbGFzcyA9IGlzQXBwZWFyICYmIGFwcGVhclRvQ2xhc3NcbiAgICA/IGFwcGVhclRvQ2xhc3NcbiAgICA6IGVudGVyVG9DbGFzcztcblxuICB2YXIgYmVmb3JlRW50ZXJIb29rID0gaXNBcHBlYXJcbiAgICA/IChiZWZvcmVBcHBlYXIgfHwgYmVmb3JlRW50ZXIpXG4gICAgOiBiZWZvcmVFbnRlcjtcbiAgdmFyIGVudGVySG9vayA9IGlzQXBwZWFyXG4gICAgPyAodHlwZW9mIGFwcGVhciA9PT0gJ2Z1bmN0aW9uJyA/IGFwcGVhciA6IGVudGVyKVxuICAgIDogZW50ZXI7XG4gIHZhciBhZnRlckVudGVySG9vayA9IGlzQXBwZWFyXG4gICAgPyAoYWZ0ZXJBcHBlYXIgfHwgYWZ0ZXJFbnRlcilcbiAgICA6IGFmdGVyRW50ZXI7XG4gIHZhciBlbnRlckNhbmNlbGxlZEhvb2sgPSBpc0FwcGVhclxuICAgID8gKGFwcGVhckNhbmNlbGxlZCB8fCBlbnRlckNhbmNlbGxlZClcbiAgICA6IGVudGVyQ2FuY2VsbGVkO1xuXG4gIHZhciBleHBsaWNpdEVudGVyRHVyYXRpb24gPSB0b051bWJlcihcbiAgICBpc09iamVjdChkdXJhdGlvbilcbiAgICAgID8gZHVyYXRpb24uZW50ZXJcbiAgICAgIDogZHVyYXRpb25cbiAgKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBleHBsaWNpdEVudGVyRHVyYXRpb24gIT0gbnVsbCkge1xuICAgIGNoZWNrRHVyYXRpb24oZXhwbGljaXRFbnRlckR1cmF0aW9uLCAnZW50ZXInLCB2bm9kZSk7XG4gIH1cblxuICB2YXIgZXhwZWN0c0NTUyA9IGNzcyAhPT0gZmFsc2UgJiYgIWlzSUU5O1xuICB2YXIgdXNlcldhbnRzQ29udHJvbCA9IGdldEhvb2tBcmd1bWVudHNMZW5ndGgoZW50ZXJIb29rKTtcblxuICB2YXIgY2IgPSBlbC5fZW50ZXJDYiA9IG9uY2UoZnVuY3Rpb24gKCkge1xuICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIHRvQ2xhc3MpO1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBhY3RpdmVDbGFzcyk7XG4gICAgfVxuICAgIGlmIChjYi5jYW5jZWxsZWQpIHtcbiAgICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgc3RhcnRDbGFzcyk7XG4gICAgICB9XG4gICAgICBlbnRlckNhbmNlbGxlZEhvb2sgJiYgZW50ZXJDYW5jZWxsZWRIb29rKGVsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYWZ0ZXJFbnRlckhvb2sgJiYgYWZ0ZXJFbnRlckhvb2soZWwpO1xuICAgIH1cbiAgICBlbC5fZW50ZXJDYiA9IG51bGw7XG4gIH0pO1xuXG4gIGlmICghdm5vZGUuZGF0YS5zaG93KSB7XG4gICAgLy8gcmVtb3ZlIHBlbmRpbmcgbGVhdmUgZWxlbWVudCBvbiBlbnRlciBieSBpbmplY3RpbmcgYW4gaW5zZXJ0IGhvb2tcbiAgICBtZXJnZVZOb2RlSG9vayh2bm9kZSwgJ2luc2VydCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBwYXJlbnQgPSBlbC5wYXJlbnROb2RlO1xuICAgICAgdmFyIHBlbmRpbmdOb2RlID0gcGFyZW50ICYmIHBhcmVudC5fcGVuZGluZyAmJiBwYXJlbnQuX3BlbmRpbmdbdm5vZGUua2V5XTtcbiAgICAgIGlmIChwZW5kaW5nTm9kZSAmJlxuICAgICAgICBwZW5kaW5nTm9kZS50YWcgPT09IHZub2RlLnRhZyAmJlxuICAgICAgICBwZW5kaW5nTm9kZS5lbG0uX2xlYXZlQ2JcbiAgICAgICkge1xuICAgICAgICBwZW5kaW5nTm9kZS5lbG0uX2xlYXZlQ2IoKTtcbiAgICAgIH1cbiAgICAgIGVudGVySG9vayAmJiBlbnRlckhvb2soZWwsIGNiKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIHN0YXJ0IGVudGVyIHRyYW5zaXRpb25cbiAgYmVmb3JlRW50ZXJIb29rICYmIGJlZm9yZUVudGVySG9vayhlbCk7XG4gIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBzdGFydENsYXNzKTtcbiAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGFjdGl2ZUNsYXNzKTtcbiAgICBuZXh0RnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBzdGFydENsYXNzKTtcbiAgICAgIGlmICghY2IuY2FuY2VsbGVkKSB7XG4gICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgdG9DbGFzcyk7XG4gICAgICAgIGlmICghdXNlcldhbnRzQ29udHJvbCkge1xuICAgICAgICAgIGlmIChpc1ZhbGlkRHVyYXRpb24oZXhwbGljaXRFbnRlckR1cmF0aW9uKSkge1xuICAgICAgICAgICAgc2V0VGltZW91dChjYiwgZXhwbGljaXRFbnRlckR1cmF0aW9uKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd2hlblRyYW5zaXRpb25FbmRzKGVsLCB0eXBlLCBjYik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBpZiAodm5vZGUuZGF0YS5zaG93KSB7XG4gICAgdG9nZ2xlRGlzcGxheSAmJiB0b2dnbGVEaXNwbGF5KCk7XG4gICAgZW50ZXJIb29rICYmIGVudGVySG9vayhlbCwgY2IpO1xuICB9XG5cbiAgaWYgKCFleHBlY3RzQ1NTICYmICF1c2VyV2FudHNDb250cm9sKSB7XG4gICAgY2IoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBsZWF2ZSAodm5vZGUsIHJtKSB7XG4gIHZhciBlbCA9IHZub2RlLmVsbTtcblxuICAvLyBjYWxsIGVudGVyIGNhbGxiYWNrIG5vd1xuICBpZiAoaXNEZWYoZWwuX2VudGVyQ2IpKSB7XG4gICAgZWwuX2VudGVyQ2IuY2FuY2VsbGVkID0gdHJ1ZTtcbiAgICBlbC5fZW50ZXJDYigpO1xuICB9XG5cbiAgdmFyIGRhdGEgPSByZXNvbHZlVHJhbnNpdGlvbih2bm9kZS5kYXRhLnRyYW5zaXRpb24pO1xuICBpZiAoaXNVbmRlZihkYXRhKSB8fCBlbC5ub2RlVHlwZSAhPT0gMSkge1xuICAgIHJldHVybiBybSgpXG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGlzRGVmKGVsLl9sZWF2ZUNiKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGNzcyA9IGRhdGEuY3NzO1xuICB2YXIgdHlwZSA9IGRhdGEudHlwZTtcbiAgdmFyIGxlYXZlQ2xhc3MgPSBkYXRhLmxlYXZlQ2xhc3M7XG4gIHZhciBsZWF2ZVRvQ2xhc3MgPSBkYXRhLmxlYXZlVG9DbGFzcztcbiAgdmFyIGxlYXZlQWN0aXZlQ2xhc3MgPSBkYXRhLmxlYXZlQWN0aXZlQ2xhc3M7XG4gIHZhciBiZWZvcmVMZWF2ZSA9IGRhdGEuYmVmb3JlTGVhdmU7XG4gIHZhciBsZWF2ZSA9IGRhdGEubGVhdmU7XG4gIHZhciBhZnRlckxlYXZlID0gZGF0YS5hZnRlckxlYXZlO1xuICB2YXIgbGVhdmVDYW5jZWxsZWQgPSBkYXRhLmxlYXZlQ2FuY2VsbGVkO1xuICB2YXIgZGVsYXlMZWF2ZSA9IGRhdGEuZGVsYXlMZWF2ZTtcbiAgdmFyIGR1cmF0aW9uID0gZGF0YS5kdXJhdGlvbjtcblxuICB2YXIgZXhwZWN0c0NTUyA9IGNzcyAhPT0gZmFsc2UgJiYgIWlzSUU5O1xuICB2YXIgdXNlcldhbnRzQ29udHJvbCA9IGdldEhvb2tBcmd1bWVudHNMZW5ndGgobGVhdmUpO1xuXG4gIHZhciBleHBsaWNpdExlYXZlRHVyYXRpb24gPSB0b051bWJlcihcbiAgICBpc09iamVjdChkdXJhdGlvbilcbiAgICAgID8gZHVyYXRpb24ubGVhdmVcbiAgICAgIDogZHVyYXRpb25cbiAgKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBpc0RlZihleHBsaWNpdExlYXZlRHVyYXRpb24pKSB7XG4gICAgY2hlY2tEdXJhdGlvbihleHBsaWNpdExlYXZlRHVyYXRpb24sICdsZWF2ZScsIHZub2RlKTtcbiAgfVxuXG4gIHZhciBjYiA9IGVsLl9sZWF2ZUNiID0gb25jZShmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGVsLnBhcmVudE5vZGUgJiYgZWwucGFyZW50Tm9kZS5fcGVuZGluZykge1xuICAgICAgZWwucGFyZW50Tm9kZS5fcGVuZGluZ1t2bm9kZS5rZXldID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVUb0NsYXNzKTtcbiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVBY3RpdmVDbGFzcyk7XG4gICAgfVxuICAgIGlmIChjYi5jYW5jZWxsZWQpIHtcbiAgICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVDbGFzcyk7XG4gICAgICB9XG4gICAgICBsZWF2ZUNhbmNlbGxlZCAmJiBsZWF2ZUNhbmNlbGxlZChlbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJtKCk7XG4gICAgICBhZnRlckxlYXZlICYmIGFmdGVyTGVhdmUoZWwpO1xuICAgIH1cbiAgICBlbC5fbGVhdmVDYiA9IG51bGw7XG4gIH0pO1xuXG4gIGlmIChkZWxheUxlYXZlKSB7XG4gICAgZGVsYXlMZWF2ZShwZXJmb3JtTGVhdmUpO1xuICB9IGVsc2Uge1xuICAgIHBlcmZvcm1MZWF2ZSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVyZm9ybUxlYXZlICgpIHtcbiAgICAvLyB0aGUgZGVsYXllZCBsZWF2ZSBtYXkgaGF2ZSBhbHJlYWR5IGJlZW4gY2FuY2VsbGVkXG4gICAgaWYgKGNiLmNhbmNlbGxlZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIC8vIHJlY29yZCBsZWF2aW5nIGVsZW1lbnRcbiAgICBpZiAoIXZub2RlLmRhdGEuc2hvdykge1xuICAgICAgKGVsLnBhcmVudE5vZGUuX3BlbmRpbmcgfHwgKGVsLnBhcmVudE5vZGUuX3BlbmRpbmcgPSB7fSkpWyh2bm9kZS5rZXkpXSA9IHZub2RlO1xuICAgIH1cbiAgICBiZWZvcmVMZWF2ZSAmJiBiZWZvcmVMZWF2ZShlbCk7XG4gICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVDbGFzcyk7XG4gICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQWN0aXZlQ2xhc3MpO1xuICAgICAgbmV4dEZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUNsYXNzKTtcbiAgICAgICAgaWYgKCFjYi5jYW5jZWxsZWQpIHtcbiAgICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlVG9DbGFzcyk7XG4gICAgICAgICAgaWYgKCF1c2VyV2FudHNDb250cm9sKSB7XG4gICAgICAgICAgICBpZiAoaXNWYWxpZER1cmF0aW9uKGV4cGxpY2l0TGVhdmVEdXJhdGlvbikpIHtcbiAgICAgICAgICAgICAgc2V0VGltZW91dChjYiwgZXhwbGljaXRMZWF2ZUR1cmF0aW9uKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHdoZW5UcmFuc2l0aW9uRW5kcyhlbCwgdHlwZSwgY2IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIGxlYXZlICYmIGxlYXZlKGVsLCBjYik7XG4gICAgaWYgKCFleHBlY3RzQ1NTICYmICF1c2VyV2FudHNDb250cm9sKSB7XG4gICAgICBjYigpO1xuICAgIH1cbiAgfVxufVxuXG4vLyBvbmx5IHVzZWQgaW4gZGV2IG1vZGVcbmZ1bmN0aW9uIGNoZWNrRHVyYXRpb24gKHZhbCwgbmFtZSwgdm5vZGUpIHtcbiAgaWYgKHR5cGVvZiB2YWwgIT09ICdudW1iZXInKSB7XG4gICAgd2FybihcbiAgICAgIFwiPHRyYW5zaXRpb24+IGV4cGxpY2l0IFwiICsgbmFtZSArIFwiIGR1cmF0aW9uIGlzIG5vdCBhIHZhbGlkIG51bWJlciAtIFwiICtcbiAgICAgIFwiZ290IFwiICsgKEpTT04uc3RyaW5naWZ5KHZhbCkpICsgXCIuXCIsXG4gICAgICB2bm9kZS5jb250ZXh0XG4gICAgKTtcbiAgfSBlbHNlIGlmIChpc05hTih2YWwpKSB7XG4gICAgd2FybihcbiAgICAgIFwiPHRyYW5zaXRpb24+IGV4cGxpY2l0IFwiICsgbmFtZSArIFwiIGR1cmF0aW9uIGlzIE5hTiAtIFwiICtcbiAgICAgICd0aGUgZHVyYXRpb24gZXhwcmVzc2lvbiBtaWdodCBiZSBpbmNvcnJlY3QuJyxcbiAgICAgIHZub2RlLmNvbnRleHRcbiAgICApO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzVmFsaWREdXJhdGlvbiAodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnbnVtYmVyJyAmJiAhaXNOYU4odmFsKVxufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSBhIHRyYW5zaXRpb24gaG9vaydzIGFyZ3VtZW50IGxlbmd0aC4gVGhlIGhvb2sgbWF5IGJlOlxuICogLSBhIG1lcmdlZCBob29rIChpbnZva2VyKSB3aXRoIHRoZSBvcmlnaW5hbCBpbiAuZm5zXG4gKiAtIGEgd3JhcHBlZCBjb21wb25lbnQgbWV0aG9kIChjaGVjayAuX2xlbmd0aClcbiAqIC0gYSBwbGFpbiBmdW5jdGlvbiAoLmxlbmd0aClcbiAqL1xuZnVuY3Rpb24gZ2V0SG9va0FyZ3VtZW50c0xlbmd0aCAoZm4pIHtcbiAgaWYgKGlzVW5kZWYoZm4pKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgdmFyIGludm9rZXJGbnMgPSBmbi5mbnM7XG4gIGlmIChpc0RlZihpbnZva2VyRm5zKSkge1xuICAgIC8vIGludm9rZXJcbiAgICByZXR1cm4gZ2V0SG9va0FyZ3VtZW50c0xlbmd0aChcbiAgICAgIEFycmF5LmlzQXJyYXkoaW52b2tlckZucylcbiAgICAgICAgPyBpbnZva2VyRm5zWzBdXG4gICAgICAgIDogaW52b2tlckZuc1xuICAgIClcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKGZuLl9sZW5ndGggfHwgZm4ubGVuZ3RoKSA+IDFcbiAgfVxufVxuXG5mdW5jdGlvbiBfZW50ZXIgKF8sIHZub2RlKSB7XG4gIGlmICh2bm9kZS5kYXRhLnNob3cgIT09IHRydWUpIHtcbiAgICBlbnRlcih2bm9kZSk7XG4gIH1cbn1cblxudmFyIHRyYW5zaXRpb24gPSBpbkJyb3dzZXIgPyB7XG4gIGNyZWF0ZTogX2VudGVyLFxuICBhY3RpdmF0ZTogX2VudGVyLFxuICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSQkMSAodm5vZGUsIHJtKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAodm5vZGUuZGF0YS5zaG93ICE9PSB0cnVlKSB7XG4gICAgICBsZWF2ZSh2bm9kZSwgcm0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBybSgpO1xuICAgIH1cbiAgfVxufSA6IHt9XG5cbnZhciBwbGF0Zm9ybU1vZHVsZXMgPSBbXG4gIGF0dHJzLFxuICBrbGFzcyxcbiAgZXZlbnRzLFxuICBkb21Qcm9wcyxcbiAgc3R5bGUsXG4gIHRyYW5zaXRpb25cbl1cblxuLyogICovXG5cbi8vIHRoZSBkaXJlY3RpdmUgbW9kdWxlIHNob3VsZCBiZSBhcHBsaWVkIGxhc3QsIGFmdGVyIGFsbFxuLy8gYnVpbHQtaW4gbW9kdWxlcyBoYXZlIGJlZW4gYXBwbGllZC5cbnZhciBtb2R1bGVzID0gcGxhdGZvcm1Nb2R1bGVzLmNvbmNhdChiYXNlTW9kdWxlcyk7XG5cbnZhciBwYXRjaCA9IGNyZWF0ZVBhdGNoRnVuY3Rpb24oeyBub2RlT3BzOiBub2RlT3BzLCBtb2R1bGVzOiBtb2R1bGVzIH0pO1xuXG4vKipcbiAqIE5vdCB0eXBlIGNoZWNraW5nIHRoaXMgZmlsZSBiZWNhdXNlIGZsb3cgZG9lc24ndCBsaWtlIGF0dGFjaGluZ1xuICogcHJvcGVydGllcyB0byBFbGVtZW50cy5cbiAqL1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbmlmIChpc0lFOSkge1xuICAvLyBodHRwOi8vd3d3Lm1hdHRzNDExLmNvbS9wb3N0L2ludGVybmV0LWV4cGxvcmVyLTktb25pbnB1dC9cbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignc2VsZWN0aW9uY2hhbmdlJywgZnVuY3Rpb24gKCkge1xuICAgIHZhciBlbCA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG4gICAgaWYgKGVsICYmIGVsLnZtb2RlbCkge1xuICAgICAgdHJpZ2dlcihlbCwgJ2lucHV0Jyk7XG4gICAgfVxuICB9KTtcbn1cblxudmFyIGRpcmVjdGl2ZSA9IHtcbiAgaW5zZXJ0ZWQ6IGZ1bmN0aW9uIGluc2VydGVkIChlbCwgYmluZGluZywgdm5vZGUsIG9sZFZub2RlKSB7XG4gICAgaWYgKHZub2RlLnRhZyA9PT0gJ3NlbGVjdCcpIHtcbiAgICAgIC8vICM2OTAzXG4gICAgICBpZiAob2xkVm5vZGUuZWxtICYmICFvbGRWbm9kZS5lbG0uX3ZPcHRpb25zKSB7XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKHZub2RlLCAncG9zdHBhdGNoJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGRpcmVjdGl2ZS5jb21wb25lbnRVcGRhdGVkKGVsLCBiaW5kaW5nLCB2bm9kZSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2V0U2VsZWN0ZWQoZWwsIGJpbmRpbmcsIHZub2RlLmNvbnRleHQpO1xuICAgICAgfVxuICAgICAgZWwuX3ZPcHRpb25zID0gW10ubWFwLmNhbGwoZWwub3B0aW9ucywgZ2V0VmFsdWUpO1xuICAgIH0gZWxzZSBpZiAodm5vZGUudGFnID09PSAndGV4dGFyZWEnIHx8IGlzVGV4dElucHV0VHlwZShlbC50eXBlKSkge1xuICAgICAgZWwuX3ZNb2RpZmllcnMgPSBiaW5kaW5nLm1vZGlmaWVycztcbiAgICAgIGlmICghYmluZGluZy5tb2RpZmllcnMubGF6eSkge1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjb21wb3NpdGlvbnN0YXJ0Jywgb25Db21wb3NpdGlvblN0YXJ0KTtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignY29tcG9zaXRpb25lbmQnLCBvbkNvbXBvc2l0aW9uRW5kKTtcbiAgICAgICAgLy8gU2FmYXJpIDwgMTAuMiAmIFVJV2ViVmlldyBkb2Vzbid0IGZpcmUgY29tcG9zaXRpb25lbmQgd2hlblxuICAgICAgICAvLyBzd2l0Y2hpbmcgZm9jdXMgYmVmb3JlIGNvbmZpcm1pbmcgY29tcG9zaXRpb24gY2hvaWNlXG4gICAgICAgIC8vIHRoaXMgYWxzbyBmaXhlcyB0aGUgaXNzdWUgd2hlcmUgc29tZSBicm93c2VycyBlLmcuIGlPUyBDaHJvbWVcbiAgICAgICAgLy8gZmlyZXMgXCJjaGFuZ2VcIiBpbnN0ZWFkIG9mIFwiaW5wdXRcIiBvbiBhdXRvY29tcGxldGUuXG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIG9uQ29tcG9zaXRpb25FbmQpO1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgaWYgKGlzSUU5KSB7XG4gICAgICAgICAgZWwudm1vZGVsID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBjb21wb25lbnRVcGRhdGVkOiBmdW5jdGlvbiBjb21wb25lbnRVcGRhdGVkIChlbCwgYmluZGluZywgdm5vZGUpIHtcbiAgICBpZiAodm5vZGUudGFnID09PSAnc2VsZWN0Jykge1xuICAgICAgc2V0U2VsZWN0ZWQoZWwsIGJpbmRpbmcsIHZub2RlLmNvbnRleHQpO1xuICAgICAgLy8gaW4gY2FzZSB0aGUgb3B0aW9ucyByZW5kZXJlZCBieSB2LWZvciBoYXZlIGNoYW5nZWQsXG4gICAgICAvLyBpdCdzIHBvc3NpYmxlIHRoYXQgdGhlIHZhbHVlIGlzIG91dC1vZi1zeW5jIHdpdGggdGhlIHJlbmRlcmVkIG9wdGlvbnMuXG4gICAgICAvLyBkZXRlY3Qgc3VjaCBjYXNlcyBhbmQgZmlsdGVyIG91dCB2YWx1ZXMgdGhhdCBubyBsb25nZXIgaGFzIGEgbWF0Y2hpbmdcbiAgICAgIC8vIG9wdGlvbiBpbiB0aGUgRE9NLlxuICAgICAgdmFyIHByZXZPcHRpb25zID0gZWwuX3ZPcHRpb25zO1xuICAgICAgdmFyIGN1ck9wdGlvbnMgPSBlbC5fdk9wdGlvbnMgPSBbXS5tYXAuY2FsbChlbC5vcHRpb25zLCBnZXRWYWx1ZSk7XG4gICAgICBpZiAoY3VyT3B0aW9ucy5zb21lKGZ1bmN0aW9uIChvLCBpKSB7IHJldHVybiAhbG9vc2VFcXVhbChvLCBwcmV2T3B0aW9uc1tpXSk7IH0pKSB7XG4gICAgICAgIC8vIHRyaWdnZXIgY2hhbmdlIGV2ZW50IGlmXG4gICAgICAgIC8vIG5vIG1hdGNoaW5nIG9wdGlvbiBmb3VuZCBmb3IgYXQgbGVhc3Qgb25lIHZhbHVlXG4gICAgICAgIHZhciBuZWVkUmVzZXQgPSBlbC5tdWx0aXBsZVxuICAgICAgICAgID8gYmluZGluZy52YWx1ZS5zb21lKGZ1bmN0aW9uICh2KSB7IHJldHVybiBoYXNOb01hdGNoaW5nT3B0aW9uKHYsIGN1ck9wdGlvbnMpOyB9KVxuICAgICAgICAgIDogYmluZGluZy52YWx1ZSAhPT0gYmluZGluZy5vbGRWYWx1ZSAmJiBoYXNOb01hdGNoaW5nT3B0aW9uKGJpbmRpbmcudmFsdWUsIGN1ck9wdGlvbnMpO1xuICAgICAgICBpZiAobmVlZFJlc2V0KSB7XG4gICAgICAgICAgdHJpZ2dlcihlbCwgJ2NoYW5nZScpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiBzZXRTZWxlY3RlZCAoZWwsIGJpbmRpbmcsIHZtKSB7XG4gIGFjdHVhbGx5U2V0U2VsZWN0ZWQoZWwsIGJpbmRpbmcsIHZtKTtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChpc0lFIHx8IGlzRWRnZSkge1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgYWN0dWFsbHlTZXRTZWxlY3RlZChlbCwgYmluZGluZywgdm0pO1xuICAgIH0sIDApO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFjdHVhbGx5U2V0U2VsZWN0ZWQgKGVsLCBiaW5kaW5nLCB2bSkge1xuICB2YXIgdmFsdWUgPSBiaW5kaW5nLnZhbHVlO1xuICB2YXIgaXNNdWx0aXBsZSA9IGVsLm11bHRpcGxlO1xuICBpZiAoaXNNdWx0aXBsZSAmJiAhQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICBcIjxzZWxlY3QgbXVsdGlwbGUgdi1tb2RlbD1cXFwiXCIgKyAoYmluZGluZy5leHByZXNzaW9uKSArIFwiXFxcIj4gXCIgK1xuICAgICAgXCJleHBlY3RzIGFuIEFycmF5IHZhbHVlIGZvciBpdHMgYmluZGluZywgYnV0IGdvdCBcIiArIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLnNsaWNlKDgsIC0xKSksXG4gICAgICB2bVxuICAgICk7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHNlbGVjdGVkLCBvcHRpb247XG4gIGZvciAodmFyIGkgPSAwLCBsID0gZWwub3B0aW9ucy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBvcHRpb24gPSBlbC5vcHRpb25zW2ldO1xuICAgIGlmIChpc011bHRpcGxlKSB7XG4gICAgICBzZWxlY3RlZCA9IGxvb3NlSW5kZXhPZih2YWx1ZSwgZ2V0VmFsdWUob3B0aW9uKSkgPiAtMTtcbiAgICAgIGlmIChvcHRpb24uc2VsZWN0ZWQgIT09IHNlbGVjdGVkKSB7XG4gICAgICAgIG9wdGlvbi5zZWxlY3RlZCA9IHNlbGVjdGVkO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAobG9vc2VFcXVhbChnZXRWYWx1ZShvcHRpb24pLCB2YWx1ZSkpIHtcbiAgICAgICAgaWYgKGVsLnNlbGVjdGVkSW5kZXggIT09IGkpIHtcbiAgICAgICAgICBlbC5zZWxlY3RlZEluZGV4ID0gaTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKCFpc011bHRpcGxlKSB7XG4gICAgZWwuc2VsZWN0ZWRJbmRleCA9IC0xO1xuICB9XG59XG5cbmZ1bmN0aW9uIGhhc05vTWF0Y2hpbmdPcHRpb24gKHZhbHVlLCBvcHRpb25zKSB7XG4gIHJldHVybiBvcHRpb25zLmV2ZXJ5KGZ1bmN0aW9uIChvKSB7IHJldHVybiAhbG9vc2VFcXVhbChvLCB2YWx1ZSk7IH0pXG59XG5cbmZ1bmN0aW9uIGdldFZhbHVlIChvcHRpb24pIHtcbiAgcmV0dXJuICdfdmFsdWUnIGluIG9wdGlvblxuICAgID8gb3B0aW9uLl92YWx1ZVxuICAgIDogb3B0aW9uLnZhbHVlXG59XG5cbmZ1bmN0aW9uIG9uQ29tcG9zaXRpb25TdGFydCAoZSkge1xuICBlLnRhcmdldC5jb21wb3NpbmcgPSB0cnVlO1xufVxuXG5mdW5jdGlvbiBvbkNvbXBvc2l0aW9uRW5kIChlKSB7XG4gIC8vIHByZXZlbnQgdHJpZ2dlcmluZyBhbiBpbnB1dCBldmVudCBmb3Igbm8gcmVhc29uXG4gIGlmICghZS50YXJnZXQuY29tcG9zaW5nKSB7IHJldHVybiB9XG4gIGUudGFyZ2V0LmNvbXBvc2luZyA9IGZhbHNlO1xuICB0cmlnZ2VyKGUudGFyZ2V0LCAnaW5wdXQnKTtcbn1cblxuZnVuY3Rpb24gdHJpZ2dlciAoZWwsIHR5cGUpIHtcbiAgdmFyIGUgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnSFRNTEV2ZW50cycpO1xuICBlLmluaXRFdmVudCh0eXBlLCB0cnVlLCB0cnVlKTtcbiAgZWwuZGlzcGF0Y2hFdmVudChlKTtcbn1cblxuLyogICovXG5cbi8vIHJlY3Vyc2l2ZWx5IHNlYXJjaCBmb3IgcG9zc2libGUgdHJhbnNpdGlvbiBkZWZpbmVkIGluc2lkZSB0aGUgY29tcG9uZW50IHJvb3RcbmZ1bmN0aW9uIGxvY2F0ZU5vZGUgKHZub2RlKSB7XG4gIHJldHVybiB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSAmJiAoIXZub2RlLmRhdGEgfHwgIXZub2RlLmRhdGEudHJhbnNpdGlvbilcbiAgICA/IGxvY2F0ZU5vZGUodm5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlKVxuICAgIDogdm5vZGVcbn1cblxudmFyIHNob3cgPSB7XG4gIGJpbmQ6IGZ1bmN0aW9uIGJpbmQgKGVsLCByZWYsIHZub2RlKSB7XG4gICAgdmFyIHZhbHVlID0gcmVmLnZhbHVlO1xuXG4gICAgdm5vZGUgPSBsb2NhdGVOb2RlKHZub2RlKTtcbiAgICB2YXIgdHJhbnNpdGlvbiQkMSA9IHZub2RlLmRhdGEgJiYgdm5vZGUuZGF0YS50cmFuc2l0aW9uO1xuICAgIHZhciBvcmlnaW5hbERpc3BsYXkgPSBlbC5fX3ZPcmlnaW5hbERpc3BsYXkgPVxuICAgICAgZWwuc3R5bGUuZGlzcGxheSA9PT0gJ25vbmUnID8gJycgOiBlbC5zdHlsZS5kaXNwbGF5O1xuICAgIGlmICh2YWx1ZSAmJiB0cmFuc2l0aW9uJCQxKSB7XG4gICAgICB2bm9kZS5kYXRhLnNob3cgPSB0cnVlO1xuICAgICAgZW50ZXIodm5vZGUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IG9yaWdpbmFsRGlzcGxheTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gdmFsdWUgPyBvcmlnaW5hbERpc3BsYXkgOiAnbm9uZSc7XG4gICAgfVxuICB9LFxuXG4gIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlIChlbCwgcmVmLCB2bm9kZSkge1xuICAgIHZhciB2YWx1ZSA9IHJlZi52YWx1ZTtcbiAgICB2YXIgb2xkVmFsdWUgPSByZWYub2xkVmFsdWU7XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIXZhbHVlID09PSAhb2xkVmFsdWUpIHsgcmV0dXJuIH1cbiAgICB2bm9kZSA9IGxvY2F0ZU5vZGUodm5vZGUpO1xuICAgIHZhciB0cmFuc2l0aW9uJCQxID0gdm5vZGUuZGF0YSAmJiB2bm9kZS5kYXRhLnRyYW5zaXRpb247XG4gICAgaWYgKHRyYW5zaXRpb24kJDEpIHtcbiAgICAgIHZub2RlLmRhdGEuc2hvdyA9IHRydWU7XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgZW50ZXIodm5vZGUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gZWwuX192T3JpZ2luYWxEaXNwbGF5O1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxlYXZlKHZub2RlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZSA/IGVsLl9fdk9yaWdpbmFsRGlzcGxheSA6ICdub25lJztcbiAgICB9XG4gIH0sXG5cbiAgdW5iaW5kOiBmdW5jdGlvbiB1bmJpbmQgKFxuICAgIGVsLFxuICAgIGJpbmRpbmcsXG4gICAgdm5vZGUsXG4gICAgb2xkVm5vZGUsXG4gICAgaXNEZXN0cm95XG4gICkge1xuICAgIGlmICghaXNEZXN0cm95KSB7XG4gICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gZWwuX192T3JpZ2luYWxEaXNwbGF5O1xuICAgIH1cbiAgfVxufVxuXG52YXIgcGxhdGZvcm1EaXJlY3RpdmVzID0ge1xuICBtb2RlbDogZGlyZWN0aXZlLFxuICBzaG93OiBzaG93XG59XG5cbi8qICAqL1xuXG4vLyBQcm92aWRlcyB0cmFuc2l0aW9uIHN1cHBvcnQgZm9yIGEgc2luZ2xlIGVsZW1lbnQvY29tcG9uZW50LlxuLy8gc3VwcG9ydHMgdHJhbnNpdGlvbiBtb2RlIChvdXQtaW4gLyBpbi1vdXQpXG5cbnZhciB0cmFuc2l0aW9uUHJvcHMgPSB7XG4gIG5hbWU6IFN0cmluZyxcbiAgYXBwZWFyOiBCb29sZWFuLFxuICBjc3M6IEJvb2xlYW4sXG4gIG1vZGU6IFN0cmluZyxcbiAgdHlwZTogU3RyaW5nLFxuICBlbnRlckNsYXNzOiBTdHJpbmcsXG4gIGxlYXZlQ2xhc3M6IFN0cmluZyxcbiAgZW50ZXJUb0NsYXNzOiBTdHJpbmcsXG4gIGxlYXZlVG9DbGFzczogU3RyaW5nLFxuICBlbnRlckFjdGl2ZUNsYXNzOiBTdHJpbmcsXG4gIGxlYXZlQWN0aXZlQ2xhc3M6IFN0cmluZyxcbiAgYXBwZWFyQ2xhc3M6IFN0cmluZyxcbiAgYXBwZWFyQWN0aXZlQ2xhc3M6IFN0cmluZyxcbiAgYXBwZWFyVG9DbGFzczogU3RyaW5nLFxuICBkdXJhdGlvbjogW051bWJlciwgU3RyaW5nLCBPYmplY3RdXG59O1xuXG4vLyBpbiBjYXNlIHRoZSBjaGlsZCBpcyBhbHNvIGFuIGFic3RyYWN0IGNvbXBvbmVudCwgZS5nLiA8a2VlcC1hbGl2ZT5cbi8vIHdlIHdhbnQgdG8gcmVjdXJzaXZlbHkgcmV0cmlldmUgdGhlIHJlYWwgY29tcG9uZW50IHRvIGJlIHJlbmRlcmVkXG5mdW5jdGlvbiBnZXRSZWFsQ2hpbGQgKHZub2RlKSB7XG4gIHZhciBjb21wT3B0aW9ucyA9IHZub2RlICYmIHZub2RlLmNvbXBvbmVudE9wdGlvbnM7XG4gIGlmIChjb21wT3B0aW9ucyAmJiBjb21wT3B0aW9ucy5DdG9yLm9wdGlvbnMuYWJzdHJhY3QpIHtcbiAgICByZXR1cm4gZ2V0UmVhbENoaWxkKGdldEZpcnN0Q29tcG9uZW50Q2hpbGQoY29tcE9wdGlvbnMuY2hpbGRyZW4pKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiB2bm9kZVxuICB9XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RUcmFuc2l0aW9uRGF0YSAoY29tcCkge1xuICB2YXIgZGF0YSA9IHt9O1xuICB2YXIgb3B0aW9ucyA9IGNvbXAuJG9wdGlvbnM7XG4gIC8vIHByb3BzXG4gIGZvciAodmFyIGtleSBpbiBvcHRpb25zLnByb3BzRGF0YSkge1xuICAgIGRhdGFba2V5XSA9IGNvbXBba2V5XTtcbiAgfVxuICAvLyBldmVudHMuXG4gIC8vIGV4dHJhY3QgbGlzdGVuZXJzIGFuZCBwYXNzIHRoZW0gZGlyZWN0bHkgdG8gdGhlIHRyYW5zaXRpb24gbWV0aG9kc1xuICB2YXIgbGlzdGVuZXJzID0gb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzO1xuICBmb3IgKHZhciBrZXkkMSBpbiBsaXN0ZW5lcnMpIHtcbiAgICBkYXRhW2NhbWVsaXplKGtleSQxKV0gPSBsaXN0ZW5lcnNba2V5JDFdO1xuICB9XG4gIHJldHVybiBkYXRhXG59XG5cbmZ1bmN0aW9uIHBsYWNlaG9sZGVyIChoLCByYXdDaGlsZCkge1xuICBpZiAoL1xcZC1rZWVwLWFsaXZlJC8udGVzdChyYXdDaGlsZC50YWcpKSB7XG4gICAgcmV0dXJuIGgoJ2tlZXAtYWxpdmUnLCB7XG4gICAgICBwcm9wczogcmF3Q2hpbGQuY29tcG9uZW50T3B0aW9ucy5wcm9wc0RhdGFcbiAgICB9KVxuICB9XG59XG5cbmZ1bmN0aW9uIGhhc1BhcmVudFRyYW5zaXRpb24gKHZub2RlKSB7XG4gIHdoaWxlICgodm5vZGUgPSB2bm9kZS5wYXJlbnQpKSB7XG4gICAgaWYgKHZub2RlLmRhdGEudHJhbnNpdGlvbikge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNTYW1lQ2hpbGQgKGNoaWxkLCBvbGRDaGlsZCkge1xuICByZXR1cm4gb2xkQ2hpbGQua2V5ID09PSBjaGlsZC5rZXkgJiYgb2xkQ2hpbGQudGFnID09PSBjaGlsZC50YWdcbn1cblxudmFyIFRyYW5zaXRpb24gPSB7XG4gIG5hbWU6ICd0cmFuc2l0aW9uJyxcbiAgcHJvcHM6IHRyYW5zaXRpb25Qcm9wcyxcbiAgYWJzdHJhY3Q6IHRydWUsXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIgKGgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMuJHNsb3RzLmRlZmF1bHQ7XG4gICAgaWYgKCFjaGlsZHJlbikge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gZmlsdGVyIG91dCB0ZXh0IG5vZGVzIChwb3NzaWJsZSB3aGl0ZXNwYWNlcylcbiAgICBjaGlsZHJlbiA9IGNoaWxkcmVuLmZpbHRlcihmdW5jdGlvbiAoYykgeyByZXR1cm4gYy50YWcgfHwgaXNBc3luY1BsYWNlaG9sZGVyKGMpOyB9KTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIWNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gd2FybiBtdWx0aXBsZSBlbGVtZW50c1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGNoaWxkcmVuLmxlbmd0aCA+IDEpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICc8dHJhbnNpdGlvbj4gY2FuIG9ubHkgYmUgdXNlZCBvbiBhIHNpbmdsZSBlbGVtZW50LiBVc2UgJyArXG4gICAgICAgICc8dHJhbnNpdGlvbi1ncm91cD4gZm9yIGxpc3RzLicsXG4gICAgICAgIHRoaXMuJHBhcmVudFxuICAgICAgKTtcbiAgICB9XG5cbiAgICB2YXIgbW9kZSA9IHRoaXMubW9kZTtcblxuICAgIC8vIHdhcm4gaW52YWxpZCBtb2RlXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgIG1vZGUgJiYgbW9kZSAhPT0gJ2luLW91dCcgJiYgbW9kZSAhPT0gJ291dC1pbidcbiAgICApIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdpbnZhbGlkIDx0cmFuc2l0aW9uPiBtb2RlOiAnICsgbW9kZSxcbiAgICAgICAgdGhpcy4kcGFyZW50XG4gICAgICApO1xuICAgIH1cblxuICAgIHZhciByYXdDaGlsZCA9IGNoaWxkcmVuWzBdO1xuXG4gICAgLy8gaWYgdGhpcyBpcyBhIGNvbXBvbmVudCByb290IG5vZGUgYW5kIHRoZSBjb21wb25lbnQnc1xuICAgIC8vIHBhcmVudCBjb250YWluZXIgbm9kZSBhbHNvIGhhcyB0cmFuc2l0aW9uLCBza2lwLlxuICAgIGlmIChoYXNQYXJlbnRUcmFuc2l0aW9uKHRoaXMuJHZub2RlKSkge1xuICAgICAgcmV0dXJuIHJhd0NoaWxkXG4gICAgfVxuXG4gICAgLy8gYXBwbHkgdHJhbnNpdGlvbiBkYXRhIHRvIGNoaWxkXG4gICAgLy8gdXNlIGdldFJlYWxDaGlsZCgpIHRvIGlnbm9yZSBhYnN0cmFjdCBjb21wb25lbnRzIGUuZy4ga2VlcC1hbGl2ZVxuICAgIHZhciBjaGlsZCA9IGdldFJlYWxDaGlsZChyYXdDaGlsZCk7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCFjaGlsZCkge1xuICAgICAgcmV0dXJuIHJhd0NoaWxkXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2xlYXZpbmcpIHtcbiAgICAgIHJldHVybiBwbGFjZWhvbGRlcihoLCByYXdDaGlsZClcbiAgICB9XG5cbiAgICAvLyBlbnN1cmUgYSBrZXkgdGhhdCBpcyB1bmlxdWUgdG8gdGhlIHZub2RlIHR5cGUgYW5kIHRvIHRoaXMgdHJhbnNpdGlvblxuICAgIC8vIGNvbXBvbmVudCBpbnN0YW5jZS4gVGhpcyBrZXkgd2lsbCBiZSB1c2VkIHRvIHJlbW92ZSBwZW5kaW5nIGxlYXZpbmcgbm9kZXNcbiAgICAvLyBkdXJpbmcgZW50ZXJpbmcuXG4gICAgdmFyIGlkID0gXCJfX3RyYW5zaXRpb24tXCIgKyAodGhpcy5fdWlkKSArIFwiLVwiO1xuICAgIGNoaWxkLmtleSA9IGNoaWxkLmtleSA9PSBudWxsXG4gICAgICA/IGNoaWxkLmlzQ29tbWVudFxuICAgICAgICA/IGlkICsgJ2NvbW1lbnQnXG4gICAgICAgIDogaWQgKyBjaGlsZC50YWdcbiAgICAgIDogaXNQcmltaXRpdmUoY2hpbGQua2V5KVxuICAgICAgICA/IChTdHJpbmcoY2hpbGQua2V5KS5pbmRleE9mKGlkKSA9PT0gMCA/IGNoaWxkLmtleSA6IGlkICsgY2hpbGQua2V5KVxuICAgICAgICA6IGNoaWxkLmtleTtcblxuICAgIHZhciBkYXRhID0gKGNoaWxkLmRhdGEgfHwgKGNoaWxkLmRhdGEgPSB7fSkpLnRyYW5zaXRpb24gPSBleHRyYWN0VHJhbnNpdGlvbkRhdGEodGhpcyk7XG4gICAgdmFyIG9sZFJhd0NoaWxkID0gdGhpcy5fdm5vZGU7XG4gICAgdmFyIG9sZENoaWxkID0gZ2V0UmVhbENoaWxkKG9sZFJhd0NoaWxkKTtcblxuICAgIC8vIG1hcmsgdi1zaG93XG4gICAgLy8gc28gdGhhdCB0aGUgdHJhbnNpdGlvbiBtb2R1bGUgY2FuIGhhbmQgb3ZlciB0aGUgY29udHJvbCB0byB0aGUgZGlyZWN0aXZlXG4gICAgaWYgKGNoaWxkLmRhdGEuZGlyZWN0aXZlcyAmJiBjaGlsZC5kYXRhLmRpcmVjdGl2ZXMuc29tZShmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5uYW1lID09PSAnc2hvdyc7IH0pKSB7XG4gICAgICBjaGlsZC5kYXRhLnNob3cgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChcbiAgICAgIG9sZENoaWxkICYmXG4gICAgICBvbGRDaGlsZC5kYXRhICYmXG4gICAgICAhaXNTYW1lQ2hpbGQoY2hpbGQsIG9sZENoaWxkKSAmJlxuICAgICAgIWlzQXN5bmNQbGFjZWhvbGRlcihvbGRDaGlsZCkgJiZcbiAgICAgIC8vICM2Njg3IGNvbXBvbmVudCByb290IGlzIGEgY29tbWVudCBub2RlXG4gICAgICAhKG9sZENoaWxkLmNvbXBvbmVudEluc3RhbmNlICYmIG9sZENoaWxkLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZS5pc0NvbW1lbnQpXG4gICAgKSB7XG4gICAgICAvLyByZXBsYWNlIG9sZCBjaGlsZCB0cmFuc2l0aW9uIGRhdGEgd2l0aCBmcmVzaCBvbmVcbiAgICAgIC8vIGltcG9ydGFudCBmb3IgZHluYW1pYyB0cmFuc2l0aW9ucyFcbiAgICAgIHZhciBvbGREYXRhID0gb2xkQ2hpbGQuZGF0YS50cmFuc2l0aW9uID0gZXh0ZW5kKHt9LCBkYXRhKTtcbiAgICAgIC8vIGhhbmRsZSB0cmFuc2l0aW9uIG1vZGVcbiAgICAgIGlmIChtb2RlID09PSAnb3V0LWluJykge1xuICAgICAgICAvLyByZXR1cm4gcGxhY2Vob2xkZXIgbm9kZSBhbmQgcXVldWUgdXBkYXRlIHdoZW4gbGVhdmUgZmluaXNoZXNcbiAgICAgICAgdGhpcy5fbGVhdmluZyA9IHRydWU7XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKG9sZERhdGEsICdhZnRlckxlYXZlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHRoaXMkMS5fbGVhdmluZyA9IGZhbHNlO1xuICAgICAgICAgIHRoaXMkMS4kZm9yY2VVcGRhdGUoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBwbGFjZWhvbGRlcihoLCByYXdDaGlsZClcbiAgICAgIH0gZWxzZSBpZiAobW9kZSA9PT0gJ2luLW91dCcpIHtcbiAgICAgICAgaWYgKGlzQXN5bmNQbGFjZWhvbGRlcihjaGlsZCkpIHtcbiAgICAgICAgICByZXR1cm4gb2xkUmF3Q2hpbGRcbiAgICAgICAgfVxuICAgICAgICB2YXIgZGVsYXllZExlYXZlO1xuICAgICAgICB2YXIgcGVyZm9ybUxlYXZlID0gZnVuY3Rpb24gKCkgeyBkZWxheWVkTGVhdmUoKTsgfTtcbiAgICAgICAgbWVyZ2VWTm9kZUhvb2soZGF0YSwgJ2FmdGVyRW50ZXInLCBwZXJmb3JtTGVhdmUpO1xuICAgICAgICBtZXJnZVZOb2RlSG9vayhkYXRhLCAnZW50ZXJDYW5jZWxsZWQnLCBwZXJmb3JtTGVhdmUpO1xuICAgICAgICBtZXJnZVZOb2RlSG9vayhvbGREYXRhLCAnZGVsYXlMZWF2ZScsIGZ1bmN0aW9uIChsZWF2ZSkgeyBkZWxheWVkTGVhdmUgPSBsZWF2ZTsgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJhd0NoaWxkXG4gIH1cbn1cblxuLyogICovXG5cbi8vIFByb3ZpZGVzIHRyYW5zaXRpb24gc3VwcG9ydCBmb3IgbGlzdCBpdGVtcy5cbi8vIHN1cHBvcnRzIG1vdmUgdHJhbnNpdGlvbnMgdXNpbmcgdGhlIEZMSVAgdGVjaG5pcXVlLlxuXG4vLyBCZWNhdXNlIHRoZSB2ZG9tJ3MgY2hpbGRyZW4gdXBkYXRlIGFsZ29yaXRobSBpcyBcInVuc3RhYmxlXCIgLSBpLmUuXG4vLyBpdCBkb2Vzbid0IGd1YXJhbnRlZSB0aGUgcmVsYXRpdmUgcG9zaXRpb25pbmcgb2YgcmVtb3ZlZCBlbGVtZW50cyxcbi8vIHdlIGZvcmNlIHRyYW5zaXRpb24tZ3JvdXAgdG8gdXBkYXRlIGl0cyBjaGlsZHJlbiBpbnRvIHR3byBwYXNzZXM6XG4vLyBpbiB0aGUgZmlyc3QgcGFzcywgd2UgcmVtb3ZlIGFsbCBub2RlcyB0aGF0IG5lZWQgdG8gYmUgcmVtb3ZlZCxcbi8vIHRyaWdnZXJpbmcgdGhlaXIgbGVhdmluZyB0cmFuc2l0aW9uOyBpbiB0aGUgc2Vjb25kIHBhc3MsIHdlIGluc2VydC9tb3ZlXG4vLyBpbnRvIHRoZSBmaW5hbCBkZXNpcmVkIHN0YXRlLiBUaGlzIHdheSBpbiB0aGUgc2Vjb25kIHBhc3MgcmVtb3ZlZFxuLy8gbm9kZXMgd2lsbCByZW1haW4gd2hlcmUgdGhleSBzaG91bGQgYmUuXG5cbnZhciBwcm9wcyA9IGV4dGVuZCh7XG4gIHRhZzogU3RyaW5nLFxuICBtb3ZlQ2xhc3M6IFN0cmluZ1xufSwgdHJhbnNpdGlvblByb3BzKTtcblxuZGVsZXRlIHByb3BzLm1vZGU7XG5cbnZhciBUcmFuc2l0aW9uR3JvdXAgPSB7XG4gIHByb3BzOiBwcm9wcyxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlciAoaCkge1xuICAgIHZhciB0YWcgPSB0aGlzLnRhZyB8fCB0aGlzLiR2bm9kZS5kYXRhLnRhZyB8fCAnc3Bhbic7XG4gICAgdmFyIG1hcCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdmFyIHByZXZDaGlsZHJlbiA9IHRoaXMucHJldkNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbjtcbiAgICB2YXIgcmF3Q2hpbGRyZW4gPSB0aGlzLiRzbG90cy5kZWZhdWx0IHx8IFtdO1xuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW4gPSBbXTtcbiAgICB2YXIgdHJhbnNpdGlvbkRhdGEgPSBleHRyYWN0VHJhbnNpdGlvbkRhdGEodGhpcyk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJhd0NoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgYyA9IHJhd0NoaWxkcmVuW2ldO1xuICAgICAgaWYgKGMudGFnKSB7XG4gICAgICAgIGlmIChjLmtleSAhPSBudWxsICYmIFN0cmluZyhjLmtleSkuaW5kZXhPZignX192bGlzdCcpICE9PSAwKSB7XG4gICAgICAgICAgY2hpbGRyZW4ucHVzaChjKTtcbiAgICAgICAgICBtYXBbYy5rZXldID0gY1xuICAgICAgICAgIDsoYy5kYXRhIHx8IChjLmRhdGEgPSB7fSkpLnRyYW5zaXRpb24gPSB0cmFuc2l0aW9uRGF0YTtcbiAgICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgdmFyIG9wdHMgPSBjLmNvbXBvbmVudE9wdGlvbnM7XG4gICAgICAgICAgdmFyIG5hbWUgPSBvcHRzID8gKG9wdHMuQ3Rvci5vcHRpb25zLm5hbWUgfHwgb3B0cy50YWcgfHwgJycpIDogYy50YWc7XG4gICAgICAgICAgd2FybigoXCI8dHJhbnNpdGlvbi1ncm91cD4gY2hpbGRyZW4gbXVzdCBiZSBrZXllZDogPFwiICsgbmFtZSArIFwiPlwiKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocHJldkNoaWxkcmVuKSB7XG4gICAgICB2YXIga2VwdCA9IFtdO1xuICAgICAgdmFyIHJlbW92ZWQgPSBbXTtcbiAgICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IHByZXZDaGlsZHJlbi5sZW5ndGg7IGkkMSsrKSB7XG4gICAgICAgIHZhciBjJDEgPSBwcmV2Q2hpbGRyZW5baSQxXTtcbiAgICAgICAgYyQxLmRhdGEudHJhbnNpdGlvbiA9IHRyYW5zaXRpb25EYXRhO1xuICAgICAgICBjJDEuZGF0YS5wb3MgPSBjJDEuZWxtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICBpZiAobWFwW2MkMS5rZXldKSB7XG4gICAgICAgICAga2VwdC5wdXNoKGMkMSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVtb3ZlZC5wdXNoKGMkMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMua2VwdCA9IGgodGFnLCBudWxsLCBrZXB0KTtcbiAgICAgIHRoaXMucmVtb3ZlZCA9IHJlbW92ZWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGgodGFnLCBudWxsLCBjaGlsZHJlbilcbiAgfSxcblxuICBiZWZvcmVVcGRhdGU6IGZ1bmN0aW9uIGJlZm9yZVVwZGF0ZSAoKSB7XG4gICAgLy8gZm9yY2UgcmVtb3ZpbmcgcGFzc1xuICAgIHRoaXMuX19wYXRjaF9fKFxuICAgICAgdGhpcy5fdm5vZGUsXG4gICAgICB0aGlzLmtlcHQsXG4gICAgICBmYWxzZSwgLy8gaHlkcmF0aW5nXG4gICAgICB0cnVlIC8vIHJlbW92ZU9ubHkgKCFpbXBvcnRhbnQsIGF2b2lkcyB1bm5lY2Vzc2FyeSBtb3ZlcylcbiAgICApO1xuICAgIHRoaXMuX3Zub2RlID0gdGhpcy5rZXB0O1xuICB9LFxuXG4gIHVwZGF0ZWQ6IGZ1bmN0aW9uIHVwZGF0ZWQgKCkge1xuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMucHJldkNoaWxkcmVuO1xuICAgIHZhciBtb3ZlQ2xhc3MgPSB0aGlzLm1vdmVDbGFzcyB8fCAoKHRoaXMubmFtZSB8fCAndicpICsgJy1tb3ZlJyk7XG4gICAgaWYgKCFjaGlsZHJlbi5sZW5ndGggfHwgIXRoaXMuaGFzTW92ZShjaGlsZHJlblswXS5lbG0sIG1vdmVDbGFzcykpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIHdlIGRpdmlkZSB0aGUgd29yayBpbnRvIHRocmVlIGxvb3BzIHRvIGF2b2lkIG1peGluZyBET00gcmVhZHMgYW5kIHdyaXRlc1xuICAgIC8vIGluIGVhY2ggaXRlcmF0aW9uIC0gd2hpY2ggaGVscHMgcHJldmVudCBsYXlvdXQgdGhyYXNoaW5nLlxuICAgIGNoaWxkcmVuLmZvckVhY2goY2FsbFBlbmRpbmdDYnMpO1xuICAgIGNoaWxkcmVuLmZvckVhY2gocmVjb3JkUG9zaXRpb24pO1xuICAgIGNoaWxkcmVuLmZvckVhY2goYXBwbHlUcmFuc2xhdGlvbik7XG5cbiAgICAvLyBmb3JjZSByZWZsb3cgdG8gcHV0IGV2ZXJ5dGhpbmcgaW4gcG9zaXRpb25cbiAgICAvLyBhc3NpZ24gdG8gdGhpcyB0byBhdm9pZCBiZWluZyByZW1vdmVkIGluIHRyZWUtc2hha2luZ1xuICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgIHRoaXMuX3JlZmxvdyA9IGRvY3VtZW50LmJvZHkub2Zmc2V0SGVpZ2h0O1xuXG4gICAgY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoYykge1xuICAgICAgaWYgKGMuZGF0YS5tb3ZlZCkge1xuICAgICAgICB2YXIgZWwgPSBjLmVsbTtcbiAgICAgICAgdmFyIHMgPSBlbC5zdHlsZTtcbiAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBtb3ZlQ2xhc3MpO1xuICAgICAgICBzLnRyYW5zZm9ybSA9IHMuV2Via2l0VHJhbnNmb3JtID0gcy50cmFuc2l0aW9uRHVyYXRpb24gPSAnJztcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcih0cmFuc2l0aW9uRW5kRXZlbnQsIGVsLl9tb3ZlQ2IgPSBmdW5jdGlvbiBjYiAoZSkge1xuICAgICAgICAgIGlmICghZSB8fCAvdHJhbnNmb3JtJC8udGVzdChlLnByb3BlcnR5TmFtZSkpIHtcbiAgICAgICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIodHJhbnNpdGlvbkVuZEV2ZW50LCBjYik7XG4gICAgICAgICAgICBlbC5fbW92ZUNiID0gbnVsbDtcbiAgICAgICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbW92ZUNsYXNzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxuXG4gIG1ldGhvZHM6IHtcbiAgICBoYXNNb3ZlOiBmdW5jdGlvbiBoYXNNb3ZlIChlbCwgbW92ZUNsYXNzKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmICghaGFzVHJhbnNpdGlvbikge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKHRoaXMuX2hhc01vdmUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2hhc01vdmVcbiAgICAgIH1cbiAgICAgIC8vIERldGVjdCB3aGV0aGVyIGFuIGVsZW1lbnQgd2l0aCB0aGUgbW92ZSBjbGFzcyBhcHBsaWVkIGhhc1xuICAgICAgLy8gQ1NTIHRyYW5zaXRpb25zLiBTaW5jZSB0aGUgZWxlbWVudCBtYXkgYmUgaW5zaWRlIGFuIGVudGVyaW5nXG4gICAgICAvLyB0cmFuc2l0aW9uIGF0IHRoaXMgdmVyeSBtb21lbnQsIHdlIG1ha2UgYSBjbG9uZSBvZiBpdCBhbmQgcmVtb3ZlXG4gICAgICAvLyBhbGwgb3RoZXIgdHJhbnNpdGlvbiBjbGFzc2VzIGFwcGxpZWQgdG8gZW5zdXJlIG9ubHkgdGhlIG1vdmUgY2xhc3NcbiAgICAgIC8vIGlzIGFwcGxpZWQuXG4gICAgICB2YXIgY2xvbmUgPSBlbC5jbG9uZU5vZGUoKTtcbiAgICAgIGlmIChlbC5fdHJhbnNpdGlvbkNsYXNzZXMpIHtcbiAgICAgICAgZWwuX3RyYW5zaXRpb25DbGFzc2VzLmZvckVhY2goZnVuY3Rpb24gKGNscykgeyByZW1vdmVDbGFzcyhjbG9uZSwgY2xzKTsgfSk7XG4gICAgICB9XG4gICAgICBhZGRDbGFzcyhjbG9uZSwgbW92ZUNsYXNzKTtcbiAgICAgIGNsb25lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICB0aGlzLiRlbC5hcHBlbmRDaGlsZChjbG9uZSk7XG4gICAgICB2YXIgaW5mbyA9IGdldFRyYW5zaXRpb25JbmZvKGNsb25lKTtcbiAgICAgIHRoaXMuJGVsLnJlbW92ZUNoaWxkKGNsb25lKTtcbiAgICAgIHJldHVybiAodGhpcy5faGFzTW92ZSA9IGluZm8uaGFzVHJhbnNmb3JtKVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjYWxsUGVuZGluZ0NicyAoYykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGMuZWxtLl9tb3ZlQ2IpIHtcbiAgICBjLmVsbS5fbW92ZUNiKCk7XG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChjLmVsbS5fZW50ZXJDYikge1xuICAgIGMuZWxtLl9lbnRlckNiKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVjb3JkUG9zaXRpb24gKGMpIHtcbiAgYy5kYXRhLm5ld1BvcyA9IGMuZWxtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xufVxuXG5mdW5jdGlvbiBhcHBseVRyYW5zbGF0aW9uIChjKSB7XG4gIHZhciBvbGRQb3MgPSBjLmRhdGEucG9zO1xuICB2YXIgbmV3UG9zID0gYy5kYXRhLm5ld1BvcztcbiAgdmFyIGR4ID0gb2xkUG9zLmxlZnQgLSBuZXdQb3MubGVmdDtcbiAgdmFyIGR5ID0gb2xkUG9zLnRvcCAtIG5ld1Bvcy50b3A7XG4gIGlmIChkeCB8fCBkeSkge1xuICAgIGMuZGF0YS5tb3ZlZCA9IHRydWU7XG4gICAgdmFyIHMgPSBjLmVsbS5zdHlsZTtcbiAgICBzLnRyYW5zZm9ybSA9IHMuV2Via2l0VHJhbnNmb3JtID0gXCJ0cmFuc2xhdGUoXCIgKyBkeCArIFwicHgsXCIgKyBkeSArIFwicHgpXCI7XG4gICAgcy50cmFuc2l0aW9uRHVyYXRpb24gPSAnMHMnO1xuICB9XG59XG5cbnZhciBwbGF0Zm9ybUNvbXBvbmVudHMgPSB7XG4gIFRyYW5zaXRpb246IFRyYW5zaXRpb24sXG4gIFRyYW5zaXRpb25Hcm91cDogVHJhbnNpdGlvbkdyb3VwXG59XG5cbi8qICAqL1xuXG4vLyBpbnN0YWxsIHBsYXRmb3JtIHNwZWNpZmljIHV0aWxzXG5WdWUuY29uZmlnLm11c3RVc2VQcm9wID0gbXVzdFVzZVByb3A7XG5WdWUuY29uZmlnLmlzUmVzZXJ2ZWRUYWcgPSBpc1Jlc2VydmVkVGFnO1xuVnVlLmNvbmZpZy5pc1Jlc2VydmVkQXR0ciA9IGlzUmVzZXJ2ZWRBdHRyO1xuVnVlLmNvbmZpZy5nZXRUYWdOYW1lc3BhY2UgPSBnZXRUYWdOYW1lc3BhY2U7XG5WdWUuY29uZmlnLmlzVW5rbm93bkVsZW1lbnQgPSBpc1Vua25vd25FbGVtZW50O1xuXG4vLyBpbnN0YWxsIHBsYXRmb3JtIHJ1bnRpbWUgZGlyZWN0aXZlcyAmIGNvbXBvbmVudHNcbmV4dGVuZChWdWUub3B0aW9ucy5kaXJlY3RpdmVzLCBwbGF0Zm9ybURpcmVjdGl2ZXMpO1xuZXh0ZW5kKFZ1ZS5vcHRpb25zLmNvbXBvbmVudHMsIHBsYXRmb3JtQ29tcG9uZW50cyk7XG5cbi8vIGluc3RhbGwgcGxhdGZvcm0gcGF0Y2ggZnVuY3Rpb25cblZ1ZS5wcm90b3R5cGUuX19wYXRjaF9fID0gaW5Ccm93c2VyID8gcGF0Y2ggOiBub29wO1xuXG4vLyBwdWJsaWMgbW91bnQgbWV0aG9kXG5WdWUucHJvdG90eXBlLiRtb3VudCA9IGZ1bmN0aW9uIChcbiAgZWwsXG4gIGh5ZHJhdGluZ1xuKSB7XG4gIGVsID0gZWwgJiYgaW5Ccm93c2VyID8gcXVlcnkoZWwpIDogdW5kZWZpbmVkO1xuICByZXR1cm4gbW91bnRDb21wb25lbnQodGhpcywgZWwsIGh5ZHJhdGluZylcbn07XG5cbi8vIGRldnRvb2xzIGdsb2JhbCBob29rXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuaWYgKGluQnJvd3Nlcikge1xuICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoY29uZmlnLmRldnRvb2xzKSB7XG4gICAgICBpZiAoZGV2dG9vbHMpIHtcbiAgICAgICAgZGV2dG9vbHMuZW1pdCgnaW5pdCcsIFZ1ZSk7XG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAndGVzdCcgJiZcbiAgICAgICAgaXNDaHJvbWVcbiAgICAgICkge1xuICAgICAgICBjb25zb2xlW2NvbnNvbGUuaW5mbyA/ICdpbmZvJyA6ICdsb2cnXShcbiAgICAgICAgICAnRG93bmxvYWQgdGhlIFZ1ZSBEZXZ0b29scyBleHRlbnNpb24gZm9yIGEgYmV0dGVyIGRldmVsb3BtZW50IGV4cGVyaWVuY2U6XFxuJyArXG4gICAgICAgICAgJ2h0dHBzOi8vZ2l0aHViLmNvbS92dWVqcy92dWUtZGV2dG9vbHMnXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Rlc3QnICYmXG4gICAgICBjb25maWcucHJvZHVjdGlvblRpcCAhPT0gZmFsc2UgJiZcbiAgICAgIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJ1xuICAgICkge1xuICAgICAgY29uc29sZVtjb25zb2xlLmluZm8gPyAnaW5mbycgOiAnbG9nJ10oXG4gICAgICAgIFwiWW91IGFyZSBydW5uaW5nIFZ1ZSBpbiBkZXZlbG9wbWVudCBtb2RlLlxcblwiICtcbiAgICAgICAgXCJNYWtlIHN1cmUgdG8gdHVybiBvbiBwcm9kdWN0aW9uIG1vZGUgd2hlbiBkZXBsb3lpbmcgZm9yIHByb2R1Y3Rpb24uXFxuXCIgK1xuICAgICAgICBcIlNlZSBtb3JlIHRpcHMgYXQgaHR0cHM6Ly92dWVqcy5vcmcvZ3VpZGUvZGVwbG95bWVudC5odG1sXCJcbiAgICAgICk7XG4gICAgfVxuICB9LCAwKTtcbn1cblxuLyogICovXG5cbmV4cG9ydCBkZWZhdWx0IFZ1ZTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4XG52YXIgZ2xvYmFsID0gbW9kdWxlLmV4cG9ydHMgPSB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnICYmIHdpbmRvdy5NYXRoID09IE1hdGhcbiAgPyB3aW5kb3cgOiB0eXBlb2Ygc2VsZiAhPSAndW5kZWZpbmVkJyAmJiBzZWxmLk1hdGggPT0gTWF0aCA/IHNlbGZcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gIDogRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbmlmICh0eXBlb2YgX19nID09ICdudW1iZXInKSBfX2cgPSBnbG9iYWw7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiIsIi8qKlxuICAqIHZ1ZS1jbGFzcy1jb21wb25lbnQgdjYuMy4yXG4gICogKGMpIDIwMTUtcHJlc2VudCBFdmFuIFlvdVxuICAqIEBsaWNlbnNlIE1JVFxuICAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcERlZmF1bHQgKGV4KSB7IHJldHVybiAoZXggJiYgKHR5cGVvZiBleCA9PT0gJ29iamVjdCcpICYmICdkZWZhdWx0JyBpbiBleCkgPyBleFsnZGVmYXVsdCddIDogZXg7IH1cblxudmFyIFZ1ZSA9IF9pbnRlcm9wRGVmYXVsdChyZXF1aXJlKCd2dWUnKSk7XG5cbnZhciByZWZsZWN0aW9uSXNTdXBwb3J0ZWQgPSB0eXBlb2YgUmVmbGVjdCAhPT0gJ3VuZGVmaW5lZCcgJiYgUmVmbGVjdC5kZWZpbmVNZXRhZGF0YTtcbmZ1bmN0aW9uIGNvcHlSZWZsZWN0aW9uTWV0YWRhdGEodG8sIGZyb20pIHtcbiAgICBmb3J3YXJkTWV0YWRhdGEodG8sIGZyb20pO1xuICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGZyb20ucHJvdG90eXBlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgZm9yd2FyZE1ldGFkYXRhKHRvLnByb3RvdHlwZSwgZnJvbS5wcm90b3R5cGUsIGtleSk7XG4gICAgfSk7XG4gICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoZnJvbSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGZvcndhcmRNZXRhZGF0YSh0bywgZnJvbSwga2V5KTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGZvcndhcmRNZXRhZGF0YSh0bywgZnJvbSwgcHJvcGVydHlLZXkpIHtcbiAgICB2YXIgbWV0YUtleXMgPSBwcm9wZXJ0eUtleVxuICAgICAgICA/IFJlZmxlY3QuZ2V0T3duTWV0YWRhdGFLZXlzKGZyb20sIHByb3BlcnR5S2V5KVxuICAgICAgICA6IFJlZmxlY3QuZ2V0T3duTWV0YWRhdGFLZXlzKGZyb20pO1xuICAgIG1ldGFLZXlzLmZvckVhY2goZnVuY3Rpb24gKG1ldGFLZXkpIHtcbiAgICAgICAgdmFyIG1ldGFkYXRhID0gcHJvcGVydHlLZXlcbiAgICAgICAgICAgID8gUmVmbGVjdC5nZXRPd25NZXRhZGF0YShtZXRhS2V5LCBmcm9tLCBwcm9wZXJ0eUtleSlcbiAgICAgICAgICAgIDogUmVmbGVjdC5nZXRPd25NZXRhZGF0YShtZXRhS2V5LCBmcm9tKTtcbiAgICAgICAgaWYgKHByb3BlcnR5S2V5KSB7XG4gICAgICAgICAgICBSZWZsZWN0LmRlZmluZU1ldGFkYXRhKG1ldGFLZXksIG1ldGFkYXRhLCB0bywgcHJvcGVydHlLZXkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgUmVmbGVjdC5kZWZpbmVNZXRhZGF0YShtZXRhS2V5LCBtZXRhZGF0YSwgdG8pO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5cbnZhciBmYWtlQXJyYXkgPSB7IF9fcHJvdG9fXzogW10gfTtcbnZhciBoYXNQcm90byA9IGZha2VBcnJheSBpbnN0YW5jZW9mIEFycmF5O1xuZnVuY3Rpb24gY3JlYXRlRGVjb3JhdG9yKGZhY3RvcnkpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5LCBpbmRleCkge1xuICAgICAgICB2YXIgQ3RvciA9IHR5cGVvZiB0YXJnZXQgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgID8gdGFyZ2V0XG4gICAgICAgICAgICA6IHRhcmdldC5jb25zdHJ1Y3RvcjtcbiAgICAgICAgaWYgKCFDdG9yLl9fZGVjb3JhdG9yc19fKSB7XG4gICAgICAgICAgICBDdG9yLl9fZGVjb3JhdG9yc19fID0gW107XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBpbmRleCAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIGluZGV4ID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIEN0b3IuX19kZWNvcmF0b3JzX18ucHVzaChmdW5jdGlvbiAob3B0aW9ucykgeyByZXR1cm4gZmFjdG9yeShvcHRpb25zLCBrZXksIGluZGV4KTsgfSk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIG1peGlucygpIHtcbiAgICB2YXIgQ3RvcnMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBDdG9yc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICByZXR1cm4gVnVlLmV4dGVuZCh7IG1peGluczogQ3RvcnMgfSk7XG59XG5mdW5jdGlvbiBpc1ByaW1pdGl2ZSh2YWx1ZSkge1xuICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICAgIHJldHVybiB2YWx1ZSA9PSBudWxsIHx8ICh0eXBlICE9PSAnb2JqZWN0JyAmJiB0eXBlICE9PSAnZnVuY3Rpb24nKTtcbn1cbmZ1bmN0aW9uIHdhcm4obWVzc2FnZSkge1xuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY29uc29sZS53YXJuKCdbdnVlLWNsYXNzLWNvbXBvbmVudF0gJyArIG1lc3NhZ2UpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gY29sbGVjdERhdGFGcm9tQ29uc3RydWN0b3Iodm0sIENvbXBvbmVudCkge1xuICAgIC8vIG92ZXJyaWRlIF9pbml0IHRvIHByZXZlbnQgdG8gaW5pdCBhcyBWdWUgaW5zdGFuY2VcbiAgICB2YXIgb3JpZ2luYWxJbml0ID0gQ29tcG9uZW50LnByb3RvdHlwZS5faW5pdDtcbiAgICBDb21wb25lbnQucHJvdG90eXBlLl9pbml0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAvLyBwcm94eSB0byBhY3R1YWwgdm1cbiAgICAgICAgdmFyIGtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh2bSk7XG4gICAgICAgIC8vIDIuMi4wIGNvbXBhdCAocHJvcHMgYXJlIG5vIGxvbmdlciBleHBvc2VkIGFzIHNlbGYgcHJvcGVydGllcylcbiAgICAgICAgaWYgKHZtLiRvcHRpb25zLnByb3BzKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gdm0uJG9wdGlvbnMucHJvcHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXZtLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICBpZiAoa2V5LmNoYXJBdCgwKSAhPT0gJ18nKSB7XG4gICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KF90aGlzLCBrZXksIHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB2bVtrZXldOyB9LFxuICAgICAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkgeyB2bVtrZXldID0gdmFsdWU7IH0sXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8vIHNob3VsZCBiZSBhY3F1aXJlZCBjbGFzcyBwcm9wZXJ0eSB2YWx1ZXNcbiAgICB2YXIgZGF0YSA9IG5ldyBDb21wb25lbnQoKTtcbiAgICAvLyByZXN0b3JlIG9yaWdpbmFsIF9pbml0IHRvIGF2b2lkIG1lbW9yeSBsZWFrICgjMjA5KVxuICAgIENvbXBvbmVudC5wcm90b3R5cGUuX2luaXQgPSBvcmlnaW5hbEluaXQ7XG4gICAgLy8gY3JlYXRlIHBsYWluIGRhdGEgb2JqZWN0XG4gICAgdmFyIHBsYWluRGF0YSA9IHt9O1xuICAgIE9iamVjdC5rZXlzKGRhdGEpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAoZGF0YVtrZXldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHBsYWluRGF0YVtrZXldID0gZGF0YVtrZXldO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgaWYgKCEoQ29tcG9uZW50LnByb3RvdHlwZSBpbnN0YW5jZW9mIFZ1ZSkgJiYgT2JqZWN0LmtleXMocGxhaW5EYXRhKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB3YXJuKCdDb21wb25lbnQgY2xhc3MgbXVzdCBpbmhlcml0IFZ1ZSBvciBpdHMgZGVzY2VuZGFudCBjbGFzcyAnICtcbiAgICAgICAgICAgICAgICAnd2hlbiBjbGFzcyBwcm9wZXJ0eSBpcyB1c2VkLicpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwbGFpbkRhdGE7XG59XG5cbnZhciAkaW50ZXJuYWxIb29rcyA9IFtcbiAgICAnZGF0YScsXG4gICAgJ2JlZm9yZUNyZWF0ZScsXG4gICAgJ2NyZWF0ZWQnLFxuICAgICdiZWZvcmVNb3VudCcsXG4gICAgJ21vdW50ZWQnLFxuICAgICdiZWZvcmVEZXN0cm95JyxcbiAgICAnZGVzdHJveWVkJyxcbiAgICAnYmVmb3JlVXBkYXRlJyxcbiAgICAndXBkYXRlZCcsXG4gICAgJ2FjdGl2YXRlZCcsXG4gICAgJ2RlYWN0aXZhdGVkJyxcbiAgICAncmVuZGVyJyxcbiAgICAnZXJyb3JDYXB0dXJlZCcgLy8gMi41XG5dO1xuZnVuY3Rpb24gY29tcG9uZW50RmFjdG9yeShDb21wb25lbnQsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgIG9wdGlvbnMubmFtZSA9IG9wdGlvbnMubmFtZSB8fCBDb21wb25lbnQuX2NvbXBvbmVudFRhZyB8fCBDb21wb25lbnQubmFtZTtcbiAgICAvLyBwcm90b3R5cGUgcHJvcHMuXG4gICAgdmFyIHByb3RvID0gQ29tcG9uZW50LnByb3RvdHlwZTtcbiAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhwcm90bykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmIChrZXkgPT09ICdjb25zdHJ1Y3RvcicpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBob29rc1xuICAgICAgICBpZiAoJGludGVybmFsSG9va3MuaW5kZXhPZihrZXkpID4gLTEpIHtcbiAgICAgICAgICAgIG9wdGlvbnNba2V5XSA9IHByb3RvW2tleV07XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHByb3RvLCBrZXkpO1xuICAgICAgICBpZiAoZGVzY3JpcHRvci52YWx1ZSAhPT0gdm9pZCAwKSB7XG4gICAgICAgICAgICAvLyBtZXRob2RzXG4gICAgICAgICAgICBpZiAodHlwZW9mIGRlc2NyaXB0b3IudmFsdWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAob3B0aW9ucy5tZXRob2RzIHx8IChvcHRpb25zLm1ldGhvZHMgPSB7fSkpW2tleV0gPSBkZXNjcmlwdG9yLnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gdHlwZXNjcmlwdCBkZWNvcmF0ZWQgZGF0YVxuICAgICAgICAgICAgICAgIChvcHRpb25zLm1peGlucyB8fCAob3B0aW9ucy5taXhpbnMgPSBbXSkpLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBkYXRhOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2EgPSB7fSwgX2Fba2V5XSA9IGRlc2NyaXB0b3IudmFsdWUsIF9hO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZGVzY3JpcHRvci5nZXQgfHwgZGVzY3JpcHRvci5zZXQpIHtcbiAgICAgICAgICAgIC8vIGNvbXB1dGVkIHByb3BlcnRpZXNcbiAgICAgICAgICAgIChvcHRpb25zLmNvbXB1dGVkIHx8IChvcHRpb25zLmNvbXB1dGVkID0ge30pKVtrZXldID0ge1xuICAgICAgICAgICAgICAgIGdldDogZGVzY3JpcHRvci5nZXQsXG4gICAgICAgICAgICAgICAgc2V0OiBkZXNjcmlwdG9yLnNldFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIChvcHRpb25zLm1peGlucyB8fCAob3B0aW9ucy5taXhpbnMgPSBbXSkpLnB1c2goe1xuICAgICAgICBkYXRhOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gY29sbGVjdERhdGFGcm9tQ29uc3RydWN0b3IodGhpcywgQ29tcG9uZW50KTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIC8vIGRlY29yYXRlIG9wdGlvbnNcbiAgICB2YXIgZGVjb3JhdG9ycyA9IENvbXBvbmVudC5fX2RlY29yYXRvcnNfXztcbiAgICBpZiAoZGVjb3JhdG9ycykge1xuICAgICAgICBkZWNvcmF0b3JzLmZvckVhY2goZnVuY3Rpb24gKGZuKSB7IHJldHVybiBmbihvcHRpb25zKTsgfSk7XG4gICAgICAgIGRlbGV0ZSBDb21wb25lbnQuX19kZWNvcmF0b3JzX187XG4gICAgfVxuICAgIC8vIGZpbmQgc3VwZXJcbiAgICB2YXIgc3VwZXJQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihDb21wb25lbnQucHJvdG90eXBlKTtcbiAgICB2YXIgU3VwZXIgPSBzdXBlclByb3RvIGluc3RhbmNlb2YgVnVlXG4gICAgICAgID8gc3VwZXJQcm90by5jb25zdHJ1Y3RvclxuICAgICAgICA6IFZ1ZTtcbiAgICB2YXIgRXh0ZW5kZWQgPSBTdXBlci5leHRlbmQob3B0aW9ucyk7XG4gICAgZm9yd2FyZFN0YXRpY01lbWJlcnMoRXh0ZW5kZWQsIENvbXBvbmVudCwgU3VwZXIpO1xuICAgIGlmIChyZWZsZWN0aW9uSXNTdXBwb3J0ZWQpIHtcbiAgICAgICAgY29weVJlZmxlY3Rpb25NZXRhZGF0YShFeHRlbmRlZCwgQ29tcG9uZW50KTtcbiAgICB9XG4gICAgcmV0dXJuIEV4dGVuZGVkO1xufVxudmFyIHJlc2VydmVkUHJvcGVydHlOYW1lcyA9IFtcbiAgICAvLyBVbmlxdWUgaWRcbiAgICAnY2lkJyxcbiAgICAvLyBTdXBlciBWdWUgY29uc3RydWN0b3JcbiAgICAnc3VwZXInLFxuICAgIC8vIENvbXBvbmVudCBvcHRpb25zIHRoYXQgd2lsbCBiZSB1c2VkIGJ5IHRoZSBjb21wb25lbnRcbiAgICAnb3B0aW9ucycsXG4gICAgJ3N1cGVyT3B0aW9ucycsXG4gICAgJ2V4dGVuZE9wdGlvbnMnLFxuICAgICdzZWFsZWRPcHRpb25zJyxcbiAgICAvLyBQcml2YXRlIGFzc2V0c1xuICAgICdjb21wb25lbnQnLFxuICAgICdkaXJlY3RpdmUnLFxuICAgICdmaWx0ZXInXG5dO1xuZnVuY3Rpb24gZm9yd2FyZFN0YXRpY01lbWJlcnMoRXh0ZW5kZWQsIE9yaWdpbmFsLCBTdXBlcikge1xuICAgIC8vIFdlIGhhdmUgdG8gdXNlIGdldE93blByb3BlcnR5TmFtZXMgc2luY2UgQmFiZWwgcmVnaXN0ZXJzIG1ldGhvZHMgYXMgbm9uLWVudW1lcmFibGVcbiAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPcmlnaW5hbCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIC8vIGBwcm90b3R5cGVgIHNob3VsZCBub3QgYmUgb3ZlcndyaXR0ZW5cbiAgICAgICAgaWYgKGtleSA9PT0gJ3Byb3RvdHlwZScpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBTb21lIGJyb3dzZXJzIGRvZXMgbm90IGFsbG93IHJlY29uZmlndXJlIGJ1aWx0LWluIHByb3BlcnRpZXNcbiAgICAgICAgdmFyIGV4dGVuZGVkRGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoRXh0ZW5kZWQsIGtleSk7XG4gICAgICAgIGlmIChleHRlbmRlZERlc2NyaXB0b3IgJiYgIWV4dGVuZGVkRGVzY3JpcHRvci5jb25maWd1cmFibGUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoT3JpZ2luYWwsIGtleSk7XG4gICAgICAgIC8vIElmIHRoZSB1c2VyIGFnZW50IGRvZXMgbm90IHN1cHBvcnQgYF9fcHJvdG9fX2Agb3IgaXRzIGZhbWlseSAoSUUgPD0gMTApLFxuICAgICAgICAvLyB0aGUgc3ViIGNsYXNzIHByb3BlcnRpZXMgbWF5IGJlIGluaGVyaXRlZCBwcm9wZXJ0aWVzIGZyb20gdGhlIHN1cGVyIGNsYXNzIGluIFR5cGVTY3JpcHQuXG4gICAgICAgIC8vIFdlIG5lZWQgdG8gZXhjbHVkZSBzdWNoIHByb3BlcnRpZXMgdG8gcHJldmVudCB0byBvdmVyd3JpdGVcbiAgICAgICAgLy8gdGhlIGNvbXBvbmVudCBvcHRpb25zIG9iamVjdCB3aGljaCBzdG9yZWQgb24gdGhlIGV4dGVuZGVkIGNvbnN0cnVjdG9yIChTZWUgIzE5MikuXG4gICAgICAgIC8vIElmIHRoZSB2YWx1ZSBpcyBhIHJlZmVyZW5jZWQgdmFsdWUgKG9iamVjdCBvciBmdW5jdGlvbiksXG4gICAgICAgIC8vIHdlIGNhbiBjaGVjayBlcXVhbGl0eSBvZiB0aGVtIGFuZCBleGNsdWRlIGl0IGlmIHRoZXkgaGF2ZSB0aGUgc2FtZSByZWZlcmVuY2UuXG4gICAgICAgIC8vIElmIGl0IGlzIGEgcHJpbWl0aXZlIHZhbHVlLCBpdCB3aWxsIGJlIGZvcndhcmRlZCBmb3Igc2FmZXR5LlxuICAgICAgICBpZiAoIWhhc1Byb3RvKSB7XG4gICAgICAgICAgICAvLyBPbmx5IGBjaWRgIGlzIGV4cGxpY2l0bHkgZXhsdWRlZCBmcm9tIHByb3BlcnR5IGZvcndhcmRpbmdcbiAgICAgICAgICAgIC8vIGJlY2F1c2Ugd2UgY2Fubm90IGRldGVjdCB3aGV0aGVyIGl0IGlzIGEgaW5oZXJpdGVkIHByb3BlcnR5IG9yIG5vdFxuICAgICAgICAgICAgLy8gb24gdGhlIG5vIGBfX3Byb3RvX19gIGVudmlyb25tZW50IGV2ZW4gdGhvdWdoIHRoZSBwcm9wZXJ0eSBpcyByZXNlcnZlZC5cbiAgICAgICAgICAgIGlmIChrZXkgPT09ICdjaWQnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHN1cGVyRGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoU3VwZXIsIGtleSk7XG4gICAgICAgICAgICBpZiAoIWlzUHJpbWl0aXZlKGRlc2NyaXB0b3IudmFsdWUpICYmXG4gICAgICAgICAgICAgICAgc3VwZXJEZXNjcmlwdG9yICYmXG4gICAgICAgICAgICAgICAgc3VwZXJEZXNjcmlwdG9yLnZhbHVlID09PSBkZXNjcmlwdG9yLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIFdhcm4gaWYgdGhlIHVzZXJzIG1hbnVhbGx5IGRlY2xhcmUgcmVzZXJ2ZWQgcHJvcGVydGllc1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgICAgICAgcmVzZXJ2ZWRQcm9wZXJ0eU5hbWVzLmluZGV4T2Yoa2V5KSA+PSAwKSB7XG4gICAgICAgICAgICB3YXJuKFwiU3RhdGljIHByb3BlcnR5IG5hbWUgJ1wiICsga2V5ICsgXCInIGRlY2xhcmVkIG9uIGNsYXNzICdcIiArIE9yaWdpbmFsLm5hbWUgKyBcIicgXCIgK1xuICAgICAgICAgICAgICAgICdjb25mbGljdHMgd2l0aCByZXNlcnZlZCBwcm9wZXJ0eSBuYW1lIG9mIFZ1ZSBpbnRlcm5hbC4gJyArXG4gICAgICAgICAgICAgICAgJ0l0IG1heSBjYXVzZSB1bmV4cGVjdGVkIGJlaGF2aW9yIG9mIHRoZSBjb21wb25lbnQuIENvbnNpZGVyIHJlbmFtaW5nIHRoZSBwcm9wZXJ0eS4nKTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRXh0ZW5kZWQsIGtleSwgZGVzY3JpcHRvcik7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIENvbXBvbmVudChvcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBjb21wb25lbnRGYWN0b3J5KG9wdGlvbnMpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKENvbXBvbmVudCkge1xuICAgICAgICByZXR1cm4gY29tcG9uZW50RmFjdG9yeShDb21wb25lbnQsIG9wdGlvbnMpO1xuICAgIH07XG59XG5Db21wb25lbnQucmVnaXN0ZXJIb29rcyA9IGZ1bmN0aW9uIHJlZ2lzdGVySG9va3Moa2V5cykge1xuICAgICRpbnRlcm5hbEhvb2tzLnB1c2guYXBwbHkoJGludGVybmFsSG9va3MsIGtleXMpO1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gQ29tcG9uZW50O1xuZXhwb3J0cy5jcmVhdGVEZWNvcmF0b3IgPSBjcmVhdGVEZWNvcmF0b3I7XG5leHBvcnRzLm1peGlucyA9IG1peGlucztcbiIsInZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChpdCwga2V5KTtcbn07XG4iLCJ2YXIgYmFzZUlzTmF0aXZlID0gcmVxdWlyZSgnLi9fYmFzZUlzTmF0aXZlJyksXG4gICAgZ2V0VmFsdWUgPSByZXF1aXJlKCcuL19nZXRWYWx1ZScpO1xuXG4vKipcbiAqIEdldHMgdGhlIG5hdGl2ZSBmdW5jdGlvbiBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBtZXRob2QgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGZ1bmN0aW9uIGlmIGl0J3MgbmF0aXZlLCBlbHNlIGB1bmRlZmluZWRgLlxuICovXG5mdW5jdGlvbiBnZXROYXRpdmUob2JqZWN0LCBrZXkpIHtcbiAgdmFyIHZhbHVlID0gZ2V0VmFsdWUob2JqZWN0LCBrZXkpO1xuICByZXR1cm4gYmFzZUlzTmF0aXZlKHZhbHVlKSA/IHZhbHVlIDogdW5kZWZpbmVkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldE5hdGl2ZTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2Fzc2lnbiA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL29iamVjdC9hc3NpZ25cIik7XG5cbnZhciBfYXNzaWduMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Fzc2lnbik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9hc3NpZ24yLmRlZmF1bHQgfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59OyIsImltcG9ydCB7IFZ1ZSwgQ29tcG9uZW50IH0gZnJvbSBcInZ1ZS1wcm9wZXJ0eS1kZWNvcmF0b3JcIjtcclxuXHJcbmZ1bmN0aW9uIGJyb2FkY2FzdCh0aGlzOiBWdWUsIGNvbXBvbmVudE5hbWU6IHN0cmluZywgZXZlbnROYW1lOiBzdHJpbmcsIHBhcmFtczogc3RyaW5nKSB7XHJcbiAgdGhpcy4kY2hpbGRyZW4uZm9yRWFjaCgoY2hpbGQpID0+IHtcclxuICAgIGNvbnN0IG5hbWUgPSBjaGlsZC4kb3B0aW9ucy5uYW1lO1xyXG5cclxuICAgIGlmIChuYW1lID09PSBjb21wb25lbnROYW1lKSB7XHJcbiAgICAgIGNoaWxkLiRlbWl0LmFwcGx5KGNoaWxkLCBbZXZlbnROYW1lXS5jb25jYXQocGFyYW1zKSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBicm9hZGNhc3QuYXBwbHkoY2hpbGQsIFtjb21wb25lbnROYW1lLCBldmVudE5hbWVdLmNvbmNhdChbcGFyYW1zXSkpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG59XHJcblxyXG5AQ29tcG9uZW50XHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVtaXR0ZXIgZXh0ZW5kcyBWdWUge1xyXG4gIC8qKiDmoLnmja7nu4Tku7blkI3lkJHkuIrlub/mkq3mlbDmja4gKi9cclxuICBkaXNwYXRjaChjb21wb25lbnROYW1lLCBldmVudE5hbWUsIHBhcmFtcykge1xyXG4gICAgbGV0IHBhcmVudCA9IHRoaXMuJHBhcmVudCB8fCB0aGlzLiRyb290O1xyXG4gICAgbGV0IG5hbWUgPSBwYXJlbnQuJG9wdGlvbnMubmFtZTtcclxuXHJcbiAgICB3aGlsZSAocGFyZW50ICYmICghbmFtZSB8fCBuYW1lICE9PSBjb21wb25lbnROYW1lKSkge1xyXG4gICAgICBwYXJlbnQgPSBwYXJlbnQuJHBhcmVudDtcclxuICAgICAgaWYgKHBhcmVudCkge1xyXG4gICAgICAgIG5hbWUgPSBwYXJlbnQuJG9wdGlvbnMubmFtZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKHBhcmVudCkge1xyXG4gICAgICBwYXJlbnQuJGVtaXQuYXBwbHkocGFyZW50LCBbZXZlbnROYW1lXS5jb25jYXQocGFyYW1zKSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKiog5qC55o2u57uE5Lu25ZCN77yM5ZCR5LiL5bm/5pKt5pWw5o2uICovXHJcbiAgYnJvYWRjYXN0KGNvbXBvbmVudE5hbWUsIGV2ZW50TmFtZSwgcGFyYW1zKSB7XHJcbiAgICBicm9hZGNhc3QuY2FsbCh0aGlzLCBjb21wb25lbnROYW1lLCBldmVudE5hbWUsIHBhcmFtcyk7XHJcbiAgfVxyXG59XHJcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHJldHVybiBkUC5mKG9iamVjdCwga2V5LCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG59IDogZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICByZXR1cm4gb2JqZWN0O1xufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGRQID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG5leHBvcnRzLmYgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBhbk9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBkUChPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIGlmICgnZ2V0JyBpbiBBdHRyaWJ1dGVzIHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpIHRocm93IFR5cGVFcnJvcignQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWQhJyk7XG4gIGlmICgndmFsdWUnIGluIEF0dHJpYnV0ZXMpIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCIvLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcbiIsIi8vIHRvIGluZGV4ZWQgb2JqZWN0LCB0b09iamVjdCB3aXRoIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgc3RyaW5nc1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBJT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG4iLCJ2YXIgc3RvcmUgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgnd2tzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG52YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuU3ltYm9sO1xudmFyIFVTRV9TWU1CT0wgPSB0eXBlb2YgU3ltYm9sID09ICdmdW5jdGlvbic7XG5cbnZhciAkZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIHN0b3JlW25hbWVdIHx8IChzdG9yZVtuYW1lXSA9XG4gICAgVVNFX1NZTUJPTCAmJiBTeW1ib2xbbmFtZV0gfHwgKFVTRV9TWU1CT0wgPyBTeW1ib2wgOiB1aWQpKCdTeW1ib2wuJyArIG5hbWUpKTtcbn07XG5cbiRleHBvcnRzLnN0b3JlID0gc3RvcmU7XG4iLCIvKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odXNlU291cmNlTWFwKSB7XG5cdHZhciBsaXN0ID0gW107XG5cblx0Ly8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXHRsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG5cdFx0XHR2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKTtcblx0XHRcdGlmKGl0ZW1bMl0pIHtcblx0XHRcdFx0cmV0dXJuIFwiQG1lZGlhIFwiICsgaXRlbVsyXSArIFwie1wiICsgY29udGVudCArIFwifVwiO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRlbnQ7XG5cdFx0XHR9XG5cdFx0fSkuam9pbihcIlwiKTtcblx0fTtcblxuXHQvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuXHRsaXN0LmkgPSBmdW5jdGlvbihtb2R1bGVzLCBtZWRpYVF1ZXJ5KSB7XG5cdFx0aWYodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpXG5cdFx0XHRtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCBcIlwiXV07XG5cdFx0dmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGlkID0gdGhpc1tpXVswXTtcblx0XHRcdGlmKHR5cGVvZiBpZCA9PT0gXCJudW1iZXJcIilcblx0XHRcdFx0YWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuXHRcdH1cblx0XHRmb3IoaSA9IDA7IGkgPCBtb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaXRlbSA9IG1vZHVsZXNbaV07XG5cdFx0XHQvLyBza2lwIGFscmVhZHkgaW1wb3J0ZWQgbW9kdWxlXG5cdFx0XHQvLyB0aGlzIGltcGxlbWVudGF0aW9uIGlzIG5vdCAxMDAlIHBlcmZlY3QgZm9yIHdlaXJkIG1lZGlhIHF1ZXJ5IGNvbWJpbmF0aW9uc1xuXHRcdFx0Ly8gIHdoZW4gYSBtb2R1bGUgaXMgaW1wb3J0ZWQgbXVsdGlwbGUgdGltZXMgd2l0aCBkaWZmZXJlbnQgbWVkaWEgcXVlcmllcy5cblx0XHRcdC8vICBJIGhvcGUgdGhpcyB3aWxsIG5ldmVyIG9jY3VyIChIZXkgdGhpcyB3YXkgd2UgaGF2ZSBzbWFsbGVyIGJ1bmRsZXMpXG5cdFx0XHRpZih0eXBlb2YgaXRlbVswXSAhPT0gXCJudW1iZXJcIiB8fCAhYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuXHRcdFx0XHRpZihtZWRpYVF1ZXJ5ICYmICFpdGVtWzJdKSB7XG5cdFx0XHRcdFx0aXRlbVsyXSA9IG1lZGlhUXVlcnk7XG5cdFx0XHRcdH0gZWxzZSBpZihtZWRpYVF1ZXJ5KSB7XG5cdFx0XHRcdFx0aXRlbVsyXSA9IFwiKFwiICsgaXRlbVsyXSArIFwiKSBhbmQgKFwiICsgbWVkaWFRdWVyeSArIFwiKVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGxpc3QucHVzaChpdGVtKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdHJldHVybiBsaXN0O1xufTtcblxuZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApIHtcblx0dmFyIGNvbnRlbnQgPSBpdGVtWzFdIHx8ICcnO1xuXHR2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cdGlmICghY3NzTWFwcGluZykge1xuXHRcdHJldHVybiBjb250ZW50O1xuXHR9XG5cblx0aWYgKHVzZVNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdHZhciBzb3VyY2VNYXBwaW5nID0gdG9Db21tZW50KGNzc01hcHBpbmcpO1xuXHRcdHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG5cdFx0XHRyZXR1cm4gJy8qIyBzb3VyY2VVUkw9JyArIGNzc01hcHBpbmcuc291cmNlUm9vdCArIHNvdXJjZSArICcgKi8nXG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKCdcXG4nKTtcblx0fVxuXG5cdHJldHVybiBbY29udGVudF0uam9pbignXFxuJyk7XG59XG5cbi8vIEFkYXB0ZWQgZnJvbSBjb252ZXJ0LXNvdXJjZS1tYXAgKE1JVClcbmZ1bmN0aW9uIHRvQ29tbWVudChzb3VyY2VNYXApIHtcblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG5cdHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpO1xuXHR2YXIgZGF0YSA9ICdzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCwnICsgYmFzZTY0O1xuXG5cdHJldHVybiAnLyojICcgKyBkYXRhICsgJyAqLyc7XG59XG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSB8fCAoMSwgZXZhbCkoXCJ0aGlzXCIpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwiaW1wb3J0IHsgdCB9IGZyb20gXCIuLi9sb2NhbGVcIjtcclxuaW1wb3J0IHsgVnVlLCBDb21wb25lbnQgfSBmcm9tIFwidnVlLXByb3BlcnR5LWRlY29yYXRvclwiO1xyXG5cclxuQENvbXBvbmVudFxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMb2NhbGUgZXh0ZW5kcyBWdWUge1xyXG4gIHQoLi4uYXJncykge1xyXG4gICAgcmV0dXJuIHQuYXBwbHkodGhpcywgYXJncyk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBWdWUgZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgdXBwZXJGaXJzdCB9IGZyb20gXCJsb2Rhc2hcIjtcbmNvbnN0IGlzU2VydmVyID0gVnVlLnByb3RvdHlwZS4kaXNTZXJ2ZXI7XG5cbmV4cG9ydCBmdW5jdGlvbiBjYW1lbGNhc2VUb0h5cGhlbihzdHI6IHN0cmluZyk6IHN0cmluZyB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvKFthLXpdKShbQS1aXSkvZywgXCIkMS0kMlwiKS50b0xvd2VyQ2FzZSgpO1xufVxuXG4vLyBGb3IgTW9kYWwgc2Nyb2xsQmFyIGhpZGRlblxubGV0IGNhY2hlZDogbnVtYmVyIHwgdW5kZWZpbmVkO1xuZXhwb3J0IGZ1bmN0aW9uIGdldFNjcm9sbEJhclNpemUoZnJlc2g6IGJvb2xlYW4pOiBudW1iZXIge1xuICBpZiAoaXNTZXJ2ZXIpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuICBpZiAoZnJlc2ggfHwgY2FjaGVkID09PSB1bmRlZmluZWQpIHtcbiAgICBjb25zdCBpbm5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgaW5uZXIuc3R5bGUud2lkdGggPSBcIjEwMCVcIjtcbiAgICBpbm5lci5zdHlsZS5oZWlnaHQgPSBcIjIwMHB4XCI7XG5cbiAgICBjb25zdCBvdXRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgY29uc3Qgb3V0ZXJTdHlsZSA9IG91dGVyLnN0eWxlO1xuXG4gICAgb3V0ZXJTdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcbiAgICBvdXRlclN0eWxlLnRvcCA9IFwiMFwiO1xuICAgIG91dGVyU3R5bGUubGVmdCA9IFwiMFwiO1xuICAgIG91dGVyU3R5bGUucG9pbnRlckV2ZW50cyA9IFwibm9uZVwiO1xuICAgIG91dGVyU3R5bGUudmlzaWJpbGl0eSA9IFwiaGlkZGVuXCI7XG4gICAgb3V0ZXJTdHlsZS53aWR0aCA9IFwiMjAwcHhcIjtcbiAgICBvdXRlclN0eWxlLmhlaWdodCA9IFwiMTUwcHhcIjtcbiAgICBvdXRlclN0eWxlLm92ZXJmbG93ID0gXCJoaWRkZW5cIjtcblxuICAgIG91dGVyLmFwcGVuZENoaWxkKGlubmVyKTtcblxuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQob3V0ZXIpO1xuXG4gICAgY29uc3Qgd2lkdGhDb250YWluZWQgPSBpbm5lci5vZmZzZXRXaWR0aDtcbiAgICBvdXRlci5zdHlsZS5vdmVyZmxvdyA9IFwic2Nyb2xsXCI7XG4gICAgbGV0IHdpZHRoU2Nyb2xsID0gaW5uZXIub2Zmc2V0V2lkdGg7XG5cbiAgICBpZiAod2lkdGhDb250YWluZWQgPT09IHdpZHRoU2Nyb2xsKSB7XG4gICAgICB3aWR0aFNjcm9sbCA9IG91dGVyLmNsaWVudFdpZHRoO1xuICAgIH1cblxuICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQob3V0ZXIpO1xuXG4gICAgY2FjaGVkID0gd2lkdGhDb250YWluZWQgLSB3aWR0aFNjcm9sbDtcbiAgfVxuICByZXR1cm4gY2FjaGVkO1xufVxuXG4vLyB3YXRjaCBET00gY2hhbmdlXG5leHBvcnQgY29uc3QgTXV0YXRpb25PYnNlcnZlciA9IGlzU2VydmVyXG4gID8gZmFsc2VcbiAgOiB3aW5kb3cuTXV0YXRpb25PYnNlcnZlciB8fCB3aW5kb3cuV2ViS2l0TXV0YXRpb25PYnNlcnZlciB8fCB3aW5kb3cuTW96TXV0YXRpb25PYnNlcnZlciB8fCBmYWxzZTtcblxuY29uc3QgU1BFQ0lBTF9DSEFSU19SRUdFWFAgPSAvKFtcXDpcXC1cXF9dKyguKSkvZztcbmNvbnN0IE1PWl9IQUNLX1JFR0VYUCA9IC9ebW96KFtBLVpdKS87XG5cbmZ1bmN0aW9uIGNhbWVsQ2FzZShuYW1lKSB7XG4gIHJldHVybiBuYW1lXG4gICAgLnJlcGxhY2UoU1BFQ0lBTF9DSEFSU19SRUdFWFAsIGZ1bmN0aW9uKF8sIHNlcGFyYXRvciwgbGV0dGVyLCBvZmZzZXQpIHtcbiAgICAgIHJldHVybiBvZmZzZXQgPyBsZXR0ZXIudG9VcHBlckNhc2UoKSA6IGxldHRlcjtcbiAgICB9KVxuICAgIC5yZXBsYWNlKE1PWl9IQUNLX1JFR0VYUCwgXCJNb3okMVwiKTtcbn1cblxuLyoqIOiOt+WPluaMh+WumuWFg+e0oOS4iueahOagt+W8jyAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFN0eWxlKGVsZW1lbnQ6IEhUTUxFbGVtZW50LCBzdHlsZU5hbWU6IHN0cmluZyk6IHN0cmluZyB7XG4gIGlmICghZWxlbWVudCB8fCAhc3R5bGVOYW1lKSB7XG4gICAgcmV0dXJuIFwiXCI7XG4gIH1cbiAgc3R5bGVOYW1lID0gY2FtZWxDYXNlKHN0eWxlTmFtZSk7XG4gIGlmIChzdHlsZU5hbWUgPT09IFwiZmxvYXRcIikge1xuICAgIHN0eWxlTmFtZSA9IFwiY3NzRmxvYXRcIjtcbiAgfVxuICB0cnkge1xuICAgIGNvbnN0IGNvbXB1dGVkOiBDU1NTdHlsZURlY2xhcmF0aW9uID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCwgXCJcIik7XG4gICAgcmV0dXJuIGVsZW1lbnQuc3R5bGVbc3R5bGVOYW1lXSB8fCBjb21wdXRlZCA/IGNvbXB1dGVkW3N0eWxlTmFtZV0gOiBudWxsO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQuc3R5bGVbc3R5bGVOYW1lXTtcbiAgfVxufVxuXG4vLyDorablkYpcbmV4cG9ydCBmdW5jdGlvbiB3YXJuUHJvcChjb21wb25lbnQsIHByb3AsIGNvcnJlY3RUeXBlLCB3cm9uZ1R5cGUpIHtcbiAgY29ycmVjdFR5cGUgPSB1cHBlckZpcnN0KGNvcnJlY3RUeXBlKTtcbiAgd3JvbmdUeXBlID0gdXBwZXJGaXJzdCh3cm9uZ1R5cGUpO1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tY29uc29sZVxuICBjb25zb2xlLmVycm9yKFxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptYXgtbGluZS1sZW5ndGhcbiAgICBgW1hCVUkgd2Fybl06IEludmFsaWQgcHJvcDogdHlwZSBjaGVjayBmYWlsZWQgZm9yIHByb3AgJHtwcm9wfS4gRXhwZWN0ZWQgJHtjb3JyZWN0VHlwZX0sIGdvdCAke3dyb25nVHlwZX0uIChmb3VuZCBpbiBjb21wb25lbnQ6ICR7Y29tcG9uZW50fSlgXG4gICk7XG59XG5cbi8vIHNjcm9sbFRvcCBhbmltYXRpb25cbmV4cG9ydCBmdW5jdGlvbiBzY3JvbGxUb3AoZWwsIGZyb20gPSAwLCB0bywgZHVyYXRpb24gPSA1MDApOiB2b2lkIHtcbiAgaWYgKCF3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKSB7XG4gICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSA9XG4gICAgICB3aW5kb3cud2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XG4gICAgICB3aW5kb3cubW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XG4gICAgICB3aW5kb3cubXNSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHxcbiAgICAgIGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICAgIHJldHVybiB3aW5kb3cuc2V0VGltZW91dChjYWxsYmFjaywgMTAwMCAvIDYwKTtcbiAgICAgIH07XG4gIH1cbiAgY29uc3QgZGlmZmVyZW5jZSA9IE1hdGguYWJzKGZyb20gLSB0byk7XG4gIGNvbnN0IHN0ZXBzID0gTWF0aC5jZWlsKChkaWZmZXJlbmNlIC8gZHVyYXRpb24pICogNTApO1xuXG4gIGZ1bmN0aW9uIHNjcm9sbChzdGFydCwgZW5kLCBzdGVwKSB7XG4gICAgaWYgKHN0YXJ0ID09PSBlbmQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgZCA9IHN0YXJ0ICsgc3RlcCA+IGVuZCA/IGVuZCA6IHN0YXJ0ICsgc3RlcDtcbiAgICBpZiAoc3RhcnQgPiBlbmQpIHtcbiAgICAgIGQgPSBzdGFydCAtIHN0ZXAgPCBlbmQgPyBlbmQgOiBzdGFydCAtIHN0ZXA7XG4gICAgfVxuXG4gICAgaWYgKGVsID09PSB3aW5kb3cpIHtcbiAgICAgIHdpbmRvdy5zY3JvbGxUbyhkLCBkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwuc2Nyb2xsVG9wID0gZDtcbiAgICB9XG4gICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiBzY3JvbGwoZCwgZW5kLCBzdGVwKSk7XG4gIH1cbiAgc2Nyb2xsKGZyb20sIHRvLCBzdGVwcyk7XG59XG5cbi8qKiDmoLnmja7nu4Tku7blkI3np7DvvIzlvoDkuIrlr7vmib7niLbnuqfnu4Tku7Ys6L+U5Zue5pyA5YWI5om+5Yiw55qE54i257uE5Lu2VnVl5a6e5L6LICovXG5leHBvcnQgZnVuY3Rpb24gZmluZENvbXBvbmVudFVwd2FyZChjb250ZXh0OiBWdWUsIGNvbXBvbmVudE5hbWU6IHN0cmluZyk6IFZ1ZSB7XG4gIGxldCBwYXJlbnQgPSBjb250ZXh0LiRwYXJlbnQ7XG4gIGxldCBuYW1lID0gcGFyZW50LiRvcHRpb25zLm5hbWU7XG5cbiAgd2hpbGUgKHBhcmVudCAmJiAoIW5hbWUgfHwgcGFyZW50LiRvcHRpb25zLm5hbWUgIT09IGNvbXBvbmVudE5hbWUpKSB7XG4gICAgcGFyZW50ID0gcGFyZW50LiRwYXJlbnQ7XG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgbmFtZSA9IHBhcmVudC4kb3B0aW9ucy5uYW1lO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcGFyZW50O1xufVxuXG4vLyBGaW5kIGNvbXBvbmVudCBkb3dud2FyZFxuZXhwb3J0IGZ1bmN0aW9uIGZpbmRDb21wb25lbnREb3dud2FyZChjb250ZXh0OiBWdWUsIGNvbXBvbmVudE5hbWU6IHN0cmluZykge1xuICBjb25zdCBjaGlsZHJlbnMgPSBjb250ZXh0LiRjaGlsZHJlbjtcbiAgbGV0IGNoaWxkcmVuOiBWdWUgfCB1bmRlZmluZWQ7XG5cbiAgaWYgKGNoaWxkcmVucy5sZW5ndGgpIHtcbiAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIGNoaWxkcmVucykge1xuICAgICAgY29uc3QgbmFtZSA9IGNoaWxkLiRvcHRpb25zLm5hbWU7XG4gICAgICBpZiAobmFtZSA9PT0gY29tcG9uZW50TmFtZSkge1xuICAgICAgICBjaGlsZHJlbiA9IGNoaWxkO1xuICAgICAgICBicmVhaztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNoaWxkcmVuID0gZmluZENvbXBvbmVudERvd253YXJkKGNoaWxkLCBjb21wb25lbnROYW1lKTtcbiAgICAgICAgaWYgKGNoaWxkcmVuKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNoaWxkcmVuO1xufVxuXG4vKiogIOagueaNrue7hOS7tuWQjeensO+8jOW+gOS4i+Wvu+aJvuaJgOacieWtkOe6p+e7hOS7tiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZpbmRDb21wb25lbnRzRG93bndhcmQoY29udGV4dDogVnVlLCBjb21wb25lbnROYW1lOiBzdHJpbmcpOiBWdWVbXSB7XG4gIHJldHVybiBjb250ZXh0LiRjaGlsZHJlbi5yZWR1Y2UoXG4gICAgKGNvbXBvbmVudHMsIGNoaWxkKSA9PiB7XG4gICAgICBpZiAoY2hpbGQuJG9wdGlvbnMubmFtZSA9PT0gY29tcG9uZW50TmFtZSkge1xuICAgICAgICBjb21wb25lbnRzLnB1c2goY2hpbGQpO1xuICAgICAgfVxuICAgICAgY29uc3QgZm91bmRDaGlsZHMgPSBmaW5kQ29tcG9uZW50c0Rvd253YXJkKGNoaWxkLCBjb21wb25lbnROYW1lKTtcbiAgICAgIHJldHVybiBjb21wb25lbnRzLmNvbmNhdChmb3VuZENoaWxkcyk7XG4gICAgfSxcbiAgICBbXSBhcyBWdWVbXVxuICApO1xufVxuXG4vLyBGaW5kIGNvbXBvbmVudHMgdXB3YXJkXG5leHBvcnQgZnVuY3Rpb24gZmluZENvbXBvbmVudHNVcHdhcmQoY29udGV4dDogVnVlLCBjb21wb25lbnROYW1lOiBzdHJpbmcpOiBWdWVbXSB7XG4gIGNvbnN0IHBhcmVudHM6IFZ1ZVtdID0gW107XG4gIGNvbnN0IHBhcmVudCA9IGNvbnRleHQuJHBhcmVudDtcbiAgaWYgKHBhcmVudCkge1xuICAgIGlmIChwYXJlbnQuJG9wdGlvbnMubmFtZSA9PT0gY29tcG9uZW50TmFtZSkge1xuICAgICAgcGFyZW50cy5wdXNoKHBhcmVudCk7XG4gICAgfVxuICAgIHJldHVybiBwYXJlbnRzLmNvbmNhdChmaW5kQ29tcG9uZW50c1Vwd2FyZChwYXJlbnQsIGNvbXBvbmVudE5hbWUpKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gW107XG4gIH1cbn1cblxuLy8gRmluZCBicm90aGVycyBjb21wb25lbnRzXG5leHBvcnQgZnVuY3Rpb24gZmluZEJyb3RoZXJzQ29tcG9uZW50cyhjb250ZXh0OiBWdWUsIGNvbXBvbmVudE5hbWU6IHN0cmluZywgZXhjZXB0TWU6IGJvb2xlYW4gPSB0cnVlKSB7XG4gIGNvbnN0IHJlcyA9IGNvbnRleHQuJHBhcmVudC4kY2hpbGRyZW4uZmlsdGVyKChpdGVtKSA9PiB7XG4gICAgcmV0dXJuIGl0ZW0uJG9wdGlvbnMubmFtZSA9PT0gY29tcG9uZW50TmFtZTtcbiAgfSk7XG4gIGNvbnN0IGluZGV4ID0gcmVzLmZpbmRJbmRleCgoaXRlbSkgPT4gaXRlbS5fdWlkID09PSBjb250ZXh0Ll91aWQpO1xuICBpZiAoZXhjZXB0TWUpIHtcbiAgICByZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgfVxuICByZXR1cm4gcmVzO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuY29uc3QgdHJpbSA9IGZ1bmN0aW9uKHN0cjogc3RyaW5nKSB7XG4gIHJldHVybiAoc3RyIHx8IFwiXCIpLnJlcGxhY2UoL15bXFxzXFx1RkVGRl0rfFtcXHNcXHVGRUZGXSskL2csIFwiXCIpO1xufTtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmV4cG9ydCBmdW5jdGlvbiBoYXNDbGFzcyhlbCwgY2xzKSB7XG4gIGlmICghZWwgfHwgIWNscykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoY2xzLmluZGV4T2YoXCIgXCIpICE9PSAtMSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcImNsYXNzTmFtZSBzaG91bGQgbm90IGNvbnRhaW4gc3BhY2UuXCIpO1xuICB9XG4gIGlmIChlbC5jbGFzc0xpc3QpIHtcbiAgICByZXR1cm4gZWwuY2xhc3NMaXN0LmNvbnRhaW5zKGNscyk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIChcIiBcIiArIGVsLmNsYXNzTmFtZSArIFwiIFwiKS5pbmRleE9mKFwiIFwiICsgY2xzICsgXCIgXCIpID4gLTE7XG4gIH1cbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmV4cG9ydCBmdW5jdGlvbiBhZGRDbGFzcyhlbCwgY2xzKSB7XG4gIGlmICghZWwpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgbGV0IGN1ckNsYXNzID0gZWwuY2xhc3NOYW1lO1xuICBjb25zdCBjbGFzc2VzID0gKGNscyB8fCBcIlwiKS5zcGxpdChcIiBcIik7XG5cbiAgZm9yIChsZXQgaSA9IDAsIGogPSBjbGFzc2VzLmxlbmd0aDsgaSA8IGo7IGkrKykge1xuICAgIGNvbnN0IGNsc05hbWUgPSBjbGFzc2VzW2ldO1xuICAgIGlmICghY2xzTmFtZSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKGVsLmNsYXNzTGlzdCkge1xuICAgICAgZWwuY2xhc3NMaXN0LmFkZChjbHNOYW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFoYXNDbGFzcyhlbCwgY2xzTmFtZSkpIHtcbiAgICAgICAgY3VyQ2xhc3MgKz0gXCIgXCIgKyBjbHNOYW1lO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoIWVsLmNsYXNzTGlzdCkge1xuICAgIGVsLmNsYXNzTmFtZSA9IGN1ckNsYXNzO1xuICB9XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlQ2xhc3MoZWwsIGNscykge1xuICBpZiAoIWVsIHx8ICFjbHMpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgY2xhc3NlcyA9IGNscy5zcGxpdChcIiBcIik7XG4gIGxldCBjdXJDbGFzcyA9IFwiIFwiICsgZWwuY2xhc3NOYW1lICsgXCIgXCI7XG5cbiAgZm9yIChsZXQgaSA9IDAsIGogPSBjbGFzc2VzLmxlbmd0aDsgaSA8IGo7IGkrKykge1xuICAgIGNvbnN0IGNsc05hbWUgPSBjbGFzc2VzW2ldO1xuICAgIGlmICghY2xzTmFtZSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKGVsLmNsYXNzTGlzdCkge1xuICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZShjbHNOYW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGhhc0NsYXNzKGVsLCBjbHNOYW1lKSkge1xuICAgICAgICBjdXJDbGFzcyA9IGN1ckNsYXNzLnJlcGxhY2UoXCIgXCIgKyBjbHNOYW1lICsgXCIgXCIsIFwiIFwiKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKCFlbC5jbGFzc0xpc3QpIHtcbiAgICBlbC5jbGFzc05hbWUgPSB0cmltKGN1ckNsYXNzKTtcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgZGltZW5zaW9uTWFwID0ge1xuICB4czogXCI0ODBweFwiLFxuICBzbTogXCI3NjhweFwiLFxuICBtZDogXCI5OTJweFwiLFxuICBsZzogXCIxMjAwcHhcIixcbiAgeGw6IFwiMTYwMHB4XCIsXG59O1xuIiwidmFyIGNvcmUgPSBtb2R1bGUuZXhwb3J0cyA9IHsgdmVyc2lvbjogJzIuNS43JyB9O1xuaWYgKHR5cGVvZiBfX2UgPT0gJ251bWJlcicpIF9fZSA9IGNvcmU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiB0eXBlb2YgaXQgPT09ICdmdW5jdGlvbic7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiAhIWV4ZWMoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyB0aGVcbiAqIFtsYW5ndWFnZSB0eXBlXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtZWNtYXNjcmlwdC1sYW5ndWFnZS10eXBlcylcbiAqIG9mIGBPYmplY3RgLiAoZS5nLiBhcnJheXMsIGZ1bmN0aW9ucywgb2JqZWN0cywgcmVnZXhlcywgYG5ldyBOdW1iZXIoMClgLCBhbmQgYG5ldyBTdHJpbmcoJycpYClcbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdCh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoXy5ub29wKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmICh0eXBlID09ICdvYmplY3QnIHx8IHR5cGUgPT0gJ2Z1bmN0aW9uJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNPYmplY3Q7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90IGBudWxsYFxuICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc09iamVjdExpa2U7XG4iLCIvKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuXG52YXIgc3R5bGVzSW5Eb20gPSB7fTtcblxudmFyXHRtZW1vaXplID0gZnVuY3Rpb24gKGZuKSB7XG5cdHZhciBtZW1vO1xuXG5cdHJldHVybiBmdW5jdGlvbiAoKSB7XG5cdFx0aWYgKHR5cGVvZiBtZW1vID09PSBcInVuZGVmaW5lZFwiKSBtZW1vID0gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0XHRyZXR1cm4gbWVtbztcblx0fTtcbn07XG5cbnZhciBpc09sZElFID0gbWVtb2l6ZShmdW5jdGlvbiAoKSB7XG5cdC8vIFRlc3QgZm9yIElFIDw9IDkgYXMgcHJvcG9zZWQgYnkgQnJvd3NlcmhhY2tzXG5cdC8vIEBzZWUgaHR0cDovL2Jyb3dzZXJoYWNrcy5jb20vI2hhY2stZTcxZDg2OTJmNjUzMzQxNzNmZWU3MTVjMjIyY2I4MDVcblx0Ly8gVGVzdHMgZm9yIGV4aXN0ZW5jZSBvZiBzdGFuZGFyZCBnbG9iYWxzIGlzIHRvIGFsbG93IHN0eWxlLWxvYWRlclxuXHQvLyB0byBvcGVyYXRlIGNvcnJlY3RseSBpbnRvIG5vbi1zdGFuZGFyZCBlbnZpcm9ubWVudHNcblx0Ly8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlci9pc3N1ZXMvMTc3XG5cdHJldHVybiB3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYjtcbn0pO1xuXG52YXIgZ2V0RWxlbWVudCA9IChmdW5jdGlvbiAoZm4pIHtcblx0dmFyIG1lbW8gPSB7fTtcblxuXHRyZXR1cm4gZnVuY3Rpb24oc2VsZWN0b3IpIHtcblx0XHRpZiAodHlwZW9mIG1lbW9bc2VsZWN0b3JdID09PSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0XHR2YXIgc3R5bGVUYXJnZXQgPSBmbi5jYWxsKHRoaXMsIHNlbGVjdG9yKTtcblx0XHRcdC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cdFx0XHRpZiAoc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHQvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuXHRcdFx0XHRcdC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG5cdFx0XHRcdFx0c3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcblx0XHRcdFx0fSBjYXRjaChlKSB7XG5cdFx0XHRcdFx0c3R5bGVUYXJnZXQgPSBudWxsO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRtZW1vW3NlbGVjdG9yXSA9IHN0eWxlVGFyZ2V0O1xuXHRcdH1cblx0XHRyZXR1cm4gbWVtb1tzZWxlY3Rvcl1cblx0fTtcbn0pKGZ1bmN0aW9uICh0YXJnZXQpIHtcblx0cmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KVxufSk7XG5cbnZhciBzaW5nbGV0b24gPSBudWxsO1xudmFyXHRzaW5nbGV0b25Db3VudGVyID0gMDtcbnZhclx0c3R5bGVzSW5zZXJ0ZWRBdFRvcCA9IFtdO1xuXG52YXJcdGZpeFVybHMgPSByZXF1aXJlKFwiLi91cmxzXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGxpc3QsIG9wdGlvbnMpIHtcblx0aWYgKHR5cGVvZiBERUJVRyAhPT0gXCJ1bmRlZmluZWRcIiAmJiBERUJVRykge1xuXHRcdGlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwib2JqZWN0XCIpIHRocm93IG5ldyBFcnJvcihcIlRoZSBzdHlsZS1sb2FkZXIgY2Fubm90IGJlIHVzZWQgaW4gYSBub24tYnJvd3NlciBlbnZpcm9ubWVudFwiKTtcblx0fVxuXG5cdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdG9wdGlvbnMuYXR0cnMgPSB0eXBlb2Ygb3B0aW9ucy5hdHRycyA9PT0gXCJvYmplY3RcIiA/IG9wdGlvbnMuYXR0cnMgOiB7fTtcblxuXHQvLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cblx0Ly8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxuXHRpZiAoIW9wdGlvbnMuc2luZ2xldG9uICYmIHR5cGVvZiBvcHRpb25zLnNpbmdsZXRvbiAhPT0gXCJib29sZWFuXCIpIG9wdGlvbnMuc2luZ2xldG9uID0gaXNPbGRJRSgpO1xuXG5cdC8vIEJ5IGRlZmF1bHQsIGFkZCA8c3R5bGU+IHRhZ3MgdG8gdGhlIDxoZWFkPiBlbGVtZW50XG5cdGlmICghb3B0aW9ucy5pbnNlcnRJbnRvKSBvcHRpb25zLmluc2VydEludG8gPSBcImhlYWRcIjtcblxuXHQvLyBCeSBkZWZhdWx0LCBhZGQgPHN0eWxlPiB0YWdzIHRvIHRoZSBib3R0b20gb2YgdGhlIHRhcmdldFxuXHRpZiAoIW9wdGlvbnMuaW5zZXJ0QXQpIG9wdGlvbnMuaW5zZXJ0QXQgPSBcImJvdHRvbVwiO1xuXG5cdHZhciBzdHlsZXMgPSBsaXN0VG9TdHlsZXMobGlzdCwgb3B0aW9ucyk7XG5cblx0YWRkU3R5bGVzVG9Eb20oc3R5bGVzLCBvcHRpb25zKTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlIChuZXdMaXN0KSB7XG5cdFx0dmFyIG1heVJlbW92ZSA9IFtdO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpdGVtID0gc3R5bGVzW2ldO1xuXHRcdFx0dmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XG5cblx0XHRcdGRvbVN0eWxlLnJlZnMtLTtcblx0XHRcdG1heVJlbW92ZS5wdXNoKGRvbVN0eWxlKTtcblx0XHR9XG5cblx0XHRpZihuZXdMaXN0KSB7XG5cdFx0XHR2YXIgbmV3U3R5bGVzID0gbGlzdFRvU3R5bGVzKG5ld0xpc3QsIG9wdGlvbnMpO1xuXHRcdFx0YWRkU3R5bGVzVG9Eb20obmV3U3R5bGVzLCBvcHRpb25zKTtcblx0XHR9XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG1heVJlbW92ZS5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGRvbVN0eWxlID0gbWF5UmVtb3ZlW2ldO1xuXG5cdFx0XHRpZihkb21TdHlsZS5yZWZzID09PSAwKSB7XG5cdFx0XHRcdGZvciAodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIGRvbVN0eWxlLnBhcnRzW2pdKCk7XG5cblx0XHRcdFx0ZGVsZXRlIHN0eWxlc0luRG9tW2RvbVN0eWxlLmlkXTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG59O1xuXG5mdW5jdGlvbiBhZGRTdHlsZXNUb0RvbSAoc3R5bGVzLCBvcHRpb25zKSB7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIGl0ZW0gPSBzdHlsZXNbaV07XG5cdFx0dmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XG5cblx0XHRpZihkb21TdHlsZSkge1xuXHRcdFx0ZG9tU3R5bGUucmVmcysrO1xuXG5cdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0ZG9tU3R5bGUucGFydHNbal0oaXRlbS5wYXJ0c1tqXSk7XG5cdFx0XHR9XG5cblx0XHRcdGZvcig7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdGRvbVN0eWxlLnBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YXIgcGFydHMgPSBbXTtcblxuXHRcdFx0Zm9yKHZhciBqID0gMDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0cGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XG5cdFx0XHR9XG5cblx0XHRcdHN0eWxlc0luRG9tW2l0ZW0uaWRdID0ge2lkOiBpdGVtLmlkLCByZWZzOiAxLCBwYXJ0czogcGFydHN9O1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBsaXN0VG9TdHlsZXMgKGxpc3QsIG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlcyA9IFtdO1xuXHR2YXIgbmV3U3R5bGVzID0ge307XG5cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIGl0ZW0gPSBsaXN0W2ldO1xuXHRcdHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuXHRcdHZhciBjc3MgPSBpdGVtWzFdO1xuXHRcdHZhciBtZWRpYSA9IGl0ZW1bMl07XG5cdFx0dmFyIHNvdXJjZU1hcCA9IGl0ZW1bM107XG5cdFx0dmFyIHBhcnQgPSB7Y3NzOiBjc3MsIG1lZGlhOiBtZWRpYSwgc291cmNlTWFwOiBzb3VyY2VNYXB9O1xuXG5cdFx0aWYoIW5ld1N0eWxlc1tpZF0pIHN0eWxlcy5wdXNoKG5ld1N0eWxlc1tpZF0gPSB7aWQ6IGlkLCBwYXJ0czogW3BhcnRdfSk7XG5cdFx0ZWxzZSBuZXdTdHlsZXNbaWRdLnBhcnRzLnB1c2gocGFydCk7XG5cdH1cblxuXHRyZXR1cm4gc3R5bGVzO1xufVxuXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQgKG9wdGlvbnMsIHN0eWxlKSB7XG5cdHZhciB0YXJnZXQgPSBnZXRFbGVtZW50KG9wdGlvbnMuaW5zZXJ0SW50bylcblxuXHRpZiAoIXRhcmdldCkge1xuXHRcdHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0SW50bycgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuXHR9XG5cblx0dmFyIGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wID0gc3R5bGVzSW5zZXJ0ZWRBdFRvcFtzdHlsZXNJbnNlcnRlZEF0VG9wLmxlbmd0aCAtIDFdO1xuXG5cdGlmIChvcHRpb25zLmluc2VydEF0ID09PSBcInRvcFwiKSB7XG5cdFx0aWYgKCFsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCkge1xuXHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgdGFyZ2V0LmZpcnN0Q2hpbGQpO1xuXHRcdH0gZWxzZSBpZiAobGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AubmV4dFNpYmxpbmcpIHtcblx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wLm5leHRTaWJsaW5nKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcblx0XHR9XG5cdFx0c3R5bGVzSW5zZXJ0ZWRBdFRvcC5wdXNoKHN0eWxlKTtcblx0fSBlbHNlIGlmIChvcHRpb25zLmluc2VydEF0ID09PSBcImJvdHRvbVwiKSB7XG5cdFx0dGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcblx0fSBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJvYmplY3RcIiAmJiBvcHRpb25zLmluc2VydEF0LmJlZm9yZSkge1xuXHRcdHZhciBuZXh0U2libGluZyA9IGdldEVsZW1lbnQob3B0aW9ucy5pbnNlcnRJbnRvICsgXCIgXCIgKyBvcHRpb25zLmluc2VydEF0LmJlZm9yZSk7XG5cdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgbmV4dFNpYmxpbmcpO1xuXHR9IGVsc2Uge1xuXHRcdHRocm93IG5ldyBFcnJvcihcIltTdHlsZSBMb2FkZXJdXFxuXFxuIEludmFsaWQgdmFsdWUgZm9yIHBhcmFtZXRlciAnaW5zZXJ0QXQnICgnb3B0aW9ucy5pbnNlcnRBdCcpIGZvdW5kLlxcbiBNdXN0IGJlICd0b3AnLCAnYm90dG9tJywgb3IgT2JqZWN0LlxcbiAoaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIjaW5zZXJ0YXQpXFxuXCIpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudCAoc3R5bGUpIHtcblx0aWYgKHN0eWxlLnBhcmVudE5vZGUgPT09IG51bGwpIHJldHVybiBmYWxzZTtcblx0c3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG5cblx0dmFyIGlkeCA9IHN0eWxlc0luc2VydGVkQXRUb3AuaW5kZXhPZihzdHlsZSk7XG5cdGlmKGlkeCA+PSAwKSB7XG5cdFx0c3R5bGVzSW5zZXJ0ZWRBdFRvcC5zcGxpY2UoaWR4LCAxKTtcblx0fVxufVxuXG5mdW5jdGlvbiBjcmVhdGVTdHlsZUVsZW1lbnQgKG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuXG5cdG9wdGlvbnMuYXR0cnMudHlwZSA9IFwidGV4dC9jc3NcIjtcblxuXHRhZGRBdHRycyhzdHlsZSwgb3B0aW9ucy5hdHRycyk7XG5cdGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zLCBzdHlsZSk7XG5cblx0cmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVMaW5rRWxlbWVudCAob3B0aW9ucykge1xuXHR2YXIgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpO1xuXG5cdG9wdGlvbnMuYXR0cnMudHlwZSA9IFwidGV4dC9jc3NcIjtcblx0b3B0aW9ucy5hdHRycy5yZWwgPSBcInN0eWxlc2hlZXRcIjtcblxuXHRhZGRBdHRycyhsaW5rLCBvcHRpb25zLmF0dHJzKTtcblx0aW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIGxpbmspO1xuXG5cdHJldHVybiBsaW5rO1xufVxuXG5mdW5jdGlvbiBhZGRBdHRycyAoZWwsIGF0dHJzKSB7XG5cdE9iamVjdC5rZXlzKGF0dHJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRlbC5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyc1trZXldKTtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIGFkZFN0eWxlIChvYmosIG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlLCB1cGRhdGUsIHJlbW92ZSwgcmVzdWx0O1xuXG5cdC8vIElmIGEgdHJhbnNmb3JtIGZ1bmN0aW9uIHdhcyBkZWZpbmVkLCBydW4gaXQgb24gdGhlIGNzc1xuXHRpZiAob3B0aW9ucy50cmFuc2Zvcm0gJiYgb2JqLmNzcykge1xuXHQgICAgcmVzdWx0ID0gb3B0aW9ucy50cmFuc2Zvcm0ob2JqLmNzcyk7XG5cblx0ICAgIGlmIChyZXN1bHQpIHtcblx0ICAgIFx0Ly8gSWYgdHJhbnNmb3JtIHJldHVybnMgYSB2YWx1ZSwgdXNlIHRoYXQgaW5zdGVhZCBvZiB0aGUgb3JpZ2luYWwgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBydW5uaW5nIHJ1bnRpbWUgdHJhbnNmb3JtYXRpb25zIG9uIHRoZSBjc3MuXG5cdCAgICBcdG9iai5jc3MgPSByZXN1bHQ7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgXHQvLyBJZiB0aGUgdHJhbnNmb3JtIGZ1bmN0aW9uIHJldHVybnMgYSBmYWxzeSB2YWx1ZSwgZG9uJ3QgYWRkIHRoaXMgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBjb25kaXRpb25hbCBsb2FkaW5nIG9mIGNzc1xuXHQgICAgXHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdCAgICBcdFx0Ly8gbm9vcFxuXHQgICAgXHR9O1xuXHQgICAgfVxuXHR9XG5cblx0aWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG5cdFx0dmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG5cblx0XHRzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcblxuXHRcdHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuXHRcdHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG5cblx0fSBlbHNlIGlmIChcblx0XHRvYmouc291cmNlTWFwICYmXG5cdFx0dHlwZW9mIFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIFVSTC5jcmVhdGVPYmplY3RVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBVUkwucmV2b2tlT2JqZWN0VVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgQmxvYiA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIlxuXHQpIHtcblx0XHRzdHlsZSA9IGNyZWF0ZUxpbmtFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IHVwZGF0ZUxpbmsuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblxuXHRcdFx0aWYoc3R5bGUuaHJlZikgVVJMLnJldm9rZU9iamVjdFVSTChzdHlsZS5ocmVmKTtcblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdHN0eWxlID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblx0XHR9O1xuXHR9XG5cblx0dXBkYXRlKG9iaik7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlIChuZXdPYmopIHtcblx0XHRpZiAobmV3T2JqKSB7XG5cdFx0XHRpZiAoXG5cdFx0XHRcdG5ld09iai5jc3MgPT09IG9iai5jc3MgJiZcblx0XHRcdFx0bmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiZcblx0XHRcdFx0bmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcFxuXHRcdFx0KSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0dXBkYXRlKG9iaiA9IG5ld09iaik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlbW92ZSgpO1xuXHRcdH1cblx0fTtcbn1cblxudmFyIHJlcGxhY2VUZXh0ID0gKGZ1bmN0aW9uICgpIHtcblx0dmFyIHRleHRTdG9yZSA9IFtdO1xuXG5cdHJldHVybiBmdW5jdGlvbiAoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG5cdFx0dGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xuXG5cdFx0cmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG5cdH07XG59KSgpO1xuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnIChzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG5cdHZhciBjc3MgPSByZW1vdmUgPyBcIlwiIDogb2JqLmNzcztcblxuXHRpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xuXHR9IGVsc2Uge1xuXHRcdHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcblx0XHR2YXIgY2hpbGROb2RlcyA9IHN0eWxlLmNoaWxkTm9kZXM7XG5cblx0XHRpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHN0eWxlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcblxuXHRcdGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuXHRcdFx0c3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0c3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcgKHN0eWxlLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBtZWRpYSA9IG9iai5tZWRpYTtcblxuXHRpZihtZWRpYSkge1xuXHRcdHN0eWxlLnNldEF0dHJpYnV0ZShcIm1lZGlhXCIsIG1lZGlhKVxuXHR9XG5cblx0aWYoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcblx0fSBlbHNlIHtcblx0XHR3aGlsZShzdHlsZS5maXJzdENoaWxkKSB7XG5cdFx0XHRzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcblx0XHR9XG5cblx0XHRzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcblx0fVxufVxuXG5mdW5jdGlvbiB1cGRhdGVMaW5rIChsaW5rLCBvcHRpb25zLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG5cdC8qXG5cdFx0SWYgY29udmVydFRvQWJzb2x1dGVVcmxzIGlzbid0IGRlZmluZWQsIGJ1dCBzb3VyY2VtYXBzIGFyZSBlbmFibGVkXG5cdFx0YW5kIHRoZXJlIGlzIG5vIHB1YmxpY1BhdGggZGVmaW5lZCB0aGVuIGxldHMgdHVybiBjb252ZXJ0VG9BYnNvbHV0ZVVybHNcblx0XHRvbiBieSBkZWZhdWx0LiAgT3RoZXJ3aXNlIGRlZmF1bHQgdG8gdGhlIGNvbnZlcnRUb0Fic29sdXRlVXJscyBvcHRpb25cblx0XHRkaXJlY3RseVxuXHQqL1xuXHR2YXIgYXV0b0ZpeFVybHMgPSBvcHRpb25zLmNvbnZlcnRUb0Fic29sdXRlVXJscyA9PT0gdW5kZWZpbmVkICYmIHNvdXJjZU1hcDtcblxuXHRpZiAob3B0aW9ucy5jb252ZXJ0VG9BYnNvbHV0ZVVybHMgfHwgYXV0b0ZpeFVybHMpIHtcblx0XHRjc3MgPSBmaXhVcmxzKGNzcyk7XG5cdH1cblxuXHRpZiAoc291cmNlTWFwKSB7XG5cdFx0Ly8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjY2MDM4NzVcblx0XHRjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiICsgYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSArIFwiICovXCI7XG5cdH1cblxuXHR2YXIgYmxvYiA9IG5ldyBCbG9iKFtjc3NdLCB7IHR5cGU6IFwidGV4dC9jc3NcIiB9KTtcblxuXHR2YXIgb2xkU3JjID0gbGluay5ocmVmO1xuXG5cdGxpbmsuaHJlZiA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG5cblx0aWYob2xkU3JjKSBVUkwucmV2b2tlT2JqZWN0VVJMKG9sZFNyYyk7XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuXHRpZiAoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcblx0XHRtb2R1bGUucGF0aHMgPSBbXTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhbiBvYmplY3QhJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWU6IHZhbHVlXG4gIH07XG59O1xuIiwiLy8gMTkuMS4yLjE0IC8gMTUuMi4zLjE0IE9iamVjdC5rZXlzKE8pXG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIGtleXMoTykge1xuICByZXR1cm4gJGtleXMoTywgZW51bUJ1Z0tleXMpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gdHJ1ZTtcbiIsInZhciBpZCA9IDA7XG52YXIgcHggPSBNYXRoLnJhbmRvbSgpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiAnU3ltYm9sKCcuY29uY2F0KGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXksICcpXycsICgrK2lkICsgcHgpLnRvU3RyaW5nKDM2KSk7XG59O1xuIiwiZXhwb3J0cy5mID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG4iLCJpbXBvcnQgeyBQbHVnaW5PYmplY3QgfSBmcm9tIFwidnVlXCI7XHJcbmltcG9ydCBYYkljb24gZnJvbSBcIi4vc3JjL3hiLWljb24udnVlXCI7XHJcbmV4cG9ydCBkZWZhdWx0IFhiSWNvbjtcclxuXHJcbmV4cG9ydCBjb25zdCB4Ykljb246IFBsdWdpbk9iamVjdDxYYkljb24+ID0ge1xyXG4gIGluc3RhbGw6IChWdWUpID0+IHtcclxuICAgIFZ1ZS5jb21wb25lbnQoXCJYYkljb25cIiwgWGJJY29uKTtcclxuICB9LFxyXG59OyIsInZhciBsaXN0Q2FjaGVDbGVhciA9IHJlcXVpcmUoJy4vX2xpc3RDYWNoZUNsZWFyJyksXG4gICAgbGlzdENhY2hlRGVsZXRlID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlRGVsZXRlJyksXG4gICAgbGlzdENhY2hlR2V0ID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlR2V0JyksXG4gICAgbGlzdENhY2hlSGFzID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlSGFzJyksXG4gICAgbGlzdENhY2hlU2V0ID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlU2V0Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBsaXN0IGNhY2hlIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gTGlzdENhY2hlKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYExpc3RDYWNoZWAuXG5MaXN0Q2FjaGUucHJvdG90eXBlLmNsZWFyID0gbGlzdENhY2hlQ2xlYXI7XG5MaXN0Q2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IGxpc3RDYWNoZURlbGV0ZTtcbkxpc3RDYWNoZS5wcm90b3R5cGUuZ2V0ID0gbGlzdENhY2hlR2V0O1xuTGlzdENhY2hlLnByb3RvdHlwZS5oYXMgPSBsaXN0Q2FjaGVIYXM7XG5MaXN0Q2FjaGUucHJvdG90eXBlLnNldCA9IGxpc3RDYWNoZVNldDtcblxubW9kdWxlLmV4cG9ydHMgPSBMaXN0Q2FjaGU7XG4iLCJ2YXIgZXEgPSByZXF1aXJlKCcuL2VxJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgaW5kZXggYXQgd2hpY2ggdGhlIGBrZXlgIGlzIGZvdW5kIGluIGBhcnJheWAgb2Yga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7Kn0ga2V5IFRoZSBrZXkgdG8gc2VhcmNoIGZvci5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gKi9cbmZ1bmN0aW9uIGFzc29jSW5kZXhPZihhcnJheSwga2V5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gIHdoaWxlIChsZW5ndGgtLSkge1xuICAgIGlmIChlcShhcnJheVtsZW5ndGhdWzBdLCBrZXkpKSB7XG4gICAgICByZXR1cm4gbGVuZ3RoO1xuICAgIH1cbiAgfVxuICByZXR1cm4gLTE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXNzb2NJbmRleE9mO1xuIiwidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpLFxuICAgIGdldFJhd1RhZyA9IHJlcXVpcmUoJy4vX2dldFJhd1RhZycpLFxuICAgIG9iamVjdFRvU3RyaW5nID0gcmVxdWlyZSgnLi9fb2JqZWN0VG9TdHJpbmcnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG51bGxUYWcgPSAnW29iamVjdCBOdWxsXScsXG4gICAgdW5kZWZpbmVkVGFnID0gJ1tvYmplY3QgVW5kZWZpbmVkXSc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRUYWdgIHdpdGhvdXQgZmFsbGJhY2tzIGZvciBidWdneSBlbnZpcm9ubWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldFRhZyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkVGFnIDogbnVsbFRhZztcbiAgfVxuICByZXR1cm4gKHN5bVRvU3RyaW5nVGFnICYmIHN5bVRvU3RyaW5nVGFnIGluIE9iamVjdCh2YWx1ZSkpXG4gICAgPyBnZXRSYXdUYWcodmFsdWUpXG4gICAgOiBvYmplY3RUb1N0cmluZyh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUdldFRhZztcbiIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIG5hdGl2ZUNyZWF0ZSA9IGdldE5hdGl2ZShPYmplY3QsICdjcmVhdGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBuYXRpdmVDcmVhdGU7XG4iLCJ2YXIgaXNLZXlhYmxlID0gcmVxdWlyZSgnLi9faXNLZXlhYmxlJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgZGF0YSBmb3IgYG1hcGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIHJlZmVyZW5jZSBrZXkuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWFwIGRhdGEuXG4gKi9cbmZ1bmN0aW9uIGdldE1hcERhdGEobWFwLCBrZXkpIHtcbiAgdmFyIGRhdGEgPSBtYXAuX19kYXRhX187XG4gIHJldHVybiBpc0tleWFibGUoa2V5KVxuICAgID8gZGF0YVt0eXBlb2Yga2V5ID09ICdzdHJpbmcnID8gJ3N0cmluZycgOiAnaGFzaCddXG4gICAgOiBkYXRhLm1hcDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRNYXBEYXRhO1xuIiwidmFyIGFzc2lnblZhbHVlID0gcmVxdWlyZSgnLi9fYXNzaWduVmFsdWUnKSxcbiAgICBiYXNlQXNzaWduVmFsdWUgPSByZXF1aXJlKCcuL19iYXNlQXNzaWduVmFsdWUnKTtcblxuLyoqXG4gKiBDb3BpZXMgcHJvcGVydGllcyBvZiBgc291cmNlYCB0byBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tLlxuICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IGlkZW50aWZpZXJzIHRvIGNvcHkuXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgdG8uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb3BpZWQgdmFsdWVzLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gY29weU9iamVjdChzb3VyY2UsIHByb3BzLCBvYmplY3QsIGN1c3RvbWl6ZXIpIHtcbiAgdmFyIGlzTmV3ID0gIW9iamVjdDtcbiAgb2JqZWN0IHx8IChvYmplY3QgPSB7fSk7XG5cbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIga2V5ID0gcHJvcHNbaW5kZXhdO1xuXG4gICAgdmFyIG5ld1ZhbHVlID0gY3VzdG9taXplclxuICAgICAgPyBjdXN0b21pemVyKG9iamVjdFtrZXldLCBzb3VyY2Vba2V5XSwga2V5LCBvYmplY3QsIHNvdXJjZSlcbiAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgaWYgKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIG5ld1ZhbHVlID0gc291cmNlW2tleV07XG4gICAgfVxuICAgIGlmIChpc05ldykge1xuICAgICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBvYmplY3Q7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29weU9iamVjdDtcbiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vbm9kZV9tb2R1bGVzL3RzLWxvYWRlci9pbmRleC5qcz8/cmVmLS0wLTEhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9BcHAudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uL25vZGVfbW9kdWxlcy90cy1sb2FkZXIvaW5kZXguanM/P3JlZi0tMC0xIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vQXBwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz10cyZcIiIsIlxuXG5cblxuXG5cblxuXHJcbmltcG9ydCB7IENvbXBvbmVudCwgVnVlIH0gZnJvbSBcInZ1ZS1wcm9wZXJ0eS1kZWNvcmF0b3JcIjtcclxuaW1wb3J0IG1haW5IZWFkZXIgZnJvbSBcIi4vY29tcG9uZW50cy9oZWFkZXIudnVlXCI7XHJcbmltcG9ydCByb3V0ZXIgZnJvbSBcIi4vcm91dGVyL25hdi5jb25maWcuanNvblwiO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgY29tcG9uZW50czoge1xyXG4gICAgbWFpbkhlYWRlcixcclxuICB9LFxyXG59KVxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBcHAgZXh0ZW5kcyBWdWUge31cclxuIiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdHMtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTAtMSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL2hlYWRlci52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9dHMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL3RzLWxvYWRlci9pbmRleC5qcz8/cmVmLS0wLTEhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9oZWFkZXIudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiIiwiXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXHJcbmltcG9ydCB7IENvbXBvbmVudCwgVnVlIH0gZnJvbSBcInZ1ZS1wcm9wZXJ0eS1kZWNvcmF0b3JcIjtcclxuaW1wb3J0IHsgWGJSb3V0ZUNvbmZpZyB9IGZyb20gXCIuLi9yb3V0ZXIvdHlwZXNcIjtcclxuaW1wb3J0IGhlYWRlckNvbmZpZyBmcm9tIFwiZXhhbXBsZXMvcm91dGVyL25hdi5jb25maWcuanNvblwiO1xyXG5pbXBvcnQgZXZlbnRCdXMgZnJvbSBcImV4YW1wbGVzL2V2ZW50LWJ1c1wiO1xyXG5cclxuQENvbXBvbmVudCh7fSlcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWFpbkhlYWRlciBleHRlbmRzIFZ1ZSB7XHJcbiAgaGVhZGVyQ29uZiA9IGhlYWRlckNvbmZpZztcclxuXHJcbiAgLy8gY2xpY2tIZWFkZXIoY29uZmlnKSB7XHJcbiAgLy8gICBldmVudEJ1cy4kZW1pdChcImhlYWRlckNsaWNrXCIsIGNvbmZpZy5jaGlsZHJlbik7XHJcbiAgLy8gfVxyXG59XHJcbiIsIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL2xlc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vaGVhZGVyLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9bGVzcyZcIik7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbi8vIFByZXBhcmUgY3NzVHJhbnNmb3JtYXRpb25cbnZhciB0cmFuc2Zvcm07XG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnRcbmlmKG1vZHVsZS5ob3QpIHtcblx0Ly8gV2hlbiB0aGUgc3R5bGVzIGNoYW5nZSwgdXBkYXRlIHRoZSA8c3R5bGU+IHRhZ3Ncblx0aWYoIWNvbnRlbnQubG9jYWxzKSB7XG5cdFx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvbGVzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9oZWFkZXIudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1sZXNzJlwiLCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9sZXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL2hlYWRlci52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZsYW5nPWxlc3MmXCIpO1xuXHRcdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cdFx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdFx0fSk7XG5cdH1cblx0Ly8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCIvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xuXG4vLyBsb2FkIHRoZSBzdHlsZXNcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uL25vZGVfbW9kdWxlcy9sZXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0FwcC52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZsYW5nPWxlc3MmXCIpO1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4vLyBQcmVwYXJlIGNzc1RyYW5zZm9ybWF0aW9uXG52YXIgdHJhbnNmb3JtO1xuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBIb3QgTW9kdWxlIFJlcGxhY2VtZW50XG5pZihtb2R1bGUuaG90KSB7XG5cdC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG5cdGlmKCFjb250ZW50LmxvY2Fscykge1xuXHRcdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vbm9kZV9tb2R1bGVzL2xlc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vQXBwLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9bGVzcyZcIiwgZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi9ub2RlX21vZHVsZXMvbGVzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9BcHAudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1sZXNzJlwiKTtcblx0XHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXHRcdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHRcdH0pO1xuXHR9XG5cdC8vIFdoZW4gdGhlIG1vZHVsZSBpcyBkaXNwb3NlZCwgcmVtb3ZlIHRoZSA8c3R5bGU+IHRhZ3Ncblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdHMtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTAtMSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL2RlbW8tYmxvY2sudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy90cy1sb2FkZXIvaW5kZXguanM/P3JlZi0tMC0xIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vZGVtby1ibG9jay52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9dHMmXCIiLCJcblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cclxuaW1wb3J0IHsgQ29tcG9uZW50LCBWdWUgfSBmcm9tIFwidnVlLXByb3BlcnR5LWRlY29yYXRvclwiO1xyXG5cclxuQENvbXBvbmVudFxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEZW1vQmxvY2sgZXh0ZW5kcyBWdWUge1xyXG4gIGlzRXhwYW5kOiBib29sZWFuID0gZmFsc2U7XHJcblxyXG4gIHRvZ2dsZSgpIHtcclxuICAgIHRoaXMuaXNFeHBhbmQgPSAhdGhpcy5pc0V4cGFuZDtcclxuICB9XHJcbn1cclxuIiwiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvbGVzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9kZW1vLWJsb2NrLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9bGVzcyZcIik7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbi8vIFByZXBhcmUgY3NzVHJhbnNmb3JtYXRpb25cbnZhciB0cmFuc2Zvcm07XG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnRcbmlmKG1vZHVsZS5ob3QpIHtcblx0Ly8gV2hlbiB0aGUgc3R5bGVzIGNoYW5nZSwgdXBkYXRlIHRoZSA8c3R5bGU+IHRhZ3Ncblx0aWYoIWNvbnRlbnQubG9jYWxzKSB7XG5cdFx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvbGVzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9kZW1vLWJsb2NrLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9bGVzcyZcIiwgZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvbGVzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9kZW1vLWJsb2NrLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9bGVzcyZcIik7XG5cdFx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblx0XHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0XHR9KTtcblx0fVxuXHQvLyBXaGVuIHRoZSBtb2R1bGUgaXMgZGlzcG9zZWQsIHJlbW92ZSB0aGUgPHN0eWxlPiB0YWdzXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3RzLWxvYWRlci9pbmRleC5qcz8/cmVmLS0wLTEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi94Yi1idXR0b24udnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy90cy1sb2FkZXIvaW5kZXguanM/P3JlZi0tMC0xIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4veGItYnV0dG9uLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz10cyZcIiIsIlxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXHJcbmltcG9ydCB7IENvbXBvbmVudCwgUHJvcCwgV2F0Y2gsIFZ1ZSB9IGZyb20gXCJ2dWUtcHJvcGVydHktZGVjb3JhdG9yXCI7XHJcbmltcG9ydCBMb2NhbGUgZnJvbSBcIi4uLy4uLy4uL3NyYy9taXhpbnMvbG9jYWxlXCI7XHJcblxyXG5jb25zdCBwcmVmaXhDbHMgPSBcInhidWktYnV0dG9uXCI7XHJcbkBDb21wb25lbnQoe1xyXG4gIG1peGluczogW0xvY2FsZV0sXHJcbn0pXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFhiQnV0dG9uIGV4dGVuZHMgVnVlIHtcclxuICAvKiog5oyJ6ZKu5qC35byPICovXHJcbiAgQFByb3AoeyB0eXBlOiBTdHJpbmcsIGRlZmF1bHQ6IFwiZGVmYXVsdFwiIH0pXHJcbiAgdHlwZSE6IHN0cmluZztcclxuXHJcbiAgLyoqIOaMiemSruWwuuWvuCAqL1xyXG4gIEBQcm9wKHsgdHlwZTogU3RyaW5nLCBkZWZhdWx0OiBcIm1lZGl1bVwiIH0pXHJcbiAgc2l6ZSE6IHN0cmluZztcclxuXHJcbiAgLyoqIGljb27phY3nva4gKi9cclxuICBAUHJvcCgpXHJcbiAgaWNvbiE6IHN0cmluZztcclxuXHJcbiAgLyoqIOaYr+WQpuemgeeUqCAqL1xyXG4gIEBQcm9wKHsgdHlwZTogQm9vbGVhbiwgZGVmYXVsdDogZmFsc2UgfSlcclxuICBkaXNhYmxlZCE6IGJvb2xlYW47XHJcblxyXG4gIC8qKiDmmK/lkKbkuLrplb/mjInpkq4gKi9cclxuICBAUHJvcCh7IHR5cGU6IEJvb2xlYW4sIGRlZmF1bHQ6IGZhbHNlIH0pXHJcbiAgbG9uZyE6IGJvb2xlYW47XHJcblxyXG4gIC8vIOeCueWHu+S6i+S7tlxyXG4gIGhhbmRsZUNsaWNrKGV2ZW50OiB2b2lkKSB7XHJcbiAgICB0aGlzLiRlbWl0KFwiY2xpY2tcIiwgZXZlbnQpO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGNsYXNzZXMoKSB7XHJcbiAgICByZXR1cm4gW1xyXG4gICAgICB7XHJcbiAgICAgICAgW2Ake3ByZWZpeENsc31gXTogdHJ1ZSxcclxuICAgICAgICBbYCR7cHJlZml4Q2xzfS0ke3RoaXMuc2l6ZX1gXTogdHJ1ZSxcclxuICAgICAgICBbYCR7cHJlZml4Q2xzfS1kaXNhYmxlZGBdOiB0aGlzLmRpc2FibGVkLFxyXG4gICAgICAgIFtgJHtwcmVmaXhDbHN9LSR7dGhpcy50eXBlfWBdOiB0aGlzLnNpemUgIT09IFwiZGVmYXVsdFwiLFxyXG4gICAgICAgIFtgJHtwcmVmaXhDbHN9LWxvbmdgXTogdGhpcy5sb25nLFxyXG4gICAgICB9LFxyXG4gICAgXTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdHMtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTAtMSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL3hiLWNoZWNrYm94LWdyb3VwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz10cyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdHMtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTAtMSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL3hiLWNoZWNrYm94LWdyb3VwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz10cyZcIiIsIlxuXG5cblxuXG5cblxyXG5pbXBvcnQgeyBDb21wb25lbnQsIFByb3AsIFZ1ZSwgTWl4aW5zLCBXYXRjaCwgRW1pdCB9IGZyb20gXCJ2dWUtcHJvcGVydHktZGVjb3JhdG9yXCI7XHJcbmltcG9ydCB7IGZpbmRDb21wb25lbnRzRG93bndhcmQgfSBmcm9tIFwic3JjL3V0aWxzL2Fzc2lzdFwiO1xyXG5pbXBvcnQgWGJDaGVja2JveCBmcm9tIFwiLi94Yi1jaGVja2JveC52dWVcIjtcclxuaW1wb3J0IEVtaXR0ZXIgZnJvbSBcInNyYy9taXhpbnMvZW1pdHRlclwiO1xyXG5cclxuY29uc3QgcHJlZml4Q2xzID0gXCJ4YnVpLWNoZWNrYm94XCI7XHJcblxyXG5AQ29tcG9uZW50KHsgbmFtZTogXCJYYkNoZWNrYm94R3JvdXBcIiB9KVxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBYYkNoZWNrYm94R3JvdXAgZXh0ZW5kcyBNaXhpbnMoRW1pdHRlcikge1xyXG4gIC8qKiDpgInkuK3nmoTlgLwgKi9cclxuICBAUHJvcCh7XHJcbiAgICB0eXBlOiBBcnJheSxcclxuICAgIGRlZmF1bHQoKSB7XHJcbiAgICAgIHJldHVybiBbXTtcclxuICAgIH0sXHJcbiAgfSlcclxuICB2YWx1ZSE6IGFueVtdO1xyXG5cclxuICAvKiog5bC65a+45aSn5bCPICovXHJcbiAgQFByb3Aoe1xyXG4gICAgdHlwZTogU3RyaW5nLFxyXG4gICAgZGVmYXVsdDogXCJtZWRpdW1cIixcclxuICAgIHZhbGlkYXRvcih2YWx1ZSkge1xyXG4gICAgICByZXR1cm4gW1wic21hbGxcIiwgXCJtZWRpdW1cIiwgXCJsYXJnZVwiXS5pbmNsdWRlcyh2YWx1ZSk7XHJcbiAgICB9LFxyXG4gIH0pXHJcbiAgc2l6ZSE6IHN0cmluZztcclxuXHJcbiAgLy8g5b2T5YmN5YC8XHJcbiAgcHJpdmF0ZSBjdXJyZW50VmFsdWU6IGFueVtdID0gdGhpcy52YWx1ZTtcclxuXHJcbiAgLy8g5b2T5YmN57uE5Lu25a6e5L6L5omA5pyJ5a2Q57qn57uE5Lu26ZuG5ZCIXHJcbiAgcHJpdmF0ZSBjaGlsZHJlbnM6IFhiQ2hlY2tib3hbXSA9IFtdO1xyXG5cclxuICBtb3VudGVkKCkge1xyXG4gICAgdGhpcy51cGRhdGVNb2RlbCh0cnVlKTtcclxuICB9XHJcblxyXG4gIC8vIOWklumDqHZhbHVl5YC85pS55Y+Y5LqL5Lu2XHJcbiAgQFdhdGNoKFwidmFsdWVcIilcclxuICBvblZhbHVlQ2hhbmdlKCkge1xyXG4gICAgdGhpcy51cGRhdGVNb2RlbCh0cnVlKTtcclxuICB9XHJcblxyXG4gIC8vIOabtOaWsOWtkOe7hOS7tuWGheeahOWAvFxyXG4gIHVwZGF0ZU1vZGVsKHVwZGF0ZSkge1xyXG4gICAgdGhpcy5jaGlsZHJlbnMgPSBmaW5kQ29tcG9uZW50c0Rvd253YXJkKHRoaXMsIFwiQ2hlY2tib3hcIikgYXMgWGJDaGVja2JveFtdO1xyXG4gICAgaWYgKHRoaXMuY2hpbGRyZW5zKSB7XHJcbiAgICAgIGNvbnN0IHsgdmFsdWUgfSA9IHRoaXM7XHJcbiAgICAgIHRoaXMuY2hpbGRyZW5zLmZvckVhY2goKGNoaWxkKSA9PiB7XHJcbiAgICAgICAgY2hpbGQubW9kZWwgPSB2YWx1ZTtcclxuXHJcbiAgICAgICAgaWYgKHVwZGF0ZSkge1xyXG4gICAgICAgICAgY2hpbGQuY3VycmVudFZhbHVlID0gdmFsdWUuaW5kZXhPZihjaGlsZC5sYWJlbCkgPj0gMDtcclxuICAgICAgICAgIGNoaWxkLmdyb3VwID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY2hhbmdlKGRhdGEpIHtcclxuICAgIHRoaXMuY3VycmVudFZhbHVlID0gZGF0YTtcclxuICAgIHRoaXMuJGVtaXQoXCJpbnB1dFwiLCBkYXRhKTtcclxuICAgIHRoaXMuJGVtaXQoXCJvbi1jaGFuZ2VcIiwgZGF0YSk7XHJcbiAgICB0aGlzLmRpc3BhdGNoKFwiRm9ybUl0ZW1cIiwgXCJvbi1mb3JtLWNoYW5nZVwiLCBkYXRhKTtcclxuICB9XHJcblxyXG4gIGdldCBjbGFzc2VzKCkge1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAgYCR7cHJlZml4Q2xzfS1ncm91cGAsXHJcbiAgICAgIHtcclxuICAgICAgICBbYCR7cHJlZml4Q2xzfS0ke3RoaXMuc2l6ZX1gXTogISF0aGlzLnNpemUsXHJcbiAgICAgIH0sXHJcbiAgICBdO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy90cy1sb2FkZXIvaW5kZXguanM/P3JlZi0tMC0xIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4veGItY2hlY2tib3gudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy90cy1sb2FkZXIvaW5kZXguanM/P3JlZi0tMC0xIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4veGItY2hlY2tib3gudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiIiwiXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cclxuaW1wb3J0IHsgQ29tcG9uZW50LCBQcm9wLCBWdWUsIE1peGlucywgV2F0Y2ggfSBmcm9tIFwidnVlLXByb3BlcnR5LWRlY29yYXRvclwiO1xyXG5pbXBvcnQgeyBmaW5kQ29tcG9uZW50VXB3YXJkIH0gZnJvbSBcInNyYy91dGlscy9hc3Npc3RcIjtcclxuaW1wb3J0IFhiQ2hlY2tib3hHcm91cCBmcm9tIFwiLi94Yi1jaGVja2JveC1ncm91cC52dWVcIjtcclxuaW1wb3J0IEVtaXR0ZXIgZnJvbSBcInNyYy9taXhpbnMvZW1pdHRlclwiO1xyXG5cclxuY29uc3QgcHJlZml4Q2xzID0gXCJ4YnVpLWNoZWNrYm94XCI7XHJcblxyXG5AQ29tcG9uZW50KHsgbmFtZTogXCJYYkNoZWNrQm94XCIsIG1peGluczogW0VtaXR0ZXJdIH0pXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFhiQ2hlY2tib3ggZXh0ZW5kcyBNaXhpbnMoRW1pdHRlcikge1xyXG4gIC8qKiDlj6rlnKjljZXni6zkvb/nlKjml7bmnInmlYjjgILlj6/ku6Xkvb/nlKggdi1tb2RlbCDlj4zlkJHnu5HlrprmlbDmja4gKi9cclxuICBAUHJvcCh7IHR5cGU6IFtTdHJpbmcsIE51bWJlciwgQm9vbGVhbl0sIGRlZmF1bHQ6IGZhbHNlIH0pXHJcbiAgdmFsdWUhOiBzdHJpbmcgfCBudW1iZXIgfCBib29sZWFuO1xyXG5cclxuICAvKiog5Y+q5Zyo57uE5ZCI5L2/55So5pe25pyJ5pWI44CC5oyH5a6a5b2T5YmN6YCJ6aG555qEIHZhbHVlIOWAvO+8jOe7hOWQiOS8muiHquWKqOWIpOaWreaYr+WQpumAieS4rSAqL1xyXG4gIEBQcm9wKHsgdHlwZTogW1N0cmluZywgTnVtYmVyLCBCb29sZWFuXSwgZGVmYXVsdDogXCJcIiB9KVxyXG4gIGxhYmVsITogc3RyaW5nIHwgbnVtYmVyIHwgYm9vbGVhbjtcclxuXHJcbiAgLyoqIOiuvue9riBpbmRldGVybWluYXRlIOeKtuaAge+8jOaYr+WQpuWNiumAieS4reeKtuaAge+8jOWPqui0n+i0o+agt+W8j+aOp+WItiAqL1xyXG4gIEBQcm9wKHsgdHlwZTogQm9vbGVhbiwgZGVmYXVsdDogZmFsc2UgfSlcclxuICBpbmRldGVybWluYXRlITogYm9vbGVhbjtcclxuXHJcbiAgLyoqIOmAieS4reaXtueahOWAvO+8jOW9k+S9v+eUqOexu+S8vCAxIOWSjCAwIOadpeWIpOaWreaYr+WQpumAieS4reaXtuS8muW+iOacieeUqCAqL1xyXG4gIEBQcm9wKHsgdHlwZTogW1N0cmluZywgTnVtYmVyLCBCb29sZWFuXSwgZGVmYXVsdDogdHJ1ZSB9KVxyXG4gIHRydWVWYWx1ZSE6IHN0cmluZyB8IG51bWJlciB8IGJvb2xlYW47XHJcblxyXG4gIC8qKiDpgInkuK3ml7bnmoTlgLzvvIzlvZPkvb/nlKjnsbvkvLwgMSDlkowgMCDmnaXliKTmlq3mmK/lkKbpgInkuK3ml7bkvJrlvojmnInnlKggKi9cclxuICBAUHJvcCh7IHR5cGU6IFtTdHJpbmcsIE51bWJlciwgQm9vbGVhbl0sIGRlZmF1bHQ6IGZhbHNlIH0pXHJcbiAgZmFsc2VWYWx1ZSE6IHN0cmluZyB8IG51bWJlciB8IGJvb2xlYW47XHJcblxyXG4gIC8qKiDmmK/lkKbnpoHnlKggKi9cclxuICBAUHJvcCh7IHR5cGU6IEJvb2xlYW4sIGRlZmF1bHQ6IGZhbHNlIH0pXHJcbiAgZGlzYWJsZWQhOiBib29sZWFuO1xyXG5cclxuICAvKiog5bC65a+45aSn5bCPICovXHJcbiAgQFByb3Aoe1xyXG4gICAgdHlwZTogU3RyaW5nLFxyXG4gICAgZGVmYXVsdDogXCJtZWRpdW1cIixcclxuICAgIHZhbGlkYXRvcih2YWx1ZSkge1xyXG4gICAgICByZXR1cm4gW1wic21hbGxcIiwgXCJtZWRpdW1cIiwgXCJsYXJnZVwiXS5pbmNsdWRlcyh2YWx1ZSk7XHJcbiAgICB9LFxyXG4gIH0pXHJcbiAgc2l6ZSE6IHN0cmluZztcclxuXHJcbiAgQFByb3AoeyB0eXBlOiBTdHJpbmcgfSlcclxuICBuYW1lITogc3RyaW5nO1xyXG5cclxuICAvLyDmmK/lkKbmmK9DaGVja2JveEdyb3VwLOWAvOeahOaUueWPmOeUsVhiQ2hlY2tib3hHcm91cOe7hOS7tuaOp+WItlxyXG4gIGdyb3VwOiBib29sZWFuID0gZmFsc2U7XHJcblxyXG4gIC8vIOaVsOaNruaooeWei1xyXG4gIG1vZGVsOiBhbnlbXSA9IFtdO1xyXG5cclxuICBjdXJyZW50VmFsdWU6IHN0cmluZyB8IG51bWJlciB8IGJvb2xlYW4gPSB0aGlzLnZhbHVlO1xyXG5cclxuICBzaG93U2xvdDogYm9vbGVhbiA9IHRydWU7XHJcblxyXG4gIC8vIOeUqOS6juWtmOaUvlhiQ2hlY2tib3hHcm91cOe7hOS7tueahFZ1ZeWunuS+i1xyXG4gIHBhcmVudCE6IFhiQ2hlY2tib3hHcm91cDtcclxuXHJcbiAgZm9jdXNJbm5lcjogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICBtb3VudGVkKCkge1xyXG4gICAgdGhpcy5wYXJlbnQgPSBmaW5kQ29tcG9uZW50VXB3YXJkKHRoaXMsIFwiWGJDaGVja2JveEdyb3VwXCIpIGFzIFhiQ2hlY2tib3hHcm91cDtcclxuICAgIGlmICh0aGlzLnBhcmVudCkge1xyXG4gICAgICB0aGlzLmdyb3VwID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5ncm91cCkge1xyXG4gICAgICB0aGlzLnBhcmVudC51cGRhdGVNb2RlbCh0cnVlKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMudXBkYXRlTW9kZWwoKTtcclxuICAgICAgdGhpcy5zaG93U2xvdCA9IHRoaXMuJHNsb3RzLmRlZmF1bHQgIT09IHVuZGVmaW5lZDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHVwZGF0ZU1vZGVsKCkge1xyXG4gICAgdGhpcy5jdXJyZW50VmFsdWUgPSB0aGlzLnZhbHVlID09PSB0aGlzLnRydWVWYWx1ZTtcclxuICB9XHJcblxyXG4gIGNoYW5nZShldmVudCkge1xyXG4gICAgaWYgKHRoaXMuZGlzYWJsZWQpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGNoZWNrZWQgPSBldmVudC50YXJnZXQuY2hlY2tlZDtcclxuICAgIHRoaXMuY3VycmVudFZhbHVlID0gY2hlY2tlZDtcclxuXHJcbiAgICBjb25zdCB2YWx1ZSA9IGNoZWNrZWQgPyB0aGlzLnRydWVWYWx1ZSA6IHRoaXMuZmFsc2VWYWx1ZTtcclxuICAgIHRoaXMuJGVtaXQoXCJpbnB1dFwiLCB2YWx1ZSk7XHJcblxyXG4gICAgaWYgKHRoaXMuZ3JvdXApIHtcclxuICAgICAgdGhpcy5wYXJlbnQuY2hhbmdlKHRoaXMubW9kZWwpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy4kZW1pdChcIm9uLWNoYW5nZVwiLCB2YWx1ZSk7XHJcbiAgICAgIHRoaXMuZGlzcGF0Y2goXCJGb3JtSXRlbVwiLCBcIm9uLWZvcm0tY2hhbmdlXCIsIHZhbHVlKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG9uQmx1cigpIHtcclxuICAgIHRoaXMuZm9jdXNJbm5lciA9IGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgb25Gb2N1cygpIHtcclxuICAgIHRoaXMuZm9jdXNJbm5lciA9IHRydWU7XHJcbiAgfVxyXG5cclxuICBAV2F0Y2goXCJ2YWx1ZVwiKVxyXG4gIG9uVmFsdWVDaGFuZ2VkKHZhbCkge1xyXG4gICAgaWYgKHZhbCA9PT0gdGhpcy50cnVlVmFsdWUgfHwgdmFsID09PSB0aGlzLmZhbHNlVmFsdWUpIHtcclxuICAgICAgdGhpcy51cGRhdGVNb2RlbCgpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVmFsdWUgc2hvdWxkIGJlIHRydWVWYWx1ZSBvciBmYWxzZVZhbHVlLlwiKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldCB3cmFwQ2xhc3NlcygpIHtcclxuICAgIHJldHVybiBbXHJcbiAgICAgIGAke3ByZWZpeENsc30td3JhcHBlcmAsXHJcbiAgICAgIHtcclxuICAgICAgICBbYCR7cHJlZml4Q2xzfS1ncm91cC1pdGVtYF06IHRoaXMuZ3JvdXAsXHJcbiAgICAgICAgW2Ake3ByZWZpeENsc30td3JhcHBlci1jaGVja2VkYF06IHRoaXMuY3VycmVudFZhbHVlLFxyXG4gICAgICAgIFtgJHtwcmVmaXhDbHN9LXdyYXBwZXItZGlzYWJsZWRgXTogdGhpcy5kaXNhYmxlZCxcclxuICAgICAgfSxcclxuICAgIF07XHJcbiAgfVxyXG4gIGdldCBjaGVja2JveENsYXNzZXMoKSB7XHJcbiAgICByZXR1cm4gW1xyXG4gICAgICBgJHtwcmVmaXhDbHN9YCxcclxuICAgICAge1xyXG4gICAgICAgIFtgJHtwcmVmaXhDbHN9LWNoZWNrZWRgXTogdGhpcy5jdXJyZW50VmFsdWUsXHJcbiAgICAgICAgW2Ake3ByZWZpeENsc30tZGlzYWJsZWRgXTogdGhpcy5kaXNhYmxlZCxcclxuICAgICAgICBbYCR7cHJlZml4Q2xzfS1pbmRldGVybWluYXRlYF06IHRoaXMuaW5kZXRlcm1pbmF0ZSxcclxuICAgICAgfSxcclxuICAgIF07XHJcbiAgfVxyXG4gIGdldCBpbm5lckNsYXNzZXMoKSB7XHJcbiAgICByZXR1cm4gW2Ake3ByZWZpeENsc30taW5uZXJgXTtcclxuICB9XHJcbiAgZ2V0IGlucHV0Q2xhc3NlcygpIHtcclxuICAgIHJldHVybiBgJHtwcmVmaXhDbHN9LWlucHV0YDtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdHMtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTAtMSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL3hiLWNvbG9yLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz10cyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdHMtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTAtMSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL3hiLWNvbG9yLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz10cyZcIiIsIlxuXG5cblxuXHJcbmltcG9ydCB7IENvbXBvbmVudCwgUHJvcCwgVnVlIH0gZnJvbSBcInZ1ZS1wcm9wZXJ0eS1kZWNvcmF0b3JcIjtcclxuXHJcbkBDb21wb25lbnQoeyBuYW1lOiBcIlhiQ29sb3JcIiB9KVxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBYYkNvbG9yIGV4dGVuZHMgVnVlIHtcclxuXHJcbn1cclxuIiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdHMtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTAtMSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL3hiLWZvcm0taXRlbS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9dHMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3RzLWxvYWRlci9pbmRleC5qcz8/cmVmLS0wLTEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi94Yi1mb3JtLWl0ZW0udnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiIiwiXG5cblxuXG5cblxuXG5cblxuXG5cblxuXHJcbmltcG9ydCB7IENvbXBvbmVudCwgUHJvcCwgSW5qZWN0LCBNaXhpbnMsIFZ1ZSwgV2F0Y2ggfSBmcm9tICd2dWUtcHJvcGVydHktZGVjb3JhdG9yJztcclxuaW1wb3J0IEVtbWl0ZXIgZnJvbSAnc3JjL21peGlucy9lbWl0dGVyJztcclxuaW1wb3J0IEFzeW5jVmFsaWRhdG9yIGZyb20gJ2FzeW5jLXZhbGlkYXRvcic7XHJcblxyXG5jb25zdCBwcmVmaXhDbHMgPSAneGJ1aS1mb3JtLWl0ZW0nO1xyXG5cclxuZnVuY3Rpb24gZ2V0UHJvcEJ5UGF0aChvYmosIHBhdGgpIHtcclxuICBsZXQgdGVtcE9iaiA9IG9iajtcclxuICBwYXRoID0gcGF0aC5yZXBsYWNlKC9cXFsoXFx3KylcXF0vZywgJy4kMScpO1xyXG4gIHBhdGggPSBwYXRoLnJlcGxhY2UoL15cXC4vLCAnJyk7XHJcblxyXG4gIGxldCBrZXlBcnIgPSBwYXRoLnNwbGl0KCcuJyk7XHJcbiAgbGV0IGkgPSAwO1xyXG5cclxuICBmb3IgKGxldCBsZW4gPSBrZXlBcnIubGVuZ3RoOyBpIDwgbGVuIC0gMTsgKytpKSB7XHJcbiAgICBsZXQga2V5ID0ga2V5QXJyW2ldO1xyXG4gICAgaWYgKGtleSBpbiB0ZW1wT2JqKSB7XHJcbiAgICAgIHRlbXBPYmogPSB0ZW1wT2JqW2tleV07XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1tYYlVJIHdhcm5dOiBwbGVhc2UgdHJhbnNmZXIgYSB2YWxpZCBwcm9wIHBhdGggdG8gZm9ybSBpdGVtIScpO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4ge1xyXG4gICAgbzogdGVtcE9iaixcclxuICAgIGs6IGtleUFycltpXSxcclxuICAgIHY6IHRlbXBPYmpba2V5QXJyW2ldXSxcclxuICB9O1xyXG59XHJcblxyXG5AQ29tcG9uZW50KHsgbmFtZTogJ1hiRm9ybUl0ZW0nLCBtaXhpbnM6IFtFbW1pdGVyXSB9KVxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBYYkZvcm1JdGVtIGV4dGVuZHMgTWl4aW5zKEVtbWl0ZXIpIHtcclxuICBAUHJvcCh7IHR5cGU6IFN0cmluZywgZGVmYXVsdDogJycgfSlcclxuICBsYWJlbCE6IHN0cmluZztcclxuICBAUHJvcChOdW1iZXIpXHJcbiAgbGFiZWxXaWR0aCE6IG51bWJlcjtcclxuICBAUHJvcChTdHJpbmcpXHJcbiAgcHJvcCE6IHN0cmluZztcclxuICBAUHJvcCh7IHR5cGU6IEJvb2xlYW4sIGRlZmF1bHQ6IGZhbHNlIH0pXHJcbiAgcmVxdWlyZWQhOiBib29sZWFuO1xyXG4gIEBQcm9wKHsgdHlwZTogW09iamVjdCwgQXJyYXldIH0pXHJcbiAgcnVsZXMhOiBbb2JqZWN0LCBBcnJheTxhbnk+XTtcclxuICBAUHJvcChTdHJpbmcpXHJcbiAgZXJyb3IhOiBzdHJpbmc7XHJcbiAgQFByb3AoQm9vbGVhbilcclxuICB2YWxpZGF0ZVN0YXR1cyE6IGJvb2xlYW47XHJcbiAgQFByb3AoeyB0eXBlOiBCb29sZWFuLCBkZWZhdWx0OiB0cnVlIH0pXHJcbiAgc2hvd01lc3NhZ2UhOiBib29sZWFuO1xyXG4gIEBQcm9wKFN0cmluZylcclxuICBsYWJlbEZvciE6IHN0cmluZztcclxuXHJcbiAgQEluamVjdCgpIGZvcm0hOiBhbnk7XHJcblxyXG4gIHByZWZpeENsczogc3RyaW5nID0gcHJlZml4Q2xzO1xyXG4gIGlzUmVxdWlyZWQ6IGJvb2xlYW4gPSBmYWxzZTtcclxuICB2YWxpZGF0ZVN0YXRlOiBzdHJpbmcgPSAnJztcclxuICB2YWxpZGF0ZU1lc3NhZ2U6IHN0cmluZyA9ICcnO1xyXG4gIHZhbGlkYXRlRGlzYWJsZWQ6IGJvb2xlYW4gPSBmYWxzZTtcclxuICB2YWxpZGF0b3I6IGFueSA9IHt9O1xyXG5cclxuICBnZXQgY2xhc3NlcygpIHtcclxuICAgIHJldHVybiBbXHJcbiAgICAgIGAke3ByZWZpeENsc31gLFxyXG4gICAgICB7XHJcbiAgICAgICAgW2Ake3ByZWZpeENsc30tcmVxdWlyZWRgXTogdGhpcy5yZXF1aXJlZCB8fCB0aGlzLmlzUmVxdWlyZWQsXHJcbiAgICAgICAgW2Ake3ByZWZpeENsc30tZXJyb3JgXTogdGhpcy52YWxpZGF0ZVN0YXRlID09PSAnZXJyb3InLFxyXG4gICAgICAgIFtgJHtwcmVmaXhDbHN9LXZhbGlkYXRpbmdgXTogdGhpcy52YWxpZGF0ZVN0YXRlID09PSAndmFsaWRhdGluZycsXHJcbiAgICAgIH0sXHJcbiAgICBdO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGZpZWxkVmFsdWUoKSB7XHJcbiAgICBjb25zdCBtb2RlbCA9IHRoaXMuZm9ybS5tb2RlbDtcclxuICAgIGlmICghbW9kZWwgfHwgIXRoaXMucHJvcCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHBhdGggPSB0aGlzLnByb3A7XHJcbiAgICBpZiAocGF0aC5pbmRleE9mKCc6JykgIT09IC0xKSB7XHJcbiAgICAgIHBhdGggPSBwYXRoLnJlcGxhY2UoLzovLCAnLicpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBnZXRQcm9wQnlQYXRoKG1vZGVsLCBwYXRoKS52O1xyXG4gIH1cclxuXHJcbiAgZ2V0IGxhYmVsU3R5bGVzKCkge1xyXG4gICAgbGV0IHN0eWxlOiBhbnkgPSB7fTtcclxuICAgIGNvbnN0IGxhYmVsV2lkdGggPSB0aGlzLmxhYmVsV2lkdGggPT09IDAgfHwgdGhpcy5sYWJlbFdpZHRoID8gdGhpcy5sYWJlbFdpZHRoIDogdGhpcy5mb3JtLmxhYmVsV2lkdGg7XHJcblxyXG4gICAgaWYgKGxhYmVsV2lkdGggfHwgbGFiZWxXaWR0aCA9PT0gMCkge1xyXG4gICAgICBzdHlsZS53aWR0aCA9IGAke2xhYmVsV2lkdGh9cHhgO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHN0eWxlO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGNvbnRlbnRTdHlsZXMoKSB7XHJcbiAgICBsZXQgc3R5bGU6IGFueSA9IHt9O1xyXG4gICAgY29uc3QgbGFiZWxXaWR0aCA9IHRoaXMubGFiZWxXaWR0aCA9PT0gMCB8fCB0aGlzLmxhYmVsV2lkdGggPyB0aGlzLmxhYmVsV2lkdGggOiB0aGlzLmZvcm0ubGFiZWxXaWR0aDtcclxuXHJcbiAgICBpZiAobGFiZWxXaWR0aCB8fCBsYWJlbFdpZHRoID09PSAwKSB7XHJcbiAgICAgIHN0eWxlLm1hcmdpbkxlZnQgPSBgJHtsYWJlbFdpZHRofXB4YDtcclxuICAgIH1cclxuICAgIHJldHVybiBzdHlsZTtcclxuICB9XHJcblxyXG4gIEBXYXRjaCgnZXJyb3InKVxyXG4gIG9uRXJyb3JDaGFuZ2VkKHZhbCkge1xyXG4gICAgdGhpcy52YWxpZGF0ZU1lc3NhZ2UgPSB2YWw7XHJcbiAgICB0aGlzLnZhbGlkYXRlU3RhdGUgPSB2YWwgPT09ICcnID8gJycgOiAnZXJyb3InO1xyXG4gIH1cclxuXHJcbiAgQFdhdGNoKCd2YWxpZGF0ZVN0YXR1cycpXHJcbiAgb25WYWxpZGF0ZVN0YXR1c0NoYW5nZWQodmFsKSB7XHJcbiAgICB0aGlzLnZhbGlkYXRlU3RhdGUgPSB2YWw7XHJcbiAgfVxyXG5cclxuICBAV2F0Y2goJ3J1bGVzJylcclxuICBvblJ1bGVzQ2hhbmdlZCh2YWwpIHtcclxuICAgIHRoaXMuc2V0UnVsZXMoKTtcclxuICB9XHJcblxyXG4gIHNldFJ1bGVzKCkge1xyXG4gICAgbGV0IHJ1bGVzID0gdGhpcy5nZXRSdWxlcygpO1xyXG4gICAgaWYgKHJ1bGVzLmxlbmd0aCAmJiB0aGlzLnJlcXVpcmVkKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH0gZWxzZSBpZiAocnVsZXMubGVuZ3RoKSB7XHJcbiAgICAgIHJ1bGVzLmV2ZXJ5KChydWxlKSA9PiB7XHJcbiAgICAgICAgdGhpcy5pc1JlcXVpcmVkID0gcnVsZS5yZXF1aXJlZDtcclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2UgaWYgKHRoaXMucmVxdWlyZWQpIHtcclxuICAgICAgdGhpcy5pc1JlcXVpcmVkID0gdGhpcy5yZXF1aXJlZDtcclxuICAgIH1cclxuICAgIHRoaXMuJG9mZignb24tZm9ybS1ibHVyJywgdGhpcy5vbkZpZWxkQmx1cik7XHJcbiAgICB0aGlzLiRvZmYoJ29uLWZvcm0tY2hhbmdlJywgdGhpcy5vbkZpZWxkQ2hhbmdlKTtcclxuICAgIHRoaXMuJG9uKCdvbi1mb3JtLWJsdXInLCB0aGlzLm9uRmllbGRCbHVyKTtcclxuICAgIHRoaXMuJG9uKCdvbi1mb3JtLWNoYW5nZScsIHRoaXMub25GaWVsZENoYW5nZSk7XHJcbiAgfVxyXG4gIGdldFJ1bGVzKCkge1xyXG4gICAgbGV0IGZvcm1SdWxlcyA9IHRoaXMuZm9ybS5ydWxlcztcclxuICAgIGNvbnN0IHNlbGZSdWxlcyA9IHRoaXMucnVsZXM7XHJcblxyXG4gICAgZm9ybVJ1bGVzID0gZm9ybVJ1bGVzID8gZm9ybVJ1bGVzW3RoaXMucHJvcF0gOiBbXTtcclxuXHJcbiAgICByZXR1cm4gKFtdIGFzIGFueSkuY29uY2F0KHNlbGZSdWxlcyB8fCBmb3JtUnVsZXMgfHwgW10pO1xyXG4gIH1cclxuICBnZXRGaWx0ZXJlZFJ1bGUodHJpZ2dlcikge1xyXG4gICAgY29uc3QgcnVsZXMgPSB0aGlzLmdldFJ1bGVzKCk7XHJcblxyXG4gICAgcmV0dXJuIHJ1bGVzLmZpbHRlcigocnVsZSkgPT4gIXJ1bGUudHJpZ2dlciB8fCBydWxlLnRyaWdnZXIuaW5kZXhPZih0cmlnZ2VyKSAhPT0gLTEpO1xyXG4gIH1cclxuICB2YWxpZGF0ZSh0cmlnZ2VyLCBjYWxsYmFjayA9IGZ1bmN0aW9uKG1zZz86IHN0cmluZykge30pIHtcclxuICAgIGxldCBydWxlcyA9IHRoaXMuZ2V0RmlsdGVyZWRSdWxlKHRyaWdnZXIpO1xyXG4gICAgaWYgKCFydWxlcyB8fCBydWxlcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgaWYgKCF0aGlzLnJlcXVpcmVkKSB7XHJcbiAgICAgICAgY2FsbGJhY2soKTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBydWxlcyA9IFt7IHJlcXVpcmVkOiB0cnVlIH1dO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy52YWxpZGF0ZVN0YXRlID0gJ3ZhbGlkYXRpbmcnO1xyXG5cclxuICAgIGxldCBkZXNjcmlwdG9yID0ge307XHJcbiAgICBkZXNjcmlwdG9yW3RoaXMucHJvcF0gPSBydWxlcztcclxuXHJcbiAgICBjb25zdCB2YWxpZGF0b3IgPSBuZXcgQXN5bmNWYWxpZGF0b3IoZGVzY3JpcHRvcik7XHJcbiAgICBsZXQgbW9kZWwgPSB7fTtcclxuXHJcbiAgICBtb2RlbFt0aGlzLnByb3BdID0gdGhpcy5maWVsZFZhbHVlO1xyXG5cclxuICAgIHZhbGlkYXRvci52YWxpZGF0ZShtb2RlbCwgeyBmaXJzdEZpZWxkczogdHJ1ZSB9LCAoZXJyb3JzKSA9PiB7XHJcbiAgICAgIHRoaXMudmFsaWRhdGVTdGF0ZSA9ICFlcnJvcnMgPyAnc3VjY2VzcycgOiAnZXJyb3InO1xyXG4gICAgICB0aGlzLnZhbGlkYXRlTWVzc2FnZSA9IGVycm9ycyA/IGVycm9yc1swXS5tZXNzYWdlIDogJyc7XHJcblxyXG4gICAgICBjYWxsYmFjayh0aGlzLnZhbGlkYXRlTWVzc2FnZSk7XHJcbiAgICB9KTtcclxuICAgIHRoaXMudmFsaWRhdGVEaXNhYmxlZCA9IGZhbHNlO1xyXG4gIH1cclxuICByZXNldEZpZWxkKCkge1xyXG4gICAgdGhpcy52YWxpZGF0ZVN0YXRlID0gJyc7XHJcbiAgICB0aGlzLnZhbGlkYXRlTWVzc2FnZSA9ICcnO1xyXG5cclxuICAgIGxldCBtb2RlbCA9IHRoaXMuZm9ybS5tb2RlbDtcclxuICAgIGxldCB2YWx1ZSA9IHRoaXMuZmllbGRWYWx1ZTtcclxuICAgIGxldCBwYXRoID0gdGhpcy5wcm9wO1xyXG4gICAgaWYgKHBhdGguaW5kZXhPZignOicpICE9PSAtMSkge1xyXG4gICAgICBwYXRoID0gcGF0aC5yZXBsYWNlKC86LywgJy4nKTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgcHJvcCA9IGdldFByb3BCeVBhdGgobW9kZWwsIHBhdGgpO1xyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgIHRoaXMudmFsaWRhdGVEaXNhYmxlZCA9IHRydWU7XHJcbiAgICAgIHByb3Aub1twcm9wLmtdID0gW10uY29uY2F0KHRoaXMuaW5pdGlhbFZhbHVlKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMudmFsaWRhdGVEaXNhYmxlZCA9IHRydWU7XHJcbiAgICAgIHByb3Aub1twcm9wLmtdID0gdGhpcy5pbml0aWFsVmFsdWU7XHJcbiAgICB9XHJcbiAgfVxyXG4gIG9uRmllbGRCbHVyKCkge1xyXG4gICAgdGhpcy52YWxpZGF0ZSgnYmx1cicpO1xyXG4gIH1cclxuICBvbkZpZWxkQ2hhbmdlKCkge1xyXG4gICAgaWYgKHRoaXMudmFsaWRhdGVEaXNhYmxlZCkge1xyXG4gICAgICB0aGlzLnZhbGlkYXRlRGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMudmFsaWRhdGUoJ2NoYW5nZScpO1xyXG4gIH1cclxuXHJcbiAgbW91bnRlZCgpIHtcclxuICAgIGlmICh0aGlzLnByb3ApIHtcclxuICAgICAgICB0aGlzLmRpc3BhdGNoKCdYYkZvcm0nLCAnb24tZm9ybS1pdGVtLWFkZCcsIHRoaXMpO1xyXG5cclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ2luaXRpYWxWYWx1ZScsIHtcclxuICAgICAgICAgICAgdmFsdWU6IHRoaXMuZmllbGRWYWx1ZVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLnNldFJ1bGVzKCk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIGJlZm9yZURlc3Ryb3kgKCkge1xyXG4gICAgICB0aGlzLmRpc3BhdGNoKCdYYkZvcm0nLCAnb24tZm9ybS1pdGVtLXJlbW92ZScsIHRoaXMpO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy90cy1sb2FkZXIvaW5kZXguanM/P3JlZi0tMC0xIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4veGItZm9ybS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9dHMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3RzLWxvYWRlci9pbmRleC5qcz8/cmVmLS0wLTEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi94Yi1mb3JtLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz10cyZcIiIsIlxuXG5cblxuXHJcbmltcG9ydCB7IENvbXBvbmVudCwgUHJvcCwgVnVlLCBQcm92aWRlLCBXYXRjaCB9IGZyb20gXCJ2dWUtcHJvcGVydHktZGVjb3JhdG9yXCI7XHJcblxyXG5jb25zdCBwcmVmaXhDbHMgPSAneGJ1aS1mb3JtJztcclxuXHJcbkBDb21wb25lbnQoeyBuYW1lOiAnWGJGb3JtJyB9KVxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBYYkZvcm0gZXh0ZW5kcyBWdWUge1xyXG4gIEBQcm9wKE9iamVjdCkgbW9kZWwhOiBvYmplY3RcclxuICBAUHJvcChPYmplY3QpIHJ1bGVzITogb2JqZWN0XHJcbiAgQFByb3AoTnVtYmVyKSBsYWJlbFdpZHRoITogbnVtYmVyXHJcbiAgQFByb3Aoe1xyXG4gICAgdHlwZTogU3RyaW5nLFxyXG4gICAgdmFsaWRhdG9yKHZhbHVlKSB7XHJcbiAgICAgIHJldHVybiBbJ2xlZnQnLCAncmlnaHQnLCAndG9wJ10uaW5jbHVkZXModmFsdWUpXHJcbiAgICB9LFxyXG4gICAgZGVmYXVsdDogJ3JpZ2h0J1xyXG4gIH0pIGxhYmVsUG9zaXRpb24hOiBzdHJpbmdcclxuICBAUHJvcCh7IHR5cGU6Qm9vbGVhbiwgZGVmYXVsdDogdHJ1ZSB9KSBpbmxpbmUhOiBib29sZWFuXHJcbiAgQFByb3AoeyB0eXBlOiBCb29sZWFuLCBkZWZhdWx0OiB0cnVlIH0pIHNob3dNZXNzYWdlITogYm9vbGVhblxyXG4gIEBQcm9wKHtcclxuICAgIHR5cGU6IFN0cmluZyxcclxuICAgIHZhbGlkYXRvcih2YWx1ZSkge1xyXG4gICAgICByZXR1cm4gWydvbicsICdvZmYnXS5pbmNsdWRlcyh2YWx1ZSk7XHJcbiAgICB9LFxyXG4gICAgZGVmYXVsdDogJ29mZidcclxuICB9KSBhdXRvY29tcGxldGU6IHN0cmluZyA9ICdvZmYnXHJcblxyXG4gIEBQcm92aWRlKCkgZm9ybSA9IHRoaXNcclxuXHJcbiAgZmllbGRzOiBhbnlbXSA9IFtdXHJcblxyXG4gIGdldCBjbGFzc2VzKCkge1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAgYCR7cHJlZml4Q2xzfWAsXHJcbiAgICAgIGAke3ByZWZpeENsc30tbGFiZWwtJHt0aGlzLmxhYmVsUG9zaXRpb259YCxcclxuICAgICAge1xyXG4gICAgICAgIFtgJHtwcmVmaXhDbHN9LWlubGluZWBdOiB0aGlzLmlubGluZVxyXG4gICAgICB9XHJcbiAgICBdXHJcbiAgfVxyXG5cclxuICBjcmVhdGVkKCkge1xyXG4gICAgdGhpcy4kb24oJ29uLWZvcm0taXRlbS1hZGQnLCBmaWVsZCA9PiB7XHJcbiAgICAgIGlmKGZpZWxkKSB7XHJcbiAgICAgICAgdGhpcy5maWVsZHMucHVzaChmaWVsZCk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfSk7XHJcbiAgICB0aGlzLiRvbignb24tZm9ybS1pdGVtLXJlbW92ZScsIGZpZWxkID0+IHtcclxuICAgICAgaWYgKGZpZWxkLnByb3ApIHtcclxuICAgICAgICB0aGlzLmZpZWxkcy5zcGxpY2UodGhpcy5maWVsZHMuaW5kZXhPZihmaWVsZCksIDEpO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcmVzZXRGaWVsZHMoKSB7XHJcbiAgICB0aGlzLmZpZWxkcy5mb3JFYWNoKGZpZWxkID0+IHtcclxuICAgICAgICBmaWVsZC5yZXNldEZlaWxkKCk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHZhbGlkYXRlKGNhbGxiYWNrKSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XHJcbiAgICAgICAgbGV0IHZhbGlkYXRlcyA9IHRoaXMuZmllbGRzLm1hcChmID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlcyA9PiB7XHJcbiAgICAgICAgICAgICAgICBmLnZhbGlkYXRlKCcnLCAoZXJyLCBmKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShlcnIpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFByb21pc2UuYWxsKHZhbGlkYXRlcykudGhlbihyZXN1bHQgPT4ge1xyXG4gICAgICAgICAgICBsZXQgdmFsaWQgPSByZXN1bHQuZXZlcnkoeCA9PiAhIXgpO1xyXG4gICAgICAgICAgICByZXNvbHZlKHZhbGlkKTtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2sodmFsaWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHZhbGlkYXRlRmllbGQocHJvcCwgY2IpIHtcclxuICAgIGNvbnN0IGZpZWxkID0gdGhpcy5maWVsZHMuZmlsdGVyKGZpZWxkID0+IGZpZWxkLnByb3AgPT09IHByb3ApWzBdO1xyXG4gICAgaWYgKCFmaWVsZCkgeyB0aHJvdyBuZXcgRXJyb3IoJ1t4YlVJIHdhcm5dOiBtdXN0IGNhbGwgdmFsaWRhdGVGaWVsZCB3aXRoIHZhbGlkIHByb3Agc3RyaW5nIScpOyB9XHJcblxyXG4gICAgZmllbGQudmFsaWRhdGUoJycsIGNiKTtcclxuICB9XHJcblxyXG4gIEBXYXRjaCgncnVsZXMnKVxyXG4gIG9uUnVsZXNDaGFuZ2VkKHZhbCkge1xyXG4gICAgdGhpcy52YWxpZGF0ZSgoKSA9PiB7fSk7XHJcbiAgfVxyXG5cclxufVxyXG4iLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy90cy1sb2FkZXIvaW5kZXguanM/P3JlZi0tMC0xIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4veGItaWNvbi52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9dHMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3RzLWxvYWRlci9pbmRleC5qcz8/cmVmLS0wLTEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi94Yi1pY29uLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz10cyZcIiIsIlxuXG5cblxuXG5pbXBvcnQgeyBDb21wb25lbnQsIFByb3AsIFZ1ZSB9IGZyb20gXCJ2dWUtcHJvcGVydHktZGVjb3JhdG9yXCI7XG5jb25zdCBwcmVmaXhDbHMgPSBcInhiLWljb25cIjtcbkBDb21wb25lbnRcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFhiSWNvbiBleHRlbmRzIFZ1ZSB7XG4gIEBQcm9wKHsgdHlwZTogU3RyaW5nIH0pXG4gIHR5cGUhOiBzdHJpbmc7XG5cbiAgQFByb3AoKVxuICBzaXplITogYW55O1xuXG4gIEBQcm9wKHsgdHlwZTogU3RyaW5nIH0pXG4gIGNvbG9yITogc3RyaW5nO1xuXG4gIGdldCBjbGFzc2VzKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGAke3ByZWZpeENsc30tJHt0aGlzLnR5cGV9YDtcbiAgfVxuXG4gIGdldCBzdHlsZXMoKTogb2JqZWN0IHtcbiAgICBjb25zdCBzdHlsZSA9IHt9O1xuICAgIGNvbnN0IHJlZyA9IC9eWzAtOV0qJC87XG4gICAgaWYgKHJlZy50ZXN0KHRoaXMuc2l6ZSkpIHtcbiAgICAgIHN0eWxlW1wiZm9udC1zaXplXCJdID0gYCR7dGhpcy5zaXplfXB4YDtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGVbXCJmb250LXNpemVcIl0gPSBgJHt0aGlzLnNpemV9YDtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5jb2xvcikge1xuICAgICAgc3R5bGVbXCJjb2xvclwiXSA9IGAke3RoaXMuY29sb3J9YDtcbiAgICB9XG5cbiAgICByZXR1cm4gc3R5bGU7XG4gIH1cbn1cbiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3RzLWxvYWRlci9pbmRleC5qcz8/cmVmLS0wLTEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi94Yi1pbnB1dC1udW1iZXIudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy90cy1sb2FkZXIvaW5kZXguanM/P3JlZi0tMC0xIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4veGItaW5wdXQtbnVtYmVyLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz10cyZcIiIsIlxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxyXG5pbXBvcnQgeyBDb21wb25lbnQsIFByb3AsIFZ1ZSB9IGZyb20gXCJ2dWUtcHJvcGVydHktZGVjb3JhdG9yXCI7XHJcbmNvbnN0IHByZWZpeENscyA9IFwieGJ1aS1pbnB1dC1udW1iZXJcIjtcclxuXHJcbkBDb21wb25lbnRcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgWGJJbnB1dE51bWJlciBleHRlbmRzIFZ1ZSB7XHJcbiAgLy8g5oSf5Y+55Y+35piv6Z2ebnVsbOWSjOmdnnVuZGVmaW5lZOeahOexu+Wei+aWreiogO+8jOaJgOS7peihqOekuuWvueivpeWxnuaAp+i/m+ihjOmdnuepuuaWreiogOOAglxyXG4gIC8qKiDliJ3lp4vlgLwgKi9cclxuICBAUHJvcCh7IGRlZmF1bHQ6IDEgfSlcclxuICBmaXJzdE51bSE6IG51bWJlcjtcclxuXHJcbiAgLyoqIOacgOWwj+WAvCAqL1xyXG4gIEBQcm9wKHsgZGVmYXVsdDogMCB9KVxyXG4gIG1pbiE6IG51bWJlcjtcclxuXHJcbiAgLyoqIOacgOWkp+WAvCAqL1xyXG4gIC8qKiDorr7lrprov5nkuKrpu5jorqTlgLzvvIzmmK/lm6DkuLrlpKfkuo7ov5nkuKrlgLzku6XlkI7vvIzlsLHkvJrku6Xnp5HlraborqHlhaXms5XnmoTmlrnlvI/lsZXnpLrlnKhpbnB1dOi+k+WFpeahhuWGhe+8jOWxleekuuWHuuadpeeahOaVsOaNruWvueeUqOaIt+W5tuS4jeWPi+WlvSAqL1xyXG4gIEBQcm9wKHsgZGVmYXVsdDogOTk5OTk5OTk5OTk5OTk5IH0pXHJcbiAgbWF4ITogbnVtYmVyO1xyXG5cclxuICAvKiog5q2l6L+bICovXHJcbiAgQFByb3AoeyBkZWZhdWx0OiAxIH0pXHJcbiAgc3RlcCE6IG51bWJlcjtcclxuXHJcbiAgLyoqIOato+WImeihqOi+vuW8jyAqL1xyXG4gIEBQcm9wKClcclxuICByZWdFeHAhOiBzdHJpbmc7XHJcblxyXG4gIC8qKiBpbnB1dOagt+W8jyAqL1xyXG4gIEBQcm9wKClcclxuICBpbnB1dFN0eWxlITogb2JqZWN0O1xyXG5cclxuICAvKiog56aB55SoICovXHJcbiAgQFByb3AoKVxyXG4gIGRpc2FibGVkITogYm9vbGVhbjtcclxuXHJcbiAgLyoqIOWtkOe7hOS7tuWGheeahOWIneWni+WAvCznlLHkuo5maXJzdE51beaYr+WtmOWcqOS6jnByb3Bz55qE77yM5aaC5p6c6YCa6L+HcHJvcHPkvKDlhaXnmoTlgLzvvIznm7TmjqXkv67mlLnnu4Tku7blhoXlrrnvvIx2dWUy5piv5Lya5oql6ZSZ55qEICovXHJcbiAgLyoqIOino+WGs+aWueazle+8mjHjgIHlj4zlkJHnu5HlrprmlbDmja4gMuOAgeWwhmZpcnN0TnVt6LWL5YC857uZbnVt77yM6ICMbnVt5L2c5Li657uE5Lu255qE5Y6f55Sf5Y+C5pWw77yM5a2Y5Zyo5LqO6aG16Z2i5LitICovXHJcbiAgbnVtOiBudW1iZXIgPSB0aGlzLmZpcnN0TnVtO1xyXG4gIC8qKiDlrZDnu4Tku7blhoXlsZXnpLrnmoTmlbDlgLzvvIzlpoLmnpzovpPlhaXnmoTmlbDlrZfkuI3nrKblkIjmraPliJnooajovr7lvI/vvIzliJnlsZXnpLrljp/mnaXnmoTmlbDlgLwgKi9cclxuICBzaG93TnVtOiBudW1iZXIgPSAwO1xyXG5cclxuICAvLyDlop7liqDmraXov5tcclxuICBhZGRWYWx1ZShzdGF0ZSkge1xyXG4gICAgaWYgKCFzdGF0ZSkge1xyXG4gICAgICAvLyDlpoLmnpzovpPlhaXmoYblhoXmsqHmnInlgLzvvIzlsLHpu5jorqTkuLowXHJcbiAgICAgIHRoaXMubnVtID0gdGhpcy5udW0gPyBwYXJzZUludChTdHJpbmcodGhpcy5udW0pKSA6IDA7XHJcbiAgICAgIC8vIGlucHV0TnVt5L2c5Li65pqC5pe25a2Y5Zyo55qE5pWw5o2uXHJcbiAgICAgIGxldCBpbnB1dE51bSA9IDA7XHJcbiAgICAgIHRoaXMuc2hvd051bSA9IHRoaXMubnVtO1xyXG4gICAgICBpbnB1dE51bSA9IHRoaXMubnVtID09IHRoaXMubWF4ID8gdGhpcy5tYXggOiB0aGlzLm51bSArIHBhcnNlSW50KFN0cmluZyh0aGlzLnN0ZXApKTtcclxuICAgICAgLy8g6I635Y+W5pWw5o2u5ZCO77yM5Y6f5p2l55qE5pWw5o2u6L+b6KGM5q2j5YiZ5Yik5patXHJcbiAgICAgIHRoaXMuaW5wdXRDaGFuZ2UoaW5wdXROdW0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8g5YeP5bCR5q2l6L+bXHJcbiAgc3VidHJhY3RWYWx1ZShzdGF0ZSkge1xyXG4gICAgaWYgKCFzdGF0ZSkge1xyXG4gICAgICAvLyDlpoLmnpzovpPlhaXmoYblhoXmsqHmnInlgLzvvIzlsLHpu5jorqTkuLowXHJcbiAgICAgIHRoaXMubnVtID0gdGhpcy5udW0gPyBwYXJzZUludChTdHJpbmcodGhpcy5udW0pKSA6IDA7XHJcbiAgICAgIC8vIGlucHV0TnVt5L2c5Li65pqC5pe25a2Y5Zyo55qE5pWw5o2uXHJcbiAgICAgIGxldCBpbnB1dE51bSA9IDA7XHJcbiAgICAgIHRoaXMuc2hvd051bSA9IHRoaXMubnVtO1xyXG4gICAgICBpbnB1dE51bSA9IHRoaXMubnVtID09IHRoaXMubWluID8gdGhpcy5taW4gOiB0aGlzLm51bSAtIHBhcnNlSW50KFN0cmluZyh0aGlzLnN0ZXApKTtcclxuICAgICAgLy8g6I635Y+W5pWw5o2u5ZCO77yM5Y6f5p2l55qE5pWw5o2u6L+b6KGM5q2j5YiZ5Yik5patXHJcbiAgICAgIHRoaXMuaW5wdXRDaGFuZ2UoaW5wdXROdW0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8g5q2j5YiZ5aSE55CGXHJcbiAgaW5wdXRDaGFuZ2UodmFsKSB7XHJcbiAgICAvLyDlj6rlhYHorrjovpPlhaXnuq/mlbDlrZdcclxuICAgIGxldCByZWdOdW0gPSAvXigtKT9bMC05XSokLztcclxuICAgIC8vIOWtmOWcqOato+WImVxyXG4gICAgaWYgKHRoaXMucmVnRXhwKSB7XHJcbiAgICAgIGlmIChuZXcgUmVnRXhwKHRoaXMucmVnRXhwKS50ZXN0KHZhbCkgJiYgbmV3IFJlZ0V4cChyZWdOdW0pLnRlc3QodmFsKSkge1xyXG4gICAgICAgIGlmICh2YWwgPiB0aGlzLm1heCB8fCB2YWwgPCB0aGlzLm1pbikge1xyXG4gICAgICAgICAgdGhpcy5udW0gPSB0aGlzLnNob3dOdW07XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHRoaXMubnVtID0gdmFsO1xyXG4gICAgICAgICAgdGhpcy5zaG93TnVtID0gdmFsO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLm51bSA9IHRoaXMuc2hvd051bTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaWYgKG5ldyBSZWdFeHAocmVnTnVtKS50ZXN0KHZhbCkpIHtcclxuICAgICAgICAvLyDmlbDlrZdcclxuICAgICAgICBpZiAodmFsID4gdGhpcy5tYXggfHwgdmFsIDwgdGhpcy5taW4pIHtcclxuICAgICAgICAgIHRoaXMubnVtID0gdGhpcy5zaG93TnVtO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB0aGlzLm51bSA9IHZhbDtcclxuICAgICAgICAgIHRoaXMuc2hvd051bSA9IHZhbDtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy8g6Z2e5pWw5a2XXHJcbiAgICAgICAgdGhpcy5udW0gPSB0aGlzLnNob3dOdW07XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHRoaXMuY2hhbmdlSW5wdXQodGhpcy5udW0pO1xyXG4gIH1cclxuXHJcbiAgZm9jdXMoKSB7XHJcbiAgICAvLyDlhYnmoIfngrnliLDovpPlhaXmoYbnmoTml7blgJnvvIzlsIbljp/mnInnmoRudW3lhYjlrZjlgqjkuIvmnaXvvIzku6XpmLLnlKjmiLfovpPlhaXpnZ7mlbDlrZdcclxuICAgIHRoaXMuc2hvd051bSA9IHRoaXMubnVtO1xyXG4gIH1cclxuXHJcbiAgLy8g5YWJ5qCH56a75byAaW5wdXTlkI7op6blj5Hnm7jlhbPlh73mlbBcclxuICBjaGFuZ2VJbnB1dChudW0pIHtcclxuICAgIC8vIGNvbnNvbGUubG9nKG51bSk7XHJcbiAgfVxyXG5cclxuICAvLyDlsIbovpPlhaXmoYblhoXnmoTmlbDlgLzkv67mlLnkuLrigJzmlbDlrZfigJ3nsbvlnotcclxuICBjaGFuZ2VOdW1UeXBlKG51bSkge1xyXG4gICAgbnVtID0gcGFyc2VJbnQoU3RyaW5nKG51bSkpO1xyXG4gIH1cclxuXHJcbiAgLy8g5qC35byP5aSE55CGXHJcbiAgZ2V0IHdob2xlQ2xhc3NlcygpIHtcclxuICAgIHJldHVybiBbYCR7cHJlZml4Q2xzfS13aG9sZS1kaXZgXTtcclxuICB9XHJcblxyXG4gIGdldCBpbnB1dERpdkNsYXNzZXMoKSB7XHJcbiAgICByZXR1cm4gW2Ake3ByZWZpeENsc30taW5wdXQtZGl2YF07XHJcbiAgfVxyXG5cclxuICBnZXQgaW5wdXRDbGFzc2VzKCkge1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAgYCR7cHJlZml4Q2xzfS1pbnB1dGAsXHJcbiAgICAgIHtcclxuICAgICAgICBbYCR7cHJlZml4Q2xzfS1pbnB1dC1kaXNhYmxlZGBdOiB0aGlzLmRpc2FibGVkLFxyXG4gICAgICB9LFxyXG4gICAgXTtcclxuICB9XHJcblxyXG4gIGdldCBhcnJvd0RpdkNsYXNzZXMoKSB7XHJcbiAgICByZXR1cm4gW2Ake3ByZWZpeENsc30tYXJyb3ctZGl2YF07XHJcbiAgfVxyXG5cclxuICBnZXQgYXJyb3dEb3duQ2xhc3NlcygpIHtcclxuICAgIHJldHVybiBbXHJcbiAgICAgIGAke3ByZWZpeENsc30tYXJyb3dgLFxyXG4gICAgICBgJHtwcmVmaXhDbHN9LWFycm93LWRvd25gLFxyXG4gICAgICB7XHJcbiAgICAgICAgW2Ake3ByZWZpeENsc30tYXJyb3ctZGlzYWJsZWRgXTogdGhpcy5kaXNhYmxlZCxcclxuICAgICAgfSxcclxuICAgIF07XHJcbiAgfVxyXG4gIGdldCBhcnJvd0NsYXNzZXMoKSB7XHJcbiAgICByZXR1cm4gW1xyXG4gICAgICBgJHtwcmVmaXhDbHN9LWFycm93YCxcclxuICAgICAge1xyXG4gICAgICAgIFtgJHtwcmVmaXhDbHN9LWFycm93LWRpc2FibGVkYF06IHRoaXMuZGlzYWJsZWQsXHJcbiAgICAgIH0sXHJcbiAgICBdO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy90cy1sb2FkZXIvaW5kZXguanM/P3JlZi0tMC0xIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4veGItbG9hZGluZy52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9dHMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3RzLWxvYWRlci9pbmRleC5qcz8/cmVmLS0wLTEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi94Yi1sb2FkaW5nLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz10cyZcIiIsIlxuXG5cblxuXG5cblxuXG5cblxuXHJcbmltcG9ydCB7IENvbXBvbmVudCwgUHJvcCwgV2F0Y2gsIE1peGlucywgVnVlIH0gZnJvbSBcInZ1ZS1wcm9wZXJ0eS1kZWNvcmF0b3JcIjtcclxuaW1wb3J0IExvY2FsZSBmcm9tIFwiLi4vLi4vLi4vc3JjL21peGlucy9sb2NhbGVcIjtcclxuaW1wb3J0IFhiSWNvbiBmcm9tIFwiLi4vLi4veGItaWNvblwiO1xyXG5jb25zdCBwcmVmaXhDbHMgPSBcInhidWktbG9hZGluZ1wiO1xyXG5AQ29tcG9uZW50KHtcclxuICBjb21wb25lbnRzOiB7XHJcbiAgICBYYkljb25cclxuICAgfVxyXG59KVxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBYYkxvYWRpbmcgZXh0ZW5kcyBNaXhpbnMoTG9jYWxlKSB7XHJcbiAgcHJlZml4Q2xzOiBzdHJpbmcgPSBwcmVmaXhDbHM7XHJcbiAgLy8g5piv5ZCm5pi+56S6bG9hZGluZ1xyXG4gIEBQcm9wKHt0eXBlOiBCb29sZWFufSlcclxuICBsb2FkU2hvdyE6IGJvb2xlYW47XHJcblxyXG4gIC8vIGxvYWRpbmflm77moIfpopzoibJcclxuICBAUHJvcCh7ZGVmYXVsdDogJycsIHR5cGU6IFN0cmluZyB9KVxyXG4gIGxvYWRDb2xvcj86IHN0cmluZztcclxuXHJcbiAgLy8gbG9hZGluZ+Wbvuagh+WwuuWvuFxyXG4gIEBQcm9wKHsgZGVmYXVsdDogXCIyMHB4XCIsIHR5cGU6IFN0cmluZyB9KVxyXG4gIGxvYWRTaXplPzogc3RyaW5nO1xyXG4gIC8vIOaYr+WQpuaYvuekuuaWh+Wtl1xyXG4gIEBQcm9wKHtkZWZhdWx0OiB0cnVlLCB0eXBlOiBCb29sZWFufSlcclxuICBzaG93VHh0PzogYm9vbGVhbjtcclxuXHJcbiAgLy8gbG9hZGluZ+aWh+Wtl+aPj+i/sFxyXG4gIEBQcm9wKHtkZWZhdWx0OiAnJywgdHlwZTogQm9vbGVhbn0pXHJcbmxvYWRUeHQ/OiBzdHJpbmc7XHJcblxyXG4gIC8vIOiHquWumuS5ieagt+W8j1xyXG4gIEBQcm9wKHsgZGVmYXVsdDogXCJmaXhlZFwiICwgdHlwZTogU3RyaW5nfSlcclxuICBjdXN0b21DbGFzcz86IHN0cmluZztcclxuXHJcbiAgIGdldCBsb2NhbGVMb2FkVGV4dCgpIHtcclxuICAgIGlmICghdGhpcy5sb2FkVHh0IHx8IHRoaXMubG9hZFR4dC5sZW5ndGg9PTApIHtcclxuICAgICAgcmV0dXJuIHRoaXMudChcInhiLmxvYWRpbmcubG9hZFR4dFwiKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmxvYWRUeHQ7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3RzLWxvYWRlci9pbmRleC5qcz8/cmVmLS0wLTEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi94Yi1tZXNzYWdlLXRpcHMudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy90cy1sb2FkZXIvaW5kZXguanM/P3JlZi0tMC0xIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4veGItbWVzc2FnZS10aXBzLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz10cyZcIiIsIlxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cclxuaW1wb3J0IHsgQ29tcG9uZW50LCBQcm9wLCBWdWUsIFByb3ZpZGUgfSBmcm9tIFwidnVlLXByb3BlcnR5LWRlY29yYXRvclwiO1xyXG5cclxuQENvbXBvbmVudFxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBYYk1lc3NhZ2VUaXBzIGV4dGVuZHMgVnVlIHtcclxuICBzaG93OiBCb29sZWFuID0gZmFsc2U7XHJcbiAgdGV4dDogU3RyaW5nID0gXCJcIjtcclxuICB0eXBlOiBTdHJpbmcgPSBcIlwiO1xyXG4gIGNsb3NhYmxlOiBCb29sZWFuID0gZmFsc2U7XHJcbiAgYWZ0ZXJMZWF2ZSgpIHtcclxuICAgIHJldHVybiB0aGlzLiRlbWl0KFwiYWZ0ZXJMZWF2ZVwiKTtcclxuICB9XHJcbiAgY2xvc2VDbGljaygpIHtcclxuICAgIHJldHVybiB0aGlzLiRlbWl0KFwiY2xvc2VcIik7XHJcbiAgfVxyXG4gIG1ldGhvZHMoKSB7XHJcbiAgICB0aGlzLmFmdGVyTGVhdmUoKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdHMtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTAtMSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL3hiLXBvcHRpcC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9dHMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3RzLWxvYWRlci9pbmRleC5qcz8/cmVmLS0wLTEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi94Yi1wb3B0aXAudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiIiwiXG5cblxyXG5pbXBvcnQgeyBDb21wb25lbnQsIFByb3AsIFZ1ZSB9IGZyb20gXCJ2dWUtcHJvcGVydHktZGVjb3JhdG9yXCI7XHJcblxyXG5AQ29tcG9uZW50KHsgbmFtZTogXCJYYlBvcHRpcFwiIH0pXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFhiUG9wdGlwIGV4dGVuZHMgVnVlIHt9XHJcbiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3RzLWxvYWRlci9pbmRleC5qcz8/cmVmLS0wLTEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi94Yi1wb3B1cC13aW5kb3cudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy90cy1sb2FkZXIvaW5kZXguanM/P3JlZi0tMC0xIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4veGItcG9wdXAtd2luZG93LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz10cyZcIiIsIlxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXHJcbmltcG9ydCB7IENvbXBvbmVudCwgUHJvcCwgVnVlLCBNaXhpbnMsIFdhdGNoIH0gZnJvbSBcInZ1ZS1wcm9wZXJ0eS1kZWNvcmF0b3JcIjtcclxuaW1wb3J0IFhiSWNvbiBmcm9tIFwiLi4vLi4veGItaWNvblwiO1xyXG5pbXBvcnQgWGJCdXR0b24gZnJvbSBcIi4uLy4uL3hiLWJ1dHRvblwiO1xyXG5pbXBvcnQgTG9jYWxlIGZyb20gXCIuLi8uLi8uLi9zcmMvbWl4aW5zL2xvY2FsZVwiO1xyXG5pbXBvcnQgRW1taXRlciBmcm9tIFwic3JjL21peGlucy9lbWl0dGVyXCI7XHJcbmltcG9ydCB7IGRlYnVnIH0gZnJvbSBcInV0aWxcIjtcclxuaW1wb3J0IHNjcm9sbGJhciBmcm9tIFwiLi9zY3JvbGxiYXJcIjtcclxuY29uc3QgcHJlZml4Q2xzID0gXCJ4YnVpLXBvcHVwLXdpbmRvd1wiO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgbmFtZTogXCJYYlBvcHVwV2luZG93XCIsXHJcbiAgbWl4aW5zOiBbRW1taXRlciwgTG9jYWxlLCBzY3JvbGxiYXJdLFxyXG4gIGNvbXBvbmVudHM6IHtcclxuICAgIFhiSWNvbixcclxuICAgIFhiQnV0dG9uLFxyXG4gIH0sXHJcbn0pXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFhiUG9wdXBXaW5kb3cgZXh0ZW5kcyBWdWUge1xyXG4gIC8vIHZhbHVlIOWSjG5nLW1vZGVs57uR5a6a5LiA6LW377yM6YCa6L+H6L+Z5Liq5YC855qE5a2Y5Zyo5p2l6L+b6KGM5by55qGG55qE5pi+56S6XHJcbiAgQFByb3AoeyB0eXBlOiBCb29sZWFuLCBkZWZhdWx0OiBmYWxzZSB9KVxyXG4gIHZhbHVlITogYm9vbGVhbjtcclxuXHJcbiAgLy8g54K55Ye76YGu572p5bGC5piv5ZCm5Y+v5Lul5YWz6Zet5by55qGGXHJcbiAgQFByb3AoeyB0eXBlOiBCb29sZWFuLCBkZWZhdWx0OiB0cnVlIH0pXHJcbiAgbWFza0Nsb3NhYmxlITogYm9vbGVhbjtcclxuXHJcbiAgLy8g5o6n5Yi25Y+z5LiK6KeS5YWz6Zet5oyJ6ZKu5piv5ZCm5pi+56S6XHJcbiAgQFByb3AoeyB0eXBlOiBCb29sZWFuLCBkZWZhdWx0OiB0cnVlIH0pXHJcbiAgY2xvc2FibGUhOiBib29sZWFuO1xyXG5cclxuICAvLyDlvLnmoYZ0aXRsZVxyXG4gIEBQcm9wKHsgdHlwZTogU3RyaW5nIH0pXHJcbiAgdGl0bGUhOiBzdHJpbmc7XHJcblxyXG4gIC8vIOWuveW6plxyXG4gIEBQcm9wKHsgdHlwZTogW051bWJlciwgU3RyaW5nXSwgZGVmYXVsdDogNTIwIH0pXHJcbiAgd2lkdGghOiBbbnVtYmVyLCBzdHJpbmddO1xyXG5cclxuICAvLyDnoa7lrprmjInpkq7nmoTmlofmoYhcclxuICBAUHJvcCh7IHR5cGU6IFN0cmluZyB9KVxyXG4gIG9rVGV4dCE6IHN0cmluZztcclxuXHJcbiAgLy8g5Y+W5raI5oyJ6ZKu55qE5paH5qGIXHJcbiAgQFByb3AoeyB0eXBlOiBTdHJpbmcgfSlcclxuICBjYW5jZWxUZXh0ITogc3RyaW5nO1xyXG5cclxuICAvLyDlpJbpg6jkvKDmnaXnmoTmoLflvI9cclxuICBAUHJvcCh7IHR5cGU6IE9iamVjdCB9KVxyXG4gIHN0eWxlcyE6IG9iamVjdDtcclxuXHJcbiAgLy8g5aSW6YOo5Lyg5p2l55qE5qC35byP57G75ZCNXHJcbiAgQFByb3AoeyB0eXBlOiBTdHJpbmcgfSlcclxuICBjbGFzc05hbWUhOiBzdHJpbmc7XHJcblxyXG4gIC8vIOW6lemDqOaMiemSruaYr+WQpuaYvuekulxyXG4gIEBQcm9wKHsgdHlwZTogQm9vbGVhbiwgZGVmYXVsdDogZmFsc2UgfSlcclxuICBmb290ZXJIaWRlITogYm9vbGVhbjtcclxuXHJcbiAgLy8g6aG16Z2i5piv5ZCm5Y+v5Lul5rua5YqoXHJcbiAgQFByb3AoeyB0eXBlOiBCb29sZWFuLCBkZWZhdWx0OiBmYWxzZSB9KVxyXG4gIHNjcm9sbGFibGUhOiBib29sZWFuO1xyXG5cclxuICBwcmVmaXhDbHM6IHN0cmluZyA9IHByZWZpeENscztcclxuICB3cmFwU2hvdzogYm9vbGVhbiA9IGZhbHNlO1xyXG4gIHNob3dIZWFkOiBib29sZWFuID0gdHJ1ZTtcclxuICB2aXNpYmxlOiBhbnkgPSB0aGlzLnZhbHVlO1xyXG4gIHRpbWVyOiBhbnkgPSBudWxsO1xyXG5cclxuICBnZXQgbWFza0NsYXNzZXMoKSB7XHJcbiAgICByZXR1cm4gYCR7cHJlZml4Q2xzfS1tYXNrYDtcclxuICB9XHJcblxyXG4gIGdldCB3cmFwQ2xhc3NlcygpIHtcclxuICAgIHJldHVybiBbXHJcbiAgICAgIGAke3ByZWZpeENsc30td3JhcGAsXHJcbiAgICAgIHtcclxuICAgICAgICBbYCR7cHJlZml4Q2xzfS1oaWRkZW5gXTogIXRoaXMud3JhcFNob3csXHJcbiAgICAgICAgW2Ake3RoaXMuY2xhc3NOYW1lfWBdOiAhIXRoaXMuY2xhc3NOYW1lLFxyXG4gICAgICB9LFxyXG4gICAgXTtcclxuICB9XHJcblxyXG4gIGdldCBjbGFzc2VzKCkge1xyXG4gICAgcmV0dXJuIGAke3ByZWZpeENsc31gO1xyXG4gIH1cclxuXHJcbiAgZ2V0IG1haW5TdHlsZXMoKSB7XHJcbiAgICBsZXQgc3R5bGUgPSB7fTtcclxuXHJcbiAgICBjb25zdCB3aWR0aCA9IHBhcnNlSW50KHRoaXMud2lkdGgpO1xyXG4gICAgY29uc3Qgc3R5bGVXaWR0aCA9IHtcclxuICAgICAgd2lkdGg6IHdpZHRoIDw9IDEwMCA/IGAke3dpZHRofSVgIDogYCR7d2lkdGh9cHhgLFxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBjdXN0b21TdHlsZSA9IHRoaXMuc3R5bGVzID8gdGhpcy5zdHlsZXMgOiB7fTtcclxuXHJcbiAgICBPYmplY3QuYXNzaWduKHN0eWxlLCBzdHlsZVdpZHRoLCBjdXN0b21TdHlsZSk7XHJcblxyXG4gICAgcmV0dXJuIHN0eWxlO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGxvY2FsZU9rVGV4dCgpIHtcclxuICAgIGlmICh0aGlzLm9rVGV4dCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLnQoXCJ4Yi5wb3B1cFdpZG93Lm9rVGV4dFwiKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiB0aGlzLm9rVGV4dDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldCBsb2NhbGVDYW5jZWxUZXh0KCkge1xyXG4gICAgaWYgKHRoaXMuY2FuY2VsVGV4dCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLnQoXCJ4Yi5wb3B1cFdpZG93LmNhbmNlbFRleHRcIik7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gdGhpcy5jYW5jZWxUZXh0O1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbW91bnRlZCgpIHtcclxuICAgIGlmICh0aGlzLnZpc2libGUpIHtcclxuICAgICAgdGhpcy53cmFwU2hvdyA9IHRydWU7XHJcbiAgICB9XHJcbiAgICBsZXQgc2hvd0hlYWQgPSB0cnVlO1xyXG5cclxuICAgIGlmICh0aGlzLiRzbG90cy5oZWFkZXIgPT09IHVuZGVmaW5lZCAmJiAhdGhpcy50aXRsZSkge1xyXG4gICAgICBzaG93SGVhZCA9IGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuc2hvd0hlYWQgPSBzaG93SGVhZDtcclxuICB9XHJcblxyXG4gIGNsb3NlKCkge1xyXG4gICAgdGhpcy52aXNpYmxlID0gZmFsc2U7XHJcbiAgICB0aGlzLiRlbWl0KFwiaW5wdXRcIiwgZmFsc2UpO1xyXG4gICAgdGhpcy4kZW1pdChcIm9uLWNhbmNlbFwiKTtcclxuICB9XHJcblxyXG4gIG1hc2soKSB7XHJcbiAgICBpZiAodGhpcy5tYXNrQ2xvc2FibGUpIHtcclxuICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY2FuY2VsKCkge1xyXG4gICAgdGhpcy52aXNpYmxlID0gZmFsc2U7XHJcbiAgICB0aGlzLiRlbWl0KFwib24tY2FuY2VsXCIpO1xyXG4gIH1cclxuXHJcbiAgb2soKSB7XHJcbiAgICB0aGlzLnZpc2libGUgPSBmYWxzZTtcclxuICAgIHRoaXMuJGVtaXQoXCJvbi1va1wiKTtcclxuICB9XHJcblxyXG4gIEBXYXRjaChcInZhbHVlXCIpXHJcbiAgb25WYWx1ZUNoYW5nZWQodmFsKSB7XHJcbiAgICB0aGlzLnZpc2libGUgPSB2YWw7XHJcbiAgfVxyXG5cclxuICBAV2F0Y2goXCJ2aXNpYmxlXCIpXHJcbiAgb252aXNpYmxlQ2hhbmdlZCh2YWwpIHtcclxuICAgIGlmICh2YWwgPT09IGZhbHNlKSB7XHJcbiAgICAgIHRoaXMudGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICB0aGlzLndyYXBTaG93ID0gZmFsc2U7XHJcbiAgICAgIH0sIDMwMCk7XHJcbiAgICAgIHRoaXMucmVtb3ZlU2Nyb2xsRWZmZWN0KCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpZiAodGhpcy50aW1lcikge1xyXG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVyKTtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLndyYXBTaG93ID0gdHJ1ZTtcclxuICAgICAgaWYgKCF0aGlzLnNjcm9sbGFibGUpIHtcclxuICAgICAgICB0aGlzLmFkZFNjcm9sbEVmZmVjdCgpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBAV2F0Y2goXCJzY3JvbGxhYmxlXCIpXHJcbiAgb25TY3JvbGxhYmxlQ2hhbmdlZCh2YWwpIHtcclxuICAgIGlmICghdmFsKSB7XHJcbiAgICAgIHRoaXMuYWRkU2Nyb2xsRWZmZWN0KCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnJlbW92ZVNjcm9sbEVmZmVjdCgpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy90cy1sb2FkZXIvaW5kZXguanM/P3JlZi0tMC0xIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4veGItcmFkaW8tZ3JvdXAudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy90cy1sb2FkZXIvaW5kZXguanM/P3JlZi0tMC0xIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4veGItcmFkaW8tZ3JvdXAudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiIiwiXG5cblxuXG5cblxuXG5pbXBvcnQgeyBDb21wb25lbnQsIFByb3AsIFZ1ZSwgTWl4aW5zLCBXYXRjaCwgRW1pdCB9IGZyb20gXCJ2dWUtcHJvcGVydHktZGVjb3JhdG9yXCI7XG5pbXBvcnQgeyBmaW5kQ29tcG9uZW50c0Rvd253YXJkIH0gZnJvbSBcInNyYy91dGlscy9hc3Npc3RcIjtcbmltcG9ydCBYYlJhZGlvIGZyb20gXCIuL3hiLXJhZGlvLnZ1ZVwiO1xuaW1wb3J0IEVtaXR0ZXIgZnJvbSBcInNyYy9taXhpbnMvZW1pdHRlclwiO1xuXG5jb25zdCBwcmVmaXhDbHMgPSBcInhidWktcmFkaW8tZ3JvdXBcIjtcbmxldCBzZWVkID0gMDtcbmNvbnN0IG5vdyA9IERhdGUubm93KCk7XG5jb25zdCBnZXRVdWlkID0gKCkgPT4gYHhiUmFkaW9Hcm91cF8ke25vd31fJHtzZWVkKyt9YDtcblxuQENvbXBvbmVudCh7IG5hbWU6IFwiWGJSYWRpb0dyb3VwXCIgfSlcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFhiUmFkaW9Hcm91cCBleHRlbmRzIE1peGlucyhFbWl0dGVyKSB7XG4gIC8vIOaMh+WumuW9k+WJjemAieS4reeahOmhueebruaVsOaNruOAguWPr+S7peS9v+eUqCB2LW1vZGVsIOWPjOWQkee7keWumuaVsOaNrlxuICBAUHJvcCh7IHR5cGU6IFtTdHJpbmcsIE51bWJlcl0sIGRlZmF1bHQ6IFwiXCIgfSlcbiAgdmFsdWUhOiBbc3RyaW5nLCBudW1iZXJdO1xuXG4gIC8vIOWwuuWvuOWkp+Wwj1xuICBAUHJvcCh7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIGRlZmF1bHQ6IFwibWVkaXVtXCIsXG4gICAgdmFsaWRhdG9yKHZhbHVlKSB7XG4gICAgICByZXR1cm4gW1wic21hbGxcIiwgXCJtZWRpdW1cIiwgXCJsYXJnZVwiXS5pbmNsdWRlcyh2YWx1ZSk7XG4gICAgfSxcbiAgfSlcbiAgc2l6ZSE6IHN0cmluZztcblxuICAvLyDlj6/pgInlgLzkuLogYnV0dG9uIOaIluS4jeWhq++8jOS4uiBidXR0b24g5pe25L2/55So5oyJ6ZKu5qC35byPXG4gIEBQcm9wKHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgdmFsaWRhdG9yKHZhbHVlKSB7XG4gICAgICByZXR1cm4gW1wiYnV0dG9uXCJdLmluY2x1ZGVzKHZhbHVlKTtcbiAgICB9LFxuICB9KVxuICB0eXBlITogc3RyaW5nO1xuXG4gIC8vIOaYr+WQpuWeguebtOaOkuWIl++8jOaMiemSruagt+W8j+S4i+aXoOaViFxuICBAUHJvcCh7IHR5cGU6IEJvb2xlYW4sIGRlZmF1bHQ6IGZhbHNlIH0pXG4gIHZlcnRpY2FsITogYm9vbGVhbjtcblxuICBAUHJvcCh7IHR5cGU6IFN0cmluZywgZGVmYXVsdDogZ2V0VXVpZCB9KVxuICBuYW1lITogc3RyaW5nO1xuXG4gIGN1cnJlbnRWYWx1ZTogW3N0cmluZywgbnVtYmVyXSA9IHRoaXMudmFsdWU7XG4gIGNoaWxkcmVuczogWGJSYWRpb1tdID0gW107XG5cbiAgZ2V0IGNsYXNzZXMoKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgIGAke3ByZWZpeENsc31gLFxuICAgICAge1xuICAgICAgICBbYCR7cHJlZml4Q2xzfS0ke3RoaXMuc2l6ZX1gXTogISF0aGlzLnNpemUsXG4gICAgICAgIFtgeGJ1aS1yYWRpby0ke3RoaXMuc2l6ZX1gXTogISF0aGlzLnNpemUsXG4gICAgICAgIFtgJHtwcmVmaXhDbHN9LSR7dGhpcy50eXBlfWBdOiAhIXRoaXMudHlwZSxcbiAgICAgICAgW2Ake3ByZWZpeENsc30tdmVydGljYWxgXTogdGhpcy52ZXJ0aWNhbCxcbiAgICAgIH0sXG4gICAgXTtcbiAgfVxuXG4gIG1vdW50ZWQoKSB7XG4gICAgdGhpcy51cGRhdGVWYWx1ZSgpO1xuICB9XG5cbiAgdXBkYXRlVmFsdWUoKSB7XG4gICAgdGhpcy5jaGlsZHJlbnMgPSBmaW5kQ29tcG9uZW50c0Rvd253YXJkKHRoaXMsIFwiWGJSYWRpb1wiKSBhcyBYYlJhZGlvW107XG4gICAgaWYgKHRoaXMuY2hpbGRyZW5zKSB7XG4gICAgICB0aGlzLmNoaWxkcmVucy5mb3JFYWNoKChjaGlsZCkgPT4ge1xuICAgICAgICBjaGlsZC5jdXJyZW50VmFsdWUgPSB0aGlzLnZhbHVlID09PSBjaGlsZC5sYWJlbDtcbiAgICAgICAgY2hpbGQuZ3JvdXAgPSB0cnVlO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgY2hhbmdlKGRhdGEpIHtcbiAgICB0aGlzLmN1cnJlbnRWYWx1ZSA9IGRhdGEudmFsdWU7XG4gICAgdGhpcy51cGRhdGVWYWx1ZSgpO1xuICAgIHRoaXMuJGVtaXQoXCJpbnB1dFwiLCBkYXRhLnZhbHVlKTtcbiAgICB0aGlzLiRlbWl0KFwib24tY2hhbmdlXCIsIGRhdGEudmFsdWUpO1xuICAgIHRoaXMuZGlzcGF0Y2goXCJGb3JtSXRlbVwiLCBcIm9uLWZvcm0tY2hhbmdlXCIsIGRhdGEudmFsdWUpO1xuICB9XG5cbiAgQFdhdGNoKFwidmFsdWVcIilcbiAgb25WYWx1ZUNoYW5nZSgpIHtcbiAgICB0aGlzLmN1cnJlbnRWYWx1ZSA9IHRoaXMudmFsdWU7XG4gICAgdGhpcy51cGRhdGVWYWx1ZSgpO1xuICB9XG59XG4iLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy90cy1sb2FkZXIvaW5kZXguanM/P3JlZi0tMC0xIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4veGItcmFkaW8udnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy90cy1sb2FkZXIvaW5kZXguanM/P3JlZi0tMC0xIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4veGItcmFkaW8udnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiIiwiXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cbmltcG9ydCB7IENvbXBvbmVudCwgUHJvcCwgVnVlLCBNaXhpbnMsIFdhdGNoIH0gZnJvbSBcInZ1ZS1wcm9wZXJ0eS1kZWNvcmF0b3JcIjtcbmltcG9ydCB7IGZpbmRDb21wb25lbnRVcHdhcmQgfSBmcm9tIFwic3JjL3V0aWxzL2Fzc2lzdFwiO1xuaW1wb3J0IFhiUmFkaW9Hcm91cCBmcm9tIFwiLi94Yi1yYWRpby1ncm91cC52dWVcIjtcbmltcG9ydCBFbWl0dGVyIGZyb20gXCJzcmMvbWl4aW5zL2VtaXR0ZXJcIjtcblxuY29uc3QgcHJlZml4Q2xzID0gXCJ4YnVpLXJhZGlvXCI7XG5cbkBDb21wb25lbnQoeyBuYW1lOiBcIlhiUmFkaW9cIiwgbWl4aW5zOiBbRW1pdHRlcl0gfSlcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFhiUmFkaW8gZXh0ZW5kcyBNaXhpbnMoRW1pdHRlcikge1xuICAvLyB2YWx1ZSDlkox2LW1vZGVs57uR5a6a5LiA6LW377yM6YCa6L+H6L+Z5Liq5YC855qE5a2Y5Zyo5p2l6L+b6KGM5by55qGG55qE5pi+56S6XG4gIEBQcm9wKHsgdHlwZTogW1N0cmluZywgTnVtYmVyLCBCb29sZWFuXSwgZGVmYXVsdDogZmFsc2UgfSlcbiAgdmFsdWUhOiBbc3RyaW5nLCBudW1iZXIsIGJvb2xlYW5dO1xuXG4gIC8vIOmAieS4reaXtueahOWAvO+8jOW9k+S9v+eUqOexu+S8vCAxIOWSjCAwIOadpeWIpOaWreaYr+WQpumAieS4reaXtuS8muW+iOacieeUqFxuICBAUHJvcCh7IHR5cGU6IFtTdHJpbmcsIE51bWJlciwgQm9vbGVhbl0sIGRlZmF1bHQ6IHRydWUgfSlcbiAgdHJ1ZVZhbHVlITogW3N0cmluZywgbnVtYmVyLCBib29sZWFuXTtcblxuICAvLyDmsqHmnInpgInkuK3ml7bnmoTlgLzvvIzlvZPkvb/nlKjnsbvkvLwgMSDlkowgMCDmnaXliKTmlq3mmK/lkKbpgInkuK3ml7bkvJrlvojmnInnlKhcbiAgQFByb3AoeyB0eXBlOiBbU3RyaW5nLCBOdW1iZXIsIEJvb2xlYW5dLCBkZWZhdWx0OiBmYWxzZSB9KVxuICBmYWxzZVZhbHVlITogW3N0cmluZywgbnVtYmVyLCBib29sZWFuXTtcblxuICAvLyDlj6rlnKjnu4TlkIjkvb/nlKjml7bmnInmlYjjgILmjIflrprlvZPliY3pgInpobnnmoQgdmFsdWUg5YC877yM57uE5ZCI5Lya6Ieq5Yqo5Yik5pat5b2T5YmN6YCJ5oup55qE6aG555uuXG4gIEBQcm9wKHsgdHlwZTogW1N0cmluZywgTnVtYmVyXSB9KVxuICBsYWJlbCE6IFtzdHJpbmcsIG51bWJlcl07XG5cbiAgLy8g5piv5ZCm56aB55So5b2T5YmN6aG5XG4gIEBQcm9wKHsgdHlwZTogQm9vbGVhbiwgZGVmYXVsdDogZmFsc2UgfSlcbiAgZGlzYWJsZWQhOiBib29sZWFuO1xuXG4gIC8vIOaYr+WQpuW4pui+ueahhlxuICBAUHJvcCh7IHR5cGU6IEJvb2xlYW4sIGRlZmF1bHQ6IGZhbHNlIH0pXG4gIGJvcmRlciE6IGJvb2xlYW47XG5cbiAgLy8g5bC65a+45aSn5bCPXG4gIEBQcm9wKHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgZGVmYXVsdDogXCJtZWRpdW1cIixcbiAgICB2YWxpZGF0b3IodmFsdWUpIHtcbiAgICAgIHJldHVybiBbXCJzbWFsbFwiLCBcIm1lZGl1bVwiLCBcImxhcmdlXCJdLmluY2x1ZGVzKHZhbHVlKTtcbiAgICB9LFxuICB9KVxuICBzaXplITogc3RyaW5nO1xuXG4gIEBQcm9wKHsgdHlwZTogU3RyaW5nLCBkZWZhdWx0OiBcIlwiIH0pXG4gIG5hbWUhOiBzdHJpbmc7XG5cbiAgY3VycmVudFZhbHVlOiBhbnkgPSB0aGlzLnZhbHVlO1xuICBncm91cDogYm9vbGVhbiA9IGZhbHNlO1xuICBncm91cE5hbWU6IHN0cmluZyA9IHRoaXMubmFtZTtcbiAgcGFyZW50ITogWGJSYWRpb0dyb3VwO1xuICBmb2N1c1dyYXBwZXI6IGJvb2xlYW4gPSBmYWxzZTtcbiAgZm9jdXNJbm5lcjogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIGdldCB3cmFwQ2xhc3NlcygpIHtcbiAgICByZXR1cm4gW1xuICAgICAgYCR7cHJlZml4Q2xzfS13cmFwcGVyYCxcbiAgICAgIHtcbiAgICAgICAgW2Ake3ByZWZpeENsc30tZ3JvdXAtaXRlbWBdOiB0aGlzLmdyb3VwLFxuICAgICAgICBbYCR7cHJlZml4Q2xzfS13cmFwcGVyLWNoZWNrZWRgXTogdGhpcy5jdXJyZW50VmFsdWUsXG4gICAgICAgIFtgJHtwcmVmaXhDbHN9LXdyYXBwZXItZGlzYWJsZWRgXTogdGhpcy5kaXNhYmxlZCxcbiAgICAgICAgW2Ake3ByZWZpeENsc30tJHt0aGlzLnNpemV9YF06ICEhdGhpcy5zaXplLFxuICAgICAgICBbYCR7cHJlZml4Q2xzfS1mb2N1c2BdOiB0aGlzLmZvY3VzV3JhcHBlcixcbiAgICAgICAgW2Ake3ByZWZpeENsc30tYm9yZGVyYF06IHRoaXMuYm9yZGVyLFxuICAgICAgfSxcbiAgICBdO1xuICB9XG5cbiAgZ2V0IHJhZGlvQ2xhc3NlcygpIHtcbiAgICByZXR1cm4gW1xuICAgICAgYCR7cHJlZml4Q2xzfWAsXG4gICAgICB7XG4gICAgICAgIFtgJHtwcmVmaXhDbHN9LWNoZWNrZWRgXTogdGhpcy5jdXJyZW50VmFsdWUsXG4gICAgICAgIFtgJHtwcmVmaXhDbHN9LWRpc2FibGVkYF06IHRoaXMuZGlzYWJsZWQsXG4gICAgICB9LFxuICAgIF07XG4gIH1cblxuICBnZXQgaW5uZXJDbGFzc2VzKCkge1xuICAgIHJldHVybiBbXG4gICAgICBgJHtwcmVmaXhDbHN9LWlubmVyYCxcbiAgICAgIHtcbiAgICAgICAgW2Ake3ByZWZpeENsc30tZm9jdXNgXTogdGhpcy5mb2N1c0lubmVyLFxuICAgICAgfSxcbiAgICBdO1xuICB9XG5cbiAgZ2V0IGlucHV0Q2xhc3NlcygpIHtcbiAgICByZXR1cm4gYCR7cHJlZml4Q2xzfS1pbnB1dGA7XG4gIH1cblxuICBtb3VudGVkKCkge1xuICAgIHRoaXMucGFyZW50ID0gZmluZENvbXBvbmVudFVwd2FyZCh0aGlzLCBcIlhiUmFkaW9Hcm91cFwiKSBhcyBYYlJhZGlvR3JvdXA7XG4gICAgaWYgKHRoaXMucGFyZW50KSB7XG4gICAgICB0aGlzLmdyb3VwID0gdHJ1ZTtcbiAgICAgIGlmICghKHRoaXMubmFtZSAmJiB0aGlzLm5hbWUgIT09IHRoaXMucGFyZW50Lm5hbWUpKSB7XG4gICAgICAgIHRoaXMuZ3JvdXBOYW1lID0gdGhpcy5wYXJlbnQubmFtZTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRoaXMuZ3JvdXApIHtcbiAgICAgIHRoaXMucGFyZW50LnVwZGF0ZVZhbHVlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudXBkYXRlVmFsdWUoKTtcbiAgICB9XG4gIH1cblxuICB1cGRhdGVWYWx1ZSgpIHtcbiAgICB0aGlzLmN1cnJlbnRWYWx1ZSA9IHRoaXMudmFsdWUgPT09IHRoaXMudHJ1ZVZhbHVlO1xuICB9XG5cbiAgY2hhbmdlKGV2ZW50KSB7XG4gICAgaWYgKHRoaXMuZGlzYWJsZWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBjb25zdCBjaGVja2VkID0gZXZlbnQudGFyZ2V0LmNoZWNrZWQ7XG4gICAgdGhpcy5jdXJyZW50VmFsdWUgPSBjaGVja2VkO1xuXG4gICAgY29uc3QgdmFsdWUgPSBjaGVja2VkID8gdGhpcy50cnVlVmFsdWUgOiB0aGlzLmZhbHNlVmFsdWU7XG4gICAgdGhpcy4kZW1pdChcImlucHV0XCIsIHZhbHVlKTtcblxuICAgIGlmICh0aGlzLmdyb3VwKSB7XG4gICAgICBpZiAodGhpcy5sYWJlbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMucGFyZW50LmNoYW5nZSh7XG4gICAgICAgICAgdmFsdWU6IHRoaXMubGFiZWwsXG4gICAgICAgICAgY2hlY2tlZDogdGhpcy52YWx1ZSxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuJGVtaXQoXCJvbi1jaGFuZ2VcIiwgdmFsdWUpO1xuICAgICAgdGhpcy5kaXNwYXRjaChcIkZvcm1JdGVtXCIsIFwib24tZm9ybS1jaGFuZ2VcIiwgdmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIG9uQmx1cigpIHtcbiAgICB0aGlzLmZvY3VzV3JhcHBlciA9IGZhbHNlO1xuICAgIHRoaXMuZm9jdXNJbm5lciA9IGZhbHNlO1xuICB9XG5cbiAgb25Gb2N1cygpIHtcbiAgICBpZiAodGhpcy5ncm91cCAmJiB0aGlzLnBhcmVudC50eXBlID09PSBcImJ1dHRvblwiKSB7XG4gICAgICB0aGlzLmZvY3VzV3JhcHBlciA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZm9jdXNJbm5lciA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgQFdhdGNoKFwidmFsdWVcIilcbiAgb25WYWx1ZUNoYW5nZWQodmFsKSB7XG4gICAgaWYgKHZhbCA9PT0gdGhpcy50cnVlVmFsdWUgfHwgdmFsID09PSB0aGlzLmZhbHNlVmFsdWUpIHtcbiAgICAgIHRoaXMudXBkYXRlVmFsdWUoKTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3RzLWxvYWRlci9pbmRleC5qcz8/cmVmLS0wLTEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi94Yi1zZWFyY2gtYnRuLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz10cyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdHMtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTAtMSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL3hiLXNlYXJjaC1idG4udnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiIiwiXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cclxuaW1wb3J0IHsgQ29tcG9uZW50LCBQcm9wLCBWdWUgfSBmcm9tIFwidnVlLXByb3BlcnR5LWRlY29yYXRvclwiO1xyXG5jb25zdCBwcmVmaXhDbHMgPSBcInhidWktc2VhcmNoLWJ0blwiO1xyXG5AQ29tcG9uZW50KHsgbmFtZTogXCJYYlNlYXJjaEJ0blwiIH0pXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFhiU2VhcmNoQnRuIGV4dGVuZHMgVnVlIHtcclxuICAvLyDpu5jorqTovpPlhaXmlofmoYhcclxuICBAUHJvcCh7IGRlZmF1bHQ6IFwi6K+36L6T5YWlLi4uXCIgfSlcclxuICBwbGFjZWhvbGRlciE6IHN0cmluZztcclxuXHJcbiAgLyoqIGlucHV05qC35byPICovXHJcbiAgQFByb3AoKVxyXG4gIGlucHV0U3R5bGUhOiBvYmplY3Q7XHJcblxyXG4gIC8qKiDmkJzntKJpbnB1dOahhuWwuuWvuO+8jOe7hOS7tuWGheaPkOS+mzPnp40gKi9cclxuICBAUHJvcCh7IGRlZmF1bHQ6IFwibWVkaXVtXCIgfSlcclxuICBzaXplITogc3RyaW5nO1xyXG5cclxuICAvKiog5pCc57SiaWNvbueahOaYvuekuuagt+W8jyAqL1xyXG4gIEBQcm9wKHsgZGVmYXVsdDogZmFsc2UgfSlcclxuICBoaWRkZW4hOiBib29sZWFuO1xyXG5cclxuICB2YWx1ZTogYW55ID0gXCJcIjtcclxuICAvLyDmkJzntKLnmoTngrnlh7vkuovku7ZcclxuICBoYW5kbGVDbGljaygpIHtcclxuICAgIHRoaXMuJGVtaXQoXCJjbGlja1wiLCB0aGlzLnZhbHVlKTtcclxuICB9XHJcblxyXG4gIC8vIOagt+W8j1xyXG4gIGdldCBjbGFzc2VzRGl2KCkge1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAgYCR7cHJlZml4Q2xzfS1kaXZgLFxyXG4gICAgICB7XHJcbiAgICAgICAgW2Ake3ByZWZpeENsc30tZGl2LWxhcmdlYF06IHRoaXMuc2l6ZSA9PT0gXCJsYXJnZVwiLFxyXG4gICAgICAgIFtgJHtwcmVmaXhDbHN9LWRpdi1tZWRpdW1gXTogdGhpcy5zaXplID09PSBcIm1lZGl1bVwiLFxyXG4gICAgICAgIFtgJHtwcmVmaXhDbHN9LWRpdi1zbWFsbGBdOiB0aGlzLnNpemUgPT09IFwic21hbGxcIixcclxuICAgICAgfSxcclxuICAgIF07XHJcbiAgfVxyXG5cclxuICBnZXQgY2xhc3Nlc0lucHV0KCkge1xyXG4gICAgcmV0dXJuIFtgJHtwcmVmaXhDbHN9LWlucHV0YF07XHJcbiAgfVxyXG5cclxuICBnZXQgY2xhc3Nlc1NlYXJjaERpdigpIHtcclxuICAgIHJldHVybiBbXHJcbiAgICAgIGAke3ByZWZpeENsc30taWNvbi1kaXZgLFxyXG4gICAgICB7XHJcbiAgICAgICAgW2Ake3ByZWZpeENsc30taWNvbi1zaG93YF06IHRoaXMuaGlkZGVuID09PSBmYWxzZSxcclxuICAgICAgfSxcclxuICAgIF07XHJcbiAgfVxyXG5cclxuICBnZXQgY2xhc3Nlc1NlYXJjaERpdkhpZGRlbigpIHtcclxuICAgIHJldHVybiBbXHJcbiAgICAgIGAke3ByZWZpeENsc30taWNvbi1kaXZgLFxyXG4gICAgICB7XHJcbiAgICAgICAgW2Ake3ByZWZpeENsc30taWNvbi1oaWRkZW5gXTogdGhpcy5oaWRkZW4gPT09IHRydWUsXHJcbiAgICAgIH0sXHJcbiAgICBdO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy90cy1sb2FkZXIvaW5kZXguanM/P3JlZi0tMC0xIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4veGItdGFibGUudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy90cy1sb2FkZXIvaW5kZXguanM/P3JlZi0tMC0xIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4veGItdGFibGUudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiIiwiXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXHJcbmltcG9ydCB7IENvbXBvbmVudCwgUHJvcCwgVnVlLCBNaXhpbnMgfSBmcm9tIFwidnVlLXByb3BlcnR5LWRlY29yYXRvclwiO1xyXG5pbXBvcnQgdGFibGVIZWFkIGZyb20gXCIuL3hiLXRhYmxlLWhlYWQudnVlXCI7XHJcbmltcG9ydCB0YWJsZUJvZHkgZnJvbSBcIi4veGItdGFibGUtYm9keS52dWVcIjtcclxuLy8gaW1wb3J0IFNwaW4gZnJvbSBcIi4uL3NwaW4vc3Bpbi52dWVcIjtcclxuaW1wb3J0IENzdiBmcm9tIFwic3JjL3V0aWxzL2NzdlwiO1xyXG5pbXBvcnQgeyBvbiwgb2ZmIH0gZnJvbSBcInNyYy91dGlscy91dGlsc1wiO1xyXG5pbXBvcnQgeyBnZXRTdHlsZSwgZ2V0U2Nyb2xsQmFyU2l6ZSB9IGZyb20gXCJzcmMvdXRpbHMvYXNzaXN0XCI7XHJcbmltcG9ydCBjbG9uZURlZXAgZnJvbSBcImxvZGFzaC9jbG9uZURlZXBcIjtcclxuaW1wb3J0IEV4cG9ydENzdiBmcm9tIFwiLi9leHBvcnQtY3N2XCI7XHJcbmltcG9ydCBMb2NhbGUgZnJvbSBcInNyYy9taXhpbnMvbG9jYWxlXCI7XHJcbmltcG9ydCBlbGVtZW50UmVzaXplRGV0ZWN0b3JNYWtlciBmcm9tIFwiZWxlbWVudC1yZXNpemUtZGV0ZWN0b3JcIjtcclxuaW1wb3J0IHsgZ2V0QWxsQ29sdW1ucywgY29udmVydFRvUm93cywgY29udmVydENvbHVtbk9yZGVyLCBnZXRSYW5kb21TdHIgfSBmcm9tIFwiLi91dGlsXCI7XHJcblxyXG5jb25zdCBwcmVmaXhDbHMgPSBcInhidWktdGFibGVcIjtcclxuXHJcbmxldCByb3dLZXkgPSAxO1xyXG5sZXQgY29sdW1uS2V5ID0gMTtcclxuXHJcbkBDb21wb25lbnQoeyBuYW1lOiBcIlhiVGFibGVcIiwgY29tcG9uZW50czogeyB0YWJsZUhlYWQsIHRhYmxlQm9keSB9IH0pXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFhiVGFibGUgZXh0ZW5kcyBNaXhpbnMoTG9jYWxlKSB7XHJcbiAgQFByb3Aoe1xyXG4gICAgdHlwZTogQXJyYXksXHJcbiAgICBkZWZhdWx0OiAoKSA9PiBbXSxcclxuICB9KVxyXG4gIGRhdGEhOiBhbnlbXTtcclxuXHJcbiAgQFByb3Aoe1xyXG4gICAgdHlwZTogQXJyYXksXHJcbiAgICBkZWZhdWx0OiAoKSA9PiBbXSxcclxuICB9KVxyXG4gIGNvbHVtbnMhOiBhbnlbXTtcclxuICAvKiog5bC65a+45aSn5bCPICovXHJcbiAgQFByb3Aoe1xyXG4gICAgdHlwZTogU3RyaW5nLFxyXG4gICAgZGVmYXVsdDogXCJtZWRpdW1cIixcclxuICAgIHZhbGlkYXRvcih2YWx1ZSkge1xyXG4gICAgICByZXR1cm4gW1wic21hbGxcIiwgXCJtZWRpdW1cIiwgXCJsYXJnZVwiXS5pbmNsdWRlcyh2YWx1ZSk7XHJcbiAgICB9LFxyXG4gIH0pXHJcbiAgc2l6ZSE6IHN0cmluZztcclxuXHJcbiAgQFByb3Aoe1xyXG4gICAgdHlwZTogW051bWJlciwgU3RyaW5nXSxcclxuICB9KVxyXG4gIHdpZHRoITogbnVtYmVyIHwgc3RyaW5nO1xyXG5cclxuICBAUHJvcCh7XHJcbiAgICB0eXBlOiBbTnVtYmVyLCBTdHJpbmddLFxyXG4gIH0pXHJcbiAgaGVpZ2h0ITogbnVtYmVyIHwgc3RyaW5nO1xyXG5cclxuICBAUHJvcCh7XHJcbiAgICB0eXBlOiBCb29sZWFuLFxyXG4gICAgZGVmYXVsdDogZmFsc2UsXHJcbiAgfSlcclxuICBzdHJpcGUhOiBib29sZWFuO1xyXG5cclxuICBAUHJvcCh7XHJcbiAgICB0eXBlOiBCb29sZWFuLFxyXG4gICAgZGVmYXVsdDogZmFsc2UsXHJcbiAgfSlcclxuICBib3JkZXIhOiBib29sZWFuO1xyXG5cclxuICBAUHJvcCh7XHJcbiAgICB0eXBlOiBCb29sZWFuLFxyXG4gICAgZGVmYXVsdDogdHJ1ZSxcclxuICB9KVxyXG4gIHNob3dIZWFkZXIhOiBib29sZWFuO1xyXG5cclxuICBAUHJvcCh7XHJcbiAgICB0eXBlOiBCb29sZWFuLFxyXG4gICAgZGVmYXVsdDogZmFsc2UsXHJcbiAgfSlcclxuICBoaWdobGlnaHRSb3chOiBib29sZWFuO1xyXG5cclxuICBAUHJvcCh7XHJcbiAgICB0eXBlOiBGdW5jdGlvbixcclxuICAgIGRlZmF1bHQ6ICgpID0+IFwiXCIsXHJcbiAgfSlcclxuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6YmFuLXR5cGVzXHJcbiAgcm93Q2xhc3NOYW1lITogRnVuY3Rpb247XHJcblxyXG4gIEBQcm9wKHtcclxuICAgIHR5cGU6IE9iamVjdCxcclxuICB9KVxyXG4gIGNvbnRleHQhOiBvYmplY3Q7XHJcblxyXG4gIEBQcm9wKHtcclxuICAgIHR5cGU6IFN0cmluZyxcclxuICB9KVxyXG4gIG5vRGF0YVRleHQhOiBzdHJpbmc7XHJcblxyXG4gIEBQcm9wKHtcclxuICAgIHR5cGU6IFN0cmluZyxcclxuICB9KVxyXG4gIG5vRmlsdGVyZWREYXRhVGV4dCE6IHN0cmluZztcclxuXHJcbiAgQFByb3Aoe1xyXG4gICAgdHlwZTogQm9vbGVhbixcclxuICB9KVxyXG4gIGRpc2FibGVkSG92ZXIhOiBib29sZWFuO1xyXG5cclxuICBAUHJvcCh7XHJcbiAgICB0eXBlOiBCb29sZWFuLFxyXG4gICAgZGVmYXVsdDogZmFsc2UsXHJcbiAgfSlcclxuICBsb2FkaW5nITogYm9vbGVhbjtcclxuXHJcbiAgLyoqIGRhdGEtLVNUQVJUICovXHJcblxyXG4gIGNvbHNXaXRoSWQgPSB0aGlzLm1ha2VDb2x1bW5zSWQodGhpcy5jb2x1bW5zKTtcclxuICByZWFkeTogYm9vbGVhbiA9IGZhbHNlO1xyXG4gIHRhYmxlV2lkdGg6IG51bWJlciA9IDA7XHJcbiAgY29sdW1uc1dpZHRoOiBvYmplY3QgPSB7fTtcclxuICBwcmVmaXhDbHM6IHN0cmluZyA9IHByZWZpeENscztcclxuICBjb21waWxlZFVpZHM6IGFueVtdID0gW107XHJcbiAgb2JqRGF0YTogb2JqZWN0ID0gdGhpcy5tYWtlT2JqRGF0YSgpOyAvLyBjaGVja2JveCBvciBoaWdobGlnaHQtcm93XHJcbiAgcmVidWlsZERhdGE6IGFueVtdID0gW107IC8vIGZvciBzb3J0IG9yIGZpbHRlclxyXG4gIGNsb25lQ29sdW1uczogYW55W10gPSB0aGlzLm1ha2VDb2x1bW5zKHRoaXMuY29sc1dpdGhJZCk7XHJcbiAgY29sdW1uUm93czogYW55W10gPSBjb252ZXJ0VG9Sb3dzKHRoaXMuY29sc1dpdGhJZCwgZmFsc2UpO1xyXG4gIGxlZnRGaXhlZENvbHVtblJvd3M6IGFueVtdID0gY29udmVydFRvUm93cyh0aGlzLmNvbHNXaXRoSWQsIFwibGVmdFwiKTtcclxuICByaWdodEZpeGVkQ29sdW1uUm93czogYW55W10gPSBjb252ZXJ0VG9Sb3dzKHRoaXMuY29sc1dpdGhJZCwgXCJyaWdodFwiKTtcclxuICAvLyBmb3IgbXVsdGlwbGUgdGFibGUtaGVhZCwgZ2V0IGNvbHVtbnMgdGhhdCBoYXZlIG5vIGNoaWxkcmVuXHJcbiAgYWxsQ29sdW1uczogYW55W10gPSBnZXRBbGxDb2x1bW5zKHRoaXMuY29sc1dpdGhJZCk7XHJcbiAgc2hvd1Nsb3RIZWFkZXI6IGJvb2xlYW4gPSB0cnVlO1xyXG4gIHNob3dTbG90Rm9vdGVyOiBib29sZWFuID0gdHJ1ZTtcclxuICBib2R5SGVpZ2h0OiBudW1iZXIgPSAwO1xyXG4gIHNjcm9sbEJhcldpZHRoOiBudW1iZXIgPSBnZXRTY3JvbGxCYXJTaXplKGZhbHNlKTtcclxuICBjdXJyZW50Q29udGV4dDogb2JqZWN0ID0gdGhpcy5jb250ZXh0O1xyXG4gIC8vIHdoZW4gQ2VsbCBoYXMgYSBidXR0b24gdG8gZGVsZXRlIHJvdyBkYXRhLCBjbGlja0N1cnJlbnRSb3cgd2lsbCB0aHJvdyBhbiBlcnJvciwgc28gY2xvbmUgYSBkYXRhXHJcbiAgY2xvbmVEYXRhOiBhbnlbXSA9IGNsb25lRGVlcCh0aGlzLmRhdGEpO1xyXG4gIHNob3dWZXJ0aWNhbFNjcm9sbEJhcjogYm9vbGVhbiA9IGZhbHNlO1xyXG4gIHNob3dIb3Jpem9udGFsU2Nyb2xsQmFyOiBib29sZWFuID0gZmFsc2U7XHJcbiAgaGVhZGVyV2lkdGg6IG51bWJlciA9IDA7XHJcbiAgaGVhZGVySGVpZ2h0OiBudW1iZXIgPSAwO1xyXG5cclxuICAvKiogZGF0YS0tRU5EICovXHJcblxyXG4gIC8qKiBjb21wdXRlZC0tU1RBUlQgKi9cclxuXHJcbiAgZ2V0IGxvY2FsZU5vRGF0YVRleHQoKSB7XHJcbiAgICBpZiAodGhpcy5ub0RhdGFUZXh0ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgcmV0dXJuIHRoaXMudChcImkudGFibGUubm9EYXRhVGV4dFwiKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiB0aGlzLm5vRGF0YVRleHQ7XHJcbiAgICB9XHJcbiAgfVxyXG4gIGdldCBsb2NhbGVOb0ZpbHRlcmVkRGF0YVRleHQoKSB7XHJcbiAgICBpZiAodGhpcy5ub0ZpbHRlcmVkRGF0YVRleHQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICByZXR1cm4gdGhpcy50KFwiaS50YWJsZS5ub0ZpbHRlcmVkRGF0YVRleHRcIik7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gdGhpcy5ub0ZpbHRlcmVkRGF0YVRleHQ7XHJcbiAgICB9XHJcbiAgfVxyXG4gIGdldCB3cmFwQ2xhc3NlcygpOiBbc3RyaW5nLCBvYmplY3RdIHtcclxuICAgIHJldHVybiBbXHJcbiAgICAgIGAke3ByZWZpeENsc30td3JhcHBlcmAsXHJcbiAgICAgIHtcclxuICAgICAgICBbYCR7cHJlZml4Q2xzfS1oaWRlYF06ICF0aGlzLnJlYWR5LFxyXG4gICAgICAgIFtgJHtwcmVmaXhDbHN9LXdpdGgtaGVhZGVyYF06IHRoaXMuc2hvd1Nsb3RIZWFkZXIsXHJcbiAgICAgICAgW2Ake3ByZWZpeENsc30td2l0aC1mb290ZXJgXTogdGhpcy5zaG93U2xvdEZvb3RlcixcclxuICAgICAgfSxcclxuICAgIF07XHJcbiAgfVxyXG4gIGdldCBjbGFzc2VzKCk6IFtzdHJpbmcsIG9iamVjdF0ge1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAgYCR7cHJlZml4Q2xzfWAsXHJcbiAgICAgIHtcclxuICAgICAgICBbYCR7cHJlZml4Q2xzfS0ke3RoaXMuc2l6ZX1gXTogISF0aGlzLnNpemUsXHJcbiAgICAgICAgW2Ake3ByZWZpeENsc30tYm9yZGVyYF06IHRoaXMuYm9yZGVyLFxyXG4gICAgICAgIFtgJHtwcmVmaXhDbHN9LXN0cmlwZWBdOiB0aGlzLnN0cmlwZSxcclxuICAgICAgICBbYCR7cHJlZml4Q2xzfS13aXRoLWZpeGVkLXRvcGBdOiAhIXRoaXMuaGVpZ2h0LFxyXG4gICAgICB9LFxyXG4gICAgXTtcclxuICB9XHJcbiAgZ2V0IGZpeGVkSGVhZGVyQ2xhc3NlcygpOiBbc3RyaW5nLCBvYmplY3RdIHtcclxuICAgIHJldHVybiBbXHJcbiAgICAgIGAke3ByZWZpeENsc30tZml4ZWQtaGVhZGVyYCxcclxuICAgICAge1xyXG4gICAgICAgIFtgJHtwcmVmaXhDbHN9LWZpeGVkLWhlYWRlci13aXRoLWVtcHR5YF06ICF0aGlzLnJlYnVpbGREYXRhLmxlbmd0aCxcclxuICAgICAgfSxcclxuICAgIF07XHJcbiAgfVxyXG4gIGdldCBzdHlsZXMoKTogQ1NTU3R5bGVEZWNsYXJhdGlvbiB7XHJcbiAgICBjb25zdCBzdHlsZTogQ1NTU3R5bGVEZWNsYXJhdGlvbiA9IHt9IGFzIENTU1N0eWxlRGVjbGFyYXRpb247XHJcbiAgICBpZiAodGhpcy5oZWlnaHQpIHtcclxuICAgICAgY29uc3QgaGVpZ2h0ID0gcGFyc2VJbnQodGhpcy5oZWlnaHQgKyBcIlwiLCAxMCk7XHJcbiAgICAgIHN0eWxlLmhlaWdodCA9IGAke2hlaWdodH1weGA7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy53aWR0aCkge1xyXG4gICAgICBzdHlsZS53aWR0aCA9IGAke3RoaXMud2lkdGh9cHhgO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHN0eWxlO1xyXG4gIH1cclxuICBnZXQgdGFibGVTdHlsZSgpOiBDU1NTdHlsZURlY2xhcmF0aW9uIHtcclxuICAgIGNvbnN0IHN0eWxlOiBDU1NTdHlsZURlY2xhcmF0aW9uID0ge30gYXMgQ1NTU3R5bGVEZWNsYXJhdGlvbjtcclxuICAgIGlmICh0aGlzLnRhYmxlV2lkdGggIT09IDApIHtcclxuICAgICAgbGV0IHdpZHRoID0gMDtcclxuICAgICAgaWYgKHRoaXMuYm9keUhlaWdodCA9PT0gMCkge1xyXG4gICAgICAgIHdpZHRoID0gdGhpcy50YWJsZVdpZHRoO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHdpZHRoID0gdGhpcy50YWJsZVdpZHRoIC0gKHRoaXMuc2hvd1ZlcnRpY2FsU2Nyb2xsQmFyID8gdGhpcy5zY3JvbGxCYXJXaWR0aCA6IDApO1xyXG4gICAgICB9XHJcbiAgICAgIC8vIGNvbnN0IHdpZHRoID0gdGhpcy5ib2R5SGVpZ2h0ID09PSAwID8gdGhpcy50YWJsZVdpZHRoIDogdGhpcy50YWJsZVdpZHRoIC0gdGhpcy5zY3JvbGxCYXJXaWR0aDtcclxuICAgICAgc3R5bGUud2lkdGggPSBgJHt3aWR0aH1weGA7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gc3R5bGU7XHJcbiAgfVxyXG4gIGdldCB0YWJsZUhlYWRlclN0eWxlKCkge1xyXG4gICAgY29uc3Qgc3R5bGU6IENTU1N0eWxlRGVjbGFyYXRpb24gPSB7fSBhcyBDU1NTdHlsZURlY2xhcmF0aW9uO1xyXG4gICAgaWYgKHRoaXMudGFibGVXaWR0aCAhPT0gMCkge1xyXG4gICAgICBzdHlsZS53aWR0aCA9IGAke3RoaXMudGFibGVXaWR0aH1weGA7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gc3R5bGU7XHJcbiAgfVxyXG4gIGdldCBmaXhlZFRhYmxlU3R5bGUoKSB7XHJcbiAgICBjb25zdCBzdHlsZTogQ1NTU3R5bGVEZWNsYXJhdGlvbiA9IHt9IGFzIENTU1N0eWxlRGVjbGFyYXRpb247XHJcbiAgICBsZXQgd2lkdGggPSAwO1xyXG4gICAgdGhpcy5sZWZ0Rml4ZWRDb2x1bW5zLmZvckVhY2goKGNvbCkgPT4ge1xyXG4gICAgICBpZiAoY29sLmZpeGVkICYmIGNvbC5maXhlZCA9PT0gXCJsZWZ0XCIpIHtcclxuICAgICAgICB3aWR0aCArPSBjb2wuX3dpZHRoO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIHN0eWxlLndpZHRoID0gYCR7d2lkdGh9cHhgO1xyXG4gICAgcmV0dXJuIHN0eWxlO1xyXG4gIH1cclxuICBnZXQgZml4ZWRSaWdodFRhYmxlU3R5bGUoKSB7XHJcbiAgICBjb25zdCBzdHlsZTogQ1NTU3R5bGVEZWNsYXJhdGlvbiA9IHt9IGFzIENTU1N0eWxlRGVjbGFyYXRpb247XHJcbiAgICBsZXQgd2lkdGggPSAwO1xyXG4gICAgdGhpcy5yaWdodEZpeGVkQ29sdW1ucy5mb3JFYWNoKChjb2wpID0+IHtcclxuICAgICAgaWYgKGNvbC5maXhlZCAmJiBjb2wuZml4ZWQgPT09IFwicmlnaHRcIikge1xyXG4gICAgICAgIHdpZHRoICs9IGNvbC5fd2lkdGg7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgLy8gd2lkdGggKz0gdGhpcy5zY3JvbGxCYXJXaWR0aDtcclxuICAgIHN0eWxlLndpZHRoID0gYCR7d2lkdGh9cHhgO1xyXG4gICAgc3R5bGUucmlnaHQgPSBgJHt0aGlzLnNob3dWZXJ0aWNhbFNjcm9sbEJhciA/IHRoaXMuc2Nyb2xsQmFyV2lkdGggOiAwfXB4YDtcclxuICAgIHJldHVybiBzdHlsZTtcclxuICB9XHJcbiAgZ2V0IGZpeGVkUmlnaHRIZWFkZXJTdHlsZSgpIHtcclxuICAgIGNvbnN0IHN0eWxlOiBDU1NTdHlsZURlY2xhcmF0aW9uID0ge30gYXMgQ1NTU3R5bGVEZWNsYXJhdGlvbjtcclxuICAgIGxldCB3aWR0aCA9IDA7XHJcbiAgICBjb25zdCBoZWlnaHQgPSB0aGlzLmhlYWRlckhlaWdodCArIDE7XHJcbiAgICBpZiAodGhpcy5zaG93VmVydGljYWxTY3JvbGxCYXIpIHtcclxuICAgICAgd2lkdGggPSB0aGlzLnNjcm9sbEJhcldpZHRoO1xyXG4gICAgfVxyXG4gICAgc3R5bGUud2lkdGggPSBgJHt3aWR0aH1weGA7XHJcbiAgICBzdHlsZS5oZWlnaHQgPSBgJHtoZWlnaHR9cHhgO1xyXG4gICAgcmV0dXJuIHN0eWxlO1xyXG4gIH1cclxuICBnZXQgYm9keVN0eWxlKCkge1xyXG4gICAgY29uc3Qgc3R5bGU6IENTU1N0eWxlRGVjbGFyYXRpb24gPSB7fSBhcyBDU1NTdHlsZURlY2xhcmF0aW9uO1xyXG4gICAgaWYgKHRoaXMuYm9keUhlaWdodCAhPT0gMCkge1xyXG4gICAgICBjb25zdCBoZWlnaHQgPSB0aGlzLmJvZHlIZWlnaHQ7XHJcbiAgICAgIHN0eWxlLmhlaWdodCA9IGAke2hlaWdodH1weGA7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gc3R5bGU7XHJcbiAgfVxyXG4gIGdldCBmaXhlZEJvZHlTdHlsZSgpIHtcclxuICAgIGNvbnN0IHN0eWxlOiBDU1NTdHlsZURlY2xhcmF0aW9uID0ge30gYXMgQ1NTU3R5bGVEZWNsYXJhdGlvbjtcclxuICAgIGlmICh0aGlzLmJvZHlIZWlnaHQgIT09IDApIHtcclxuICAgICAgY29uc3QgaGVpZ2h0ID0gdGhpcy5ib2R5SGVpZ2h0IC0gKHRoaXMuc2hvd0hvcml6b250YWxTY3JvbGxCYXIgPyB0aGlzLnNjcm9sbEJhcldpZHRoIDogMCk7XHJcbiAgICAgIHN0eWxlLmhlaWdodCA9IHRoaXMuc2hvd0hvcml6b250YWxTY3JvbGxCYXIgPyBgJHtoZWlnaHR9cHhgIDogYCR7aGVpZ2h0IC0gMX1weGA7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gc3R5bGU7XHJcbiAgfVxyXG4gIGdldCBsZWZ0Rml4ZWRDb2x1bW5zKCkge1xyXG4gICAgcmV0dXJuIGNvbnZlcnRDb2x1bW5PcmRlcih0aGlzLmNsb25lQ29sdW1ucywgXCJsZWZ0XCIpO1xyXG4gIH1cclxuICBnZXQgcmlnaHRGaXhlZENvbHVtbnMoKSB7XHJcbiAgICByZXR1cm4gY29udmVydENvbHVtbk9yZGVyKHRoaXMuY2xvbmVDb2x1bW5zLCBcInJpZ2h0XCIpO1xyXG4gIH1cclxuICBnZXQgaXNMZWZ0Rml4ZWQoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5jb2x1bW5zLnNvbWUoKGNvbCkgPT4gY29sLmZpeGVkICYmIGNvbC5maXhlZCA9PT0gXCJsZWZ0XCIpO1xyXG4gIH1cclxuICBnZXQgaXNSaWdodEZpeGVkKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuY29sdW1ucy5zb21lKChjb2wpID0+IGNvbC5maXhlZCAmJiBjb2wuZml4ZWQgPT09IFwicmlnaHRcIik7XHJcbiAgfVxyXG4gIC8qKiBjb21wdXRlZC0tRU5EICovXHJcblxyXG4gIC8qKiBtZXRob2RzLS1TVEFSVCAqL1xyXG4gIHJvd0Nsc05hbWUoaW5kZXgpIHtcclxuICAgIHJldHVybiB0aGlzLnJvd0NsYXNzTmFtZSh0aGlzLmRhdGFbaW5kZXhdLCBpbmRleCk7XHJcbiAgfVxyXG4gIGhhbmRsZVJlc2l6ZSgpIHtcclxuICAgIC8vIGxldCB0YWJsZVdpZHRoID0gcGFyc2VJbnQoZ2V0U3R5bGUodGhpcy4kZWwsICd3aWR0aCcpKSAtIDE7XHJcbiAgICBjb25zdCB0YWJsZVdpZHRoID0gdGhpcy4kZWwub2Zmc2V0V2lkdGggLSAxO1xyXG4gICAgY29uc3QgY29sdW1uc1dpZHRoID0ge307XHJcbiAgICBsZXQgc3VtTWluV2lkdGggPSAwO1xyXG4gICAgY29uc3QgaGFzV2lkdGhDb2x1bW5zOiBhbnlbXSA9IFtdO1xyXG4gICAgY29uc3Qgbm9XaWR0aENvbHVtbnM6IGFueVtdID0gW107XHJcbiAgICBjb25zdCBtYXhXaWR0aENvbHVtbnM6IGFueVtdID0gW107XHJcbiAgICBjb25zdCBub01heFdpZHRoQ29sdW1uczogYW55W10gPSBbXTtcclxuICAgIHRoaXMuY2xvbmVDb2x1bW5zLmZvckVhY2goKGNvbCkgPT4ge1xyXG4gICAgICBpZiAoY29sLndpZHRoKSB7XHJcbiAgICAgICAgaGFzV2lkdGhDb2x1bW5zLnB1c2goY29sKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBub1dpZHRoQ29sdW1ucy5wdXNoKGNvbCk7XHJcbiAgICAgICAgaWYgKGNvbC5taW5XaWR0aCkge1xyXG4gICAgICAgICAgc3VtTWluV2lkdGggKz0gY29sLm1pbldpZHRoO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY29sLm1heFdpZHRoKSB7XHJcbiAgICAgICAgICBtYXhXaWR0aENvbHVtbnMucHVzaChjb2wpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBub01heFdpZHRoQ29sdW1ucy5wdXNoKGNvbCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGNvbC5fd2lkdGggPSBudWxsO1xyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgdW5Vc2FibGVXaWR0aCA9IGhhc1dpZHRoQ29sdW1ucy5tYXAoKGNlbGwpID0+IGNlbGwud2lkdGgpLnJlZHVjZSgoYSwgYikgPT4gYSArIGIsIDApO1xyXG4gICAgbGV0IHVzYWJsZVdpZHRoID1cclxuICAgICAgdGFibGVXaWR0aCAtIHVuVXNhYmxlV2lkdGggLSBzdW1NaW5XaWR0aCAtICh0aGlzLnNob3dWZXJ0aWNhbFNjcm9sbEJhciA/IHRoaXMuc2Nyb2xsQmFyV2lkdGggOiAwKSAtIDE7XHJcbiAgICBsZXQgdXNhYmxlTGVuZ3RoID0gbm9XaWR0aENvbHVtbnMubGVuZ3RoO1xyXG4gICAgbGV0IGNvbHVtbldpZHRoID0gMDtcclxuICAgIGlmICh1c2FibGVXaWR0aCA+IDAgJiYgdXNhYmxlTGVuZ3RoID4gMCkge1xyXG4gICAgICBjb2x1bW5XaWR0aCA9IHVzYWJsZVdpZHRoIC8gdXNhYmxlTGVuZ3RoO1xyXG4gICAgfVxyXG5cclxuICAgIGZvciAoY29uc3QgY29sdW1uIG9mIHRoaXMuY2xvbmVDb2x1bW5zKSB7XHJcbiAgICAgIGxldCB3aWR0aCA9IGNvbHVtbldpZHRoICsgKGNvbHVtbi5taW5XaWR0aCA/IGNvbHVtbi5taW5XaWR0aCA6IDApO1xyXG4gICAgICBpZiAoY29sdW1uLndpZHRoKSB7XHJcbiAgICAgICAgd2lkdGggPSBjb2x1bW4ud2lkdGg7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaWYgKGNvbHVtbi5fd2lkdGgpIHtcclxuICAgICAgICAgIHdpZHRoID0gY29sdW1uLl93aWR0aDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgaWYgKGNvbHVtbi5taW5XaWR0aCA+IHdpZHRoKSB7XHJcbiAgICAgICAgICAgIHdpZHRoID0gY29sdW1uLm1pbldpZHRoO1xyXG4gICAgICAgICAgfSBlbHNlIGlmIChjb2x1bW4ubWF4V2lkdGggPCB3aWR0aCkge1xyXG4gICAgICAgICAgICB3aWR0aCA9IGNvbHVtbi5tYXhXaWR0aDtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBpZiAodXNhYmxlV2lkdGggPiAwKSB7XHJcbiAgICAgICAgICAgIHVzYWJsZVdpZHRoIC09IHdpZHRoIC0gKGNvbHVtbi5taW5XaWR0aCA/IGNvbHVtbi5taW5XaWR0aCA6IDApO1xyXG4gICAgICAgICAgICB1c2FibGVMZW5ndGgtLTtcclxuICAgICAgICAgICAgaWYgKHVzYWJsZUxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICBjb2x1bW5XaWR0aCA9IHVzYWJsZVdpZHRoIC8gdXNhYmxlTGVuZ3RoO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIGNvbHVtbldpZHRoID0gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29sdW1uV2lkdGggPSAwO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgY29sdW1uLl93aWR0aCA9IHdpZHRoO1xyXG5cclxuICAgICAgY29sdW1uc1dpZHRoW2NvbHVtbi5faW5kZXhdID0ge1xyXG4gICAgICAgIHdpZHRoLFxyXG4gICAgICB9O1xyXG4gICAgfVxyXG4gICAgaWYgKHVzYWJsZVdpZHRoID4gMCkge1xyXG4gICAgICB1c2FibGVMZW5ndGggPSBub01heFdpZHRoQ29sdW1ucy5sZW5ndGg7XHJcbiAgICAgIGNvbHVtbldpZHRoID0gdXNhYmxlV2lkdGggLyB1c2FibGVMZW5ndGg7XHJcbiAgICAgIGZvciAoY29uc3QgY29sdW1uIG9mIG5vTWF4V2lkdGhDb2x1bW5zKSB7XHJcbiAgICAgICAgY29uc3Qgd2lkdGggPSBjb2x1bW4uX3dpZHRoICsgY29sdW1uV2lkdGg7XHJcbiAgICAgICAgaWYgKHVzYWJsZUxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgIHVzYWJsZUxlbmd0aC0tO1xyXG4gICAgICAgICAgdXNhYmxlV2lkdGggLT0gY29sdW1uV2lkdGg7XHJcbiAgICAgICAgICBjb2x1bW5XaWR0aCA9IHVzYWJsZVdpZHRoIC8gdXNhYmxlTGVuZ3RoO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBjb2x1bW5XaWR0aCA9IDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb2x1bW4uX3dpZHRoID0gd2lkdGg7XHJcblxyXG4gICAgICAgIGNvbHVtbnNXaWR0aFtjb2x1bW4uX2luZGV4XSA9IHtcclxuICAgICAgICAgIHdpZHRoLFxyXG4gICAgICAgIH07XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnRhYmxlV2lkdGggPVxyXG4gICAgICB0aGlzLmNsb25lQ29sdW1ucy5tYXAoKGNlbGwpID0+IGNlbGwuX3dpZHRoKS5yZWR1Y2UoKGEsIGIpID0+IGEgKyBiLCAwKSArXHJcbiAgICAgICh0aGlzLnNob3dWZXJ0aWNhbFNjcm9sbEJhciA/IHRoaXMuc2Nyb2xsQmFyV2lkdGggOiAwKSArXHJcbiAgICAgIDE7XHJcbiAgICB0aGlzLmNvbHVtbnNXaWR0aCA9IGNvbHVtbnNXaWR0aDtcclxuICAgIHRoaXMuZml4ZWRIZWFkZXIoKTtcclxuICB9XHJcbiAgaGFuZGxlTW91c2VJbihpbmRleCkge1xyXG4gICAgaWYgKHRoaXMuZGlzYWJsZWRIb3Zlcikge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy5vYmpEYXRhW2luZGV4XS5faXNIb3Zlcikge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB0aGlzLm9iakRhdGFbaW5kZXhdLl9pc0hvdmVyID0gdHJ1ZTtcclxuICB9XHJcbiAgaGFuZGxlTW91c2VPdXQoaW5kZXgpIHtcclxuICAgIGlmICh0aGlzLmRpc2FibGVkSG92ZXIpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdGhpcy5vYmpEYXRhW2luZGV4XS5faXNIb3ZlciA9IGZhbHNlO1xyXG4gIH1cclxuICAvLyDpgJrnlKjlpITnkIYgaGlnaGxpZ2h0Q3VycmVudFJvdyDlkowgY2xlYXJDdXJyZW50Um93XHJcbiAgaGFuZGxlQ3VycmVudFJvdyh0eXBlLCBpbmRleD8pIHtcclxuICAgIGxldCBvbGRJbmRleCA9IC0xO1xyXG4gICAgZm9yIChjb25zdCBpIGluIHRoaXMub2JqRGF0YSkge1xyXG4gICAgICBpZiAodGhpcy5vYmpEYXRhW2ldLl9pc0hpZ2hsaWdodCkge1xyXG4gICAgICAgIG9sZEluZGV4ID0gcGFyc2VJbnQoaSwgMTApO1xyXG4gICAgICAgIHRoaXMub2JqRGF0YVtpXS5faXNIaWdobGlnaHQgPSBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKHR5cGUgPT09IFwiaGlnaGxpZ2h0XCIpIHtcclxuICAgICAgdGhpcy5vYmpEYXRhW2luZGV4XS5faXNIaWdobGlnaHQgPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgY29uc3Qgb2xkRGF0YSA9IG9sZEluZGV4IDwgMCA/IG51bGwgOiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMuY2xvbmVEYXRhW29sZEluZGV4XSkpO1xyXG4gICAgY29uc3QgbmV3RGF0YSA9IHR5cGUgPT09IFwiaGlnaGxpZ2h0XCIgPyBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMuY2xvbmVEYXRhW2luZGV4XSkpIDogbnVsbDtcclxuICAgIHRoaXMuJGVtaXQoXCJvbi1jdXJyZW50LWNoYW5nZVwiLCBuZXdEYXRhLCBvbGREYXRhKTtcclxuICB9XHJcbiAgaGlnaGxpZ2h0Q3VycmVudFJvdyhpbmRleCkge1xyXG4gICAgaWYgKCF0aGlzLmhpZ2hsaWdodFJvdyB8fCB0aGlzLm9iakRhdGFbaW5kZXhdLl9pc0hpZ2hsaWdodCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB0aGlzLmhhbmRsZUN1cnJlbnRSb3coXCJoaWdobGlnaHRcIiwgaW5kZXgpO1xyXG4gIH1cclxuICBjbGVhckN1cnJlbnRSb3coKSB7XHJcbiAgICBpZiAoIXRoaXMuaGlnaGxpZ2h0Um93KSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHRoaXMuaGFuZGxlQ3VycmVudFJvdyhcImNsZWFyXCIpO1xyXG4gIH1cclxuICBjbGlja0N1cnJlbnRSb3coaW5kZXgpIHtcclxuICAgIHRoaXMuaGlnaGxpZ2h0Q3VycmVudFJvdyhpbmRleCk7XHJcbiAgICB0aGlzLiRlbWl0KFwib24tcm93LWNsaWNrXCIsIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGhpcy5jbG9uZURhdGFbaW5kZXhdKSksIGluZGV4KTtcclxuICB9XHJcbiAgZGJsY2xpY2tDdXJyZW50Um93KGluZGV4KSB7XHJcbiAgICB0aGlzLmhpZ2hsaWdodEN1cnJlbnRSb3coaW5kZXgpO1xyXG4gICAgdGhpcy4kZW1pdChcIm9uLXJvdy1kYmxjbGlja1wiLCBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMuY2xvbmVEYXRhW2luZGV4XSkpLCBpbmRleCk7XHJcbiAgfVxyXG4gIGdldFNlbGVjdGlvbigpIHtcclxuICAgIGNvbnN0IHNlbGVjdGlvbkluZGV4ZXM6IGFueVtdID0gW107XHJcbiAgICBmb3IgKGNvbnN0IGkgaW4gdGhpcy5vYmpEYXRhKSB7XHJcbiAgICAgIGlmICh0aGlzLm9iakRhdGFbaV0uX2lzQ2hlY2tlZCkge1xyXG4gICAgICAgIHNlbGVjdGlvbkluZGV4ZXMucHVzaChwYXJzZUludChpLCAxMCkpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0aGlzLmRhdGEuZmlsdGVyKChkYXRhLCBpbmRleCkgPT4gc2VsZWN0aW9uSW5kZXhlcy5pbmRleE9mKGluZGV4KSA+IC0xKSkpO1xyXG4gIH1cclxuICB0b2dnbGVTZWxlY3QoaW5kZXgpIHtcclxuICAgIGxldCBkYXRhOiBhbnkgPSB7fTtcclxuXHJcbiAgICBmb3IgKGxldCBpIGluIHRoaXMub2JqRGF0YSkge1xyXG4gICAgICBpZiAocGFyc2VJbnQoaSwgMTApID09PSBpbmRleCkge1xyXG4gICAgICAgIGRhdGEgPSB0aGlzLm9iakRhdGFbaV07XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGNvbnN0IHN0YXR1cyA9ICFkYXRhLl9pc0NoZWNrZWQ7XHJcblxyXG4gICAgdGhpcy5vYmpEYXRhW2luZGV4XS5faXNDaGVja2VkID0gc3RhdHVzO1xyXG5cclxuICAgIGNvbnN0IHNlbGVjdGlvbiA9IHRoaXMuZ2V0U2VsZWN0aW9uKCk7XHJcbiAgICB0aGlzLiRlbWl0KHN0YXR1cyA/IFwib24tc2VsZWN0XCIgOiBcIm9uLXNlbGVjdC1jYW5jZWxcIiwgc2VsZWN0aW9uLCBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMuZGF0YVtpbmRleF0pKSk7XHJcbiAgICB0aGlzLiRlbWl0KFwib24tc2VsZWN0aW9uLWNoYW5nZVwiLCBzZWxlY3Rpb24pO1xyXG4gIH1cclxuICB0b2dnbGVFeHBhbmQoaW5kZXgpIHtcclxuICAgIGxldCBkYXRhOiBhbnkgPSB7fTtcclxuXHJcbiAgICBmb3IgKGNvbnN0IGkgaW4gdGhpcy5vYmpEYXRhKSB7XHJcbiAgICAgIGlmIChwYXJzZUludChpLCAxMCkgPT09IGluZGV4KSB7XHJcbiAgICAgICAgZGF0YSA9IHRoaXMub2JqRGF0YVtpXTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgY29uc3Qgc3RhdHVzID0gIWRhdGEuX2lzRXhwYW5kZWQ7XHJcbiAgICB0aGlzLm9iakRhdGFbaW5kZXhdLl9pc0V4cGFuZGVkID0gc3RhdHVzO1xyXG4gICAgdGhpcy4kZW1pdChcIm9uLWV4cGFuZFwiLCBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMuY2xvbmVEYXRhW2luZGV4XSkpLCBzdGF0dXMpO1xyXG4gIH1cclxuICBzZWxlY3RBbGwoc3RhdHVzKSB7XHJcbiAgICBmb3IgKGNvbnN0IGRhdGEgb2YgdGhpcy5yZWJ1aWxkRGF0YSkge1xyXG4gICAgICBpZiAodGhpcy5vYmpEYXRhW2RhdGEuX2luZGV4XS5faXNEaXNhYmxlZCkge1xyXG4gICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMub2JqRGF0YVtkYXRhLl9pbmRleF0uX2lzQ2hlY2tlZCA9IHN0YXR1cztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgY29uc3Qgc2VsZWN0aW9uID0gdGhpcy5nZXRTZWxlY3Rpb24oKTtcclxuICAgIGlmIChzdGF0dXMpIHtcclxuICAgICAgdGhpcy4kZW1pdChcIm9uLXNlbGVjdC1hbGxcIiwgc2VsZWN0aW9uKTtcclxuICAgIH1cclxuICAgIHRoaXMuJGVtaXQoXCJvbi1zZWxlY3Rpb24tY2hhbmdlXCIsIHNlbGVjdGlvbik7XHJcbiAgfVxyXG5cclxuICBmaXhlZEhlYWRlcigpIHtcclxuICAgIGlmICh0aGlzLmhlaWdodCkge1xyXG4gICAgICB0aGlzLiRuZXh0VGljaygoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgdGl0bGVIZWlnaHQgPSBwYXJzZUludChnZXRTdHlsZSh0aGlzLiRyZWZzLnRpdGxlIGFzIEhUTUxFbGVtZW50LCBcImhlaWdodFwiKSwgMTApIHx8IDA7XHJcbiAgICAgICAgY29uc3QgaGVhZGVySGVpZ2h0ID0gcGFyc2VJbnQoZ2V0U3R5bGUodGhpcy4kcmVmcy5oZWFkZXIgYXMgSFRNTEVsZW1lbnQsIFwiaGVpZ2h0XCIpLCAxMCkgfHwgMDtcclxuICAgICAgICBjb25zdCBmb290ZXJIZWlnaHQgPSBwYXJzZUludChnZXRTdHlsZSh0aGlzLiRyZWZzLmZvb3RlciBhcyBIVE1MRWxlbWVudCwgXCJoZWlnaHRcIiksIDEwKSB8fCAwO1xyXG4gICAgICAgIHRoaXMuYm9keUhlaWdodCA9IE51bWJlcih0aGlzLmhlaWdodCkgLSB0aXRsZUhlaWdodCAtIGhlYWRlckhlaWdodCAtIGZvb3RlckhlaWdodDtcclxuICAgICAgICB0aGlzLiRuZXh0VGljaygoKSA9PiB0aGlzLmZpeGVkQm9keSgpKTtcclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmJvZHlIZWlnaHQgPSAwO1xyXG4gICAgICB0aGlzLiRuZXh0VGljaygoKSA9PiB0aGlzLmZpeGVkQm9keSgpKTtcclxuICAgIH1cclxuICB9XHJcbiAgZml4ZWRCb2R5KCkge1xyXG4gICAgaWYgKHRoaXMuJHJlZnMuaGVhZGVyKSB7XHJcbiAgICAgIHRoaXMuaGVhZGVyV2lkdGggPSB0aGlzLiRyZWZzLmhlYWRlci5jaGlsZHJlblswXS5vZmZzZXRXaWR0aDtcclxuICAgICAgdGhpcy5oZWFkZXJIZWlnaHQgPSB0aGlzLiRyZWZzLmhlYWRlci5jaGlsZHJlblswXS5vZmZzZXRIZWlnaHQ7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCF0aGlzLiRyZWZzLnRib2R5IHx8ICF0aGlzLmRhdGEgfHwgdGhpcy5kYXRhLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICB0aGlzLnNob3dWZXJ0aWNhbFNjcm9sbEJhciA9IGZhbHNlO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc3QgYm9keUNvbnRlbnRFbCA9IHRoaXMuJHJlZnMudGJvZHkuJGVsO1xyXG4gICAgICBjb25zdCBib2R5RWwgPSBib2R5Q29udGVudEVsLnBhcmVudEVsZW1lbnQ7XHJcbiAgICAgIGNvbnN0IGJvZHlDb250ZW50SGVpZ2h0ID0gYm9keUNvbnRlbnRFbC5vZmZzZXRIZWlnaHQ7XHJcbiAgICAgIGNvbnN0IGJvZHlIZWlnaHQgPSBib2R5RWwub2Zmc2V0SGVpZ2h0O1xyXG5cclxuICAgICAgdGhpcy5zaG93SG9yaXpvbnRhbFNjcm9sbEJhciA9XHJcbiAgICAgICAgYm9keUVsLm9mZnNldFdpZHRoIDwgYm9keUNvbnRlbnRFbC5vZmZzZXRXaWR0aCArICh0aGlzLnNob3dWZXJ0aWNhbFNjcm9sbEJhciA/IHRoaXMuc2Nyb2xsQmFyV2lkdGggOiAwKTtcclxuICAgICAgdGhpcy5zaG93VmVydGljYWxTY3JvbGxCYXIgPSB0aGlzLmJvZHlIZWlnaHRcclxuICAgICAgICA/IGJvZHlIZWlnaHQgLSAodGhpcy5zaG93SG9yaXpvbnRhbFNjcm9sbEJhciA/IHRoaXMuc2Nyb2xsQmFyV2lkdGggOiAwKSA8IGJvZHlDb250ZW50SGVpZ2h0XHJcbiAgICAgICAgOiBmYWxzZTtcclxuXHJcbiAgICAgIGlmICh0aGlzLnNob3dWZXJ0aWNhbFNjcm9sbEJhcikge1xyXG4gICAgICAgIGJvZHlFbC5jbGFzc0xpc3QuYWRkKHRoaXMucHJlZml4Q2xzICsgXCItb3ZlcmZsb3dZXCIpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGJvZHlFbC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMucHJlZml4Q2xzICsgXCItb3ZlcmZsb3dZXCIpO1xyXG4gICAgICB9XHJcbiAgICAgIGlmICh0aGlzLnNob3dIb3Jpem9udGFsU2Nyb2xsQmFyKSB7XHJcbiAgICAgICAgYm9keUVsLmNsYXNzTGlzdC5hZGQodGhpcy5wcmVmaXhDbHMgKyBcIi1vdmVyZmxvd1hcIik7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgYm9keUVsLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5wcmVmaXhDbHMgKyBcIi1vdmVyZmxvd1hcIik7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIGhpZGVDb2x1bW5GaWx0ZXIoKSB7XHJcbiAgICB0aGlzLmNsb25lQ29sdW1ucy5mb3JFYWNoKChjb2wpID0+IChjb2wuX2ZpbHRlclZpc2libGUgPSBmYWxzZSkpO1xyXG4gIH1cclxuICBoYW5kbGVCb2R5U2Nyb2xsKGV2ZW50KSB7XHJcbiAgICBpZiAodGhpcy5zaG93SGVhZGVyKSB7XHJcbiAgICAgIHRoaXMuJHJlZnMuaGVhZGVyLnNjcm9sbExlZnQgPSBldmVudC50YXJnZXQuc2Nyb2xsTGVmdDtcclxuICAgIH1cclxuICAgIGlmICh0aGlzLmlzTGVmdEZpeGVkKSB7XHJcbiAgICAgIHRoaXMuJHJlZnMuZml4ZWRCb2R5LnNjcm9sbFRvcCA9IGV2ZW50LnRhcmdldC5zY3JvbGxUb3A7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy5pc1JpZ2h0Rml4ZWQpIHtcclxuICAgICAgdGhpcy4kcmVmcy5maXhlZFJpZ2h0Qm9keS5zY3JvbGxUb3AgPSBldmVudC50YXJnZXQuc2Nyb2xsVG9wO1xyXG4gICAgfVxyXG4gICAgdGhpcy5oaWRlQ29sdW1uRmlsdGVyKCk7XHJcbiAgfVxyXG4gIGhhbmRsZUZpeGVkTW91c2V3aGVlbChldmVudCkge1xyXG4gICAgbGV0IGRlbHRhWSA9IGV2ZW50LmRlbHRhWTtcclxuICAgIGlmICghZGVsdGFZICYmIGV2ZW50LmRldGFpbCkge1xyXG4gICAgICBkZWx0YVkgPSBldmVudC5kZXRhaWwgKiA0MDtcclxuICAgIH1cclxuICAgIGlmICghZGVsdGFZICYmIGV2ZW50LndoZWVsRGVsdGFZKSB7XHJcbiAgICAgIGRlbHRhWSA9IC1ldmVudC53aGVlbERlbHRhWTtcclxuICAgIH1cclxuICAgIGlmICghZGVsdGFZICYmIGV2ZW50LndoZWVsRGVsdGEpIHtcclxuICAgICAgZGVsdGFZID0gLWV2ZW50LndoZWVsRGVsdGE7XHJcbiAgICB9XHJcbiAgICBpZiAoIWRlbHRhWSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBjb25zdCBib2R5ID0gdGhpcy4kcmVmcy5ib2R5O1xyXG4gICAgY29uc3QgY3VycmVudFNjcm9sbFRvcCA9IGJvZHkuc2Nyb2xsVG9wO1xyXG4gICAgaWYgKGRlbHRhWSA8IDAgJiYgY3VycmVudFNjcm9sbFRvcCAhPT0gMCkge1xyXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgfVxyXG4gICAgaWYgKGRlbHRhWSA+IDAgJiYgYm9keS5zY3JvbGxIZWlnaHQgLSBib2R5LmNsaWVudEhlaWdodCA+IGN1cnJlbnRTY3JvbGxUb3ApIHtcclxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIH1cclxuICAgIC8vYm9keS5zY3JvbGxUb3AgKz0gZGVsdGFZO1xyXG4gICAgbGV0IHN0ZXAgPSAwO1xyXG4gICAgY29uc3QgdGltZUlkID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xyXG4gICAgICBzdGVwICs9IDU7XHJcbiAgICAgIGlmIChkZWx0YVkgPiAwKSB7XHJcbiAgICAgICAgYm9keS5zY3JvbGxUb3AgKz0gMjtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBib2R5LnNjcm9sbFRvcCAtPSAyO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChzdGVwID49IE1hdGguYWJzKGRlbHRhWSkpIHtcclxuICAgICAgICBjbGVhckludGVydmFsKHRpbWVJZCk7XHJcbiAgICAgIH1cclxuICAgIH0sIDUpO1xyXG4gIH1cclxuICBoYW5kbGVNb3VzZVdoZWVsKGV2ZW50KSB7XHJcbiAgICBjb25zdCBkZWx0YVggPSBldmVudC5kZWx0YVg7XHJcbiAgICBjb25zdCAkYm9keSA9IHRoaXMuJHJlZnMuYm9keTtcclxuXHJcbiAgICBpZiAoZGVsdGFYID4gMCkge1xyXG4gICAgICAkYm9keS5zY3JvbGxMZWZ0ID0gJGJvZHkuc2Nyb2xsTGVmdCArIDEwO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgJGJvZHkuc2Nyb2xsTGVmdCA9ICRib2R5LnNjcm9sbExlZnQgLSAxMDtcclxuICAgIH1cclxuICB9XHJcbiAgc29ydERhdGEoZGF0YSwgdHlwZSwgaW5kZXgpIHtcclxuICAgIGNvbnN0IGtleSA9IHRoaXMuY2xvbmVDb2x1bW5zW2luZGV4XS5rZXk7XHJcbiAgICBkYXRhLnNvcnQoKGEsIGIpID0+IHtcclxuICAgICAgaWYgKHRoaXMuY2xvbmVDb2x1bW5zW2luZGV4XS5zb3J0TWV0aG9kKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xvbmVDb2x1bW5zW2luZGV4XS5zb3J0TWV0aG9kKGFba2V5XSwgYltrZXldLCB0eXBlKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpZiAodHlwZSA9PT0gXCJhc2NcIikge1xyXG4gICAgICAgICAgcmV0dXJuIGFba2V5XSA+IGJba2V5XSA/IDEgOiAtMTtcclxuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IFwiZGVzY1wiKSB7XHJcbiAgICAgICAgICByZXR1cm4gYVtrZXldIDwgYltrZXldID8gMSA6IC0xO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gZGF0YTtcclxuICB9XHJcbiAgaGFuZGxlU29ydChpZHgsIHR5cGUpIHtcclxuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5HZXRPcmlnaW5hbEluZGV4KGlkeCk7XHJcbiAgICB0aGlzLmNsb25lQ29sdW1ucy5mb3JFYWNoKChjb2wpID0+IChjb2wuX3NvcnRUeXBlID0gXCJub3JtYWxcIikpO1xyXG5cclxuICAgIGNvbnN0IGtleSA9IHRoaXMuY2xvbmVDb2x1bW5zW2luZGV4XS5rZXk7XHJcbiAgICBpZiAodGhpcy5jbG9uZUNvbHVtbnNbaW5kZXhdLnNvcnRhYmxlICE9PSBcImN1c3RvbVwiKSB7XHJcbiAgICAgIC8vIGN1c3RvbSBpcyBmb3IgcmVtb3RlIHNvcnRcclxuICAgICAgaWYgKHR5cGUgPT09IFwibm9ybWFsXCIpIHtcclxuICAgICAgICB0aGlzLnJlYnVpbGREYXRhID0gdGhpcy5tYWtlRGF0YVdpdGhGaWx0ZXIoKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLnJlYnVpbGREYXRhID0gdGhpcy5zb3J0RGF0YSh0aGlzLnJlYnVpbGREYXRhLCB0eXBlLCBpbmRleCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHRoaXMuY2xvbmVDb2x1bW5zW2luZGV4XS5fc29ydFR5cGUgPSB0eXBlO1xyXG5cclxuICAgIHRoaXMuJGVtaXQoXCJvbi1zb3J0LWNoYW5nZVwiLCB7XHJcbiAgICAgIGNvbHVtbjogSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0aGlzLmFsbENvbHVtbnNbdGhpcy5jbG9uZUNvbHVtbnNbaW5kZXhdLl9pbmRleF0pKSxcclxuICAgICAga2V5LFxyXG4gICAgICBvcmRlcjogdHlwZSxcclxuICAgIH0pO1xyXG4gIH1cclxuICBoYW5kbGVGaWx0ZXJIaWRlKGluZGV4KSB7XHJcbiAgICAvLyBjbGVhciBjaGVja2VkIHRoYXQgbm90IGZpbHRlciBub3dcclxuICAgIGlmICghdGhpcy5jbG9uZUNvbHVtbnNbaW5kZXhdLl9pc0ZpbHRlcmVkKSB7XHJcbiAgICAgIHRoaXMuY2xvbmVDb2x1bW5zW2luZGV4XS5fZmlsdGVyQ2hlY2tlZCA9IFtdO1xyXG4gICAgfVxyXG4gIH1cclxuICBmaWx0ZXJEYXRhKGRhdGEsIGNvbHVtbikge1xyXG4gICAgcmV0dXJuIGRhdGEuZmlsdGVyKChyb3cpID0+IHtcclxuICAgICAgLy8g5aaC5p6c5a6a5LmJ5LqG6L+c56iL6L+H5ruk5pa55rOV5YiZ5b+955Wl5q2k5pa55rOVXHJcbiAgICAgIGlmICh0eXBlb2YgY29sdW1uLmZpbHRlclJlbW90ZSA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGxldCBzdGF0dXMgPSAhY29sdW1uLl9maWx0ZXJDaGVja2VkLmxlbmd0aDtcclxuICAgICAgZm9yIChjb25zdCBjaGVja2VkIG9mIGNvbHVtbi5fZmlsdGVyQ2hlY2tlZCkge1xyXG4gICAgICAgIHN0YXR1cyA9IGNvbHVtbi5maWx0ZXJNZXRob2QoY2hlY2tlZCwgcm93KTtcclxuICAgICAgICBpZiAoc3RhdHVzKSB7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHN0YXR1cztcclxuICAgIH0pO1xyXG4gIH1cclxuICBmaWx0ZXJPdGhlckRhdGEoZGF0YSwgaW5kZXgpIHtcclxuICAgIGNvbnN0IGNvbHVtbiA9IHRoaXMuY2xvbmVDb2x1bW5zW2luZGV4XTtcclxuICAgIGlmICh0eXBlb2YgY29sdW1uLmZpbHRlclJlbW90ZSA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgIGNvbHVtbi5maWx0ZXJSZW1vdGUuY2FsbCh0aGlzLiRwYXJlbnQsIGNvbHVtbi5fZmlsdGVyQ2hlY2tlZCwgY29sdW1uLmtleSwgY29sdW1uKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmNsb25lQ29sdW1ucy5mb3JFYWNoKChjb2wsIGNvbEluZGV4KSA9PiB7XHJcbiAgICAgIGlmIChjb2xJbmRleCAhPT0gaW5kZXgpIHtcclxuICAgICAgICBkYXRhID0gdGhpcy5maWx0ZXJEYXRhKGRhdGEsIGNvbCk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIGRhdGE7XHJcbiAgfVxyXG4gIGhhbmRsZUZpbHRlcihpbmRleCkge1xyXG4gICAgY29uc3QgY29sdW1uID0gdGhpcy5jbG9uZUNvbHVtbnNbaW5kZXhdO1xyXG4gICAgbGV0IGZpbHRlckRhdGEgPSB0aGlzLm1ha2VEYXRhV2l0aFNvcnQoKTtcclxuXHJcbiAgICAvLyBmaWx0ZXIgb3RoZXJzIGZpcnN0LCBhZnRlciBmaWx0ZXIgdGhpcyBjb2x1bW5cclxuICAgIGZpbHRlckRhdGEgPSB0aGlzLmZpbHRlck90aGVyRGF0YShmaWx0ZXJEYXRhLCBpbmRleCk7XHJcbiAgICB0aGlzLnJlYnVpbGREYXRhID0gdGhpcy5maWx0ZXJEYXRhKGZpbHRlckRhdGEsIGNvbHVtbik7XHJcblxyXG4gICAgdGhpcy5jbG9uZUNvbHVtbnNbaW5kZXhdLl9pc0ZpbHRlcmVkID0gdHJ1ZTtcclxuICAgIHRoaXMuY2xvbmVDb2x1bW5zW2luZGV4XS5fZmlsdGVyVmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgdGhpcy4kZW1pdChcIm9uLWZpbHRlci1jaGFuZ2VcIiwgY29sdW1uKTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICogIzI4MzJcclxuICAgKiDlupTor6XljLrliIblvZPliY3ooajlpLTnmoQgY29sdW1uIOaYr+W3puWbuuWumui/mOaYr+WPs+WbuuWumlxyXG4gICAqIOWQpuWImeaJp+ihjOWIsCAkcGFyZW50IOaXtu+8jOaWueazleeahCBpbmRleCDkuI4gY2xvbmVDb2x1bW5zIOeahCBpbmRleCDmmK/kuI3lr7nlupTnmoRcclxuICAgKiDlt6blm7rlrprlkozlj7Plm7rlrprvvIzopoHljLrliIblr7nlvoVcclxuICAgKiDmiYDku6XvvIzmraTmlrnms5XnlKjmnaXojrflj5bmraPnoa7nmoQgaW5kZXhcclxuICAgKi9cclxuICBHZXRPcmlnaW5hbEluZGV4KGluZGV4KSB7XHJcbiAgICByZXR1cm4gdGhpcy5jbG9uZUNvbHVtbnMuZmluZEluZGV4KChpdGVtKSA9PiBpdGVtLl9pbmRleCA9PT0gaW5kZXgpO1xyXG4gIH1cclxuICBoYW5kbGVGaWx0ZXJTZWxlY3QoaWR4LCB2YWx1ZSkge1xyXG4gICAgY29uc3QgaW5kZXggPSB0aGlzLkdldE9yaWdpbmFsSW5kZXgoaWR4KTtcclxuICAgIHRoaXMuY2xvbmVDb2x1bW5zW2luZGV4XS5fZmlsdGVyQ2hlY2tlZCA9IFt2YWx1ZV07XHJcbiAgICB0aGlzLmhhbmRsZUZpbHRlcihpbmRleCk7XHJcbiAgfVxyXG4gIGhhbmRsZUZpbHRlclJlc2V0KGlkeCkge1xyXG4gICAgY29uc3QgaW5kZXggPSB0aGlzLkdldE9yaWdpbmFsSW5kZXgoaWR4KTtcclxuICAgIHRoaXMuY2xvbmVDb2x1bW5zW2luZGV4XS5faXNGaWx0ZXJlZCA9IGZhbHNlO1xyXG4gICAgdGhpcy5jbG9uZUNvbHVtbnNbaW5kZXhdLl9maWx0ZXJWaXNpYmxlID0gZmFsc2U7XHJcbiAgICB0aGlzLmNsb25lQ29sdW1uc1tpbmRleF0uX2ZpbHRlckNoZWNrZWQgPSBbXTtcclxuXHJcbiAgICBsZXQgZmlsdGVyRGF0YSA9IHRoaXMubWFrZURhdGFXaXRoU29ydCgpO1xyXG4gICAgZmlsdGVyRGF0YSA9IHRoaXMuZmlsdGVyT3RoZXJEYXRhKGZpbHRlckRhdGEsIGluZGV4KTtcclxuICAgIHRoaXMucmVidWlsZERhdGEgPSBmaWx0ZXJEYXRhO1xyXG4gICAgdGhpcy4kZW1pdChcIm9uLWZpbHRlci1jaGFuZ2VcIiwgdGhpcy5jbG9uZUNvbHVtbnNbaW5kZXhdKTtcclxuICB9XHJcbiAgbWFrZURhdGEoKSB7XHJcbiAgICBjb25zdCBkYXRhID0gY2xvbmVEZWVwKHRoaXMuZGF0YSk7XHJcbiAgICBkYXRhLmZvckVhY2goKHJvdywgaW5kZXgpID0+IHtcclxuICAgICAgcm93Ll9pbmRleCA9IGluZGV4O1xyXG4gICAgICByb3cuX3Jvd0tleSA9IHJvd0tleSsrO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gZGF0YTtcclxuICB9XHJcbiAgbWFrZURhdGFXaXRoU29ydCgpIHtcclxuICAgIGxldCBkYXRhID0gdGhpcy5tYWtlRGF0YSgpO1xyXG4gICAgbGV0IHNvcnRUeXBlID0gXCJub3JtYWxcIjtcclxuICAgIGxldCBzb3J0SW5kZXggPSAtMTtcclxuICAgIGxldCBpc0N1c3RvbSA9IGZhbHNlO1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5jbG9uZUNvbHVtbnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgaWYgKHRoaXMuY2xvbmVDb2x1bW5zW2ldLl9zb3J0VHlwZSAhPT0gXCJub3JtYWxcIikge1xyXG4gICAgICAgIHNvcnRUeXBlID0gdGhpcy5jbG9uZUNvbHVtbnNbaV0uX3NvcnRUeXBlO1xyXG4gICAgICAgIHNvcnRJbmRleCA9IGk7XHJcbiAgICAgICAgaXNDdXN0b20gPSB0aGlzLmNsb25lQ29sdW1uc1tpXS5zb3J0YWJsZSA9PT0gXCJjdXN0b21cIjtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNvcnRUeXBlICE9PSBcIm5vcm1hbFwiICYmICFpc0N1c3RvbSkge1xyXG4gICAgICBkYXRhID0gdGhpcy5zb3J0RGF0YShkYXRhLCBzb3J0VHlwZSwgc29ydEluZGV4KTtcclxuICAgIH1cclxuICAgIHJldHVybiBkYXRhO1xyXG4gIH1cclxuICBtYWtlRGF0YVdpdGhGaWx0ZXIoKSB7XHJcbiAgICBsZXQgZGF0YSA9IHRoaXMubWFrZURhdGEoKTtcclxuICAgIHRoaXMuY2xvbmVDb2x1bW5zLmZvckVhY2goKGNvbCkgPT4gKGRhdGEgPSB0aGlzLmZpbHRlckRhdGEoZGF0YSwgY29sKSkpO1xyXG4gICAgcmV0dXJuIGRhdGE7XHJcbiAgfVxyXG4gIG1ha2VEYXRhV2l0aFNvcnRBbmRGaWx0ZXIoKSB7XHJcbiAgICBsZXQgZGF0YSA9IHRoaXMubWFrZURhdGFXaXRoU29ydCgpO1xyXG4gICAgdGhpcy5jbG9uZUNvbHVtbnMuZm9yRWFjaCgoY29sKSA9PiAoZGF0YSA9IHRoaXMuZmlsdGVyRGF0YShkYXRhLCBjb2wpKSk7XHJcbiAgICByZXR1cm4gZGF0YTtcclxuICB9XHJcbiAgbWFrZU9iakRhdGEoKSB7XHJcbiAgICBjb25zdCBkYXRhID0ge307XHJcbiAgICB0aGlzLmRhdGEuZm9yRWFjaCgocm93LCBpbmRleCkgPT4ge1xyXG4gICAgICBjb25zdCBuZXdSb3cgPSBjbG9uZURlZXAocm93KTsgLy8gdG9kbyDnm7TmjqXmm7/mjaJcclxuICAgICAgbmV3Um93Ll9pc0hvdmVyID0gZmFsc2U7XHJcbiAgICAgIGlmIChuZXdSb3cuX2Rpc2FibGVkKSB7XHJcbiAgICAgICAgbmV3Um93Ll9pc0Rpc2FibGVkID0gbmV3Um93Ll9kaXNhYmxlZDtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBuZXdSb3cuX2lzRGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgICBpZiAobmV3Um93Ll9jaGVja2VkKSB7XHJcbiAgICAgICAgbmV3Um93Ll9pc0NoZWNrZWQgPSBuZXdSb3cuX2NoZWNrZWQ7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgbmV3Um93Ll9pc0NoZWNrZWQgPSBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgICBpZiAobmV3Um93Ll9leHBhbmRlZCkge1xyXG4gICAgICAgIG5ld1Jvdy5faXNFeHBhbmRlZCA9IG5ld1Jvdy5fZXhwYW5kZWQ7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgbmV3Um93Ll9pc0V4cGFuZGVkID0gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKG5ld1Jvdy5faGlnaGxpZ2h0KSB7XHJcbiAgICAgICAgbmV3Um93Ll9pc0hpZ2hsaWdodCA9IG5ld1Jvdy5faGlnaGxpZ2h0O1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIG5ld1Jvdy5faXNIaWdobGlnaHQgPSBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgICBkYXRhW2luZGV4XSA9IG5ld1JvdztcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIGRhdGE7XHJcbiAgfVxyXG4gIC8vIOS/ruaUueWIl++8jOiuvue9ruS4gOS4qumakOiXj+eahCBpZO+8jOS+v+S6juWQjumdoueahOWkmue6p+ihqOWktOWvu+aJvuWvueW6lOeahOWIl++8jOWQpuWImeaJvuS4jeWIsFxyXG4gIG1ha2VDb2x1bW5zSWQoY29sdW1ucykge1xyXG4gICAgcmV0dXJuIGNvbHVtbnMubWFwKChpdGVtKSA9PiB7XHJcbiAgICAgIGlmIChcImNoaWxkcmVuXCIgaW4gaXRlbSkge1xyXG4gICAgICAgIGl0ZW0uY2hpbGRyZW4gPSB0aGlzLm1ha2VDb2x1bW5zSWQoaXRlbS5jaGlsZHJlbik7XHJcbiAgICAgIH1cclxuICAgICAgaXRlbS5fX2lkID0gZ2V0UmFuZG9tU3RyKDYpO1xyXG4gICAgICByZXR1cm4gaXRlbTtcclxuICAgIH0pO1xyXG4gIH1cclxuICBtYWtlQ29sdW1ucyhjb2xzKSB7XHJcbiAgICAvLyDlnKggZGF0YSDml7bvvIx0aGlzLmFsbENvbHVtbnMg5pqC5pe25Li6IHVuZGVmaW5lZFxyXG4gICAgY29uc3QgY29sdW1ucyA9IGNsb25lRGVlcChnZXRBbGxDb2x1bW5zKGNvbHMpKTtcclxuICAgIGNvbnN0IGxlZnQ6IGFueVtdID0gW107XHJcbiAgICBjb25zdCByaWdodDogYW55W10gPSBbXTtcclxuICAgIGNvbnN0IGNlbnRlcjogYW55W10gPSBbXTtcclxuXHJcbiAgICBjb2x1bW5zLmZvckVhY2goKGNvbHVtbiwgaW5kZXgpID0+IHtcclxuICAgICAgY29sdW1uLl9pbmRleCA9IGluZGV4O1xyXG4gICAgICBjb2x1bW4uX2NvbHVtbktleSA9IGNvbHVtbktleSsrO1xyXG4gICAgICBjb2x1bW4uX3dpZHRoID0gY29sdW1uLndpZHRoID8gY29sdW1uLndpZHRoIDogXCJcIjsgLy8gdXBkYXRlIGluIGhhbmRsZVJlc2l6ZSgpXHJcbiAgICAgIGNvbHVtbi5fc29ydFR5cGUgPSBcIm5vcm1hbFwiO1xyXG4gICAgICBjb2x1bW4uX2ZpbHRlclZpc2libGUgPSBmYWxzZTtcclxuICAgICAgY29sdW1uLl9pc0ZpbHRlcmVkID0gZmFsc2U7XHJcbiAgICAgIGNvbHVtbi5fZmlsdGVyQ2hlY2tlZCA9IFtdO1xyXG5cclxuICAgICAgaWYgKFwiZmlsdGVyTXVsdGlwbGVcIiBpbiBjb2x1bW4pIHtcclxuICAgICAgICBjb2x1bW4uX2ZpbHRlck11bHRpcGxlID0gY29sdW1uLmZpbHRlck11bHRpcGxlO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvbHVtbi5fZmlsdGVyTXVsdGlwbGUgPSB0cnVlO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChcImZpbHRlcmVkVmFsdWVcIiBpbiBjb2x1bW4pIHtcclxuICAgICAgICBjb2x1bW4uX2ZpbHRlckNoZWNrZWQgPSBjb2x1bW4uZmlsdGVyZWRWYWx1ZTtcclxuICAgICAgICBjb2x1bW4uX2lzRmlsdGVyZWQgPSB0cnVlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoXCJzb3J0VHlwZVwiIGluIGNvbHVtbikge1xyXG4gICAgICAgIGNvbHVtbi5fc29ydFR5cGUgPSBjb2x1bW4uc29ydFR5cGU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChjb2x1bW4uZml4ZWQgJiYgY29sdW1uLmZpeGVkID09PSBcImxlZnRcIikge1xyXG4gICAgICAgIGxlZnQucHVzaChjb2x1bW4pO1xyXG4gICAgICB9IGVsc2UgaWYgKGNvbHVtbi5maXhlZCAmJiBjb2x1bW4uZml4ZWQgPT09IFwicmlnaHRcIikge1xyXG4gICAgICAgIHJpZ2h0LnB1c2goY29sdW1uKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBjZW50ZXIucHVzaChjb2x1bW4pO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBsZWZ0LmNvbmNhdChjZW50ZXIpLmNvbmNhdChyaWdodCk7XHJcbiAgfVxyXG4gIC8vIGNyZWF0ZSBhIG11bHRpcGxlIHRhYmxlLWhlYWRcclxuICBtYWtlQ29sdW1uUm93cyhmaXhlZFR5cGUsIGNvbHMpIHtcclxuICAgIHJldHVybiBjb252ZXJ0VG9Sb3dzKGNvbHMsIGZpeGVkVHlwZSk7XHJcbiAgfVxyXG4gIGV4cG9ydENzdihwYXJhbXMpIHtcclxuICAgIGlmIChwYXJhbXMuZmlsZW5hbWUpIHtcclxuICAgICAgaWYgKHBhcmFtcy5maWxlbmFtZS5pbmRleE9mKFwiLmNzdlwiKSA9PT0gLTEpIHtcclxuICAgICAgICBwYXJhbXMuZmlsZW5hbWUgKz0gXCIuY3N2XCI7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHBhcmFtcy5maWxlbmFtZSA9IFwidGFibGUuY3N2XCI7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IGNvbHVtbnM6IGFueVtdID0gW107XHJcbiAgICBsZXQgZGF0YXM6IGFueVtdID0gW107XHJcbiAgICBpZiAocGFyYW1zLmNvbHVtbnMgJiYgcGFyYW1zLmRhdGEpIHtcclxuICAgICAgY29sdW1ucyA9IHBhcmFtcy5jb2x1bW5zO1xyXG4gICAgICBkYXRhcyA9IHBhcmFtcy5kYXRhO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29sdW1ucyA9IHRoaXMuYWxsQ29sdW1ucztcclxuICAgICAgaWYgKCEoXCJvcmlnaW5hbFwiIGluIHBhcmFtcykpIHtcclxuICAgICAgICBwYXJhbXMub3JpZ2luYWwgPSB0cnVlO1xyXG4gICAgICB9XHJcbiAgICAgIGRhdGFzID0gcGFyYW1zLm9yaWdpbmFsID8gdGhpcy5kYXRhIDogdGhpcy5yZWJ1aWxkRGF0YTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgbm9IZWFkZXIgPSBmYWxzZTtcclxuICAgIGlmIChcIm5vSGVhZGVyXCIgaW4gcGFyYW1zKSB7XHJcbiAgICAgIG5vSGVhZGVyID0gcGFyYW1zLm5vSGVhZGVyO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGRhdGEgPSBDc3YoY29sdW1ucywgZGF0YXMsIHBhcmFtcywgbm9IZWFkZXIpO1xyXG4gICAgaWYgKHBhcmFtcy5jYWxsYmFjaykge1xyXG4gICAgICBwYXJhbXMuY2FsbGJhY2soZGF0YSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBFeHBvcnRDc3YuZG93bmxvYWQocGFyYW1zLmZpbGVuYW1lLCBkYXRhKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNyZWF0ZWQoKSB7XHJcbiAgICBpZiAoIXRoaXMuY29udGV4dCkge1xyXG4gICAgICB0aGlzLmN1cnJlbnRDb250ZXh0ID0gdGhpcy4kcGFyZW50O1xyXG4gICAgfVxyXG4gICAgdGhpcy5zaG93U2xvdEhlYWRlciA9IHRoaXMuJHNsb3RzLmhlYWRlciAhPT0gdW5kZWZpbmVkO1xyXG4gICAgdGhpcy5zaG93U2xvdEZvb3RlciA9IHRoaXMuJHNsb3RzLmZvb3RlciAhPT0gdW5kZWZpbmVkO1xyXG4gICAgdGhpcy5yZWJ1aWxkRGF0YSA9IHRoaXMubWFrZURhdGFXaXRoU29ydEFuZEZpbHRlcigpO1xyXG4gIH1cclxuICBtb3VudGVkKCkge1xyXG4gICAgdGhpcy5oYW5kbGVSZXNpemUoKTtcclxuICAgIHRoaXMuJG5leHRUaWNrKCgpID0+ICh0aGlzLnJlYWR5ID0gdHJ1ZSkpO1xyXG5cclxuICAgIG9uKHdpbmRvdywgXCJyZXNpemVcIiwgdGhpcy5oYW5kbGVSZXNpemUpO1xyXG4gICAgdGhpcy5vYnNlcnZlciA9IGVsZW1lbnRSZXNpemVEZXRlY3Rvck1ha2VyKCk7XHJcbiAgICB0aGlzLm9ic2VydmVyLmxpc3RlblRvKHRoaXMuJGVsLCB0aGlzLmhhbmRsZVJlc2l6ZSk7XHJcblxyXG4gICAgdGhpcy4kb24oXCJvbi12aXNpYmxlLWNoYW5nZVwiLCAodmFsKSA9PiB7XHJcbiAgICAgIGlmICh2YWwpIHtcclxuICAgICAgICB0aGlzLmhhbmRsZVJlc2l6ZSgpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcbiAgYmVmb3JlRGVzdHJveSgpIHtcclxuICAgIG9mZih3aW5kb3csIFwicmVzaXplXCIsIHRoaXMuaGFuZGxlUmVzaXplKTtcclxuICAgIHRoaXMub2JzZXJ2ZXIucmVtb3ZlTGlzdGVuZXIodGhpcy4kZWwsIHRoaXMuaGFuZGxlUmVzaXplKTtcclxuICB9XHJcbiAgLyoqIG1ldGhvZHMtLUVORCAqL1xyXG59XHJcbiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3RzLWxvYWRlci9pbmRleC5qcz8/cmVmLS0wLTEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi94Yi10YWJsZS1oZWFkLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz10cyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdHMtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTAtMSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL3hiLXRhYmxlLWhlYWQudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiIiwiXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXHJcbmltcG9ydCB7IENvbXBvbmVudCwgUHJvcCwgVnVlLCBNaXhpbnMgfSBmcm9tIFwidnVlLXByb3BlcnR5LWRlY29yYXRvclwiO1xyXG5pbXBvcnQgQ2hlY2tib3hHcm91cCBmcm9tIFwiLi4vLi4veGItY2hlY2tib3gtZ3JvdXBcIjtcclxuaW1wb3J0IENoZWNrYm94IGZyb20gXCIuLi8uLi94Yi1jaGVja2JveFwiO1xyXG5pbXBvcnQgUG9wdGlwIGZyb20gXCIuLi8uLi94Yi1wb3B0aXBcIjtcclxuaW1wb3J0IEJ1dHRvbiBmcm9tIFwiLi4vLi4veGItYnV0dG9uXCI7XHJcbmltcG9ydCByZW5kZXJIZWFkZXIgZnJvbSBcIi4vaGVhZGVyXCI7XHJcbmltcG9ydCBNaXhpbiBmcm9tIFwiLi9taXhpblwiO1xyXG5pbXBvcnQgTG9jYWxlIGZyb20gXCJzcmMvbWl4aW5zL2xvY2FsZVwiO1xyXG5cclxuQENvbXBvbmVudCh7IG5hbWU6IFwiWGJUYWJsZUhlYWRcIiwgY29tcG9uZW50czogeyBDaGVja2JveEdyb3VwLCBDaGVja2JveCwgUG9wdGlwLCBCdXR0b24sIHJlbmRlckhlYWRlciB9IH0pXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFhiVGFibGVIZWFkIGV4dGVuZHMgTWl4aW5zKE1peGluLCBMb2NhbGUpIHtcclxuICBAUHJvcCh7IHR5cGU6IFN0cmluZyB9KVxyXG4gIHByZWZpeENscyE6IHN0cmluZztcclxuICBAUHJvcCh7IHR5cGU6IE9iamVjdCB9KVxyXG4gIHN0eWxlT2JqZWN0ITogQ1NTU3R5bGVEZWNsYXJhdGlvbjtcclxuICBAUHJvcCh7IHR5cGU6IEFycmF5IH0pXHJcbiAgY29sdW1ucyE6IGFueVtdO1xyXG4gIEBQcm9wKHsgdHlwZTogT2JqZWN0IH0pXHJcbiAgb2JqRGF0YSE6IG9iamVjdDtcclxuICBAUHJvcCh7IHR5cGU6IEFycmF5IH0pXHJcbiAgZGF0YSE6IGFueVtdOyAvLyByZWJ1aWxkRGF0YVxyXG4gIEBQcm9wKHsgdHlwZTogT2JqZWN0IH0pXHJcbiAgY29sdW1uc1dpZHRoITogb2JqZWN0O1xyXG4gIEBQcm9wKHtcclxuICAgIHR5cGU6IFtCb29sZWFuLCBTdHJpbmddLFxyXG4gICAgZGVmYXVsdDogZmFsc2UsXHJcbiAgfSlcclxuICBmaXhlZCE6IGJvb2xlYW4gfCBzdHJpbmc7XHJcbiAgQFByb3AoeyB0eXBlOiBBcnJheSB9KVxyXG4gIGNvbHVtblJvd3MhOiBhbnlbXTtcclxuICBAUHJvcCh7IHR5cGU6IEFycmF5IH0pXHJcbiAgZml4ZWRDb2x1bW5Sb3dzITogYW55W107XHJcblxyXG4gIGdldCBzdHlsZXMoKSB7XHJcbiAgICBpZiAodGhpcy5zdHlsZU9iamVjdC53aWR0aCkge1xyXG4gICAgICBjb25zdCBzdHlsZSA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMuc3R5bGVPYmplY3QpO1xyXG4gICAgICBjb25zdCB3aWR0aCA9IHBhcnNlSW50KHRoaXMuc3R5bGVPYmplY3Qud2lkdGgsIDEwKTtcclxuICAgICAgc3R5bGUud2lkdGggPSBgJHt3aWR0aH1weGA7XHJcbiAgICAgIHJldHVybiBzdHlsZTtcclxuICAgIH1cclxuICB9XHJcbiAgZ2V0IGlzU2VsZWN0QWxsKCkge1xyXG4gICAgbGV0IGlzU2VsZWN0QWxsID0gdHJ1ZTtcclxuICAgIGlmICghdGhpcy5kYXRhLmxlbmd0aCkge1xyXG4gICAgICBpc1NlbGVjdEFsbCA9IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgaWYgKCF0aGlzLmRhdGEuZmluZCgoaXRlbSkgPT4gIWl0ZW0uX2Rpc2FibGVkKSkge1xyXG4gICAgICBpc1NlbGVjdEFsbCA9IGZhbHNlO1xyXG4gICAgfSAvLyAjMTc1MVxyXG4gICAgZm9yIChjb25zdCBkYXRhIG9mIHRoaXMuZGF0YSkge1xyXG4gICAgICBpZiAoIXRoaXMub2JqRGF0YVtkYXRhLl9pbmRleF0uX2lzQ2hlY2tlZCAmJiAhdGhpcy5vYmpEYXRhW2RhdGEuX2luZGV4XS5faXNEaXNhYmxlZCkge1xyXG4gICAgICAgIGlzU2VsZWN0QWxsID0gZmFsc2U7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gaXNTZWxlY3RBbGw7XHJcbiAgfVxyXG4gIGdldCBoZWFkUm93cygpIHtcclxuICAgIGNvbnN0IGlzR3JvdXAgPSB0aGlzLmNvbHVtblJvd3MubGVuZ3RoID4gMTtcclxuICAgIGlmIChpc0dyb3VwKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmZpeGVkID8gdGhpcy5maXhlZENvbHVtblJvd3MgOiB0aGlzLmNvbHVtblJvd3M7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gW3RoaXMuY29sdW1uc107XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjZWxsQ2xhc3Nlcyhjb2x1bW4pIHtcclxuICAgIHJldHVybiBbXHJcbiAgICAgIGAke3RoaXMucHJlZml4Q2xzfS1jZWxsYCxcclxuICAgICAge1xyXG4gICAgICAgIFtgJHt0aGlzLnByZWZpeENsc30taGlkZGVuYF06XHJcbiAgICAgICAgICAhdGhpcy5maXhlZCAmJiBjb2x1bW4uZml4ZWQgJiYgKGNvbHVtbi5maXhlZCA9PT0gXCJsZWZ0XCIgfHwgY29sdW1uLmZpeGVkID09PSBcInJpZ2h0XCIpLFxyXG4gICAgICB9LFxyXG4gICAgXTtcclxuICB9XHJcbiAgc2Nyb2xsQmFyQ2VsbENsYXNzKCkge1xyXG4gICAgbGV0IGhhc1JpZ2h0Rml4ZWQgPSBmYWxzZTtcclxuICAgIGZvciAoY29uc3QgaGVhZFJvd3Mgb2YgdGhpcy5oZWFkUm93cykge1xyXG4gICAgICBmb3IgKGNvbnN0IGhlYWRSb3cgb2YgaGVhZFJvd3MpIHtcclxuICAgICAgICBpZiAoaGVhZFJvdy5maXhlZCA9PT0gXCJyaWdodFwiKSB7XHJcbiAgICAgICAgICBoYXNSaWdodEZpeGVkID0gdHJ1ZTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaGFzUmlnaHRGaXhlZCkge1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gW1xyXG4gICAgICB7XHJcbiAgICAgICAgW2Ake3RoaXMucHJlZml4Q2xzfS1oaWRkZW5gXTogaGFzUmlnaHRGaXhlZCxcclxuICAgICAgfSxcclxuICAgIF07XHJcbiAgfVxyXG4gIGl0ZW1DbGFzc2VzKGNvbHVtbiwgaXRlbSkge1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAgYCR7dGhpcy5wcmVmaXhDbHN9LWZpbHRlci1zZWxlY3QtaXRlbWAsXHJcbiAgICAgIHtcclxuICAgICAgICBbYCR7dGhpcy5wcmVmaXhDbHN9LWZpbHRlci1zZWxlY3QtaXRlbS1zZWxlY3RlZGBdOiBjb2x1bW4uX2ZpbHRlckNoZWNrZWRbMF0gPT09IGl0ZW0udmFsdWUsXHJcbiAgICAgIH0sXHJcbiAgICBdO1xyXG4gIH1cclxuICBpdGVtQWxsQ2xhc3Nlcyhjb2x1bW4pIHtcclxuICAgIHJldHVybiBbXHJcbiAgICAgIGAke3RoaXMucHJlZml4Q2xzfS1maWx0ZXItc2VsZWN0LWl0ZW1gLFxyXG4gICAgICB7XHJcbiAgICAgICAgW2Ake3RoaXMucHJlZml4Q2xzfS1maWx0ZXItc2VsZWN0LWl0ZW0tc2VsZWN0ZWRgXTogIWNvbHVtbi5fZmlsdGVyQ2hlY2tlZC5sZW5ndGgsXHJcbiAgICAgIH0sXHJcbiAgICBdO1xyXG4gIH1cclxuICBzZWxlY3RBbGwoKSB7XHJcbiAgICBjb25zdCBzdGF0dXMgPSAhdGhpcy5pc1NlbGVjdEFsbDtcclxuICAgIHRoaXMuJHBhcmVudC5zZWxlY3RBbGwoc3RhdHVzKTtcclxuICB9XHJcbiAgaGFuZGxlU29ydChpbmRleCwgdHlwZSkge1xyXG4gICAgY29uc3QgY29sdW1uID0gdGhpcy5jb2x1bW5zW2luZGV4XTtcclxuICAgIGNvbnN0IF9pbmRleCA9IGNvbHVtbi5faW5kZXg7XHJcblxyXG4gICAgaWYgKGNvbHVtbi5fc29ydFR5cGUgPT09IHR5cGUpIHtcclxuICAgICAgdHlwZSA9IFwibm9ybWFsXCI7XHJcbiAgICB9XHJcbiAgICB0aGlzLiRwYXJlbnQuaGFuZGxlU29ydChfaW5kZXgsIHR5cGUpO1xyXG4gIH1cclxuICBoYW5kbGVTb3J0QnlIZWFkKGluZGV4KSB7XHJcbiAgICBjb25zdCBjb2x1bW4gPSB0aGlzLmNvbHVtbnNbaW5kZXhdO1xyXG4gICAgaWYgKGNvbHVtbi5zb3J0YWJsZSkge1xyXG4gICAgICBjb25zdCB0eXBlID0gY29sdW1uLl9zb3J0VHlwZTtcclxuICAgICAgaWYgKHR5cGUgPT09IFwibm9ybWFsXCIpIHtcclxuICAgICAgICB0aGlzLmhhbmRsZVNvcnQoaW5kZXgsIFwiYXNjXCIpO1xyXG4gICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IFwiYXNjXCIpIHtcclxuICAgICAgICB0aGlzLmhhbmRsZVNvcnQoaW5kZXgsIFwiZGVzY1wiKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLmhhbmRsZVNvcnQoaW5kZXgsIFwibm9ybWFsXCIpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIGhhbmRsZUZpbHRlcihpbmRleCkge1xyXG4gICAgdGhpcy4kcGFyZW50LmhhbmRsZUZpbHRlcihpbmRleCk7XHJcbiAgfVxyXG4gIGhhbmRsZVNlbGVjdChpbmRleCwgdmFsdWUpIHtcclxuICAgIHRoaXMuJHBhcmVudC5oYW5kbGVGaWx0ZXJTZWxlY3QoaW5kZXgsIHZhbHVlKTtcclxuICB9XHJcbiAgaGFuZGxlUmVzZXQoaW5kZXgpIHtcclxuICAgIHRoaXMuJHBhcmVudC5oYW5kbGVGaWx0ZXJSZXNldChpbmRleCk7XHJcbiAgfVxyXG4gIGhhbmRsZUZpbHRlckhpZGUoaW5kZXgpIHtcclxuICAgIHRoaXMuJHBhcmVudC5oYW5kbGVGaWx0ZXJIaWRlKGluZGV4KTtcclxuICB9XHJcbiAgLy8g5Zug5Li66KGo5aS05bWM5aWX5LiN5piv5rex5ou36LSd77yM5omA5Lul5rKh5pyJIF8g5byA5aS055qE5pa55rOV77yM5ZyoIGlzR3JvdXAg5LiL55So5q2k5YiXXHJcbiAgZ2V0Q29sdW1uKHJvd0luZGV4LCBpbmRleCkge1xyXG4gICAgY29uc3QgaXNHcm91cCA9IHRoaXMuY29sdW1uUm93cy5sZW5ndGggPiAxO1xyXG5cclxuICAgIGlmIChpc0dyb3VwKSB7XHJcbiAgICAgIGNvbnN0IGlkID0gdGhpcy5oZWFkUm93c1tyb3dJbmRleF1baW5kZXhdLl9faWQ7XHJcbiAgICAgIHJldHVybiB0aGlzLmNvbHVtbnMuZmlsdGVyKChpdGVtKSA9PiBpdGVtLl9faWQgPT09IGlkKVswXTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmhlYWRSb3dzW3Jvd0luZGV4XVtpbmRleF07XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3RzLWxvYWRlci9pbmRleC5qcz8/cmVmLS0wLTEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi94Yi10YWJsZS1ib2R5LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz10cyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdHMtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTAtMSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL3hiLXRhYmxlLWJvZHkudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiIiwiXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cclxuaW1wb3J0IHsgQ29tcG9uZW50LCBQcm9wLCBWdWUsIE1peGlucyB9IGZyb20gXCJ2dWUtcHJvcGVydHktZGVjb3JhdG9yXCI7XHJcbmltcG9ydCBYYlRhYmxlVHIgZnJvbSBcIi4veGItdGFibGUtdHIudnVlXCI7XHJcbmltcG9ydCBDZWxsIGZyb20gXCIuL3hiLWNlbGwudnVlXCI7XHJcbmltcG9ydCBFeHBhbmQgZnJvbSBcIi4vZXhwYW5kXCI7XHJcbmltcG9ydCBNaXhpbiBmcm9tIFwiLi9taXhpblwiO1xyXG5cclxuQENvbXBvbmVudCh7IG5hbWU6IFwiWGJUYWJsZUJvZHlcIiwgY29tcG9uZW50czogeyBDZWxsLCBFeHBhbmQsIFhiVGFibGVUciB9IH0pXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFhiVGFibGVCb2R5IGV4dGVuZHMgTWl4aW5zKE1peGluKSB7XHJcbiAgQFByb3AoeyB0eXBlOiBTdHJpbmcgfSlcclxuICBwcmVmaXhDbHMhOiBzdHJpbmc7XHJcbiAgQFByb3AoeyB0eXBlOiBPYmplY3QgfSlcclxuICBzdHlsZU9iamVjdCE6IG9iamVjdDtcclxuICBAUHJvcCh7IHR5cGU6IEFycmF5IH0pXHJcbiAgY29sdW1ucyE6IGFueVtdO1xyXG4gIEBQcm9wKHsgdHlwZTogQXJyYXkgfSlcclxuICBkYXRhITogYW55W107IC8vIHJlYnVpbGREYXRhXHJcbiAgQFByb3AoeyB0eXBlOiBPYmplY3QgfSlcclxuICBvYmpEYXRhITogb2JqZWN0O1xyXG4gIEBQcm9wKHsgdHlwZTogT2JqZWN0IH0pXHJcbiAgY29sdW1uc1dpZHRoITogb2JqZWN0O1xyXG4gIEBQcm9wKHtcclxuICAgIHR5cGU6IFtCb29sZWFuLCBTdHJpbmddLFxyXG4gICAgZGVmYXVsdDogZmFsc2UsXHJcbiAgfSlcclxuICBmaXhlZCE6IGJvb2xlYW4gfCBzdHJpbmc7XHJcblxyXG4gIGdldCBleHBhbmRSZW5kZXIoKSB7XHJcbiAgICBsZXQgcmVuZGVyID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHJldHVybiBcIlwiO1xyXG4gICAgfTtcclxuICAgIGZvciAoY29uc3QgY29sdW1uIG9mIHRoaXMuY29sdW1ucykge1xyXG4gICAgICBpZiAoY29sdW1uLnR5cGUgJiYgY29sdW1uLnR5cGUgPT09IFwiZXhwYW5kXCIpIHtcclxuICAgICAgICBpZiAoY29sdW1uLnJlbmRlcikge1xyXG4gICAgICAgICAgcmVuZGVyID0gY29sdW1uLnJlbmRlcjtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiByZW5kZXI7XHJcbiAgfVxyXG5cclxuICByb3dDaGVja2VkKGluZGV4KSB7XHJcbiAgICByZXR1cm4gdGhpcy5vYmpEYXRhW2luZGV4XSAmJiB0aGlzLm9iakRhdGFbaW5kZXhdLl9pc0NoZWNrZWQ7XHJcbiAgfVxyXG4gIHJvd0Rpc2FibGVkKGluZGV4KSB7XHJcbiAgICByZXR1cm4gdGhpcy5vYmpEYXRhW2luZGV4XSAmJiB0aGlzLm9iakRhdGFbaW5kZXhdLl9pc0Rpc2FibGVkO1xyXG4gIH1cclxuICByb3dFeHBhbmRlZChpbmRleCkge1xyXG4gICAgcmV0dXJuIHRoaXMub2JqRGF0YVtpbmRleF0gJiYgdGhpcy5vYmpEYXRhW2luZGV4XS5faXNFeHBhbmRlZDtcclxuICB9XHJcbiAgaGFuZGxlTW91c2VJbihpbmRleCkge1xyXG4gICAgdGhpcy4kcGFyZW50LmhhbmRsZU1vdXNlSW4oaW5kZXgpO1xyXG4gIH1cclxuICBoYW5kbGVNb3VzZU91dChpbmRleCkge1xyXG4gICAgdGhpcy4kcGFyZW50LmhhbmRsZU1vdXNlT3V0KGluZGV4KTtcclxuICB9XHJcbiAgY2xpY2tDdXJyZW50Um93KGluZGV4KSB7XHJcbiAgICB0aGlzLiRwYXJlbnQuY2xpY2tDdXJyZW50Um93KGluZGV4KTtcclxuICB9XHJcbiAgZGJsY2xpY2tDdXJyZW50Um93KGluZGV4KSB7XHJcbiAgICB0aGlzLiRwYXJlbnQuZGJsY2xpY2tDdXJyZW50Um93KGluZGV4KTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdHMtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTAtMSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL3hiLXRhYmxlLXRyLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz10cyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdHMtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTAtMSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL3hiLXRhYmxlLXRyLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz10cyZcIiIsIlxuXG5cblxuXG5cclxuaW1wb3J0IHsgQ29tcG9uZW50LCBQcm9wLCBWdWUgfSBmcm9tIFwidnVlLXByb3BlcnR5LWRlY29yYXRvclwiO1xyXG5AQ29tcG9uZW50KHsgbmFtZTogXCJYYlRhYmxlVHJcIiB9KVxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBYYlRhYmxlVHIgZXh0ZW5kcyBWdWUge1xyXG4gIEBQcm9wKHsgdHlwZTogT2JqZWN0IH0pXHJcbiAgcm93ITogb2JqZWN0O1xyXG4gIEBQcm9wKHsgdHlwZTogU3RyaW5nIH0pXHJcbiAgcHJlZml4Q2xzITogc3RyaW5nO1xyXG5cclxuICBnZXQgb2JqRGF0YSgpIHtcclxuICAgIHJldHVybiB0aGlzLiRwYXJlbnQub2JqRGF0YTtcclxuICB9XHJcblxyXG4gIHJvd0NsYXNzZXMoaW5kZXgpIHtcclxuICAgIHJldHVybiBbXHJcbiAgICAgIGAke3RoaXMucHJlZml4Q2xzfS1yb3dgLFxyXG4gICAgICB0aGlzLnJvd0Nsc05hbWUoaW5kZXgpLFxyXG4gICAgICB7XHJcbiAgICAgICAgW2Ake3RoaXMucHJlZml4Q2xzfS1yb3ctaGlnaGxpZ2h0YF06IHRoaXMub2JqRGF0YVtpbmRleF0gJiYgdGhpcy5vYmpEYXRhW2luZGV4XS5faXNIaWdobGlnaHQsXHJcbiAgICAgICAgW2Ake3RoaXMucHJlZml4Q2xzfS1yb3ctaG92ZXJgXTogdGhpcy5vYmpEYXRhW2luZGV4XSAmJiB0aGlzLm9iakRhdGFbaW5kZXhdLl9pc0hvdmVyLFxyXG4gICAgICB9LFxyXG4gICAgXTtcclxuICB9XHJcblxyXG4gIHJvd0Nsc05hbWUoaW5kZXgpIHtcclxuICAgIHJldHVybiB0aGlzLiRwYXJlbnQuJHBhcmVudC5yb3dDbGFzc05hbWUodGhpcy5vYmpEYXRhW2luZGV4XSwgaW5kZXgpO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy90cy1sb2FkZXIvaW5kZXguanM/P3JlZi0tMC0xIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4veGItY2VsbC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9dHMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3RzLWxvYWRlci9pbmRleC5qcz8/cmVmLS0wLTEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi94Yi1jZWxsLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz10cyZcIiIsIlxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxyXG5pbXBvcnQgeyBDb21wb25lbnQsIFByb3AsIFZ1ZSwgTWl4aW5zIH0gZnJvbSBcInZ1ZS1wcm9wZXJ0eS1kZWNvcmF0b3JcIjtcclxuaW1wb3J0IENlbGwgZnJvbSBcIi4vZXhwYW5kXCI7XHJcbmltcG9ydCBJY29uIGZyb20gXCIuLi8uLi94Yi1pY29uXCI7XHJcbmltcG9ydCBDaGVja2JveCBmcm9tIFwiLi4vLi4veGItY2hlY2tib3hcIjtcclxuXHJcbkBDb21wb25lbnQoeyBuYW1lOiBcIlhiVGFibGVDZWxsXCIsIGNvbXBvbmVudHM6IHsgSWNvbiwgQ2hlY2tib3gsIENlbGwgfSB9KVxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBYYlRhYmxlQ2VsbCBleHRlbmRzIFZ1ZSB7XHJcbiAgQFByb3AoeyB0eXBlOiBTdHJpbmcgfSlcclxuICBwcmVmaXhDbHMhOiBzdHJpbmc7XHJcbiAgQFByb3AoeyB0eXBlOiBPYmplY3QgfSlcclxuICByb3chOiBvYmplY3Q7XHJcbiAgQFByb3AoeyB0eXBlOiBPYmplY3QgfSlcclxuICBjb2x1bW4hOiBvYmplY3Q7XHJcbiAgQFByb3AoeyB0eXBlOiBOdW1iZXIgfSlcclxuICBuYXR1cmFsSW5kZXghOiBudW1iZXI7IC8vIGluZGV4IG9mIHJlYnVpbGREYXRhXHJcbiAgQFByb3AoeyB0eXBlOiBOdW1iZXIgfSlcclxuICBpbmRleCE6IG51bWJlcjsgLy8gX2luZGV4IG9mIGRhdGFcclxuICBAUHJvcCh7IHR5cGU6IEJvb2xlYW4gfSlcclxuICBjaGVja2VkITogYm9vbGVhbjtcclxuICBAUHJvcCh7IHR5cGU6IEJvb2xlYW4gfSlcclxuICBkaXNhYmxlZCE6IGJvb2xlYW47XHJcbiAgQFByb3AoeyB0eXBlOiBCb29sZWFuIH0pXHJcbiAgZXhwYW5kZWQhOiBib29sZWFuO1xyXG4gIEBQcm9wKHsgdHlwZTogW0Jvb2xlYW4sIFN0cmluZ10sIGRlZmF1bHQ6IGZhbHNlIH0pXHJcbiAgZml4ZWQhOiBib29sZWFuIHwgc3RyaW5nO1xyXG5cclxuICByZW5kZXJUeXBlOiBzdHJpbmcgPSBcIlwiO1xyXG4gIHVpZDogbnVtYmVyID0gLTE7XHJcbiAgY29udGV4dDogYW55ID0gdGhpcy4kcGFyZW50LiRwYXJlbnQuJHBhcmVudC5jdXJyZW50Q29udGV4dDtcclxuXHJcbiAgZ2V0IGNsYXNzZXMoKSB7XHJcbiAgICByZXR1cm4gW1xyXG4gICAgICBgJHt0aGlzLnByZWZpeENsc30tY2VsbGAsXHJcbiAgICAgIHtcclxuICAgICAgICBbYCR7dGhpcy5wcmVmaXhDbHN9LWhpZGRlbmBdOlxyXG4gICAgICAgICAgIXRoaXMuZml4ZWQgJiYgdGhpcy5jb2x1bW4uZml4ZWQgJiYgKHRoaXMuY29sdW1uLmZpeGVkID09PSBcImxlZnRcIiB8fCB0aGlzLmNvbHVtbi5maXhlZCA9PT0gXCJyaWdodFwiKSxcclxuICAgICAgICBbYCR7dGhpcy5wcmVmaXhDbHN9LWNlbGwtZWxsaXBzaXNgXTogdGhpcy5jb2x1bW4uZWxsaXBzaXMgfHwgZmFsc2UsXHJcbiAgICAgICAgW2Ake3RoaXMucHJlZml4Q2xzfS1jZWxsLXdpdGgtZXhwYW5kYF06IHRoaXMucmVuZGVyVHlwZSA9PT0gXCJleHBhbmRcIixcclxuICAgICAgfSxcclxuICAgIF07XHJcbiAgfVxyXG4gIGdldCBleHBhbmRDbHMoKSB7XHJcbiAgICByZXR1cm4gW1xyXG4gICAgICBgJHt0aGlzLnByZWZpeENsc30tY2VsbC1leHBhbmRgLFxyXG4gICAgICB7XHJcbiAgICAgICAgW2Ake3RoaXMucHJlZml4Q2xzfS1jZWxsLWV4cGFuZC1leHBhbmRlZGBdOiB0aGlzLmV4cGFuZGVkLFxyXG4gICAgICB9LFxyXG4gICAgXTtcclxuICB9XHJcblxyXG4gIHRvZ2dsZVNlbGVjdCgpIHtcclxuICAgIHRoaXMuJHBhcmVudC4kcGFyZW50LiRwYXJlbnQudG9nZ2xlU2VsZWN0KHRoaXMuaW5kZXgpO1xyXG4gIH1cclxuICB0b2dnbGVFeHBhbmQoKSB7XHJcbiAgICB0aGlzLiRwYXJlbnQuJHBhcmVudC4kcGFyZW50LnRvZ2dsZUV4cGFuZCh0aGlzLmluZGV4KTtcclxuICB9XHJcbiAgaGFuZGxlQ2xpY2soKSB7XHJcbiAgICAvLyDmlL7nva4gQ2hlY2tib3gg5YaS5rOhXHJcbiAgfVxyXG4gIGNyZWF0ZWQoKSB7XHJcbiAgICBpZiAodGhpcy5jb2x1bW4udHlwZSA9PT0gXCJpbmRleFwiKSB7XHJcbiAgICAgIHRoaXMucmVuZGVyVHlwZSA9IFwiaW5kZXhcIjtcclxuICAgIH0gZWxzZSBpZiAodGhpcy5jb2x1bW4udHlwZSA9PT0gXCJzZWxlY3Rpb25cIikge1xyXG4gICAgICB0aGlzLnJlbmRlclR5cGUgPSBcInNlbGVjdGlvblwiO1xyXG4gICAgfSBlbHNlIGlmICh0aGlzLmNvbHVtbi50eXBlID09PSBcImh0bWxcIikge1xyXG4gICAgICB0aGlzLnJlbmRlclR5cGUgPSBcImh0bWxcIjtcclxuICAgIH0gZWxzZSBpZiAodGhpcy5jb2x1bW4udHlwZSA9PT0gXCJleHBhbmRcIikge1xyXG4gICAgICB0aGlzLnJlbmRlclR5cGUgPSBcImV4cGFuZFwiO1xyXG4gICAgfSBlbHNlIGlmICh0aGlzLmNvbHVtbi5yZW5kZXIpIHtcclxuICAgICAgdGhpcy5yZW5kZXJUeXBlID0gXCJyZW5kZXJcIjtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMucmVuZGVyVHlwZSA9IFwibm9ybWFsXCI7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3RzLWxvYWRlci9pbmRleC5qcz8/cmVmLS0wLTEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi94Yi10ZXh0LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz10cyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdHMtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTAtMSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL3hiLXRleHQudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiIiwiXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxyXG5pbXBvcnQgeyBDb21wb25lbnQsIFByb3AsIFZ1ZSB9IGZyb20gXCJ2dWUtcHJvcGVydHktZGVjb3JhdG9yXCI7XHJcbmltcG9ydCB7IGNsZWFyVGltZW91dCB9IGZyb20gXCJ0aW1lcnNcIjtcclxuY29uc3QgcHJlZml4Q2xzID0gXCJ4YnVpLXRleHRcIjtcclxuQENvbXBvbmVudCh7IG5hbWU6IFwiWGJUZXh0XCIgfSlcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgWGJUZXh0IGV4dGVuZHMgVnVlIHtcclxuICAvKiog57G75Z6L77yI6buY6K6k5Li6aW5wdXTvvIzkvKDlgLzlj6/lhYHorrjkuLp0ZXh0YXJlYe+8iSAqL1xyXG4gIEBQcm9wKHsgZGVmYXVsdDogXCJ0ZXh0XCIgfSlcclxuICB0eXBlITogc3RyaW5nO1xyXG5cclxuICAvKiog5Yid5aeL5YC8ICovXHJcbiAgQFByb3AoeyBkZWZhdWx0OiBcIuivt+i+k+WFpVwiIH0pXHJcbiAgcGxhY2VIb2xkZXIhOiBzdHJpbmc7XHJcblxyXG4gIC8qKiDnpoHnlKggKi9cclxuICBAUHJvcCh7IGRlZmF1bHQ6IGZhbHNlIH0pXHJcbiAgZGlzYWJsZWQhOiBib29sZWFuO1xyXG5cclxuICAvKiog56aB55SoICovXHJcbiAgQFByb3AoeyBkZWZhdWx0OiBmYWxzZSB9KVxyXG4gIHJlYWRvbmx5ITogYm9vbGVhbjtcclxuXHJcbiAgLyoqIOa4heepuu+8jOaIkOWKn++8jOWksei0peeKtuaAgSAqL1xyXG4gIEBQcm9wKHsgZGVmYXVsdDogXCJcIiB9KVxyXG4gIHN0YXR1cyE6IHN0cmluZztcclxuXHJcbiAgLyoqIOmmlumDqCDlop7liqDoh6rlrprkuYnnmoRpY29u5Zu+5qCHICovXHJcbiAgQFByb3AoeyBkZWZhdWx0OiBcIlwiIH0pXHJcbiAgcHJlZml4SWNvbiE6IHN0cmluZztcclxuXHJcbiAgLyoqIOWwvumDqCDlop7liqDoh6rlrprkuYnnmoRpY29u5Zu+5qCHICovXHJcbiAgQFByb3AoeyBkZWZhdWx0OiBcIlwiIH0pXHJcbiAgc3VmZml4SWNvbiE6IHN0cmluZztcclxuXHJcbiAgLyoqIOWvuWljb27moLflvI/ov5vooYzlpITnkIbvvIjlj6rmnInlnKjmnInlrZjlnKhpY29u55qE5pe25YCZ77yM5q2k5Y+C5pWw5omN5Lya5pyJ55So77yJICovXHJcbiAgQFByb3AoKVxyXG4gIGljb25TdHlsZSE6IG9iamVjdDtcclxuXHJcbiAgLyoqIGlucHV05qC35byPICovXHJcbiAgQFByb3AoKVxyXG4gIGlucHV0U3R5bGUhOiBvYmplY3Q7XHJcblxyXG4gIC8qKiDovpPlhaXmoYblsLrlr7jvvIznu4Tku7blhoXmj5Dkvpsz56eNICovXHJcbiAgQFByb3AoeyBkZWZhdWx0OiBcIm1lZGl1bVwiIH0pXHJcbiAgc2l6ZSE6IHN0cmluZztcclxuXHJcbiAgLyoqIOWPr+i+k+WFpeeahOacgOWkp+Wtl+espuS4sumVv+W6piAqL1xyXG4gIEBQcm9wKClcclxuICBtYXhsZW5ndGghOiBudW1iZXI7XHJcblxyXG4gIC8qKiDmnIDlpKflgLwgKi9cclxuICBAUHJvcCgpXHJcbiAgbWF4TnVtITogbnVtYmVyO1xyXG5cclxuICAvKiog5q2j5YiZ6KGo6L6+5byPICovXHJcbiAgQFByb3AoKVxyXG4gIHJlZ0V4cCE6IHN0cmluZztcclxuXHJcbiAgLyoqIHRleHRhcmVhIOWxleekuuihjOaVsCAqL1xyXG4gIEBQcm9wKHsgZGVmYXVsdDogMiB9KVxyXG4gIHJvd3MhOiBudW1iZXI7XHJcblxyXG4gIC8qKiB0ZXh0YXJlYSDlsZXnpLrooYzmlbAgKi9cclxuICBAUHJvcCh7IGRlZmF1bHQ6IGZhbHNlIH0pXHJcbiAgYXV0b3NpemUhOiBib29sZWFuIHwgb2JqZWN0O1xyXG5cclxuICBudW06IGFueSA9IFwiXCI7XHJcbiAgdGV4dFZhbHVlOiBhbnkgPSBcIlwiO1xyXG4gIHNob3dOdW06IG51bWJlciA9IDA7XHJcbiAgaGVpZ2h0TnVtOiBudW1iZXIgPSB0aGlzLnJvd3MgKiAyMDtcclxuXHJcbiAgLy8gaW5wdXTlrp7ml7bovpPlhaXlpITnkIZcclxuICBpbnB1dENoYW5nZShpbmZvKSB7XHJcbiAgICBpZiAodGhpcy5tYXhOdW0pIHtcclxuICAgICAgLy8g5aaC5p6c5a2Y5Zyo5pyA5aSn5YC877yM5YiZ5Y+q5YWB6K646L6T5YWl57qv5pWw5a2XXHJcbiAgICAgIGNvbnN0IHJlZ051bSA9IC9eKDB8WzEtOV1cXGQqKShcXC5cXGR7MSwxMDAwMH0/KT8kLztcclxuXHJcbiAgICAgIC8vIOWtmOWcqOato+WImVxyXG4gICAgICBpZiAodGhpcy5yZWdFeHApIHtcclxuICAgICAgICBpZiAobmV3IFJlZ0V4cCh0aGlzLnJlZ0V4cCkudGVzdChpbmZvKSAmJiBuZXcgUmVnRXhwKHJlZ051bSkudGVzdChpbmZvKSkge1xyXG4gICAgICAgICAgaWYgKGluZm8gPiB0aGlzLm1heE51bSkge1xyXG4gICAgICAgICAgICB0aGlzLm51bSA9IHRoaXMuc2hvd051bTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMubnVtID0gaW5mbztcclxuICAgICAgICAgICAgdGhpcy5zaG93TnVtID0gaW5mbztcclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdGhpcy5udW0gPSB0aGlzLnNob3dOdW07XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGlmIChuZXcgUmVnRXhwKHJlZ051bSkudGVzdChpbmZvKSkge1xyXG4gICAgICAgICAgLy8g5pWw5a2XXHJcbiAgICAgICAgICBpZiAoaW5mbyA+IHRoaXMubWF4TnVtKSB7XHJcbiAgICAgICAgICAgIHRoaXMubnVtID0gdGhpcy5zaG93TnVtO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5udW0gPSBpbmZvO1xyXG4gICAgICAgICAgICB0aGlzLnNob3dOdW0gPSBpbmZvO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAvLyDpnZ7mlbDlrZdcclxuICAgICAgICAgIHRoaXMubnVtID0gdGhpcy5zaG93TnVtO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSBlbHNlIGlmICh0aGlzLnJlZ0V4cCkge1xyXG4gICAgICBpZiAobmV3IFJlZ0V4cCh0aGlzLnJlZ0V4cCkudGVzdChpbmZvKSkge1xyXG4gICAgICAgIHRoaXMubnVtID0gaW5mbztcclxuICAgICAgICB0aGlzLnNob3dOdW0gPSBpbmZvO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMubnVtID0gaW5mbyA/IHRoaXMuc2hvd051bSA6IFwiXCI7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIHRleHRhcmVh5a6e5pe26L6T5YWl5aSE55CGXHJcbiAgdGV4dGFyZWFDaGFuZ2UoKSB7XHJcbiAgICBpZiAodGhpcy5hdXRvc2l6ZSA9PT0gdHJ1ZSkge1xyXG4gICAgICBsZXQgdGV4dGFyZWFIdG1sO1xyXG4gICAgICB0ZXh0YXJlYUh0bWwgPSB0aGlzLiRlbC5xdWVyeVNlbGVjdG9yKFwidGV4dGFyZWFcIik7XHJcbiAgICAgIC8vIOa7muWKqOmrmOW6plxyXG4gICAgICBsZXQgX3Njcm9sbEhlaWdodCA9IDA7XHJcbiAgICAgIF9zY3JvbGxIZWlnaHQgPSB0ZXh0YXJlYUh0bWwuc2Nyb2xsSGVpZ2h0O1xyXG4gICAgICBpZiAoX3Njcm9sbEhlaWdodCAtIHRoaXMuaGVpZ2h0TnVtID4gMTApIHtcclxuICAgICAgICAvLyDkv67mlLnpobXpnaLpq5jluqZcclxuICAgICAgICB0aGlzLmhlaWdodE51bSA9IF9zY3JvbGxIZWlnaHQ7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSBpZiAodHlwZW9mIHRoaXMuYXV0b3NpemUgPT09IFwib2JqZWN0XCIgJiYgQXJyYXkuaXNBcnJheSh0aGlzLmF1dG9zaXplKSA9PT0gZmFsc2UpIHtcclxuICAgICAgLy8g5Lyg5YWl55qE5piv5LiA5Liqb2Jq5a+56LGh77yM5YaF5ZCr5pyA5bCP6KGM5pWw5ZKM5pyA5aSn6KGM5pWwXHJcbiAgICAgIGxldCB0ZXh0YXJlYUh0bWw7XHJcbiAgICAgIHRleHRhcmVhSHRtbCA9IHRoaXMuJGVsLnF1ZXJ5U2VsZWN0b3IoXCJ0ZXh0YXJlYVwiKTtcclxuICAgICAgLy8g5rua5Yqo6auY5bqmXHJcbiAgICAgIGxldCBfc2Nyb2xsSGVpZ2h0ID0gMDtcclxuICAgICAgX3Njcm9sbEhlaWdodCA9IHRleHRhcmVhSHRtbC5zY3JvbGxIZWlnaHQ7XHJcbiAgICAgIGlmIChfc2Nyb2xsSGVpZ2h0IC0gdGhpcy5oZWlnaHROdW0gPiAxMCkge1xyXG4gICAgICAgIC8vIOS/ruaUuemhtemdoumrmOW6plxyXG4gICAgICAgIHRoaXMuaGVpZ2h0TnVtID0gX3Njcm9sbEhlaWdodDtcclxuICAgICAgfVxyXG4gICAgICB0ZXh0YXJlYUh0bWwuc3R5bGUubWluSGVpZ2h0ID0gdGhpcy5hdXRvc2l6ZS5taW4gKiAyMCArIDEwICsgXCJweFwiO1xyXG4gICAgICB0ZXh0YXJlYUh0bWwuc3R5bGUubWF4SGVpZ2h0ID0gdGhpcy5hdXRvc2l6ZS5tYXggKiAyMCArIDEwICsgXCJweFwiO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8g5riF56m66L6T5YWl5YaF5a65XHJcbiAgY2xlYXJDbGljaygpIHtcclxuICAgIHRoaXMubnVtID0gXCJcIjtcclxuICAgIHRoaXMuc2hvd051bSA9IDA7XHJcbiAgfVxyXG5cclxuICAvLyDmoLflvI9cclxuICBnZXQgY2xhc3Nlc1RleHREaXYoKSB7XHJcbiAgICByZXR1cm4gW2Ake3ByZWZpeENsc30tZGl2YF07XHJcbiAgfVxyXG4gIC8vIGlucHV06L6T5YWl5qGGXHJcbiAgZ2V0IGNsYXNzZXNUZXh0KCkge1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAgYCR7cHJlZml4Q2xzfS1pbnB1dGAsXHJcbiAgICAgIHtcclxuICAgICAgICBbYCR7cHJlZml4Q2xzfS1pbnB1dC1sYXJnZWBdOiB0aGlzLnNpemUgPT09IFwibGFyZ2VcIixcclxuICAgICAgICBbYCR7cHJlZml4Q2xzfS1pbnB1dC1tZWRpdW1gXTogdGhpcy5zaXplID09PSBcIm1lZGl1bVwiLFxyXG4gICAgICAgIFtgJHtwcmVmaXhDbHN9LWlucHV0LXNtYWxsYF06IHRoaXMuc2l6ZSA9PT0gXCJzbWFsbFwiLFxyXG4gICAgICAgIFtgJHtwcmVmaXhDbHN9LWRpc2FibGVkYF06IHRoaXMuZGlzYWJsZWQsXHJcbiAgICAgICAgW2Ake3ByZWZpeENsc30tY2xlYXJhYmxlYF06IHRoaXMuc3RhdHVzID09PSBcImNsZWFyYWJsZVwiLFxyXG4gICAgICAgIFtgJHtwcmVmaXhDbHN9LWZhaWwtaW5wdXRgXTogdGhpcy5zdGF0dXMgPT09IFwiZmFpbFwiICYmICF0aGlzLnN1ZmZpeEljb24sXHJcbiAgICAgICAgW2Ake3ByZWZpeENsc30tbGVmdC1pbnB1dGBdOiB0aGlzLnByZWZpeEljb24sXHJcbiAgICAgICAgW2Ake3ByZWZpeENsc30tcmlnaHQtaW5wdXRgXTpcclxuICAgICAgICAgIHRoaXMuc3VmZml4SWNvbiB8fCB0aGlzLnN0YXR1cyA9PT0gXCJjbGVhcmFibGVcIiB8fCB0aGlzLnN0YXR1cyA9PT0gXCJzdWNjZXNzXCIgfHwgdGhpcy5zdGF0dXMgPT09IFwiZmFpbFwiLFxyXG4gICAgICB9LFxyXG4gICAgXTtcclxuICB9XHJcbiAgLy8gdGV4dGFyZWHovpPlhaXmoYZcclxuICBnZXQgY2xhc3Nlc1RleHRhcmVhKCkge1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAgYCR7cHJlZml4Q2xzfS1pbnB1dGAsXHJcbiAgICAgIGAke3ByZWZpeENsc30tdGV4dGFyZWFgLFxyXG4gICAgICB7XHJcbiAgICAgICAgW2Ake3ByZWZpeENsc30tZGlzYWJsZWRgXTogdGhpcy5kaXNhYmxlZCxcclxuICAgICAgfSxcclxuICAgIF07XHJcbiAgfVxyXG4gIC8vIOW3puS+p2ljb25cclxuICBnZXQgY2xhc3NlZExlZnRJY29uKCkge1xyXG4gICAgcmV0dXJuIFtgJHtwcmVmaXhDbHN9LWxlZnQtaWNvbmBdO1xyXG4gIH1cclxuICAvLyDlj7PkvqdpY29uXHJcbiAgZ2V0IGNsYXNzZWRSaWdodEljb24oKSB7XHJcbiAgICByZXR1cm4gW2Ake3ByZWZpeENsc30tcmlnaHQtaWNvbmBdO1xyXG4gIH1cclxuICAvLyDmuIXnqbpcclxuICBnZXQgY2xhc3Nlc0Nsb3NlSWNvbigpIHtcclxuICAgIHJldHVybiBbYCR7cHJlZml4Q2xzfS1jbG9zZS1pY29uYF07XHJcbiAgfVxyXG4gIC8vIOaIkOWKn1xyXG4gIGdldCBjbGFzc2VzU3VjY2Vzc0ljb24oKSB7XHJcbiAgICByZXR1cm4gW2Ake3ByZWZpeENsc30tc3VjY2Vzcy1pY29uYF07XHJcbiAgfVxyXG4gIC8vIOWksei0pVxyXG4gIGdldCBjbGFzc2VzRmFpbEljb24oKSB7XHJcbiAgICByZXR1cm4gW2Ake3ByZWZpeENsc30tZmFpbC1pY29uYF07XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3RzLWxvYWRlci9pbmRleC5qcz8/cmVmLS0wLTEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi94Yi11ZWRpdG9yLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz10cyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdHMtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTAtMSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL3hiLXVlZGl0b3IudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiIiwiXG5cblxuXG5cblxuXHJcbmltcG9ydCB7IENvbXBvbmVudCwgUHJvcCwgV2F0Y2gsIFZ1ZSB9IGZyb20gXCJ2dWUtcHJvcGVydHktZGVjb3JhdG9yXCI7XHJcbmltcG9ydCB7c2VyaWVzTG9hZFNjcmlwdHN9IGZyb20gJy4uLy4uLy4uL3NyYy91dGlscy91dGlscyc7XHJcbmltcG9ydCB7IGRlYnVnIH0gZnJvbSAndXRpbCc7XHJcblxyXG5AQ29tcG9uZW50XHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFhiVWVkaXRvciBleHRlbmRzIFZ1ZSB7XHJcblxyXG4gIGluc3RhbmNlOiBvYmplY3QgPSB7fTtcclxuICByYW5kb21OdW1iZXI6IHN0cmluZyA9ICcnO1xyXG4gIGRlZmF1bHRDb25maWcgPSB7XHJcbiAgICAgICAgaW5pdGlhbEZyYW1lSGVpZ2h0OiA0MDAsXHJcbiAgICAgICAgc2VydmVyVXJsOiAnLycsIC8vIOWbvueJh+inhumikeS4iuS8oOWcsOWdgOmFjee9rlxyXG4gICAgICAgIFVFRElUT1JfSE9NRV9VUkw6ICcuL3NyYy9hc3NldHMvdWVkaXRvci8nLFxyXG4gICAgICAgIHRvb2xiYXJzOiBbXHJcbiAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgICdzb3VyY2UnLFxyXG4gICAgICAgICAgICAgICAgJ3VuZG8nLCAvL+aSpOmUgFxyXG4gICAgICAgICAgICAgICAgJ3JlZG8nLCAvL+mHjeWBmlxyXG4gICAgICAgICAgICAgICAgJ2JvbGQnLCAvL+WKoOeyl1xyXG4gICAgICAgICAgICAgICAgJ2l0YWxpYycsIC8v5pac5L2TXHJcbiAgICAgICAgICAgICAgICAndW5kZXJsaW5lJywgLy/kuIvliJLnur9cclxuICAgICAgICAgICAgICAgICdzdHJpa2V0aHJvdWdoJywgLy/liKDpmaTnur9cclxuICAgICAgICAgICAgICAgICdzdWJzY3JpcHQnLCAvL+S4i+agh1xyXG4gICAgICAgICAgICAgICAgJ2ZvbnRib3JkZXInLCAvL+Wtl+espui+ueahhlxyXG4gICAgICAgICAgICAgICAgJ3N1cGVyc2NyaXB0JywgLy/kuIrmoIdcclxuICAgICAgICAgICAgICAgICdzZWxlY3RhbGwnLCAvL+WFqOmAiVxyXG4gICAgICAgICAgICAgICAgJ2hvcml6b250YWwnLCAvL+WIhumalOe6v1xyXG4gICAgICAgICAgICAgICAgJ3JlbW92ZWZvcm1hdCcsIC8v5riF6Zmk5qC85byPXHJcbiAgICAgICAgICAgICAgICAndGltZScsIC8v5pe26Ze0XHJcbiAgICAgICAgICAgICAgICAnZGF0ZScsIC8v5pel5pyfXHJcbiAgICAgICAgICAgICAgICAnZm9udHNpemUnLCAvL+Wtl+WPt1xyXG4gICAgICAgICAgICAgICAgJ3BhcmFncmFwaCcsIC8v5q616JC95qC85byPXHJcbiAgICAgICAgICAgICAgICAnc2ltcGxldXBsb2FkJywgLy/ljZXlm77kuIrkvKBcclxuICAgICAgICAgICAgICAgICdsaW5rJywgLy/otoXpk77mjqVcclxuICAgICAgICAgICAgICAgICdzZWFyY2hyZXBsYWNlJywgLy/mn6Xor6Lmm7/mjaJcclxuICAgICAgICAgICAgICAgICdqdXN0aWZ5bGVmdCcsIC8v5bGF5bem5a+56b2QXHJcbiAgICAgICAgICAgICAgICAnanVzdGlmeXJpZ2h0JywgLy/lsYXlj7Plr7npvZBcclxuICAgICAgICAgICAgICAgICdqdXN0aWZ5Y2VudGVyJywgLy/lsYXkuK3lr7npvZBcclxuICAgICAgICAgICAgICAgICdqdXN0aWZ5anVzdGlmeScsIC8v5Lik56uv5a+56b2QXHJcbiAgICAgICAgICAgICAgICAnZm9yZWNvbG9yJywgLy/lrZfkvZPpopzoibJcclxuICAgICAgICAgICAgICAgICdpbnNlcnRvcmRlcmVkbGlzdCcsIC8v5pyJ5bqP5YiX6KGoXHJcbiAgICAgICAgICAgICAgICAnaW5zZXJ0dW5vcmRlcmVkbGlzdCcsIC8v5peg5bqP5YiX6KGoXHJcbiAgICAgICAgICAgICAgICAnbGluZWhlaWdodCcsIC8v6KGM6Ze06LedXHJcbiAgICAgICAgICAgICAgICAnaW5zZXJ0dGFibGUnLCAvL+aPkuWFpeihqOagvFxyXG4gICAgICAgICAgICBdXHJcbiAgICAgICAgXSxcclxuICAgICAgICB6SW5kZXg6IDEwLCAvLyDnvJbovpHlmajlsYLnuqdcclxuICAgICAgICBjaGFyc2V0OiAndXRmLTgnLCAvLyDnvJbnoIFcclxuICAgICAgICBhdXRvSGVpZ2h0RW5hYmxlZDogZmFsc2UsXHJcbiAgfTtcclxuXHJcbiAgLyoqIOe8lui+keWZqOmFjee9riAqL1xyXG4gIEBQcm9wKHsgZGVmYXVsdDoge30sICB0eXBlOiBPYmplY3R9KVxyXG4gIGNvbmZpZyE6IG9iamVjdDtcclxuXHJcbiAgLyoqIOe8lui+keWZqOWGheWuuSAqL1xyXG4gIEBQcm9wKHsgZGVmYXVsdDogXCJcIiwgdHlwZTogU3RyaW5nIH0pXHJcbiAgY29udGVudCE6IHN0cmluZztcclxuXHJcbiAgY3JlYXRlZCgpe1xyXG4gICAgLy8g5ZCI5bm26YWN572uXHJcbiAgICB0aGlzLmRlZmF1bHRDb25maWcgPSB0aGlzLmNvbmZpZyAmJiBPYmplY3QuYXNzaWduKHRoaXMuY29uZmlnLCB0aGlzLmRlZmF1bHRDb25maWcpO1xyXG4gIH1cclxuICBtb3VudGVkKCl7XHJcbiAgICAvLyDliKTmlq3nvJbovpHlmajlr7nosaHlrZjkuI3lrZjlnKhcclxuICAgIGlmICh3aW5kb3cuVUUpIHtcclxuICAgICAgdGhpcy5pbml0VWVkaXRvcigpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5sb2FkVWVkaXRvckpzKCk7XHJcbiAgICB9XHJcblxyXG4gIH1cclxuICBiZWZvcmVEZXN0cm95KCl7XHJcbiAgICAvLyDnu4Tku7bplIDmr4HnmoTml7blgJnvvIzopoHplIDmr4EgVUVkaXRvciDlrp7kvotcclxuICAgIGlmICh0aGlzLmluc3RhbmNlICE9PSBudWxsICYmIHRoaXMuaW5zdGFuY2UuZGVzdHJveSkge1xyXG4gICAgICB0aGlzLmluc3RhbmNlLmRlc3Ryb3koKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIOWIneWni+WMlue8lui+keWZqFxyXG4gIGluaXRVZWRpdG9yKCkge1xyXG4gICAgY29uc3QgdGhhdCAgPSB0aGlzO1xyXG4gICAgaWYgKCF0aGF0LnJhbmRvbU51bWJlcikge1xyXG4gICAgICAgIC8vIOeUn+aIkOmaj+acuklEXHJcbiAgICAgICAgdGhhdC5yYW5kb21OdW1iZXIgPSAnZWRpdG9yXycgKyBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDYpLnN1YnN0cmluZygyKTtcclxuICAgIH1cclxuICAgIGlmIChKU09OLnN0cmluZ2lmeSh0aGlzLmluc3RhbmNlKSA9PT0gXCJ7fVwiKSB7XHJcbiAgICAgIHRoaXMuJG5leHRUaWNrKCgpID0+IHtcclxuICAgICAgICAgICB0aGlzLmluc3RhbmNlID0gd2luZG93LlVFLmdldEVkaXRvcih0aGF0LnJhbmRvbU51bWJlciwgdGhhdC5kZWZhdWx0Q29uZmlnKTtcclxuICAgICAgICAgICAvLyDnu5Hlrprkuovku7bvvIzlvZMgVUVkaXRvciDliJ3lp4vljJblrozmiJDlkI7vvIzlsIbnvJbovpHlmajlrp7kvovpgJrov4foh6rlrprkuYnnmoQgcmVhZHkg5LqL5Lu25Lqk5Ye65Y67XHJcbiAgICAgICAgICAgIHRoaXMuaW5zdGFuY2UuYWRkTGlzdGVuZXIoJ3JlYWR5JywgKCkgPT4ge1xyXG4gICAgICAgICAgICAgIHRoaXMuJGVtaXQoJ3JlYWR5JywgdGhpcy5pbnN0YW5jZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICB9KVxyXG4gICAgfVxyXG5cclxuXHJcbiAgfVxyXG4gIGxvYWRVZWRpdG9ySnMoKXtcclxuICAgIGxldCBqc1VybCA9IFtcclxuICAgICAgXCIuLi8uLi8uLi9zcmMvYXNzZXRzL3VlZGl0b3IvdWVkaXRvci5jb25maWcuanNcIixcclxuICAgICAgXCIuLi8uLi8uLi9zcmMvYXNzZXRzL3VlZGl0b3IvdWVkaXRvci5hbGwubWluLmpzXCIsXHJcbiAgICAgIFwiLi4vLi4vLi4vc3JjL2Fzc2V0cy91ZWRpdG9yL2xhbmcvemgtY24vemgtY24uanNcIlxyXG4gICAgXTtcclxuICAgIGlmKHRoaXMuY29uZmlnLmxhbmcgJiYgdGhpcy5jb25maWcubGFuZyA9PSAnZW4nKXtcclxuICAgICAganNVcmwuc3BsaWNlKGpzVXJsLmxlbmd0aC0xLDEpO1xyXG4gICAgICBqc1VybC5wdXNoKFwiLi4vLi4vLi4vc3JjL2Fzc2V0cy91ZWRpdG9yL2xhbmcvZW4vZW4uanNcIik7XHJcbiAgICB9XHJcbiAgICBjb25zdCB0aGF0ID0gdGhpcztcclxuICAgIHNlcmllc0xvYWRTY3JpcHRzKGpzVXJsLCB0aGF0LmluaXRVZWRpdG9yKTtcclxuICB9XHJcblxyXG4gIC8vIOi/veWKoOWGheWuuVxyXG4gIGFkZENvbnRlbnQodGV4dCkge1xyXG4gICAgICB0aGlzLmluc3RhbmNlLnNldENvbnRlbnQodGV4dCwgdHJ1ZSk7XHJcbiAgfVxyXG4gIC8v6K6+572u5YaF5a65XHJcbiAgc2V0Q29udGVudChjb250ZW50KSB7XHJcbiAgICAgIHRoaXMuaW5zdGFuY2Uuc2V0Q29udGVudChjb250ZW50KTtcclxuICB9XHJcbiAgLy8g5riF56m65paH5pysXHJcbiAgc2V0RW1wdHlDb250ZW50KCkge1xyXG4gICAgICB0aGlzLmluc3RhbmNlLnNldENvbnRlbnQoJycpO1xyXG4gIH1cclxuICAvLyDmj5LlhaVIVE1M5YaF5a65XHJcbiAgaW5zZXJ0SHRtbChjb250ZW50KSB7XHJcbiAgICAgIHRoaXMuaW5zdGFuY2UuZXhlY0NvbW1hbmQoJ2luc2VydEh0bWwnLCBjb250ZW50KTtcclxuICB9XHJcbiAgZ2V0UGxhaW5Db250ZW50KCl7XHJcbiAgICByZXR1cm4gdGhpcy5pbnN0YW5jZS5nZXRQbGFpblR4dCgpO1xyXG4gIH1cclxuICAvLyDojrflj5ZodG1s5rqQ56CBXHJcbiAgZ2V0SHRtbFNvdXJjZSgpe1xyXG4gICAgcmV0dXJuIHRoaXMuaW5zdGFuY2UuZ2V0Q29udGVudCgpO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBQbHVnaW5PYmplY3QgfSBmcm9tIFwidnVlXCI7XHJcbmltcG9ydCBYYkJ1dHRvbiBmcm9tIFwiLi9zcmMveGItYnV0dG9uLnZ1ZVwiO1xyXG5leHBvcnQgZGVmYXVsdCBYYkJ1dHRvbjtcclxuXHJcbmV4cG9ydCBjb25zdCB4YkJ1dHRvbjogUGx1Z2luT2JqZWN0PFhiQnV0dG9uPiA9IHtcclxuICBpbnN0YWxsOiAoVnVlKSA9PiB7XHJcbiAgICBWdWUuY29tcG9uZW50KFwiWGJCdXR0b25cIiwgWGJCdXR0b24pO1xyXG4gIH0sXHJcbn07XHJcbiIsImltcG9ydCBWdWUgZnJvbSBcInZ1ZVwiO1xyXG5cclxuY29uc3QgaXNTZXJ2ZXIgPSBWdWUucHJvdG90eXBlLiRpc1NlcnZlcjtcclxuXHJcbi8qKiDnoa7lrprlr7nosaHmmK/lkKblhbfmnInmjIflrprlkI3np7DnmoTlsZ7mgKfjgIIgKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGhhc093bihvYmosIGtleSk6IGJvb2xlYW4ge1xyXG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpO1xyXG59XHJcblxyXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG5leHBvcnQgY29uc3Qgb24gPSAoZnVuY3Rpb24oKSB7XHJcbiAgaWYgKCFpc1NlcnZlciAmJiBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24oZWxlbWVudDogSFRNTEVsZW1lbnQgfCBXaW5kb3csIGV2ZW50OiBzdHJpbmcsIGhhbmRsZXI6IEV2ZW50TGlzdGVuZXJPckV2ZW50TGlzdGVuZXJPYmplY3QpIHtcclxuICAgICAgaWYgKGVsZW1lbnQgJiYgZXZlbnQgJiYgaGFuZGxlcikge1xyXG4gICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlciwgZmFsc2UpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gIH0gZWxzZSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24oZWxlbWVudCwgZXZlbnQsIGhhbmRsZXIpIHtcclxuICAgICAgaWYgKGVsZW1lbnQgJiYgZXZlbnQgJiYgaGFuZGxlcikge1xyXG4gICAgICAgIGVsZW1lbnQuYXR0YWNoRXZlbnQoXCJvblwiICsgZXZlbnQsIGhhbmRsZXIpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gIH1cclxufSkoKTtcclxuXHJcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXHJcbmV4cG9ydCBjb25zdCBvZmYgPSAoZnVuY3Rpb24oKSB7XHJcbiAgaWYgKCFpc1NlcnZlciAmJiBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24oZWxlbWVudDogSFRNTEVsZW1lbnQgfCBXaW5kb3csIGV2ZW50OiBzdHJpbmcsIGhhbmRsZXI6IEV2ZW50TGlzdGVuZXJPckV2ZW50TGlzdGVuZXJPYmplY3QpIHtcclxuICAgICAgaWYgKGVsZW1lbnQgJiYgZXZlbnQpIHtcclxuICAgICAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZXIsIGZhbHNlKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICB9IGVsc2Uge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKGVsZW1lbnQsIGV2ZW50LCBoYW5kbGVyKSB7XHJcbiAgICAgIGlmIChlbGVtZW50ICYmIGV2ZW50KSB7XHJcbiAgICAgICAgZWxlbWVudC5kZXRhY2hFdmVudChcIm9uXCIgKyBldmVudCwgaGFuZGxlcik7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfVxyXG59KSgpO1xyXG5cclxuLyoqXHJcbiAqIOW5tuiBlOWKoOi9veaMh+WumueahOiEmuacrFxyXG4gKiDlubbogZTliqDovb1b5ZCM5q2lXeWQjOaXtuWKoOi9ve+8jOS4jeeuoeS4iuS4quaYr+WQpuWKoOi9veWujOaIkO+8jOebtOaOpeWKoOi9veWFqOmDqFxyXG4gKiDlhajpg6jliqDovb3lrozmiJDlkI7miafooYzlm57osINcclxuICogQHBhcmFtIGFycmF5fHN0cmluZyDmjIflrprnmoTohJrmnKzku6xcclxuICogQHBhcmFtIGZ1bmN0aW9uIOaIkOWKn+WQjuWbnuiwg+eahOWHveaVsFxyXG4gKiBAcmV0dXJuIGFycmF5IOaJgOacieeUn+aIkOeahOiEmuacrOWFg+e0oOWvueixoeaVsOe7hFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHBhcmFsbGVsTG9hZFNjcmlwdHMoc2NyaXB0czogc3RyaW5nW10sIGNhbGxiYWNrOiAoKSA9PiB2b2lkKSB7XHJcbiAgaWYgKHR5cGVvZihzY3JpcHRzKSAhPT0gXCJvYmplY3RcIikge1xyXG4gICAgc2NyaXB0cyA9IFtzY3JpcHRzXTtcclxuICB9XHJcbiAgY29uc3QgSEVBRCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiaGVhZFwiKS5pdGVtKDApIHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcclxuICBjb25zdCBzID0gbmV3IEFycmF5KCk7XHJcbiAgbGV0IGxvYWRlZCA9IDA7XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzY3JpcHRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICBzW2ldID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcclxuICAgIHNbaV0uc2V0QXR0cmlidXRlKFwidHlwZVwiLCBcInRleHQvamF2YXNjcmlwdFwiKTtcclxuICAgIC8vIEF0dGFjaCBoYW5kbGVycyBmb3IgYWxsIGJyb3dzZXJzXHJcbiAgICBzW2ldLm9ubG9hZCA9IHNbaV0ub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIGlmICghMCB8fCB0aGlzLnJlYWR5U3RhdGUgPT09IFwibG9hZGVkXCIgfHwgdGhpcy5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIpIHtcclxuICAgICAgICBsb2FkZWQrKztcclxuICAgICAgICB0aGlzLm9ubG9hZCA9IHRoaXMub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDsgdGhpcy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMpO1xyXG4gICAgICAgIGlmIChsb2FkZWQgPT09IHNjcmlwdHMubGVuZ3RoICYmIHR5cGVvZiAoY2FsbGJhY2spID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgIGNhbGxiYWNrKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gICAgc1tpXS5zZXRBdHRyaWJ1dGUoXCJzcmNcIiwgc2NyaXB0c1tpXSk7XHJcbiAgICBpZiAoSEVBRCkge1xyXG4gICAgICBIRUFELmFwcGVuZENoaWxkKHNbaV0pO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIOS4suiBlOWKoOi9veaMh+WumueahOiEmuacrFxyXG4gKiDkuLLogZTliqDovb1b5byC5q2lXemAkOS4quWKoOi9ve+8jOavj+S4quWKoOi9veWujOaIkOWQjuWKoOi9veS4i+S4gOS4qlxyXG4gKiDlhajpg6jliqDovb3lrozmiJDlkI7miafooYzlm57osINcclxuICogQHBhcmFtIGFycmF5fHN0cmluZyDmjIflrprnmoTohJrmnKzku6xcclxuICogQHBhcmFtIGZ1bmN0aW9uIOaIkOWKn+WQjuWbnuiwg+eahOWHveaVsFxyXG4gKiBAcmV0dXJuIGFycmF5IOaJgOacieeUn+aIkOeahOiEmuacrOWFg+e0oOWvueixoeaVsOe7hFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNlcmllc0xvYWRTY3JpcHRzKHNjcmlwdHM6IHN0cmluZ1tdLCBjYWxsYmFjazogKCkgPT4gdm9pZCkge1xyXG4gIGlmICh0eXBlb2Yoc2NyaXB0cykgIT09IFwib2JqZWN0XCIpIHtcclxuICAgIHNjcmlwdHMgPSBbc2NyaXB0c107XHJcbiAgfVxyXG4gIGNvbnN0IEhFQUQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImhlYWRcIikuaXRlbSgwKSB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XHJcbiAgY29uc3QgcyA9IG5ldyBBcnJheSgpO1xyXG4gIGNvbnN0IGxhc3QgPSBzY3JpcHRzLmxlbmd0aCAtIDE7XHJcbiAgY29uc3QgcmVjdXJzaXZlTG9hZCA9IGZ1bmN0aW9uKGkpIHtcclxuICAgIC8vIOmAkuW9klxyXG4gICAgc1tpXSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7XHJcbiAgICBzW2ldLnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJ0ZXh0L2phdmFzY3JpcHRcIik7XHJcbiAgICBzW2ldLm9ubG9hZCA9IHNbaV0ub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIC8vIEF0dGFjaCBoYW5kbGVycyBmb3IgYWxsIGJyb3dzZXJzXHJcbiAgICAgIGlmICghMCB8fCB0aGlzLnJlYWR5U3RhdGUgPT09IFwibG9hZGVkXCIgfHwgdGhpcy5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIpIHtcclxuICAgICAgICB0aGlzLm9ubG9hZCA9IHRoaXMub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcclxuICAgICAgICB0aGlzLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcyk7XHJcbiAgICAgICAgaWYgKGkgIT09IGxhc3Qpe1xyXG4gICAgICAgICAgcmVjdXJzaXZlTG9hZChpICsgMSk7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YoY2FsbGJhY2spID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgIGNhbGxiYWNrKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gICAgY29uc29sZS5sb2coc2NyaXB0c1tpXSk7XHJcbiAgICBzW2ldLnNldEF0dHJpYnV0ZShcInNyY1wiLCBzY3JpcHRzW2ldKTtcclxuXHJcbiAgICBpZiAoSEVBRCkge1xyXG4gICAgICBIRUFELmFwcGVuZENoaWxkKHNbaV0pO1xyXG4gICAgICBjb25zb2xlLmxvZygnanPku6PnoIEnKTtcclxuICAgICAgY29uc29sZS5sb2coSEVBRCk7XHJcbiAgICB9XHJcblxyXG4gIH07XHJcbiAgcmVjdXJzaXZlTG9hZCgwKTtcclxufVxyXG4iLCJpbXBvcnQgeyBQbHVnaW5PYmplY3QgfSBmcm9tIFwidnVlXCI7XHJcbmltcG9ydCBYYkNoZWNrYm94IGZyb20gXCIuL3NyYy94Yi1jaGVja2JveC52dWVcIjtcclxuZXhwb3J0IGRlZmF1bHQgWGJDaGVja2JveDtcclxuXHJcbmV4cG9ydCBjb25zdCB4YkNoZWNrYm94OiBQbHVnaW5PYmplY3Q8WGJDaGVja2JveD4gPSB7XHJcbiAgaW5zdGFsbDogKFZ1ZSkgPT4ge1xyXG4gICAgVnVlLmNvbXBvbmVudChcIlhiQ2hlY2tib3hcIiwgWGJDaGVja2JveCk7XHJcbiAgfSxcclxufTtcclxuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxudmFyICRleHBvcnQgPSBmdW5jdGlvbiAodHlwZSwgbmFtZSwgc291cmNlKSB7XG4gIHZhciBJU19GT1JDRUQgPSB0eXBlICYgJGV4cG9ydC5GO1xuICB2YXIgSVNfR0xPQkFMID0gdHlwZSAmICRleHBvcnQuRztcbiAgdmFyIElTX1NUQVRJQyA9IHR5cGUgJiAkZXhwb3J0LlM7XG4gIHZhciBJU19QUk9UTyA9IHR5cGUgJiAkZXhwb3J0LlA7XG4gIHZhciBJU19CSU5EID0gdHlwZSAmICRleHBvcnQuQjtcbiAgdmFyIElTX1dSQVAgPSB0eXBlICYgJGV4cG9ydC5XO1xuICB2YXIgZXhwb3J0cyA9IElTX0dMT0JBTCA/IGNvcmUgOiBjb3JlW25hbWVdIHx8IChjb3JlW25hbWVdID0ge30pO1xuICB2YXIgZXhwUHJvdG8gPSBleHBvcnRzW1BST1RPVFlQRV07XG4gIHZhciB0YXJnZXQgPSBJU19HTE9CQUwgPyBnbG9iYWwgOiBJU19TVEFUSUMgPyBnbG9iYWxbbmFtZV0gOiAoZ2xvYmFsW25hbWVdIHx8IHt9KVtQUk9UT1RZUEVdO1xuICB2YXIga2V5LCBvd24sIG91dDtcbiAgaWYgKElTX0dMT0JBTCkgc291cmNlID0gbmFtZTtcbiAgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgLy8gY29udGFpbnMgaW4gbmF0aXZlXG4gICAgb3duID0gIUlTX0ZPUkNFRCAmJiB0YXJnZXQgJiYgdGFyZ2V0W2tleV0gIT09IHVuZGVmaW5lZDtcbiAgICBpZiAob3duICYmIGhhcyhleHBvcnRzLCBrZXkpKSBjb250aW51ZTtcbiAgICAvLyBleHBvcnQgbmF0aXZlIG9yIHBhc3NlZFxuICAgIG91dCA9IG93biA/IHRhcmdldFtrZXldIDogc291cmNlW2tleV07XG4gICAgLy8gcHJldmVudCBnbG9iYWwgcG9sbHV0aW9uIGZvciBuYW1lc3BhY2VzXG4gICAgZXhwb3J0c1trZXldID0gSVNfR0xPQkFMICYmIHR5cGVvZiB0YXJnZXRba2V5XSAhPSAnZnVuY3Rpb24nID8gc291cmNlW2tleV1cbiAgICAvLyBiaW5kIHRpbWVycyB0byBnbG9iYWwgZm9yIGNhbGwgZnJvbSBleHBvcnQgY29udGV4dFxuICAgIDogSVNfQklORCAmJiBvd24gPyBjdHgob3V0LCBnbG9iYWwpXG4gICAgLy8gd3JhcCBnbG9iYWwgY29uc3RydWN0b3JzIGZvciBwcmV2ZW50IGNoYW5nZSB0aGVtIGluIGxpYnJhcnlcbiAgICA6IElTX1dSQVAgJiYgdGFyZ2V0W2tleV0gPT0gb3V0ID8gKGZ1bmN0aW9uIChDKSB7XG4gICAgICB2YXIgRiA9IGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICAgIGlmICh0aGlzIGluc3RhbmNlb2YgQykge1xuICAgICAgICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gbmV3IEMoKTtcbiAgICAgICAgICAgIGNhc2UgMTogcmV0dXJuIG5ldyBDKGEpO1xuICAgICAgICAgICAgY2FzZSAyOiByZXR1cm4gbmV3IEMoYSwgYik7XG4gICAgICAgICAgfSByZXR1cm4gbmV3IEMoYSwgYiwgYyk7XG4gICAgICAgIH0gcmV0dXJuIEMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gICAgICBGW1BST1RPVFlQRV0gPSBDW1BST1RPVFlQRV07XG4gICAgICByZXR1cm4gRjtcbiAgICAvLyBtYWtlIHN0YXRpYyB2ZXJzaW9ucyBmb3IgcHJvdG90eXBlIG1ldGhvZHNcbiAgICB9KShvdXQpIDogSVNfUFJPVE8gJiYgdHlwZW9mIG91dCA9PSAnZnVuY3Rpb24nID8gY3R4KEZ1bmN0aW9uLmNhbGwsIG91dCkgOiBvdXQ7XG4gICAgLy8gZXhwb3J0IHByb3RvIG1ldGhvZHMgdG8gY29yZS4lQ09OU1RSVUNUT1IlLm1ldGhvZHMuJU5BTUUlXG4gICAgaWYgKElTX1BST1RPKSB7XG4gICAgICAoZXhwb3J0cy52aXJ0dWFsIHx8IChleHBvcnRzLnZpcnR1YWwgPSB7fSkpW2tleV0gPSBvdXQ7XG4gICAgICAvLyBleHBvcnQgcHJvdG8gbWV0aG9kcyB0byBjb3JlLiVDT05TVFJVQ1RPUiUucHJvdG90eXBlLiVOQU1FJVxuICAgICAgaWYgKHR5cGUgJiAkZXhwb3J0LlIgJiYgZXhwUHJvdG8gJiYgIWV4cFByb3RvW2tleV0pIGhpZGUoZXhwUHJvdG8sIGtleSwgb3V0KTtcbiAgICB9XG4gIH1cbn07XG4vLyB0eXBlIGJpdG1hcFxuJGV4cG9ydC5GID0gMTsgICAvLyBmb3JjZWRcbiRleHBvcnQuRyA9IDI7ICAgLy8gZ2xvYmFsXG4kZXhwb3J0LlMgPSA0OyAgIC8vIHN0YXRpY1xuJGV4cG9ydC5QID0gODsgICAvLyBwcm90b1xuJGV4cG9ydC5CID0gMTY7ICAvLyBiaW5kXG4kZXhwb3J0LlcgPSAzMjsgIC8vIHdyYXBcbiRleHBvcnQuVSA9IDY0OyAgLy8gc2FmZVxuJGV4cG9ydC5SID0gMTI4OyAvLyByZWFsIHByb3RvIG1ldGhvZCBmb3IgYGxpYnJhcnlgXG5tb2R1bGUuZXhwb3J0cyA9ICRleHBvcnQ7XG4iLCIvLyA3LjEuMSBUb1ByaW1pdGl2ZShpbnB1dCBbLCBQcmVmZXJyZWRUeXBlXSlcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuLy8gaW5zdGVhZCBvZiB0aGUgRVM2IHNwZWMgdmVyc2lvbiwgd2UgZGlkbid0IGltcGxlbWVudCBAQHRvUHJpbWl0aXZlIGNhc2Vcbi8vIGFuZCB0aGUgc2Vjb25kIGFyZ3VtZW50IC0gZmxhZyAtIHByZWZlcnJlZCB0eXBlIGlzIGEgc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgUykge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIGl0O1xuICB2YXIgZm4sIHZhbDtcbiAgaWYgKFMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIGlmICh0eXBlb2YgKGZuID0gaXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAoIVMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG4iLCIvLyA3LjIuMSBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ID09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gIFwiICsgaXQpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwiLy8gNy4xLjQgVG9JbnRlZ2VyXG52YXIgY2VpbCA9IE1hdGguY2VpbDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXNOYU4oaXQgPSAraXQpID8gMCA6IChpdCA+IDAgPyBmbG9vciA6IGNlaWwpKGl0KTtcbn07XG4iLCJ2YXIgc2hhcmVkID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ2tleXMnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gc2hhcmVkW2tleV0gfHwgKHNoYXJlZFtrZXldID0gdWlkKGtleSkpO1xufTtcbiIsInZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIFNIQVJFRCA9ICdfX2NvcmUtanNfc2hhcmVkX18nO1xudmFyIHN0b3JlID0gZ2xvYmFsW1NIQVJFRF0gfHwgKGdsb2JhbFtTSEFSRURdID0ge30pO1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICByZXR1cm4gc3RvcmVba2V5XSB8fCAoc3RvcmVba2V5XSA9IHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IHt9KTtcbn0pKCd2ZXJzaW9ucycsIFtdKS5wdXNoKHtcbiAgdmVyc2lvbjogY29yZS52ZXJzaW9uLFxuICBtb2RlOiByZXF1aXJlKCcuL19saWJyYXJ5JykgPyAncHVyZScgOiAnZ2xvYmFsJyxcbiAgY29weXJpZ2h0OiAnwqkgMjAxOCBEZW5pcyBQdXNoa2FyZXYgKHpsb2lyb2NrLnJ1KSdcbn0pO1xuIiwiLy8gSUUgOC0gZG9uJ3QgZW51bSBidWcga2V5c1xubW9kdWxlLmV4cG9ydHMgPSAoXG4gICdjb25zdHJ1Y3RvcixoYXNPd25Qcm9wZXJ0eSxpc1Byb3RvdHlwZU9mLHByb3BlcnR5SXNFbnVtZXJhYmxlLHRvTG9jYWxlU3RyaW5nLHRvU3RyaW5nLHZhbHVlT2YnXG4pLnNwbGl0KCcsJyk7XG4iLCJleHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsInZhciBkZWYgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIFRBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgdGFnLCBzdGF0KSB7XG4gIGlmIChpdCAmJiAhaGFzKGl0ID0gc3RhdCA/IGl0IDogaXQucHJvdG90eXBlLCBUQUcpKSBkZWYoaXQsIFRBRywgeyBjb25maWd1cmFibGU6IHRydWUsIHZhbHVlOiB0YWcgfSk7XG59O1xuIiwiZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fd2tzJyk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyIHdrc0V4dCA9IHJlcXVpcmUoJy4vX3drcy1leHQnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHZhciAkU3ltYm9sID0gY29yZS5TeW1ib2wgfHwgKGNvcmUuU3ltYm9sID0gTElCUkFSWSA/IHt9IDogZ2xvYmFsLlN5bWJvbCB8fCB7fSk7XG4gIGlmIChuYW1lLmNoYXJBdCgwKSAhPSAnXycgJiYgIShuYW1lIGluICRTeW1ib2wpKSBkZWZpbmVQcm9wZXJ0eSgkU3ltYm9sLCBuYW1lLCB7IHZhbHVlOiB3a3NFeHQuZihuYW1lKSB9KTtcbn07XG4iLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyksXG4gICAgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIE1hcCA9IGdldE5hdGl2ZShyb290LCAnTWFwJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gTWFwO1xuIiwidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIFN5bWJvbCA9IHJvb3QuU3ltYm9sO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bWJvbDtcbiIsInZhciBhcnJheUxpa2VLZXlzID0gcmVxdWlyZSgnLi9fYXJyYXlMaWtlS2V5cycpLFxuICAgIGJhc2VLZXlzID0gcmVxdWlyZSgnLi9fYmFzZUtleXMnKSxcbiAgICBpc0FycmF5TGlrZSA9IHJlcXVpcmUoJy4vaXNBcnJheUxpa2UnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiBgb2JqZWN0YC5cbiAqXG4gKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy4gU2VlIHRoZVxuICogW0VTIHNwZWNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5rZXlzKVxuICogZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYSA9IDE7XG4gKiAgIHRoaXMuYiA9IDI7XG4gKiB9XG4gKlxuICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAqXG4gKiBfLmtleXMobmV3IEZvbyk7XG4gKiAvLyA9PiBbJ2EnLCAnYiddIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gKlxuICogXy5rZXlzKCdoaScpO1xuICogLy8gPT4gWycwJywgJzEnXVxuICovXG5mdW5jdGlvbiBrZXlzKG9iamVjdCkge1xuICByZXR1cm4gaXNBcnJheUxpa2Uob2JqZWN0KSA/IGFycmF5TGlrZUtleXMob2JqZWN0KSA6IGJhc2VLZXlzKG9iamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ga2V5cztcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhbiBgQXJyYXlgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXkoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXkoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheSgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzQXJyYXk7XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuYXJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIHN0b3JpbmcgbWV0YWRhdGEuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhcCBhcmd1bWVudHMgZm9yLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FwcGVkIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlVW5hcnkoZnVuYykge1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gZnVuYyh2YWx1ZSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVVuYXJ5O1xuIiwidmFyIGZyZWVHbG9iYWwgPSByZXF1aXJlKCcuL19mcmVlR2xvYmFsJyk7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZXhwb3J0c2AuICovXG52YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYC4gKi9cbnZhciBmcmVlTW9kdWxlID0gZnJlZUV4cG9ydHMgJiYgdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiYgIW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGU7XG5cbi8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG52YXIgbW9kdWxlRXhwb3J0cyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5leHBvcnRzID09PSBmcmVlRXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBwcm9jZXNzYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZVByb2Nlc3MgPSBtb2R1bGVFeHBvcnRzICYmIGZyZWVHbG9iYWwucHJvY2VzcztcblxuLyoqIFVzZWQgdG8gYWNjZXNzIGZhc3RlciBOb2RlLmpzIGhlbHBlcnMuICovXG52YXIgbm9kZVV0aWwgPSAoZnVuY3Rpb24oKSB7XG4gIHRyeSB7XG4gICAgLy8gVXNlIGB1dGlsLnR5cGVzYCBmb3IgTm9kZS5qcyAxMCsuXG4gICAgdmFyIHR5cGVzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLnJlcXVpcmUgJiYgZnJlZU1vZHVsZS5yZXF1aXJlKCd1dGlsJykudHlwZXM7XG5cbiAgICBpZiAodHlwZXMpIHtcbiAgICAgIHJldHVybiB0eXBlcztcbiAgICB9XG5cbiAgICAvLyBMZWdhY3kgYHByb2Nlc3MuYmluZGluZygndXRpbCcpYCBmb3IgTm9kZS5qcyA8IDEwLlxuICAgIHJldHVybiBmcmVlUHJvY2VzcyAmJiBmcmVlUHJvY2Vzcy5iaW5kaW5nICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcoJ3V0aWwnKTtcbiAgfSBjYXRjaCAoZSkge31cbn0oKSk7XG5cbm1vZHVsZS5leHBvcnRzID0gbm9kZVV0aWw7XG4iLCIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhIHByb3RvdHlwZSBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwcm90b3R5cGUsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNQcm90b3R5cGUodmFsdWUpIHtcbiAgdmFyIEN0b3IgPSB2YWx1ZSAmJiB2YWx1ZS5jb25zdHJ1Y3RvcixcbiAgICAgIHByb3RvID0gKHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiYgQ3Rvci5wcm90b3R5cGUpIHx8IG9iamVjdFByb3RvO1xuXG4gIHJldHVybiB2YWx1ZSA9PT0gcHJvdG87XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNQcm90b3R5cGU7XG4iLCJ2YXIgYXJyYXlGaWx0ZXIgPSByZXF1aXJlKCcuL19hcnJheUZpbHRlcicpLFxuICAgIHN0dWJBcnJheSA9IHJlcXVpcmUoJy4vc3R1YkFycmF5Jyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gb2JqZWN0UHJvdG8ucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVHZXRTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHN5bWJvbHMuXG4gKi9cbnZhciBnZXRTeW1ib2xzID0gIW5hdGl2ZUdldFN5bWJvbHMgPyBzdHViQXJyYXkgOiBmdW5jdGlvbihvYmplY3QpIHtcbiAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICByZXR1cm4gYXJyYXlGaWx0ZXIobmF0aXZlR2V0U3ltYm9scyhvYmplY3QpLCBmdW5jdGlvbihzeW1ib2wpIHtcbiAgICByZXR1cm4gcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChvYmplY3QsIHN5bWJvbCk7XG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBnZXRTeW1ib2xzO1xuIiwidmFyIERhdGFWaWV3ID0gcmVxdWlyZSgnLi9fRGF0YVZpZXcnKSxcbiAgICBNYXAgPSByZXF1aXJlKCcuL19NYXAnKSxcbiAgICBQcm9taXNlID0gcmVxdWlyZSgnLi9fUHJvbWlzZScpLFxuICAgIFNldCA9IHJlcXVpcmUoJy4vX1NldCcpLFxuICAgIFdlYWtNYXAgPSByZXF1aXJlKCcuL19XZWFrTWFwJyksXG4gICAgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICB0b1NvdXJjZSA9IHJlcXVpcmUoJy4vX3RvU291cmNlJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJyxcbiAgICBwcm9taXNlVGFnID0gJ1tvYmplY3QgUHJvbWlzZV0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgIHdlYWtNYXBUYWcgPSAnW29iamVjdCBXZWFrTWFwXSc7XG5cbnZhciBkYXRhVmlld1RhZyA9ICdbb2JqZWN0IERhdGFWaWV3XSc7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBtYXBzLCBzZXRzLCBhbmQgd2Vha21hcHMuICovXG52YXIgZGF0YVZpZXdDdG9yU3RyaW5nID0gdG9Tb3VyY2UoRGF0YVZpZXcpLFxuICAgIG1hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShNYXApLFxuICAgIHByb21pc2VDdG9yU3RyaW5nID0gdG9Tb3VyY2UoUHJvbWlzZSksXG4gICAgc2V0Q3RvclN0cmluZyA9IHRvU291cmNlKFNldCksXG4gICAgd2Vha01hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShXZWFrTWFwKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBgdG9TdHJpbmdUYWdgIG9mIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xudmFyIGdldFRhZyA9IGJhc2VHZXRUYWc7XG5cbi8vIEZhbGxiYWNrIGZvciBkYXRhIHZpZXdzLCBtYXBzLCBzZXRzLCBhbmQgd2VhayBtYXBzIGluIElFIDExIGFuZCBwcm9taXNlcyBpbiBOb2RlLmpzIDwgNi5cbmlmICgoRGF0YVZpZXcgJiYgZ2V0VGFnKG5ldyBEYXRhVmlldyhuZXcgQXJyYXlCdWZmZXIoMSkpKSAhPSBkYXRhVmlld1RhZykgfHxcbiAgICAoTWFwICYmIGdldFRhZyhuZXcgTWFwKSAhPSBtYXBUYWcpIHx8XG4gICAgKFByb21pc2UgJiYgZ2V0VGFnKFByb21pc2UucmVzb2x2ZSgpKSAhPSBwcm9taXNlVGFnKSB8fFxuICAgIChTZXQgJiYgZ2V0VGFnKG5ldyBTZXQpICE9IHNldFRhZykgfHxcbiAgICAoV2Vha01hcCAmJiBnZXRUYWcobmV3IFdlYWtNYXApICE9IHdlYWtNYXBUYWcpKSB7XG4gIGdldFRhZyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgdmFyIHJlc3VsdCA9IGJhc2VHZXRUYWcodmFsdWUpLFxuICAgICAgICBDdG9yID0gcmVzdWx0ID09IG9iamVjdFRhZyA/IHZhbHVlLmNvbnN0cnVjdG9yIDogdW5kZWZpbmVkLFxuICAgICAgICBjdG9yU3RyaW5nID0gQ3RvciA/IHRvU291cmNlKEN0b3IpIDogJyc7XG5cbiAgICBpZiAoY3RvclN0cmluZykge1xuICAgICAgc3dpdGNoIChjdG9yU3RyaW5nKSB7XG4gICAgICAgIGNhc2UgZGF0YVZpZXdDdG9yU3RyaW5nOiByZXR1cm4gZGF0YVZpZXdUYWc7XG4gICAgICAgIGNhc2UgbWFwQ3RvclN0cmluZzogcmV0dXJuIG1hcFRhZztcbiAgICAgICAgY2FzZSBwcm9taXNlQ3RvclN0cmluZzogcmV0dXJuIHByb21pc2VUYWc7XG4gICAgICAgIGNhc2Ugc2V0Q3RvclN0cmluZzogcmV0dXJuIHNldFRhZztcbiAgICAgICAgY2FzZSB3ZWFrTWFwQ3RvclN0cmluZzogcmV0dXJuIHdlYWtNYXBUYWc7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0VGFnO1xuIiwidmFyIFVpbnQ4QXJyYXkgPSByZXF1aXJlKCcuL19VaW50OEFycmF5Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mIGBhcnJheUJ1ZmZlcmAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXlCdWZmZXJ9IGFycmF5QnVmZmVyIFRoZSBhcnJheSBidWZmZXIgdG8gY2xvbmUuXG4gKiBAcmV0dXJucyB7QXJyYXlCdWZmZXJ9IFJldHVybnMgdGhlIGNsb25lZCBhcnJheSBidWZmZXIuXG4gKi9cbmZ1bmN0aW9uIGNsb25lQXJyYXlCdWZmZXIoYXJyYXlCdWZmZXIpIHtcbiAgdmFyIHJlc3VsdCA9IG5ldyBhcnJheUJ1ZmZlci5jb25zdHJ1Y3RvcihhcnJheUJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgbmV3IFVpbnQ4QXJyYXkocmVzdWx0KS5zZXQobmV3IFVpbnQ4QXJyYXkoYXJyYXlCdWZmZXIpKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjbG9uZUFycmF5QnVmZmVyO1xuIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfYyhcImlcIiwgeyBjbGFzczogX3ZtLmNsYXNzZXMsIHN0eWxlOiBfdm0uc3R5bGVzIH0pXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwiZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvdGVtcGxhdGVMb2FkZXIuanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL3hiLWljb24udnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPWU0ZDEyNmFjJlwiIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfYyhcImRpdlwiKVxufVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsImV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3RlbXBsYXRlTG9hZGVyLmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi94Yi1wb3B0aXAudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPWZmN2ZjMzY4JlwiIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfYyhcImRpdlwiLCB7IGNsYXNzOiBfdm0uY2xhc3NlcyB9LCBbXG4gICAgX3ZtLmxhYmVsIHx8IF92bS4kc2xvdHMubGFiZWxcbiAgICAgID8gX2MoXG4gICAgICAgICAgXCJsYWJlbFwiLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGNsYXNzOiBbX3ZtLnByZWZpeENscyArIFwiLWxhYmVsXCJdLFxuICAgICAgICAgICAgc3R5bGU6IF92bS5sYWJlbFN0eWxlcyxcbiAgICAgICAgICAgIGF0dHJzOiB7IGZvcjogX3ZtLmxhYmVsRm9yIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIFtfdm0uX3QoXCJsYWJlbFwiLCBbX3ZtLl92KF92bS5fcyhfdm0ubGFiZWwpKV0pXSxcbiAgICAgICAgICAyXG4gICAgICAgIClcbiAgICAgIDogX3ZtLl9lKCksXG4gICAgX3ZtLl92KFwiIFwiKSxcbiAgICBfYyhcbiAgICAgIFwiZGl2XCIsXG4gICAgICB7IGNsYXNzOiBbX3ZtLnByZWZpeENscyArIFwiLWNvbnRlbnRcIl0sIHN0eWxlOiBfdm0uY29udGVudFN0eWxlcyB9LFxuICAgICAgW1xuICAgICAgICBfdm0uX3QoXCJkZWZhdWx0XCIpLFxuICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICBfYyhcInRyYW5zaXRpb25cIiwgeyBhdHRyczogeyBuYW1lOiBcImZhZGVcIiB9IH0sIFtcbiAgICAgICAgICBfdm0udmFsaWRhdGVTdGF0ZSA9PT0gXCJlcnJvclwiICYmXG4gICAgICAgICAgX3ZtLnNob3dNZXNzYWdlICYmXG4gICAgICAgICAgX3ZtLmZvcm0uc2hvd01lc3NhZ2VcbiAgICAgICAgICAgID8gX2MoXCJkaXZcIiwgeyBjbGFzczogW192bS5wcmVmaXhDbHMgKyBcIi1lcnJvci10aXBcIl0gfSwgW1xuICAgICAgICAgICAgICAgIF92bS5fdihfdm0uX3MoX3ZtLnZhbGlkYXRlTWVzc2FnZSkpXG4gICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICA6IF92bS5fZSgpXG4gICAgICAgIF0pXG4gICAgICBdLFxuICAgICAgMlxuICAgIClcbiAgXSlcbn1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCJleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy90ZW1wbGF0ZUxvYWRlci5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4veGItZm9ybS1pdGVtLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD03NWY2Y2YwNiZcIiIsInZhciByZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgdmFyIF92bSA9IHRoaXNcbiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICByZXR1cm4gX2MoXCJkaXZcIiwgW1xuICAgIF9jKFwiZGl2XCIsIHtcbiAgICAgIGF0dHJzOiB7IGlkOiBfdm0ucmFuZG9tTnVtYmVyLCBuYW1lOiBcImNvbnRlbnRcIiwgdHlwZTogXCJ0ZXh0L3BsYWluXCIgfVxuICAgIH0pXG4gIF0pXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwiZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvdGVtcGxhdGVMb2FkZXIuanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL3hiLXVlZGl0b3IudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTdjNzg0Yzg2JlwiIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfYyhcImRpdlwiLCB7IGNsYXNzOiBfdm0uY2xhc3Nlc1RleHREaXYgfSwgW1xuICAgIF92bS50eXBlICE9PSBcInRleHRhcmVhXCJcbiAgICAgID8gX2MoXCJpbnB1dFwiLCB7XG4gICAgICAgICAgZGlyZWN0aXZlczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBuYW1lOiBcIm1vZGVsXCIsXG4gICAgICAgICAgICAgIHJhd05hbWU6IFwidi1tb2RlbFwiLFxuICAgICAgICAgICAgICB2YWx1ZTogX3ZtLm51bSxcbiAgICAgICAgICAgICAgZXhwcmVzc2lvbjogXCJudW1cIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIF0sXG4gICAgICAgICAgY2xhc3M6IF92bS5jbGFzc2VzVGV4dCxcbiAgICAgICAgICBzdHlsZTogX3ZtLmlucHV0U3R5bGUsXG4gICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBfdm0ucGxhY2VIb2xkZXIsXG4gICAgICAgICAgICBkaXNhYmxlZDogX3ZtLmRpc2FibGVkLFxuICAgICAgICAgICAgcmVhZG9ubHk6IF92bS5yZWFkb25seSxcbiAgICAgICAgICAgIG1heGxlbmd0aDogX3ZtLm1heGxlbmd0aCA/IF92bS5tYXhsZW5ndGggOiBcIlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBkb21Qcm9wczogeyB2YWx1ZTogX3ZtLm51bSB9LFxuICAgICAgICAgIG9uOiB7XG4gICAgICAgICAgICBpbnB1dDogW1xuICAgICAgICAgICAgICBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgICAgICAgICBpZiAoJGV2ZW50LnRhcmdldC5jb21wb3NpbmcpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBfdm0ubnVtID0gJGV2ZW50LnRhcmdldC52YWx1ZVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgICAgICAgICBfdm0uaW5wdXRDaGFuZ2UoX3ZtLm51bSlcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIDogX3ZtLl9lKCksXG4gICAgX3ZtLl92KFwiIFwiKSxcbiAgICBfdm0udHlwZSA9PT0gXCJ0ZXh0YXJlYVwiXG4gICAgICA/IF9jKFwidGV4dGFyZWFcIiwge1xuICAgICAgICAgIGRpcmVjdGl2ZXM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgbmFtZTogXCJtb2RlbFwiLFxuICAgICAgICAgICAgICByYXdOYW1lOiBcInYtbW9kZWxcIixcbiAgICAgICAgICAgICAgdmFsdWU6IF92bS50ZXh0VmFsdWUsXG4gICAgICAgICAgICAgIGV4cHJlc3Npb246IFwidGV4dFZhbHVlXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBdLFxuICAgICAgICAgIGNsYXNzOiBfdm0uY2xhc3Nlc1RleHRhcmVhLFxuICAgICAgICAgIHN0eWxlOiB7IGhlaWdodDogX3ZtLmhlaWdodE51bSArIDEwICsgXCJweFwiIH0sXG4gICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBfdm0ucGxhY2VIb2xkZXIsXG4gICAgICAgICAgICBkaXNhYmxlZDogX3ZtLmRpc2FibGVkLFxuICAgICAgICAgICAgcmVhZG9ubHk6IF92bS5yZWFkb25seSxcbiAgICAgICAgICAgIG1heGxlbmd0aDogX3ZtLm1heGxlbmd0aCA/IF92bS5tYXhsZW5ndGggOiBcIlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBkb21Qcm9wczogeyB2YWx1ZTogX3ZtLnRleHRWYWx1ZSB9LFxuICAgICAgICAgIG9uOiB7XG4gICAgICAgICAgICBpbnB1dDogW1xuICAgICAgICAgICAgICBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgICAgICAgICBpZiAoJGV2ZW50LnRhcmdldC5jb21wb3NpbmcpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBfdm0udGV4dFZhbHVlID0gJGV2ZW50LnRhcmdldC52YWx1ZVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgICAgICAgICBfdm0udGV4dGFyZWFDaGFuZ2UoKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgOiBfdm0uX2UoKSxcbiAgICBfdm0uX3YoXCIgXCIpLFxuICAgIF92bS5zdGF0dXMgPT0gXCJjbGVhcmFibGVcIiAmJiBfdm0ubnVtICYmICFfdm0uc3VmZml4SWNvblxuICAgICAgPyBfYyhcbiAgICAgICAgICBcInNwYW5cIixcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjbGFzczogX3ZtLmNsYXNzZWRSaWdodEljb24sXG4gICAgICAgICAgICBvbjoge1xuICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgX3ZtLmNsZWFyQ2xpY2soKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBbXG4gICAgICAgICAgICBfYyhcImlcIiwge1xuICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJ4Yi1pY29uLWNpcmNsZS1jbG9zZVwiLFxuICAgICAgICAgICAgICBjbGFzczogX3ZtLmNsYXNzZXNDbG9zZUljb25cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgXVxuICAgICAgICApXG4gICAgICA6IF92bS5fZSgpLFxuICAgIF92bS5fdihcIiBcIiksXG4gICAgX3ZtLnN0YXR1cyA9PSBcInN1Y2Nlc3NcIiAmJiAhX3ZtLnN1ZmZpeEljb25cbiAgICAgID8gX2MoXCJzcGFuXCIsIHsgY2xhc3M6IF92bS5jbGFzc2VkUmlnaHRJY29uIH0sIFtcbiAgICAgICAgICBfYyhcImlcIiwge1xuICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwieGItaWNvbi1jaXJjbGUtY2hlY2tcIixcbiAgICAgICAgICAgIGNsYXNzOiBfdm0uY2xhc3Nlc1N1Y2Nlc3NJY29uXG4gICAgICAgICAgfSlcbiAgICAgICAgXSlcbiAgICAgIDogX3ZtLl9lKCksXG4gICAgX3ZtLl92KFwiIFwiKSxcbiAgICBfdm0uc3RhdHVzID09IFwiZmFpbFwiICYmICFfdm0uc3VmZml4SWNvblxuICAgICAgPyBfYyhcInNwYW5cIiwgeyBjbGFzczogX3ZtLmNsYXNzZWRSaWdodEljb24gfSwgW1xuICAgICAgICAgIF9jKFwiaVwiLCB7XG4gICAgICAgICAgICBzdGF0aWNDbGFzczogXCJ4Yi1pY29uLWNpcmNsZS1jbG9zZVwiLFxuICAgICAgICAgICAgY2xhc3M6IF92bS5jbGFzc2VzRmFpbEljb25cbiAgICAgICAgICB9KVxuICAgICAgICBdKVxuICAgICAgOiBfdm0uX2UoKSxcbiAgICBfdm0uX3YoXCIgXCIpLFxuICAgIF92bS5wcmVmaXhJY29uXG4gICAgICA/IF9jKFwic3BhblwiLCB7IGNsYXNzOiBfdm0uY2xhc3NlZExlZnRJY29uIH0sIFtcbiAgICAgICAgICBfYyhcImlcIiwgeyBjbGFzczogX3ZtLnByZWZpeEljb24sIHN0eWxlOiBfdm0uaWNvblN0eWxlIH0pXG4gICAgICAgIF0pXG4gICAgICA6IF92bS5fZSgpLFxuICAgIF92bS5fdihcIiBcIiksXG4gICAgX3ZtLnN1ZmZpeEljb25cbiAgICAgID8gX2MoXCJzcGFuXCIsIHsgY2xhc3M6IF92bS5jbGFzc2VkUmlnaHRJY29uIH0sIFtcbiAgICAgICAgICBfYyhcImlcIiwgeyBjbGFzczogX3ZtLnN1ZmZpeEljb24sIHN0eWxlOiBfdm0uaWNvblN0eWxlIH0pXG4gICAgICAgIF0pXG4gICAgICA6IF92bS5fZSgpXG4gIF0pXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwiZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvdGVtcGxhdGVMb2FkZXIuanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL3hiLXRleHQudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTRiYjNjN2RjJlwiIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfYyhcbiAgICBcImJ1dHRvblwiLFxuICAgIHtcbiAgICAgIGNsYXNzOiBfdm0uY2xhc3NlcyxcbiAgICAgIGF0dHJzOiB7IGRpc2FibGVkOiBfdm0uZGlzYWJsZWQgfSxcbiAgICAgIG9uOiB7IGNsaWNrOiBfdm0uaGFuZGxlQ2xpY2sgfVxuICAgIH0sXG4gICAgW1xuICAgICAgX3ZtLmljb24gPyBfYyhcInhiLWljb25cIiwgeyBhdHRyczogeyB0eXBlOiBfdm0uaWNvbiB9IH0pIDogX3ZtLl9lKCksXG4gICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgX3ZtLiRzbG90cy5kZWZhdWx0ID8gX2MoXCJzcGFuXCIsIFtfdm0uX3QoXCJkZWZhdWx0XCIpXSwgMikgOiBfdm0uX2UoKVxuICAgIF0sXG4gICAgMVxuICApXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwiZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvdGVtcGxhdGVMb2FkZXIuanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL3hiLWJ1dHRvbi52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MjkxZDE1NWMmXCIiLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gIHZhciBfdm0gPSB0aGlzXG4gIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgcmV0dXJuIF9jKFwiZGl2XCIsIHsgY2xhc3M6IF92bS53cmFwQ2xhc3Nlcywgc3R5bGU6IF92bS5zdHlsZXMgfSwgW1xuICAgIF9jKFwiZGl2XCIsIHsgY2xhc3M6IF92bS5jbGFzc2VzIH0sIFtcbiAgICAgIF92bS5zaG93U2xvdEhlYWRlclxuICAgICAgICA/IF9jKFxuICAgICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICAgIHsgcmVmOiBcInRpdGxlXCIsIGNsYXNzOiBbX3ZtLnByZWZpeENscyArIFwiLXRpdGxlXCJdIH0sXG4gICAgICAgICAgICBbX3ZtLl90KFwiaGVhZGVyXCIpXSxcbiAgICAgICAgICAgIDJcbiAgICAgICAgICApXG4gICAgICAgIDogX3ZtLl9lKCksXG4gICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgX3ZtLnNob3dIZWFkZXJcbiAgICAgICAgPyBfYyhcbiAgICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHJlZjogXCJoZWFkZXJcIixcbiAgICAgICAgICAgICAgY2xhc3M6IFtfdm0ucHJlZml4Q2xzICsgXCItaGVhZGVyXCJdLFxuICAgICAgICAgICAgICBvbjogeyBtb3VzZXdoZWVsOiBfdm0uaGFuZGxlTW91c2VXaGVlbCB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgW1xuICAgICAgICAgICAgICBfYyhcInRhYmxlLWhlYWRcIiwge1xuICAgICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICBcInByZWZpeC1jbHNcIjogX3ZtLnByZWZpeENscyxcbiAgICAgICAgICAgICAgICAgIHN0eWxlT2JqZWN0OiBfdm0udGFibGVIZWFkZXJTdHlsZSxcbiAgICAgICAgICAgICAgICAgIGNvbHVtbnM6IF92bS5jbG9uZUNvbHVtbnMsXG4gICAgICAgICAgICAgICAgICBcImNvbHVtbi1yb3dzXCI6IF92bS5jb2x1bW5Sb3dzLFxuICAgICAgICAgICAgICAgICAgXCJvYmotZGF0YVwiOiBfdm0ub2JqRGF0YSxcbiAgICAgICAgICAgICAgICAgIFwiY29sdW1ucy13aWR0aFwiOiBfdm0uY29sdW1uc1dpZHRoLFxuICAgICAgICAgICAgICAgICAgZGF0YTogX3ZtLnJlYnVpbGREYXRhXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIDFcbiAgICAgICAgICApXG4gICAgICAgIDogX3ZtLl9lKCksXG4gICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgX2MoXG4gICAgICAgIFwiZGl2XCIsXG4gICAgICAgIHtcbiAgICAgICAgICBkaXJlY3RpdmVzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIG5hbWU6IFwic2hvd1wiLFxuICAgICAgICAgICAgICByYXdOYW1lOiBcInYtc2hvd1wiLFxuICAgICAgICAgICAgICB2YWx1ZTogIShcbiAgICAgICAgICAgICAgICAoISFfdm0ubG9jYWxlTm9EYXRhVGV4dCAmJlxuICAgICAgICAgICAgICAgICAgKCFfdm0uZGF0YSB8fCBfdm0uZGF0YS5sZW5ndGggPT09IDApKSB8fFxuICAgICAgICAgICAgICAgICghIV92bS5sb2NhbGVOb0ZpbHRlcmVkRGF0YVRleHQgJiZcbiAgICAgICAgICAgICAgICAgICghX3ZtLnJlYnVpbGREYXRhIHx8IF92bS5yZWJ1aWxkRGF0YS5sZW5ndGggPT09IDApKVxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICBleHByZXNzaW9uOlxuICAgICAgICAgICAgICAgIFwiISgoISFsb2NhbGVOb0RhdGFUZXh0ICYmICghZGF0YSB8fCBkYXRhLmxlbmd0aCA9PT0gMCkpIHx8ICghIWxvY2FsZU5vRmlsdGVyZWREYXRhVGV4dCAmJiAoIXJlYnVpbGREYXRhIHx8IHJlYnVpbGREYXRhLmxlbmd0aCA9PT0gMCkpKVwiXG4gICAgICAgICAgICB9XG4gICAgICAgICAgXSxcbiAgICAgICAgICByZWY6IFwiYm9keVwiLFxuICAgICAgICAgIGNsYXNzOiBbX3ZtLnByZWZpeENscyArIFwiLWJvZHlcIl0sXG4gICAgICAgICAgc3R5bGU6IF92bS5ib2R5U3R5bGUsXG4gICAgICAgICAgb246IHsgc2Nyb2xsOiBfdm0uaGFuZGxlQm9keVNjcm9sbCB9XG4gICAgICAgIH0sXG4gICAgICAgIFtcbiAgICAgICAgICBfYyhcInRhYmxlLWJvZHlcIiwge1xuICAgICAgICAgICAgcmVmOiBcInRib2R5XCIsXG4gICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICBcInByZWZpeC1jbHNcIjogX3ZtLnByZWZpeENscyxcbiAgICAgICAgICAgICAgc3R5bGVPYmplY3Q6IF92bS50YWJsZVN0eWxlLFxuICAgICAgICAgICAgICBjb2x1bW5zOiBfdm0uY2xvbmVDb2x1bW5zLFxuICAgICAgICAgICAgICBkYXRhOiBfdm0ucmVidWlsZERhdGEsXG4gICAgICAgICAgICAgIFwiY29sdW1ucy13aWR0aFwiOiBfdm0uY29sdW1uc1dpZHRoLFxuICAgICAgICAgICAgICBcIm9iai1kYXRhXCI6IF92bS5vYmpEYXRhXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgXSxcbiAgICAgICAgMVxuICAgICAgKSxcbiAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICBfYyhcbiAgICAgICAgXCJkaXZcIixcbiAgICAgICAge1xuICAgICAgICAgIGRpcmVjdGl2ZXM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgbmFtZTogXCJzaG93XCIsXG4gICAgICAgICAgICAgIHJhd05hbWU6IFwidi1zaG93XCIsXG4gICAgICAgICAgICAgIHZhbHVlOlxuICAgICAgICAgICAgICAgICghIV92bS5sb2NhbGVOb0RhdGFUZXh0ICYmXG4gICAgICAgICAgICAgICAgICAoIV92bS5kYXRhIHx8IF92bS5kYXRhLmxlbmd0aCA9PT0gMCkpIHx8XG4gICAgICAgICAgICAgICAgKCEhX3ZtLmxvY2FsZU5vRmlsdGVyZWREYXRhVGV4dCAmJlxuICAgICAgICAgICAgICAgICAgKCFfdm0ucmVidWlsZERhdGEgfHwgX3ZtLnJlYnVpbGREYXRhLmxlbmd0aCA9PT0gMCkpLFxuICAgICAgICAgICAgICBleHByZXNzaW9uOlxuICAgICAgICAgICAgICAgIFwiKCghIWxvY2FsZU5vRGF0YVRleHQgJiYgKCFkYXRhIHx8IGRhdGEubGVuZ3RoID09PSAwKSkgfHwgKCEhbG9jYWxlTm9GaWx0ZXJlZERhdGFUZXh0ICYmICghcmVidWlsZERhdGEgfHwgcmVidWlsZERhdGEubGVuZ3RoID09PSAwKSkpXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBdLFxuICAgICAgICAgIGNsYXNzOiBbX3ZtLnByZWZpeENscyArIFwiLXRpcFwiXSxcbiAgICAgICAgICBzdHlsZTogX3ZtLmJvZHlTdHlsZSxcbiAgICAgICAgICBvbjogeyBzY3JvbGw6IF92bS5oYW5kbGVCb2R5U2Nyb2xsIH1cbiAgICAgICAgfSxcbiAgICAgICAgW1xuICAgICAgICAgIF9jKFxuICAgICAgICAgICAgXCJ0YWJsZVwiLFxuICAgICAgICAgICAgeyBhdHRyczogeyBjZWxsc3BhY2luZzogXCIwXCIsIGNlbGxwYWRkaW5nOiBcIjBcIiwgYm9yZGVyOiBcIjBcIiB9IH0sXG4gICAgICAgICAgICBbXG4gICAgICAgICAgICAgIF9jKFwidGJvZHlcIiwgW1xuICAgICAgICAgICAgICAgIF9jKFwidHJcIiwgW1xuICAgICAgICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgICAgICAgIFwidGRcIixcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IF92bS5ib2R5U3R5bGUuaGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHRoaXMuaGVhZGVyV2lkdGggKyBcInB4XCJcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAhX3ZtLmRhdGEgfHwgX3ZtLmRhdGEubGVuZ3RoID09PSAwXG4gICAgICAgICAgICAgICAgICAgICAgICA/IF9jKFwic3BhblwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9tUHJvcHM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlubmVySFRNTDogX3ZtLl9zKF92bS5sb2NhbGVOb0RhdGFUZXh0KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIDogX2MoXCJzcGFuXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb21Qcm9wczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5uZXJIVE1MOiBfdm0uX3MoX3ZtLmxvY2FsZU5vRmlsdGVyZWREYXRhVGV4dClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgXVxuICAgICAgICAgIClcbiAgICAgICAgXVxuICAgICAgKSxcbiAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICBfdm0uaXNMZWZ0Rml4ZWRcbiAgICAgICAgPyBfYyhcbiAgICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgICB7IGNsYXNzOiBbX3ZtLnByZWZpeENscyArIFwiLWZpeGVkXCJdLCBzdHlsZTogX3ZtLmZpeGVkVGFibGVTdHlsZSB9LFxuICAgICAgICAgICAgW1xuICAgICAgICAgICAgICBfdm0uc2hvd0hlYWRlclxuICAgICAgICAgICAgICAgID8gX2MoXG4gICAgICAgICAgICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgICAgICAgICAgIHsgY2xhc3M6IF92bS5maXhlZEhlYWRlckNsYXNzZXMgfSxcbiAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgIF9jKFwidGFibGUtaGVhZFwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBmaXhlZDogXCJsZWZ0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwicHJlZml4LWNsc1wiOiBfdm0ucHJlZml4Q2xzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZU9iamVjdDogX3ZtLmZpeGVkVGFibGVTdHlsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uczogX3ZtLmxlZnRGaXhlZENvbHVtbnMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwiY29sdW1uLXJvd3NcIjogX3ZtLmNvbHVtblJvd3MsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwiZml4ZWQtY29sdW1uLXJvd3NcIjogX3ZtLmxlZnRGaXhlZENvbHVtblJvd3MsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwib2JqLWRhdGFcIjogX3ZtLm9iakRhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwiY29sdW1ucy13aWR0aFwiOiBfdm0uY29sdW1uc1dpZHRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBfdm0ucmVidWlsZERhdGFcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAxXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgOiBfdm0uX2UoKSxcbiAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICByZWY6IFwiZml4ZWRCb2R5XCIsXG4gICAgICAgICAgICAgICAgICBjbGFzczogW192bS5wcmVmaXhDbHMgKyBcIi1maXhlZC1ib2R5XCJdLFxuICAgICAgICAgICAgICAgICAgc3R5bGU6IF92bS5maXhlZEJvZHlTdHlsZSxcbiAgICAgICAgICAgICAgICAgIG9uOiB7XG4gICAgICAgICAgICAgICAgICAgIG1vdXNld2hlZWw6IF92bS5oYW5kbGVGaXhlZE1vdXNld2hlZWwsXG4gICAgICAgICAgICAgICAgICAgIERPTU1vdXNlU2Nyb2xsOiBfdm0uaGFuZGxlRml4ZWRNb3VzZXdoZWVsXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICBfYyhcInRhYmxlLWJvZHlcIiwge1xuICAgICAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgICAgIGZpeGVkOiBcImxlZnRcIixcbiAgICAgICAgICAgICAgICAgICAgICBcInByZWZpeC1jbHNcIjogX3ZtLnByZWZpeENscyxcbiAgICAgICAgICAgICAgICAgICAgICBzdHlsZU9iamVjdDogX3ZtLmZpeGVkVGFibGVTdHlsZSxcbiAgICAgICAgICAgICAgICAgICAgICBjb2x1bW5zOiBfdm0ubGVmdEZpeGVkQ29sdW1ucyxcbiAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBfdm0ucmVidWlsZERhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgXCJjb2x1bW5zLXdpZHRoXCI6IF92bS5jb2x1bW5zV2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgXCJvYmotZGF0YVwiOiBfdm0ub2JqRGF0YVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgMVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICBdXG4gICAgICAgICAgKVxuICAgICAgICA6IF92bS5fZSgpLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF92bS5pc1JpZ2h0Rml4ZWRcbiAgICAgICAgPyBfYyhcbiAgICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGNsYXNzOiBbX3ZtLnByZWZpeENscyArIFwiLWZpeGVkLXJpZ2h0XCJdLFxuICAgICAgICAgICAgICBzdHlsZTogX3ZtLmZpeGVkUmlnaHRUYWJsZVN0eWxlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgW1xuICAgICAgICAgICAgICBfdm0uc2hvd0hlYWRlclxuICAgICAgICAgICAgICAgID8gX2MoXG4gICAgICAgICAgICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgICAgICAgICAgIHsgY2xhc3M6IF92bS5maXhlZEhlYWRlckNsYXNzZXMgfSxcbiAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgIF9jKFwidGFibGUtaGVhZFwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBmaXhlZDogXCJyaWdodFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcInByZWZpeC1jbHNcIjogX3ZtLnByZWZpeENscyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGVPYmplY3Q6IF92bS5maXhlZFJpZ2h0VGFibGVTdHlsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uczogX3ZtLnJpZ2h0Rml4ZWRDb2x1bW5zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcImNvbHVtbi1yb3dzXCI6IF92bS5jb2x1bW5Sb3dzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcImZpeGVkLWNvbHVtbi1yb3dzXCI6IF92bS5yaWdodEZpeGVkQ29sdW1uUm93cyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJvYmotZGF0YVwiOiBfdm0ub2JqRGF0YSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJjb2x1bW5zLXdpZHRoXCI6IF92bS5jb2x1bW5zV2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IF92bS5yZWJ1aWxkRGF0YVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgIDFcbiAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICA6IF92bS5fZSgpLFxuICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIHJlZjogXCJmaXhlZFJpZ2h0Qm9keVwiLFxuICAgICAgICAgICAgICAgICAgY2xhc3M6IFtfdm0ucHJlZml4Q2xzICsgXCItZml4ZWQtYm9keVwiXSxcbiAgICAgICAgICAgICAgICAgIHN0eWxlOiBfdm0uZml4ZWRCb2R5U3R5bGUsXG4gICAgICAgICAgICAgICAgICBvbjoge1xuICAgICAgICAgICAgICAgICAgICBtb3VzZXdoZWVsOiBfdm0uaGFuZGxlRml4ZWRNb3VzZXdoZWVsLFxuICAgICAgICAgICAgICAgICAgICBET01Nb3VzZVNjcm9sbDogX3ZtLmhhbmRsZUZpeGVkTW91c2V3aGVlbFxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgX2MoXCJ0YWJsZS1ib2R5XCIsIHtcbiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICBmaXhlZDogXCJyaWdodFwiLFxuICAgICAgICAgICAgICAgICAgICAgIFwicHJlZml4LWNsc1wiOiBfdm0ucHJlZml4Q2xzLFxuICAgICAgICAgICAgICAgICAgICAgIHN0eWxlT2JqZWN0OiBfdm0uZml4ZWRSaWdodFRhYmxlU3R5bGUsXG4gICAgICAgICAgICAgICAgICAgICAgY29sdW1uczogX3ZtLnJpZ2h0Rml4ZWRDb2x1bW5zLFxuICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IF92bS5yZWJ1aWxkRGF0YSxcbiAgICAgICAgICAgICAgICAgICAgICBcImNvbHVtbnMtd2lkdGhcIjogX3ZtLmNvbHVtbnNXaWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICBcIm9iai1kYXRhXCI6IF92bS5vYmpEYXRhXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAxXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIF1cbiAgICAgICAgICApXG4gICAgICAgIDogX3ZtLl9lKCksXG4gICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgX3ZtLmlzUmlnaHRGaXhlZFxuICAgICAgICA/IF9jKFwiZGl2XCIsIHtcbiAgICAgICAgICAgIGNsYXNzOiBbX3ZtLnByZWZpeENscyArIFwiLWZpeGVkLXJpZ2h0LWhlYWRlclwiXSxcbiAgICAgICAgICAgIHN0eWxlOiBfdm0uZml4ZWRSaWdodEhlYWRlclN0eWxlXG4gICAgICAgICAgfSlcbiAgICAgICAgOiBfdm0uX2UoKSxcbiAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICBfdm0uc2hvd1Nsb3RGb290ZXJcbiAgICAgICAgPyBfYyhcbiAgICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgICB7IHJlZjogXCJmb290ZXJcIiwgY2xhc3M6IFtfdm0ucHJlZml4Q2xzICsgXCItZm9vdGVyXCJdIH0sXG4gICAgICAgICAgICBbX3ZtLl90KFwiZm9vdGVyXCIpXSxcbiAgICAgICAgICAgIDJcbiAgICAgICAgICApXG4gICAgICAgIDogX3ZtLl9lKClcbiAgICBdKVxuICBdKVxufVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsImV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3RlbXBsYXRlTG9hZGVyLmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi94Yi10YWJsZS52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MzVjNzEwYzYmXCIiLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gIHZhciBfdm0gPSB0aGlzXG4gIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgcmV0dXJuIF9jKFwiZGl2XCIsIHsgY2xhc3M6IF92bS5jbGFzc2VzRGl2LCBzdHlsZTogX3ZtLmlucHV0U3R5bGUgfSwgW1xuICAgIF9jKFwiaW5wdXRcIiwge1xuICAgICAgZGlyZWN0aXZlczogW1xuICAgICAgICB7XG4gICAgICAgICAgbmFtZTogXCJtb2RlbFwiLFxuICAgICAgICAgIHJhd05hbWU6IFwidi1tb2RlbFwiLFxuICAgICAgICAgIHZhbHVlOiBfdm0udmFsdWUsXG4gICAgICAgICAgZXhwcmVzc2lvbjogXCJ2YWx1ZVwiXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBjbGFzczogX3ZtLmNsYXNzZXNJbnB1dCxcbiAgICAgIGF0dHJzOiB7IHBsYWNlaG9sZGVyOiBfdm0ucGxhY2Vob2xkZXIgfSxcbiAgICAgIGRvbVByb3BzOiB7IHZhbHVlOiBfdm0udmFsdWUgfSxcbiAgICAgIG9uOiB7XG4gICAgICAgIGlucHV0OiBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgICBpZiAoJGV2ZW50LnRhcmdldC5jb21wb3NpbmcpIHtcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgIH1cbiAgICAgICAgICBfdm0udmFsdWUgPSAkZXZlbnQudGFyZ2V0LnZhbHVlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KSxcbiAgICBfdm0uX3YoXCIgXCIpLFxuICAgICFfdm0uaGlkZGVuXG4gICAgICA/IF9jKFxuICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgeyBjbGFzczogX3ZtLmNsYXNzZXNTZWFyY2hEaXYsIG9uOiB7IGNsaWNrOiBfdm0uaGFuZGxlQ2xpY2sgfSB9LFxuICAgICAgICAgIFtfYyhcImlcIiwgeyBzdGF0aWNDbGFzczogXCJ4Yi1pY29uLXNlYXJjaFwiIH0pXVxuICAgICAgICApXG4gICAgICA6IF92bS5fZSgpLFxuICAgIF92bS5fdihcIiBcIiksXG4gICAgX3ZtLmhpZGRlblxuICAgICAgPyBfYyhcbiAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgIHsgY2xhc3M6IF92bS5jbGFzc2VzU2VhcmNoRGl2SGlkZGVuLCBvbjogeyBjbGljazogX3ZtLmhhbmRsZUNsaWNrIH0gfSxcbiAgICAgICAgICBbX2MoXCJpXCIsIHsgc3RhdGljQ2xhc3M6IFwieGItaWNvbi1zZWFyY2hcIiB9KV1cbiAgICAgICAgKVxuICAgICAgOiBfdm0uX2UoKSxcbiAgICBfdm0uX3YoXCIgXCIpLFxuICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljU3R5bGU6IHsgY2xlYXI6IFwiYm90aFwiIH0gfSlcbiAgXSlcbn1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCJleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy90ZW1wbGF0ZUxvYWRlci5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4veGItc2VhcmNoLWJ0bi52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9ZGVkOWYwYjQmXCIiLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gIHZhciBfdm0gPSB0aGlzXG4gIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgcmV0dXJuIF9jKFxuICAgIFwibGFiZWxcIixcbiAgICB7IGNsYXNzOiBfdm0ud3JhcENsYXNzZXMgfSxcbiAgICBbXG4gICAgICBfYyhcInNwYW5cIiwgeyBjbGFzczogX3ZtLnJhZGlvQ2xhc3NlcyB9LCBbXG4gICAgICAgIF9jKFwic3BhblwiLCB7IGNsYXNzOiBfdm0uaW5uZXJDbGFzc2VzIH0pLFxuICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICBfYyhcImlucHV0XCIsIHtcbiAgICAgICAgICBjbGFzczogX3ZtLmlucHV0Q2xhc3NlcyxcbiAgICAgICAgICBhdHRyczogeyB0eXBlOiBcInJhZGlvXCIsIGRpc2FibGVkOiBfdm0uZGlzYWJsZWQsIG5hbWU6IF92bS5ncm91cE5hbWUgfSxcbiAgICAgICAgICBkb21Qcm9wczogeyBjaGVja2VkOiBfdm0uY3VycmVudFZhbHVlIH0sXG4gICAgICAgICAgb246IHsgY2hhbmdlOiBfdm0uY2hhbmdlLCBmb2N1czogX3ZtLm9uRm9jdXMsIGJsdXI6IF92bS5vbkJsdXIgfVxuICAgICAgICB9KVxuICAgICAgXSksXG4gICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgX3ZtLl90KFwiZGVmYXVsdFwiLCBbX3ZtLl92KF92bS5fcyhfdm0ubGFiZWwpKV0pXG4gICAgXSxcbiAgICAyXG4gIClcbn1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCJleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy90ZW1wbGF0ZUxvYWRlci5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4veGItcmFkaW8udnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTc5NjRmMWU2JlwiIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfYyhcbiAgICBcImRpdlwiLFxuICAgIHsgY2xhc3M6IF92bS5jbGFzc2VzLCBhdHRyczogeyBuYW1lOiBfdm0ubmFtZSB9IH0sXG4gICAgW192bS5fdChcImRlZmF1bHRcIildLFxuICAgIDJcbiAgKVxufVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsImV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3RlbXBsYXRlTG9hZGVyLmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi94Yi1yYWRpby1ncm91cC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MjVmYzQwZDgmXCIiLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gIHZhciBfdm0gPSB0aGlzXG4gIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgcmV0dXJuIF92bS52aXNpYmxlXG4gICAgPyBfYyhcImRpdlwiLCBbXG4gICAgICAgIF9jKFwiZGl2XCIsIHsgY2xhc3M6IF92bS5tYXNrQ2xhc3Nlcywgb246IHsgY2xpY2s6IF92bS5tYXNrIH0gfSksXG4gICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgIF9jKFwiZGl2XCIsIHsgY2xhc3M6IF92bS53cmFwQ2xhc3NlcyB9LCBbXG4gICAgICAgICAgX2MoXCJkaXZcIiwgeyBjbGFzczogX3ZtLmNsYXNzZXMsIHN0eWxlOiBfdm0ubWFpblN0eWxlcyB9LCBbXG4gICAgICAgICAgICBfYyhcImRpdlwiLCB7IGNsYXNzOiBbX3ZtLnByZWZpeENscyArIFwiLWNvbnRlbnRcIl0gfSwgW1xuICAgICAgICAgICAgICBfdm0uY2xvc2FibGVcbiAgICAgICAgICAgICAgICA/IF9jKFxuICAgICAgICAgICAgICAgICAgICBcImFcIixcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiBbX3ZtLnByZWZpeENscyArIFwiLWNsb3NlXCJdLFxuICAgICAgICAgICAgICAgICAgICAgIG9uOiB7IGNsaWNrOiBfdm0uY2xvc2UgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl90KFwiY2xvc2VcIiwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgX2MoXCJ4Yi1pY29uXCIsIHsgYXR0cnM6IHsgdHlwZTogXCJjbG9zZVwiIH0gfSlcbiAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAyXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgOiBfdm0uX2UoKSxcbiAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgX3ZtLnNob3dIZWFkXG4gICAgICAgICAgICAgICAgPyBfYyhcbiAgICAgICAgICAgICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICAgICAgICAgICAgeyBjbGFzczogW192bS5wcmVmaXhDbHMgKyBcIi1oZWFkZXJcIl0gfSxcbiAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdChcImhlYWRlclwiLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgeyBjbGFzczogW192bS5wcmVmaXhDbHMgKyBcIi1oZWFkZXItaW5uZXJcIl0gfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdihfdm0uX3MoX3ZtLnRpdGxlKSldXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgMlxuICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIDogX3ZtLl9lKCksXG4gICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgICAgICAgeyBjbGFzczogW192bS5wcmVmaXhDbHMgKyBcIi1ib2R5XCJdIH0sXG4gICAgICAgICAgICAgICAgW192bS5fdChcImRlZmF1bHRcIildLFxuICAgICAgICAgICAgICAgIDJcbiAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgIV92bS5mb290ZXJIaWRlXG4gICAgICAgICAgICAgICAgPyBfYyhcbiAgICAgICAgICAgICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICAgICAgICAgICAgeyBjbGFzczogW192bS5wcmVmaXhDbHMgKyBcIi1mb290ZXJcIl0gfSxcbiAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdChcImZvb3RlclwiLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ4Yi1idXR0b25cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHR5cGU6IFwiZGVmYXVsdFwiIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF0aXZlT246IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5vaygkZXZlbnQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KF92bS5fcyhfdm0ubG9jYWxlT2tUZXh0KSldXG4gICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcInhiLWJ1dHRvblwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogXCJyZXNldFwiIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF0aXZlT246IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5jYW5jZWwoJGV2ZW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdihfdm0uX3MoX3ZtLmxvY2FsZUNhbmNlbFRleHQpKV1cbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAyXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgOiBfdm0uX2UoKVxuICAgICAgICAgICAgXSlcbiAgICAgICAgICBdKVxuICAgICAgICBdKVxuICAgICAgXSlcbiAgICA6IF92bS5fZSgpXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwiZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvdGVtcGxhdGVMb2FkZXIuanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL3hiLXBvcHVwLXdpbmRvdy52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9Yjk0MjhmY2MmXCIiLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gIHZhciBfdm0gPSB0aGlzXG4gIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgcmV0dXJuIF92bS5sb2FkU2hvd1xuICAgID8gX2MoXCJkaXZcIiwgeyBjbGFzczogW192bS5wcmVmaXhDbHMsIF92bS5jdXN0b21DbGFzc10gfSwgW1xuICAgICAgICBfYyhcImRpdlwiLCB7IGNsYXNzOiBbX3ZtLnByZWZpeENscyArIFwiLXdycFwiXSB9LCBbXG4gICAgICAgICAgX2MoXG4gICAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgICAgeyBjbGFzczogW192bS5wcmVmaXhDbHMgKyBcIi1kZXNjXCIsIFwiZmxleC13cnBcIiwgXCJmbGV4LXdycC1jbnRcIl0gfSxcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICAgICAgICB7IGNsYXNzOiBbX3ZtLnByZWZpeENscyArIFwiLXJvdGF0ZVwiXSB9LFxuICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgIF9jKFwieGItaWNvblwiLCB7XG4gICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJsb2FkaW5nXCIsXG4gICAgICAgICAgICAgICAgICAgICAgY29sb3I6IF92bS5sb2FkQ29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgc2l6ZTogX3ZtLmxvYWRTaXplXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAxXG4gICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgIF92bS5zaG93VHh0XG4gICAgICAgICAgICAgICAgPyBfYyhcImRpdlwiLCB7IGNsYXNzOiBbX3ZtLnByZWZpeENscyArIFwiLXR4dFwiXSB9LCBbXG4gICAgICAgICAgICAgICAgICAgIF92bS5fdihfdm0uX3MoX3ZtLmxvY2FsZUxvYWRUZXh0KSlcbiAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgOiBfdm0uX2UoKVxuICAgICAgICAgICAgXVxuICAgICAgICAgIClcbiAgICAgICAgXSlcbiAgICAgIF0pXG4gICAgOiBfdm0uX2UoKVxufVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsImV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3RlbXBsYXRlTG9hZGVyLmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi94Yi1sb2FkaW5nLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD1hZTQ5ZDU3NCZcIiIsInZhciByZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgdmFyIF92bSA9IHRoaXNcbiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICByZXR1cm4gX2MoXG4gICAgXCJkaXZcIixcbiAgICBbX2MoXCJtYWluSGVhZGVyXCIpLCBfdm0uX3YoXCIgXCIpLCBfYyhcInJvdXRlci12aWV3XCIsIHsgc3RhdGljQ2xhc3M6IFwidmlld1wiIH0pXSxcbiAgICAxXG4gIClcbn1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCJleHBvcnQgKiBmcm9tIFwiLSEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy90ZW1wbGF0ZUxvYWRlci5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vQXBwLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0xZWJjYWM0OSZcIiIsInZhciByZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgdmFyIF92bSA9IHRoaXNcbiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICByZXR1cm4gX2MoXCJkaXZcIiwgeyBjbGFzczogX3ZtLndob2xlQ2xhc3NlcyB9LCBbXG4gICAgX2MoXCJkaXZcIiwgeyBjbGFzczogX3ZtLmlucHV0RGl2Q2xhc3Nlcywgc3R5bGU6IF92bS5pbnB1dFN0eWxlIH0sIFtcbiAgICAgIF9jKFwiaW5wdXRcIiwge1xuICAgICAgICBkaXJlY3RpdmVzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogXCJtb2RlbFwiLFxuICAgICAgICAgICAgcmF3TmFtZTogXCJ2LW1vZGVsXCIsXG4gICAgICAgICAgICB2YWx1ZTogX3ZtLm51bSxcbiAgICAgICAgICAgIGV4cHJlc3Npb246IFwibnVtXCJcbiAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGNsYXNzOiBfdm0uaW5wdXRDbGFzc2VzLFxuICAgICAgICBhdHRyczogeyB0eXBlOiBcInRleHRcIiwgZGlzYWJsZWQ6IF92bS5kaXNhYmxlZCB9LFxuICAgICAgICBkb21Qcm9wczogeyB2YWx1ZTogX3ZtLm51bSB9LFxuICAgICAgICBvbjoge1xuICAgICAgICAgIGlucHV0OiBbXG4gICAgICAgICAgICBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgICAgICAgaWYgKCRldmVudC50YXJnZXQuY29tcG9zaW5nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgX3ZtLm51bSA9ICRldmVudC50YXJnZXQudmFsdWVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgICAgICAgX3ZtLmlucHV0Q2hhbmdlKF92bS5udW0pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgXSxcbiAgICAgICAgICBjaGFuZ2U6IGZ1bmN0aW9uKCRldmVudCkge1xuICAgICAgICAgICAgX3ZtLmNoYW5nZUlucHV0KF92bS5udW0pXG4gICAgICAgICAgfSxcbiAgICAgICAgICBmb2N1czogZnVuY3Rpb24oJGV2ZW50KSB7XG4gICAgICAgICAgICBfdm0uZm9jdXMoKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSlcbiAgICBdKSxcbiAgICBfdm0uX3YoXCIgXCIpLFxuICAgIF9jKFwic3BhblwiLCB7IGNsYXNzOiBfdm0uYXJyb3dEaXZDbGFzc2VzIH0sIFtcbiAgICAgIF9jKFxuICAgICAgICBcInNwYW5cIixcbiAgICAgICAge1xuICAgICAgICAgIGNsYXNzOiBfdm0uYXJyb3dEb3duQ2xhc3NlcyxcbiAgICAgICAgICBvbjoge1xuICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkge1xuICAgICAgICAgICAgICBfdm0uYWRkVmFsdWUoX3ZtLmRpc2FibGVkID8gdHJ1ZSA6IGZhbHNlKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgW192bS5fdihcIitcIildXG4gICAgICApLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF9jKFxuICAgICAgICBcInNwYW5cIixcbiAgICAgICAge1xuICAgICAgICAgIGNsYXNzOiBfdm0uYXJyb3dDbGFzc2VzLFxuICAgICAgICAgIG9uOiB7XG4gICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7XG4gICAgICAgICAgICAgIF92bS5zdWJ0cmFjdFZhbHVlKF92bS5kaXNhYmxlZCA/IHRydWUgOiBmYWxzZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFtfdm0uX3YoXCItXCIpXVxuICAgICAgKVxuICAgIF0pXG4gIF0pXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwiZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvdGVtcGxhdGVMb2FkZXIuanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL3hiLWlucHV0LW51bWJlci52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MjFlMGY2OTAmXCIiLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gIHZhciBfdm0gPSB0aGlzXG4gIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgcmV0dXJuIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiZG9jcy1kZW1vLXdyYXBwZXJcIiB9LCBbXG4gICAgX2MoXG4gICAgICBcImRpdlwiLFxuICAgICAge1xuICAgICAgICBzdGF0aWNDbGFzczogXCJkZW1vLWNvbnRhaW5lclwiLFxuICAgICAgICBzdHlsZTogeyBoZWlnaHQ6IF92bS5pc0V4cGFuZCA/IFwiYXV0b1wiIDogXCIwXCIgfVxuICAgICAgfSxcbiAgICAgIFtcbiAgICAgICAgX2MoXCJkaXZcIiwgeyBhdHRyczogeyBzcGFuOiBcIjE0XCIgfSB9LCBbXG4gICAgICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJkb2NzLWRlbW8gZG9jcy1kZW1vLS1leHBhbmRcIiB9LCBbXG4gICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogXCJoaWdobGlnaHQtd3JhcHBlclwiIH0sXG4gICAgICAgICAgICAgIFtfdm0uX3QoXCJoaWdobGlnaHRcIildLFxuICAgICAgICAgICAgICAyXG4gICAgICAgICAgICApXG4gICAgICAgICAgXSlcbiAgICAgICAgXSlcbiAgICAgIF1cbiAgICApLFxuICAgIF92bS5fdihcIiBcIiksXG4gICAgX2MoXG4gICAgICBcInNwYW5cIixcbiAgICAgIHtcbiAgICAgICAgc3RhdGljQ2xhc3M6IFwiZG9jcy10cmFucyBkb2NzLWRlbW9fX3RyaWFuZ2xlXCIsXG4gICAgICAgIG9uOiB7IGNsaWNrOiBfdm0udG9nZ2xlIH1cbiAgICAgIH0sXG4gICAgICBbX3ZtLl92KF92bS5fcyhfdm0uaXNFeHBhbmQgPyBcIumakOiXj+S7o+eggVwiIDogXCLmmL7npLrku6PnoIFcIikpXVxuICAgIClcbiAgXSlcbn1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCJleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy90ZW1wbGF0ZUxvYWRlci5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vZGVtby1ibG9jay52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9NjIyMjZkODQmXCIiLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gIHZhciBfdm0gPSB0aGlzXG4gIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgcmV0dXJuIF9jKFwiZGl2XCIsIHsgY2xhc3M6IF92bS5jbGFzc2VzIH0sIFtfdm0uX3QoXCJkZWZhdWx0XCIpXSwgMilcbn1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCJleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy90ZW1wbGF0ZUxvYWRlci5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4veGItY2hlY2tib3gtZ3JvdXAudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTFmZDJhMjMwJlwiIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfYyhcbiAgICBcImZvcm1cIixcbiAgICB7IGNsYXNzOiBfdm0uY2xhc3NlcywgYXR0cnM6IHsgYXV0b2NvbXBsZXRlOiBfdm0uYXV0b2NvbXBsZXRlIH0gfSxcbiAgICBbX3ZtLl90KFwiZGVmYXVsdFwiKV0sXG4gICAgMlxuICApXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwiZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvdGVtcGxhdGVMb2FkZXIuanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL3hiLWZvcm0udnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTgwMWMwYzgwJlwiIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfYyhcbiAgICBcImxhYmVsXCIsXG4gICAgeyBjbGFzczogX3ZtLndyYXBDbGFzc2VzIH0sXG4gICAgW1xuICAgICAgX2MoXCJzcGFuXCIsIHsgY2xhc3M6IF92bS5jaGVja2JveENsYXNzZXMgfSwgW1xuICAgICAgICBfYyhcInNwYW5cIiwgeyBjbGFzczogX3ZtLmlubmVyQ2xhc3NlcyB9KSxcbiAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgX3ZtLmdyb3VwXG4gICAgICAgICAgPyBfYyhcImlucHV0XCIsIHtcbiAgICAgICAgICAgICAgZGlyZWN0aXZlczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIG5hbWU6IFwibW9kZWxcIixcbiAgICAgICAgICAgICAgICAgIHJhd05hbWU6IFwidi1tb2RlbFwiLFxuICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5tb2RlbCxcbiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246IFwibW9kZWxcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgY2xhc3M6IF92bS5pbnB1dENsYXNzZXMsXG4gICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJjaGVja2JveFwiLFxuICAgICAgICAgICAgICAgIGRpc2FibGVkOiBfdm0uZGlzYWJsZWQsXG4gICAgICAgICAgICAgICAgbmFtZTogX3ZtLm5hbWVcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgZG9tUHJvcHM6IHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLmxhYmVsLFxuICAgICAgICAgICAgICAgIGNoZWNrZWQ6IEFycmF5LmlzQXJyYXkoX3ZtLm1vZGVsKVxuICAgICAgICAgICAgICAgICAgPyBfdm0uX2koX3ZtLm1vZGVsLCBfdm0ubGFiZWwpID4gLTFcbiAgICAgICAgICAgICAgICAgIDogX3ZtLm1vZGVsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIG9uOiB7XG4gICAgICAgICAgICAgICAgY2hhbmdlOiBbXG4gICAgICAgICAgICAgICAgICBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyICQkYSA9IF92bS5tb2RlbCxcbiAgICAgICAgICAgICAgICAgICAgICAkJGVsID0gJGV2ZW50LnRhcmdldCxcbiAgICAgICAgICAgICAgICAgICAgICAkJGMgPSAkJGVsLmNoZWNrZWQgPyB0cnVlIDogZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoJCRhKSkge1xuICAgICAgICAgICAgICAgICAgICAgIHZhciAkJHYgPSBfdm0ubGFiZWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAkJGkgPSBfdm0uX2koJCRhLCAkJHYpXG4gICAgICAgICAgICAgICAgICAgICAgaWYgKCQkZWwuY2hlY2tlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJCRpIDwgMCAmJiAoX3ZtLm1vZGVsID0gJCRhLmNvbmNhdChbJCR2XSkpXG4gICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICQkaSA+IC0xICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgIChfdm0ubW9kZWwgPSAkJGFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc2xpY2UoMCwgJCRpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jb25jYXQoJCRhLnNsaWNlKCQkaSArIDEpKSlcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLm1vZGVsID0gJCRjXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBfdm0uY2hhbmdlXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBmb2N1czogX3ZtLm9uRm9jdXMsXG4gICAgICAgICAgICAgICAgYmx1cjogX3ZtLm9uQmx1clxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgIDogX2MoXCJpbnB1dFwiLCB7XG4gICAgICAgICAgICAgIGNsYXNzOiBfdm0uaW5wdXRDbGFzc2VzLFxuICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgIHR5cGU6IFwiY2hlY2tib3hcIixcbiAgICAgICAgICAgICAgICBkaXNhYmxlZDogX3ZtLmRpc2FibGVkLFxuICAgICAgICAgICAgICAgIG5hbWU6IF92bS5uYW1lXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGRvbVByb3BzOiB7IGNoZWNrZWQ6IF92bS5jdXJyZW50VmFsdWUgfSxcbiAgICAgICAgICAgICAgb246IHsgY2hhbmdlOiBfdm0uY2hhbmdlLCBmb2N1czogX3ZtLm9uRm9jdXMsIGJsdXI6IF92bS5vbkJsdXIgfVxuICAgICAgICAgICAgfSlcbiAgICAgIF0pLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF92bS5fdChcImRlZmF1bHRcIiwgW1xuICAgICAgICBfdm0uc2hvd1Nsb3QgPyBfYyhcInNwYW5cIiwgW192bS5fdihfdm0uX3MoX3ZtLmxhYmVsKSldKSA6IF92bS5fZSgpXG4gICAgICBdKVxuICAgIF0sXG4gICAgMlxuICApXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwiZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvdGVtcGxhdGVMb2FkZXIuanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL3hiLWNoZWNrYm94LnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD1iMmQ1OTU4NCZcIiIsInZhciByZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgdmFyIF92bSA9IHRoaXNcbiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICByZXR1cm4gX2MoXG4gICAgXCJ0cmFuc2l0aW9uXCIsXG4gICAgeyBhdHRyczogeyBuYW1lOiBcInNsaWRlLWZhZGVcIiB9LCBvbjogeyBcImFmdGVyLWxlYXZlXCI6IF92bS5hZnRlckxlYXZlIH0gfSxcbiAgICBbXG4gICAgICBfdm0uc2hvd1xuICAgICAgICA/IF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwieGJ1aS1tZXNzYWdlLXRpcHNcIiB9LCBbXG4gICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogXCJ4YnVpLW1lc3NhZ2UtdGlwcy1jb250ZW50XCIgfSxcbiAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgIF9jKFwieGItaWNvblwiLCB7XG4gICAgICAgICAgICAgICAgICBhdHRyczogeyB0eXBlOiB0aGlzLnR5cGUubmFtZSwgY29sb3I6IHRoaXMudHlwZS5jb2xvciB9XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICBfYyhcInNwYW5cIiwgeyBzdGF0aWNDbGFzczogXCJ4YnVpLW1lc3NhZ2UtdGlwcy10ZXh0XCIgfSwgW1xuICAgICAgICAgICAgICAgICAgX3ZtLl92KF92bS5fcyhfdm0udGV4dCkpXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICBfdm0uY2xvc2FibGVcbiAgICAgICAgICAgICAgICAgID8gX2MoXG4gICAgICAgICAgICAgICAgICAgICAgXCJzcGFuXCIsXG4gICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwieGJ1aS1tZXNzYWdlLXRpcHNfY2xvc2VcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uOiB7IGNsaWNrOiBfdm0uY2xvc2VDbGljayB9XG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICBbX2MoXCJ4Yi1pY29uXCIsIHsgYXR0cnM6IHsgdHlwZTogXCJjbG9zZVwiIH0gfSldLFxuICAgICAgICAgICAgICAgICAgICAgIDFcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgOiBfdm0uX2UoKVxuICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAxXG4gICAgICAgICAgICApXG4gICAgICAgICAgXSlcbiAgICAgICAgOiBfdm0uX2UoKVxuICAgIF1cbiAgKVxufVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsImV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3RlbXBsYXRlTG9hZGVyLmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi94Yi1tZXNzYWdlLXRpcHMudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTJmM2IxY2I0JlwiIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfYyhcbiAgICBcImhlYWRlclwiLFxuICAgIHtcbiAgICAgIHN0YXRpY0NsYXNzOiBcInBhZ2UtaGVhZGVyXCIsXG4gICAgICBzdHlsZTpcbiAgICAgICAgX3ZtLiRyb3V0ZS5wYXRoID09PSBcIi9cIlxuICAgICAgICAgID8gXCJib3gtc2hhZG93Om5vbmVcIlxuICAgICAgICAgIDogXCJib3gtc2hhZG93OjAgMTBweCA2MHB4IDAgcmdiYSgyOSwyOSwzMSwwLjA3KVwiXG4gICAgfSxcbiAgICBbXG4gICAgICBfYyhcbiAgICAgICAgXCJkaXZcIixcbiAgICAgICAgeyBzdGF0aWNDbGFzczogXCJoZWFkZXItY29udGFpbmVyXCIgfSxcbiAgICAgICAgW1xuICAgICAgICAgIF9jKFwicm91dGVyLWxpbmtcIiwgeyBhdHRyczogeyB0bzogXCIvXCIgfSB9LCBbXG4gICAgICAgICAgICBfYyhcImltZ1wiLCB7XG4gICAgICAgICAgICAgIGF0dHJzOiB7IHNyYzogcmVxdWlyZShcIi4uL2Fzc2V0cy9pbWcvYmFubmVyLnBuZ1wiKSwgd2lkdGg6IFwiMTAwXCIgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgIF92bS5fbChfdm0uaGVhZGVyQ29uZiwgZnVuY3Rpb24oY29uZikge1xuICAgICAgICAgICAgcmV0dXJuIF9jKFxuICAgICAgICAgICAgICBcInJvdXRlci1saW5rXCIsXG4gICAgICAgICAgICAgIHsga2V5OiBjb25mLnBhdGgsIGF0dHJzOiB7IHRvOiBjb25mLnBhdGggfSB9LFxuICAgICAgICAgICAgICBbX3ZtLl92KF92bS5fcyhjb25mLnRleHQpKV1cbiAgICAgICAgICAgIClcbiAgICAgICAgICB9KVxuICAgICAgICBdLFxuICAgICAgICAyXG4gICAgICApXG4gICAgXVxuICApXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwiZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvdGVtcGxhdGVMb2FkZXIuanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL2hlYWRlci52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9ODhjNDExMjQmXCIiLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gIHZhciBfdm0gPSB0aGlzXG4gIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgcmV0dXJuIF9jKFwiZGl2XCIpXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwiZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvdGVtcGxhdGVMb2FkZXIuanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL3hiLWNvbG9yLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD01NDk2M2FlNiZcIiIsInZhciByZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgdmFyIF92bSA9IHRoaXNcbiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICByZXR1cm4gX2MoXG4gICAgXCJ0YWJsZVwiLFxuICAgIHtcbiAgICAgIHN0eWxlOiBfdm0uc3R5bGVzLFxuICAgICAgYXR0cnM6IHsgY2VsbHNwYWNpbmc6IFwiMFwiLCBjZWxscGFkZGluZzogXCIwXCIsIGJvcmRlcjogXCIwXCIgfVxuICAgIH0sXG4gICAgW1xuICAgICAgX2MoXG4gICAgICAgIFwiY29sZ3JvdXBcIixcbiAgICAgICAgW1xuICAgICAgICAgIF92bS5fbChfdm0uY29sdW1ucywgZnVuY3Rpb24oY29sdW1uLCBpbmRleCkge1xuICAgICAgICAgICAgcmV0dXJuIF9jKFwiY29sXCIsIHsgYXR0cnM6IHsgd2lkdGg6IF92bS5zZXRDZWxsV2lkdGgoY29sdW1uKSB9IH0pXG4gICAgICAgICAgfSksXG4gICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICBfdm0uJHBhcmVudC5zaG93VmVydGljYWxTY3JvbGxCYXJcbiAgICAgICAgICAgID8gX2MoXCJjb2xcIiwgeyBhdHRyczogeyB3aWR0aDogX3ZtLiRwYXJlbnQuc2Nyb2xsQmFyV2lkdGggfSB9KVxuICAgICAgICAgICAgOiBfdm0uX2UoKVxuICAgICAgICBdLFxuICAgICAgICAyXG4gICAgICApLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF9jKFxuICAgICAgICBcInRoZWFkXCIsXG4gICAgICAgIF92bS5fbChfdm0uaGVhZFJvd3MsIGZ1bmN0aW9uKGNvbHMsIHJvd0luZGV4KSB7XG4gICAgICAgICAgcmV0dXJuIF9jKFxuICAgICAgICAgICAgXCJ0clwiLFxuICAgICAgICAgICAgW1xuICAgICAgICAgICAgICBfdm0uX2woY29scywgZnVuY3Rpb24oY29sdW1uLCBpbmRleCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfYyhcbiAgICAgICAgICAgICAgICAgIFwidGhcIixcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgY2xhc3M6IF92bS5hbGlnbkNscyhjb2x1bW4pLFxuICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBjb2xzcGFuOiBjb2x1bW4uY29sU3Bhbiwgcm93c3BhbjogY29sdW1uLnJvd1NwYW4gfVxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICAgICAgICAgICAgICB7IGNsYXNzOiBfdm0uY2VsbENsYXNzZXMoY29sdW1uKSB9LFxuICAgICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbi50eXBlID09PSBcImV4cGFuZFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgID8gW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIWNvbHVtbi5yZW5kZXJIZWFkZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBfYyhcInNwYW5cIiwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KF92bS5fcyhjb2x1bW4udGl0bGUgfHwgXCJcIikpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBfYyhcInJlbmRlci1oZWFkZXJcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyOiBjb2x1bW4ucmVuZGVySGVhZGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW46IGNvbHVtbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXg6IGluZGV4XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDogY29sdW1uLnR5cGUgPT09IFwic2VsZWN0aW9uXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoXCJDaGVja2JveFwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uaXNTZWxlY3RBbGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZDogIV92bS5kYXRhLmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb246IHsgXCJvbi1jaGFuZ2VcIjogX3ZtLnNlbGVjdEFsbCB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICFjb2x1bW4ucmVuZGVySGVhZGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBfYyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzcGFuXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzczogKChfb2JqID0ge30pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChfb2JqW192bS5wcmVmaXhDbHMgKyBcIi1jZWxsLXNvcnRcIl0gPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uLnNvcnRhYmxlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfb2JqKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uaGFuZGxlU29ydEJ5SGVhZChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uZ2V0Q29sdW1uKHJvd0luZGV4LCBpbmRleClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5faW5kZXhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdihfdm0uX3MoY29sdW1uLnRpdGxlIHx8IFwiI1wiKSldXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBfYyhcInJlbmRlci1oZWFkZXJcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlcjogY29sdW1uLnJlbmRlckhlYWRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW46IGNvbHVtbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleDogaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbi5zb3J0YWJsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gX2MoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwic3BhblwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IGNsYXNzOiBbX3ZtLnByZWZpeENscyArIFwiLXNvcnRcIl0gfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKFwiaVwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJpdnUtaWNvbiBpdnUtaWNvbi1hcnJvdy11cC1iXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uZ2V0Q29sdW1uKHJvd0luZGV4LCBpbmRleClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5fc29ydFR5cGUgPT09IFwiYXNjXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLmhhbmRsZVNvcnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uZ2V0Q29sdW1uKHJvd0luZGV4LCBpbmRleClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLl9pbmRleCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiYXNjXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKFwiaVwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJpdnUtaWNvbiBpdnUtaWNvbi1hcnJvdy1kb3duLWJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5nZXRDb2x1bW4ocm93SW5kZXgsIGluZGV4KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLl9zb3J0VHlwZSA9PT0gXCJkZXNjXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLmhhbmRsZVNvcnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uZ2V0Q29sdW1uKHJvd0luZGV4LCBpbmRleClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLl9pbmRleCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiZGVzY1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogX3ZtLl9lKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5pc1BvcHBlclNob3coY29sdW1uKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gX2MoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiUG9wdGlwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2VtZW50OiBcImJvdHRvbVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJwb3BwZXItY2xhc3NcIjogXCJpdnUtdGFibGUtcG9wcGVyXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2ZlcjogXCJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb246IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwib24tcG9wcGVyLWhpZGVcIjogZnVuY3Rpb24oJGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5oYW5kbGVGaWx0ZXJIaWRlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5nZXRDb2x1bW4ocm93SW5kZXgsIGluZGV4KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLl9pbmRleFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5nZXRDb2x1bW4ocm93SW5kZXgsIGluZGV4KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuX2ZpbHRlclZpc2libGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24oJCR2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS4kc2V0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5nZXRDb2x1bW4ocm93SW5kZXgsIGluZGV4KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIl9maWx0ZXJWaXNpYmxlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJCR2XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImdldENvbHVtbihyb3dJbmRleCwgaW5kZXgpLl9maWx0ZXJWaXNpYmxlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwic3BhblwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzczogW192bS5wcmVmaXhDbHMgKyBcIi1maWx0ZXJcIl1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKFwiaVwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIml2dS1pY29uIGl2dS1pY29uLWZ1bm5lbFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbjogX3ZtLmdldENvbHVtbihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93SW5kZXgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLl9pc0ZpbHRlcmVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uZ2V0Q29sdW1uKHJvd0luZGV4LCBpbmRleClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5fZmlsdGVyTXVsdGlwbGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gX2MoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzczogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0ucHJlZml4Q2xzICsgXCItZmlsdGVyLWxpc3RcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHNsb3Q6IFwiY29udGVudFwiIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbG90OiBcImNvbnRlbnRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzczogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLnByZWZpeENscyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiLWZpbHRlci1saXN0LWl0ZW1cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJjaGVja2JveC1ncm91cFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uZ2V0Q29sdW1uKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93SW5kZXgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkuX2ZpbHRlckNoZWNrZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJCR2XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uJHNldChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLmdldENvbHVtbihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3dJbmRleCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIl9maWx0ZXJDaGVja2VkXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQkdlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiZ2V0Q29sdW1uKHJvd0luZGV4LCBpbmRleCkuX2ZpbHRlckNoZWNrZWRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl9sKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW4uZmlsdGVycyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oaXRlbSwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2MoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImNoZWNrYm94XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleTogaW5kZXgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLnZhbHVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3MoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmxhYmVsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5wcmVmaXhDbHMgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIi1maWx0ZXItZm9vdGVyXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiaS1idXR0b25cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInRleHRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplOiBcInNtYWxsXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ6ICFfdm0uZ2V0Q29sdW1uKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93SW5kZXgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkuX2ZpbHRlckNoZWNrZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5sZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF0aXZlT246IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZXZlbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5oYW5kbGVGaWx0ZXIoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5nZXRDb2x1bW4oXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93SW5kZXgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKS5faW5kZXhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3MoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0udChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJpLnRhYmxlLmNvbmZpcm1GaWx0ZXJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiaS1idXR0b25cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInRleHRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplOiBcInNtYWxsXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF0aXZlT246IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZXZlbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5oYW5kbGVSZXNldChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLmdldENvbHVtbihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3dJbmRleCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLl9pbmRleFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fcyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS50KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImkudGFibGUucmVzZXRGaWx0ZXJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBfYyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5wcmVmaXhDbHMgKyBcIi1maWx0ZXItbGlzdFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgc2xvdDogXCJjb250ZW50XCIgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsb3Q6IFwiY29udGVudFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ1bFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5wcmVmaXhDbHMgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIi1maWx0ZXItbGlzdC1zaW5nbGVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJsaVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzczogX3ZtLml0ZW1BbGxDbGFzc2VzKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5nZXRDb2x1bW4oXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3dJbmRleCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRldmVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLmhhbmRsZVJlc2V0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uZ2V0Q29sdW1uKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvd0luZGV4LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkuX2luZGV4XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl9zKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiaS50YWJsZS5jbGVhckZpbHRlclwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fbChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbi5maWx0ZXJzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2MoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJsaVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiBfdm0uaXRlbUNsYXNzZXMoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5nZXRDb2x1bW4oXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93SW5kZXgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZXZlbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLmhhbmRsZVNlbGVjdChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5nZXRDb2x1bW4oXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvd0luZGV4LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKS5faW5kZXgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLnZhbHVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fcyhpdGVtLmxhYmVsKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBfdm0uX2UoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgICAgMlxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIHZhciBfb2JqXG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICBfdm0uJHBhcmVudC5zaG93VmVydGljYWxTY3JvbGxCYXIgJiYgcm93SW5kZXggPT09IDBcbiAgICAgICAgICAgICAgICA/IF9jKFwidGhcIiwge1xuICAgICAgICAgICAgICAgICAgICBjbGFzczogX3ZtLnNjcm9sbEJhckNlbGxDbGFzcygpLFxuICAgICAgICAgICAgICAgICAgICBhdHRyczogeyByb3dzcGFuOiBfdm0uaGVhZFJvd3MubGVuZ3RoIH1cbiAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgOiBfdm0uX2UoKVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIDJcbiAgICAgICAgICApXG4gICAgICAgIH0pXG4gICAgICApXG4gICAgXVxuICApXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwiZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvdGVtcGxhdGVMb2FkZXIuanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL3hiLXRhYmxlLWhlYWQudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTViY2U2MjM3JlwiIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfYyhcbiAgICBcInRhYmxlXCIsXG4gICAge1xuICAgICAgc3R5bGU6IF92bS5zdHlsZU9iamVjdCxcbiAgICAgIGF0dHJzOiB7IGNlbGxzcGFjaW5nOiBcIjBcIiwgY2VsbHBhZGRpbmc6IFwiMFwiLCBib3JkZXI6IFwiMFwiIH1cbiAgICB9LFxuICAgIFtcbiAgICAgIF9jKFxuICAgICAgICBcImNvbGdyb3VwXCIsXG4gICAgICAgIF92bS5fbChfdm0uY29sdW1ucywgZnVuY3Rpb24oY29sdW1uLCBpbmRleCkge1xuICAgICAgICAgIHJldHVybiBfYyhcImNvbFwiLCB7IGF0dHJzOiB7IHdpZHRoOiBfdm0uc2V0Q2VsbFdpZHRoKGNvbHVtbikgfSB9KVxuICAgICAgICB9KVxuICAgICAgKSxcbiAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICBfYyhcbiAgICAgICAgXCJ0Ym9keVwiLFxuICAgICAgICB7IGNsYXNzOiBbX3ZtLnByZWZpeENscyArIFwiLXRib2R5XCJdIH0sXG4gICAgICAgIFtcbiAgICAgICAgICBfdm0uX2woX3ZtLmRhdGEsIGZ1bmN0aW9uKHJvdywgaW5kZXgpIHtcbiAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgIFwieGItdGFibGUtdHJcIixcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBrZXk6IHJvdy5fcm93S2V5LFxuICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgcm93OiByb3csIFwicHJlZml4LWNsc1wiOiBfdm0ucHJlZml4Q2xzIH0sXG4gICAgICAgICAgICAgICAgICBuYXRpdmVPbjoge1xuICAgICAgICAgICAgICAgICAgICBtb3VzZWVudGVyOiBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAkZXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uaGFuZGxlTW91c2VJbihyb3cuX2luZGV4KVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBtb3VzZWxlYXZlOiBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAkZXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uaGFuZGxlTW91c2VPdXQocm93Ll9pbmRleClcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgIF92bS5jbGlja0N1cnJlbnRSb3cocm93Ll9pbmRleClcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZGJsY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICRldmVudC5zdG9wUHJvcGFnYXRpb24oKVxuICAgICAgICAgICAgICAgICAgICAgIF92bS5kYmxjbGlja0N1cnJlbnRSb3cocm93Ll9pbmRleClcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgX3ZtLl9sKF92bS5jb2x1bW5zLCBmdW5jdGlvbihjb2x1bW4pIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBfYyhcbiAgICAgICAgICAgICAgICAgICAgXCJ0ZFwiLFxuICAgICAgICAgICAgICAgICAgICB7IGNsYXNzOiBfdm0uYWxpZ25DbHMoY29sdW1uLCByb3cpIH0sXG4gICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcIkNlbGxcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBjb2x1bW4uX2NvbHVtbktleSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGZpeGVkOiBfdm0uZml4ZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwicHJlZml4LWNsc1wiOiBfdm0ucHJlZml4Q2xzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICByb3c6IHJvdyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uOiBjb2x1bW4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwibmF0dXJhbC1pbmRleFwiOiBpbmRleCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXg6IHJvdy5faW5kZXgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrZWQ6IF92bS5yb3dDaGVja2VkKHJvdy5faW5kZXgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZDogX3ZtLnJvd0Rpc2FibGVkKHJvdy5faW5kZXgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBleHBhbmRlZDogX3ZtLnJvd0V4cGFuZGVkKHJvdy5faW5kZXgpXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgMVxuICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgIF92bS5yb3dFeHBhbmRlZChyb3cuX2luZGV4KVxuICAgICAgICAgICAgICAgID8gX2MoXG4gICAgICAgICAgICAgICAgICAgIFwidHJcIixcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiAoKF9vYmogPSB7fSksXG4gICAgICAgICAgICAgICAgICAgICAgKF9vYmpbX3ZtLnByZWZpeENscyArIFwiLWV4cGFuZGVkLWhpZGRlblwiXSA9IF92bS5maXhlZCksXG4gICAgICAgICAgICAgICAgICAgICAgX29iailcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJ0ZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzczogX3ZtLnByZWZpeENscyArIFwiLWV4cGFuZGVkLWNlbGxcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgY29sc3BhbjogX3ZtLmNvbHVtbnMubGVuZ3RoIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF9jKFwiRXhwYW5kXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk6IHJvdy5fcm93S2V5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3c6IHJvdyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlcjogX3ZtLmV4cGFuZFJlbmRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4OiByb3cuX2luZGV4XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIDFcbiAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICA6IF92bS5fZSgpXG4gICAgICAgICAgICBdXG4gICAgICAgICAgICB2YXIgX29ialxuICAgICAgICAgIH0pXG4gICAgICAgIF0sXG4gICAgICAgIDJcbiAgICAgIClcbiAgICBdXG4gIClcbn1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCJleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy90ZW1wbGF0ZUxvYWRlci5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4veGItdGFibGUtYm9keS52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MDNjYzFjZjkmXCIiLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gIHZhciBfdm0gPSB0aGlzXG4gIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgcmV0dXJuIF9jKFxuICAgIFwiZGl2XCIsXG4gICAgeyByZWY6IFwiY2VsbFwiLCBjbGFzczogX3ZtLmNsYXNzZXMgfSxcbiAgICBbXG4gICAgICBfdm0ucmVuZGVyVHlwZSA9PT0gXCJpbmRleFwiXG4gICAgICAgID8gW19jKFwic3BhblwiLCBbX3ZtLl92KF92bS5fcyhfdm0ubmF0dXJhbEluZGV4ICsgMSkpXSldXG4gICAgICAgIDogX3ZtLl9lKCksXG4gICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgX3ZtLnJlbmRlclR5cGUgPT09IFwic2VsZWN0aW9uXCJcbiAgICAgICAgPyBbXG4gICAgICAgICAgICBfYyhcIkNoZWNrYm94XCIsIHtcbiAgICAgICAgICAgICAgYXR0cnM6IHsgdmFsdWU6IF92bS5jaGVja2VkLCBkaXNhYmxlZDogX3ZtLmRpc2FibGVkIH0sXG4gICAgICAgICAgICAgIG9uOiB7IFwib24tY2hhbmdlXCI6IF92bS50b2dnbGVTZWxlY3QgfSxcbiAgICAgICAgICAgICAgbmF0aXZlT246IHtcbiAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAkZXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcbiAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0uaGFuZGxlQ2xpY2soJGV2ZW50KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICBdXG4gICAgICAgIDogX3ZtLl9lKCksXG4gICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgX3ZtLnJlbmRlclR5cGUgPT09IFwiaHRtbFwiXG4gICAgICAgID8gW1xuICAgICAgICAgICAgX2MoXCJzcGFuXCIsIHtcbiAgICAgICAgICAgICAgZG9tUHJvcHM6IHsgaW5uZXJIVE1MOiBfdm0uX3MoX3ZtLnJvd1tfdm0uY29sdW1uLmtleV0pIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgXVxuICAgICAgICA6IF92bS5fZSgpLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF92bS5yZW5kZXJUeXBlID09PSBcIm5vcm1hbFwiXG4gICAgICAgID8gW19jKFwic3BhblwiLCBbX3ZtLl92KF92bS5fcyhfdm0ucm93W192bS5jb2x1bW4ua2V5XSkpXSldXG4gICAgICAgIDogX3ZtLl9lKCksXG4gICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgX3ZtLnJlbmRlclR5cGUgPT09IFwiZXhwYW5kXCIgJiYgIV92bS5yb3cuX2Rpc2FibGVFeHBhbmRcbiAgICAgICAgPyBbXG4gICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICAgICAgeyBjbGFzczogX3ZtLmV4cGFuZENscywgb246IHsgY2xpY2s6IF92bS50b2dnbGVFeHBhbmQgfSB9LFxuICAgICAgICAgICAgICBbX2MoXCJJY29uXCIsIHsgYXR0cnM6IHsgdHlwZTogXCJpb3MtYXJyb3ctcmlnaHRcIiB9IH0pXSxcbiAgICAgICAgICAgICAgMVxuICAgICAgICAgICAgKVxuICAgICAgICAgIF1cbiAgICAgICAgOiBfdm0uX2UoKSxcbiAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICBfdm0ucmVuZGVyVHlwZSA9PT0gXCJyZW5kZXJcIlxuICAgICAgICA/IF9jKFwiQ2VsbFwiLCB7XG4gICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICByb3c6IF92bS5yb3csXG4gICAgICAgICAgICAgIGNvbHVtbjogX3ZtLmNvbHVtbixcbiAgICAgICAgICAgICAgaW5kZXg6IF92bS5pbmRleCxcbiAgICAgICAgICAgICAgcmVuZGVyOiBfdm0uY29sdW1uLnJlbmRlclxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgIDogX3ZtLl9lKClcbiAgICBdLFxuICAgIDJcbiAgKVxufVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsImV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3RlbXBsYXRlTG9hZGVyLmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi94Yi1jZWxsLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD02MzcyNTU5YSZcIiIsInZhciByZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgdmFyIF92bSA9IHRoaXNcbiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICByZXR1cm4gX2MoXG4gICAgXCJ0clwiLFxuICAgIHsgY2xhc3M6IF92bS5yb3dDbGFzc2VzKF92bS5yb3cuX2luZGV4KSB9LFxuICAgIFtfdm0uX3QoXCJkZWZhdWx0XCIpXSxcbiAgICAyXG4gIClcbn1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCJleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy90ZW1wbGF0ZUxvYWRlci5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4veGItdGFibGUtdHIudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTIwMzBmMGQ2JlwiIiwibW9kdWxlLmV4cG9ydHMgPSBbe1widGV4dFwiOlwi5oyH5Y2XXCIsXCJwYXRoXCI6XCIvZ3VpZGVcIn0se1widGV4dFwiOlwi57uE5Lu2XCIsXCJwYXRoXCI6XCIvY29tcG9uZW50c1wiLFwiY2hpbGRyZW5cIjpbe1widGV4dFwiOlwi5pu05paw5pel5b+XXCIsXCJwYXRoXCI6XCIvdXBkYXRlTG9nXCJ9LHtcInRleHRcIjpcIuW8gOWPkeaMh+WNl1wiLFwiY2hpbGRyZW5cIjpbe1widGV4dFwiOlwi5Lmm5YaZ6KeE5YiZXCIsXCJwYXRoXCI6XCIvcnVsZXNcIn0se1widGV4dFwiOlwi5a6J6KOFXCIsXCJwYXRoXCI6XCIvaW5zdGFsbFwifSx7XCJ0ZXh0XCI6XCLlvIDlp4vkvb/nlKhcIixcInBhdGhcIjpcIi9zdGFydFwifV19LHtcInRleHRcIjpcIue7hOS7tlwiLFwiZ3JvdXBzXCI6W3tcImdyb3VwTmFtZVwiOlwi5Z+656GA57uE5Lu2XCIsXCJmb2xkZXJcIjpcImJhc2ljXCIsXCJsaXN0XCI6W3tcInRleHRcIjpcImZvbnRcIixcInBhdGhcIjpcIi94Yi1mb250XCJ9LHtcInRleHRcIjpcImNvbG9yXCIsXCJwYXRoXCI6XCIveGItY29sb3JcIn0se1widGV4dFwiOlwieGItYnV0dG9uXCIsXCJwYXRoXCI6XCIveGItYnV0dG9uXCJ9LHtcInRleHRcIjpcInhiLWxvYWRpbmdcIixcInBhdGhcIjpcIi94Yi1sb2FkaW5nXCJ9LHtcInRleHRcIjpcInhiLWlucHV0LW51bWJlclwiLFwicGF0aFwiOlwiL3hiLWlucHV0LW51bWJlclwifSx7XCJ0ZXh0XCI6XCJ4Yi1pY29uXCIsXCJwYXRoXCI6XCIveGItaWNvblwifSx7XCJ0ZXh0XCI6XCJ4Yi10ZXh0XCIsXCJwYXRoXCI6XCIveGItdGV4dFwifSx7XCJ0ZXh0XCI6XCJ4Yi1zZWFyY2gtYnRuXCIsXCJwYXRoXCI6XCIveGItc2VhcmNoLWJ0blwifV19LHtcImdyb3VwTmFtZVwiOlwi6KGo5Y2V57uE5Lu2XCIsXCJmb2xkZXJcIjpcImZvcm1cIixcImxpc3RcIjpbe1widGV4dFwiOlwieGItY2hlY2tib3hcIixcInBhdGhcIjpcIi94Yi1jaGVja2JveFwifSx7XCJ0ZXh0XCI6XCJ4Yi1mb3JtXCIsXCJwYXRoXCI6XCIveGItZm9ybVwifSx7XCJ0ZXh0XCI6XCJ4Yi10YWJsZVwiLFwicGF0aFwiOlwiL3hiLXRhYmxlXCJ9LHtcInRleHRcIjpcInhiLXJhZGlvXCIsXCJwYXRoXCI6XCIveGItcmFkaW9cIn1dfSx7XCJncm91cE5hbWVcIjpcIuaVsOaNrue7hOS7tlwiLFwiZm9sZGVyXCI6XCJkYXRhXCIsXCJsaXN0XCI6W119LHtcImdyb3VwTmFtZVwiOlwi6YCa55+l57uE5Lu2XCIsXCJmb2xkZXJcIjpcIm5vdGljZVwiLFwibGlzdFwiOlt7XCJ0ZXh0XCI6XCJ4Yi1wb3B1cC13aW5kb3dcIixcInBhdGhcIjpcIi94Yi1wb3B1cC13aW5kb3dcIn0se1widGV4dFwiOlwieGItbWVzc2FnZS10aXBzXCIsXCJwYXRoXCI6XCIveGItbWVzc2FnZS10aXBzXCJ9XX0se1wiZ3JvdXBOYW1lXCI6XCLlr7zoiKrnu4Tku7ZcIixcImZvbGRlclwiOlwibmF2aWdhdGlvblwiLFwibGlzdFwiOltdfSx7XCJncm91cE5hbWVcIjpcIuWFtuS7lue7hOS7tlwiLFwiZm9sZGVyXCI6XCJvdGhlcnNcIixcImxpc3RcIjpbe1widGV4dFwiOlwieGItdWVkaXRvclwiLFwicGF0aFwiOlwiL3hiLXVlZGl0b3JcIn1dfV19XX1dIiwiLyoqXG4gKiBAbGljZW5zZVxuICogTG9kYXNoIDxodHRwczovL2xvZGFzaC5jb20vPlxuICogQ29weXJpZ2h0IEpTIEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9ycyA8aHR0cHM6Ly9qcy5mb3VuZGF0aW9uLz5cbiAqIFJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlIDxodHRwczovL2xvZGFzaC5jb20vbGljZW5zZT5cbiAqIEJhc2VkIG9uIFVuZGVyc2NvcmUuanMgMS44LjMgPGh0dHA6Ly91bmRlcnNjb3JlanMub3JnL0xJQ0VOU0U+XG4gKiBDb3B5cmlnaHQgSmVyZW15IEFzaGtlbmFzLCBEb2N1bWVudENsb3VkIGFuZCBJbnZlc3RpZ2F0aXZlIFJlcG9ydGVycyAmIEVkaXRvcnNcbiAqL1xuOyhmdW5jdGlvbigpIHtcblxuICAvKiogVXNlZCBhcyBhIHNhZmUgcmVmZXJlbmNlIGZvciBgdW5kZWZpbmVkYCBpbiBwcmUtRVM1IGVudmlyb25tZW50cy4gKi9cbiAgdmFyIHVuZGVmaW5lZDtcblxuICAvKiogVXNlZCBhcyB0aGUgc2VtYW50aWMgdmVyc2lvbiBudW1iZXIuICovXG4gIHZhciBWRVJTSU9OID0gJzQuMTcuMTEnO1xuXG4gIC8qKiBVc2VkIGFzIHRoZSBzaXplIHRvIGVuYWJsZSBsYXJnZSBhcnJheSBvcHRpbWl6YXRpb25zLiAqL1xuICB2YXIgTEFSR0VfQVJSQVlfU0laRSA9IDIwMDtcblxuICAvKiogRXJyb3IgbWVzc2FnZSBjb25zdGFudHMuICovXG4gIHZhciBDT1JFX0VSUk9SX1RFWFQgPSAnVW5zdXBwb3J0ZWQgY29yZS1qcyB1c2UuIFRyeSBodHRwczovL25wbXMuaW8vc2VhcmNoP3E9cG9ueWZpbGwuJyxcbiAgICAgIEZVTkNfRVJST1JfVEVYVCA9ICdFeHBlY3RlZCBhIGZ1bmN0aW9uJztcblxuICAvKiogVXNlZCB0byBzdGFuZC1pbiBmb3IgYHVuZGVmaW5lZGAgaGFzaCB2YWx1ZXMuICovXG4gIHZhciBIQVNIX1VOREVGSU5FRCA9ICdfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fJztcblxuICAvKiogVXNlZCBhcyB0aGUgbWF4aW11bSBtZW1vaXplIGNhY2hlIHNpemUuICovXG4gIHZhciBNQVhfTUVNT0laRV9TSVpFID0gNTAwO1xuXG4gIC8qKiBVc2VkIGFzIHRoZSBpbnRlcm5hbCBhcmd1bWVudCBwbGFjZWhvbGRlci4gKi9cbiAgdmFyIFBMQUNFSE9MREVSID0gJ19fbG9kYXNoX3BsYWNlaG9sZGVyX18nO1xuXG4gIC8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIGNsb25pbmcuICovXG4gIHZhciBDTE9ORV9ERUVQX0ZMQUcgPSAxLFxuICAgICAgQ0xPTkVfRkxBVF9GTEFHID0gMixcbiAgICAgIENMT05FX1NZTUJPTFNfRkxBRyA9IDQ7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG4gIHZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDEsXG4gICAgICBDT01QQVJFX1VOT1JERVJFRF9GTEFHID0gMjtcblxuICAvKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciBmdW5jdGlvbiBtZXRhZGF0YS4gKi9cbiAgdmFyIFdSQVBfQklORF9GTEFHID0gMSxcbiAgICAgIFdSQVBfQklORF9LRVlfRkxBRyA9IDIsXG4gICAgICBXUkFQX0NVUlJZX0JPVU5EX0ZMQUcgPSA0LFxuICAgICAgV1JBUF9DVVJSWV9GTEFHID0gOCxcbiAgICAgIFdSQVBfQ1VSUllfUklHSFRfRkxBRyA9IDE2LFxuICAgICAgV1JBUF9QQVJUSUFMX0ZMQUcgPSAzMixcbiAgICAgIFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHID0gNjQsXG4gICAgICBXUkFQX0FSWV9GTEFHID0gMTI4LFxuICAgICAgV1JBUF9SRUFSR19GTEFHID0gMjU2LFxuICAgICAgV1JBUF9GTElQX0ZMQUcgPSA1MTI7XG5cbiAgLyoqIFVzZWQgYXMgZGVmYXVsdCBvcHRpb25zIGZvciBgXy50cnVuY2F0ZWAuICovXG4gIHZhciBERUZBVUxUX1RSVU5DX0xFTkdUSCA9IDMwLFxuICAgICAgREVGQVVMVF9UUlVOQ19PTUlTU0lPTiA9ICcuLi4nO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBob3QgZnVuY3Rpb25zIGJ5IG51bWJlciBvZiBjYWxscyB3aXRoaW4gYSBzcGFuIG9mIG1pbGxpc2Vjb25kcy4gKi9cbiAgdmFyIEhPVF9DT1VOVCA9IDgwMCxcbiAgICAgIEhPVF9TUEFOID0gMTY7XG5cbiAgLyoqIFVzZWQgdG8gaW5kaWNhdGUgdGhlIHR5cGUgb2YgbGF6eSBpdGVyYXRlZXMuICovXG4gIHZhciBMQVpZX0ZJTFRFUl9GTEFHID0gMSxcbiAgICAgIExBWllfTUFQX0ZMQUcgPSAyLFxuICAgICAgTEFaWV9XSElMRV9GTEFHID0gMztcblxuICAvKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbiAgdmFyIElORklOSVRZID0gMSAvIDAsXG4gICAgICBNQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MSxcbiAgICAgIE1BWF9JTlRFR0VSID0gMS43OTc2OTMxMzQ4NjIzMTU3ZSszMDgsXG4gICAgICBOQU4gPSAwIC8gMDtcblxuICAvKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB0aGUgbWF4aW11bSBsZW5ndGggYW5kIGluZGV4IG9mIGFuIGFycmF5LiAqL1xuICB2YXIgTUFYX0FSUkFZX0xFTkdUSCA9IDQyOTQ5NjcyOTUsXG4gICAgICBNQVhfQVJSQVlfSU5ERVggPSBNQVhfQVJSQVlfTEVOR1RIIC0gMSxcbiAgICAgIEhBTEZfTUFYX0FSUkFZX0xFTkdUSCA9IE1BWF9BUlJBWV9MRU5HVEggPj4+IDE7XG5cbiAgLyoqIFVzZWQgdG8gYXNzb2NpYXRlIHdyYXAgbWV0aG9kcyB3aXRoIHRoZWlyIGJpdCBmbGFncy4gKi9cbiAgdmFyIHdyYXBGbGFncyA9IFtcbiAgICBbJ2FyeScsIFdSQVBfQVJZX0ZMQUddLFxuICAgIFsnYmluZCcsIFdSQVBfQklORF9GTEFHXSxcbiAgICBbJ2JpbmRLZXknLCBXUkFQX0JJTkRfS0VZX0ZMQUddLFxuICAgIFsnY3VycnknLCBXUkFQX0NVUlJZX0ZMQUddLFxuICAgIFsnY3VycnlSaWdodCcsIFdSQVBfQ1VSUllfUklHSFRfRkxBR10sXG4gICAgWydmbGlwJywgV1JBUF9GTElQX0ZMQUddLFxuICAgIFsncGFydGlhbCcsIFdSQVBfUEFSVElBTF9GTEFHXSxcbiAgICBbJ3BhcnRpYWxSaWdodCcsIFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHXSxcbiAgICBbJ3JlYXJnJywgV1JBUF9SRUFSR19GTEFHXVxuICBdO1xuXG4gIC8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbiAgdmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJyxcbiAgICAgIGFycmF5VGFnID0gJ1tvYmplY3QgQXJyYXldJyxcbiAgICAgIGFzeW5jVGFnID0gJ1tvYmplY3QgQXN5bmNGdW5jdGlvbl0nLFxuICAgICAgYm9vbFRhZyA9ICdbb2JqZWN0IEJvb2xlYW5dJyxcbiAgICAgIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXScsXG4gICAgICBkb21FeGNUYWcgPSAnW29iamVjdCBET01FeGNlcHRpb25dJyxcbiAgICAgIGVycm9yVGFnID0gJ1tvYmplY3QgRXJyb3JdJyxcbiAgICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgICAgZ2VuVGFnID0gJ1tvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dJyxcbiAgICAgIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgICAgbnVtYmVyVGFnID0gJ1tvYmplY3QgTnVtYmVyXScsXG4gICAgICBudWxsVGFnID0gJ1tvYmplY3QgTnVsbF0nLFxuICAgICAgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XScsXG4gICAgICBwcm9taXNlVGFnID0gJ1tvYmplY3QgUHJvbWlzZV0nLFxuICAgICAgcHJveHlUYWcgPSAnW29iamVjdCBQcm94eV0nLFxuICAgICAgcmVnZXhwVGFnID0gJ1tvYmplY3QgUmVnRXhwXScsXG4gICAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICAgIHN0cmluZ1RhZyA9ICdbb2JqZWN0IFN0cmluZ10nLFxuICAgICAgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXScsXG4gICAgICB1bmRlZmluZWRUYWcgPSAnW29iamVjdCBVbmRlZmluZWRdJyxcbiAgICAgIHdlYWtNYXBUYWcgPSAnW29iamVjdCBXZWFrTWFwXScsXG4gICAgICB3ZWFrU2V0VGFnID0gJ1tvYmplY3QgV2Vha1NldF0nO1xuXG4gIHZhciBhcnJheUJ1ZmZlclRhZyA9ICdbb2JqZWN0IEFycmF5QnVmZmVyXScsXG4gICAgICBkYXRhVmlld1RhZyA9ICdbb2JqZWN0IERhdGFWaWV3XScsXG4gICAgICBmbG9hdDMyVGFnID0gJ1tvYmplY3QgRmxvYXQzMkFycmF5XScsXG4gICAgICBmbG9hdDY0VGFnID0gJ1tvYmplY3QgRmxvYXQ2NEFycmF5XScsXG4gICAgICBpbnQ4VGFnID0gJ1tvYmplY3QgSW50OEFycmF5XScsXG4gICAgICBpbnQxNlRhZyA9ICdbb2JqZWN0IEludDE2QXJyYXldJyxcbiAgICAgIGludDMyVGFnID0gJ1tvYmplY3QgSW50MzJBcnJheV0nLFxuICAgICAgdWludDhUYWcgPSAnW29iamVjdCBVaW50OEFycmF5XScsXG4gICAgICB1aW50OENsYW1wZWRUYWcgPSAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nLFxuICAgICAgdWludDE2VGFnID0gJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICAgIHVpbnQzMlRhZyA9ICdbb2JqZWN0IFVpbnQzMkFycmF5XSc7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggZW1wdHkgc3RyaW5nIGxpdGVyYWxzIGluIGNvbXBpbGVkIHRlbXBsYXRlIHNvdXJjZS4gKi9cbiAgdmFyIHJlRW1wdHlTdHJpbmdMZWFkaW5nID0gL1xcYl9fcCBcXCs9ICcnOy9nLFxuICAgICAgcmVFbXB0eVN0cmluZ01pZGRsZSA9IC9cXGIoX19wIFxcKz0pICcnIFxcKy9nLFxuICAgICAgcmVFbXB0eVN0cmluZ1RyYWlsaW5nID0gLyhfX2VcXCguKj9cXCl8XFxiX190XFwpKSBcXCtcXG4nJzsvZztcblxuICAvKiogVXNlZCB0byBtYXRjaCBIVE1MIGVudGl0aWVzIGFuZCBIVE1MIGNoYXJhY3RlcnMuICovXG4gIHZhciByZUVzY2FwZWRIdG1sID0gLyYoPzphbXB8bHR8Z3R8cXVvdHwjMzkpOy9nLFxuICAgICAgcmVVbmVzY2FwZWRIdG1sID0gL1smPD5cIiddL2csXG4gICAgICByZUhhc0VzY2FwZWRIdG1sID0gUmVnRXhwKHJlRXNjYXBlZEh0bWwuc291cmNlKSxcbiAgICAgIHJlSGFzVW5lc2NhcGVkSHRtbCA9IFJlZ0V4cChyZVVuZXNjYXBlZEh0bWwuc291cmNlKTtcblxuICAvKiogVXNlZCB0byBtYXRjaCB0ZW1wbGF0ZSBkZWxpbWl0ZXJzLiAqL1xuICB2YXIgcmVFc2NhcGUgPSAvPCUtKFtcXHNcXFNdKz8pJT4vZyxcbiAgICAgIHJlRXZhbHVhdGUgPSAvPCUoW1xcc1xcU10rPyklPi9nLFxuICAgICAgcmVJbnRlcnBvbGF0ZSA9IC88JT0oW1xcc1xcU10rPyklPi9nO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIHByb3BlcnR5IG5hbWVzIHdpdGhpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbiAgdmFyIHJlSXNEZWVwUHJvcCA9IC9cXC58XFxbKD86W15bXFxdXSp8KFtcIiddKSg/Oig/IVxcMSlbXlxcXFxdfFxcXFwuKSo/XFwxKVxcXS8sXG4gICAgICByZUlzUGxhaW5Qcm9wID0gL15cXHcqJC8sXG4gICAgICByZVByb3BOYW1lID0gL1teLltcXF1dK3xcXFsoPzooLT9cXGQrKD86XFwuXFxkKyk/KXwoW1wiJ10pKCg/Oig/IVxcMilbXlxcXFxdfFxcXFwuKSo/KVxcMilcXF18KD89KD86XFwufFxcW1xcXSkoPzpcXC58XFxbXFxdfCQpKS9nO1xuXG4gIC8qKlxuICAgKiBVc2VkIHRvIG1hdGNoIGBSZWdFeHBgXG4gICAqIFtzeW50YXggY2hhcmFjdGVyc10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcGF0dGVybnMpLlxuICAgKi9cbiAgdmFyIHJlUmVnRXhwQ2hhciA9IC9bXFxcXF4kLiorPygpW1xcXXt9fF0vZyxcbiAgICAgIHJlSGFzUmVnRXhwQ2hhciA9IFJlZ0V4cChyZVJlZ0V4cENoYXIuc291cmNlKTtcblxuICAvKiogVXNlZCB0byBtYXRjaCBsZWFkaW5nIGFuZCB0cmFpbGluZyB3aGl0ZXNwYWNlLiAqL1xuICB2YXIgcmVUcmltID0gL15cXHMrfFxccyskL2csXG4gICAgICByZVRyaW1TdGFydCA9IC9eXFxzKy8sXG4gICAgICByZVRyaW1FbmQgPSAvXFxzKyQvO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIHdyYXAgZGV0YWlsIGNvbW1lbnRzLiAqL1xuICB2YXIgcmVXcmFwQ29tbWVudCA9IC9cXHsoPzpcXG5cXC9cXCogXFxbd3JhcHBlZCB3aXRoIC4rXFxdIFxcKlxcLyk/XFxuPy8sXG4gICAgICByZVdyYXBEZXRhaWxzID0gL1xce1xcblxcL1xcKiBcXFt3cmFwcGVkIHdpdGggKC4rKVxcXSBcXCovLFxuICAgICAgcmVTcGxpdERldGFpbHMgPSAvLD8gJiAvO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIHdvcmRzIGNvbXBvc2VkIG9mIGFscGhhbnVtZXJpYyBjaGFyYWN0ZXJzLiAqL1xuICB2YXIgcmVBc2NpaVdvcmQgPSAvW15cXHgwMC1cXHgyZlxceDNhLVxceDQwXFx4NWItXFx4NjBcXHg3Yi1cXHg3Zl0rL2c7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggYmFja3NsYXNoZXMgaW4gcHJvcGVydHkgcGF0aHMuICovXG4gIHZhciByZUVzY2FwZUNoYXIgPSAvXFxcXChcXFxcKT8vZztcblxuICAvKipcbiAgICogVXNlZCB0byBtYXRjaFxuICAgKiBbRVMgdGVtcGxhdGUgZGVsaW1pdGVyc10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdGVtcGxhdGUtbGl0ZXJhbC1sZXhpY2FsLWNvbXBvbmVudHMpLlxuICAgKi9cbiAgdmFyIHJlRXNUZW1wbGF0ZSA9IC9cXCRcXHsoW15cXFxcfV0qKD86XFxcXC5bXlxcXFx9XSopKilcXH0vZztcblxuICAvKiogVXNlZCB0byBtYXRjaCBgUmVnRXhwYCBmbGFncyBmcm9tIHRoZWlyIGNvZXJjZWQgc3RyaW5nIHZhbHVlcy4gKi9cbiAgdmFyIHJlRmxhZ3MgPSAvXFx3KiQvO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBiYWQgc2lnbmVkIGhleGFkZWNpbWFsIHN0cmluZyB2YWx1ZXMuICovXG4gIHZhciByZUlzQmFkSGV4ID0gL15bLStdMHhbMC05YS1mXSskL2k7XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IGJpbmFyeSBzdHJpbmcgdmFsdWVzLiAqL1xuICB2YXIgcmVJc0JpbmFyeSA9IC9eMGJbMDFdKyQvaTtcblxuICAvKiogVXNlZCB0byBkZXRlY3QgaG9zdCBjb25zdHJ1Y3RvcnMgKFNhZmFyaSkuICovXG4gIHZhciByZUlzSG9zdEN0b3IgPSAvXlxcW29iamVjdCAuKz9Db25zdHJ1Y3RvclxcXSQvO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBvY3RhbCBzdHJpbmcgdmFsdWVzLiAqL1xuICB2YXIgcmVJc09jdGFsID0gL14wb1swLTddKyQvaTtcblxuICAvKiogVXNlZCB0byBkZXRlY3QgdW5zaWduZWQgaW50ZWdlciB2YWx1ZXMuICovXG4gIHZhciByZUlzVWludCA9IC9eKD86MHxbMS05XVxcZCopJC87XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggTGF0aW4gVW5pY29kZSBsZXR0ZXJzIChleGNsdWRpbmcgbWF0aGVtYXRpY2FsIG9wZXJhdG9ycykuICovXG4gIHZhciByZUxhdGluID0gL1tcXHhjMC1cXHhkNlxceGQ4LVxceGY2XFx4ZjgtXFx4ZmZcXHUwMTAwLVxcdTAxN2ZdL2c7XG5cbiAgLyoqIFVzZWQgdG8gZW5zdXJlIGNhcHR1cmluZyBvcmRlciBvZiB0ZW1wbGF0ZSBkZWxpbWl0ZXJzLiAqL1xuICB2YXIgcmVOb01hdGNoID0gLygkXikvO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIHVuZXNjYXBlZCBjaGFyYWN0ZXJzIGluIGNvbXBpbGVkIHN0cmluZyBsaXRlcmFscy4gKi9cbiAgdmFyIHJlVW5lc2NhcGVkU3RyaW5nID0gL1snXFxuXFxyXFx1MjAyOFxcdTIwMjlcXFxcXS9nO1xuXG4gIC8qKiBVc2VkIHRvIGNvbXBvc2UgdW5pY29kZSBjaGFyYWN0ZXIgY2xhc3Nlcy4gKi9cbiAgdmFyIHJzQXN0cmFsUmFuZ2UgPSAnXFxcXHVkODAwLVxcXFx1ZGZmZicsXG4gICAgICByc0NvbWJvTWFya3NSYW5nZSA9ICdcXFxcdTAzMDAtXFxcXHUwMzZmJyxcbiAgICAgIHJlQ29tYm9IYWxmTWFya3NSYW5nZSA9ICdcXFxcdWZlMjAtXFxcXHVmZTJmJyxcbiAgICAgIHJzQ29tYm9TeW1ib2xzUmFuZ2UgPSAnXFxcXHUyMGQwLVxcXFx1MjBmZicsXG4gICAgICByc0NvbWJvUmFuZ2UgPSByc0NvbWJvTWFya3NSYW5nZSArIHJlQ29tYm9IYWxmTWFya3NSYW5nZSArIHJzQ29tYm9TeW1ib2xzUmFuZ2UsXG4gICAgICByc0RpbmdiYXRSYW5nZSA9ICdcXFxcdTI3MDAtXFxcXHUyN2JmJyxcbiAgICAgIHJzTG93ZXJSYW5nZSA9ICdhLXpcXFxceGRmLVxcXFx4ZjZcXFxceGY4LVxcXFx4ZmYnLFxuICAgICAgcnNNYXRoT3BSYW5nZSA9ICdcXFxceGFjXFxcXHhiMVxcXFx4ZDdcXFxceGY3JyxcbiAgICAgIHJzTm9uQ2hhclJhbmdlID0gJ1xcXFx4MDAtXFxcXHgyZlxcXFx4M2EtXFxcXHg0MFxcXFx4NWItXFxcXHg2MFxcXFx4N2ItXFxcXHhiZicsXG4gICAgICByc1B1bmN0dWF0aW9uUmFuZ2UgPSAnXFxcXHUyMDAwLVxcXFx1MjA2ZicsXG4gICAgICByc1NwYWNlUmFuZ2UgPSAnIFxcXFx0XFxcXHgwYlxcXFxmXFxcXHhhMFxcXFx1ZmVmZlxcXFxuXFxcXHJcXFxcdTIwMjhcXFxcdTIwMjlcXFxcdTE2ODBcXFxcdTE4MGVcXFxcdTIwMDBcXFxcdTIwMDFcXFxcdTIwMDJcXFxcdTIwMDNcXFxcdTIwMDRcXFxcdTIwMDVcXFxcdTIwMDZcXFxcdTIwMDdcXFxcdTIwMDhcXFxcdTIwMDlcXFxcdTIwMGFcXFxcdTIwMmZcXFxcdTIwNWZcXFxcdTMwMDAnLFxuICAgICAgcnNVcHBlclJhbmdlID0gJ0EtWlxcXFx4YzAtXFxcXHhkNlxcXFx4ZDgtXFxcXHhkZScsXG4gICAgICByc1ZhclJhbmdlID0gJ1xcXFx1ZmUwZVxcXFx1ZmUwZicsXG4gICAgICByc0JyZWFrUmFuZ2UgPSByc01hdGhPcFJhbmdlICsgcnNOb25DaGFyUmFuZ2UgKyByc1B1bmN0dWF0aW9uUmFuZ2UgKyByc1NwYWNlUmFuZ2U7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIGNhcHR1cmUgZ3JvdXBzLiAqL1xuICB2YXIgcnNBcG9zID0gXCJbJ1xcdTIwMTldXCIsXG4gICAgICByc0FzdHJhbCA9ICdbJyArIHJzQXN0cmFsUmFuZ2UgKyAnXScsXG4gICAgICByc0JyZWFrID0gJ1snICsgcnNCcmVha1JhbmdlICsgJ10nLFxuICAgICAgcnNDb21ibyA9ICdbJyArIHJzQ29tYm9SYW5nZSArICddJyxcbiAgICAgIHJzRGlnaXRzID0gJ1xcXFxkKycsXG4gICAgICByc0RpbmdiYXQgPSAnWycgKyByc0RpbmdiYXRSYW5nZSArICddJyxcbiAgICAgIHJzTG93ZXIgPSAnWycgKyByc0xvd2VyUmFuZ2UgKyAnXScsXG4gICAgICByc01pc2MgPSAnW14nICsgcnNBc3RyYWxSYW5nZSArIHJzQnJlYWtSYW5nZSArIHJzRGlnaXRzICsgcnNEaW5nYmF0UmFuZ2UgKyByc0xvd2VyUmFuZ2UgKyByc1VwcGVyUmFuZ2UgKyAnXScsXG4gICAgICByc0ZpdHogPSAnXFxcXHVkODNjW1xcXFx1ZGZmYi1cXFxcdWRmZmZdJyxcbiAgICAgIHJzTW9kaWZpZXIgPSAnKD86JyArIHJzQ29tYm8gKyAnfCcgKyByc0ZpdHogKyAnKScsXG4gICAgICByc05vbkFzdHJhbCA9ICdbXicgKyByc0FzdHJhbFJhbmdlICsgJ10nLFxuICAgICAgcnNSZWdpb25hbCA9ICcoPzpcXFxcdWQ4M2NbXFxcXHVkZGU2LVxcXFx1ZGRmZl0pezJ9JyxcbiAgICAgIHJzU3VyclBhaXIgPSAnW1xcXFx1ZDgwMC1cXFxcdWRiZmZdW1xcXFx1ZGMwMC1cXFxcdWRmZmZdJyxcbiAgICAgIHJzVXBwZXIgPSAnWycgKyByc1VwcGVyUmFuZ2UgKyAnXScsXG4gICAgICByc1pXSiA9ICdcXFxcdTIwMGQnO1xuXG4gIC8qKiBVc2VkIHRvIGNvbXBvc2UgdW5pY29kZSByZWdleGVzLiAqL1xuICB2YXIgcnNNaXNjTG93ZXIgPSAnKD86JyArIHJzTG93ZXIgKyAnfCcgKyByc01pc2MgKyAnKScsXG4gICAgICByc01pc2NVcHBlciA9ICcoPzonICsgcnNVcHBlciArICd8JyArIHJzTWlzYyArICcpJyxcbiAgICAgIHJzT3B0Q29udHJMb3dlciA9ICcoPzonICsgcnNBcG9zICsgJyg/OmR8bGx8bXxyZXxzfHR8dmUpKT8nLFxuICAgICAgcnNPcHRDb250clVwcGVyID0gJyg/OicgKyByc0Fwb3MgKyAnKD86RHxMTHxNfFJFfFN8VHxWRSkpPycsXG4gICAgICByZU9wdE1vZCA9IHJzTW9kaWZpZXIgKyAnPycsXG4gICAgICByc09wdFZhciA9ICdbJyArIHJzVmFyUmFuZ2UgKyAnXT8nLFxuICAgICAgcnNPcHRKb2luID0gJyg/OicgKyByc1pXSiArICcoPzonICsgW3JzTm9uQXN0cmFsLCByc1JlZ2lvbmFsLCByc1N1cnJQYWlyXS5qb2luKCd8JykgKyAnKScgKyByc09wdFZhciArIHJlT3B0TW9kICsgJykqJyxcbiAgICAgIHJzT3JkTG93ZXIgPSAnXFxcXGQqKD86MXN0fDJuZHwzcmR8KD8hWzEyM10pXFxcXGR0aCkoPz1cXFxcYnxbQS1aX10pJyxcbiAgICAgIHJzT3JkVXBwZXIgPSAnXFxcXGQqKD86MVNUfDJORHwzUkR8KD8hWzEyM10pXFxcXGRUSCkoPz1cXFxcYnxbYS16X10pJyxcbiAgICAgIHJzU2VxID0gcnNPcHRWYXIgKyByZU9wdE1vZCArIHJzT3B0Sm9pbixcbiAgICAgIHJzRW1vamkgPSAnKD86JyArIFtyc0RpbmdiYXQsIHJzUmVnaW9uYWwsIHJzU3VyclBhaXJdLmpvaW4oJ3wnKSArICcpJyArIHJzU2VxLFxuICAgICAgcnNTeW1ib2wgPSAnKD86JyArIFtyc05vbkFzdHJhbCArIHJzQ29tYm8gKyAnPycsIHJzQ29tYm8sIHJzUmVnaW9uYWwsIHJzU3VyclBhaXIsIHJzQXN0cmFsXS5qb2luKCd8JykgKyAnKSc7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggYXBvc3Ryb3BoZXMuICovXG4gIHZhciByZUFwb3MgPSBSZWdFeHAocnNBcG9zLCAnZycpO1xuXG4gIC8qKlxuICAgKiBVc2VkIHRvIG1hdGNoIFtjb21iaW5pbmcgZGlhY3JpdGljYWwgbWFya3NdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvbWJpbmluZ19EaWFjcml0aWNhbF9NYXJrcykgYW5kXG4gICAqIFtjb21iaW5pbmcgZGlhY3JpdGljYWwgbWFya3MgZm9yIHN5bWJvbHNdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvbWJpbmluZ19EaWFjcml0aWNhbF9NYXJrc19mb3JfU3ltYm9scykuXG4gICAqL1xuICB2YXIgcmVDb21ib01hcmsgPSBSZWdFeHAocnNDb21ibywgJ2cnKTtcblxuICAvKiogVXNlZCB0byBtYXRjaCBbc3RyaW5nIHN5bWJvbHNdKGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9qYXZhc2NyaXB0LXVuaWNvZGUpLiAqL1xuICB2YXIgcmVVbmljb2RlID0gUmVnRXhwKHJzRml0eiArICcoPz0nICsgcnNGaXR6ICsgJyl8JyArIHJzU3ltYm9sICsgcnNTZXEsICdnJyk7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggY29tcGxleCBvciBjb21wb3VuZCB3b3Jkcy4gKi9cbiAgdmFyIHJlVW5pY29kZVdvcmQgPSBSZWdFeHAoW1xuICAgIHJzVXBwZXIgKyAnPycgKyByc0xvd2VyICsgJysnICsgcnNPcHRDb250ckxvd2VyICsgJyg/PScgKyBbcnNCcmVhaywgcnNVcHBlciwgJyQnXS5qb2luKCd8JykgKyAnKScsXG4gICAgcnNNaXNjVXBwZXIgKyAnKycgKyByc09wdENvbnRyVXBwZXIgKyAnKD89JyArIFtyc0JyZWFrLCByc1VwcGVyICsgcnNNaXNjTG93ZXIsICckJ10uam9pbignfCcpICsgJyknLFxuICAgIHJzVXBwZXIgKyAnPycgKyByc01pc2NMb3dlciArICcrJyArIHJzT3B0Q29udHJMb3dlcixcbiAgICByc1VwcGVyICsgJysnICsgcnNPcHRDb250clVwcGVyLFxuICAgIHJzT3JkVXBwZXIsXG4gICAgcnNPcmRMb3dlcixcbiAgICByc0RpZ2l0cyxcbiAgICByc0Vtb2ppXG4gIF0uam9pbignfCcpLCAnZycpO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBzdHJpbmdzIHdpdGggW3plcm8td2lkdGggam9pbmVycyBvciBjb2RlIHBvaW50cyBmcm9tIHRoZSBhc3RyYWwgcGxhbmVzXShodHRwOi8vZWV2LmVlL2Jsb2cvMjAxNS8wOS8xMi9kYXJrLWNvcm5lcnMtb2YtdW5pY29kZS8pLiAqL1xuICB2YXIgcmVIYXNVbmljb2RlID0gUmVnRXhwKCdbJyArIHJzWldKICsgcnNBc3RyYWxSYW5nZSAgKyByc0NvbWJvUmFuZ2UgKyByc1ZhclJhbmdlICsgJ10nKTtcblxuICAvKiogVXNlZCB0byBkZXRlY3Qgc3RyaW5ncyB0aGF0IG5lZWQgYSBtb3JlIHJvYnVzdCByZWdleHAgdG8gbWF0Y2ggd29yZHMuICovXG4gIHZhciByZUhhc1VuaWNvZGVXb3JkID0gL1thLXpdW0EtWl18W0EtWl17Mn1bYS16XXxbMC05XVthLXpBLVpdfFthLXpBLVpdWzAtOV18W15hLXpBLVowLTkgXS87XG5cbiAgLyoqIFVzZWQgdG8gYXNzaWduIGRlZmF1bHQgYGNvbnRleHRgIG9iamVjdCBwcm9wZXJ0aWVzLiAqL1xuICB2YXIgY29udGV4dFByb3BzID0gW1xuICAgICdBcnJheScsICdCdWZmZXInLCAnRGF0YVZpZXcnLCAnRGF0ZScsICdFcnJvcicsICdGbG9hdDMyQXJyYXknLCAnRmxvYXQ2NEFycmF5JyxcbiAgICAnRnVuY3Rpb24nLCAnSW50OEFycmF5JywgJ0ludDE2QXJyYXknLCAnSW50MzJBcnJheScsICdNYXAnLCAnTWF0aCcsICdPYmplY3QnLFxuICAgICdQcm9taXNlJywgJ1JlZ0V4cCcsICdTZXQnLCAnU3RyaW5nJywgJ1N5bWJvbCcsICdUeXBlRXJyb3InLCAnVWludDhBcnJheScsXG4gICAgJ1VpbnQ4Q2xhbXBlZEFycmF5JywgJ1VpbnQxNkFycmF5JywgJ1VpbnQzMkFycmF5JywgJ1dlYWtNYXAnLFxuICAgICdfJywgJ2NsZWFyVGltZW91dCcsICdpc0Zpbml0ZScsICdwYXJzZUludCcsICdzZXRUaW1lb3V0J1xuICBdO1xuXG4gIC8qKiBVc2VkIHRvIG1ha2UgdGVtcGxhdGUgc291cmNlVVJMcyBlYXNpZXIgdG8gaWRlbnRpZnkuICovXG4gIHZhciB0ZW1wbGF0ZUNvdW50ZXIgPSAtMTtcblxuICAvKiogVXNlZCB0byBpZGVudGlmeSBgdG9TdHJpbmdUYWdgIHZhbHVlcyBvZiB0eXBlZCBhcnJheXMuICovXG4gIHZhciB0eXBlZEFycmF5VGFncyA9IHt9O1xuICB0eXBlZEFycmF5VGFnc1tmbG9hdDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Zsb2F0NjRUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbaW50OFRhZ10gPSB0eXBlZEFycmF5VGFnc1tpbnQxNlRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tpbnQzMlRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50OFRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1t1aW50OENsYW1wZWRUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDE2VGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW3VpbnQzMlRhZ10gPSB0cnVlO1xuICB0eXBlZEFycmF5VGFnc1thcmdzVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2FycmF5VGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW2FycmF5QnVmZmVyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Jvb2xUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbZGF0YVZpZXdUYWddID0gdHlwZWRBcnJheVRhZ3NbZGF0ZVRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tlcnJvclRhZ10gPSB0eXBlZEFycmF5VGFnc1tmdW5jVGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW21hcFRhZ10gPSB0eXBlZEFycmF5VGFnc1tudW1iZXJUYWddID1cbiAgdHlwZWRBcnJheVRhZ3Nbb2JqZWN0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3JlZ2V4cFRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tzZXRUYWddID0gdHlwZWRBcnJheVRhZ3Nbc3RyaW5nVGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW3dlYWtNYXBUYWddID0gZmFsc2U7XG5cbiAgLyoqIFVzZWQgdG8gaWRlbnRpZnkgYHRvU3RyaW5nVGFnYCB2YWx1ZXMgc3VwcG9ydGVkIGJ5IGBfLmNsb25lYC4gKi9cbiAgdmFyIGNsb25lYWJsZVRhZ3MgPSB7fTtcbiAgY2xvbmVhYmxlVGFnc1thcmdzVGFnXSA9IGNsb25lYWJsZVRhZ3NbYXJyYXlUYWddID1cbiAgY2xvbmVhYmxlVGFnc1thcnJheUJ1ZmZlclRhZ10gPSBjbG9uZWFibGVUYWdzW2RhdGFWaWV3VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbYm9vbFRhZ10gPSBjbG9uZWFibGVUYWdzW2RhdGVUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tmbG9hdDMyVGFnXSA9IGNsb25lYWJsZVRhZ3NbZmxvYXQ2NFRhZ10gPVxuICBjbG9uZWFibGVUYWdzW2ludDhUYWddID0gY2xvbmVhYmxlVGFnc1tpbnQxNlRhZ10gPVxuICBjbG9uZWFibGVUYWdzW2ludDMyVGFnXSA9IGNsb25lYWJsZVRhZ3NbbWFwVGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbbnVtYmVyVGFnXSA9IGNsb25lYWJsZVRhZ3Nbb2JqZWN0VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbcmVnZXhwVGFnXSA9IGNsb25lYWJsZVRhZ3Nbc2V0VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3Nbc3RyaW5nVGFnXSA9IGNsb25lYWJsZVRhZ3Nbc3ltYm9sVGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbdWludDhUYWddID0gY2xvbmVhYmxlVGFnc1t1aW50OENsYW1wZWRUYWddID1cbiAgY2xvbmVhYmxlVGFnc1t1aW50MTZUYWddID0gY2xvbmVhYmxlVGFnc1t1aW50MzJUYWddID0gdHJ1ZTtcbiAgY2xvbmVhYmxlVGFnc1tlcnJvclRhZ10gPSBjbG9uZWFibGVUYWdzW2Z1bmNUYWddID1cbiAgY2xvbmVhYmxlVGFnc1t3ZWFrTWFwVGFnXSA9IGZhbHNlO1xuXG4gIC8qKiBVc2VkIHRvIG1hcCBMYXRpbiBVbmljb2RlIGxldHRlcnMgdG8gYmFzaWMgTGF0aW4gbGV0dGVycy4gKi9cbiAgdmFyIGRlYnVycmVkTGV0dGVycyA9IHtcbiAgICAvLyBMYXRpbi0xIFN1cHBsZW1lbnQgYmxvY2suXG4gICAgJ1xceGMwJzogJ0EnLCAgJ1xceGMxJzogJ0EnLCAnXFx4YzInOiAnQScsICdcXHhjMyc6ICdBJywgJ1xceGM0JzogJ0EnLCAnXFx4YzUnOiAnQScsXG4gICAgJ1xceGUwJzogJ2EnLCAgJ1xceGUxJzogJ2EnLCAnXFx4ZTInOiAnYScsICdcXHhlMyc6ICdhJywgJ1xceGU0JzogJ2EnLCAnXFx4ZTUnOiAnYScsXG4gICAgJ1xceGM3JzogJ0MnLCAgJ1xceGU3JzogJ2MnLFxuICAgICdcXHhkMCc6ICdEJywgICdcXHhmMCc6ICdkJyxcbiAgICAnXFx4YzgnOiAnRScsICAnXFx4YzknOiAnRScsICdcXHhjYSc6ICdFJywgJ1xceGNiJzogJ0UnLFxuICAgICdcXHhlOCc6ICdlJywgICdcXHhlOSc6ICdlJywgJ1xceGVhJzogJ2UnLCAnXFx4ZWInOiAnZScsXG4gICAgJ1xceGNjJzogJ0knLCAgJ1xceGNkJzogJ0knLCAnXFx4Y2UnOiAnSScsICdcXHhjZic6ICdJJyxcbiAgICAnXFx4ZWMnOiAnaScsICAnXFx4ZWQnOiAnaScsICdcXHhlZSc6ICdpJywgJ1xceGVmJzogJ2knLFxuICAgICdcXHhkMSc6ICdOJywgICdcXHhmMSc6ICduJyxcbiAgICAnXFx4ZDInOiAnTycsICAnXFx4ZDMnOiAnTycsICdcXHhkNCc6ICdPJywgJ1xceGQ1JzogJ08nLCAnXFx4ZDYnOiAnTycsICdcXHhkOCc6ICdPJyxcbiAgICAnXFx4ZjInOiAnbycsICAnXFx4ZjMnOiAnbycsICdcXHhmNCc6ICdvJywgJ1xceGY1JzogJ28nLCAnXFx4ZjYnOiAnbycsICdcXHhmOCc6ICdvJyxcbiAgICAnXFx4ZDknOiAnVScsICAnXFx4ZGEnOiAnVScsICdcXHhkYic6ICdVJywgJ1xceGRjJzogJ1UnLFxuICAgICdcXHhmOSc6ICd1JywgICdcXHhmYSc6ICd1JywgJ1xceGZiJzogJ3UnLCAnXFx4ZmMnOiAndScsXG4gICAgJ1xceGRkJzogJ1knLCAgJ1xceGZkJzogJ3knLCAnXFx4ZmYnOiAneScsXG4gICAgJ1xceGM2JzogJ0FlJywgJ1xceGU2JzogJ2FlJyxcbiAgICAnXFx4ZGUnOiAnVGgnLCAnXFx4ZmUnOiAndGgnLFxuICAgICdcXHhkZic6ICdzcycsXG4gICAgLy8gTGF0aW4gRXh0ZW5kZWQtQSBibG9jay5cbiAgICAnXFx1MDEwMCc6ICdBJywgICdcXHUwMTAyJzogJ0EnLCAnXFx1MDEwNCc6ICdBJyxcbiAgICAnXFx1MDEwMSc6ICdhJywgICdcXHUwMTAzJzogJ2EnLCAnXFx1MDEwNSc6ICdhJyxcbiAgICAnXFx1MDEwNic6ICdDJywgICdcXHUwMTA4JzogJ0MnLCAnXFx1MDEwYSc6ICdDJywgJ1xcdTAxMGMnOiAnQycsXG4gICAgJ1xcdTAxMDcnOiAnYycsICAnXFx1MDEwOSc6ICdjJywgJ1xcdTAxMGInOiAnYycsICdcXHUwMTBkJzogJ2MnLFxuICAgICdcXHUwMTBlJzogJ0QnLCAgJ1xcdTAxMTAnOiAnRCcsICdcXHUwMTBmJzogJ2QnLCAnXFx1MDExMSc6ICdkJyxcbiAgICAnXFx1MDExMic6ICdFJywgICdcXHUwMTE0JzogJ0UnLCAnXFx1MDExNic6ICdFJywgJ1xcdTAxMTgnOiAnRScsICdcXHUwMTFhJzogJ0UnLFxuICAgICdcXHUwMTEzJzogJ2UnLCAgJ1xcdTAxMTUnOiAnZScsICdcXHUwMTE3JzogJ2UnLCAnXFx1MDExOSc6ICdlJywgJ1xcdTAxMWInOiAnZScsXG4gICAgJ1xcdTAxMWMnOiAnRycsICAnXFx1MDExZSc6ICdHJywgJ1xcdTAxMjAnOiAnRycsICdcXHUwMTIyJzogJ0cnLFxuICAgICdcXHUwMTFkJzogJ2cnLCAgJ1xcdTAxMWYnOiAnZycsICdcXHUwMTIxJzogJ2cnLCAnXFx1MDEyMyc6ICdnJyxcbiAgICAnXFx1MDEyNCc6ICdIJywgICdcXHUwMTI2JzogJ0gnLCAnXFx1MDEyNSc6ICdoJywgJ1xcdTAxMjcnOiAnaCcsXG4gICAgJ1xcdTAxMjgnOiAnSScsICAnXFx1MDEyYSc6ICdJJywgJ1xcdTAxMmMnOiAnSScsICdcXHUwMTJlJzogJ0knLCAnXFx1MDEzMCc6ICdJJyxcbiAgICAnXFx1MDEyOSc6ICdpJywgICdcXHUwMTJiJzogJ2knLCAnXFx1MDEyZCc6ICdpJywgJ1xcdTAxMmYnOiAnaScsICdcXHUwMTMxJzogJ2knLFxuICAgICdcXHUwMTM0JzogJ0onLCAgJ1xcdTAxMzUnOiAnaicsXG4gICAgJ1xcdTAxMzYnOiAnSycsICAnXFx1MDEzNyc6ICdrJywgJ1xcdTAxMzgnOiAnaycsXG4gICAgJ1xcdTAxMzknOiAnTCcsICAnXFx1MDEzYic6ICdMJywgJ1xcdTAxM2QnOiAnTCcsICdcXHUwMTNmJzogJ0wnLCAnXFx1MDE0MSc6ICdMJyxcbiAgICAnXFx1MDEzYSc6ICdsJywgICdcXHUwMTNjJzogJ2wnLCAnXFx1MDEzZSc6ICdsJywgJ1xcdTAxNDAnOiAnbCcsICdcXHUwMTQyJzogJ2wnLFxuICAgICdcXHUwMTQzJzogJ04nLCAgJ1xcdTAxNDUnOiAnTicsICdcXHUwMTQ3JzogJ04nLCAnXFx1MDE0YSc6ICdOJyxcbiAgICAnXFx1MDE0NCc6ICduJywgICdcXHUwMTQ2JzogJ24nLCAnXFx1MDE0OCc6ICduJywgJ1xcdTAxNGInOiAnbicsXG4gICAgJ1xcdTAxNGMnOiAnTycsICAnXFx1MDE0ZSc6ICdPJywgJ1xcdTAxNTAnOiAnTycsXG4gICAgJ1xcdTAxNGQnOiAnbycsICAnXFx1MDE0Zic6ICdvJywgJ1xcdTAxNTEnOiAnbycsXG4gICAgJ1xcdTAxNTQnOiAnUicsICAnXFx1MDE1Nic6ICdSJywgJ1xcdTAxNTgnOiAnUicsXG4gICAgJ1xcdTAxNTUnOiAncicsICAnXFx1MDE1Nyc6ICdyJywgJ1xcdTAxNTknOiAncicsXG4gICAgJ1xcdTAxNWEnOiAnUycsICAnXFx1MDE1Yyc6ICdTJywgJ1xcdTAxNWUnOiAnUycsICdcXHUwMTYwJzogJ1MnLFxuICAgICdcXHUwMTViJzogJ3MnLCAgJ1xcdTAxNWQnOiAncycsICdcXHUwMTVmJzogJ3MnLCAnXFx1MDE2MSc6ICdzJyxcbiAgICAnXFx1MDE2Mic6ICdUJywgICdcXHUwMTY0JzogJ1QnLCAnXFx1MDE2Nic6ICdUJyxcbiAgICAnXFx1MDE2Myc6ICd0JywgICdcXHUwMTY1JzogJ3QnLCAnXFx1MDE2Nyc6ICd0JyxcbiAgICAnXFx1MDE2OCc6ICdVJywgICdcXHUwMTZhJzogJ1UnLCAnXFx1MDE2Yyc6ICdVJywgJ1xcdTAxNmUnOiAnVScsICdcXHUwMTcwJzogJ1UnLCAnXFx1MDE3Mic6ICdVJyxcbiAgICAnXFx1MDE2OSc6ICd1JywgICdcXHUwMTZiJzogJ3UnLCAnXFx1MDE2ZCc6ICd1JywgJ1xcdTAxNmYnOiAndScsICdcXHUwMTcxJzogJ3UnLCAnXFx1MDE3Myc6ICd1JyxcbiAgICAnXFx1MDE3NCc6ICdXJywgICdcXHUwMTc1JzogJ3cnLFxuICAgICdcXHUwMTc2JzogJ1knLCAgJ1xcdTAxNzcnOiAneScsICdcXHUwMTc4JzogJ1knLFxuICAgICdcXHUwMTc5JzogJ1onLCAgJ1xcdTAxN2InOiAnWicsICdcXHUwMTdkJzogJ1onLFxuICAgICdcXHUwMTdhJzogJ3onLCAgJ1xcdTAxN2MnOiAneicsICdcXHUwMTdlJzogJ3onLFxuICAgICdcXHUwMTMyJzogJ0lKJywgJ1xcdTAxMzMnOiAnaWonLFxuICAgICdcXHUwMTUyJzogJ09lJywgJ1xcdTAxNTMnOiAnb2UnLFxuICAgICdcXHUwMTQ5JzogXCInblwiLCAnXFx1MDE3Zic6ICdzJ1xuICB9O1xuXG4gIC8qKiBVc2VkIHRvIG1hcCBjaGFyYWN0ZXJzIHRvIEhUTUwgZW50aXRpZXMuICovXG4gIHZhciBodG1sRXNjYXBlcyA9IHtcbiAgICAnJic6ICcmYW1wOycsXG4gICAgJzwnOiAnJmx0OycsXG4gICAgJz4nOiAnJmd0OycsXG4gICAgJ1wiJzogJyZxdW90OycsXG4gICAgXCInXCI6ICcmIzM5OydcbiAgfTtcblxuICAvKiogVXNlZCB0byBtYXAgSFRNTCBlbnRpdGllcyB0byBjaGFyYWN0ZXJzLiAqL1xuICB2YXIgaHRtbFVuZXNjYXBlcyA9IHtcbiAgICAnJmFtcDsnOiAnJicsXG4gICAgJyZsdDsnOiAnPCcsXG4gICAgJyZndDsnOiAnPicsXG4gICAgJyZxdW90Oyc6ICdcIicsXG4gICAgJyYjMzk7JzogXCInXCJcbiAgfTtcblxuICAvKiogVXNlZCB0byBlc2NhcGUgY2hhcmFjdGVycyBmb3IgaW5jbHVzaW9uIGluIGNvbXBpbGVkIHN0cmluZyBsaXRlcmFscy4gKi9cbiAgdmFyIHN0cmluZ0VzY2FwZXMgPSB7XG4gICAgJ1xcXFwnOiAnXFxcXCcsXG4gICAgXCInXCI6IFwiJ1wiLFxuICAgICdcXG4nOiAnbicsXG4gICAgJ1xccic6ICdyJyxcbiAgICAnXFx1MjAyOCc6ICd1MjAyOCcsXG4gICAgJ1xcdTIwMjknOiAndTIwMjknXG4gIH07XG5cbiAgLyoqIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHdpdGhvdXQgYSBkZXBlbmRlbmN5IG9uIGByb290YC4gKi9cbiAgdmFyIGZyZWVQYXJzZUZsb2F0ID0gcGFyc2VGbG9hdCxcbiAgICAgIGZyZWVQYXJzZUludCA9IHBhcnNlSW50O1xuXG4gIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMuICovXG4gIHZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwgJiYgZ2xvYmFsLk9iamVjdCA9PT0gT2JqZWN0ICYmIGdsb2JhbDtcblxuICAvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHNlbGZgLiAqL1xuICB2YXIgZnJlZVNlbGYgPSB0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ID09PSBPYmplY3QgJiYgc2VsZjtcblxuICAvKiogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdC4gKi9cbiAgdmFyIHJvb3QgPSBmcmVlR2xvYmFsIHx8IGZyZWVTZWxmIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbiAgLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cbiAgdmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgJiYgZXhwb3J0cyAmJiAhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzO1xuXG4gIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYC4gKi9cbiAgdmFyIGZyZWVNb2R1bGUgPSBmcmVlRXhwb3J0cyAmJiB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblxuICAvKiogRGV0ZWN0IHRoZSBwb3B1bGFyIENvbW1vbkpTIGV4dGVuc2lvbiBgbW9kdWxlLmV4cG9ydHNgLiAqL1xuICB2YXIgbW9kdWxlRXhwb3J0cyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5leHBvcnRzID09PSBmcmVlRXhwb3J0cztcblxuICAvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHByb2Nlc3NgIGZyb20gTm9kZS5qcy4gKi9cbiAgdmFyIGZyZWVQcm9jZXNzID0gbW9kdWxlRXhwb3J0cyAmJiBmcmVlR2xvYmFsLnByb2Nlc3M7XG5cbiAgLyoqIFVzZWQgdG8gYWNjZXNzIGZhc3RlciBOb2RlLmpzIGhlbHBlcnMuICovXG4gIHZhciBub2RlVXRpbCA9IChmdW5jdGlvbigpIHtcbiAgICB0cnkge1xuICAgICAgLy8gVXNlIGB1dGlsLnR5cGVzYCBmb3IgTm9kZS5qcyAxMCsuXG4gICAgICB2YXIgdHlwZXMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUucmVxdWlyZSAmJiBmcmVlTW9kdWxlLnJlcXVpcmUoJ3V0aWwnKS50eXBlcztcblxuICAgICAgaWYgKHR5cGVzKSB7XG4gICAgICAgIHJldHVybiB0eXBlcztcbiAgICAgIH1cblxuICAgICAgLy8gTGVnYWN5IGBwcm9jZXNzLmJpbmRpbmcoJ3V0aWwnKWAgZm9yIE5vZGUuanMgPCAxMC5cbiAgICAgIHJldHVybiBmcmVlUHJvY2VzcyAmJiBmcmVlUHJvY2Vzcy5iaW5kaW5nICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcoJ3V0aWwnKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9KCkpO1xuXG4gIC8qIE5vZGUuanMgaGVscGVyIHJlZmVyZW5jZXMuICovXG4gIHZhciBub2RlSXNBcnJheUJ1ZmZlciA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzQXJyYXlCdWZmZXIsXG4gICAgICBub2RlSXNEYXRlID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNEYXRlLFxuICAgICAgbm9kZUlzTWFwID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNNYXAsXG4gICAgICBub2RlSXNSZWdFeHAgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc1JlZ0V4cCxcbiAgICAgIG5vZGVJc1NldCA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzU2V0LFxuICAgICAgbm9kZUlzVHlwZWRBcnJheSA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzVHlwZWRBcnJheTtcblxuICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAvKipcbiAgICogQSBmYXN0ZXIgYWx0ZXJuYXRpdmUgdG8gYEZ1bmN0aW9uI2FwcGx5YCwgdGhpcyBmdW5jdGlvbiBpbnZva2VzIGBmdW5jYFxuICAgKiB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiBgdGhpc0FyZ2AgYW5kIHRoZSBhcmd1bWVudHMgb2YgYGFyZ3NgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBpbnZva2UuXG4gICAqIEBwYXJhbSB7Kn0gdGhpc0FyZyBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgKiBAcGFyYW0ge0FycmF5fSBhcmdzIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIGBmdW5jYCB3aXRoLlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzdWx0IG9mIGBmdW5jYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFwcGx5KGZ1bmMsIHRoaXNBcmcsIGFyZ3MpIHtcbiAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICBjYXNlIDA6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZyk7XG4gICAgICBjYXNlIDE6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgYXJnc1swXSk7XG4gICAgICBjYXNlIDI6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICBjYXNlIDM6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgfVxuICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUFnZ3JlZ2F0b3JgIGZvciBhcnJheXMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gc2V0dGVyIFRoZSBmdW5jdGlvbiB0byBzZXQgYGFjY3VtdWxhdG9yYCB2YWx1ZXMuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBpdGVyYXRlZSB0byB0cmFuc2Zvcm0ga2V5cy5cbiAgICogQHBhcmFtIHtPYmplY3R9IGFjY3VtdWxhdG9yIFRoZSBpbml0aWFsIGFnZ3JlZ2F0ZWQgb2JqZWN0LlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGFjY3VtdWxhdG9yYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5QWdncmVnYXRvcihhcnJheSwgc2V0dGVyLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgc2V0dGVyKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaXRlcmF0ZWUodmFsdWUpLCBhcnJheSk7XG4gICAgfVxuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZm9yRWFjaGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheUVhY2goYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChpdGVyYXRlZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkgPT09IGZhbHNlKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmZvckVhY2hSaWdodGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheUVhY2hSaWdodChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgIGlmIChpdGVyYXRlZShhcnJheVtsZW5ndGhdLCBsZW5ndGgsIGFycmF5KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZXZlcnlgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYWxsIGVsZW1lbnRzIHBhc3MgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICogIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5RXZlcnkoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBpZiAoIXByZWRpY2F0ZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZmlsdGVyYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheUZpbHRlcihhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgICByZXNJbmRleCA9IDAsXG4gICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBhcnJheSkpIHtcbiAgICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmluY2x1ZGVzYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogc3BlY2lmeWluZyBhbiBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHsqfSB0YXJnZXQgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdGFyZ2V0YCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlJbmNsdWRlcyhhcnJheSwgdmFsdWUpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgcmV0dXJuICEhbGVuZ3RoICYmIGJhc2VJbmRleE9mKGFycmF5LCB2YWx1ZSwgMCkgPiAtMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGFycmF5SW5jbHVkZXNgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYSBjb21wYXJhdG9yLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHRhcmdldCBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29tcGFyYXRvciBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHRhcmdldGAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5SW5jbHVkZXNXaXRoKGFycmF5LCB2YWx1ZSwgY29tcGFyYXRvcikge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBpZiAoY29tcGFyYXRvcih2YWx1ZSwgYXJyYXlbaW5kZXhdKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5tYXBgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZVxuICAgKiBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5TWFwKGFycmF5LCBpdGVyYXRlZSkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEFwcGVuZHMgdGhlIGVsZW1lbnRzIG9mIGB2YWx1ZXNgIHRvIGBhcnJheWAuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIGFwcGVuZC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheVB1c2goYXJyYXksIHZhbHVlcykge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgICBvZmZzZXQgPSBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgYXJyYXlbb2Zmc2V0ICsgaW5kZXhdID0gdmFsdWVzW2luZGV4XTtcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5yZWR1Y2VgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAgICogQHBhcmFtIHtib29sZWFufSBbaW5pdEFjY3VtXSBTcGVjaWZ5IHVzaW5nIHRoZSBmaXJzdCBlbGVtZW50IG9mIGBhcnJheWAgYXNcbiAgICogIHRoZSBpbml0aWFsIHZhbHVlLlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheVJlZHVjZShhcnJheSwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yLCBpbml0QWNjdW0pIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgICBpZiAoaW5pdEFjY3VtICYmIGxlbmd0aCkge1xuICAgICAgYWNjdW11bGF0b3IgPSBhcnJheVsrK2luZGV4XTtcbiAgICB9XG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGFjY3VtdWxhdG9yID0gaXRlcmF0ZWUoYWNjdW11bGF0b3IsIGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KTtcbiAgICB9XG4gICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5yZWR1Y2VSaWdodGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBpbml0aWFsIHZhbHVlLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpbml0QWNjdW1dIFNwZWNpZnkgdXNpbmcgdGhlIGxhc3QgZWxlbWVudCBvZiBgYXJyYXlgIGFzXG4gICAqICB0aGUgaW5pdGlhbCB2YWx1ZS5cbiAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlSZWR1Y2VSaWdodChhcnJheSwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yLCBpbml0QWNjdW0pIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgaWYgKGluaXRBY2N1bSAmJiBsZW5ndGgpIHtcbiAgICAgIGFjY3VtdWxhdG9yID0gYXJyYXlbLS1sZW5ndGhdO1xuICAgIH1cbiAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgIGFjY3VtdWxhdG9yID0gaXRlcmF0ZWUoYWNjdW11bGF0b3IsIGFycmF5W2xlbmd0aF0sIGxlbmd0aCwgYXJyYXkpO1xuICAgIH1cbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnNvbWVgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZVxuICAgKiBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW55IGVsZW1lbnQgcGFzc2VzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gICAqICBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheVNvbWUoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBpZiAocHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHNpemUgb2YgYW4gQVNDSUkgYHN0cmluZ2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdHJpbmcgc2l6ZS5cbiAgICovXG4gIHZhciBhc2NpaVNpemUgPSBiYXNlUHJvcGVydHkoJ2xlbmd0aCcpO1xuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBhbiBBU0NJSSBgc3RyaW5nYCB0byBhbiBhcnJheS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gYXNjaWlUb0FycmF5KHN0cmluZykge1xuICAgIHJldHVybiBzdHJpbmcuc3BsaXQoJycpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNwbGl0cyBhbiBBU0NJSSBgc3RyaW5nYCBpbnRvIGFuIGFycmF5IG9mIGl0cyB3b3Jkcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB3b3JkcyBvZiBgc3RyaW5nYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFzY2lpV29yZHMoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy5tYXRjaChyZUFzY2lpV29yZCkgfHwgW107XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgbWV0aG9kcyBsaWtlIGBfLmZpbmRLZXlgIGFuZCBgXy5maW5kTGFzdEtleWAsXG4gICAqIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcywgd2hpY2ggaXRlcmF0ZXMgb3ZlciBgY29sbGVjdGlvbmBcbiAgICogdXNpbmcgYGVhY2hGdW5jYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGVhY2hGdW5jIFRoZSBmdW5jdGlvbiB0byBpdGVyYXRlIG92ZXIgYGNvbGxlY3Rpb25gLlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZm91bmQgZWxlbWVudCBvciBpdHMga2V5LCBlbHNlIGB1bmRlZmluZWRgLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZUZpbmRLZXkoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBlYWNoRnVuYykge1xuICAgIHZhciByZXN1bHQ7XG4gICAgZWFjaEZ1bmMoY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSwgY29sbGVjdGlvbikge1xuICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSkge1xuICAgICAgICByZXN1bHQgPSBrZXk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZpbmRJbmRleGAgYW5kIGBfLmZpbmRMYXN0SW5kZXhgIHdpdGhvdXRcbiAgICogc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlRmluZEluZGV4KGFycmF5LCBwcmVkaWNhdGUsIGZyb21JbmRleCwgZnJvbVJpZ2h0KSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgaW5kZXggPSBmcm9tSW5kZXggKyAoZnJvbVJpZ2h0ID8gMSA6IC0xKTtcblxuICAgIHdoaWxlICgoZnJvbVJpZ2h0ID8gaW5kZXgtLSA6ICsraW5kZXggPCBsZW5ndGgpKSB7XG4gICAgICBpZiAocHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAtMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pbmRleE9mYCB3aXRob3V0IGBmcm9tSW5kZXhgIGJvdW5kcyBjaGVja3MuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZVxuICAgICAgPyBzdHJpY3RJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KVxuICAgICAgOiBiYXNlRmluZEluZGV4KGFycmF5LCBiYXNlSXNOYU4sIGZyb21JbmRleCk7XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlIGBiYXNlSW5kZXhPZmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBhIGNvbXBhcmF0b3IuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29tcGFyYXRvciBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZUluZGV4T2ZXaXRoKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4LCBjb21wYXJhdG9yKSB7XG4gICAgdmFyIGluZGV4ID0gZnJvbUluZGV4IC0gMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChjb21wYXJhdG9yKGFycmF5W2luZGV4XSwgdmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTmFOYCB3aXRob3V0IHN1cHBvcnQgZm9yIG51bWJlciBvYmplY3RzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYE5hTmAsIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VJc05hTih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAhPT0gdmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWVhbmAgYW5kIGBfLm1lYW5CeWAgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBtZWFuLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZU1lYW4oYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgIHJldHVybiBsZW5ndGggPyAoYmFzZVN1bShhcnJheSwgaXRlcmF0ZWUpIC8gbGVuZ3RoKSA6IE5BTjtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5wcm9wZXJ0eWAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlUHJvcGVydHkoa2V5KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5wcm9wZXJ0eU9mYCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlUHJvcGVydHlPZihvYmplY3QpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnJlZHVjZWAgYW5kIGBfLnJlZHVjZVJpZ2h0YCwgd2l0aG91dCBzdXBwb3J0XG4gICAqIGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLCB3aGljaCBpdGVyYXRlcyBvdmVyIGBjb2xsZWN0aW9uYCB1c2luZyBgZWFjaEZ1bmNgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEBwYXJhbSB7Kn0gYWNjdW11bGF0b3IgVGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5pdEFjY3VtIFNwZWNpZnkgdXNpbmcgdGhlIGZpcnN0IG9yIGxhc3QgZWxlbWVudCBvZlxuICAgKiAgYGNvbGxlY3Rpb25gIGFzIHRoZSBpbml0aWFsIHZhbHVlLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlYWNoRnVuYyBUaGUgZnVuY3Rpb24gdG8gaXRlcmF0ZSBvdmVyIGBjb2xsZWN0aW9uYC5cbiAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVJlZHVjZShjb2xsZWN0aW9uLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSwgZWFjaEZ1bmMpIHtcbiAgICBlYWNoRnVuYyhjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgIGFjY3VtdWxhdG9yID0gaW5pdEFjY3VtXG4gICAgICAgID8gKGluaXRBY2N1bSA9IGZhbHNlLCB2YWx1ZSlcbiAgICAgICAgOiBpdGVyYXRlZShhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKTtcbiAgICB9KTtcbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc29ydEJ5YCB3aGljaCB1c2VzIGBjb21wYXJlcmAgdG8gZGVmaW5lIHRoZVxuICAgKiBzb3J0IG9yZGVyIG9mIGBhcnJheWAgYW5kIHJlcGxhY2VzIGNyaXRlcmlhIG9iamVjdHMgd2l0aCB0aGVpciBjb3JyZXNwb25kaW5nXG4gICAqIHZhbHVlcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNvcnQuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbXBhcmVyIFRoZSBmdW5jdGlvbiB0byBkZWZpbmUgc29ydCBvcmRlci5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlU29ydEJ5KGFycmF5LCBjb21wYXJlcikge1xuICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICBhcnJheS5zb3J0KGNvbXBhcmVyKTtcbiAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgIGFycmF5W2xlbmd0aF0gPSBhcnJheVtsZW5ndGhdLnZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc3VtYCBhbmQgYF8uc3VtQnlgIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3VtLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVN1bShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgcmVzdWx0LFxuICAgICAgICBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgdmFyIGN1cnJlbnQgPSBpdGVyYXRlZShhcnJheVtpbmRleF0pO1xuICAgICAgaWYgKGN1cnJlbnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXN1bHQgPSByZXN1bHQgPT09IHVuZGVmaW5lZCA/IGN1cnJlbnQgOiAocmVzdWx0ICsgY3VycmVudCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udGltZXNgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kc1xuICAgKiBvciBtYXggYXJyYXkgbGVuZ3RoIGNoZWNrcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiB0aW1lcyB0byBpbnZva2UgYGl0ZXJhdGVlYC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiByZXN1bHRzLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVRpbWVzKG4sIGl0ZXJhdGVlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIHJlc3VsdCA9IEFycmF5KG4pO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBuKSB7XG4gICAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoaW5kZXgpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRvUGFpcnNgIGFuZCBgXy50b1BhaXJzSW5gIHdoaWNoIGNyZWF0ZXMgYW4gYXJyYXlcbiAgICogb2Yga2V5LXZhbHVlIHBhaXJzIGZvciBgb2JqZWN0YCBjb3JyZXNwb25kaW5nIHRvIHRoZSBwcm9wZXJ0eSBuYW1lcyBvZiBgcHJvcHNgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBuYW1lcyB0byBnZXQgdmFsdWVzIGZvci5cbiAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUga2V5LXZhbHVlIHBhaXJzLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVRvUGFpcnMob2JqZWN0LCBwcm9wcykge1xuICAgIHJldHVybiBhcnJheU1hcChwcm9wcywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gW2tleSwgb2JqZWN0W2tleV1dO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuYXJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIHN0b3JpbmcgbWV0YWRhdGEuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhcCBhcmd1bWVudHMgZm9yLlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXBwZWQgZnVuY3Rpb24uXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlVW5hcnkoZnVuYykge1xuICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIGZ1bmModmFsdWUpO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udmFsdWVzYCBhbmQgYF8udmFsdWVzSW5gIHdoaWNoIGNyZWF0ZXMgYW5cbiAgICogYXJyYXkgb2YgYG9iamVjdGAgcHJvcGVydHkgdmFsdWVzIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHByb3BlcnR5IG5hbWVzXG4gICAqIG9mIGBwcm9wc2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IG5hbWVzIHRvIGdldCB2YWx1ZXMgZm9yLlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlVmFsdWVzKG9iamVjdCwgcHJvcHMpIHtcbiAgICByZXR1cm4gYXJyYXlNYXAocHJvcHMsIGZ1bmN0aW9uKGtleSkge1xuICAgICAgcmV0dXJuIG9iamVjdFtrZXldO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiBhIGBjYWNoZWAgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IGNhY2hlIFRoZSBjYWNoZSB0byBxdWVyeS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGNhY2hlSGFzKGNhY2hlLCBrZXkpIHtcbiAgICByZXR1cm4gY2FjaGUuaGFzKGtleSk7XG4gIH1cblxuICAvKipcbiAgICogVXNlZCBieSBgXy50cmltYCBhbmQgYF8udHJpbVN0YXJ0YCB0byBnZXQgdGhlIGluZGV4IG9mIHRoZSBmaXJzdCBzdHJpbmcgc3ltYm9sXG4gICAqIHRoYXQgaXMgbm90IGZvdW5kIGluIHRoZSBjaGFyYWN0ZXIgc3ltYm9scy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gc3RyU3ltYm9scyBUaGUgc3RyaW5nIHN5bWJvbHMgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHtBcnJheX0gY2hyU3ltYm9scyBUaGUgY2hhcmFjdGVyIHN5bWJvbHMgdG8gZmluZC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IHVubWF0Y2hlZCBzdHJpbmcgc3ltYm9sLlxuICAgKi9cbiAgZnVuY3Rpb24gY2hhcnNTdGFydEluZGV4KHN0clN5bWJvbHMsIGNoclN5bWJvbHMpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gc3RyU3ltYm9scy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCAmJiBiYXNlSW5kZXhPZihjaHJTeW1ib2xzLCBzdHJTeW1ib2xzW2luZGV4XSwgMCkgPiAtMSkge31cbiAgICByZXR1cm4gaW5kZXg7XG4gIH1cblxuICAvKipcbiAgICogVXNlZCBieSBgXy50cmltYCBhbmQgYF8udHJpbUVuZGAgdG8gZ2V0IHRoZSBpbmRleCBvZiB0aGUgbGFzdCBzdHJpbmcgc3ltYm9sXG4gICAqIHRoYXQgaXMgbm90IGZvdW5kIGluIHRoZSBjaGFyYWN0ZXIgc3ltYm9scy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gc3RyU3ltYm9scyBUaGUgc3RyaW5nIHN5bWJvbHMgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHtBcnJheX0gY2hyU3ltYm9scyBUaGUgY2hhcmFjdGVyIHN5bWJvbHMgdG8gZmluZC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGxhc3QgdW5tYXRjaGVkIHN0cmluZyBzeW1ib2wuXG4gICAqL1xuICBmdW5jdGlvbiBjaGFyc0VuZEluZGV4KHN0clN5bWJvbHMsIGNoclN5bWJvbHMpIHtcbiAgICB2YXIgaW5kZXggPSBzdHJTeW1ib2xzLmxlbmd0aDtcblxuICAgIHdoaWxlIChpbmRleC0tICYmIGJhc2VJbmRleE9mKGNoclN5bWJvbHMsIHN0clN5bWJvbHNbaW5kZXhdLCAwKSA+IC0xKSB7fVxuICAgIHJldHVybiBpbmRleDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBudW1iZXIgb2YgYHBsYWNlaG9sZGVyYCBvY2N1cnJlbmNlcyBpbiBgYXJyYXlgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHsqfSBwbGFjZWhvbGRlciBUaGUgcGxhY2Vob2xkZXIgdG8gc2VhcmNoIGZvci5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcGxhY2Vob2xkZXIgY291bnQuXG4gICAqL1xuICBmdW5jdGlvbiBjb3VudEhvbGRlcnMoYXJyYXksIHBsYWNlaG9sZGVyKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgcmVzdWx0ID0gMDtcblxuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgaWYgKGFycmF5W2xlbmd0aF0gPT09IHBsYWNlaG9sZGVyKSB7XG4gICAgICAgICsrcmVzdWx0O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8uZGVidXJyYCB0byBjb252ZXJ0IExhdGluLTEgU3VwcGxlbWVudCBhbmQgTGF0aW4gRXh0ZW5kZWQtQVxuICAgKiBsZXR0ZXJzIHRvIGJhc2ljIExhdGluIGxldHRlcnMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBsZXR0ZXIgVGhlIG1hdGNoZWQgbGV0dGVyIHRvIGRlYnVyci5cbiAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZGVidXJyZWQgbGV0dGVyLlxuICAgKi9cbiAgdmFyIGRlYnVyckxldHRlciA9IGJhc2VQcm9wZXJ0eU9mKGRlYnVycmVkTGV0dGVycyk7XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8uZXNjYXBlYCB0byBjb252ZXJ0IGNoYXJhY3RlcnMgdG8gSFRNTCBlbnRpdGllcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNociBUaGUgbWF0Y2hlZCBjaGFyYWN0ZXIgdG8gZXNjYXBlLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBlc2NhcGVkIGNoYXJhY3Rlci5cbiAgICovXG4gIHZhciBlc2NhcGVIdG1sQ2hhciA9IGJhc2VQcm9wZXJ0eU9mKGh0bWxFc2NhcGVzKTtcblxuICAvKipcbiAgICogVXNlZCBieSBgXy50ZW1wbGF0ZWAgdG8gZXNjYXBlIGNoYXJhY3RlcnMgZm9yIGluY2x1c2lvbiBpbiBjb21waWxlZCBzdHJpbmcgbGl0ZXJhbHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjaHIgVGhlIG1hdGNoZWQgY2hhcmFjdGVyIHRvIGVzY2FwZS5cbiAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZXNjYXBlZCBjaGFyYWN0ZXIuXG4gICAqL1xuICBmdW5jdGlvbiBlc2NhcGVTdHJpbmdDaGFyKGNocikge1xuICAgIHJldHVybiAnXFxcXCcgKyBzdHJpbmdFc2NhcGVzW2Nocl07XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgdmFsdWUgYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHByb3BlcnR5IHZhbHVlLlxuICAgKi9cbiAgZnVuY3Rpb24gZ2V0VmFsdWUob2JqZWN0LCBrZXkpIHtcbiAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgYHN0cmluZ2AgY29udGFpbnMgVW5pY29kZSBzeW1ib2xzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGEgc3ltYm9sIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBoYXNVbmljb2RlKHN0cmluZykge1xuICAgIHJldHVybiByZUhhc1VuaWNvZGUudGVzdChzdHJpbmcpO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiBgc3RyaW5nYCBjb250YWlucyBhIHdvcmQgY29tcG9zZWQgb2YgVW5pY29kZSBzeW1ib2xzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGEgd29yZCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gaGFzVW5pY29kZVdvcmQoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHJlSGFzVW5pY29kZVdvcmQudGVzdChzdHJpbmcpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGBpdGVyYXRvcmAgdG8gYW4gYXJyYXkuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBpdGVyYXRvciBUaGUgaXRlcmF0b3IgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gICAqL1xuICBmdW5jdGlvbiBpdGVyYXRvclRvQXJyYXkoaXRlcmF0b3IpIHtcbiAgICB2YXIgZGF0YSxcbiAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICB3aGlsZSAoIShkYXRhID0gaXRlcmF0b3IubmV4dCgpKS5kb25lKSB7XG4gICAgICByZXN1bHQucHVzaChkYXRhLnZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBgbWFwYCB0byBpdHMga2V5LXZhbHVlIHBhaXJzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBrZXktdmFsdWUgcGFpcnMuXG4gICAqL1xuICBmdW5jdGlvbiBtYXBUb0FycmF5KG1hcCkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICByZXN1bHQgPSBBcnJheShtYXAuc2l6ZSk7XG5cbiAgICBtYXAuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICByZXN1bHRbKytpbmRleF0gPSBba2V5LCB2YWx1ZV07XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgdW5hcnkgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGl0cyBhcmd1bWVudCB0cmFuc2Zvcm1lZC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gdHJhbnNmb3JtIFRoZSBhcmd1bWVudCB0cmFuc2Zvcm0uXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgKi9cbiAgZnVuY3Rpb24gb3ZlckFyZyhmdW5jLCB0cmFuc2Zvcm0pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oYXJnKSB7XG4gICAgICByZXR1cm4gZnVuYyh0cmFuc2Zvcm0oYXJnKSk7XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXBsYWNlcyBhbGwgYHBsYWNlaG9sZGVyYCBlbGVtZW50cyBpbiBgYXJyYXlgIHdpdGggYW4gaW50ZXJuYWwgcGxhY2Vob2xkZXJcbiAgICogYW5kIHJldHVybnMgYW4gYXJyYXkgb2YgdGhlaXIgaW5kZXhlcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICogQHBhcmFtIHsqfSBwbGFjZWhvbGRlciBUaGUgcGxhY2Vob2xkZXIgdG8gcmVwbGFjZS5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICovXG4gIGZ1bmN0aW9uIHJlcGxhY2VIb2xkZXJzKGFycmF5LCBwbGFjZWhvbGRlcikge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgaWYgKHZhbHVlID09PSBwbGFjZWhvbGRlciB8fCB2YWx1ZSA9PT0gUExBQ0VIT0xERVIpIHtcbiAgICAgICAgYXJyYXlbaW5kZXhdID0gUExBQ0VIT0xERVI7XG4gICAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IGluZGV4O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGBzZXRgIHRvIGFuIGFycmF5IG9mIGl0cyB2YWx1ZXMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzZXQgVGhlIHNldCB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHZhbHVlcy5cbiAgICovXG4gIGZ1bmN0aW9uIHNldFRvQXJyYXkoc2V0KSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIHJlc3VsdCA9IEFycmF5KHNldC5zaXplKTtcblxuICAgIHNldC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXN1bHRbKytpbmRleF0gPSB2YWx1ZTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGBzZXRgIHRvIGl0cyB2YWx1ZS12YWx1ZSBwYWlycy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IHNldCBUaGUgc2V0IHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgdmFsdWUtdmFsdWUgcGFpcnMuXG4gICAqL1xuICBmdW5jdGlvbiBzZXRUb1BhaXJzKHNldCkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICByZXN1bHQgPSBBcnJheShzZXQuc2l6ZSk7XG5cbiAgICBzZXQuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmVzdWx0WysraW5kZXhdID0gW3ZhbHVlLCB2YWx1ZV07XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uaW5kZXhPZmAgd2hpY2ggcGVyZm9ybXMgc3RyaWN0IGVxdWFsaXR5XG4gICAqIGNvbXBhcmlzb25zIG9mIHZhbHVlcywgaS5lLiBgPT09YC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgKi9cbiAgZnVuY3Rpb24gc3RyaWN0SW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkge1xuICAgIHZhciBpbmRleCA9IGZyb21JbmRleCAtIDEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBpZiAoYXJyYXlbaW5kZXhdID09PSB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAtMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ubGFzdEluZGV4T2ZgIHdoaWNoIHBlcmZvcm1zIHN0cmljdCBlcXVhbGl0eVxuICAgKiBjb21wYXJpc29ucyBvZiB2YWx1ZXMsIGkuZS4gYD09PWAuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICovXG4gIGZ1bmN0aW9uIHN0cmljdExhc3RJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gICAgdmFyIGluZGV4ID0gZnJvbUluZGV4ICsgMTtcbiAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgaWYgKGFycmF5W2luZGV4XSA9PT0gdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaW5kZXg7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgbnVtYmVyIG9mIHN5bWJvbHMgaW4gYHN0cmluZ2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdHJpbmcgc2l6ZS5cbiAgICovXG4gIGZ1bmN0aW9uIHN0cmluZ1NpemUoc3RyaW5nKSB7XG4gICAgcmV0dXJuIGhhc1VuaWNvZGUoc3RyaW5nKVxuICAgICAgPyB1bmljb2RlU2l6ZShzdHJpbmcpXG4gICAgICA6IGFzY2lpU2l6ZShzdHJpbmcpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvIGFuIGFycmF5LlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gICAqL1xuICBmdW5jdGlvbiBzdHJpbmdUb0FycmF5KHN0cmluZykge1xuICAgIHJldHVybiBoYXNVbmljb2RlKHN0cmluZylcbiAgICAgID8gdW5pY29kZVRvQXJyYXkoc3RyaW5nKVxuICAgICAgOiBhc2NpaVRvQXJyYXkoc3RyaW5nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLnVuZXNjYXBlYCB0byBjb252ZXJ0IEhUTUwgZW50aXRpZXMgdG8gY2hhcmFjdGVycy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNociBUaGUgbWF0Y2hlZCBjaGFyYWN0ZXIgdG8gdW5lc2NhcGUuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHVuZXNjYXBlZCBjaGFyYWN0ZXIuXG4gICAqL1xuICB2YXIgdW5lc2NhcGVIdG1sQ2hhciA9IGJhc2VQcm9wZXJ0eU9mKGh0bWxVbmVzY2FwZXMpO1xuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBzaXplIG9mIGEgVW5pY29kZSBgc3RyaW5nYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN0cmluZyBzaXplLlxuICAgKi9cbiAgZnVuY3Rpb24gdW5pY29kZVNpemUoc3RyaW5nKSB7XG4gICAgdmFyIHJlc3VsdCA9IHJlVW5pY29kZS5sYXN0SW5kZXggPSAwO1xuICAgIHdoaWxlIChyZVVuaWNvZGUudGVzdChzdHJpbmcpKSB7XG4gICAgICArK3Jlc3VsdDtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBhIFVuaWNvZGUgYHN0cmluZ2AgdG8gYW4gYXJyYXkuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIHVuaWNvZGVUb0FycmF5KHN0cmluZykge1xuICAgIHJldHVybiBzdHJpbmcubWF0Y2gocmVVbmljb2RlKSB8fCBbXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTcGxpdHMgYSBVbmljb2RlIGBzdHJpbmdgIGludG8gYW4gYXJyYXkgb2YgaXRzIHdvcmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHdvcmRzIG9mIGBzdHJpbmdgLlxuICAgKi9cbiAgZnVuY3Rpb24gdW5pY29kZVdvcmRzKHN0cmluZykge1xuICAgIHJldHVybiBzdHJpbmcubWF0Y2gocmVVbmljb2RlV29yZCkgfHwgW107XG4gIH1cblxuICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IHByaXN0aW5lIGBsb2Rhc2hgIGZ1bmN0aW9uIHVzaW5nIHRoZSBgY29udGV4dGAgb2JqZWN0LlxuICAgKlxuICAgKiBAc3RhdGljXG4gICAqIEBtZW1iZXJPZiBfXG4gICAqIEBzaW5jZSAxLjEuMFxuICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgKiBAcGFyYW0ge09iamVjdH0gW2NvbnRleHQ9cm9vdF0gVGhlIGNvbnRleHQgb2JqZWN0LlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYSBuZXcgYGxvZGFzaGAgZnVuY3Rpb24uXG4gICAqIEBleGFtcGxlXG4gICAqXG4gICAqIF8ubWl4aW4oeyAnZm9vJzogXy5jb25zdGFudCgnZm9vJykgfSk7XG4gICAqXG4gICAqIHZhciBsb2Rhc2ggPSBfLnJ1bkluQ29udGV4dCgpO1xuICAgKiBsb2Rhc2gubWl4aW4oeyAnYmFyJzogbG9kYXNoLmNvbnN0YW50KCdiYXInKSB9KTtcbiAgICpcbiAgICogXy5pc0Z1bmN0aW9uKF8uZm9vKTtcbiAgICogLy8gPT4gdHJ1ZVxuICAgKiBfLmlzRnVuY3Rpb24oXy5iYXIpO1xuICAgKiAvLyA9PiBmYWxzZVxuICAgKlxuICAgKiBsb2Rhc2guaXNGdW5jdGlvbihsb2Rhc2guZm9vKTtcbiAgICogLy8gPT4gZmFsc2VcbiAgICogbG9kYXNoLmlzRnVuY3Rpb24obG9kYXNoLmJhcik7XG4gICAqIC8vID0+IHRydWVcbiAgICpcbiAgICogLy8gQ3JlYXRlIGEgc3VwZWQtdXAgYGRlZmVyYCBpbiBOb2RlLmpzLlxuICAgKiB2YXIgZGVmZXIgPSBfLnJ1bkluQ29udGV4dCh7ICdzZXRUaW1lb3V0Jzogc2V0SW1tZWRpYXRlIH0pLmRlZmVyO1xuICAgKi9cbiAgdmFyIHJ1bkluQ29udGV4dCA9IChmdW5jdGlvbiBydW5JbkNvbnRleHQoY29udGV4dCkge1xuICAgIGNvbnRleHQgPSBjb250ZXh0ID09IG51bGwgPyByb290IDogXy5kZWZhdWx0cyhyb290Lk9iamVjdCgpLCBjb250ZXh0LCBfLnBpY2socm9vdCwgY29udGV4dFByb3BzKSk7XG5cbiAgICAvKiogQnVpbHQtaW4gY29uc3RydWN0b3IgcmVmZXJlbmNlcy4gKi9cbiAgICB2YXIgQXJyYXkgPSBjb250ZXh0LkFycmF5LFxuICAgICAgICBEYXRlID0gY29udGV4dC5EYXRlLFxuICAgICAgICBFcnJvciA9IGNvbnRleHQuRXJyb3IsXG4gICAgICAgIEZ1bmN0aW9uID0gY29udGV4dC5GdW5jdGlvbixcbiAgICAgICAgTWF0aCA9IGNvbnRleHQuTWF0aCxcbiAgICAgICAgT2JqZWN0ID0gY29udGV4dC5PYmplY3QsXG4gICAgICAgIFJlZ0V4cCA9IGNvbnRleHQuUmVnRXhwLFxuICAgICAgICBTdHJpbmcgPSBjb250ZXh0LlN0cmluZyxcbiAgICAgICAgVHlwZUVycm9yID0gY29udGV4dC5UeXBlRXJyb3I7XG5cbiAgICAvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG4gICAgdmFyIGFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGUsXG4gICAgICAgIGZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZSxcbiAgICAgICAgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4gICAgLyoqIFVzZWQgdG8gZGV0ZWN0IG92ZXJyZWFjaGluZyBjb3JlLWpzIHNoaW1zLiAqL1xuICAgIHZhciBjb3JlSnNEYXRhID0gY29udGV4dFsnX19jb3JlLWpzX3NoYXJlZF9fJ107XG5cbiAgICAvKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG4gICAgdmFyIGZ1bmNUb1N0cmluZyA9IGZ1bmNQcm90by50b1N0cmluZztcblxuICAgIC8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xuICAgIHZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4gICAgLyoqIFVzZWQgdG8gZ2VuZXJhdGUgdW5pcXVlIElEcy4gKi9cbiAgICB2YXIgaWRDb3VudGVyID0gMDtcblxuICAgIC8qKiBVc2VkIHRvIGRldGVjdCBtZXRob2RzIG1hc3F1ZXJhZGluZyBhcyBuYXRpdmUuICovXG4gICAgdmFyIG1hc2tTcmNLZXkgPSAoZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgdWlkID0gL1teLl0rJC8uZXhlYyhjb3JlSnNEYXRhICYmIGNvcmVKc0RhdGEua2V5cyAmJiBjb3JlSnNEYXRhLmtleXMuSUVfUFJPVE8gfHwgJycpO1xuICAgICAgcmV0dXJuIHVpZCA/ICgnU3ltYm9sKHNyYylfMS4nICsgdWlkKSA6ICcnO1xuICAgIH0oKSk7XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gICAgICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gICAgICogb2YgdmFsdWVzLlxuICAgICAqL1xuICAgIHZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4gICAgLyoqIFVzZWQgdG8gaW5mZXIgdGhlIGBPYmplY3RgIGNvbnN0cnVjdG9yLiAqL1xuICAgIHZhciBvYmplY3RDdG9yU3RyaW5nID0gZnVuY1RvU3RyaW5nLmNhbGwoT2JqZWN0KTtcblxuICAgIC8qKiBVc2VkIHRvIHJlc3RvcmUgdGhlIG9yaWdpbmFsIGBfYCByZWZlcmVuY2UgaW4gYF8ubm9Db25mbGljdGAuICovXG4gICAgdmFyIG9sZERhc2ggPSByb290Ll87XG5cbiAgICAvKiogVXNlZCB0byBkZXRlY3QgaWYgYSBtZXRob2QgaXMgbmF0aXZlLiAqL1xuICAgIHZhciByZUlzTmF0aXZlID0gUmVnRXhwKCdeJyArXG4gICAgICBmdW5jVG9TdHJpbmcuY2FsbChoYXNPd25Qcm9wZXJ0eSkucmVwbGFjZShyZVJlZ0V4cENoYXIsICdcXFxcJCYnKVxuICAgICAgLnJlcGxhY2UoL2hhc093blByb3BlcnR5fChmdW5jdGlvbikuKj8oPz1cXFxcXFwoKXwgZm9yIC4rPyg/PVxcXFxcXF0pL2csICckMS4qPycpICsgJyQnXG4gICAgKTtcblxuICAgIC8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xuICAgIHZhciBCdWZmZXIgPSBtb2R1bGVFeHBvcnRzID8gY29udGV4dC5CdWZmZXIgOiB1bmRlZmluZWQsXG4gICAgICAgIFN5bWJvbCA9IGNvbnRleHQuU3ltYm9sLFxuICAgICAgICBVaW50OEFycmF5ID0gY29udGV4dC5VaW50OEFycmF5LFxuICAgICAgICBhbGxvY1Vuc2FmZSA9IEJ1ZmZlciA/IEJ1ZmZlci5hbGxvY1Vuc2FmZSA6IHVuZGVmaW5lZCxcbiAgICAgICAgZ2V0UHJvdG90eXBlID0gb3ZlckFyZyhPYmplY3QuZ2V0UHJvdG90eXBlT2YsIE9iamVjdCksXG4gICAgICAgIG9iamVjdENyZWF0ZSA9IE9iamVjdC5jcmVhdGUsXG4gICAgICAgIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gb2JqZWN0UHJvdG8ucHJvcGVydHlJc0VudW1lcmFibGUsXG4gICAgICAgIHNwbGljZSA9IGFycmF5UHJvdG8uc3BsaWNlLFxuICAgICAgICBzcHJlYWRhYmxlU3ltYm9sID0gU3ltYm9sID8gU3ltYm9sLmlzQ29uY2F0U3ByZWFkYWJsZSA6IHVuZGVmaW5lZCxcbiAgICAgICAgc3ltSXRlcmF0b3IgPSBTeW1ib2wgPyBTeW1ib2wuaXRlcmF0b3IgOiB1bmRlZmluZWQsXG4gICAgICAgIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4gICAgdmFyIGRlZmluZVByb3BlcnR5ID0gKGZ1bmN0aW9uKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIGZ1bmMgPSBnZXROYXRpdmUoT2JqZWN0LCAnZGVmaW5lUHJvcGVydHknKTtcbiAgICAgICAgZnVuYyh7fSwgJycsIHt9KTtcbiAgICAgICAgcmV0dXJuIGZ1bmM7XG4gICAgICB9IGNhdGNoIChlKSB7fVxuICAgIH0oKSk7XG5cbiAgICAvKiogTW9ja2VkIGJ1aWx0LWlucy4gKi9cbiAgICB2YXIgY3R4Q2xlYXJUaW1lb3V0ID0gY29udGV4dC5jbGVhclRpbWVvdXQgIT09IHJvb3QuY2xlYXJUaW1lb3V0ICYmIGNvbnRleHQuY2xlYXJUaW1lb3V0LFxuICAgICAgICBjdHhOb3cgPSBEYXRlICYmIERhdGUubm93ICE9PSByb290LkRhdGUubm93ICYmIERhdGUubm93LFxuICAgICAgICBjdHhTZXRUaW1lb3V0ID0gY29udGV4dC5zZXRUaW1lb3V0ICE9PSByb290LnNldFRpbWVvdXQgJiYgY29udGV4dC5zZXRUaW1lb3V0O1xuXG4gICAgLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xuICAgIHZhciBuYXRpdmVDZWlsID0gTWF0aC5jZWlsLFxuICAgICAgICBuYXRpdmVGbG9vciA9IE1hdGguZmxvb3IsXG4gICAgICAgIG5hdGl2ZUdldFN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzLFxuICAgICAgICBuYXRpdmVJc0J1ZmZlciA9IEJ1ZmZlciA/IEJ1ZmZlci5pc0J1ZmZlciA6IHVuZGVmaW5lZCxcbiAgICAgICAgbmF0aXZlSXNGaW5pdGUgPSBjb250ZXh0LmlzRmluaXRlLFxuICAgICAgICBuYXRpdmVKb2luID0gYXJyYXlQcm90by5qb2luLFxuICAgICAgICBuYXRpdmVLZXlzID0gb3ZlckFyZyhPYmplY3Qua2V5cywgT2JqZWN0KSxcbiAgICAgICAgbmF0aXZlTWF4ID0gTWF0aC5tYXgsXG4gICAgICAgIG5hdGl2ZU1pbiA9IE1hdGgubWluLFxuICAgICAgICBuYXRpdmVOb3cgPSBEYXRlLm5vdyxcbiAgICAgICAgbmF0aXZlUGFyc2VJbnQgPSBjb250ZXh0LnBhcnNlSW50LFxuICAgICAgICBuYXRpdmVSYW5kb20gPSBNYXRoLnJhbmRvbSxcbiAgICAgICAgbmF0aXZlUmV2ZXJzZSA9IGFycmF5UHJvdG8ucmV2ZXJzZTtcblxuICAgIC8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbiAgICB2YXIgRGF0YVZpZXcgPSBnZXROYXRpdmUoY29udGV4dCwgJ0RhdGFWaWV3JyksXG4gICAgICAgIE1hcCA9IGdldE5hdGl2ZShjb250ZXh0LCAnTWFwJyksXG4gICAgICAgIFByb21pc2UgPSBnZXROYXRpdmUoY29udGV4dCwgJ1Byb21pc2UnKSxcbiAgICAgICAgU2V0ID0gZ2V0TmF0aXZlKGNvbnRleHQsICdTZXQnKSxcbiAgICAgICAgV2Vha01hcCA9IGdldE5hdGl2ZShjb250ZXh0LCAnV2Vha01hcCcpLFxuICAgICAgICBuYXRpdmVDcmVhdGUgPSBnZXROYXRpdmUoT2JqZWN0LCAnY3JlYXRlJyk7XG5cbiAgICAvKiogVXNlZCB0byBzdG9yZSBmdW5jdGlvbiBtZXRhZGF0YS4gKi9cbiAgICB2YXIgbWV0YU1hcCA9IFdlYWtNYXAgJiYgbmV3IFdlYWtNYXA7XG5cbiAgICAvKiogVXNlZCB0byBsb29rdXAgdW5taW5pZmllZCBmdW5jdGlvbiBuYW1lcy4gKi9cbiAgICB2YXIgcmVhbE5hbWVzID0ge307XG5cbiAgICAvKiogVXNlZCB0byBkZXRlY3QgbWFwcywgc2V0cywgYW5kIHdlYWttYXBzLiAqL1xuICAgIHZhciBkYXRhVmlld0N0b3JTdHJpbmcgPSB0b1NvdXJjZShEYXRhVmlldyksXG4gICAgICAgIG1hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShNYXApLFxuICAgICAgICBwcm9taXNlQ3RvclN0cmluZyA9IHRvU291cmNlKFByb21pc2UpLFxuICAgICAgICBzZXRDdG9yU3RyaW5nID0gdG9Tb3VyY2UoU2V0KSxcbiAgICAgICAgd2Vha01hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShXZWFrTWFwKTtcblxuICAgIC8qKiBVc2VkIHRvIGNvbnZlcnQgc3ltYm9scyB0byBwcmltaXRpdmVzIGFuZCBzdHJpbmdzLiAqL1xuICAgIHZhciBzeW1ib2xQcm90byA9IFN5bWJvbCA/IFN5bWJvbC5wcm90b3R5cGUgOiB1bmRlZmluZWQsXG4gICAgICAgIHN5bWJvbFZhbHVlT2YgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnZhbHVlT2YgOiB1bmRlZmluZWQsXG4gICAgICAgIHN5bWJvbFRvU3RyaW5nID0gc3ltYm9sUHJvdG8gPyBzeW1ib2xQcm90by50b1N0cmluZyA6IHVuZGVmaW5lZDtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgbG9kYXNoYCBvYmplY3Qgd2hpY2ggd3JhcHMgYHZhbHVlYCB0byBlbmFibGUgaW1wbGljaXQgbWV0aG9kXG4gICAgICogY2hhaW4gc2VxdWVuY2VzLiBNZXRob2RzIHRoYXQgb3BlcmF0ZSBvbiBhbmQgcmV0dXJuIGFycmF5cywgY29sbGVjdGlvbnMsXG4gICAgICogYW5kIGZ1bmN0aW9ucyBjYW4gYmUgY2hhaW5lZCB0b2dldGhlci4gTWV0aG9kcyB0aGF0IHJldHJpZXZlIGEgc2luZ2xlIHZhbHVlXG4gICAgICogb3IgbWF5IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZSB3aWxsIGF1dG9tYXRpY2FsbHkgZW5kIHRoZSBjaGFpbiBzZXF1ZW5jZVxuICAgICAqIGFuZCByZXR1cm4gdGhlIHVud3JhcHBlZCB2YWx1ZS4gT3RoZXJ3aXNlLCB0aGUgdmFsdWUgbXVzdCBiZSB1bndyYXBwZWRcbiAgICAgKiB3aXRoIGBfI3ZhbHVlYC5cbiAgICAgKlxuICAgICAqIEV4cGxpY2l0IGNoYWluIHNlcXVlbmNlcywgd2hpY2ggbXVzdCBiZSB1bndyYXBwZWQgd2l0aCBgXyN2YWx1ZWAsIG1heSBiZVxuICAgICAqIGVuYWJsZWQgdXNpbmcgYF8uY2hhaW5gLlxuICAgICAqXG4gICAgICogVGhlIGV4ZWN1dGlvbiBvZiBjaGFpbmVkIG1ldGhvZHMgaXMgbGF6eSwgdGhhdCBpcywgaXQncyBkZWZlcnJlZCB1bnRpbFxuICAgICAqIGBfI3ZhbHVlYCBpcyBpbXBsaWNpdGx5IG9yIGV4cGxpY2l0bHkgY2FsbGVkLlxuICAgICAqXG4gICAgICogTGF6eSBldmFsdWF0aW9uIGFsbG93cyBzZXZlcmFsIG1ldGhvZHMgdG8gc3VwcG9ydCBzaG9ydGN1dCBmdXNpb24uXG4gICAgICogU2hvcnRjdXQgZnVzaW9uIGlzIGFuIG9wdGltaXphdGlvbiB0byBtZXJnZSBpdGVyYXRlZSBjYWxsczsgdGhpcyBhdm9pZHNcbiAgICAgKiB0aGUgY3JlYXRpb24gb2YgaW50ZXJtZWRpYXRlIGFycmF5cyBhbmQgY2FuIGdyZWF0bHkgcmVkdWNlIHRoZSBudW1iZXIgb2ZcbiAgICAgKiBpdGVyYXRlZSBleGVjdXRpb25zLiBTZWN0aW9ucyBvZiBhIGNoYWluIHNlcXVlbmNlIHF1YWxpZnkgZm9yIHNob3J0Y3V0XG4gICAgICogZnVzaW9uIGlmIHRoZSBzZWN0aW9uIGlzIGFwcGxpZWQgdG8gYW4gYXJyYXkgYW5kIGl0ZXJhdGVlcyBhY2NlcHQgb25seVxuICAgICAqIG9uZSBhcmd1bWVudC4gVGhlIGhldXJpc3RpYyBmb3Igd2hldGhlciBhIHNlY3Rpb24gcXVhbGlmaWVzIGZvciBzaG9ydGN1dFxuICAgICAqIGZ1c2lvbiBpcyBzdWJqZWN0IHRvIGNoYW5nZS5cbiAgICAgKlxuICAgICAqIENoYWluaW5nIGlzIHN1cHBvcnRlZCBpbiBjdXN0b20gYnVpbGRzIGFzIGxvbmcgYXMgdGhlIGBfI3ZhbHVlYCBtZXRob2QgaXNcbiAgICAgKiBkaXJlY3RseSBvciBpbmRpcmVjdGx5IGluY2x1ZGVkIGluIHRoZSBidWlsZC5cbiAgICAgKlxuICAgICAqIEluIGFkZGl0aW9uIHRvIGxvZGFzaCBtZXRob2RzLCB3cmFwcGVycyBoYXZlIGBBcnJheWAgYW5kIGBTdHJpbmdgIG1ldGhvZHMuXG4gICAgICpcbiAgICAgKiBUaGUgd3JhcHBlciBgQXJyYXlgIG1ldGhvZHMgYXJlOlxuICAgICAqIGBjb25jYXRgLCBgam9pbmAsIGBwb3BgLCBgcHVzaGAsIGBzaGlmdGAsIGBzb3J0YCwgYHNwbGljZWAsIGFuZCBgdW5zaGlmdGBcbiAgICAgKlxuICAgICAqIFRoZSB3cmFwcGVyIGBTdHJpbmdgIG1ldGhvZHMgYXJlOlxuICAgICAqIGByZXBsYWNlYCBhbmQgYHNwbGl0YFxuICAgICAqXG4gICAgICogVGhlIHdyYXBwZXIgbWV0aG9kcyB0aGF0IHN1cHBvcnQgc2hvcnRjdXQgZnVzaW9uIGFyZTpcbiAgICAgKiBgYXRgLCBgY29tcGFjdGAsIGBkcm9wYCwgYGRyb3BSaWdodGAsIGBkcm9wV2hpbGVgLCBgZmlsdGVyYCwgYGZpbmRgLFxuICAgICAqIGBmaW5kTGFzdGAsIGBoZWFkYCwgYGluaXRpYWxgLCBgbGFzdGAsIGBtYXBgLCBgcmVqZWN0YCwgYHJldmVyc2VgLCBgc2xpY2VgLFxuICAgICAqIGB0YWlsYCwgYHRha2VgLCBgdGFrZVJpZ2h0YCwgYHRha2VSaWdodFdoaWxlYCwgYHRha2VXaGlsZWAsIGFuZCBgdG9BcnJheWBcbiAgICAgKlxuICAgICAqIFRoZSBjaGFpbmFibGUgd3JhcHBlciBtZXRob2RzIGFyZTpcbiAgICAgKiBgYWZ0ZXJgLCBgYXJ5YCwgYGFzc2lnbmAsIGBhc3NpZ25JbmAsIGBhc3NpZ25JbldpdGhgLCBgYXNzaWduV2l0aGAsIGBhdGAsXG4gICAgICogYGJlZm9yZWAsIGBiaW5kYCwgYGJpbmRBbGxgLCBgYmluZEtleWAsIGBjYXN0QXJyYXlgLCBgY2hhaW5gLCBgY2h1bmtgLFxuICAgICAqIGBjb21taXRgLCBgY29tcGFjdGAsIGBjb25jYXRgLCBgY29uZm9ybXNgLCBgY29uc3RhbnRgLCBgY291bnRCeWAsIGBjcmVhdGVgLFxuICAgICAqIGBjdXJyeWAsIGBkZWJvdW5jZWAsIGBkZWZhdWx0c2AsIGBkZWZhdWx0c0RlZXBgLCBgZGVmZXJgLCBgZGVsYXlgLFxuICAgICAqIGBkaWZmZXJlbmNlYCwgYGRpZmZlcmVuY2VCeWAsIGBkaWZmZXJlbmNlV2l0aGAsIGBkcm9wYCwgYGRyb3BSaWdodGAsXG4gICAgICogYGRyb3BSaWdodFdoaWxlYCwgYGRyb3BXaGlsZWAsIGBleHRlbmRgLCBgZXh0ZW5kV2l0aGAsIGBmaWxsYCwgYGZpbHRlcmAsXG4gICAgICogYGZsYXRNYXBgLCBgZmxhdE1hcERlZXBgLCBgZmxhdE1hcERlcHRoYCwgYGZsYXR0ZW5gLCBgZmxhdHRlbkRlZXBgLFxuICAgICAqIGBmbGF0dGVuRGVwdGhgLCBgZmxpcGAsIGBmbG93YCwgYGZsb3dSaWdodGAsIGBmcm9tUGFpcnNgLCBgZnVuY3Rpb25zYCxcbiAgICAgKiBgZnVuY3Rpb25zSW5gLCBgZ3JvdXBCeWAsIGBpbml0aWFsYCwgYGludGVyc2VjdGlvbmAsIGBpbnRlcnNlY3Rpb25CeWAsXG4gICAgICogYGludGVyc2VjdGlvbldpdGhgLCBgaW52ZXJ0YCwgYGludmVydEJ5YCwgYGludm9rZU1hcGAsIGBpdGVyYXRlZWAsIGBrZXlCeWAsXG4gICAgICogYGtleXNgLCBga2V5c0luYCwgYG1hcGAsIGBtYXBLZXlzYCwgYG1hcFZhbHVlc2AsIGBtYXRjaGVzYCwgYG1hdGNoZXNQcm9wZXJ0eWAsXG4gICAgICogYG1lbW9pemVgLCBgbWVyZ2VgLCBgbWVyZ2VXaXRoYCwgYG1ldGhvZGAsIGBtZXRob2RPZmAsIGBtaXhpbmAsIGBuZWdhdGVgLFxuICAgICAqIGBudGhBcmdgLCBgb21pdGAsIGBvbWl0QnlgLCBgb25jZWAsIGBvcmRlckJ5YCwgYG92ZXJgLCBgb3ZlckFyZ3NgLFxuICAgICAqIGBvdmVyRXZlcnlgLCBgb3ZlclNvbWVgLCBgcGFydGlhbGAsIGBwYXJ0aWFsUmlnaHRgLCBgcGFydGl0aW9uYCwgYHBpY2tgLFxuICAgICAqIGBwaWNrQnlgLCBgcGxhbnRgLCBgcHJvcGVydHlgLCBgcHJvcGVydHlPZmAsIGBwdWxsYCwgYHB1bGxBbGxgLCBgcHVsbEFsbEJ5YCxcbiAgICAgKiBgcHVsbEFsbFdpdGhgLCBgcHVsbEF0YCwgYHB1c2hgLCBgcmFuZ2VgLCBgcmFuZ2VSaWdodGAsIGByZWFyZ2AsIGByZWplY3RgLFxuICAgICAqIGByZW1vdmVgLCBgcmVzdGAsIGByZXZlcnNlYCwgYHNhbXBsZVNpemVgLCBgc2V0YCwgYHNldFdpdGhgLCBgc2h1ZmZsZWAsXG4gICAgICogYHNsaWNlYCwgYHNvcnRgLCBgc29ydEJ5YCwgYHNwbGljZWAsIGBzcHJlYWRgLCBgdGFpbGAsIGB0YWtlYCwgYHRha2VSaWdodGAsXG4gICAgICogYHRha2VSaWdodFdoaWxlYCwgYHRha2VXaGlsZWAsIGB0YXBgLCBgdGhyb3R0bGVgLCBgdGhydWAsIGB0b0FycmF5YCxcbiAgICAgKiBgdG9QYWlyc2AsIGB0b1BhaXJzSW5gLCBgdG9QYXRoYCwgYHRvUGxhaW5PYmplY3RgLCBgdHJhbnNmb3JtYCwgYHVuYXJ5YCxcbiAgICAgKiBgdW5pb25gLCBgdW5pb25CeWAsIGB1bmlvbldpdGhgLCBgdW5pcWAsIGB1bmlxQnlgLCBgdW5pcVdpdGhgLCBgdW5zZXRgLFxuICAgICAqIGB1bnNoaWZ0YCwgYHVuemlwYCwgYHVuemlwV2l0aGAsIGB1cGRhdGVgLCBgdXBkYXRlV2l0aGAsIGB2YWx1ZXNgLFxuICAgICAqIGB2YWx1ZXNJbmAsIGB3aXRob3V0YCwgYHdyYXBgLCBgeG9yYCwgYHhvckJ5YCwgYHhvcldpdGhgLCBgemlwYCxcbiAgICAgKiBgemlwT2JqZWN0YCwgYHppcE9iamVjdERlZXBgLCBhbmQgYHppcFdpdGhgXG4gICAgICpcbiAgICAgKiBUaGUgd3JhcHBlciBtZXRob2RzIHRoYXQgYXJlICoqbm90KiogY2hhaW5hYmxlIGJ5IGRlZmF1bHQgYXJlOlxuICAgICAqIGBhZGRgLCBgYXR0ZW1wdGAsIGBjYW1lbENhc2VgLCBgY2FwaXRhbGl6ZWAsIGBjZWlsYCwgYGNsYW1wYCwgYGNsb25lYCxcbiAgICAgKiBgY2xvbmVEZWVwYCwgYGNsb25lRGVlcFdpdGhgLCBgY2xvbmVXaXRoYCwgYGNvbmZvcm1zVG9gLCBgZGVidXJyYCxcbiAgICAgKiBgZGVmYXVsdFRvYCwgYGRpdmlkZWAsIGBlYWNoYCwgYGVhY2hSaWdodGAsIGBlbmRzV2l0aGAsIGBlcWAsIGBlc2NhcGVgLFxuICAgICAqIGBlc2NhcGVSZWdFeHBgLCBgZXZlcnlgLCBgZmluZGAsIGBmaW5kSW5kZXhgLCBgZmluZEtleWAsIGBmaW5kTGFzdGAsXG4gICAgICogYGZpbmRMYXN0SW5kZXhgLCBgZmluZExhc3RLZXlgLCBgZmlyc3RgLCBgZmxvb3JgLCBgZm9yRWFjaGAsIGBmb3JFYWNoUmlnaHRgLFxuICAgICAqIGBmb3JJbmAsIGBmb3JJblJpZ2h0YCwgYGZvck93bmAsIGBmb3JPd25SaWdodGAsIGBnZXRgLCBgZ3RgLCBgZ3RlYCwgYGhhc2AsXG4gICAgICogYGhhc0luYCwgYGhlYWRgLCBgaWRlbnRpdHlgLCBgaW5jbHVkZXNgLCBgaW5kZXhPZmAsIGBpblJhbmdlYCwgYGludm9rZWAsXG4gICAgICogYGlzQXJndW1lbnRzYCwgYGlzQXJyYXlgLCBgaXNBcnJheUJ1ZmZlcmAsIGBpc0FycmF5TGlrZWAsIGBpc0FycmF5TGlrZU9iamVjdGAsXG4gICAgICogYGlzQm9vbGVhbmAsIGBpc0J1ZmZlcmAsIGBpc0RhdGVgLCBgaXNFbGVtZW50YCwgYGlzRW1wdHlgLCBgaXNFcXVhbGAsXG4gICAgICogYGlzRXF1YWxXaXRoYCwgYGlzRXJyb3JgLCBgaXNGaW5pdGVgLCBgaXNGdW5jdGlvbmAsIGBpc0ludGVnZXJgLCBgaXNMZW5ndGhgLFxuICAgICAqIGBpc01hcGAsIGBpc01hdGNoYCwgYGlzTWF0Y2hXaXRoYCwgYGlzTmFOYCwgYGlzTmF0aXZlYCwgYGlzTmlsYCwgYGlzTnVsbGAsXG4gICAgICogYGlzTnVtYmVyYCwgYGlzT2JqZWN0YCwgYGlzT2JqZWN0TGlrZWAsIGBpc1BsYWluT2JqZWN0YCwgYGlzUmVnRXhwYCxcbiAgICAgKiBgaXNTYWZlSW50ZWdlcmAsIGBpc1NldGAsIGBpc1N0cmluZ2AsIGBpc1VuZGVmaW5lZGAsIGBpc1R5cGVkQXJyYXlgLFxuICAgICAqIGBpc1dlYWtNYXBgLCBgaXNXZWFrU2V0YCwgYGpvaW5gLCBga2ViYWJDYXNlYCwgYGxhc3RgLCBgbGFzdEluZGV4T2ZgLFxuICAgICAqIGBsb3dlckNhc2VgLCBgbG93ZXJGaXJzdGAsIGBsdGAsIGBsdGVgLCBgbWF4YCwgYG1heEJ5YCwgYG1lYW5gLCBgbWVhbkJ5YCxcbiAgICAgKiBgbWluYCwgYG1pbkJ5YCwgYG11bHRpcGx5YCwgYG5vQ29uZmxpY3RgLCBgbm9vcGAsIGBub3dgLCBgbnRoYCwgYHBhZGAsXG4gICAgICogYHBhZEVuZGAsIGBwYWRTdGFydGAsIGBwYXJzZUludGAsIGBwb3BgLCBgcmFuZG9tYCwgYHJlZHVjZWAsIGByZWR1Y2VSaWdodGAsXG4gICAgICogYHJlcGVhdGAsIGByZXN1bHRgLCBgcm91bmRgLCBgcnVuSW5Db250ZXh0YCwgYHNhbXBsZWAsIGBzaGlmdGAsIGBzaXplYCxcbiAgICAgKiBgc25ha2VDYXNlYCwgYHNvbWVgLCBgc29ydGVkSW5kZXhgLCBgc29ydGVkSW5kZXhCeWAsIGBzb3J0ZWRMYXN0SW5kZXhgLFxuICAgICAqIGBzb3J0ZWRMYXN0SW5kZXhCeWAsIGBzdGFydENhc2VgLCBgc3RhcnRzV2l0aGAsIGBzdHViQXJyYXlgLCBgc3R1YkZhbHNlYCxcbiAgICAgKiBgc3R1Yk9iamVjdGAsIGBzdHViU3RyaW5nYCwgYHN0dWJUcnVlYCwgYHN1YnRyYWN0YCwgYHN1bWAsIGBzdW1CeWAsXG4gICAgICogYHRlbXBsYXRlYCwgYHRpbWVzYCwgYHRvRmluaXRlYCwgYHRvSW50ZWdlcmAsIGB0b0pTT05gLCBgdG9MZW5ndGhgLFxuICAgICAqIGB0b0xvd2VyYCwgYHRvTnVtYmVyYCwgYHRvU2FmZUludGVnZXJgLCBgdG9TdHJpbmdgLCBgdG9VcHBlcmAsIGB0cmltYCxcbiAgICAgKiBgdHJpbUVuZGAsIGB0cmltU3RhcnRgLCBgdHJ1bmNhdGVgLCBgdW5lc2NhcGVgLCBgdW5pcXVlSWRgLCBgdXBwZXJDYXNlYCxcbiAgICAgKiBgdXBwZXJGaXJzdGAsIGB2YWx1ZWAsIGFuZCBgd29yZHNgXG4gICAgICpcbiAgICAgKiBAbmFtZSBfXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHdyYXAgaW4gYSBgbG9kYXNoYCBpbnN0YW5jZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgd3JhcHBlZCA9IF8oWzEsIDIsIDNdKTtcbiAgICAgKlxuICAgICAqIC8vIFJldHVybnMgYW4gdW53cmFwcGVkIHZhbHVlLlxuICAgICAqIHdyYXBwZWQucmVkdWNlKF8uYWRkKTtcbiAgICAgKiAvLyA9PiA2XG4gICAgICpcbiAgICAgKiAvLyBSZXR1cm5zIGEgd3JhcHBlZCB2YWx1ZS5cbiAgICAgKiB2YXIgc3F1YXJlcyA9IHdyYXBwZWQubWFwKHNxdWFyZSk7XG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXkoc3F1YXJlcyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheShzcXVhcmVzLnZhbHVlKCkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsb2Rhc2godmFsdWUpIHtcbiAgICAgIGlmIChpc09iamVjdExpa2UodmFsdWUpICYmICFpc0FycmF5KHZhbHVlKSAmJiAhKHZhbHVlIGluc3RhbmNlb2YgTGF6eVdyYXBwZXIpKSB7XG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIExvZGFzaFdyYXBwZXIpIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsICdfX3dyYXBwZWRfXycpKSB7XG4gICAgICAgICAgcmV0dXJuIHdyYXBwZXJDbG9uZSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXcgTG9kYXNoV3JhcHBlcih2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY3JlYXRlYCB3aXRob3V0IHN1cHBvcnQgZm9yIGFzc2lnbmluZ1xuICAgICAqIHByb3BlcnRpZXMgdG8gdGhlIGNyZWF0ZWQgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcHJvdG8gVGhlIG9iamVjdCB0byBpbmhlcml0IGZyb20uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZUNyZWF0ZSA9IChmdW5jdGlvbigpIHtcbiAgICAgIGZ1bmN0aW9uIG9iamVjdCgpIHt9XG4gICAgICByZXR1cm4gZnVuY3Rpb24ocHJvdG8pIHtcbiAgICAgICAgaWYgKCFpc09iamVjdChwcm90bykpIHtcbiAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9iamVjdENyZWF0ZSkge1xuICAgICAgICAgIHJldHVybiBvYmplY3RDcmVhdGUocHJvdG8pO1xuICAgICAgICB9XG4gICAgICAgIG9iamVjdC5wcm90b3R5cGUgPSBwcm90bztcbiAgICAgICAgdmFyIHJlc3VsdCA9IG5ldyBvYmplY3Q7XG4gICAgICAgIG9iamVjdC5wcm90b3R5cGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH0oKSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgZnVuY3Rpb24gd2hvc2UgcHJvdG90eXBlIGNoYWluIHNlcXVlbmNlIHdyYXBwZXJzIGluaGVyaXQgZnJvbS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUxvZGFzaCgpIHtcbiAgICAgIC8vIE5vIG9wZXJhdGlvbiBwZXJmb3JtZWQuXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgY29uc3RydWN0b3IgZm9yIGNyZWF0aW5nIGBsb2Rhc2hgIHdyYXBwZXIgb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtjaGFpbkFsbF0gRW5hYmxlIGV4cGxpY2l0IG1ldGhvZCBjaGFpbiBzZXF1ZW5jZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gTG9kYXNoV3JhcHBlcih2YWx1ZSwgY2hhaW5BbGwpIHtcbiAgICAgIHRoaXMuX193cmFwcGVkX18gPSB2YWx1ZTtcbiAgICAgIHRoaXMuX19hY3Rpb25zX18gPSBbXTtcbiAgICAgIHRoaXMuX19jaGFpbl9fID0gISFjaGFpbkFsbDtcbiAgICAgIHRoaXMuX19pbmRleF9fID0gMDtcbiAgICAgIHRoaXMuX192YWx1ZXNfXyA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBCeSBkZWZhdWx0LCB0aGUgdGVtcGxhdGUgZGVsaW1pdGVycyB1c2VkIGJ5IGxvZGFzaCBhcmUgbGlrZSB0aG9zZSBpblxuICAgICAqIGVtYmVkZGVkIFJ1YnkgKEVSQikgYXMgd2VsbCBhcyBFUzIwMTUgdGVtcGxhdGUgc3RyaW5ncy4gQ2hhbmdlIHRoZVxuICAgICAqIGZvbGxvd2luZyB0ZW1wbGF0ZSBzZXR0aW5ncyB0byB1c2UgYWx0ZXJuYXRpdmUgZGVsaW1pdGVycy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICovXG4gICAgbG9kYXNoLnRlbXBsYXRlU2V0dGluZ3MgPSB7XG5cbiAgICAgIC8qKlxuICAgICAgICogVXNlZCB0byBkZXRlY3QgYGRhdGFgIHByb3BlcnR5IHZhbHVlcyB0byBiZSBIVE1MLWVzY2FwZWQuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgICAgICogQHR5cGUge1JlZ0V4cH1cbiAgICAgICAqL1xuICAgICAgJ2VzY2FwZSc6IHJlRXNjYXBlLFxuXG4gICAgICAvKipcbiAgICAgICAqIFVzZWQgdG8gZGV0ZWN0IGNvZGUgdG8gYmUgZXZhbHVhdGVkLlxuICAgICAgICpcbiAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3NcbiAgICAgICAqIEB0eXBlIHtSZWdFeHB9XG4gICAgICAgKi9cbiAgICAgICdldmFsdWF0ZSc6IHJlRXZhbHVhdGUsXG5cbiAgICAgIC8qKlxuICAgICAgICogVXNlZCB0byBkZXRlY3QgYGRhdGFgIHByb3BlcnR5IHZhbHVlcyB0byBpbmplY3QuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgICAgICogQHR5cGUge1JlZ0V4cH1cbiAgICAgICAqL1xuICAgICAgJ2ludGVycG9sYXRlJzogcmVJbnRlcnBvbGF0ZSxcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIHRvIHJlZmVyZW5jZSB0aGUgZGF0YSBvYmplY3QgaW4gdGhlIHRlbXBsYXRlIHRleHQuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgICAqL1xuICAgICAgJ3ZhcmlhYmxlJzogJycsXG5cbiAgICAgIC8qKlxuICAgICAgICogVXNlZCB0byBpbXBvcnQgdmFyaWFibGVzIGludG8gdGhlIGNvbXBpbGVkIHRlbXBsYXRlLlxuICAgICAgICpcbiAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3NcbiAgICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICAgKi9cbiAgICAgICdpbXBvcnRzJzoge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIHJlZmVyZW5jZSB0byB0aGUgYGxvZGFzaGAgZnVuY3Rpb24uXG4gICAgICAgICAqXG4gICAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3MuaW1wb3J0c1xuICAgICAgICAgKiBAdHlwZSB7RnVuY3Rpb259XG4gICAgICAgICAqL1xuICAgICAgICAnXyc6IGxvZGFzaFxuICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBFbnN1cmUgd3JhcHBlcnMgYXJlIGluc3RhbmNlcyBvZiBgYmFzZUxvZGFzaGAuXG4gICAgbG9kYXNoLnByb3RvdHlwZSA9IGJhc2VMb2Rhc2gucHJvdG90eXBlO1xuICAgIGxvZGFzaC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBsb2Rhc2g7XG5cbiAgICBMb2Rhc2hXcmFwcGVyLnByb3RvdHlwZSA9IGJhc2VDcmVhdGUoYmFzZUxvZGFzaC5wcm90b3R5cGUpO1xuICAgIExvZGFzaFdyYXBwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTG9kYXNoV3JhcHBlcjtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBsYXp5IHdyYXBwZXIgb2JqZWN0IHdoaWNoIHdyYXBzIGB2YWx1ZWAgdG8gZW5hYmxlIGxhenkgZXZhbHVhdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gd3JhcC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBMYXp5V3JhcHBlcih2YWx1ZSkge1xuICAgICAgdGhpcy5fX3dyYXBwZWRfXyA9IHZhbHVlO1xuICAgICAgdGhpcy5fX2FjdGlvbnNfXyA9IFtdO1xuICAgICAgdGhpcy5fX2Rpcl9fID0gMTtcbiAgICAgIHRoaXMuX19maWx0ZXJlZF9fID0gZmFsc2U7XG4gICAgICB0aGlzLl9faXRlcmF0ZWVzX18gPSBbXTtcbiAgICAgIHRoaXMuX190YWtlQ291bnRfXyA9IE1BWF9BUlJBWV9MRU5HVEg7XG4gICAgICB0aGlzLl9fdmlld3NfXyA9IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiB0aGUgbGF6eSB3cmFwcGVyIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgY2xvbmVcbiAgICAgKiBAbWVtYmVyT2YgTGF6eVdyYXBwZXJcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgYExhenlXcmFwcGVyYCBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGF6eUNsb25lKCkge1xuICAgICAgdmFyIHJlc3VsdCA9IG5ldyBMYXp5V3JhcHBlcih0aGlzLl9fd3JhcHBlZF9fKTtcbiAgICAgIHJlc3VsdC5fX2FjdGlvbnNfXyA9IGNvcHlBcnJheSh0aGlzLl9fYWN0aW9uc19fKTtcbiAgICAgIHJlc3VsdC5fX2Rpcl9fID0gdGhpcy5fX2Rpcl9fO1xuICAgICAgcmVzdWx0Ll9fZmlsdGVyZWRfXyA9IHRoaXMuX19maWx0ZXJlZF9fO1xuICAgICAgcmVzdWx0Ll9faXRlcmF0ZWVzX18gPSBjb3B5QXJyYXkodGhpcy5fX2l0ZXJhdGVlc19fKTtcbiAgICAgIHJlc3VsdC5fX3Rha2VDb3VudF9fID0gdGhpcy5fX3Rha2VDb3VudF9fO1xuICAgICAgcmVzdWx0Ll9fdmlld3NfXyA9IGNvcHlBcnJheSh0aGlzLl9fdmlld3NfXyk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldmVyc2VzIHRoZSBkaXJlY3Rpb24gb2YgbGF6eSBpdGVyYXRpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHJldmVyc2VcbiAgICAgKiBAbWVtYmVyT2YgTGF6eVdyYXBwZXJcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgcmV2ZXJzZWQgYExhenlXcmFwcGVyYCBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGF6eVJldmVyc2UoKSB7XG4gICAgICBpZiAodGhpcy5fX2ZpbHRlcmVkX18pIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IG5ldyBMYXp5V3JhcHBlcih0aGlzKTtcbiAgICAgICAgcmVzdWx0Ll9fZGlyX18gPSAtMTtcbiAgICAgICAgcmVzdWx0Ll9fZmlsdGVyZWRfXyA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQgPSB0aGlzLmNsb25lKCk7XG4gICAgICAgIHJlc3VsdC5fX2Rpcl9fICo9IC0xO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFeHRyYWN0cyB0aGUgdW53cmFwcGVkIHZhbHVlIGZyb20gaXRzIGxhenkgd3JhcHBlci5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgdmFsdWVcbiAgICAgKiBAbWVtYmVyT2YgTGF6eVdyYXBwZXJcbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgdW53cmFwcGVkIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxhenlWYWx1ZSgpIHtcbiAgICAgIHZhciBhcnJheSA9IHRoaXMuX193cmFwcGVkX18udmFsdWUoKSxcbiAgICAgICAgICBkaXIgPSB0aGlzLl9fZGlyX18sXG4gICAgICAgICAgaXNBcnIgPSBpc0FycmF5KGFycmF5KSxcbiAgICAgICAgICBpc1JpZ2h0ID0gZGlyIDwgMCxcbiAgICAgICAgICBhcnJMZW5ndGggPSBpc0FyciA/IGFycmF5Lmxlbmd0aCA6IDAsXG4gICAgICAgICAgdmlldyA9IGdldFZpZXcoMCwgYXJyTGVuZ3RoLCB0aGlzLl9fdmlld3NfXyksXG4gICAgICAgICAgc3RhcnQgPSB2aWV3LnN0YXJ0LFxuICAgICAgICAgIGVuZCA9IHZpZXcuZW5kLFxuICAgICAgICAgIGxlbmd0aCA9IGVuZCAtIHN0YXJ0LFxuICAgICAgICAgIGluZGV4ID0gaXNSaWdodCA/IGVuZCA6IChzdGFydCAtIDEpLFxuICAgICAgICAgIGl0ZXJhdGVlcyA9IHRoaXMuX19pdGVyYXRlZXNfXyxcbiAgICAgICAgICBpdGVyTGVuZ3RoID0gaXRlcmF0ZWVzLmxlbmd0aCxcbiAgICAgICAgICByZXNJbmRleCA9IDAsXG4gICAgICAgICAgdGFrZUNvdW50ID0gbmF0aXZlTWluKGxlbmd0aCwgdGhpcy5fX3Rha2VDb3VudF9fKTtcblxuICAgICAgaWYgKCFpc0FyciB8fCAoIWlzUmlnaHQgJiYgYXJyTGVuZ3RoID09IGxlbmd0aCAmJiB0YWtlQ291bnQgPT0gbGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gYmFzZVdyYXBwZXJWYWx1ZShhcnJheSwgdGhpcy5fX2FjdGlvbnNfXyk7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG5cbiAgICAgIG91dGVyOlxuICAgICAgd2hpbGUgKGxlbmd0aC0tICYmIHJlc0luZGV4IDwgdGFrZUNvdW50KSB7XG4gICAgICAgIGluZGV4ICs9IGRpcjtcblxuICAgICAgICB2YXIgaXRlckluZGV4ID0gLTEsXG4gICAgICAgICAgICB2YWx1ZSA9IGFycmF5W2luZGV4XTtcblxuICAgICAgICB3aGlsZSAoKytpdGVySW5kZXggPCBpdGVyTGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIGRhdGEgPSBpdGVyYXRlZXNbaXRlckluZGV4XSxcbiAgICAgICAgICAgICAgaXRlcmF0ZWUgPSBkYXRhLml0ZXJhdGVlLFxuICAgICAgICAgICAgICB0eXBlID0gZGF0YS50eXBlLFxuICAgICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlKHZhbHVlKTtcblxuICAgICAgICAgIGlmICh0eXBlID09IExBWllfTUFQX0ZMQUcpIHtcbiAgICAgICAgICAgIHZhbHVlID0gY29tcHV0ZWQ7XG4gICAgICAgICAgfSBlbHNlIGlmICghY29tcHV0ZWQpIHtcbiAgICAgICAgICAgIGlmICh0eXBlID09IExBWllfRklMVEVSX0ZMQUcpIHtcbiAgICAgICAgICAgICAgY29udGludWUgb3V0ZXI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBicmVhayBvdXRlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gdmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8vIEVuc3VyZSBgTGF6eVdyYXBwZXJgIGlzIGFuIGluc3RhbmNlIG9mIGBiYXNlTG9kYXNoYC5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUgPSBiYXNlQ3JlYXRlKGJhc2VMb2Rhc2gucHJvdG90eXBlKTtcbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBMYXp5V3JhcHBlcjtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBoYXNoIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gSGFzaChlbnRyaWVzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgICAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGhhc2guXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGNsZWFyXG4gICAgICogQG1lbWJlck9mIEhhc2hcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNoQ2xlYXIoKSB7XG4gICAgICB0aGlzLl9fZGF0YV9fID0gbmF0aXZlQ3JlYXRlID8gbmF0aXZlQ3JlYXRlKG51bGwpIDoge307XG4gICAgICB0aGlzLnNpemUgPSAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBoYXNoLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBkZWxldGVcbiAgICAgKiBAbWVtYmVyT2YgSGFzaFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBoYXNoIFRoZSBoYXNoIHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzaERlbGV0ZShrZXkpIHtcbiAgICAgIHZhciByZXN1bHQgPSB0aGlzLmhhcyhrZXkpICYmIGRlbGV0ZSB0aGlzLl9fZGF0YV9fW2tleV07XG4gICAgICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGhhc2ggdmFsdWUgZm9yIGBrZXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBnZXRcbiAgICAgKiBAbWVtYmVyT2YgSGFzaFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNoR2V0KGtleSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICAgICAgaWYgKG5hdGl2ZUNyZWF0ZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gZGF0YVtrZXldO1xuICAgICAgICByZXR1cm4gcmVzdWx0ID09PSBIQVNIX1VOREVGSU5FRCA/IHVuZGVmaW5lZCA6IHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGRhdGEsIGtleSkgPyBkYXRhW2tleV0gOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGEgaGFzaCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBoYXNcbiAgICAgKiBAbWVtYmVyT2YgSGFzaFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNoSGFzKGtleSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICAgICAgcmV0dXJuIG5hdGl2ZUNyZWF0ZSA/IChkYXRhW2tleV0gIT09IHVuZGVmaW5lZCkgOiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGRhdGEsIGtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgaGFzaCBga2V5YCB0byBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBzZXRcbiAgICAgKiBAbWVtYmVyT2YgSGFzaFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBoYXNoIGluc3RhbmNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc2hTZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICAgICAgdGhpcy5zaXplICs9IHRoaXMuaGFzKGtleSkgPyAwIDogMTtcbiAgICAgIGRhdGFba2V5XSA9IChuYXRpdmVDcmVhdGUgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCkgPyBIQVNIX1VOREVGSU5FRCA6IHZhbHVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYEhhc2hgLlxuICAgIEhhc2gucHJvdG90eXBlLmNsZWFyID0gaGFzaENsZWFyO1xuICAgIEhhc2gucHJvdG90eXBlWydkZWxldGUnXSA9IGhhc2hEZWxldGU7XG4gICAgSGFzaC5wcm90b3R5cGUuZ2V0ID0gaGFzaEdldDtcbiAgICBIYXNoLnByb3RvdHlwZS5oYXMgPSBoYXNoSGFzO1xuICAgIEhhc2gucHJvdG90eXBlLnNldCA9IGhhc2hTZXQ7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGxpc3QgY2FjaGUgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBMaXN0Q2FjaGUoZW50cmllcykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICAgICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBsaXN0IGNhY2hlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBjbGVhclxuICAgICAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsaXN0Q2FjaGVDbGVhcigpIHtcbiAgICAgIHRoaXMuX19kYXRhX18gPSBbXTtcbiAgICAgIHRoaXMuc2l6ZSA9IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGRlbGV0ZVxuICAgICAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGlzdENhY2hlRGVsZXRlKGtleSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIGxhc3RJbmRleCA9IGRhdGEubGVuZ3RoIC0gMTtcbiAgICAgIGlmIChpbmRleCA9PSBsYXN0SW5kZXgpIHtcbiAgICAgICAgZGF0YS5wb3AoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNwbGljZS5jYWxsKGRhdGEsIGluZGV4LCAxKTtcbiAgICAgIH1cbiAgICAgIC0tdGhpcy5zaXplO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGdldFxuICAgICAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGlzdENhY2hlR2V0KGtleSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgICAgIHJldHVybiBpbmRleCA8IDAgPyB1bmRlZmluZWQgOiBkYXRhW2luZGV4XVsxXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGhhc1xuICAgICAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGlzdENhY2hlSGFzKGtleSkge1xuICAgICAgcmV0dXJuIGFzc29jSW5kZXhPZih0aGlzLl9fZGF0YV9fLCBrZXkpID4gLTE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgbGlzdCBjYWNoZSBga2V5YCB0byBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBzZXRcbiAgICAgKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGxpc3QgY2FjaGUgaW5zdGFuY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGlzdENhY2hlU2V0KGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gICAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgICsrdGhpcy5zaXplO1xuICAgICAgICBkYXRhLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRhdGFbaW5kZXhdWzFdID0gdmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgTGlzdENhY2hlYC5cbiAgICBMaXN0Q2FjaGUucHJvdG90eXBlLmNsZWFyID0gbGlzdENhY2hlQ2xlYXI7XG4gICAgTGlzdENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBsaXN0Q2FjaGVEZWxldGU7XG4gICAgTGlzdENhY2hlLnByb3RvdHlwZS5nZXQgPSBsaXN0Q2FjaGVHZXQ7XG4gICAgTGlzdENhY2hlLnByb3RvdHlwZS5oYXMgPSBsaXN0Q2FjaGVIYXM7XG4gICAgTGlzdENhY2hlLnByb3RvdHlwZS5zZXQgPSBsaXN0Q2FjaGVTZXQ7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbWFwIGNhY2hlIG9iamVjdCB0byBzdG9yZSBrZXktdmFsdWUgcGFpcnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIE1hcENhY2hlKGVudHJpZXMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbWFwLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBjbGVhclxuICAgICAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcENhY2hlQ2xlYXIoKSB7XG4gICAgICB0aGlzLnNpemUgPSAwO1xuICAgICAgdGhpcy5fX2RhdGFfXyA9IHtcbiAgICAgICAgJ2hhc2gnOiBuZXcgSGFzaCxcbiAgICAgICAgJ21hcCc6IG5ldyAoTWFwIHx8IExpc3RDYWNoZSksXG4gICAgICAgICdzdHJpbmcnOiBuZXcgSGFzaFxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbWFwLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBkZWxldGVcbiAgICAgKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwQ2FjaGVEZWxldGUoa2V5KSB7XG4gICAgICB2YXIgcmVzdWx0ID0gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpWydkZWxldGUnXShrZXkpO1xuICAgICAgdGhpcy5zaXplIC09IHJlc3VsdCA/IDEgOiAwO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBtYXAgdmFsdWUgZm9yIGBrZXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBnZXRcbiAgICAgKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwQ2FjaGVHZXQoa2V5KSB7XG4gICAgICByZXR1cm4gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLmdldChrZXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBhIG1hcCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBoYXNcbiAgICAgKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwQ2FjaGVIYXMoa2V5KSB7XG4gICAgICByZXR1cm4gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLmhhcyhrZXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIG1hcCBga2V5YCB0byBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBzZXRcbiAgICAgKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbWFwIGNhY2hlIGluc3RhbmNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcENhY2hlU2V0KGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBkYXRhID0gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLFxuICAgICAgICAgIHNpemUgPSBkYXRhLnNpemU7XG5cbiAgICAgIGRhdGEuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgdGhpcy5zaXplICs9IGRhdGEuc2l6ZSA9PSBzaXplID8gMCA6IDE7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgTWFwQ2FjaGVgLlxuICAgIE1hcENhY2hlLnByb3RvdHlwZS5jbGVhciA9IG1hcENhY2hlQ2xlYXI7XG4gICAgTWFwQ2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IG1hcENhY2hlRGVsZXRlO1xuICAgIE1hcENhY2hlLnByb3RvdHlwZS5nZXQgPSBtYXBDYWNoZUdldDtcbiAgICBNYXBDYWNoZS5wcm90b3R5cGUuaGFzID0gbWFwQ2FjaGVIYXM7XG4gICAgTWFwQ2FjaGUucHJvdG90eXBlLnNldCA9IG1hcENhY2hlU2V0O1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IGNhY2hlIG9iamVjdCB0byBzdG9yZSB1bmlxdWUgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGNhY2hlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIFNldENhY2hlKHZhbHVlcykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gdmFsdWVzID09IG51bGwgPyAwIDogdmFsdWVzLmxlbmd0aDtcblxuICAgICAgdGhpcy5fX2RhdGFfXyA9IG5ldyBNYXBDYWNoZTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuYWRkKHZhbHVlc1tpbmRleF0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMgYHZhbHVlYCB0byB0aGUgYXJyYXkgY2FjaGUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGFkZFxuICAgICAqIEBtZW1iZXJPZiBTZXRDYWNoZVxuICAgICAqIEBhbGlhcyBwdXNoXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2FjaGUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2FjaGUgaW5zdGFuY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0Q2FjaGVBZGQodmFsdWUpIHtcbiAgICAgIHRoaXMuX19kYXRhX18uc2V0KHZhbHVlLCBIQVNIX1VOREVGSU5FRCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBpbiB0aGUgYXJyYXkgY2FjaGUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGhhc1xuICAgICAqIEBtZW1iZXJPZiBTZXRDYWNoZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldENhY2hlSGFzKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5fX2RhdGFfXy5oYXModmFsdWUpO1xuICAgIH1cblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBTZXRDYWNoZWAuXG4gICAgU2V0Q2FjaGUucHJvdG90eXBlLmFkZCA9IFNldENhY2hlLnByb3RvdHlwZS5wdXNoID0gc2V0Q2FjaGVBZGQ7XG4gICAgU2V0Q2FjaGUucHJvdG90eXBlLmhhcyA9IHNldENhY2hlSGFzO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHN0YWNrIGNhY2hlIG9iamVjdCB0byBzdG9yZSBrZXktdmFsdWUgcGFpcnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIFN0YWNrKGVudHJpZXMpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBMaXN0Q2FjaGUoZW50cmllcyk7XG4gICAgICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgc3RhY2suXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGNsZWFyXG4gICAgICogQG1lbWJlck9mIFN0YWNrXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhY2tDbGVhcigpIHtcbiAgICAgIHRoaXMuX19kYXRhX18gPSBuZXcgTGlzdENhY2hlO1xuICAgICAgdGhpcy5zaXplID0gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgc3RhY2suXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGRlbGV0ZVxuICAgICAqIEBtZW1iZXJPZiBTdGFja1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGFja0RlbGV0ZShrZXkpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgICAgICByZXN1bHQgPSBkYXRhWydkZWxldGUnXShrZXkpO1xuXG4gICAgICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHN0YWNrIHZhbHVlIGZvciBga2V5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZ2V0XG4gICAgICogQG1lbWJlck9mIFN0YWNrXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0YWNrR2V0KGtleSkge1xuICAgICAgcmV0dXJuIHRoaXMuX19kYXRhX18uZ2V0KGtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGEgc3RhY2sgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgaGFzXG4gICAgICogQG1lbWJlck9mIFN0YWNrXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0YWNrSGFzKGtleSkge1xuICAgICAgcmV0dXJuIHRoaXMuX19kYXRhX18uaGFzKGtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgc3RhY2sgYGtleWAgdG8gYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgc2V0XG4gICAgICogQG1lbWJlck9mIFN0YWNrXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIHN0YWNrIGNhY2hlIGluc3RhbmNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0YWNrU2V0KGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgICAgIGlmIChkYXRhIGluc3RhbmNlb2YgTGlzdENhY2hlKSB7XG4gICAgICAgIHZhciBwYWlycyA9IGRhdGEuX19kYXRhX187XG4gICAgICAgIGlmICghTWFwIHx8IChwYWlycy5sZW5ndGggPCBMQVJHRV9BUlJBWV9TSVpFIC0gMSkpIHtcbiAgICAgICAgICBwYWlycy5wdXNoKFtrZXksIHZhbHVlXSk7XG4gICAgICAgICAgdGhpcy5zaXplID0gKytkYXRhLnNpemU7XG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgZGF0YSA9IHRoaXMuX19kYXRhX18gPSBuZXcgTWFwQ2FjaGUocGFpcnMpO1xuICAgICAgfVxuICAgICAgZGF0YS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgU3RhY2tgLlxuICAgIFN0YWNrLnByb3RvdHlwZS5jbGVhciA9IHN0YWNrQ2xlYXI7XG4gICAgU3RhY2sucHJvdG90eXBlWydkZWxldGUnXSA9IHN0YWNrRGVsZXRlO1xuICAgIFN0YWNrLnByb3RvdHlwZS5nZXQgPSBzdGFja0dldDtcbiAgICBTdGFjay5wcm90b3R5cGUuaGFzID0gc3RhY2tIYXM7XG4gICAgU3RhY2sucHJvdG90eXBlLnNldCA9IHN0YWNrU2V0O1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiB0aGUgYXJyYXktbGlrZSBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGluaGVyaXRlZCBTcGVjaWZ5IHJldHVybmluZyBpbmhlcml0ZWQgcHJvcGVydHkgbmFtZXMuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhcnJheUxpa2VLZXlzKHZhbHVlLCBpbmhlcml0ZWQpIHtcbiAgICAgIHZhciBpc0FyciA9IGlzQXJyYXkodmFsdWUpLFxuICAgICAgICAgIGlzQXJnID0gIWlzQXJyICYmIGlzQXJndW1lbnRzKHZhbHVlKSxcbiAgICAgICAgICBpc0J1ZmYgPSAhaXNBcnIgJiYgIWlzQXJnICYmIGlzQnVmZmVyKHZhbHVlKSxcbiAgICAgICAgICBpc1R5cGUgPSAhaXNBcnIgJiYgIWlzQXJnICYmICFpc0J1ZmYgJiYgaXNUeXBlZEFycmF5KHZhbHVlKSxcbiAgICAgICAgICBza2lwSW5kZXhlcyA9IGlzQXJyIHx8IGlzQXJnIHx8IGlzQnVmZiB8fCBpc1R5cGUsXG4gICAgICAgICAgcmVzdWx0ID0gc2tpcEluZGV4ZXMgPyBiYXNlVGltZXModmFsdWUubGVuZ3RoLCBTdHJpbmcpIDogW10sXG4gICAgICAgICAgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aDtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgICAgIGlmICgoaW5oZXJpdGVkIHx8IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIGtleSkpICYmXG4gICAgICAgICAgICAhKHNraXBJbmRleGVzICYmIChcbiAgICAgICAgICAgICAgIC8vIFNhZmFyaSA5IGhhcyBlbnVtZXJhYmxlIGBhcmd1bWVudHMubGVuZ3RoYCBpbiBzdHJpY3QgbW9kZS5cbiAgICAgICAgICAgICAgIGtleSA9PSAnbGVuZ3RoJyB8fFxuICAgICAgICAgICAgICAgLy8gTm9kZS5qcyAwLjEwIGhhcyBlbnVtZXJhYmxlIG5vbi1pbmRleCBwcm9wZXJ0aWVzIG9uIGJ1ZmZlcnMuXG4gICAgICAgICAgICAgICAoaXNCdWZmICYmIChrZXkgPT0gJ29mZnNldCcgfHwga2V5ID09ICdwYXJlbnQnKSkgfHxcbiAgICAgICAgICAgICAgIC8vIFBoYW50b21KUyAyIGhhcyBlbnVtZXJhYmxlIG5vbi1pbmRleCBwcm9wZXJ0aWVzIG9uIHR5cGVkIGFycmF5cy5cbiAgICAgICAgICAgICAgIChpc1R5cGUgJiYgKGtleSA9PSAnYnVmZmVyJyB8fCBrZXkgPT0gJ2J5dGVMZW5ndGgnIHx8IGtleSA9PSAnYnl0ZU9mZnNldCcpKSB8fFxuICAgICAgICAgICAgICAgLy8gU2tpcCBpbmRleCBwcm9wZXJ0aWVzLlxuICAgICAgICAgICAgICAgaXNJbmRleChrZXksIGxlbmd0aClcbiAgICAgICAgICAgICkpKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc2FtcGxlYCBmb3IgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2FtcGxlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByYW5kb20gZWxlbWVudC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhcnJheVNhbXBsZShhcnJheSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgICAgIHJldHVybiBsZW5ndGggPyBhcnJheVtiYXNlUmFuZG9tKDAsIGxlbmd0aCAtIDEpXSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc2FtcGxlU2l6ZWAgZm9yIGFycmF5cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNhbXBsZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHNhbXBsZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmRvbSBlbGVtZW50cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhcnJheVNhbXBsZVNpemUoYXJyYXksIG4pIHtcbiAgICAgIHJldHVybiBzaHVmZmxlU2VsZihjb3B5QXJyYXkoYXJyYXkpLCBiYXNlQ2xhbXAobiwgMCwgYXJyYXkubGVuZ3RoKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnNodWZmbGVgIGZvciBhcnJheXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzaHVmZmxlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IHNodWZmbGVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFycmF5U2h1ZmZsZShhcnJheSkge1xuICAgICAgcmV0dXJuIHNodWZmbGVTZWxmKGNvcHlBcnJheShhcnJheSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgYXNzaWduVmFsdWVgIGV4Y2VwdCB0aGF0IGl0IGRvZXNuJ3QgYXNzaWduXG4gICAgICogYHVuZGVmaW5lZGAgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhc3NpZ25NZXJnZVZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKCh2YWx1ZSAhPT0gdW5kZWZpbmVkICYmICFlcShvYmplY3Rba2V5XSwgdmFsdWUpKSB8fFxuICAgICAgICAgICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpKSB7XG4gICAgICAgIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFzc2lnbnMgYHZhbHVlYCB0byBga2V5YCBvZiBgb2JqZWN0YCBpZiB0aGUgZXhpc3RpbmcgdmFsdWUgaXMgbm90IGVxdWl2YWxlbnRcbiAgICAgKiB1c2luZyBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gICAgICB2YXIgb2JqVmFsdWUgPSBvYmplY3Rba2V5XTtcbiAgICAgIGlmICghKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmIGVxKG9ialZhbHVlLCB2YWx1ZSkpIHx8XG4gICAgICAgICAgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkpIHtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgaW5kZXggYXQgd2hpY2ggdGhlIGBrZXlgIGlzIGZvdW5kIGluIGBhcnJheWAgb2Yga2V5LXZhbHVlIHBhaXJzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IGtleSBUaGUga2V5IHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhc3NvY0luZGV4T2YoYXJyYXksIGtleSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICBpZiAoZXEoYXJyYXlbbGVuZ3RoXVswXSwga2V5KSkge1xuICAgICAgICAgIHJldHVybiBsZW5ndGg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZ2dyZWdhdGVzIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYCBvbiBgYWNjdW11bGF0b3JgIHdpdGgga2V5cyB0cmFuc2Zvcm1lZFxuICAgICAqIGJ5IGBpdGVyYXRlZWAgYW5kIHZhbHVlcyBzZXQgYnkgYHNldHRlcmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXR0ZXIgVGhlIGZ1bmN0aW9uIHRvIHNldCBgYWNjdW11bGF0b3JgIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgaXRlcmF0ZWUgdG8gdHJhbnNmb3JtIGtleXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGFjY3VtdWxhdG9yIFRoZSBpbml0aWFsIGFnZ3JlZ2F0ZWQgb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgYWNjdW11bGF0b3JgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VBZ2dyZWdhdG9yKGNvbGxlY3Rpb24sIHNldHRlciwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yKSB7XG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIHNldHRlcihhY2N1bXVsYXRvciwgdmFsdWUsIGl0ZXJhdGVlKHZhbHVlKSwgY29sbGVjdGlvbik7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5hc3NpZ25gIHdpdGhvdXQgc3VwcG9ydCBmb3IgbXVsdGlwbGUgc291cmNlc1xuICAgICAqIG9yIGBjdXN0b21pemVyYCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUFzc2lnbihvYmplY3QsIHNvdXJjZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAmJiBjb3B5T2JqZWN0KHNvdXJjZSwga2V5cyhzb3VyY2UpLCBvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmFzc2lnbkluYCB3aXRob3V0IHN1cHBvcnQgZm9yIG11bHRpcGxlIHNvdXJjZXNcbiAgICAgKiBvciBgY3VzdG9taXplcmAgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VBc3NpZ25JbihvYmplY3QsIHNvdXJjZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAmJiBjb3B5T2JqZWN0KHNvdXJjZSwga2V5c0luKHNvdXJjZSksIG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGFzc2lnblZhbHVlYCBhbmQgYGFzc2lnbk1lcmdlVmFsdWVgIHdpdGhvdXRcbiAgICAgKiB2YWx1ZSBjaGVja3MuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYXNzaWduLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgICAgIGlmIChrZXkgPT0gJ19fcHJvdG9fXycgJiYgZGVmaW5lUHJvcGVydHkpIHtcbiAgICAgICAgZGVmaW5lUHJvcGVydHkob2JqZWN0LCBrZXksIHtcbiAgICAgICAgICAnY29uZmlndXJhYmxlJzogdHJ1ZSxcbiAgICAgICAgICAnZW51bWVyYWJsZSc6IHRydWUsXG4gICAgICAgICAgJ3ZhbHVlJzogdmFsdWUsXG4gICAgICAgICAgJ3dyaXRhYmxlJzogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9iamVjdFtrZXldID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uYXRgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaW5kaXZpZHVhbCBwYXRocy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBwYXRocyBUaGUgcHJvcGVydHkgcGF0aHMgdG8gcGljay5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHBpY2tlZCBlbGVtZW50cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQXQob2JqZWN0LCBwYXRocykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcGF0aHMubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCksXG4gICAgICAgICAgc2tpcCA9IG9iamVjdCA9PSBudWxsO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICByZXN1bHRbaW5kZXhdID0gc2tpcCA/IHVuZGVmaW5lZCA6IGdldChvYmplY3QsIHBhdGhzW2luZGV4XSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNsYW1wYCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byBjbGFtcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xvd2VyXSBUaGUgbG93ZXIgYm91bmQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHVwcGVyIFRoZSB1cHBlciBib3VuZC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjbGFtcGVkIG51bWJlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQ2xhbXAobnVtYmVyLCBsb3dlciwgdXBwZXIpIHtcbiAgICAgIGlmIChudW1iZXIgPT09IG51bWJlcikge1xuICAgICAgICBpZiAodXBwZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIG51bWJlciA9IG51bWJlciA8PSB1cHBlciA/IG51bWJlciA6IHVwcGVyO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsb3dlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgbnVtYmVyID0gbnVtYmVyID49IGxvd2VyID8gbnVtYmVyIDogbG93ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBudW1iZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY2xvbmVgIGFuZCBgXy5jbG9uZURlZXBgIHdoaWNoIHRyYWNrc1xuICAgICAqIHRyYXZlcnNlZCBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuXG4gICAgICogIDEgLSBEZWVwIGNsb25lXG4gICAgICogIDIgLSBGbGF0dGVuIGluaGVyaXRlZCBwcm9wZXJ0aWVzXG4gICAgICogIDQgLSBDbG9uZSBzeW1ib2xzXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY2xvbmluZy5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2tleV0gVGhlIGtleSBvZiBgdmFsdWVgLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgcGFyZW50IG9iamVjdCBvZiBgdmFsdWVgLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cyBhbmQgdGhlaXIgY2xvbmUgY291bnRlcnBhcnRzLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBjbG9uZWQgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUNsb25lKHZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBrZXksIG9iamVjdCwgc3RhY2spIHtcbiAgICAgIHZhciByZXN1bHQsXG4gICAgICAgICAgaXNEZWVwID0gYml0bWFzayAmIENMT05FX0RFRVBfRkxBRyxcbiAgICAgICAgICBpc0ZsYXQgPSBiaXRtYXNrICYgQ0xPTkVfRkxBVF9GTEFHLFxuICAgICAgICAgIGlzRnVsbCA9IGJpdG1hc2sgJiBDTE9ORV9TWU1CT0xTX0ZMQUc7XG5cbiAgICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICAgIHJlc3VsdCA9IG9iamVjdCA/IGN1c3RvbWl6ZXIodmFsdWUsIGtleSwgb2JqZWN0LCBzdGFjaykgOiBjdXN0b21pemVyKHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGlmIChyZXN1bHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgdmFyIGlzQXJyID0gaXNBcnJheSh2YWx1ZSk7XG4gICAgICBpZiAoaXNBcnIpIHtcbiAgICAgICAgcmVzdWx0ID0gaW5pdENsb25lQXJyYXkodmFsdWUpO1xuICAgICAgICBpZiAoIWlzRGVlcCkge1xuICAgICAgICAgIHJldHVybiBjb3B5QXJyYXkodmFsdWUsIHJlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciB0YWcgPSBnZXRUYWcodmFsdWUpLFxuICAgICAgICAgICAgaXNGdW5jID0gdGFnID09IGZ1bmNUYWcgfHwgdGFnID09IGdlblRhZztcblxuICAgICAgICBpZiAoaXNCdWZmZXIodmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIGNsb25lQnVmZmVyKHZhbHVlLCBpc0RlZXApO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0YWcgPT0gb2JqZWN0VGFnIHx8IHRhZyA9PSBhcmdzVGFnIHx8IChpc0Z1bmMgJiYgIW9iamVjdCkpIHtcbiAgICAgICAgICByZXN1bHQgPSAoaXNGbGF0IHx8IGlzRnVuYykgPyB7fSA6IGluaXRDbG9uZU9iamVjdCh2YWx1ZSk7XG4gICAgICAgICAgaWYgKCFpc0RlZXApIHtcbiAgICAgICAgICAgIHJldHVybiBpc0ZsYXRcbiAgICAgICAgICAgICAgPyBjb3B5U3ltYm9sc0luKHZhbHVlLCBiYXNlQXNzaWduSW4ocmVzdWx0LCB2YWx1ZSkpXG4gICAgICAgICAgICAgIDogY29weVN5bWJvbHModmFsdWUsIGJhc2VBc3NpZ24ocmVzdWx0LCB2YWx1ZSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoIWNsb25lYWJsZVRhZ3NbdGFnXSkge1xuICAgICAgICAgICAgcmV0dXJuIG9iamVjdCA/IHZhbHVlIDoge307XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdCA9IGluaXRDbG9uZUJ5VGFnKHZhbHVlLCB0YWcsIGlzRGVlcCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIENoZWNrIGZvciBjaXJjdWxhciByZWZlcmVuY2VzIGFuZCByZXR1cm4gaXRzIGNvcnJlc3BvbmRpbmcgY2xvbmUuXG4gICAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgICAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQodmFsdWUpO1xuICAgICAgaWYgKHN0YWNrZWQpIHtcbiAgICAgICAgcmV0dXJuIHN0YWNrZWQ7XG4gICAgICB9XG4gICAgICBzdGFjay5zZXQodmFsdWUsIHJlc3VsdCk7XG5cbiAgICAgIGlmIChpc1NldCh2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWUuZm9yRWFjaChmdW5jdGlvbihzdWJWYWx1ZSkge1xuICAgICAgICAgIHJlc3VsdC5hZGQoYmFzZUNsb25lKHN1YlZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdWJWYWx1ZSwgdmFsdWUsIHN0YWNrKSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc01hcCh2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWUuZm9yRWFjaChmdW5jdGlvbihzdWJWYWx1ZSwga2V5KSB7XG4gICAgICAgICAgcmVzdWx0LnNldChrZXksIGJhc2VDbG9uZShzdWJWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwga2V5LCB2YWx1ZSwgc3RhY2spKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cblxuICAgICAgdmFyIGtleXNGdW5jID0gaXNGdWxsXG4gICAgICAgID8gKGlzRmxhdCA/IGdldEFsbEtleXNJbiA6IGdldEFsbEtleXMpXG4gICAgICAgIDogKGlzRmxhdCA/IGtleXNJbiA6IGtleXMpO1xuXG4gICAgICB2YXIgcHJvcHMgPSBpc0FyciA/IHVuZGVmaW5lZCA6IGtleXNGdW5jKHZhbHVlKTtcbiAgICAgIGFycmF5RWFjaChwcm9wcyB8fCB2YWx1ZSwgZnVuY3Rpb24oc3ViVmFsdWUsIGtleSkge1xuICAgICAgICBpZiAocHJvcHMpIHtcbiAgICAgICAgICBrZXkgPSBzdWJWYWx1ZTtcbiAgICAgICAgICBzdWJWYWx1ZSA9IHZhbHVlW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgcG9wdWxhdGUgY2xvbmUgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgYXNzaWduVmFsdWUocmVzdWx0LCBrZXksIGJhc2VDbG9uZShzdWJWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwga2V5LCB2YWx1ZSwgc3RhY2spKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jb25mb3Jtc2Agd2hpY2ggZG9lc24ndCBjbG9uZSBgc291cmNlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHByZWRpY2F0ZXMgdG8gY29uZm9ybSB0by5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VDb25mb3Jtcyhzb3VyY2UpIHtcbiAgICAgIHZhciBwcm9wcyA9IGtleXMoc291cmNlKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VDb25mb3Jtc1RvKG9iamVjdCwgc291cmNlLCBwcm9wcyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNvbmZvcm1zVG9gIHdoaWNoIGFjY2VwdHMgYHByb3BzYCB0byBjaGVjay5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHByZWRpY2F0ZXMgdG8gY29uZm9ybSB0by5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgY29uZm9ybXMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQ29uZm9ybXNUbyhvYmplY3QsIHNvdXJjZSwgcHJvcHMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG4gICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuICFsZW5ndGg7XG4gICAgICB9XG4gICAgICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICB2YXIga2V5ID0gcHJvcHNbbGVuZ3RoXSxcbiAgICAgICAgICAgIHByZWRpY2F0ZSA9IHNvdXJjZVtrZXldLFxuICAgICAgICAgICAgdmFsdWUgPSBvYmplY3Rba2V5XTtcblxuICAgICAgICBpZiAoKHZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkgfHwgIXByZWRpY2F0ZSh2YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmRlbGF5YCBhbmQgYF8uZGVmZXJgIHdoaWNoIGFjY2VwdHMgYGFyZ3NgXG4gICAgICogdG8gcHJvdmlkZSB0byBgZnVuY2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRlbGF5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB3YWl0IFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGRlbGF5IGludm9jYXRpb24uXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJncyBUaGUgYXJndW1lbnRzIHRvIHByb3ZpZGUgdG8gYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ8T2JqZWN0fSBSZXR1cm5zIHRoZSB0aW1lciBpZCBvciB0aW1lb3V0IG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRGVsYXkoZnVuYywgd2FpdCwgYXJncykge1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IGZ1bmMuYXBwbHkodW5kZWZpbmVkLCBhcmdzKTsgfSwgd2FpdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgbWV0aG9kcyBsaWtlIGBfLmRpZmZlcmVuY2VgIHdpdGhvdXQgc3VwcG9ydFxuICAgICAqIGZvciBleGNsdWRpbmcgbXVsdGlwbGUgYXJyYXlzIG9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIGV4Y2x1ZGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZURpZmZlcmVuY2UoYXJyYXksIHZhbHVlcywgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGluY2x1ZGVzID0gYXJyYXlJbmNsdWRlcyxcbiAgICAgICAgICBpc0NvbW1vbiA9IHRydWUsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IFtdLFxuICAgICAgICAgIHZhbHVlc0xlbmd0aCA9IHZhbHVlcy5sZW5ndGg7XG5cbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBpZiAoaXRlcmF0ZWUpIHtcbiAgICAgICAgdmFsdWVzID0gYXJyYXlNYXAodmFsdWVzLCBiYXNlVW5hcnkoaXRlcmF0ZWUpKTtcbiAgICAgIH1cbiAgICAgIGlmIChjb21wYXJhdG9yKSB7XG4gICAgICAgIGluY2x1ZGVzID0gYXJyYXlJbmNsdWRlc1dpdGg7XG4gICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBlbHNlIGlmICh2YWx1ZXMubGVuZ3RoID49IExBUkdFX0FSUkFZX1NJWkUpIHtcbiAgICAgICAgaW5jbHVkZXMgPSBjYWNoZUhhcztcbiAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgdmFsdWVzID0gbmV3IFNldENhY2hlKHZhbHVlcyk7XG4gICAgICB9XG4gICAgICBvdXRlcjpcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPT0gbnVsbCA/IHZhbHVlIDogaXRlcmF0ZWUodmFsdWUpO1xuXG4gICAgICAgIHZhbHVlID0gKGNvbXBhcmF0b3IgfHwgdmFsdWUgIT09IDApID8gdmFsdWUgOiAwO1xuICAgICAgICBpZiAoaXNDb21tb24gJiYgY29tcHV0ZWQgPT09IGNvbXB1dGVkKSB7XG4gICAgICAgICAgdmFyIHZhbHVlc0luZGV4ID0gdmFsdWVzTGVuZ3RoO1xuICAgICAgICAgIHdoaWxlICh2YWx1ZXNJbmRleC0tKSB7XG4gICAgICAgICAgICBpZiAodmFsdWVzW3ZhbHVlc0luZGV4XSA9PT0gY29tcHV0ZWQpIHtcbiAgICAgICAgICAgICAgY29udGludWUgb3V0ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghaW5jbHVkZXModmFsdWVzLCBjb21wdXRlZCwgY29tcGFyYXRvcikpIHtcbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9yRWFjaGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIGBjb2xsZWN0aW9uYC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZUVhY2ggPSBjcmVhdGVCYXNlRWFjaChiYXNlRm9yT3duKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZvckVhY2hSaWdodGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIGBjb2xsZWN0aW9uYC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZUVhY2hSaWdodCA9IGNyZWF0ZUJhc2VFYWNoKGJhc2VGb3JPd25SaWdodCwgdHJ1ZSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5ldmVyeWAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFsbCBlbGVtZW50cyBwYXNzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gICAgICogIGVsc2UgYGZhbHNlYFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VFdmVyeShjb2xsZWN0aW9uLCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciByZXN1bHQgPSB0cnVlO1xuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIHJlc3VsdCA9ICEhcHJlZGljYXRlKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbik7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgbWV0aG9kcyBsaWtlIGBfLm1heGAgYW5kIGBfLm1pbmAgd2hpY2ggYWNjZXB0cyBhXG4gICAgICogYGNvbXBhcmF0b3JgIHRvIGRldGVybWluZSB0aGUgZXh0cmVtdW0gdmFsdWUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wYXJhdG9yIFRoZSBjb21wYXJhdG9yIHVzZWQgdG8gY29tcGFyZSB2YWx1ZXMuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGV4dHJlbXVtIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VFeHRyZW11bShhcnJheSwgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICAgICAgY3VycmVudCA9IGl0ZXJhdGVlKHZhbHVlKTtcblxuICAgICAgICBpZiAoY3VycmVudCAhPSBudWxsICYmIChjb21wdXRlZCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgID8gKGN1cnJlbnQgPT09IGN1cnJlbnQgJiYgIWlzU3ltYm9sKGN1cnJlbnQpKVxuICAgICAgICAgICAgICA6IGNvbXBhcmF0b3IoY3VycmVudCwgY29tcHV0ZWQpXG4gICAgICAgICAgICApKSB7XG4gICAgICAgICAgdmFyIGNvbXB1dGVkID0gY3VycmVudCxcbiAgICAgICAgICAgICAgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZmlsbGAgd2l0aG91dCBhbiBpdGVyYXRlZSBjYWxsIGd1YXJkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmlsbC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBmaWxsIGBhcnJheWAgd2l0aC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUZpbGwoYXJyYXksIHZhbHVlLCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgICBzdGFydCA9IHRvSW50ZWdlcihzdGFydCk7XG4gICAgICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgICAgIHN0YXJ0ID0gLXN0YXJ0ID4gbGVuZ3RoID8gMCA6IChsZW5ndGggKyBzdGFydCk7XG4gICAgICB9XG4gICAgICBlbmQgPSAoZW5kID09PSB1bmRlZmluZWQgfHwgZW5kID4gbGVuZ3RoKSA/IGxlbmd0aCA6IHRvSW50ZWdlcihlbmQpO1xuICAgICAgaWYgKGVuZCA8IDApIHtcbiAgICAgICAgZW5kICs9IGxlbmd0aDtcbiAgICAgIH1cbiAgICAgIGVuZCA9IHN0YXJ0ID4gZW5kID8gMCA6IHRvTGVuZ3RoKGVuZCk7XG4gICAgICB3aGlsZSAoc3RhcnQgPCBlbmQpIHtcbiAgICAgICAgYXJyYXlbc3RhcnQrK10gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5maWx0ZXJgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZpbHRlcmVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGaWx0ZXIoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZmxhdHRlbmAgd2l0aCBzdXBwb3J0IGZvciByZXN0cmljdGluZyBmbGF0dGVuaW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmxhdHRlbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZGVwdGggVGhlIG1heGltdW0gcmVjdXJzaW9uIGRlcHRoLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3ByZWRpY2F0ZT1pc0ZsYXR0ZW5hYmxlXSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzU3RyaWN0XSBSZXN0cmljdCB0byB2YWx1ZXMgdGhhdCBwYXNzIGBwcmVkaWNhdGVgIGNoZWNrcy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcmVzdWx0PVtdXSBUaGUgaW5pdGlhbCByZXN1bHQgdmFsdWUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGbGF0dGVuKGFycmF5LCBkZXB0aCwgcHJlZGljYXRlLCBpc1N0cmljdCwgcmVzdWx0KSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICAgIHByZWRpY2F0ZSB8fCAocHJlZGljYXRlID0gaXNGbGF0dGVuYWJsZSk7XG4gICAgICByZXN1bHQgfHwgKHJlc3VsdCA9IFtdKTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgICBpZiAoZGVwdGggPiAwICYmIHByZWRpY2F0ZSh2YWx1ZSkpIHtcbiAgICAgICAgICBpZiAoZGVwdGggPiAxKSB7XG4gICAgICAgICAgICAvLyBSZWN1cnNpdmVseSBmbGF0dGVuIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICAgICAgYmFzZUZsYXR0ZW4odmFsdWUsIGRlcHRoIC0gMSwgcHJlZGljYXRlLCBpc1N0cmljdCwgcmVzdWx0KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYXJyYXlQdXNoKHJlc3VsdCwgdmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICghaXNTdHJpY3QpIHtcbiAgICAgICAgICByZXN1bHRbcmVzdWx0Lmxlbmd0aF0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgYmFzZUZvck93bmAgd2hpY2ggaXRlcmF0ZXMgb3ZlciBgb2JqZWN0YFxuICAgICAqIHByb3BlcnRpZXMgcmV0dXJuZWQgYnkgYGtleXNGdW5jYCBhbmQgaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBlYWNoIHByb3BlcnR5LlxuICAgICAqIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb24gZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYG9iamVjdGAuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZUZvciA9IGNyZWF0ZUJhc2VGb3IoKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgYmFzZUZvcmAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBwcm9wZXJ0aWVzXG4gICAgICogaW4gdGhlIG9wcG9zaXRlIG9yZGVyLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBgb2JqZWN0YC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIHZhciBiYXNlRm9yUmlnaHQgPSBjcmVhdGVCYXNlRm9yKHRydWUpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9yT3duYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGb3JPd24ob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAmJiBiYXNlRm9yKG9iamVjdCwgaXRlcmF0ZWUsIGtleXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZvck93blJpZ2h0YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGb3JPd25SaWdodChvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGJhc2VGb3JSaWdodChvYmplY3QsIGl0ZXJhdGVlLCBrZXlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mdW5jdGlvbnNgIHdoaWNoIGNyZWF0ZXMgYW4gYXJyYXkgb2ZcbiAgICAgKiBgb2JqZWN0YCBmdW5jdGlvbiBwcm9wZXJ0eSBuYW1lcyBmaWx0ZXJlZCBmcm9tIGBwcm9wc2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBuYW1lcyB0byBmaWx0ZXIuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBuYW1lcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRnVuY3Rpb25zKG9iamVjdCwgcHJvcHMpIHtcbiAgICAgIHJldHVybiBhcnJheUZpbHRlcihwcm9wcywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIHJldHVybiBpc0Z1bmN0aW9uKG9iamVjdFtrZXldKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmdldGAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWZhdWx0IHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VHZXQob2JqZWN0LCBwYXRoKSB7XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcblxuICAgICAgdmFyIGluZGV4ID0gMCxcbiAgICAgICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKG9iamVjdCAhPSBudWxsICYmIGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIG9iamVjdCA9IG9iamVjdFt0b0tleShwYXRoW2luZGV4KytdKV07XG4gICAgICB9XG4gICAgICByZXR1cm4gKGluZGV4ICYmIGluZGV4ID09IGxlbmd0aCkgPyBvYmplY3QgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldEFsbEtleXNgIGFuZCBgZ2V0QWxsS2V5c0luYCB3aGljaCB1c2VzXG4gICAgICogYGtleXNGdW5jYCBhbmQgYHN5bWJvbHNGdW5jYCB0byBnZXQgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kXG4gICAgICogc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYG9iamVjdGAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc3ltYm9sc0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5c0Z1bmMsIHN5bWJvbHNGdW5jKSB7XG4gICAgICB2YXIgcmVzdWx0ID0ga2V5c0Z1bmMob2JqZWN0KTtcbiAgICAgIHJldHVybiBpc0FycmF5KG9iamVjdCkgPyByZXN1bHQgOiBhcnJheVB1c2gocmVzdWx0LCBzeW1ib2xzRnVuYyhvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0VGFnYCB3aXRob3V0IGZhbGxiYWNrcyBmb3IgYnVnZ3kgZW52aXJvbm1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VHZXRUYWcodmFsdWUpIHtcbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkVGFnIDogbnVsbFRhZztcbiAgICAgIH1cbiAgICAgIHJldHVybiAoc3ltVG9TdHJpbmdUYWcgJiYgc3ltVG9TdHJpbmdUYWcgaW4gT2JqZWN0KHZhbHVlKSlcbiAgICAgICAgPyBnZXRSYXdUYWcodmFsdWUpXG4gICAgICAgIDogb2JqZWN0VG9TdHJpbmcodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmd0YCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBncmVhdGVyIHRoYW4gYG90aGVyYCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VHdCh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA+IG90aGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmhhc2Agd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30ga2V5IFRoZSBrZXkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VIYXMob2JqZWN0LCBrZXkpIHtcbiAgICAgIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5oYXNJbmAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30ga2V5IFRoZSBrZXkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VIYXNJbihvYmplY3QsIGtleSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGtleSBpbiBPYmplY3Qob2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pblJhbmdlYCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgVGhlIHN0YXJ0IG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgbnVtYmVyYCBpcyBpbiB0aGUgcmFuZ2UsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSW5SYW5nZShudW1iZXIsIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHJldHVybiBudW1iZXIgPj0gbmF0aXZlTWluKHN0YXJ0LCBlbmQpICYmIG51bWJlciA8IG5hdGl2ZU1heChzdGFydCwgZW5kKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8uaW50ZXJzZWN0aW9uYCwgd2l0aG91dCBzdXBwb3J0XG4gICAgICogZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMsIHRoYXQgYWNjZXB0cyBhbiBhcnJheSBvZiBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXlzIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHNoYXJlZCB2YWx1ZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUludGVyc2VjdGlvbihhcnJheXMsIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gICAgICB2YXIgaW5jbHVkZXMgPSBjb21wYXJhdG9yID8gYXJyYXlJbmNsdWRlc1dpdGggOiBhcnJheUluY2x1ZGVzLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5c1swXS5sZW5ndGgsXG4gICAgICAgICAgb3RoTGVuZ3RoID0gYXJyYXlzLmxlbmd0aCxcbiAgICAgICAgICBvdGhJbmRleCA9IG90aExlbmd0aCxcbiAgICAgICAgICBjYWNoZXMgPSBBcnJheShvdGhMZW5ndGgpLFxuICAgICAgICAgIG1heExlbmd0aCA9IEluZmluaXR5LFxuICAgICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgICB3aGlsZSAob3RoSW5kZXgtLSkge1xuICAgICAgICB2YXIgYXJyYXkgPSBhcnJheXNbb3RoSW5kZXhdO1xuICAgICAgICBpZiAob3RoSW5kZXggJiYgaXRlcmF0ZWUpIHtcbiAgICAgICAgICBhcnJheSA9IGFycmF5TWFwKGFycmF5LCBiYXNlVW5hcnkoaXRlcmF0ZWUpKTtcbiAgICAgICAgfVxuICAgICAgICBtYXhMZW5ndGggPSBuYXRpdmVNaW4oYXJyYXkubGVuZ3RoLCBtYXhMZW5ndGgpO1xuICAgICAgICBjYWNoZXNbb3RoSW5kZXhdID0gIWNvbXBhcmF0b3IgJiYgKGl0ZXJhdGVlIHx8IChsZW5ndGggPj0gMTIwICYmIGFycmF5Lmxlbmd0aCA+PSAxMjApKVxuICAgICAgICAgID8gbmV3IFNldENhY2hlKG90aEluZGV4ICYmIGFycmF5KVxuICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgYXJyYXkgPSBhcnJheXNbMF07XG5cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIHNlZW4gPSBjYWNoZXNbMF07XG5cbiAgICAgIG91dGVyOlxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGggJiYgcmVzdWx0Lmxlbmd0aCA8IG1heExlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID8gaXRlcmF0ZWUodmFsdWUpIDogdmFsdWU7XG5cbiAgICAgICAgdmFsdWUgPSAoY29tcGFyYXRvciB8fCB2YWx1ZSAhPT0gMCkgPyB2YWx1ZSA6IDA7XG4gICAgICAgIGlmICghKHNlZW5cbiAgICAgICAgICAgICAgPyBjYWNoZUhhcyhzZWVuLCBjb21wdXRlZClcbiAgICAgICAgICAgICAgOiBpbmNsdWRlcyhyZXN1bHQsIGNvbXB1dGVkLCBjb21wYXJhdG9yKVxuICAgICAgICAgICAgKSkge1xuICAgICAgICAgIG90aEluZGV4ID0gb3RoTGVuZ3RoO1xuICAgICAgICAgIHdoaWxlICgtLW90aEluZGV4KSB7XG4gICAgICAgICAgICB2YXIgY2FjaGUgPSBjYWNoZXNbb3RoSW5kZXhdO1xuICAgICAgICAgICAgaWYgKCEoY2FjaGVcbiAgICAgICAgICAgICAgICAgID8gY2FjaGVIYXMoY2FjaGUsIGNvbXB1dGVkKVxuICAgICAgICAgICAgICAgICAgOiBpbmNsdWRlcyhhcnJheXNbb3RoSW5kZXhdLCBjb21wdXRlZCwgY29tcGFyYXRvcikpXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlIG91dGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc2Vlbikge1xuICAgICAgICAgICAgc2Vlbi5wdXNoKGNvbXB1dGVkKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmludmVydGAgYW5kIGBfLmludmVydEJ5YCB3aGljaCBpbnZlcnRzXG4gICAgICogYG9iamVjdGAgd2l0aCB2YWx1ZXMgdHJhbnNmb3JtZWQgYnkgYGl0ZXJhdGVlYCBhbmQgc2V0IGJ5IGBzZXR0ZXJgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHNldHRlciBUaGUgZnVuY3Rpb24gdG8gc2V0IGBhY2N1bXVsYXRvcmAgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBpdGVyYXRlZSB0byB0cmFuc2Zvcm0gdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBhY2N1bXVsYXRvciBUaGUgaW5pdGlhbCBpbnZlcnRlZCBvYmplY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBhY2N1bXVsYXRvcmAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUludmVydGVyKG9iamVjdCwgc2V0dGVyLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgICAgIGJhc2VGb3JPd24ob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSwga2V5LCBvYmplY3QpIHtcbiAgICAgICAgc2V0dGVyKGFjY3VtdWxhdG9yLCBpdGVyYXRlZSh2YWx1ZSksIGtleSwgb2JqZWN0KTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmludm9rZWAgd2l0aG91dCBzdXBwb3J0IGZvciBpbmRpdmlkdWFsXG4gICAgICogbWV0aG9kIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBtZXRob2QgdG8gaW52b2tlLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgdGhlIG1ldGhvZCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXN1bHQgb2YgdGhlIGludm9rZWQgbWV0aG9kLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJbnZva2Uob2JqZWN0LCBwYXRoLCBhcmdzKSB7XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcbiAgICAgIG9iamVjdCA9IHBhcmVudChvYmplY3QsIHBhdGgpO1xuICAgICAgdmFyIGZ1bmMgPSBvYmplY3QgPT0gbnVsbCA/IG9iamVjdCA6IG9iamVjdFt0b0tleShsYXN0KHBhdGgpKV07XG4gICAgICByZXR1cm4gZnVuYyA9PSBudWxsID8gdW5kZWZpbmVkIDogYXBwbHkoZnVuYywgb2JqZWN0LCBhcmdzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0FyZ3VtZW50c2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNBcmd1bWVudHModmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGFyZ3NUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNBcnJheUJ1ZmZlcmAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5IGJ1ZmZlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc0FycmF5QnVmZmVyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBhcnJheUJ1ZmZlclRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0RhdGVgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGRhdGUgb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzRGF0ZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gZGF0ZVRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0VxdWFsYCB3aGljaCBzdXBwb3J0cyBwYXJ0aWFsIGNvbXBhcmlzb25zXG4gICAgICogYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy5cbiAgICAgKiAgMSAtIFVub3JkZXJlZCBjb21wYXJpc29uXG4gICAgICogIDIgLSBQYXJ0aWFsIGNvbXBhcmlzb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIGB2YWx1ZWAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc0VxdWFsKHZhbHVlLCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spIHtcbiAgICAgIGlmICh2YWx1ZSA9PT0gb3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCB8fCBvdGhlciA9PSBudWxsIHx8ICghaXNPYmplY3RMaWtlKHZhbHVlKSAmJiAhaXNPYmplY3RMaWtlKG90aGVyKSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXI7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUlzRXF1YWxEZWVwKHZhbHVlLCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgYmFzZUlzRXF1YWwsIHN0YWNrKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsYCBmb3IgYXJyYXlzIGFuZCBvYmplY3RzIHdoaWNoIHBlcmZvcm1zXG4gICAgICogZGVlcCBjb21wYXJpc29ucyBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzIGVuYWJsaW5nIG9iamVjdHMgd2l0aCBjaXJjdWxhclxuICAgICAqIHJlZmVyZW5jZXMgdG8gYmUgY29tcGFyZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzRXF1YWxEZWVwKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgICAgIHZhciBvYmpJc0FyciA9IGlzQXJyYXkob2JqZWN0KSxcbiAgICAgICAgICBvdGhJc0FyciA9IGlzQXJyYXkob3RoZXIpLFxuICAgICAgICAgIG9ialRhZyA9IG9iaklzQXJyID8gYXJyYXlUYWcgOiBnZXRUYWcob2JqZWN0KSxcbiAgICAgICAgICBvdGhUYWcgPSBvdGhJc0FyciA/IGFycmF5VGFnIDogZ2V0VGFnKG90aGVyKTtcblxuICAgICAgb2JqVGFnID0gb2JqVGFnID09IGFyZ3NUYWcgPyBvYmplY3RUYWcgOiBvYmpUYWc7XG4gICAgICBvdGhUYWcgPSBvdGhUYWcgPT0gYXJnc1RhZyA/IG9iamVjdFRhZyA6IG90aFRhZztcblxuICAgICAgdmFyIG9iaklzT2JqID0gb2JqVGFnID09IG9iamVjdFRhZyxcbiAgICAgICAgICBvdGhJc09iaiA9IG90aFRhZyA9PSBvYmplY3RUYWcsXG4gICAgICAgICAgaXNTYW1lVGFnID0gb2JqVGFnID09IG90aFRhZztcblxuICAgICAgaWYgKGlzU2FtZVRhZyAmJiBpc0J1ZmZlcihvYmplY3QpKSB7XG4gICAgICAgIGlmICghaXNCdWZmZXIob3RoZXIpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIG9iaklzQXJyID0gdHJ1ZTtcbiAgICAgICAgb2JqSXNPYmogPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1NhbWVUYWcgJiYgIW9iaklzT2JqKSB7XG4gICAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICAgIHJldHVybiAob2JqSXNBcnIgfHwgaXNUeXBlZEFycmF5KG9iamVjdCkpXG4gICAgICAgICAgPyBlcXVhbEFycmF5cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKVxuICAgICAgICAgIDogZXF1YWxCeVRhZyhvYmplY3QsIG90aGVyLCBvYmpUYWcsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spO1xuICAgICAgfVxuICAgICAgaWYgKCEoYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHKSkge1xuICAgICAgICB2YXIgb2JqSXNXcmFwcGVkID0gb2JqSXNPYmogJiYgaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsICdfX3dyYXBwZWRfXycpLFxuICAgICAgICAgICAgb3RoSXNXcmFwcGVkID0gb3RoSXNPYmogJiYgaGFzT3duUHJvcGVydHkuY2FsbChvdGhlciwgJ19fd3JhcHBlZF9fJyk7XG5cbiAgICAgICAgaWYgKG9iaklzV3JhcHBlZCB8fCBvdGhJc1dyYXBwZWQpIHtcbiAgICAgICAgICB2YXIgb2JqVW53cmFwcGVkID0gb2JqSXNXcmFwcGVkID8gb2JqZWN0LnZhbHVlKCkgOiBvYmplY3QsXG4gICAgICAgICAgICAgIG90aFVud3JhcHBlZCA9IG90aElzV3JhcHBlZCA/IG90aGVyLnZhbHVlKCkgOiBvdGhlcjtcblxuICAgICAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICAgICAgcmV0dXJuIGVxdWFsRnVuYyhvYmpVbndyYXBwZWQsIG90aFVud3JhcHBlZCwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoIWlzU2FtZVRhZykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgICAgcmV0dXJuIGVxdWFsT2JqZWN0cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc01hcGAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbWFwLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzTWFwKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBnZXRUYWcodmFsdWUpID09IG1hcFRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc01hdGNoYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gICAgICogQHBhcmFtIHtBcnJheX0gbWF0Y2hEYXRhIFRoZSBwcm9wZXJ0eSBuYW1lcywgdmFsdWVzLCBhbmQgY29tcGFyZSBmbGFncyB0byBtYXRjaC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgaXMgYSBtYXRjaCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc01hdGNoKG9iamVjdCwgc291cmNlLCBtYXRjaERhdGEsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIHZhciBpbmRleCA9IG1hdGNoRGF0YS5sZW5ndGgsXG4gICAgICAgICAgbGVuZ3RoID0gaW5kZXgsXG4gICAgICAgICAgbm9DdXN0b21pemVyID0gIWN1c3RvbWl6ZXI7XG5cbiAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gIWxlbmd0aDtcbiAgICAgIH1cbiAgICAgIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgdmFyIGRhdGEgPSBtYXRjaERhdGFbaW5kZXhdO1xuICAgICAgICBpZiAoKG5vQ3VzdG9taXplciAmJiBkYXRhWzJdKVxuICAgICAgICAgICAgICA/IGRhdGFbMV0gIT09IG9iamVjdFtkYXRhWzBdXVxuICAgICAgICAgICAgICA6ICEoZGF0YVswXSBpbiBvYmplY3QpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIGRhdGEgPSBtYXRjaERhdGFbaW5kZXhdO1xuICAgICAgICB2YXIga2V5ID0gZGF0YVswXSxcbiAgICAgICAgICAgIG9ialZhbHVlID0gb2JqZWN0W2tleV0sXG4gICAgICAgICAgICBzcmNWYWx1ZSA9IGRhdGFbMV07XG5cbiAgICAgICAgaWYgKG5vQ3VzdG9taXplciAmJiBkYXRhWzJdKSB7XG4gICAgICAgICAgaWYgKG9ialZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgc3RhY2sgPSBuZXcgU3RhY2s7XG4gICAgICAgICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QsIHNvdXJjZSwgc3RhY2spO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIShyZXN1bHQgPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgID8gYmFzZUlzRXF1YWwoc3JjVmFsdWUsIG9ialZhbHVlLCBDT01QQVJFX1BBUlRJQUxfRkxBRyB8IENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcsIGN1c3RvbWl6ZXIsIHN0YWNrKVxuICAgICAgICAgICAgICAgIDogcmVzdWx0XG4gICAgICAgICAgICAgICkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTmF0aXZlYCB3aXRob3V0IGJhZCBzaGltIGNoZWNrcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBuYXRpdmUgZnVuY3Rpb24sXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNOYXRpdmUodmFsdWUpIHtcbiAgICAgIGlmICghaXNPYmplY3QodmFsdWUpIHx8IGlzTWFza2VkKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgcGF0dGVybiA9IGlzRnVuY3Rpb24odmFsdWUpID8gcmVJc05hdGl2ZSA6IHJlSXNIb3N0Q3RvcjtcbiAgICAgIHJldHVybiBwYXR0ZXJuLnRlc3QodG9Tb3VyY2UodmFsdWUpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc1JlZ0V4cGAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcmVnZXhwLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzUmVnRXhwKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSByZWdleHBUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNTZXRgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHNldCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc1NldCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgZ2V0VGFnKHZhbHVlKSA9PSBzZXRUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNUeXBlZEFycmF5YCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB0eXBlZCBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc1R5cGVkQXJyYXkodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmXG4gICAgICAgIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgISF0eXBlZEFycmF5VGFnc1tiYXNlR2V0VGFnKHZhbHVlKV07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXRlcmF0ZWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IFt2YWx1ZT1fLmlkZW50aXR5XSBUaGUgdmFsdWUgdG8gY29udmVydCB0byBhbiBpdGVyYXRlZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGl0ZXJhdGVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJdGVyYXRlZSh2YWx1ZSkge1xuICAgICAgLy8gRG9uJ3Qgc3RvcmUgdGhlIGB0eXBlb2ZgIHJlc3VsdCBpbiBhIHZhcmlhYmxlIHRvIGF2b2lkIGEgSklUIGJ1ZyBpbiBTYWZhcmkgOS5cbiAgICAgIC8vIFNlZSBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTU2MDM0IGZvciBtb3JlIGRldGFpbHMuXG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGlkZW50aXR5O1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gaXNBcnJheSh2YWx1ZSlcbiAgICAgICAgICA/IGJhc2VNYXRjaGVzUHJvcGVydHkodmFsdWVbMF0sIHZhbHVlWzFdKVxuICAgICAgICAgIDogYmFzZU1hdGNoZXModmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHByb3BlcnR5KHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5rZXlzYCB3aGljaCBkb2Vzbid0IHRyZWF0IHNwYXJzZSBhcnJheXMgYXMgZGVuc2UuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VLZXlzKG9iamVjdCkge1xuICAgICAgaWYgKCFpc1Byb3RvdHlwZShvYmplY3QpKSB7XG4gICAgICAgIHJldHVybiBuYXRpdmVLZXlzKG9iamVjdCk7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICBmb3IgKHZhciBrZXkgaW4gT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmIGtleSAhPSAnY29uc3RydWN0b3InKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5rZXlzSW5gIHdoaWNoIGRvZXNuJ3QgdHJlYXQgc3BhcnNlIGFycmF5cyBhcyBkZW5zZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUtleXNJbihvYmplY3QpIHtcbiAgICAgIGlmICghaXNPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICByZXR1cm4gbmF0aXZlS2V5c0luKG9iamVjdCk7XG4gICAgICB9XG4gICAgICB2YXIgaXNQcm90byA9IGlzUHJvdG90eXBlKG9iamVjdCksXG4gICAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgaWYgKCEoa2V5ID09ICdjb25zdHJ1Y3RvcicgJiYgKGlzUHJvdG8gfHwgIWhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSkpIHtcbiAgICAgICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmx0YCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBsZXNzIHRoYW4gYG90aGVyYCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VMdCh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA8IG90aGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hcGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgcmVzdWx0ID0gaXNBcnJheUxpa2UoY29sbGVjdGlvbikgPyBBcnJheShjb2xsZWN0aW9uLmxlbmd0aCkgOiBbXTtcblxuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSwgY29sbGVjdGlvbikge1xuICAgICAgICByZXN1bHRbKytpbmRleF0gPSBpdGVyYXRlZSh2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tYXRjaGVzYCB3aGljaCBkb2Vzbid0IGNsb25lIGBzb3VyY2VgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU1hdGNoZXMoc291cmNlKSB7XG4gICAgICB2YXIgbWF0Y2hEYXRhID0gZ2V0TWF0Y2hEYXRhKHNvdXJjZSk7XG4gICAgICBpZiAobWF0Y2hEYXRhLmxlbmd0aCA9PSAxICYmIG1hdGNoRGF0YVswXVsyXSkge1xuICAgICAgICByZXR1cm4gbWF0Y2hlc1N0cmljdENvbXBhcmFibGUobWF0Y2hEYXRhWzBdWzBdLCBtYXRjaERhdGFbMF1bMV0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICByZXR1cm4gb2JqZWN0ID09PSBzb3VyY2UgfHwgYmFzZUlzTWF0Y2gob2JqZWN0LCBzb3VyY2UsIG1hdGNoRGF0YSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hdGNoZXNQcm9wZXJ0eWAgd2hpY2ggZG9lc24ndCBjbG9uZSBgc3JjVmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHZhbHVlIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU1hdGNoZXNQcm9wZXJ0eShwYXRoLCBzcmNWYWx1ZSkge1xuICAgICAgaWYgKGlzS2V5KHBhdGgpICYmIGlzU3RyaWN0Q29tcGFyYWJsZShzcmNWYWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlKHRvS2V5KHBhdGgpLCBzcmNWYWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHZhciBvYmpWYWx1ZSA9IGdldChvYmplY3QsIHBhdGgpO1xuICAgICAgICByZXR1cm4gKG9ialZhbHVlID09PSB1bmRlZmluZWQgJiYgb2JqVmFsdWUgPT09IHNyY1ZhbHVlKVxuICAgICAgICAgID8gaGFzSW4ob2JqZWN0LCBwYXRoKVxuICAgICAgICAgIDogYmFzZUlzRXF1YWwoc3JjVmFsdWUsIG9ialZhbHVlLCBDT01QQVJFX1BBUlRJQUxfRkxBRyB8IENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tZXJnZWAgd2l0aG91dCBzdXBwb3J0IGZvciBtdWx0aXBsZSBzb3VyY2VzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3JjSW5kZXggVGhlIGluZGV4IG9mIGBzb3VyY2VgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIG1lcmdlZCB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBzb3VyY2UgdmFsdWVzIGFuZCB0aGVpciBtZXJnZWRcbiAgICAgKiAgY291bnRlcnBhcnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VNZXJnZShvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIsIHN0YWNrKSB7XG4gICAgICBpZiAob2JqZWN0ID09PSBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYmFzZUZvcihzb3VyY2UsIGZ1bmN0aW9uKHNyY1ZhbHVlLCBrZXkpIHtcbiAgICAgICAgaWYgKGlzT2JqZWN0KHNyY1ZhbHVlKSkge1xuICAgICAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICAgICAgYmFzZU1lcmdlRGVlcChvYmplY3QsIHNvdXJjZSwga2V5LCBzcmNJbmRleCwgYmFzZU1lcmdlLCBjdXN0b21pemVyLCBzdGFjayk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgdmFyIG5ld1ZhbHVlID0gY3VzdG9taXplclxuICAgICAgICAgICAgPyBjdXN0b21pemVyKHNhZmVHZXQob2JqZWN0LCBrZXkpLCBzcmNWYWx1ZSwgKGtleSArICcnKSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKVxuICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgICBpZiAobmV3VmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBzcmNWYWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYXNzaWduTWVyZ2VWYWx1ZShvYmplY3QsIGtleSwgbmV3VmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9LCBrZXlzSW4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZU1lcmdlYCBmb3IgYXJyYXlzIGFuZCBvYmplY3RzIHdoaWNoIHBlcmZvcm1zXG4gICAgICogZGVlcCBtZXJnZXMgYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cyBlbmFibGluZyBvYmplY3RzIHdpdGggY2lyY3VsYXJcbiAgICAgKiByZWZlcmVuY2VzIHRvIGJlIG1lcmdlZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBtZXJnZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3JjSW5kZXggVGhlIGluZGV4IG9mIGBzb3VyY2VgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IG1lcmdlRnVuYyBUaGUgZnVuY3Rpb24gdG8gbWVyZ2UgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIHNvdXJjZSB2YWx1ZXMgYW5kIHRoZWlyIG1lcmdlZFxuICAgICAqICBjb3VudGVycGFydHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU1lcmdlRGVlcChvYmplY3QsIHNvdXJjZSwga2V5LCBzcmNJbmRleCwgbWVyZ2VGdW5jLCBjdXN0b21pemVyLCBzdGFjaykge1xuICAgICAgdmFyIG9ialZhbHVlID0gc2FmZUdldChvYmplY3QsIGtleSksXG4gICAgICAgICAgc3JjVmFsdWUgPSBzYWZlR2V0KHNvdXJjZSwga2V5KSxcbiAgICAgICAgICBzdGFja2VkID0gc3RhY2suZ2V0KHNyY1ZhbHVlKTtcblxuICAgICAgaWYgKHN0YWNrZWQpIHtcbiAgICAgICAgYXNzaWduTWVyZ2VWYWx1ZShvYmplY3QsIGtleSwgc3RhY2tlZCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBuZXdWYWx1ZSA9IGN1c3RvbWl6ZXJcbiAgICAgICAgPyBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSwgKGtleSArICcnKSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKVxuICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgdmFyIGlzQ29tbW9uID0gbmV3VmFsdWUgPT09IHVuZGVmaW5lZDtcblxuICAgICAgaWYgKGlzQ29tbW9uKSB7XG4gICAgICAgIHZhciBpc0FyciA9IGlzQXJyYXkoc3JjVmFsdWUpLFxuICAgICAgICAgICAgaXNCdWZmID0gIWlzQXJyICYmIGlzQnVmZmVyKHNyY1ZhbHVlKSxcbiAgICAgICAgICAgIGlzVHlwZWQgPSAhaXNBcnIgJiYgIWlzQnVmZiAmJiBpc1R5cGVkQXJyYXkoc3JjVmFsdWUpO1xuXG4gICAgICAgIG5ld1ZhbHVlID0gc3JjVmFsdWU7XG4gICAgICAgIGlmIChpc0FyciB8fCBpc0J1ZmYgfHwgaXNUeXBlZCkge1xuICAgICAgICAgIGlmIChpc0FycmF5KG9ialZhbHVlKSkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBvYmpWYWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoaXNBcnJheUxpa2VPYmplY3Qob2JqVmFsdWUpKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IGNvcHlBcnJheShvYmpWYWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKGlzQnVmZikge1xuICAgICAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gY2xvbmVCdWZmZXIoc3JjVmFsdWUsIHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmIChpc1R5cGVkKSB7XG4gICAgICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBjbG9uZVR5cGVkQXJyYXkoc3JjVmFsdWUsIHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gW107XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzUGxhaW5PYmplY3Qoc3JjVmFsdWUpIHx8IGlzQXJndW1lbnRzKHNyY1ZhbHVlKSkge1xuICAgICAgICAgIG5ld1ZhbHVlID0gb2JqVmFsdWU7XG4gICAgICAgICAgaWYgKGlzQXJndW1lbnRzKG9ialZhbHVlKSkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSB0b1BsYWluT2JqZWN0KG9ialZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoIWlzT2JqZWN0KG9ialZhbHVlKSB8fCBpc0Z1bmN0aW9uKG9ialZhbHVlKSkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBpbml0Q2xvbmVPYmplY3Qoc3JjVmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoaXNDb21tb24pIHtcbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgbWVyZ2Ugb2JqZWN0cyBhbmQgYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgIHN0YWNrLnNldChzcmNWYWx1ZSwgbmV3VmFsdWUpO1xuICAgICAgICBtZXJnZUZ1bmMobmV3VmFsdWUsIHNyY1ZhbHVlLCBzcmNJbmRleCwgY3VzdG9taXplciwgc3RhY2spO1xuICAgICAgICBzdGFja1snZGVsZXRlJ10oc3JjVmFsdWUpO1xuICAgICAgfVxuICAgICAgYXNzaWduTWVyZ2VWYWx1ZShvYmplY3QsIGtleSwgbmV3VmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm50aGAgd2hpY2ggZG9lc24ndCBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIGluZGV4IG9mIHRoZSBlbGVtZW50IHRvIHJldHVybi5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbnRoIGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTnRoKGFycmF5LCBuKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgbiArPSBuIDwgMCA/IGxlbmd0aCA6IDA7XG4gICAgICByZXR1cm4gaXNJbmRleChuLCBsZW5ndGgpID8gYXJyYXlbbl0gOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ub3JkZXJCeWAgd2l0aG91dCBwYXJhbSBndWFyZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9uW118T2JqZWN0W118c3RyaW5nW119IGl0ZXJhdGVlcyBUaGUgaXRlcmF0ZWVzIHRvIHNvcnQgYnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gb3JkZXJzIFRoZSBzb3J0IG9yZGVycyBvZiBgaXRlcmF0ZWVzYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzb3J0ZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU9yZGVyQnkoY29sbGVjdGlvbiwgaXRlcmF0ZWVzLCBvcmRlcnMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xO1xuICAgICAgaXRlcmF0ZWVzID0gYXJyYXlNYXAoaXRlcmF0ZWVzLmxlbmd0aCA/IGl0ZXJhdGVlcyA6IFtpZGVudGl0eV0sIGJhc2VVbmFyeShnZXRJdGVyYXRlZSgpKSk7XG5cbiAgICAgIHZhciByZXN1bHQgPSBiYXNlTWFwKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgdmFyIGNyaXRlcmlhID0gYXJyYXlNYXAoaXRlcmF0ZWVzLCBmdW5jdGlvbihpdGVyYXRlZSkge1xuICAgICAgICAgIHJldHVybiBpdGVyYXRlZSh2YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4geyAnY3JpdGVyaWEnOiBjcml0ZXJpYSwgJ2luZGV4JzogKytpbmRleCwgJ3ZhbHVlJzogdmFsdWUgfTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gYmFzZVNvcnRCeShyZXN1bHQsIGZ1bmN0aW9uKG9iamVjdCwgb3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIGNvbXBhcmVNdWx0aXBsZShvYmplY3QsIG90aGVyLCBvcmRlcnMpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucGlja2Agd2l0aG91dCBzdXBwb3J0IGZvciBpbmRpdmlkdWFsXG4gICAgICogcHJvcGVydHkgaWRlbnRpZmllcnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gcGF0aHMgVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUGljayhvYmplY3QsIHBhdGhzKSB7XG4gICAgICByZXR1cm4gYmFzZVBpY2tCeShvYmplY3QsIHBhdGhzLCBmdW5jdGlvbih2YWx1ZSwgcGF0aCkge1xuICAgICAgICByZXR1cm4gaGFzSW4ob2JqZWN0LCBwYXRoKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mICBgXy5waWNrQnlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBwYXRocyBUaGUgcHJvcGVydHkgcGF0aHMgdG8gcGljay5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIHByb3BlcnR5LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVBpY2tCeShvYmplY3QsIHBhdGhzLCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHBhdGhzLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSB7fTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHBhdGggPSBwYXRoc1tpbmRleF0sXG4gICAgICAgICAgICB2YWx1ZSA9IGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcblxuICAgICAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBwYXRoKSkge1xuICAgICAgICAgIGJhc2VTZXQocmVzdWx0LCBjYXN0UGF0aChwYXRoLCBvYmplY3QpLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlUHJvcGVydHlgIHdoaWNoIHN1cHBvcnRzIGRlZXAgcGF0aHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVByb3BlcnR5RGVlcChwYXRoKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnB1bGxBbGxCeWAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZVxuICAgICAqIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gcmVtb3ZlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVB1bGxBbGwoYXJyYXksIHZhbHVlcywgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHZhciBpbmRleE9mID0gY29tcGFyYXRvciA/IGJhc2VJbmRleE9mV2l0aCA6IGJhc2VJbmRleE9mLFxuICAgICAgICAgIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgICAgICBzZWVuID0gYXJyYXk7XG5cbiAgICAgIGlmIChhcnJheSA9PT0gdmFsdWVzKSB7XG4gICAgICAgIHZhbHVlcyA9IGNvcHlBcnJheSh2YWx1ZXMpO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZXJhdGVlKSB7XG4gICAgICAgIHNlZW4gPSBhcnJheU1hcChhcnJheSwgYmFzZVVuYXJ5KGl0ZXJhdGVlKSk7XG4gICAgICB9XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgZnJvbUluZGV4ID0gMCxcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWVzW2luZGV4XSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPyBpdGVyYXRlZSh2YWx1ZSkgOiB2YWx1ZTtcblxuICAgICAgICB3aGlsZSAoKGZyb21JbmRleCA9IGluZGV4T2Yoc2VlbiwgY29tcHV0ZWQsIGZyb21JbmRleCwgY29tcGFyYXRvcikpID4gLTEpIHtcbiAgICAgICAgICBpZiAoc2VlbiAhPT0gYXJyYXkpIHtcbiAgICAgICAgICAgIHNwbGljZS5jYWxsKHNlZW4sIGZyb21JbmRleCwgMSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNwbGljZS5jYWxsKGFycmF5LCBmcm9tSW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucHVsbEF0YCB3aXRob3V0IHN1cHBvcnQgZm9yIGluZGl2aWR1YWxcbiAgICAgKiBpbmRleGVzIG9yIGNhcHR1cmluZyB0aGUgcmVtb3ZlZCBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcltdfSBpbmRleGVzIFRoZSBpbmRleGVzIG9mIGVsZW1lbnRzIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUHVsbEF0KGFycmF5LCBpbmRleGVzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPyBpbmRleGVzLmxlbmd0aCA6IDAsXG4gICAgICAgICAgbGFzdEluZGV4ID0gbGVuZ3RoIC0gMTtcblxuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGluZGV4ZXNbbGVuZ3RoXTtcbiAgICAgICAgaWYgKGxlbmd0aCA9PSBsYXN0SW5kZXggfHwgaW5kZXggIT09IHByZXZpb3VzKSB7XG4gICAgICAgICAgdmFyIHByZXZpb3VzID0gaW5kZXg7XG4gICAgICAgICAgaWYgKGlzSW5kZXgoaW5kZXgpKSB7XG4gICAgICAgICAgICBzcGxpY2UuY2FsbChhcnJheSwgaW5kZXgsIDEpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBiYXNlVW5zZXQoYXJyYXksIGluZGV4KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yYW5kb21gIHdpdGhvdXQgc3VwcG9ydCBmb3IgcmV0dXJuaW5nXG4gICAgICogZmxvYXRpbmctcG9pbnQgbnVtYmVycy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGxvd2VyIFRoZSBsb3dlciBib3VuZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdXBwZXIgVGhlIHVwcGVyIGJvdW5kLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHJhbmRvbSBudW1iZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVJhbmRvbShsb3dlciwgdXBwZXIpIHtcbiAgICAgIHJldHVybiBsb3dlciArIG5hdGl2ZUZsb29yKG5hdGl2ZVJhbmRvbSgpICogKHVwcGVyIC0gbG93ZXIgKyAxKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmFuZ2VgIGFuZCBgXy5yYW5nZVJpZ2h0YCB3aGljaCBkb2Vzbid0XG4gICAgICogY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IFRoZSBzdGFydCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RlcCBUaGUgdmFsdWUgdG8gaW5jcmVtZW50IG9yIGRlY3JlbWVudCBieS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmdlIG9mIG51bWJlcnMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVJhbmdlKHN0YXJ0LCBlbmQsIHN0ZXAsIGZyb21SaWdodCkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWF4KG5hdGl2ZUNlaWwoKGVuZCAtIHN0YXJ0KSAvIChzdGVwIHx8IDEpKSwgMCksXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcblxuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHJlc3VsdFtmcm9tUmlnaHQgPyBsZW5ndGggOiArK2luZGV4XSA9IHN0YXJ0O1xuICAgICAgICBzdGFydCArPSBzdGVwO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yZXBlYXRgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIHJlcGVhdC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIHJlcGVhdCB0aGUgc3RyaW5nLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJlcGVhdGVkIHN0cmluZy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUmVwZWF0KHN0cmluZywgbikge1xuICAgICAgdmFyIHJlc3VsdCA9ICcnO1xuICAgICAgaWYgKCFzdHJpbmcgfHwgbiA8IDEgfHwgbiA+IE1BWF9TQUZFX0lOVEVHRVIpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIC8vIExldmVyYWdlIHRoZSBleHBvbmVudGlhdGlvbiBieSBzcXVhcmluZyBhbGdvcml0aG0gZm9yIGEgZmFzdGVyIHJlcGVhdC5cbiAgICAgIC8vIFNlZSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9FeHBvbmVudGlhdGlvbl9ieV9zcXVhcmluZyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgZG8ge1xuICAgICAgICBpZiAobiAlIDIpIHtcbiAgICAgICAgICByZXN1bHQgKz0gc3RyaW5nO1xuICAgICAgICB9XG4gICAgICAgIG4gPSBuYXRpdmVGbG9vcihuIC8gMik7XG4gICAgICAgIGlmIChuKSB7XG4gICAgICAgICAgc3RyaW5nICs9IHN0cmluZztcbiAgICAgICAgfVxuICAgICAgfSB3aGlsZSAobik7XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmVzdGAgd2hpY2ggZG9lc24ndCB2YWxpZGF0ZSBvciBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9ZnVuYy5sZW5ndGgtMV0gVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSByZXN0IHBhcmFtZXRlci5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUmVzdChmdW5jLCBzdGFydCkge1xuICAgICAgcmV0dXJuIHNldFRvU3RyaW5nKG92ZXJSZXN0KGZ1bmMsIHN0YXJ0LCBpZGVudGl0eSksIGZ1bmMgKyAnJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc2FtcGxlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2FtcGxlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByYW5kb20gZWxlbWVudC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU2FtcGxlKGNvbGxlY3Rpb24pIHtcbiAgICAgIHJldHVybiBhcnJheVNhbXBsZSh2YWx1ZXMoY29sbGVjdGlvbikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNhbXBsZVNpemVgIHdpdGhvdXQgcGFyYW0gZ3VhcmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBzYW1wbGUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBzYW1wbGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSByYW5kb20gZWxlbWVudHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNhbXBsZVNpemUoY29sbGVjdGlvbiwgbikge1xuICAgICAgdmFyIGFycmF5ID0gdmFsdWVzKGNvbGxlY3Rpb24pO1xuICAgICAgcmV0dXJuIHNodWZmbGVTZWxmKGFycmF5LCBiYXNlQ2xhbXAobiwgMCwgYXJyYXkubGVuZ3RoKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc2V0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBwYXRoIGNyZWF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNldChvYmplY3QsIHBhdGgsIHZhbHVlLCBjdXN0b21pemVyKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgIH1cbiAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuXG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aCxcbiAgICAgICAgICBsYXN0SW5kZXggPSBsZW5ndGggLSAxLFxuICAgICAgICAgIG5lc3RlZCA9IG9iamVjdDtcblxuICAgICAgd2hpbGUgKG5lc3RlZCAhPSBudWxsICYmICsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IHRvS2V5KHBhdGhbaW5kZXhdKSxcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gdmFsdWU7XG5cbiAgICAgICAgaWYgKGluZGV4ICE9IGxhc3RJbmRleCkge1xuICAgICAgICAgIHZhciBvYmpWYWx1ZSA9IG5lc3RlZFtrZXldO1xuICAgICAgICAgIG5ld1ZhbHVlID0gY3VzdG9taXplciA/IGN1c3RvbWl6ZXIob2JqVmFsdWUsIGtleSwgbmVzdGVkKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICBpZiAobmV3VmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBpc09iamVjdChvYmpWYWx1ZSlcbiAgICAgICAgICAgICAgPyBvYmpWYWx1ZVxuICAgICAgICAgICAgICA6IChpc0luZGV4KHBhdGhbaW5kZXggKyAxXSkgPyBbXSA6IHt9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYXNzaWduVmFsdWUobmVzdGVkLCBrZXksIG5ld1ZhbHVlKTtcbiAgICAgICAgbmVzdGVkID0gbmVzdGVkW2tleV07XG4gICAgICB9XG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBzZXREYXRhYCB3aXRob3V0IHN1cHBvcnQgZm9yIGhvdCBsb29wIHNob3J0aW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhc3NvY2lhdGUgbWV0YWRhdGEgd2l0aC5cbiAgICAgKiBAcGFyYW0geyp9IGRhdGEgVGhlIG1ldGFkYXRhLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgZnVuY2AuXG4gICAgICovXG4gICAgdmFyIGJhc2VTZXREYXRhID0gIW1ldGFNYXAgPyBpZGVudGl0eSA6IGZ1bmN0aW9uKGZ1bmMsIGRhdGEpIHtcbiAgICAgIG1ldGFNYXAuc2V0KGZ1bmMsIGRhdGEpO1xuICAgICAgcmV0dXJuIGZ1bmM7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBzZXRUb1N0cmluZ2Agd2l0aG91dCBzdXBwb3J0IGZvciBob3QgbG9vcCBzaG9ydGluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHN0cmluZyBUaGUgYHRvU3RyaW5nYCByZXN1bHQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBmdW5jYC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZVNldFRvU3RyaW5nID0gIWRlZmluZVByb3BlcnR5ID8gaWRlbnRpdHkgOiBmdW5jdGlvbihmdW5jLCBzdHJpbmcpIHtcbiAgICAgIHJldHVybiBkZWZpbmVQcm9wZXJ0eShmdW5jLCAndG9TdHJpbmcnLCB7XG4gICAgICAgICdjb25maWd1cmFibGUnOiB0cnVlLFxuICAgICAgICAnZW51bWVyYWJsZSc6IGZhbHNlLFxuICAgICAgICAndmFsdWUnOiBjb25zdGFudChzdHJpbmcpLFxuICAgICAgICAnd3JpdGFibGUnOiB0cnVlXG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc2h1ZmZsZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNodWZmbGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc2h1ZmZsZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNodWZmbGUoY29sbGVjdGlvbikge1xuICAgICAgcmV0dXJuIHNodWZmbGVTZWxmKHZhbHVlcyhjb2xsZWN0aW9uKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc2xpY2VgIHdpdGhvdXQgYW4gaXRlcmF0ZWUgY2FsbCBndWFyZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNsaWNlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kPWFycmF5Lmxlbmd0aF0gVGhlIGVuZCBwb3NpdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNsaWNlKGFycmF5LCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICAgIGlmIChzdGFydCA8IDApIHtcbiAgICAgICAgc3RhcnQgPSAtc3RhcnQgPiBsZW5ndGggPyAwIDogKGxlbmd0aCArIHN0YXJ0KTtcbiAgICAgIH1cbiAgICAgIGVuZCA9IGVuZCA+IGxlbmd0aCA/IGxlbmd0aCA6IGVuZDtcbiAgICAgIGlmIChlbmQgPCAwKSB7XG4gICAgICAgIGVuZCArPSBsZW5ndGg7XG4gICAgICB9XG4gICAgICBsZW5ndGggPSBzdGFydCA+IGVuZCA/IDAgOiAoKGVuZCAtIHN0YXJ0KSA+Pj4gMCk7XG4gICAgICBzdGFydCA+Pj49IDA7XG5cbiAgICAgIHZhciByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W2luZGV4XSA9IGFycmF5W2luZGV4ICsgc3RhcnRdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb21lYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW55IGVsZW1lbnQgcGFzc2VzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU29tZShjb2xsZWN0aW9uLCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciByZXN1bHQ7XG5cbiAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgICByZXN1bHQgPSBwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKTtcbiAgICAgICAgcmV0dXJuICFyZXN1bHQ7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiAhIXJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb3J0ZWRJbmRleGAgYW5kIGBfLnNvcnRlZExhc3RJbmRleGAgd2hpY2hcbiAgICAgKiBwZXJmb3JtcyBhIGJpbmFyeSBzZWFyY2ggb2YgYGFycmF5YCB0byBkZXRlcm1pbmUgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWBcbiAgICAgKiBzaG91bGQgYmUgaW5zZXJ0ZWQgaW50byBgYXJyYXlgIGluIG9yZGVyIHRvIG1haW50YWluIGl0cyBzb3J0IG9yZGVyLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXZhbHVhdGUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbcmV0SGlnaGVzdF0gU3BlY2lmeSByZXR1cm5pbmcgdGhlIGhpZ2hlc3QgcXVhbGlmaWVkIGluZGV4LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gICAgICogIGludG8gYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU29ydGVkSW5kZXgoYXJyYXksIHZhbHVlLCByZXRIaWdoZXN0KSB7XG4gICAgICB2YXIgbG93ID0gMCxcbiAgICAgICAgICBoaWdoID0gYXJyYXkgPT0gbnVsbCA/IGxvdyA6IGFycmF5Lmxlbmd0aDtcblxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJiB2YWx1ZSA9PT0gdmFsdWUgJiYgaGlnaCA8PSBIQUxGX01BWF9BUlJBWV9MRU5HVEgpIHtcbiAgICAgICAgd2hpbGUgKGxvdyA8IGhpZ2gpIHtcbiAgICAgICAgICB2YXIgbWlkID0gKGxvdyArIGhpZ2gpID4+PiAxLFxuICAgICAgICAgICAgICBjb21wdXRlZCA9IGFycmF5W21pZF07XG5cbiAgICAgICAgICBpZiAoY29tcHV0ZWQgIT09IG51bGwgJiYgIWlzU3ltYm9sKGNvbXB1dGVkKSAmJlxuICAgICAgICAgICAgICAocmV0SGlnaGVzdCA/IChjb21wdXRlZCA8PSB2YWx1ZSkgOiAoY29tcHV0ZWQgPCB2YWx1ZSkpKSB7XG4gICAgICAgICAgICBsb3cgPSBtaWQgKyAxO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBoaWdoID0gbWlkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaGlnaDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlU29ydGVkSW5kZXhCeShhcnJheSwgdmFsdWUsIGlkZW50aXR5LCByZXRIaWdoZXN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb3J0ZWRJbmRleEJ5YCBhbmQgYF8uc29ydGVkTGFzdEluZGV4QnlgXG4gICAgICogd2hpY2ggaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBgdmFsdWVgIGFuZCBlYWNoIGVsZW1lbnQgb2YgYGFycmF5YCB0byBjb21wdXRlXG4gICAgICogdGhlaXIgc29ydCByYW5raW5nLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDsgKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3JldEhpZ2hlc3RdIFNwZWNpZnkgcmV0dXJuaW5nIHRoZSBoaWdoZXN0IHF1YWxpZmllZCBpbmRleC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZFxuICAgICAqICBpbnRvIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNvcnRlZEluZGV4QnkoYXJyYXksIHZhbHVlLCBpdGVyYXRlZSwgcmV0SGlnaGVzdCkge1xuICAgICAgdmFsdWUgPSBpdGVyYXRlZSh2YWx1ZSk7XG5cbiAgICAgIHZhciBsb3cgPSAwLFxuICAgICAgICAgIGhpZ2ggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICB2YWxJc05hTiA9IHZhbHVlICE9PSB2YWx1ZSxcbiAgICAgICAgICB2YWxJc051bGwgPSB2YWx1ZSA9PT0gbnVsbCxcbiAgICAgICAgICB2YWxJc1N5bWJvbCA9IGlzU3ltYm9sKHZhbHVlKSxcbiAgICAgICAgICB2YWxJc1VuZGVmaW5lZCA9IHZhbHVlID09PSB1bmRlZmluZWQ7XG5cbiAgICAgIHdoaWxlIChsb3cgPCBoaWdoKSB7XG4gICAgICAgIHZhciBtaWQgPSBuYXRpdmVGbG9vcigobG93ICsgaGlnaCkgLyAyKSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUoYXJyYXlbbWlkXSksXG4gICAgICAgICAgICBvdGhJc0RlZmluZWQgPSBjb21wdXRlZCAhPT0gdW5kZWZpbmVkLFxuICAgICAgICAgICAgb3RoSXNOdWxsID0gY29tcHV0ZWQgPT09IG51bGwsXG4gICAgICAgICAgICBvdGhJc1JlZmxleGl2ZSA9IGNvbXB1dGVkID09PSBjb21wdXRlZCxcbiAgICAgICAgICAgIG90aElzU3ltYm9sID0gaXNTeW1ib2woY29tcHV0ZWQpO1xuXG4gICAgICAgIGlmICh2YWxJc05hTikge1xuICAgICAgICAgIHZhciBzZXRMb3cgPSByZXRIaWdoZXN0IHx8IG90aElzUmVmbGV4aXZlO1xuICAgICAgICB9IGVsc2UgaWYgKHZhbElzVW5kZWZpbmVkKSB7XG4gICAgICAgICAgc2V0TG93ID0gb3RoSXNSZWZsZXhpdmUgJiYgKHJldEhpZ2hlc3QgfHwgb3RoSXNEZWZpbmVkKTtcbiAgICAgICAgfSBlbHNlIGlmICh2YWxJc051bGwpIHtcbiAgICAgICAgICBzZXRMb3cgPSBvdGhJc1JlZmxleGl2ZSAmJiBvdGhJc0RlZmluZWQgJiYgKHJldEhpZ2hlc3QgfHwgIW90aElzTnVsbCk7XG4gICAgICAgIH0gZWxzZSBpZiAodmFsSXNTeW1ib2wpIHtcbiAgICAgICAgICBzZXRMb3cgPSBvdGhJc1JlZmxleGl2ZSAmJiBvdGhJc0RlZmluZWQgJiYgIW90aElzTnVsbCAmJiAocmV0SGlnaGVzdCB8fCAhb3RoSXNTeW1ib2wpO1xuICAgICAgICB9IGVsc2UgaWYgKG90aElzTnVsbCB8fCBvdGhJc1N5bWJvbCkge1xuICAgICAgICAgIHNldExvdyA9IGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNldExvdyA9IHJldEhpZ2hlc3QgPyAoY29tcHV0ZWQgPD0gdmFsdWUpIDogKGNvbXB1dGVkIDwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZXRMb3cpIHtcbiAgICAgICAgICBsb3cgPSBtaWQgKyAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGhpZ2ggPSBtaWQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBuYXRpdmVNaW4oaGlnaCwgTUFYX0FSUkFZX0lOREVYKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb3J0ZWRVbmlxYCBhbmQgYF8uc29ydGVkVW5pcUJ5YCB3aXRob3V0XG4gICAgICogc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU29ydGVkVW5pcShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICByZXNJbmRleCA9IDAsXG4gICAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPyBpdGVyYXRlZSh2YWx1ZSkgOiB2YWx1ZTtcblxuICAgICAgICBpZiAoIWluZGV4IHx8ICFlcShjb21wdXRlZCwgc2VlbikpIHtcbiAgICAgICAgICB2YXIgc2VlbiA9IGNvbXB1dGVkO1xuICAgICAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IHZhbHVlID09PSAwID8gMCA6IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRvTnVtYmVyYCB3aGljaCBkb2Vzbid0IGVuc3VyZSBjb3JyZWN0XG4gICAgICogY29udmVyc2lvbnMgb2YgYmluYXJ5LCBoZXhhZGVjaW1hbCwgb3Igb2N0YWwgc3RyaW5nIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBudW1iZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVRvTnVtYmVyKHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdudW1iZXInKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIE5BTjtcbiAgICAgIH1cbiAgICAgIHJldHVybiArdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udG9TdHJpbmdgIHdoaWNoIGRvZXNuJ3QgY29udmVydCBudWxsaXNoXG4gICAgICogdmFsdWVzIHRvIGVtcHR5IHN0cmluZ3MuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc3RyaW5nLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VUb1N0cmluZyh2YWx1ZSkge1xuICAgICAgLy8gRXhpdCBlYXJseSBmb3Igc3RyaW5ncyB0byBhdm9pZCBhIHBlcmZvcm1hbmNlIGhpdCBpbiBzb21lIGVudmlyb25tZW50cy5cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbnZlcnQgdmFsdWVzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgIHJldHVybiBhcnJheU1hcCh2YWx1ZSwgYmFzZVRvU3RyaW5nKSArICcnO1xuICAgICAgfVxuICAgICAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gc3ltYm9sVG9TdHJpbmcgPyBzeW1ib2xUb1N0cmluZy5jYWxsKHZhbHVlKSA6ICcnO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9ICh2YWx1ZSArICcnKTtcbiAgICAgIHJldHVybiAocmVzdWx0ID09ICcwJyAmJiAoMSAvIHZhbHVlKSA9PSAtSU5GSU5JVFkpID8gJy0wJyA6IHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51bmlxQnlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlVW5pcShhcnJheSwgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGluY2x1ZGVzID0gYXJyYXlJbmNsdWRlcyxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgaXNDb21tb24gPSB0cnVlLFxuICAgICAgICAgIHJlc3VsdCA9IFtdLFxuICAgICAgICAgIHNlZW4gPSByZXN1bHQ7XG5cbiAgICAgIGlmIChjb21wYXJhdG9yKSB7XG4gICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgIGluY2x1ZGVzID0gYXJyYXlJbmNsdWRlc1dpdGg7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChsZW5ndGggPj0gTEFSR0VfQVJSQVlfU0laRSkge1xuICAgICAgICB2YXIgc2V0ID0gaXRlcmF0ZWUgPyBudWxsIDogY3JlYXRlU2V0KGFycmF5KTtcbiAgICAgICAgaWYgKHNldCkge1xuICAgICAgICAgIHJldHVybiBzZXRUb0FycmF5KHNldCk7XG4gICAgICAgIH1cbiAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgaW5jbHVkZXMgPSBjYWNoZUhhcztcbiAgICAgICAgc2VlbiA9IG5ldyBTZXRDYWNoZTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBzZWVuID0gaXRlcmF0ZWUgPyBbXSA6IHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIG91dGVyOlxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSA/IGl0ZXJhdGVlKHZhbHVlKSA6IHZhbHVlO1xuXG4gICAgICAgIHZhbHVlID0gKGNvbXBhcmF0b3IgfHwgdmFsdWUgIT09IDApID8gdmFsdWUgOiAwO1xuICAgICAgICBpZiAoaXNDb21tb24gJiYgY29tcHV0ZWQgPT09IGNvbXB1dGVkKSB7XG4gICAgICAgICAgdmFyIHNlZW5JbmRleCA9IHNlZW4ubGVuZ3RoO1xuICAgICAgICAgIHdoaWxlIChzZWVuSW5kZXgtLSkge1xuICAgICAgICAgICAgaWYgKHNlZW5bc2VlbkluZGV4XSA9PT0gY29tcHV0ZWQpIHtcbiAgICAgICAgICAgICAgY29udGludWUgb3V0ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpdGVyYXRlZSkge1xuICAgICAgICAgICAgc2Vlbi5wdXNoKGNvbXB1dGVkKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFpbmNsdWRlcyhzZWVuLCBjb21wdXRlZCwgY29tcGFyYXRvcikpIHtcbiAgICAgICAgICBpZiAoc2VlbiAhPT0gcmVzdWx0KSB7XG4gICAgICAgICAgICBzZWVuLnB1c2goY29tcHV0ZWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udW5zZXRgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwcm9wZXJ0eSBwYXRoIHRvIHVuc2V0LlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgcHJvcGVydHkgaXMgZGVsZXRlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VVbnNldChvYmplY3QsIHBhdGgpIHtcbiAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuICAgICAgb2JqZWN0ID0gcGFyZW50KG9iamVjdCwgcGF0aCk7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgfHwgZGVsZXRlIG9iamVjdFt0b0tleShsYXN0KHBhdGgpKV07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udXBkYXRlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gdXBkYXRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHVwZGF0ZXIgVGhlIGZ1bmN0aW9uIHRvIHByb2R1Y2UgdGhlIHVwZGF0ZWQgdmFsdWUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgcGF0aCBjcmVhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VVcGRhdGUob2JqZWN0LCBwYXRoLCB1cGRhdGVyLCBjdXN0b21pemVyKSB7XG4gICAgICByZXR1cm4gYmFzZVNldChvYmplY3QsIHBhdGgsIHVwZGF0ZXIoYmFzZUdldChvYmplY3QsIHBhdGgpKSwgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgbWV0aG9kcyBsaWtlIGBfLmRyb3BXaGlsZWAgYW5kIGBfLnRha2VXaGlsZWBcbiAgICAgKiB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0Ryb3BdIFNwZWNpZnkgZHJvcHBpbmcgZWxlbWVudHMgaW5zdGVhZCBvZiB0YWtpbmcgdGhlbS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVdoaWxlKGFycmF5LCBwcmVkaWNhdGUsIGlzRHJvcCwgZnJvbVJpZ2h0KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIGluZGV4ID0gZnJvbVJpZ2h0ID8gbGVuZ3RoIDogLTE7XG5cbiAgICAgIHdoaWxlICgoZnJvbVJpZ2h0ID8gaW5kZXgtLSA6ICsraW5kZXggPCBsZW5ndGgpICYmXG4gICAgICAgIHByZWRpY2F0ZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHt9XG5cbiAgICAgIHJldHVybiBpc0Ryb3BcbiAgICAgICAgPyBiYXNlU2xpY2UoYXJyYXksIChmcm9tUmlnaHQgPyAwIDogaW5kZXgpLCAoZnJvbVJpZ2h0ID8gaW5kZXggKyAxIDogbGVuZ3RoKSlcbiAgICAgICAgOiBiYXNlU2xpY2UoYXJyYXksIChmcm9tUmlnaHQgPyBpbmRleCArIDEgOiAwKSwgKGZyb21SaWdodCA/IGxlbmd0aCA6IGluZGV4KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYHdyYXBwZXJWYWx1ZWAgd2hpY2ggcmV0dXJucyB0aGUgcmVzdWx0IG9mXG4gICAgICogcGVyZm9ybWluZyBhIHNlcXVlbmNlIG9mIGFjdGlvbnMgb24gdGhlIHVud3JhcHBlZCBgdmFsdWVgLCB3aGVyZSBlYWNoXG4gICAgICogc3VjY2Vzc2l2ZSBhY3Rpb24gaXMgc3VwcGxpZWQgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgcHJldmlvdXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHVud3JhcHBlZCB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhY3Rpb25zIEFjdGlvbnMgdG8gcGVyZm9ybSB0byByZXNvbHZlIHRoZSB1bndyYXBwZWQgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VXcmFwcGVyVmFsdWUodmFsdWUsIGFjdGlvbnMpIHtcbiAgICAgIHZhciByZXN1bHQgPSB2YWx1ZTtcbiAgICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcikge1xuICAgICAgICByZXN1bHQgPSByZXN1bHQudmFsdWUoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheVJlZHVjZShhY3Rpb25zLCBmdW5jdGlvbihyZXN1bHQsIGFjdGlvbikge1xuICAgICAgICByZXR1cm4gYWN0aW9uLmZ1bmMuYXBwbHkoYWN0aW9uLnRoaXNBcmcsIGFycmF5UHVzaChbcmVzdWx0XSwgYWN0aW9uLmFyZ3MpKTtcbiAgICAgIH0sIHJlc3VsdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgbWV0aG9kcyBsaWtlIGBfLnhvcmAsIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLCB0aGF0IGFjY2VwdHMgYW4gYXJyYXkgb2YgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5cyBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiB2YWx1ZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVhvcihhcnJheXMsIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXlzLmxlbmd0aDtcbiAgICAgIGlmIChsZW5ndGggPCAyKSB7XG4gICAgICAgIHJldHVybiBsZW5ndGggPyBiYXNlVW5pcShhcnJheXNbMF0pIDogW107XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgYXJyYXkgPSBhcnJheXNbaW5kZXhdLFxuICAgICAgICAgICAgb3RoSW5kZXggPSAtMTtcblxuICAgICAgICB3aGlsZSAoKytvdGhJbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIGlmIChvdGhJbmRleCAhPSBpbmRleCkge1xuICAgICAgICAgICAgcmVzdWx0W2luZGV4XSA9IGJhc2VEaWZmZXJlbmNlKHJlc3VsdFtpbmRleF0gfHwgYXJyYXksIGFycmF5c1tvdGhJbmRleF0sIGl0ZXJhdGVlLCBjb21wYXJhdG9yKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlVW5pcShiYXNlRmxhdHRlbihyZXN1bHQsIDEpLCBpdGVyYXRlZSwgY29tcGFyYXRvcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnppcE9iamVjdGAgd2hpY2ggYXNzaWducyB2YWx1ZXMgdXNpbmcgYGFzc2lnbkZ1bmNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgaWRlbnRpZmllcnMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gYXNzaWduRnVuYyBUaGUgZnVuY3Rpb24gdG8gYXNzaWduIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VaaXBPYmplY3QocHJvcHMsIHZhbHVlcywgYXNzaWduRnVuYykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoLFxuICAgICAgICAgIHZhbHNMZW5ndGggPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IHt9O1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBpbmRleCA8IHZhbHNMZW5ndGggPyB2YWx1ZXNbaW5kZXhdIDogdW5kZWZpbmVkO1xuICAgICAgICBhc3NpZ25GdW5jKHJlc3VsdCwgcHJvcHNbaW5kZXhdLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhc3RzIGB2YWx1ZWAgdG8gYW4gZW1wdHkgYXJyYXkgaWYgaXQncyBub3QgYW4gYXJyYXkgbGlrZSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fE9iamVjdH0gUmV0dXJucyB0aGUgY2FzdCBhcnJheS1saWtlIG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYXN0QXJyYXlMaWtlT2JqZWN0KHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2VPYmplY3QodmFsdWUpID8gdmFsdWUgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYXN0cyBgdmFsdWVgIHRvIGBpZGVudGl0eWAgaWYgaXQncyBub3QgYSBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgY2FzdCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYXN0RnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ2Z1bmN0aW9uJyA/IHZhbHVlIDogaWRlbnRpdHk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FzdHMgYHZhbHVlYCB0byBhIHBhdGggYXJyYXkgaWYgaXQncyBub3Qgb25lLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5IGtleXMgb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjYXN0IHByb3BlcnR5IHBhdGggYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FzdFBhdGgodmFsdWUsIG9iamVjdCkge1xuICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpc0tleSh2YWx1ZSwgb2JqZWN0KSA/IFt2YWx1ZV0gOiBzdHJpbmdUb1BhdGgodG9TdHJpbmcodmFsdWUpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIGBiYXNlUmVzdGAgYWxpYXMgd2hpY2ggY2FuIGJlIHJlcGxhY2VkIHdpdGggYGlkZW50aXR5YCBieSBtb2R1bGVcbiAgICAgKiByZXBsYWNlbWVudCBwbHVnaW5zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAdHlwZSB7RnVuY3Rpb259XG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICB2YXIgY2FzdFJlc3QgPSBiYXNlUmVzdDtcblxuICAgIC8qKlxuICAgICAqIENhc3RzIGBhcnJheWAgdG8gYSBzbGljZSBpZiBpdCdzIG5lZWRlZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IFRoZSBzdGFydCBwb3NpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjYXN0IHNsaWNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhc3RTbGljZShhcnJheSwgc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgICAgIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogZW5kO1xuICAgICAgcmV0dXJuICghc3RhcnQgJiYgZW5kID49IGxlbmd0aCkgPyBhcnJheSA6IGJhc2VTbGljZShhcnJheSwgc3RhcnQsIGVuZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzaW1wbGUgd3JhcHBlciBhcm91bmQgdGhlIGdsb2JhbCBbYGNsZWFyVGltZW91dGBdKGh0dHBzOi8vbWRuLmlvL2NsZWFyVGltZW91dCkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfE9iamVjdH0gaWQgVGhlIHRpbWVyIGlkIG9yIHRpbWVvdXQgb2JqZWN0IG9mIHRoZSB0aW1lciB0byBjbGVhci5cbiAgICAgKi9cbiAgICB2YXIgY2xlYXJUaW1lb3V0ID0gY3R4Q2xlYXJUaW1lb3V0IHx8IGZ1bmN0aW9uKGlkKSB7XG4gICAgICByZXR1cm4gcm9vdC5jbGVhclRpbWVvdXQoaWQpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgIGBidWZmZXJgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0J1ZmZlcn0gYnVmZmVyIFRoZSBidWZmZXIgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7QnVmZmVyfSBSZXR1cm5zIHRoZSBjbG9uZWQgYnVmZmVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lQnVmZmVyKGJ1ZmZlciwgaXNEZWVwKSB7XG4gICAgICBpZiAoaXNEZWVwKSB7XG4gICAgICAgIHJldHVybiBidWZmZXIuc2xpY2UoKTtcbiAgICAgIH1cbiAgICAgIHZhciBsZW5ndGggPSBidWZmZXIubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IGFsbG9jVW5zYWZlID8gYWxsb2NVbnNhZmUobGVuZ3RoKSA6IG5ldyBidWZmZXIuY29uc3RydWN0b3IobGVuZ3RoKTtcblxuICAgICAgYnVmZmVyLmNvcHkocmVzdWx0KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIGBhcnJheUJ1ZmZlcmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXlCdWZmZXJ9IGFycmF5QnVmZmVyIFRoZSBhcnJheSBidWZmZXIgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMge0FycmF5QnVmZmVyfSBSZXR1cm5zIHRoZSBjbG9uZWQgYXJyYXkgYnVmZmVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lQXJyYXlCdWZmZXIoYXJyYXlCdWZmZXIpIHtcbiAgICAgIHZhciByZXN1bHQgPSBuZXcgYXJyYXlCdWZmZXIuY29uc3RydWN0b3IoYXJyYXlCdWZmZXIuYnl0ZUxlbmd0aCk7XG4gICAgICBuZXcgVWludDhBcnJheShyZXN1bHQpLnNldChuZXcgVWludDhBcnJheShhcnJheUJ1ZmZlcikpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgYGRhdGFWaWV3YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGFWaWV3IFRoZSBkYXRhIHZpZXcgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgZGF0YSB2aWV3LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lRGF0YVZpZXcoZGF0YVZpZXcsIGlzRGVlcCkge1xuICAgICAgdmFyIGJ1ZmZlciA9IGlzRGVlcCA/IGNsb25lQXJyYXlCdWZmZXIoZGF0YVZpZXcuYnVmZmVyKSA6IGRhdGFWaWV3LmJ1ZmZlcjtcbiAgICAgIHJldHVybiBuZXcgZGF0YVZpZXcuY29uc3RydWN0b3IoYnVmZmVyLCBkYXRhVmlldy5ieXRlT2Zmc2V0LCBkYXRhVmlldy5ieXRlTGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgYHJlZ2V4cGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSByZWdleHAgVGhlIHJlZ2V4cCB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgcmVnZXhwLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lUmVnRXhwKHJlZ2V4cCkge1xuICAgICAgdmFyIHJlc3VsdCA9IG5ldyByZWdleHAuY29uc3RydWN0b3IocmVnZXhwLnNvdXJjZSwgcmVGbGFncy5leGVjKHJlZ2V4cCkpO1xuICAgICAgcmVzdWx0Lmxhc3RJbmRleCA9IHJlZ2V4cC5sYXN0SW5kZXg7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiB0aGUgYHN5bWJvbGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc3ltYm9sIFRoZSBzeW1ib2wgb2JqZWN0IHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCBzeW1ib2wgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lU3ltYm9sKHN5bWJvbCkge1xuICAgICAgcmV0dXJuIHN5bWJvbFZhbHVlT2YgPyBPYmplY3Qoc3ltYm9sVmFsdWVPZi5jYWxsKHN5bWJvbCkpIDoge307XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIGB0eXBlZEFycmF5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHR5cGVkQXJyYXkgVGhlIHR5cGVkIGFycmF5IHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHR5cGVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lVHlwZWRBcnJheSh0eXBlZEFycmF5LCBpc0RlZXApIHtcbiAgICAgIHZhciBidWZmZXIgPSBpc0RlZXAgPyBjbG9uZUFycmF5QnVmZmVyKHR5cGVkQXJyYXkuYnVmZmVyKSA6IHR5cGVkQXJyYXkuYnVmZmVyO1xuICAgICAgcmV0dXJuIG5ldyB0eXBlZEFycmF5LmNvbnN0cnVjdG9yKGJ1ZmZlciwgdHlwZWRBcnJheS5ieXRlT2Zmc2V0LCB0eXBlZEFycmF5Lmxlbmd0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29tcGFyZXMgdmFsdWVzIHRvIHNvcnQgdGhlbSBpbiBhc2NlbmRpbmcgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzb3J0IG9yZGVyIGluZGljYXRvciBmb3IgYHZhbHVlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb21wYXJlQXNjZW5kaW5nKHZhbHVlLCBvdGhlcikge1xuICAgICAgaWYgKHZhbHVlICE9PSBvdGhlcikge1xuICAgICAgICB2YXIgdmFsSXNEZWZpbmVkID0gdmFsdWUgIT09IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHZhbElzTnVsbCA9IHZhbHVlID09PSBudWxsLFxuICAgICAgICAgICAgdmFsSXNSZWZsZXhpdmUgPSB2YWx1ZSA9PT0gdmFsdWUsXG4gICAgICAgICAgICB2YWxJc1N5bWJvbCA9IGlzU3ltYm9sKHZhbHVlKTtcblxuICAgICAgICB2YXIgb3RoSXNEZWZpbmVkID0gb3RoZXIgIT09IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIG90aElzTnVsbCA9IG90aGVyID09PSBudWxsLFxuICAgICAgICAgICAgb3RoSXNSZWZsZXhpdmUgPSBvdGhlciA9PT0gb3RoZXIsXG4gICAgICAgICAgICBvdGhJc1N5bWJvbCA9IGlzU3ltYm9sKG90aGVyKTtcblxuICAgICAgICBpZiAoKCFvdGhJc051bGwgJiYgIW90aElzU3ltYm9sICYmICF2YWxJc1N5bWJvbCAmJiB2YWx1ZSA+IG90aGVyKSB8fFxuICAgICAgICAgICAgKHZhbElzU3ltYm9sICYmIG90aElzRGVmaW5lZCAmJiBvdGhJc1JlZmxleGl2ZSAmJiAhb3RoSXNOdWxsICYmICFvdGhJc1N5bWJvbCkgfHxcbiAgICAgICAgICAgICh2YWxJc051bGwgJiYgb3RoSXNEZWZpbmVkICYmIG90aElzUmVmbGV4aXZlKSB8fFxuICAgICAgICAgICAgKCF2YWxJc0RlZmluZWQgJiYgb3RoSXNSZWZsZXhpdmUpIHx8XG4gICAgICAgICAgICAhdmFsSXNSZWZsZXhpdmUpIHtcbiAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKCF2YWxJc051bGwgJiYgIXZhbElzU3ltYm9sICYmICFvdGhJc1N5bWJvbCAmJiB2YWx1ZSA8IG90aGVyKSB8fFxuICAgICAgICAgICAgKG90aElzU3ltYm9sICYmIHZhbElzRGVmaW5lZCAmJiB2YWxJc1JlZmxleGl2ZSAmJiAhdmFsSXNOdWxsICYmICF2YWxJc1N5bWJvbCkgfHxcbiAgICAgICAgICAgIChvdGhJc051bGwgJiYgdmFsSXNEZWZpbmVkICYmIHZhbElzUmVmbGV4aXZlKSB8fFxuICAgICAgICAgICAgKCFvdGhJc0RlZmluZWQgJiYgdmFsSXNSZWZsZXhpdmUpIHx8XG4gICAgICAgICAgICAhb3RoSXNSZWZsZXhpdmUpIHtcbiAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZWQgYnkgYF8ub3JkZXJCeWAgdG8gY29tcGFyZSBtdWx0aXBsZSBwcm9wZXJ0aWVzIG9mIGEgdmFsdWUgdG8gYW5vdGhlclxuICAgICAqIGFuZCBzdGFibGUgc29ydCB0aGVtLlxuICAgICAqXG4gICAgICogSWYgYG9yZGVyc2AgaXMgdW5zcGVjaWZpZWQsIGFsbCB2YWx1ZXMgYXJlIHNvcnRlZCBpbiBhc2NlbmRpbmcgb3JkZXIuIE90aGVyd2lzZSxcbiAgICAgKiBzcGVjaWZ5IGFuIG9yZGVyIG9mIFwiZGVzY1wiIGZvciBkZXNjZW5kaW5nIG9yIFwiYXNjXCIgZm9yIGFzY2VuZGluZyBzb3J0IG9yZGVyXG4gICAgICogb2YgY29ycmVzcG9uZGluZyB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtib29sZWFuW118c3RyaW5nW119IG9yZGVycyBUaGUgb3JkZXIgdG8gc29ydCBieSBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzb3J0IG9yZGVyIGluZGljYXRvciBmb3IgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29tcGFyZU11bHRpcGxlKG9iamVjdCwgb3RoZXIsIG9yZGVycykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgb2JqQ3JpdGVyaWEgPSBvYmplY3QuY3JpdGVyaWEsXG4gICAgICAgICAgb3RoQ3JpdGVyaWEgPSBvdGhlci5jcml0ZXJpYSxcbiAgICAgICAgICBsZW5ndGggPSBvYmpDcml0ZXJpYS5sZW5ndGgsXG4gICAgICAgICAgb3JkZXJzTGVuZ3RoID0gb3JkZXJzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGNvbXBhcmVBc2NlbmRpbmcob2JqQ3JpdGVyaWFbaW5kZXhdLCBvdGhDcml0ZXJpYVtpbmRleF0pO1xuICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgaWYgKGluZGV4ID49IG9yZGVyc0xlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIG9yZGVyID0gb3JkZXJzW2luZGV4XTtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0ICogKG9yZGVyID09ICdkZXNjJyA/IC0xIDogMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIEZpeGVzIGFuIGBBcnJheSNzb3J0YCBidWcgaW4gdGhlIEpTIGVuZ2luZSBlbWJlZGRlZCBpbiBBZG9iZSBhcHBsaWNhdGlvbnNcbiAgICAgIC8vIHRoYXQgY2F1c2VzIGl0LCB1bmRlciBjZXJ0YWluIGNpcmN1bXN0YW5jZXMsIHRvIHByb3ZpZGUgdGhlIHNhbWUgdmFsdWUgZm9yXG4gICAgICAvLyBgb2JqZWN0YCBhbmQgYG90aGVyYC4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qYXNoa2VuYXMvdW5kZXJzY29yZS9wdWxsLzEyNDdcbiAgICAgIC8vIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICAvL1xuICAgICAgLy8gVGhpcyBhbHNvIGVuc3VyZXMgYSBzdGFibGUgc29ydCBpbiBWOCBhbmQgb3RoZXIgZW5naW5lcy5cbiAgICAgIC8vIFNlZSBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD05MCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgcmV0dXJuIG9iamVjdC5pbmRleCAtIG90aGVyLmluZGV4O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgdGhhdCBpcyB0aGUgY29tcG9zaXRpb24gb2YgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLFxuICAgICAqIHBsYWNlaG9sZGVycywgYW5kIHByb3ZpZGVkIGFyZ3VtZW50cyBpbnRvIGEgc2luZ2xlIGFycmF5IG9mIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJncyBUaGUgcHJvdmlkZWQgYXJndW1lbnRzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHBhcnRpYWxzIFRoZSBhcmd1bWVudHMgdG8gcHJlcGVuZCB0byB0aG9zZSBwcm92aWRlZC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBob2xkZXJzIFRoZSBgcGFydGlhbHNgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHBhcmFtcyB7Ym9vbGVhbn0gW2lzQ3VycmllZF0gU3BlY2lmeSBjb21wb3NpbmcgZm9yIGEgY3VycmllZCBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjb21wb3NlZCBhcmd1bWVudHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29tcG9zZUFyZ3MoYXJncywgcGFydGlhbHMsIGhvbGRlcnMsIGlzQ3VycmllZCkge1xuICAgICAgdmFyIGFyZ3NJbmRleCA9IC0xLFxuICAgICAgICAgIGFyZ3NMZW5ndGggPSBhcmdzLmxlbmd0aCxcbiAgICAgICAgICBob2xkZXJzTGVuZ3RoID0gaG9sZGVycy5sZW5ndGgsXG4gICAgICAgICAgbGVmdEluZGV4ID0gLTEsXG4gICAgICAgICAgbGVmdExlbmd0aCA9IHBhcnRpYWxzLmxlbmd0aCxcbiAgICAgICAgICByYW5nZUxlbmd0aCA9IG5hdGl2ZU1heChhcmdzTGVuZ3RoIC0gaG9sZGVyc0xlbmd0aCwgMCksXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkobGVmdExlbmd0aCArIHJhbmdlTGVuZ3RoKSxcbiAgICAgICAgICBpc1VuY3VycmllZCA9ICFpc0N1cnJpZWQ7XG5cbiAgICAgIHdoaWxlICgrK2xlZnRJbmRleCA8IGxlZnRMZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W2xlZnRJbmRleF0gPSBwYXJ0aWFsc1tsZWZ0SW5kZXhdO1xuICAgICAgfVxuICAgICAgd2hpbGUgKCsrYXJnc0luZGV4IDwgaG9sZGVyc0xlbmd0aCkge1xuICAgICAgICBpZiAoaXNVbmN1cnJpZWQgfHwgYXJnc0luZGV4IDwgYXJnc0xlbmd0aCkge1xuICAgICAgICAgIHJlc3VsdFtob2xkZXJzW2FyZ3NJbmRleF1dID0gYXJnc1thcmdzSW5kZXhdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB3aGlsZSAocmFuZ2VMZW5ndGgtLSkge1xuICAgICAgICByZXN1bHRbbGVmdEluZGV4KytdID0gYXJnc1thcmdzSW5kZXgrK107XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgY29tcG9zZUFyZ3NgIGV4Y2VwdCB0aGF0IHRoZSBhcmd1bWVudHMgY29tcG9zaXRpb25cbiAgICAgKiBpcyB0YWlsb3JlZCBmb3IgYF8ucGFydGlhbFJpZ2h0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJncyBUaGUgcHJvdmlkZWQgYXJndW1lbnRzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHBhcnRpYWxzIFRoZSBhcmd1bWVudHMgdG8gYXBwZW5kIHRvIHRob3NlIHByb3ZpZGVkLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGhvbGRlcnMgVGhlIGBwYXJ0aWFsc2AgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICAgKiBAcGFyYW1zIHtib29sZWFufSBbaXNDdXJyaWVkXSBTcGVjaWZ5IGNvbXBvc2luZyBmb3IgYSBjdXJyaWVkIGZ1bmN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGNvbXBvc2VkIGFyZ3VtZW50cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb21wb3NlQXJnc1JpZ2h0KGFyZ3MsIHBhcnRpYWxzLCBob2xkZXJzLCBpc0N1cnJpZWQpIHtcbiAgICAgIHZhciBhcmdzSW5kZXggPSAtMSxcbiAgICAgICAgICBhcmdzTGVuZ3RoID0gYXJncy5sZW5ndGgsXG4gICAgICAgICAgaG9sZGVyc0luZGV4ID0gLTEsXG4gICAgICAgICAgaG9sZGVyc0xlbmd0aCA9IGhvbGRlcnMubGVuZ3RoLFxuICAgICAgICAgIHJpZ2h0SW5kZXggPSAtMSxcbiAgICAgICAgICByaWdodExlbmd0aCA9IHBhcnRpYWxzLmxlbmd0aCxcbiAgICAgICAgICByYW5nZUxlbmd0aCA9IG5hdGl2ZU1heChhcmdzTGVuZ3RoIC0gaG9sZGVyc0xlbmd0aCwgMCksXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkocmFuZ2VMZW5ndGggKyByaWdodExlbmd0aCksXG4gICAgICAgICAgaXNVbmN1cnJpZWQgPSAhaXNDdXJyaWVkO1xuXG4gICAgICB3aGlsZSAoKythcmdzSW5kZXggPCByYW5nZUxlbmd0aCkge1xuICAgICAgICByZXN1bHRbYXJnc0luZGV4XSA9IGFyZ3NbYXJnc0luZGV4XTtcbiAgICAgIH1cbiAgICAgIHZhciBvZmZzZXQgPSBhcmdzSW5kZXg7XG4gICAgICB3aGlsZSAoKytyaWdodEluZGV4IDwgcmlnaHRMZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W29mZnNldCArIHJpZ2h0SW5kZXhdID0gcGFydGlhbHNbcmlnaHRJbmRleF07XG4gICAgICB9XG4gICAgICB3aGlsZSAoKytob2xkZXJzSW5kZXggPCBob2xkZXJzTGVuZ3RoKSB7XG4gICAgICAgIGlmIChpc1VuY3VycmllZCB8fCBhcmdzSW5kZXggPCBhcmdzTGVuZ3RoKSB7XG4gICAgICAgICAgcmVzdWx0W29mZnNldCArIGhvbGRlcnNbaG9sZGVyc0luZGV4XV0gPSBhcmdzW2FyZ3NJbmRleCsrXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb3BpZXMgdGhlIHZhbHVlcyBvZiBgc291cmNlYCB0byBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBzb3VyY2UgVGhlIGFycmF5IHRvIGNvcHkgdmFsdWVzIGZyb20uXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5PVtdXSBUaGUgYXJyYXkgdG8gY29weSB2YWx1ZXMgdG8uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29weUFycmF5KHNvdXJjZSwgYXJyYXkpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHNvdXJjZS5sZW5ndGg7XG5cbiAgICAgIGFycmF5IHx8IChhcnJheSA9IEFycmF5KGxlbmd0aCkpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgYXJyYXlbaW5kZXhdID0gc291cmNlW2luZGV4XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb3BpZXMgcHJvcGVydGllcyBvZiBgc291cmNlYCB0byBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBpZGVudGlmaWVycyB0byBjb3B5LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0PXt9XSBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyB0by5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb3BpZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29weU9iamVjdChzb3VyY2UsIHByb3BzLCBvYmplY3QsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIHZhciBpc05ldyA9ICFvYmplY3Q7XG4gICAgICBvYmplY3QgfHwgKG9iamVjdCA9IHt9KTtcblxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0gcHJvcHNbaW5kZXhdO1xuXG4gICAgICAgIHZhciBuZXdWYWx1ZSA9IGN1c3RvbWl6ZXJcbiAgICAgICAgICA/IGN1c3RvbWl6ZXIob2JqZWN0W2tleV0sIHNvdXJjZVtrZXldLCBrZXksIG9iamVjdCwgc291cmNlKVxuICAgICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIGlmIChuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgbmV3VmFsdWUgPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNOZXcpIHtcbiAgICAgICAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgbmV3VmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvcGllcyBvd24gc3ltYm9scyBvZiBgc291cmNlYCB0byBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyBmcm9tLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0PXt9XSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyB0by5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvcHlTeW1ib2xzKHNvdXJjZSwgb2JqZWN0KSB7XG4gICAgICByZXR1cm4gY29weU9iamVjdChzb3VyY2UsIGdldFN5bWJvbHMoc291cmNlKSwgb2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb3BpZXMgb3duIGFuZCBpbmhlcml0ZWQgc3ltYm9scyBvZiBgc291cmNlYCB0byBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyBmcm9tLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0PXt9XSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyB0by5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvcHlTeW1ib2xzSW4oc291cmNlLCBvYmplY3QpIHtcbiAgICAgIHJldHVybiBjb3B5T2JqZWN0KHNvdXJjZSwgZ2V0U3ltYm9sc0luKHNvdXJjZSksIG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8uZ3JvdXBCeWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHNldHRlciBUaGUgZnVuY3Rpb24gdG8gc2V0IGFjY3VtdWxhdG9yIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaW5pdGlhbGl6ZXJdIFRoZSBhY2N1bXVsYXRvciBvYmplY3QgaW5pdGlhbGl6ZXIuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWdncmVnYXRvciBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVBZ2dyZWdhdG9yKHNldHRlciwgaW5pdGlhbGl6ZXIpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUFnZ3JlZ2F0b3IgOiBiYXNlQWdncmVnYXRvcixcbiAgICAgICAgICAgIGFjY3VtdWxhdG9yID0gaW5pdGlhbGl6ZXIgPyBpbml0aWFsaXplcigpIDoge307XG5cbiAgICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgc2V0dGVyLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMiksIGFjY3VtdWxhdG9yKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8uYXNzaWduYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gYXNzaWduZXIgVGhlIGZ1bmN0aW9uIHRvIGFzc2lnbiB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYXNzaWduZXIgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQXNzaWduZXIoYXNzaWduZXIpIHtcbiAgICAgIHJldHVybiBiYXNlUmVzdChmdW5jdGlvbihvYmplY3QsIHNvdXJjZXMpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgICBsZW5ndGggPSBzb3VyY2VzLmxlbmd0aCxcbiAgICAgICAgICAgIGN1c3RvbWl6ZXIgPSBsZW5ndGggPiAxID8gc291cmNlc1tsZW5ndGggLSAxXSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGd1YXJkID0gbGVuZ3RoID4gMiA/IHNvdXJjZXNbMl0gOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgY3VzdG9taXplciA9IChhc3NpZ25lci5sZW5ndGggPiAzICYmIHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicpXG4gICAgICAgICAgPyAobGVuZ3RoLS0sIGN1c3RvbWl6ZXIpXG4gICAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKHNvdXJjZXNbMF0sIHNvdXJjZXNbMV0sIGd1YXJkKSkge1xuICAgICAgICAgIGN1c3RvbWl6ZXIgPSBsZW5ndGggPCAzID8gdW5kZWZpbmVkIDogY3VzdG9taXplcjtcbiAgICAgICAgICBsZW5ndGggPSAxO1xuICAgICAgICB9XG4gICAgICAgIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIHZhciBzb3VyY2UgPSBzb3VyY2VzW2luZGV4XTtcbiAgICAgICAgICBpZiAoc291cmNlKSB7XG4gICAgICAgICAgICBhc3NpZ25lcihvYmplY3QsIHNvdXJjZSwgaW5kZXgsIGN1c3RvbWl6ZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBiYXNlRWFjaGAgb3IgYGJhc2VFYWNoUmlnaHRgIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlYWNoRnVuYyBUaGUgZnVuY3Rpb24gdG8gaXRlcmF0ZSBvdmVyIGEgY29sbGVjdGlvbi5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBiYXNlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUJhc2VFYWNoKGVhY2hGdW5jLCBmcm9tUmlnaHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgICBpZiAoY29sbGVjdGlvbiA9PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb247XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc0FycmF5TGlrZShjb2xsZWN0aW9uKSkge1xuICAgICAgICAgIHJldHVybiBlYWNoRnVuYyhjb2xsZWN0aW9uLCBpdGVyYXRlZSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoLFxuICAgICAgICAgICAgaW5kZXggPSBmcm9tUmlnaHQgPyBsZW5ndGggOiAtMSxcbiAgICAgICAgICAgIGl0ZXJhYmxlID0gT2JqZWN0KGNvbGxlY3Rpb24pO1xuXG4gICAgICAgIHdoaWxlICgoZnJvbVJpZ2h0ID8gaW5kZXgtLSA6ICsraW5kZXggPCBsZW5ndGgpKSB7XG4gICAgICAgICAgaWYgKGl0ZXJhdGVlKGl0ZXJhYmxlW2luZGV4XSwgaW5kZXgsIGl0ZXJhYmxlKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29sbGVjdGlvbjtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGJhc2UgZnVuY3Rpb24gZm9yIG1ldGhvZHMgbGlrZSBgXy5mb3JJbmAgYW5kIGBfLmZvck93bmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJhc2UgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQmFzZUZvcihmcm9tUmlnaHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QsIGl0ZXJhdGVlLCBrZXlzRnVuYykge1xuICAgICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICAgIGl0ZXJhYmxlID0gT2JqZWN0KG9iamVjdCksXG4gICAgICAgICAgICBwcm9wcyA9IGtleXNGdW5jKG9iamVjdCksXG4gICAgICAgICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgICAgdmFyIGtleSA9IHByb3BzW2Zyb21SaWdodCA/IGxlbmd0aCA6ICsraW5kZXhdO1xuICAgICAgICAgIGlmIChpdGVyYXRlZShpdGVyYWJsZVtrZXldLCBrZXksIGl0ZXJhYmxlKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCB3cmFwcyBgZnVuY2AgdG8gaW52b2tlIGl0IHdpdGggdGhlIG9wdGlvbmFsIGB0aGlzYFxuICAgICAqIGJpbmRpbmcgb2YgYHRoaXNBcmdgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUJpbmQoZnVuYywgYml0bWFzaywgdGhpc0FyZykge1xuICAgICAgdmFyIGlzQmluZCA9IGJpdG1hc2sgJiBXUkFQX0JJTkRfRkxBRyxcbiAgICAgICAgICBDdG9yID0gY3JlYXRlQ3RvcihmdW5jKTtcblxuICAgICAgZnVuY3Rpb24gd3JhcHBlcigpIHtcbiAgICAgICAgdmFyIGZuID0gKHRoaXMgJiYgdGhpcyAhPT0gcm9vdCAmJiB0aGlzIGluc3RhbmNlb2Ygd3JhcHBlcikgPyBDdG9yIDogZnVuYztcbiAgICAgICAgcmV0dXJuIGZuLmFwcGx5KGlzQmluZCA/IHRoaXNBcmcgOiB0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdyYXBwZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8ubG93ZXJGaXJzdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2ROYW1lIFRoZSBuYW1lIG9mIHRoZSBgU3RyaW5nYCBjYXNlIG1ldGhvZCB0byB1c2UuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FzZSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVDYXNlRmlyc3QobWV0aG9kTmFtZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHN0cmluZykge1xuICAgICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuXG4gICAgICAgIHZhciBzdHJTeW1ib2xzID0gaGFzVW5pY29kZShzdHJpbmcpXG4gICAgICAgICAgPyBzdHJpbmdUb0FycmF5KHN0cmluZylcbiAgICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgICB2YXIgY2hyID0gc3RyU3ltYm9sc1xuICAgICAgICAgID8gc3RyU3ltYm9sc1swXVxuICAgICAgICAgIDogc3RyaW5nLmNoYXJBdCgwKTtcblxuICAgICAgICB2YXIgdHJhaWxpbmcgPSBzdHJTeW1ib2xzXG4gICAgICAgICAgPyBjYXN0U2xpY2Uoc3RyU3ltYm9scywgMSkuam9pbignJylcbiAgICAgICAgICA6IHN0cmluZy5zbGljZSgxKTtcblxuICAgICAgICByZXR1cm4gY2hyW21ldGhvZE5hbWVdKCkgKyB0cmFpbGluZztcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8uY2FtZWxDYXNlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGZ1bmN0aW9uIHRvIGNvbWJpbmUgZWFjaCB3b3JkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNvbXBvdW5kZXIgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQ29tcG91bmRlcihjYWxsYmFjaykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHN0cmluZykge1xuICAgICAgICByZXR1cm4gYXJyYXlSZWR1Y2Uod29yZHMoZGVidXJyKHN0cmluZykucmVwbGFjZShyZUFwb3MsICcnKSksIGNhbGxiYWNrLCAnJyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHByb2R1Y2VzIGFuIGluc3RhbmNlIG9mIGBDdG9yYCByZWdhcmRsZXNzIG9mXG4gICAgICogd2hldGhlciBpdCB3YXMgaW52b2tlZCBhcyBwYXJ0IG9mIGEgYG5ld2AgZXhwcmVzc2lvbiBvciBieSBgY2FsbGAgb3IgYGFwcGx5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gQ3RvciBUaGUgY29uc3RydWN0b3IgdG8gd3JhcC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUN0b3IoQ3Rvcikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBVc2UgYSBgc3dpdGNoYCBzdGF0ZW1lbnQgdG8gd29yayB3aXRoIGNsYXNzIGNvbnN0cnVjdG9ycy4gU2VlXG4gICAgICAgIC8vIGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtZnVuY3Rpb24tb2JqZWN0cy1jYWxsLXRoaXNhcmd1bWVudC1hcmd1bWVudHNsaXN0XG4gICAgICAgIC8vIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgICAgY2FzZSAwOiByZXR1cm4gbmV3IEN0b3I7XG4gICAgICAgICAgY2FzZSAxOiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSk7XG4gICAgICAgICAgY2FzZSAyOiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgICAgICAgY2FzZSA0OiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7XG4gICAgICAgICAgY2FzZSA1OiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSwgYXJnc1s0XSk7XG4gICAgICAgICAgY2FzZSA2OiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSwgYXJnc1s0XSwgYXJnc1s1XSk7XG4gICAgICAgICAgY2FzZSA3OiByZXR1cm4gbmV3IEN0b3IoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSwgYXJnc1s0XSwgYXJnc1s1XSwgYXJnc1s2XSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHRoaXNCaW5kaW5nID0gYmFzZUNyZWF0ZShDdG9yLnByb3RvdHlwZSksXG4gICAgICAgICAgICByZXN1bHQgPSBDdG9yLmFwcGx5KHRoaXNCaW5kaW5nLCBhcmdzKTtcblxuICAgICAgICAvLyBNaW1pYyB0aGUgY29uc3RydWN0b3IncyBgcmV0dXJuYCBiZWhhdmlvci5cbiAgICAgICAgLy8gU2VlIGh0dHBzOi8vZXM1LmdpdGh1Yi5pby8jeDEzLjIuMiBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgICByZXR1cm4gaXNPYmplY3QocmVzdWx0KSA/IHJlc3VsdCA6IHRoaXNCaW5kaW5nO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCB3cmFwcyBgZnVuY2AgdG8gZW5hYmxlIGN1cnJ5aW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGFyaXR5IFRoZSBhcml0eSBvZiBgZnVuY2AuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVDdXJyeShmdW5jLCBiaXRtYXNrLCBhcml0eSkge1xuICAgICAgdmFyIEN0b3IgPSBjcmVhdGVDdG9yKGZ1bmMpO1xuXG4gICAgICBmdW5jdGlvbiB3cmFwcGVyKCkge1xuICAgICAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcbiAgICAgICAgICAgIGFyZ3MgPSBBcnJheShsZW5ndGgpLFxuICAgICAgICAgICAgaW5kZXggPSBsZW5ndGgsXG4gICAgICAgICAgICBwbGFjZWhvbGRlciA9IGdldEhvbGRlcih3cmFwcGVyKTtcblxuICAgICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICAgIGFyZ3NbaW5kZXhdID0gYXJndW1lbnRzW2luZGV4XTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaG9sZGVycyA9IChsZW5ndGggPCAzICYmIGFyZ3NbMF0gIT09IHBsYWNlaG9sZGVyICYmIGFyZ3NbbGVuZ3RoIC0gMV0gIT09IHBsYWNlaG9sZGVyKVxuICAgICAgICAgID8gW11cbiAgICAgICAgICA6IHJlcGxhY2VIb2xkZXJzKGFyZ3MsIHBsYWNlaG9sZGVyKTtcblxuICAgICAgICBsZW5ndGggLT0gaG9sZGVycy5sZW5ndGg7XG4gICAgICAgIGlmIChsZW5ndGggPCBhcml0eSkge1xuICAgICAgICAgIHJldHVybiBjcmVhdGVSZWN1cnJ5KFxuICAgICAgICAgICAgZnVuYywgYml0bWFzaywgY3JlYXRlSHlicmlkLCB3cmFwcGVyLnBsYWNlaG9sZGVyLCB1bmRlZmluZWQsXG4gICAgICAgICAgICBhcmdzLCBob2xkZXJzLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgYXJpdHkgLSBsZW5ndGgpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBmbiA9ICh0aGlzICYmIHRoaXMgIT09IHJvb3QgJiYgdGhpcyBpbnN0YW5jZW9mIHdyYXBwZXIpID8gQ3RvciA6IGZ1bmM7XG4gICAgICAgIHJldHVybiBhcHBseShmbiwgdGhpcywgYXJncyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gd3JhcHBlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYF8uZmluZGAgb3IgYF8uZmluZExhc3RgIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmaW5kSW5kZXhGdW5jIFRoZSBmdW5jdGlvbiB0byBmaW5kIHRoZSBjb2xsZWN0aW9uIGluZGV4LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZpbmQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlRmluZChmaW5kSW5kZXhGdW5jKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oY29sbGVjdGlvbiwgcHJlZGljYXRlLCBmcm9tSW5kZXgpIHtcbiAgICAgICAgdmFyIGl0ZXJhYmxlID0gT2JqZWN0KGNvbGxlY3Rpb24pO1xuICAgICAgICBpZiAoIWlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pKSB7XG4gICAgICAgICAgdmFyIGl0ZXJhdGVlID0gZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKTtcbiAgICAgICAgICBjb2xsZWN0aW9uID0ga2V5cyhjb2xsZWN0aW9uKTtcbiAgICAgICAgICBwcmVkaWNhdGUgPSBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIGl0ZXJhdGVlKGl0ZXJhYmxlW2tleV0sIGtleSwgaXRlcmFibGUpOyB9O1xuICAgICAgICB9XG4gICAgICAgIHZhciBpbmRleCA9IGZpbmRJbmRleEZ1bmMoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBmcm9tSW5kZXgpO1xuICAgICAgICByZXR1cm4gaW5kZXggPiAtMSA/IGl0ZXJhYmxlW2l0ZXJhdGVlID8gY29sbGVjdGlvbltpbmRleF0gOiBpbmRleF0gOiB1bmRlZmluZWQ7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgXy5mbG93YCBvciBgXy5mbG93UmlnaHRgIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmbG93IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUZsb3coZnJvbVJpZ2h0KSB7XG4gICAgICByZXR1cm4gZmxhdFJlc3QoZnVuY3Rpb24oZnVuY3MpIHtcbiAgICAgICAgdmFyIGxlbmd0aCA9IGZ1bmNzLmxlbmd0aCxcbiAgICAgICAgICAgIGluZGV4ID0gbGVuZ3RoLFxuICAgICAgICAgICAgcHJlcmVxID0gTG9kYXNoV3JhcHBlci5wcm90b3R5cGUudGhydTtcblxuICAgICAgICBpZiAoZnJvbVJpZ2h0KSB7XG4gICAgICAgICAgZnVuY3MucmV2ZXJzZSgpO1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICAgICAgdmFyIGZ1bmMgPSBmdW5jc1tpbmRleF07XG4gICAgICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHByZXJlcSAmJiAhd3JhcHBlciAmJiBnZXRGdW5jTmFtZShmdW5jKSA9PSAnd3JhcHBlcicpIHtcbiAgICAgICAgICAgIHZhciB3cmFwcGVyID0gbmV3IExvZGFzaFdyYXBwZXIoW10sIHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpbmRleCA9IHdyYXBwZXIgPyBpbmRleCA6IGxlbmd0aDtcbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICBmdW5jID0gZnVuY3NbaW5kZXhdO1xuXG4gICAgICAgICAgdmFyIGZ1bmNOYW1lID0gZ2V0RnVuY05hbWUoZnVuYyksXG4gICAgICAgICAgICAgIGRhdGEgPSBmdW5jTmFtZSA9PSAnd3JhcHBlcicgPyBnZXREYXRhKGZ1bmMpIDogdW5kZWZpbmVkO1xuXG4gICAgICAgICAgaWYgKGRhdGEgJiYgaXNMYXppYWJsZShkYXRhWzBdKSAmJlxuICAgICAgICAgICAgICAgIGRhdGFbMV0gPT0gKFdSQVBfQVJZX0ZMQUcgfCBXUkFQX0NVUlJZX0ZMQUcgfCBXUkFQX1BBUlRJQUxfRkxBRyB8IFdSQVBfUkVBUkdfRkxBRykgJiZcbiAgICAgICAgICAgICAgICAhZGF0YVs0XS5sZW5ndGggJiYgZGF0YVs5XSA9PSAxXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgd3JhcHBlciA9IHdyYXBwZXJbZ2V0RnVuY05hbWUoZGF0YVswXSldLmFwcGx5KHdyYXBwZXIsIGRhdGFbM10pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB3cmFwcGVyID0gKGZ1bmMubGVuZ3RoID09IDEgJiYgaXNMYXppYWJsZShmdW5jKSlcbiAgICAgICAgICAgICAgPyB3cmFwcGVyW2Z1bmNOYW1lXSgpXG4gICAgICAgICAgICAgIDogd3JhcHBlci50aHJ1KGZ1bmMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgICAgIHZhbHVlID0gYXJnc1swXTtcblxuICAgICAgICAgIGlmICh3cmFwcGVyICYmIGFyZ3MubGVuZ3RoID09IDEgJiYgaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB3cmFwcGVyLnBsYW50KHZhbHVlKS52YWx1ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgaW5kZXggPSAwLFxuICAgICAgICAgICAgICByZXN1bHQgPSBsZW5ndGggPyBmdW5jc1tpbmRleF0uYXBwbHkodGhpcywgYXJncykgOiB2YWx1ZTtcblxuICAgICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBmdW5jc1tpbmRleF0uY2FsbCh0aGlzLCByZXN1bHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd3JhcHMgYGZ1bmNgIHRvIGludm9rZSBpdCB3aXRoIG9wdGlvbmFsIGB0aGlzYFxuICAgICAqIGJpbmRpbmcgb2YgYHRoaXNBcmdgLCBwYXJ0aWFsIGFwcGxpY2F0aW9uLCBhbmQgY3VycnlpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258c3RyaW5nfSBmdW5jIFRoZSBmdW5jdGlvbiBvciBtZXRob2QgbmFtZSB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gcHJlcGVuZCB0byB0aG9zZSBwcm92aWRlZCB0b1xuICAgICAqICB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtob2xkZXJzXSBUaGUgYHBhcnRpYWxzYCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwYXJ0aWFsc1JpZ2h0XSBUaGUgYXJndW1lbnRzIHRvIGFwcGVuZCB0byB0aG9zZSBwcm92aWRlZFxuICAgICAqICB0byB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtob2xkZXJzUmlnaHRdIFRoZSBgcGFydGlhbHNSaWdodGAgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbYXJnUG9zXSBUaGUgYXJndW1lbnQgcG9zaXRpb25zIG9mIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcnldIFRoZSBhcml0eSBjYXAgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJpdHldIFRoZSBhcml0eSBvZiBgZnVuY2AuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVIeWJyaWQoZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMsIGhvbGRlcnMsIHBhcnRpYWxzUmlnaHQsIGhvbGRlcnNSaWdodCwgYXJnUG9zLCBhcnksIGFyaXR5KSB7XG4gICAgICB2YXIgaXNBcnkgPSBiaXRtYXNrICYgV1JBUF9BUllfRkxBRyxcbiAgICAgICAgICBpc0JpbmQgPSBiaXRtYXNrICYgV1JBUF9CSU5EX0ZMQUcsXG4gICAgICAgICAgaXNCaW5kS2V5ID0gYml0bWFzayAmIFdSQVBfQklORF9LRVlfRkxBRyxcbiAgICAgICAgICBpc0N1cnJpZWQgPSBiaXRtYXNrICYgKFdSQVBfQ1VSUllfRkxBRyB8IFdSQVBfQ1VSUllfUklHSFRfRkxBRyksXG4gICAgICAgICAgaXNGbGlwID0gYml0bWFzayAmIFdSQVBfRkxJUF9GTEFHLFxuICAgICAgICAgIEN0b3IgPSBpc0JpbmRLZXkgPyB1bmRlZmluZWQgOiBjcmVhdGVDdG9yKGZ1bmMpO1xuXG4gICAgICBmdW5jdGlvbiB3cmFwcGVyKCkge1xuICAgICAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcbiAgICAgICAgICAgIGFyZ3MgPSBBcnJheShsZW5ndGgpLFxuICAgICAgICAgICAgaW5kZXggPSBsZW5ndGg7XG5cbiAgICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgICBhcmdzW2luZGV4XSA9IGFyZ3VtZW50c1tpbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQ3VycmllZCkge1xuICAgICAgICAgIHZhciBwbGFjZWhvbGRlciA9IGdldEhvbGRlcih3cmFwcGVyKSxcbiAgICAgICAgICAgICAgaG9sZGVyc0NvdW50ID0gY291bnRIb2xkZXJzKGFyZ3MsIHBsYWNlaG9sZGVyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFydGlhbHMpIHtcbiAgICAgICAgICBhcmdzID0gY29tcG9zZUFyZ3MoYXJncywgcGFydGlhbHMsIGhvbGRlcnMsIGlzQ3VycmllZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcnRpYWxzUmlnaHQpIHtcbiAgICAgICAgICBhcmdzID0gY29tcG9zZUFyZ3NSaWdodChhcmdzLCBwYXJ0aWFsc1JpZ2h0LCBob2xkZXJzUmlnaHQsIGlzQ3VycmllZCk7XG4gICAgICAgIH1cbiAgICAgICAgbGVuZ3RoIC09IGhvbGRlcnNDb3VudDtcbiAgICAgICAgaWYgKGlzQ3VycmllZCAmJiBsZW5ndGggPCBhcml0eSkge1xuICAgICAgICAgIHZhciBuZXdIb2xkZXJzID0gcmVwbGFjZUhvbGRlcnMoYXJncywgcGxhY2Vob2xkZXIpO1xuICAgICAgICAgIHJldHVybiBjcmVhdGVSZWN1cnJ5KFxuICAgICAgICAgICAgZnVuYywgYml0bWFzaywgY3JlYXRlSHlicmlkLCB3cmFwcGVyLnBsYWNlaG9sZGVyLCB0aGlzQXJnLFxuICAgICAgICAgICAgYXJncywgbmV3SG9sZGVycywgYXJnUG9zLCBhcnksIGFyaXR5IC0gbGVuZ3RoXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdGhpc0JpbmRpbmcgPSBpc0JpbmQgPyB0aGlzQXJnIDogdGhpcyxcbiAgICAgICAgICAgIGZuID0gaXNCaW5kS2V5ID8gdGhpc0JpbmRpbmdbZnVuY10gOiBmdW5jO1xuXG4gICAgICAgIGxlbmd0aCA9IGFyZ3MubGVuZ3RoO1xuICAgICAgICBpZiAoYXJnUG9zKSB7XG4gICAgICAgICAgYXJncyA9IHJlb3JkZXIoYXJncywgYXJnUG9zKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0ZsaXAgJiYgbGVuZ3RoID4gMSkge1xuICAgICAgICAgIGFyZ3MucmV2ZXJzZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0FyeSAmJiBhcnkgPCBsZW5ndGgpIHtcbiAgICAgICAgICBhcmdzLmxlbmd0aCA9IGFyeTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcyAmJiB0aGlzICE9PSByb290ICYmIHRoaXMgaW5zdGFuY2VvZiB3cmFwcGVyKSB7XG4gICAgICAgICAgZm4gPSBDdG9yIHx8IGNyZWF0ZUN0b3IoZm4pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmbi5hcHBseSh0aGlzQmluZGluZywgYXJncyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gd3JhcHBlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5pbnZlcnRCeWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHNldHRlciBUaGUgZnVuY3Rpb24gdG8gc2V0IGFjY3VtdWxhdG9yIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB0b0l0ZXJhdGVlIFRoZSBmdW5jdGlvbiB0byByZXNvbHZlIGl0ZXJhdGVlcy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBpbnZlcnRlciBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVJbnZlcnRlcihzZXR0ZXIsIHRvSXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICAgIHJldHVybiBiYXNlSW52ZXJ0ZXIob2JqZWN0LCBzZXR0ZXIsIHRvSXRlcmF0ZWUoaXRlcmF0ZWUpLCB7fSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHBlcmZvcm1zIGEgbWF0aGVtYXRpY2FsIG9wZXJhdGlvbiBvbiB0d28gdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBvcGVyYXRvciBUaGUgZnVuY3Rpb24gdG8gcGVyZm9ybSB0aGUgb3BlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZGVmYXVsdFZhbHVlXSBUaGUgdmFsdWUgdXNlZCBmb3IgYHVuZGVmaW5lZGAgYXJndW1lbnRzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG1hdGhlbWF0aWNhbCBvcGVyYXRpb24gZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlTWF0aE9wZXJhdGlvbihvcGVyYXRvciwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUsIG90aGVyKSB7XG4gICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIG90aGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG90aGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpZiAocmVzdWx0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBvdGhlcjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyB8fCB0eXBlb2Ygb3RoZXIgPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHZhbHVlID0gYmFzZVRvU3RyaW5nKHZhbHVlKTtcbiAgICAgICAgICAgIG90aGVyID0gYmFzZVRvU3RyaW5nKG90aGVyKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFsdWUgPSBiYXNlVG9OdW1iZXIodmFsdWUpO1xuICAgICAgICAgICAgb3RoZXIgPSBiYXNlVG9OdW1iZXIob3RoZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQgPSBvcGVyYXRvcih2YWx1ZSwgb3RoZXIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLm92ZXJgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBhcnJheUZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGl0ZXJhdGUgb3ZlciBpdGVyYXRlZXMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgb3ZlciBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVPdmVyKGFycmF5RnVuYykge1xuICAgICAgcmV0dXJuIGZsYXRSZXN0KGZ1bmN0aW9uKGl0ZXJhdGVlcykge1xuICAgICAgICBpdGVyYXRlZXMgPSBhcnJheU1hcChpdGVyYXRlZXMsIGJhc2VVbmFyeShnZXRJdGVyYXRlZSgpKSk7XG4gICAgICAgIHJldHVybiBiYXNlUmVzdChmdW5jdGlvbihhcmdzKSB7XG4gICAgICAgICAgdmFyIHRoaXNBcmcgPSB0aGlzO1xuICAgICAgICAgIHJldHVybiBhcnJheUZ1bmMoaXRlcmF0ZWVzLCBmdW5jdGlvbihpdGVyYXRlZSkge1xuICAgICAgICAgICAgcmV0dXJuIGFwcGx5KGl0ZXJhdGVlLCB0aGlzQXJnLCBhcmdzKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIHRoZSBwYWRkaW5nIGZvciBgc3RyaW5nYCBiYXNlZCBvbiBgbGVuZ3RoYC4gVGhlIGBjaGFyc2Agc3RyaW5nXG4gICAgICogaXMgdHJ1bmNhdGVkIGlmIHRoZSBudW1iZXIgb2YgY2hhcmFjdGVycyBleGNlZWRzIGBsZW5ndGhgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoIFRoZSBwYWRkaW5nIGxlbmd0aC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPScgJ10gVGhlIHN0cmluZyB1c2VkIGFzIHBhZGRpbmcuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcGFkZGluZyBmb3IgYHN0cmluZ2AuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUGFkZGluZyhsZW5ndGgsIGNoYXJzKSB7XG4gICAgICBjaGFycyA9IGNoYXJzID09PSB1bmRlZmluZWQgPyAnICcgOiBiYXNlVG9TdHJpbmcoY2hhcnMpO1xuXG4gICAgICB2YXIgY2hhcnNMZW5ndGggPSBjaGFycy5sZW5ndGg7XG4gICAgICBpZiAoY2hhcnNMZW5ndGggPCAyKSB7XG4gICAgICAgIHJldHVybiBjaGFyc0xlbmd0aCA/IGJhc2VSZXBlYXQoY2hhcnMsIGxlbmd0aCkgOiBjaGFycztcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSBiYXNlUmVwZWF0KGNoYXJzLCBuYXRpdmVDZWlsKGxlbmd0aCAvIHN0cmluZ1NpemUoY2hhcnMpKSk7XG4gICAgICByZXR1cm4gaGFzVW5pY29kZShjaGFycylcbiAgICAgICAgPyBjYXN0U2xpY2Uoc3RyaW5nVG9BcnJheShyZXN1bHQpLCAwLCBsZW5ndGgpLmpvaW4oJycpXG4gICAgICAgIDogcmVzdWx0LnNsaWNlKDAsIGxlbmd0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd3JhcHMgYGZ1bmNgIHRvIGludm9rZSBpdCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZ1xuICAgICAqIG9mIGB0aGlzQXJnYCBhbmQgYHBhcnRpYWxzYCBwcmVwZW5kZWQgdG8gdGhlIGFyZ3VtZW50cyBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7Kn0gdGhpc0FyZyBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHBhcnRpYWxzIFRoZSBhcmd1bWVudHMgdG8gcHJlcGVuZCB0byB0aG9zZSBwcm92aWRlZCB0b1xuICAgICAqICB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUGFydGlhbChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscykge1xuICAgICAgdmFyIGlzQmluZCA9IGJpdG1hc2sgJiBXUkFQX0JJTkRfRkxBRyxcbiAgICAgICAgICBDdG9yID0gY3JlYXRlQ3RvcihmdW5jKTtcblxuICAgICAgZnVuY3Rpb24gd3JhcHBlcigpIHtcbiAgICAgICAgdmFyIGFyZ3NJbmRleCA9IC0xLFxuICAgICAgICAgICAgYXJnc0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG4gICAgICAgICAgICBsZWZ0SW5kZXggPSAtMSxcbiAgICAgICAgICAgIGxlZnRMZW5ndGggPSBwYXJ0aWFscy5sZW5ndGgsXG4gICAgICAgICAgICBhcmdzID0gQXJyYXkobGVmdExlbmd0aCArIGFyZ3NMZW5ndGgpLFxuICAgICAgICAgICAgZm4gPSAodGhpcyAmJiB0aGlzICE9PSByb290ICYmIHRoaXMgaW5zdGFuY2VvZiB3cmFwcGVyKSA/IEN0b3IgOiBmdW5jO1xuXG4gICAgICAgIHdoaWxlICgrK2xlZnRJbmRleCA8IGxlZnRMZW5ndGgpIHtcbiAgICAgICAgICBhcmdzW2xlZnRJbmRleF0gPSBwYXJ0aWFsc1tsZWZ0SW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlIChhcmdzTGVuZ3RoLS0pIHtcbiAgICAgICAgICBhcmdzW2xlZnRJbmRleCsrXSA9IGFyZ3VtZW50c1srK2FyZ3NJbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFwcGx5KGZuLCBpc0JpbmQgPyB0aGlzQXJnIDogdGhpcywgYXJncyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gd3JhcHBlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYF8ucmFuZ2VgIG9yIGBfLnJhbmdlUmlnaHRgIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyByYW5nZSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVSYW5nZShmcm9tUmlnaHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihzdGFydCwgZW5kLCBzdGVwKSB7XG4gICAgICAgIGlmIChzdGVwICYmIHR5cGVvZiBzdGVwICE9ICdudW1iZXInICYmIGlzSXRlcmF0ZWVDYWxsKHN0YXJ0LCBlbmQsIHN0ZXApKSB7XG4gICAgICAgICAgZW5kID0gc3RlcCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICAvLyBFbnN1cmUgdGhlIHNpZ24gb2YgYC0wYCBpcyBwcmVzZXJ2ZWQuXG4gICAgICAgIHN0YXJ0ID0gdG9GaW5pdGUoc3RhcnQpO1xuICAgICAgICBpZiAoZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBlbmQgPSBzdGFydDtcbiAgICAgICAgICBzdGFydCA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZW5kID0gdG9GaW5pdGUoZW5kKTtcbiAgICAgICAgfVxuICAgICAgICBzdGVwID0gc3RlcCA9PT0gdW5kZWZpbmVkID8gKHN0YXJ0IDwgZW5kID8gMSA6IC0xKSA6IHRvRmluaXRlKHN0ZXApO1xuICAgICAgICByZXR1cm4gYmFzZVJhbmdlKHN0YXJ0LCBlbmQsIHN0ZXAsIGZyb21SaWdodCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHBlcmZvcm1zIGEgcmVsYXRpb25hbCBvcGVyYXRpb24gb24gdHdvIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gb3BlcmF0b3IgVGhlIGZ1bmN0aW9uIHRvIHBlcmZvcm0gdGhlIG9wZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyByZWxhdGlvbmFsIG9wZXJhdGlvbiBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVSZWxhdGlvbmFsT3BlcmF0aW9uKG9wZXJhdG9yKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUsIG90aGVyKSB7XG4gICAgICAgIGlmICghKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyAmJiB0eXBlb2Ygb3RoZXIgPT0gJ3N0cmluZycpKSB7XG4gICAgICAgICAgdmFsdWUgPSB0b051bWJlcih2YWx1ZSk7XG4gICAgICAgICAgb3RoZXIgPSB0b051bWJlcihvdGhlcik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9wZXJhdG9yKHZhbHVlLCBvdGhlcik7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHdyYXBzIGBmdW5jYCB0byBjb250aW51ZSBjdXJyeWluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHdyYXBGdW5jIFRoZSBmdW5jdGlvbiB0byBjcmVhdGUgdGhlIGBmdW5jYCB3cmFwcGVyLlxuICAgICAqIEBwYXJhbSB7Kn0gcGxhY2Vob2xkZXIgVGhlIHBsYWNlaG9sZGVyIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIHByZXBlbmQgdG8gdGhvc2UgcHJvdmlkZWQgdG9cbiAgICAgKiAgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbaG9sZGVyc10gVGhlIGBwYXJ0aWFsc2AgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbYXJnUG9zXSBUaGUgYXJndW1lbnQgcG9zaXRpb25zIG9mIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcnldIFRoZSBhcml0eSBjYXAgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJpdHldIFRoZSBhcml0eSBvZiBgZnVuY2AuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVSZWN1cnJ5KGZ1bmMsIGJpdG1hc2ssIHdyYXBGdW5jLCBwbGFjZWhvbGRlciwgdGhpc0FyZywgcGFydGlhbHMsIGhvbGRlcnMsIGFyZ1BvcywgYXJ5LCBhcml0eSkge1xuICAgICAgdmFyIGlzQ3VycnkgPSBiaXRtYXNrICYgV1JBUF9DVVJSWV9GTEFHLFxuICAgICAgICAgIG5ld0hvbGRlcnMgPSBpc0N1cnJ5ID8gaG9sZGVycyA6IHVuZGVmaW5lZCxcbiAgICAgICAgICBuZXdIb2xkZXJzUmlnaHQgPSBpc0N1cnJ5ID8gdW5kZWZpbmVkIDogaG9sZGVycyxcbiAgICAgICAgICBuZXdQYXJ0aWFscyA9IGlzQ3VycnkgPyBwYXJ0aWFscyA6IHVuZGVmaW5lZCxcbiAgICAgICAgICBuZXdQYXJ0aWFsc1JpZ2h0ID0gaXNDdXJyeSA/IHVuZGVmaW5lZCA6IHBhcnRpYWxzO1xuXG4gICAgICBiaXRtYXNrIHw9IChpc0N1cnJ5ID8gV1JBUF9QQVJUSUFMX0ZMQUcgOiBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRyk7XG4gICAgICBiaXRtYXNrICY9IH4oaXNDdXJyeSA/IFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHIDogV1JBUF9QQVJUSUFMX0ZMQUcpO1xuXG4gICAgICBpZiAoIShiaXRtYXNrICYgV1JBUF9DVVJSWV9CT1VORF9GTEFHKSkge1xuICAgICAgICBiaXRtYXNrICY9IH4oV1JBUF9CSU5EX0ZMQUcgfCBXUkFQX0JJTkRfS0VZX0ZMQUcpO1xuICAgICAgfVxuICAgICAgdmFyIG5ld0RhdGEgPSBbXG4gICAgICAgIGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIG5ld1BhcnRpYWxzLCBuZXdIb2xkZXJzLCBuZXdQYXJ0aWFsc1JpZ2h0LFxuICAgICAgICBuZXdIb2xkZXJzUmlnaHQsIGFyZ1BvcywgYXJ5LCBhcml0eVxuICAgICAgXTtcblxuICAgICAgdmFyIHJlc3VsdCA9IHdyYXBGdW5jLmFwcGx5KHVuZGVmaW5lZCwgbmV3RGF0YSk7XG4gICAgICBpZiAoaXNMYXppYWJsZShmdW5jKSkge1xuICAgICAgICBzZXREYXRhKHJlc3VsdCwgbmV3RGF0YSk7XG4gICAgICB9XG4gICAgICByZXN1bHQucGxhY2Vob2xkZXIgPSBwbGFjZWhvbGRlcjtcbiAgICAgIHJldHVybiBzZXRXcmFwVG9TdHJpbmcocmVzdWx0LCBmdW5jLCBiaXRtYXNrKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5yb3VuZGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2ROYW1lIFRoZSBuYW1lIG9mIHRoZSBgTWF0aGAgbWV0aG9kIHRvIHVzZSB3aGVuIHJvdW5kaW5nLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHJvdW5kIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVJvdW5kKG1ldGhvZE5hbWUpIHtcbiAgICAgIHZhciBmdW5jID0gTWF0aFttZXRob2ROYW1lXTtcbiAgICAgIHJldHVybiBmdW5jdGlvbihudW1iZXIsIHByZWNpc2lvbikge1xuICAgICAgICBudW1iZXIgPSB0b051bWJlcihudW1iZXIpO1xuICAgICAgICBwcmVjaXNpb24gPSBwcmVjaXNpb24gPT0gbnVsbCA/IDAgOiBuYXRpdmVNaW4odG9JbnRlZ2VyKHByZWNpc2lvbiksIDI5Mik7XG4gICAgICAgIGlmIChwcmVjaXNpb24pIHtcbiAgICAgICAgICAvLyBTaGlmdCB3aXRoIGV4cG9uZW50aWFsIG5vdGF0aW9uIHRvIGF2b2lkIGZsb2F0aW5nLXBvaW50IGlzc3Vlcy5cbiAgICAgICAgICAvLyBTZWUgW01ETl0oaHR0cHM6Ly9tZG4uaW8vcm91bmQjRXhhbXBsZXMpIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICAgICAgdmFyIHBhaXIgPSAodG9TdHJpbmcobnVtYmVyKSArICdlJykuc3BsaXQoJ2UnKSxcbiAgICAgICAgICAgICAgdmFsdWUgPSBmdW5jKHBhaXJbMF0gKyAnZScgKyAoK3BhaXJbMV0gKyBwcmVjaXNpb24pKTtcblxuICAgICAgICAgIHBhaXIgPSAodG9TdHJpbmcodmFsdWUpICsgJ2UnKS5zcGxpdCgnZScpO1xuICAgICAgICAgIHJldHVybiArKHBhaXJbMF0gKyAnZScgKyAoK3BhaXJbMV0gLSBwcmVjaXNpb24pKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuYyhudW1iZXIpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2V0IG9iamVjdCBvZiBgdmFsdWVzYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gYWRkIHRvIHRoZSBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IHNldC5cbiAgICAgKi9cbiAgICB2YXIgY3JlYXRlU2V0ID0gIShTZXQgJiYgKDEgLyBzZXRUb0FycmF5KG5ldyBTZXQoWywtMF0pKVsxXSkgPT0gSU5GSU5JVFkpID8gbm9vcCA6IGZ1bmN0aW9uKHZhbHVlcykge1xuICAgICAgcmV0dXJuIG5ldyBTZXQodmFsdWVzKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBfLnRvUGFpcnNgIG9yIGBfLnRvUGFpcnNJbmAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYSBnaXZlbiBvYmplY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcGFpcnMgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlVG9QYWlycyhrZXlzRnVuYykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICB2YXIgdGFnID0gZ2V0VGFnKG9iamVjdCk7XG4gICAgICAgIGlmICh0YWcgPT0gbWFwVGFnKSB7XG4gICAgICAgICAgcmV0dXJuIG1hcFRvQXJyYXkob2JqZWN0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGFnID09IHNldFRhZykge1xuICAgICAgICAgIHJldHVybiBzZXRUb1BhaXJzKG9iamVjdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJhc2VUb1BhaXJzKG9iamVjdCwga2V5c0Z1bmMob2JqZWN0KSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGVpdGhlciBjdXJyaWVzIG9yIGludm9rZXMgYGZ1bmNgIHdpdGggb3B0aW9uYWxcbiAgICAgKiBgdGhpc2AgYmluZGluZyBhbmQgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufHN0cmluZ30gZnVuYyBUaGUgZnVuY3Rpb24gb3IgbWV0aG9kIG5hbWUgdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy5cbiAgICAgKiAgICAxIC0gYF8uYmluZGBcbiAgICAgKiAgICAyIC0gYF8uYmluZEtleWBcbiAgICAgKiAgICA0IC0gYF8uY3VycnlgIG9yIGBfLmN1cnJ5UmlnaHRgIG9mIGEgYm91bmQgZnVuY3Rpb25cbiAgICAgKiAgICA4IC0gYF8uY3VycnlgXG4gICAgICogICAxNiAtIGBfLmN1cnJ5UmlnaHRgXG4gICAgICogICAzMiAtIGBfLnBhcnRpYWxgXG4gICAgICogICA2NCAtIGBfLnBhcnRpYWxSaWdodGBcbiAgICAgKiAgMTI4IC0gYF8ucmVhcmdgXG4gICAgICogIDI1NiAtIGBfLmFyeWBcbiAgICAgKiAgNTEyIC0gYF8uZmxpcGBcbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBiZSBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbaG9sZGVyc10gVGhlIGBwYXJ0aWFsc2AgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbYXJnUG9zXSBUaGUgYXJndW1lbnQgcG9zaXRpb25zIG9mIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcnldIFRoZSBhcml0eSBjYXAgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJpdHldIFRoZSBhcml0eSBvZiBgZnVuY2AuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVXcmFwKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzLCBob2xkZXJzLCBhcmdQb3MsIGFyeSwgYXJpdHkpIHtcbiAgICAgIHZhciBpc0JpbmRLZXkgPSBiaXRtYXNrICYgV1JBUF9CSU5EX0tFWV9GTEFHO1xuICAgICAgaWYgKCFpc0JpbmRLZXkgJiYgdHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICB2YXIgbGVuZ3RoID0gcGFydGlhbHMgPyBwYXJ0aWFscy5sZW5ndGggOiAwO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgYml0bWFzayAmPSB+KFdSQVBfUEFSVElBTF9GTEFHIHwgV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcpO1xuICAgICAgICBwYXJ0aWFscyA9IGhvbGRlcnMgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBhcnkgPSBhcnkgPT09IHVuZGVmaW5lZCA/IGFyeSA6IG5hdGl2ZU1heCh0b0ludGVnZXIoYXJ5KSwgMCk7XG4gICAgICBhcml0eSA9IGFyaXR5ID09PSB1bmRlZmluZWQgPyBhcml0eSA6IHRvSW50ZWdlcihhcml0eSk7XG4gICAgICBsZW5ndGggLT0gaG9sZGVycyA/IGhvbGRlcnMubGVuZ3RoIDogMDtcblxuICAgICAgaWYgKGJpdG1hc2sgJiBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRykge1xuICAgICAgICB2YXIgcGFydGlhbHNSaWdodCA9IHBhcnRpYWxzLFxuICAgICAgICAgICAgaG9sZGVyc1JpZ2h0ID0gaG9sZGVycztcblxuICAgICAgICBwYXJ0aWFscyA9IGhvbGRlcnMgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICB2YXIgZGF0YSA9IGlzQmluZEtleSA/IHVuZGVmaW5lZCA6IGdldERhdGEoZnVuYyk7XG5cbiAgICAgIHZhciBuZXdEYXRhID0gW1xuICAgICAgICBmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscywgaG9sZGVycywgcGFydGlhbHNSaWdodCwgaG9sZGVyc1JpZ2h0LFxuICAgICAgICBhcmdQb3MsIGFyeSwgYXJpdHlcbiAgICAgIF07XG5cbiAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgIG1lcmdlRGF0YShuZXdEYXRhLCBkYXRhKTtcbiAgICAgIH1cbiAgICAgIGZ1bmMgPSBuZXdEYXRhWzBdO1xuICAgICAgYml0bWFzayA9IG5ld0RhdGFbMV07XG4gICAgICB0aGlzQXJnID0gbmV3RGF0YVsyXTtcbiAgICAgIHBhcnRpYWxzID0gbmV3RGF0YVszXTtcbiAgICAgIGhvbGRlcnMgPSBuZXdEYXRhWzRdO1xuICAgICAgYXJpdHkgPSBuZXdEYXRhWzldID0gbmV3RGF0YVs5XSA9PT0gdW5kZWZpbmVkXG4gICAgICAgID8gKGlzQmluZEtleSA/IDAgOiBmdW5jLmxlbmd0aClcbiAgICAgICAgOiBuYXRpdmVNYXgobmV3RGF0YVs5XSAtIGxlbmd0aCwgMCk7XG5cbiAgICAgIGlmICghYXJpdHkgJiYgYml0bWFzayAmIChXUkFQX0NVUlJZX0ZMQUcgfCBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcpKSB7XG4gICAgICAgIGJpdG1hc2sgJj0gfihXUkFQX0NVUlJZX0ZMQUcgfCBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcpO1xuICAgICAgfVxuICAgICAgaWYgKCFiaXRtYXNrIHx8IGJpdG1hc2sgPT0gV1JBUF9CSU5EX0ZMQUcpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGNyZWF0ZUJpbmQoZnVuYywgYml0bWFzaywgdGhpc0FyZyk7XG4gICAgICB9IGVsc2UgaWYgKGJpdG1hc2sgPT0gV1JBUF9DVVJSWV9GTEFHIHx8IGJpdG1hc2sgPT0gV1JBUF9DVVJSWV9SSUdIVF9GTEFHKSB7XG4gICAgICAgIHJlc3VsdCA9IGNyZWF0ZUN1cnJ5KGZ1bmMsIGJpdG1hc2ssIGFyaXR5KTtcbiAgICAgIH0gZWxzZSBpZiAoKGJpdG1hc2sgPT0gV1JBUF9QQVJUSUFMX0ZMQUcgfHwgYml0bWFzayA9PSAoV1JBUF9CSU5EX0ZMQUcgfCBXUkFQX1BBUlRJQUxfRkxBRykpICYmICFob2xkZXJzLmxlbmd0aCkge1xuICAgICAgICByZXN1bHQgPSBjcmVhdGVQYXJ0aWFsKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdCA9IGNyZWF0ZUh5YnJpZC5hcHBseSh1bmRlZmluZWQsIG5ld0RhdGEpO1xuICAgICAgfVxuICAgICAgdmFyIHNldHRlciA9IGRhdGEgPyBiYXNlU2V0RGF0YSA6IHNldERhdGE7XG4gICAgICByZXR1cm4gc2V0V3JhcFRvU3RyaW5nKHNldHRlcihyZXN1bHQsIG5ld0RhdGEpLCBmdW5jLCBiaXRtYXNrKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIGJ5IGBfLmRlZmF1bHRzYCB0byBjdXN0b21pemUgaXRzIGBfLmFzc2lnbkluYCB1c2UgdG8gYXNzaWduIHByb3BlcnRpZXNcbiAgICAgKiBvZiBzb3VyY2Ugb2JqZWN0cyB0byB0aGUgZGVzdGluYXRpb24gb2JqZWN0IGZvciBhbGwgZGVzdGluYXRpb24gcHJvcGVydGllc1xuICAgICAqIHRoYXQgcmVzb2x2ZSB0byBgdW5kZWZpbmVkYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSBvYmpWYWx1ZSBUaGUgZGVzdGluYXRpb24gdmFsdWUuXG4gICAgICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgc291cmNlIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHBhcmVudCBvYmplY3Qgb2YgYG9ialZhbHVlYC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgdmFsdWUgdG8gYXNzaWduLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGN1c3RvbURlZmF1bHRzQXNzaWduSW4ob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCkge1xuICAgICAgaWYgKG9ialZhbHVlID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAoZXEob2JqVmFsdWUsIG9iamVjdFByb3RvW2tleV0pICYmICFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkpIHtcbiAgICAgICAgcmV0dXJuIHNyY1ZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9ialZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZWQgYnkgYF8uZGVmYXVsdHNEZWVwYCB0byBjdXN0b21pemUgaXRzIGBfLm1lcmdlYCB1c2UgdG8gbWVyZ2Ugc291cmNlXG4gICAgICogb2JqZWN0cyBpbnRvIGRlc3RpbmF0aW9uIG9iamVjdHMgdGhhdCBhcmUgcGFzc2VkIHRocnUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gb2JqVmFsdWUgVGhlIGRlc3RpbmF0aW9uIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHNvdXJjZSB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIG1lcmdlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHBhcmVudCBvYmplY3Qgb2YgYG9ialZhbHVlYC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBwYXJlbnQgb2JqZWN0IG9mIGBzcmNWYWx1ZWAuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBzb3VyY2UgdmFsdWVzIGFuZCB0aGVpciBtZXJnZWRcbiAgICAgKiAgY291bnRlcnBhcnRzLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3VzdG9tRGVmYXVsdHNNZXJnZShvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKSB7XG4gICAgICBpZiAoaXNPYmplY3Qob2JqVmFsdWUpICYmIGlzT2JqZWN0KHNyY1ZhbHVlKSkge1xuICAgICAgICAvLyBSZWN1cnNpdmVseSBtZXJnZSBvYmplY3RzIGFuZCBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgc3RhY2suc2V0KHNyY1ZhbHVlLCBvYmpWYWx1ZSk7XG4gICAgICAgIGJhc2VNZXJnZShvYmpWYWx1ZSwgc3JjVmFsdWUsIHVuZGVmaW5lZCwgY3VzdG9tRGVmYXVsdHNNZXJnZSwgc3RhY2spO1xuICAgICAgICBzdGFja1snZGVsZXRlJ10oc3JjVmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9ialZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZWQgYnkgYF8ub21pdGAgdG8gY3VzdG9taXplIGl0cyBgXy5jbG9uZURlZXBgIHVzZSB0byBvbmx5IGNsb25lIHBsYWluXG4gICAgICogb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHVuY2xvbmVkIHZhbHVlIG9yIGB1bmRlZmluZWRgIHRvIGRlZmVyIGNsb25pbmcgdG8gYF8uY2xvbmVEZWVwYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjdXN0b21PbWl0Q2xvbmUodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc1BsYWluT2JqZWN0KHZhbHVlKSA/IHVuZGVmaW5lZCA6IHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3IgYXJyYXlzIHdpdGggc3VwcG9ydCBmb3JcbiAgICAgKiBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IG90aGVyIFRoZSBvdGhlciBhcnJheSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYGFycmF5YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYXJyYXlzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXF1YWxBcnJheXMoYXJyYXksIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gICAgICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHLFxuICAgICAgICAgIGFyckxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICBvdGhMZW5ndGggPSBvdGhlci5sZW5ndGg7XG5cbiAgICAgIGlmIChhcnJMZW5ndGggIT0gb3RoTGVuZ3RoICYmICEoaXNQYXJ0aWFsICYmIG90aExlbmd0aCA+IGFyckxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgLy8gQXNzdW1lIGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICAgICAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQoYXJyYXkpO1xuICAgICAgaWYgKHN0YWNrZWQgJiYgc3RhY2suZ2V0KG90aGVyKSkge1xuICAgICAgICByZXR1cm4gc3RhY2tlZCA9PSBvdGhlcjtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIHJlc3VsdCA9IHRydWUsXG4gICAgICAgICAgc2VlbiA9IChiaXRtYXNrICYgQ09NUEFSRV9VTk9SREVSRURfRkxBRykgPyBuZXcgU2V0Q2FjaGUgOiB1bmRlZmluZWQ7XG5cbiAgICAgIHN0YWNrLnNldChhcnJheSwgb3RoZXIpO1xuICAgICAgc3RhY2suc2V0KG90aGVyLCBhcnJheSk7XG5cbiAgICAgIC8vIElnbm9yZSBub24taW5kZXggcHJvcGVydGllcy5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgYXJyTGVuZ3RoKSB7XG4gICAgICAgIHZhciBhcnJWYWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIG90aFZhbHVlID0gb3RoZXJbaW5kZXhdO1xuXG4gICAgICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICAgICAgdmFyIGNvbXBhcmVkID0gaXNQYXJ0aWFsXG4gICAgICAgICAgICA/IGN1c3RvbWl6ZXIob3RoVmFsdWUsIGFyclZhbHVlLCBpbmRleCwgb3RoZXIsIGFycmF5LCBzdGFjaylcbiAgICAgICAgICAgIDogY3VzdG9taXplcihhcnJWYWx1ZSwgb3RoVmFsdWUsIGluZGV4LCBhcnJheSwgb3RoZXIsIHN0YWNrKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29tcGFyZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmIChjb21wYXJlZCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgIGlmIChzZWVuKSB7XG4gICAgICAgICAgaWYgKCFhcnJheVNvbWUob3RoZXIsIGZ1bmN0aW9uKG90aFZhbHVlLCBvdGhJbmRleCkge1xuICAgICAgICAgICAgICAgIGlmICghY2FjaGVIYXMoc2Vlbiwgb3RoSW5kZXgpICYmXG4gICAgICAgICAgICAgICAgICAgIChhcnJWYWx1ZSA9PT0gb3RoVmFsdWUgfHwgZXF1YWxGdW5jKGFyclZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spKSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlZW4ucHVzaChvdGhJbmRleCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KSkge1xuICAgICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoIShcbiAgICAgICAgICAgICAgYXJyVmFsdWUgPT09IG90aFZhbHVlIHx8XG4gICAgICAgICAgICAgICAgZXF1YWxGdW5jKGFyclZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spXG4gICAgICAgICAgICApKSB7XG4gICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHN0YWNrWydkZWxldGUnXShhcnJheSk7XG4gICAgICBzdGFja1snZGVsZXRlJ10ob3RoZXIpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIGNvbXBhcmluZyBvYmplY3RzIG9mXG4gICAgICogdGhlIHNhbWUgYHRvU3RyaW5nVGFnYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIGZ1bmN0aW9uIG9ubHkgc3VwcG9ydHMgY29tcGFyaW5nIHZhbHVlcyB3aXRoIHRhZ3Mgb2ZcbiAgICAgKiBgQm9vbGVhbmAsIGBEYXRlYCwgYEVycm9yYCwgYE51bWJlcmAsIGBSZWdFeHBgLCBvciBgU3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFnIFRoZSBgdG9TdHJpbmdUYWdgIG9mIHRoZSBvYmplY3RzIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVxdWFsQnlUYWcob2JqZWN0LCBvdGhlciwgdGFnLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gICAgICBzd2l0Y2ggKHRhZykge1xuICAgICAgICBjYXNlIGRhdGFWaWV3VGFnOlxuICAgICAgICAgIGlmICgob2JqZWN0LmJ5dGVMZW5ndGggIT0gb3RoZXIuYnl0ZUxlbmd0aCkgfHxcbiAgICAgICAgICAgICAgKG9iamVjdC5ieXRlT2Zmc2V0ICE9IG90aGVyLmJ5dGVPZmZzZXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIG9iamVjdCA9IG9iamVjdC5idWZmZXI7XG4gICAgICAgICAgb3RoZXIgPSBvdGhlci5idWZmZXI7XG5cbiAgICAgICAgY2FzZSBhcnJheUJ1ZmZlclRhZzpcbiAgICAgICAgICBpZiAoKG9iamVjdC5ieXRlTGVuZ3RoICE9IG90aGVyLmJ5dGVMZW5ndGgpIHx8XG4gICAgICAgICAgICAgICFlcXVhbEZ1bmMobmV3IFVpbnQ4QXJyYXkob2JqZWN0KSwgbmV3IFVpbnQ4QXJyYXkob3RoZXIpKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcblxuICAgICAgICBjYXNlIGJvb2xUYWc6XG4gICAgICAgIGNhc2UgZGF0ZVRhZzpcbiAgICAgICAgY2FzZSBudW1iZXJUYWc6XG4gICAgICAgICAgLy8gQ29lcmNlIGJvb2xlYW5zIHRvIGAxYCBvciBgMGAgYW5kIGRhdGVzIHRvIG1pbGxpc2Vjb25kcy5cbiAgICAgICAgICAvLyBJbnZhbGlkIGRhdGVzIGFyZSBjb2VyY2VkIHRvIGBOYU5gLlxuICAgICAgICAgIHJldHVybiBlcSgrb2JqZWN0LCArb3RoZXIpO1xuXG4gICAgICAgIGNhc2UgZXJyb3JUYWc6XG4gICAgICAgICAgcmV0dXJuIG9iamVjdC5uYW1lID09IG90aGVyLm5hbWUgJiYgb2JqZWN0Lm1lc3NhZ2UgPT0gb3RoZXIubWVzc2FnZTtcblxuICAgICAgICBjYXNlIHJlZ2V4cFRhZzpcbiAgICAgICAgY2FzZSBzdHJpbmdUYWc6XG4gICAgICAgICAgLy8gQ29lcmNlIHJlZ2V4ZXMgdG8gc3RyaW5ncyBhbmQgdHJlYXQgc3RyaW5ncywgcHJpbWl0aXZlcyBhbmQgb2JqZWN0cyxcbiAgICAgICAgICAvLyBhcyBlcXVhbC4gU2VlIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1yZWdleHAucHJvdG90eXBlLnRvc3RyaW5nXG4gICAgICAgICAgLy8gZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgICAgICByZXR1cm4gb2JqZWN0ID09IChvdGhlciArICcnKTtcblxuICAgICAgICBjYXNlIG1hcFRhZzpcbiAgICAgICAgICB2YXIgY29udmVydCA9IG1hcFRvQXJyYXk7XG5cbiAgICAgICAgY2FzZSBzZXRUYWc6XG4gICAgICAgICAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRztcbiAgICAgICAgICBjb252ZXJ0IHx8IChjb252ZXJ0ID0gc2V0VG9BcnJheSk7XG5cbiAgICAgICAgICBpZiAob2JqZWN0LnNpemUgIT0gb3RoZXIuc2l6ZSAmJiAhaXNQYXJ0aWFsKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIEFzc3VtZSBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgICAgICAgICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldChvYmplY3QpO1xuICAgICAgICAgIGlmIChzdGFja2VkKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RhY2tlZCA9PSBvdGhlcjtcbiAgICAgICAgICB9XG4gICAgICAgICAgYml0bWFzayB8PSBDT01QQVJFX1VOT1JERVJFRF9GTEFHO1xuXG4gICAgICAgICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBvYmplY3RzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgICAgc3RhY2suc2V0KG9iamVjdCwgb3RoZXIpO1xuICAgICAgICAgIHZhciByZXN1bHQgPSBlcXVhbEFycmF5cyhjb252ZXJ0KG9iamVjdCksIGNvbnZlcnQob3RoZXIpLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbiAgICAgICAgICBzdGFja1snZGVsZXRlJ10ob2JqZWN0KTtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuXG4gICAgICAgIGNhc2Ugc3ltYm9sVGFnOlxuICAgICAgICAgIGlmIChzeW1ib2xWYWx1ZU9mKSB7XG4gICAgICAgICAgICByZXR1cm4gc3ltYm9sVmFsdWVPZi5jYWxsKG9iamVjdCkgPT0gc3ltYm9sVmFsdWVPZi5jYWxsKG90aGVyKTtcbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBvYmplY3RzIHdpdGggc3VwcG9ydCBmb3JcbiAgICAgKiBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVxdWFsT2JqZWN0cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gICAgICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHLFxuICAgICAgICAgIG9ialByb3BzID0gZ2V0QWxsS2V5cyhvYmplY3QpLFxuICAgICAgICAgIG9iakxlbmd0aCA9IG9ialByb3BzLmxlbmd0aCxcbiAgICAgICAgICBvdGhQcm9wcyA9IGdldEFsbEtleXMob3RoZXIpLFxuICAgICAgICAgIG90aExlbmd0aCA9IG90aFByb3BzLmxlbmd0aDtcblxuICAgICAgaWYgKG9iakxlbmd0aCAhPSBvdGhMZW5ndGggJiYgIWlzUGFydGlhbCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBvYmpMZW5ndGg7XG4gICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICB2YXIga2V5ID0gb2JqUHJvcHNbaW5kZXhdO1xuICAgICAgICBpZiAoIShpc1BhcnRpYWwgPyBrZXkgaW4gb3RoZXIgOiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG90aGVyLCBrZXkpKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gQXNzdW1lIGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICAgICAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQob2JqZWN0KTtcbiAgICAgIGlmIChzdGFja2VkICYmIHN0YWNrLmdldChvdGhlcikpIHtcbiAgICAgICAgcmV0dXJuIHN0YWNrZWQgPT0gb3RoZXI7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gdHJ1ZTtcbiAgICAgIHN0YWNrLnNldChvYmplY3QsIG90aGVyKTtcbiAgICAgIHN0YWNrLnNldChvdGhlciwgb2JqZWN0KTtcblxuICAgICAgdmFyIHNraXBDdG9yID0gaXNQYXJ0aWFsO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBvYmpMZW5ndGgpIHtcbiAgICAgICAga2V5ID0gb2JqUHJvcHNbaW5kZXhdO1xuICAgICAgICB2YXIgb2JqVmFsdWUgPSBvYmplY3Rba2V5XSxcbiAgICAgICAgICAgIG90aFZhbHVlID0gb3RoZXJba2V5XTtcblxuICAgICAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgICAgIHZhciBjb21wYXJlZCA9IGlzUGFydGlhbFxuICAgICAgICAgICAgPyBjdXN0b21pemVyKG90aFZhbHVlLCBvYmpWYWx1ZSwga2V5LCBvdGhlciwgb2JqZWN0LCBzdGFjaylcbiAgICAgICAgICAgIDogY3VzdG9taXplcihvYmpWYWx1ZSwgb3RoVmFsdWUsIGtleSwgb2JqZWN0LCBvdGhlciwgc3RhY2spO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICBpZiAoIShjb21wYXJlZCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgID8gKG9ialZhbHVlID09PSBvdGhWYWx1ZSB8fCBlcXVhbEZ1bmMob2JqVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykpXG4gICAgICAgICAgICAgIDogY29tcGFyZWRcbiAgICAgICAgICAgICkpIHtcbiAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBza2lwQ3RvciB8fCAoc2tpcEN0b3IgPSBrZXkgPT0gJ2NvbnN0cnVjdG9yJyk7XG4gICAgICB9XG4gICAgICBpZiAocmVzdWx0ICYmICFza2lwQ3Rvcikge1xuICAgICAgICB2YXIgb2JqQ3RvciA9IG9iamVjdC5jb25zdHJ1Y3RvcixcbiAgICAgICAgICAgIG90aEN0b3IgPSBvdGhlci5jb25zdHJ1Y3RvcjtcblxuICAgICAgICAvLyBOb24gYE9iamVjdGAgb2JqZWN0IGluc3RhbmNlcyB3aXRoIGRpZmZlcmVudCBjb25zdHJ1Y3RvcnMgYXJlIG5vdCBlcXVhbC5cbiAgICAgICAgaWYgKG9iakN0b3IgIT0gb3RoQ3RvciAmJlxuICAgICAgICAgICAgKCdjb25zdHJ1Y3RvcicgaW4gb2JqZWN0ICYmICdjb25zdHJ1Y3RvcicgaW4gb3RoZXIpICYmXG4gICAgICAgICAgICAhKHR5cGVvZiBvYmpDdG9yID09ICdmdW5jdGlvbicgJiYgb2JqQ3RvciBpbnN0YW5jZW9mIG9iakN0b3IgJiZcbiAgICAgICAgICAgICAgdHlwZW9mIG90aEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBvdGhDdG9yIGluc3RhbmNlb2Ygb3RoQ3RvcikpIHtcbiAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgc3RhY2tbJ2RlbGV0ZSddKG9iamVjdCk7XG4gICAgICBzdGFja1snZGVsZXRlJ10ob3RoZXIpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VSZXN0YCB3aGljaCBmbGF0dGVucyB0aGUgcmVzdCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0UmVzdChmdW5jKSB7XG4gICAgICByZXR1cm4gc2V0VG9TdHJpbmcob3ZlclJlc3QoZnVuYywgdW5kZWZpbmVkLCBmbGF0dGVuKSwgZnVuYyArICcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRBbGxLZXlzKG9iamVjdCkge1xuICAgICAgcmV0dXJuIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5cywgZ2V0U3ltYm9scyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZFxuICAgICAqIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEFsbEtleXNJbihvYmplY3QpIHtcbiAgICAgIHJldHVybiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXNJbiwgZ2V0U3ltYm9sc0luKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIG1ldGFkYXRhIGZvciBgZnVuY2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtZXRhZGF0YSBmb3IgYGZ1bmNgLlxuICAgICAqL1xuICAgIHZhciBnZXREYXRhID0gIW1ldGFNYXAgPyBub29wIDogZnVuY3Rpb24oZnVuYykge1xuICAgICAgcmV0dXJuIG1ldGFNYXAuZ2V0KGZ1bmMpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBuYW1lIG9mIGBmdW5jYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZnVuY3Rpb24gbmFtZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRGdW5jTmFtZShmdW5jKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gKGZ1bmMubmFtZSArICcnKSxcbiAgICAgICAgICBhcnJheSA9IHJlYWxOYW1lc1tyZXN1bHRdLFxuICAgICAgICAgIGxlbmd0aCA9IGhhc093blByb3BlcnR5LmNhbGwocmVhbE5hbWVzLCByZXN1bHQpID8gYXJyYXkubGVuZ3RoIDogMDtcblxuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHZhciBkYXRhID0gYXJyYXlbbGVuZ3RoXSxcbiAgICAgICAgICAgIG90aGVyRnVuYyA9IGRhdGEuZnVuYztcbiAgICAgICAgaWYgKG90aGVyRnVuYyA9PSBudWxsIHx8IG90aGVyRnVuYyA9PSBmdW5jKSB7XG4gICAgICAgICAgcmV0dXJuIGRhdGEubmFtZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBhcmd1bWVudCBwbGFjZWhvbGRlciB2YWx1ZSBmb3IgYGZ1bmNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwbGFjZWhvbGRlciB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRIb2xkZXIoZnVuYykge1xuICAgICAgdmFyIG9iamVjdCA9IGhhc093blByb3BlcnR5LmNhbGwobG9kYXNoLCAncGxhY2Vob2xkZXInKSA/IGxvZGFzaCA6IGZ1bmM7XG4gICAgICByZXR1cm4gb2JqZWN0LnBsYWNlaG9sZGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGFwcHJvcHJpYXRlIFwiaXRlcmF0ZWVcIiBmdW5jdGlvbi4gSWYgYF8uaXRlcmF0ZWVgIGlzIGN1c3RvbWl6ZWQsXG4gICAgICogdGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSBjdXN0b20gbWV0aG9kLCBvdGhlcndpc2UgaXQgcmV0dXJucyBgYmFzZUl0ZXJhdGVlYC5cbiAgICAgKiBJZiBhcmd1bWVudHMgYXJlIHByb3ZpZGVkLCB0aGUgY2hvc2VuIGZ1bmN0aW9uIGlzIGludm9rZWQgd2l0aCB0aGVtIGFuZFxuICAgICAqIGl0cyByZXN1bHQgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gW3ZhbHVlXSBUaGUgdmFsdWUgdG8gY29udmVydCB0byBhbiBpdGVyYXRlZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5XSBUaGUgYXJpdHkgb2YgdGhlIGNyZWF0ZWQgaXRlcmF0ZWUuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBjaG9zZW4gZnVuY3Rpb24gb3IgaXRzIHJlc3VsdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRJdGVyYXRlZSgpIHtcbiAgICAgIHZhciByZXN1bHQgPSBsb2Rhc2guaXRlcmF0ZWUgfHwgaXRlcmF0ZWU7XG4gICAgICByZXN1bHQgPSByZXN1bHQgPT09IGl0ZXJhdGVlID8gYmFzZUl0ZXJhdGVlIDogcmVzdWx0O1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyByZXN1bHQoYXJndW1lbnRzWzBdLCBhcmd1bWVudHNbMV0pIDogcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGRhdGEgZm9yIGBtYXBgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUgcmVmZXJlbmNlIGtleS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWFwIGRhdGEuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0TWFwRGF0YShtYXAsIGtleSkge1xuICAgICAgdmFyIGRhdGEgPSBtYXAuX19kYXRhX187XG4gICAgICByZXR1cm4gaXNLZXlhYmxlKGtleSlcbiAgICAgICAgPyBkYXRhW3R5cGVvZiBrZXkgPT0gJ3N0cmluZycgPyAnc3RyaW5nJyA6ICdoYXNoJ11cbiAgICAgICAgOiBkYXRhLm1hcDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBwcm9wZXJ0eSBuYW1lcywgdmFsdWVzLCBhbmQgY29tcGFyZSBmbGFncyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbWF0Y2ggZGF0YSBvZiBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRNYXRjaERhdGEob2JqZWN0KSB7XG4gICAgICB2YXIgcmVzdWx0ID0ga2V5cyhvYmplY3QpLFxuICAgICAgICAgIGxlbmd0aCA9IHJlc3VsdC5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICB2YXIga2V5ID0gcmVzdWx0W2xlbmd0aF0sXG4gICAgICAgICAgICB2YWx1ZSA9IG9iamVjdFtrZXldO1xuXG4gICAgICAgIHJlc3VsdFtsZW5ndGhdID0gW2tleSwgdmFsdWUsIGlzU3RyaWN0Q29tcGFyYWJsZSh2YWx1ZSldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBuYXRpdmUgZnVuY3Rpb24gYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIG1ldGhvZCB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGZ1bmN0aW9uIGlmIGl0J3MgbmF0aXZlLCBlbHNlIGB1bmRlZmluZWRgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldE5hdGl2ZShvYmplY3QsIGtleSkge1xuICAgICAgdmFyIHZhbHVlID0gZ2V0VmFsdWUob2JqZWN0LCBrZXkpO1xuICAgICAgcmV0dXJuIGJhc2VJc05hdGl2ZSh2YWx1ZSkgPyB2YWx1ZSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VHZXRUYWdgIHdoaWNoIGlnbm9yZXMgYFN5bWJvbC50b1N0cmluZ1RhZ2AgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByYXcgYHRvU3RyaW5nVGFnYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRSYXdUYWcodmFsdWUpIHtcbiAgICAgIHZhciBpc093biA9IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIHN5bVRvU3RyaW5nVGFnKSxcbiAgICAgICAgICB0YWcgPSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdmFyIHVubWFza2VkID0gdHJ1ZTtcbiAgICAgIH0gY2F0Y2ggKGUpIHt9XG5cbiAgICAgIHZhciByZXN1bHQgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgICAgIGlmICh1bm1hc2tlZCkge1xuICAgICAgICBpZiAoaXNPd24pIHtcbiAgICAgICAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB0YWc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGVsZXRlIHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBzeW1ib2xzLlxuICAgICAqL1xuICAgIHZhciBnZXRTeW1ib2xzID0gIW5hdGl2ZUdldFN5bWJvbHMgPyBzdHViQXJyYXkgOiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgICAgIHJldHVybiBhcnJheUZpbHRlcihuYXRpdmVHZXRTeW1ib2xzKG9iamVjdCksIGZ1bmN0aW9uKHN5bWJvbCkge1xuICAgICAgICByZXR1cm4gcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChvYmplY3QsIHN5bWJvbCk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBzeW1ib2xzLlxuICAgICAqL1xuICAgIHZhciBnZXRTeW1ib2xzSW4gPSAhbmF0aXZlR2V0U3ltYm9scyA/IHN0dWJBcnJheSA6IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgd2hpbGUgKG9iamVjdCkge1xuICAgICAgICBhcnJheVB1c2gocmVzdWx0LCBnZXRTeW1ib2xzKG9iamVjdCkpO1xuICAgICAgICBvYmplY3QgPSBnZXRQcm90b3R5cGUob2JqZWN0KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGB0b1N0cmluZ1RhZ2Agb2YgYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAgICAgKi9cbiAgICB2YXIgZ2V0VGFnID0gYmFzZUdldFRhZztcblxuICAgIC8vIEZhbGxiYWNrIGZvciBkYXRhIHZpZXdzLCBtYXBzLCBzZXRzLCBhbmQgd2VhayBtYXBzIGluIElFIDExIGFuZCBwcm9taXNlcyBpbiBOb2RlLmpzIDwgNi5cbiAgICBpZiAoKERhdGFWaWV3ICYmIGdldFRhZyhuZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKDEpKSkgIT0gZGF0YVZpZXdUYWcpIHx8XG4gICAgICAgIChNYXAgJiYgZ2V0VGFnKG5ldyBNYXApICE9IG1hcFRhZykgfHxcbiAgICAgICAgKFByb21pc2UgJiYgZ2V0VGFnKFByb21pc2UucmVzb2x2ZSgpKSAhPSBwcm9taXNlVGFnKSB8fFxuICAgICAgICAoU2V0ICYmIGdldFRhZyhuZXcgU2V0KSAhPSBzZXRUYWcpIHx8XG4gICAgICAgIChXZWFrTWFwICYmIGdldFRhZyhuZXcgV2Vha01hcCkgIT0gd2Vha01hcFRhZykpIHtcbiAgICAgIGdldFRhZyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBiYXNlR2V0VGFnKHZhbHVlKSxcbiAgICAgICAgICAgIEN0b3IgPSByZXN1bHQgPT0gb2JqZWN0VGFnID8gdmFsdWUuY29uc3RydWN0b3IgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBjdG9yU3RyaW5nID0gQ3RvciA/IHRvU291cmNlKEN0b3IpIDogJyc7XG5cbiAgICAgICAgaWYgKGN0b3JTdHJpbmcpIHtcbiAgICAgICAgICBzd2l0Y2ggKGN0b3JTdHJpbmcpIHtcbiAgICAgICAgICAgIGNhc2UgZGF0YVZpZXdDdG9yU3RyaW5nOiByZXR1cm4gZGF0YVZpZXdUYWc7XG4gICAgICAgICAgICBjYXNlIG1hcEN0b3JTdHJpbmc6IHJldHVybiBtYXBUYWc7XG4gICAgICAgICAgICBjYXNlIHByb21pc2VDdG9yU3RyaW5nOiByZXR1cm4gcHJvbWlzZVRhZztcbiAgICAgICAgICAgIGNhc2Ugc2V0Q3RvclN0cmluZzogcmV0dXJuIHNldFRhZztcbiAgICAgICAgICAgIGNhc2Ugd2Vha01hcEN0b3JTdHJpbmc6IHJldHVybiB3ZWFrTWFwVGFnO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSB2aWV3LCBhcHBseWluZyBhbnkgYHRyYW5zZm9ybXNgIHRvIHRoZSBgc3RhcnRgIGFuZCBgZW5kYCBwb3NpdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgc3RhcnQgb2YgdGhlIHZpZXcuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSB2aWV3LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHRyYW5zZm9ybXMgVGhlIHRyYW5zZm9ybWF0aW9ucyB0byBhcHBseSB0byB0aGUgdmlldy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGFuIG9iamVjdCBjb250YWluaW5nIHRoZSBgc3RhcnRgIGFuZCBgZW5kYFxuICAgICAqICBwb3NpdGlvbnMgb2YgdGhlIHZpZXcuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0VmlldyhzdGFydCwgZW5kLCB0cmFuc2Zvcm1zKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSB0cmFuc2Zvcm1zLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGRhdGEgPSB0cmFuc2Zvcm1zW2luZGV4XSxcbiAgICAgICAgICAgIHNpemUgPSBkYXRhLnNpemU7XG5cbiAgICAgICAgc3dpdGNoIChkYXRhLnR5cGUpIHtcbiAgICAgICAgICBjYXNlICdkcm9wJzogICAgICBzdGFydCArPSBzaXplOyBicmVhaztcbiAgICAgICAgICBjYXNlICdkcm9wUmlnaHQnOiBlbmQgLT0gc2l6ZTsgYnJlYWs7XG4gICAgICAgICAgY2FzZSAndGFrZSc6ICAgICAgZW5kID0gbmF0aXZlTWluKGVuZCwgc3RhcnQgKyBzaXplKTsgYnJlYWs7XG4gICAgICAgICAgY2FzZSAndGFrZVJpZ2h0Jzogc3RhcnQgPSBuYXRpdmVNYXgoc3RhcnQsIGVuZCAtIHNpemUpOyBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHsgJ3N0YXJ0Jzogc3RhcnQsICdlbmQnOiBlbmQgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFeHRyYWN0cyB3cmFwcGVyIGRldGFpbHMgZnJvbSB0aGUgYHNvdXJjZWAgYm9keSBjb21tZW50LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc291cmNlIFRoZSBzb3VyY2UgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHdyYXBwZXIgZGV0YWlscy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRXcmFwRGV0YWlscyhzb3VyY2UpIHtcbiAgICAgIHZhciBtYXRjaCA9IHNvdXJjZS5tYXRjaChyZVdyYXBEZXRhaWxzKTtcbiAgICAgIHJldHVybiBtYXRjaCA/IG1hdGNoWzFdLnNwbGl0KHJlU3BsaXREZXRhaWxzKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgcGF0aGAgZXhpc3RzIG9uIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaGFzRnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2sgcHJvcGVydGllcy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHBhdGhgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc1BhdGgob2JqZWN0LCBwYXRoLCBoYXNGdW5jKSB7XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcblxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSB0b0tleShwYXRoW2luZGV4XSk7XG4gICAgICAgIGlmICghKHJlc3VsdCA9IG9iamVjdCAhPSBudWxsICYmIGhhc0Z1bmMob2JqZWN0LCBrZXkpKSkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIG9iamVjdCA9IG9iamVjdFtrZXldO1xuICAgICAgfVxuICAgICAgaWYgKHJlc3VsdCB8fCArK2luZGV4ICE9IGxlbmd0aCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgbGVuZ3RoID0gb2JqZWN0ID09IG51bGwgPyAwIDogb2JqZWN0Lmxlbmd0aDtcbiAgICAgIHJldHVybiAhIWxlbmd0aCAmJiBpc0xlbmd0aChsZW5ndGgpICYmIGlzSW5kZXgoa2V5LCBsZW5ndGgpICYmXG4gICAgICAgIChpc0FycmF5KG9iamVjdCkgfHwgaXNBcmd1bWVudHMob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgYW4gYXJyYXkgY2xvbmUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGluaXRpYWxpemVkIGNsb25lLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluaXRDbG9uZUFycmF5KGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IG5ldyBhcnJheS5jb25zdHJ1Y3RvcihsZW5ndGgpO1xuXG4gICAgICAvLyBBZGQgcHJvcGVydGllcyBhc3NpZ25lZCBieSBgUmVnRXhwI2V4ZWNgLlxuICAgICAgaWYgKGxlbmd0aCAmJiB0eXBlb2YgYXJyYXlbMF0gPT0gJ3N0cmluZycgJiYgaGFzT3duUHJvcGVydHkuY2FsbChhcnJheSwgJ2luZGV4JykpIHtcbiAgICAgICAgcmVzdWx0LmluZGV4ID0gYXJyYXkuaW5kZXg7XG4gICAgICAgIHJlc3VsdC5pbnB1dCA9IGFycmF5LmlucHV0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyBhbiBvYmplY3QgY2xvbmUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBpbml0aWFsaXplZCBjbG9uZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbml0Q2xvbmVPYmplY3Qob2JqZWN0KSB7XG4gICAgICByZXR1cm4gKHR5cGVvZiBvYmplY3QuY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNQcm90b3R5cGUob2JqZWN0KSlcbiAgICAgICAgPyBiYXNlQ3JlYXRlKGdldFByb3RvdHlwZShvYmplY3QpKVxuICAgICAgICA6IHt9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIGFuIG9iamVjdCBjbG9uZSBiYXNlZCBvbiBpdHMgYHRvU3RyaW5nVGFnYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIGZ1bmN0aW9uIG9ubHkgc3VwcG9ydHMgY2xvbmluZyB2YWx1ZXMgd2l0aCB0YWdzIG9mXG4gICAgICogYEJvb2xlYW5gLCBgRGF0ZWAsIGBFcnJvcmAsIGBNYXBgLCBgTnVtYmVyYCwgYFJlZ0V4cGAsIGBTZXRgLCBvciBgU3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YWcgVGhlIGB0b1N0cmluZ1RhZ2Agb2YgdGhlIG9iamVjdCB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGluaXRpYWxpemVkIGNsb25lLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluaXRDbG9uZUJ5VGFnKG9iamVjdCwgdGFnLCBpc0RlZXApIHtcbiAgICAgIHZhciBDdG9yID0gb2JqZWN0LmNvbnN0cnVjdG9yO1xuICAgICAgc3dpdGNoICh0YWcpIHtcbiAgICAgICAgY2FzZSBhcnJheUJ1ZmZlclRhZzpcbiAgICAgICAgICByZXR1cm4gY2xvbmVBcnJheUJ1ZmZlcihvYmplY3QpO1xuXG4gICAgICAgIGNhc2UgYm9vbFRhZzpcbiAgICAgICAgY2FzZSBkYXRlVGFnOlxuICAgICAgICAgIHJldHVybiBuZXcgQ3Rvcigrb2JqZWN0KTtcblxuICAgICAgICBjYXNlIGRhdGFWaWV3VGFnOlxuICAgICAgICAgIHJldHVybiBjbG9uZURhdGFWaWV3KG9iamVjdCwgaXNEZWVwKTtcblxuICAgICAgICBjYXNlIGZsb2F0MzJUYWc6IGNhc2UgZmxvYXQ2NFRhZzpcbiAgICAgICAgY2FzZSBpbnQ4VGFnOiBjYXNlIGludDE2VGFnOiBjYXNlIGludDMyVGFnOlxuICAgICAgICBjYXNlIHVpbnQ4VGFnOiBjYXNlIHVpbnQ4Q2xhbXBlZFRhZzogY2FzZSB1aW50MTZUYWc6IGNhc2UgdWludDMyVGFnOlxuICAgICAgICAgIHJldHVybiBjbG9uZVR5cGVkQXJyYXkob2JqZWN0LCBpc0RlZXApO1xuXG4gICAgICAgIGNhc2UgbWFwVGFnOlxuICAgICAgICAgIHJldHVybiBuZXcgQ3RvcjtcblxuICAgICAgICBjYXNlIG51bWJlclRhZzpcbiAgICAgICAgY2FzZSBzdHJpbmdUYWc6XG4gICAgICAgICAgcmV0dXJuIG5ldyBDdG9yKG9iamVjdCk7XG5cbiAgICAgICAgY2FzZSByZWdleHBUYWc6XG4gICAgICAgICAgcmV0dXJuIGNsb25lUmVnRXhwKG9iamVjdCk7XG5cbiAgICAgICAgY2FzZSBzZXRUYWc6XG4gICAgICAgICAgcmV0dXJuIG5ldyBDdG9yO1xuXG4gICAgICAgIGNhc2Ugc3ltYm9sVGFnOlxuICAgICAgICAgIHJldHVybiBjbG9uZVN5bWJvbChvYmplY3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluc2VydHMgd3JhcHBlciBgZGV0YWlsc2AgaW4gYSBjb21tZW50IGF0IHRoZSB0b3Agb2YgdGhlIGBzb3VyY2VgIGJvZHkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzb3VyY2UgVGhlIHNvdXJjZSB0byBtb2RpZnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBkZXRhaWxzIFRoZSBkZXRhaWxzIHRvIGluc2VydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBtb2RpZmllZCBzb3VyY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5zZXJ0V3JhcERldGFpbHMoc291cmNlLCBkZXRhaWxzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gZGV0YWlscy5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gc291cmNlO1xuICAgICAgfVxuICAgICAgdmFyIGxhc3RJbmRleCA9IGxlbmd0aCAtIDE7XG4gICAgICBkZXRhaWxzW2xhc3RJbmRleF0gPSAobGVuZ3RoID4gMSA/ICcmICcgOiAnJykgKyBkZXRhaWxzW2xhc3RJbmRleF07XG4gICAgICBkZXRhaWxzID0gZGV0YWlscy5qb2luKGxlbmd0aCA+IDIgPyAnLCAnIDogJyAnKTtcbiAgICAgIHJldHVybiBzb3VyY2UucmVwbGFjZShyZVdyYXBDb21tZW50LCAne1xcbi8qIFt3cmFwcGVkIHdpdGggJyArIGRldGFpbHMgKyAnXSAqL1xcbicpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgZmxhdHRlbmFibGUgYGFyZ3VtZW50c2Agb2JqZWN0IG9yIGFycmF5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBmbGF0dGVuYWJsZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRmxhdHRlbmFibGUodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc0FycmF5KHZhbHVlKSB8fCBpc0FyZ3VtZW50cyh2YWx1ZSkgfHxcbiAgICAgICAgISEoc3ByZWFkYWJsZVN5bWJvbCAmJiB2YWx1ZSAmJiB2YWx1ZVtzcHJlYWRhYmxlU3ltYm9sXSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGluZGV4LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD1NQVhfU0FGRV9JTlRFR0VSXSBUaGUgdXBwZXIgYm91bmRzIG9mIGEgdmFsaWQgaW5kZXguXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBpbmRleCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzSW5kZXgodmFsdWUsIGxlbmd0aCkge1xuICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gICAgICBsZW5ndGggPSBsZW5ndGggPT0gbnVsbCA/IE1BWF9TQUZFX0lOVEVHRVIgOiBsZW5ndGg7XG5cbiAgICAgIHJldHVybiAhIWxlbmd0aCAmJlxuICAgICAgICAodHlwZSA9PSAnbnVtYmVyJyB8fFxuICAgICAgICAgICh0eXBlICE9ICdzeW1ib2wnICYmIHJlSXNVaW50LnRlc3QodmFsdWUpKSkgJiZcbiAgICAgICAgICAgICh2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDwgbGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgdGhlIGdpdmVuIGFyZ3VtZW50cyBhcmUgZnJvbSBhbiBpdGVyYXRlZSBjYWxsLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSBwb3RlbnRpYWwgaXRlcmF0ZWUgdmFsdWUgYXJndW1lbnQuXG4gICAgICogQHBhcmFtIHsqfSBpbmRleCBUaGUgcG90ZW50aWFsIGl0ZXJhdGVlIGluZGV4IG9yIGtleSBhcmd1bWVudC5cbiAgICAgKiBAcGFyYW0geyp9IG9iamVjdCBUaGUgcG90ZW50aWFsIGl0ZXJhdGVlIG9iamVjdCBhcmd1bWVudC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGFyZ3VtZW50cyBhcmUgZnJvbSBhbiBpdGVyYXRlZSBjYWxsLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNJdGVyYXRlZUNhbGwodmFsdWUsIGluZGV4LCBvYmplY3QpIHtcbiAgICAgIGlmICghaXNPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgdHlwZSA9IHR5cGVvZiBpbmRleDtcbiAgICAgIGlmICh0eXBlID09ICdudW1iZXInXG4gICAgICAgICAgICA/IChpc0FycmF5TGlrZShvYmplY3QpICYmIGlzSW5kZXgoaW5kZXgsIG9iamVjdC5sZW5ndGgpKVxuICAgICAgICAgICAgOiAodHlwZSA9PSAnc3RyaW5nJyAmJiBpbmRleCBpbiBvYmplY3QpXG4gICAgICAgICAgKSB7XG4gICAgICAgIHJldHVybiBlcShvYmplY3RbaW5kZXhdLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBwcm9wZXJ0eSBuYW1lIGFuZCBub3QgYSBwcm9wZXJ0eSBwYXRoLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeSBrZXlzIG9uLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvcGVydHkgbmFtZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzS2V5KHZhbHVlLCBvYmplY3QpIHtcbiAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgICAgIGlmICh0eXBlID09ICdudW1iZXInIHx8IHR5cGUgPT0gJ3N5bWJvbCcgfHwgdHlwZSA9PSAnYm9vbGVhbicgfHxcbiAgICAgICAgICB2YWx1ZSA9PSBudWxsIHx8IGlzU3ltYm9sKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZUlzUGxhaW5Qcm9wLnRlc3QodmFsdWUpIHx8ICFyZUlzRGVlcFByb3AudGVzdCh2YWx1ZSkgfHxcbiAgICAgICAgKG9iamVjdCAhPSBudWxsICYmIHZhbHVlIGluIE9iamVjdChvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSBmb3IgdXNlIGFzIHVuaXF1ZSBvYmplY3Qga2V5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzS2V5YWJsZSh2YWx1ZSkge1xuICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gICAgICByZXR1cm4gKHR5cGUgPT0gJ3N0cmluZycgfHwgdHlwZSA9PSAnbnVtYmVyJyB8fCB0eXBlID09ICdzeW1ib2wnIHx8IHR5cGUgPT0gJ2Jvb2xlYW4nKVxuICAgICAgICA/ICh2YWx1ZSAhPT0gJ19fcHJvdG9fXycpXG4gICAgICAgIDogKHZhbHVlID09PSBudWxsKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYGZ1bmNgIGhhcyBhIGxhenkgY291bnRlcnBhcnQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgZnVuY2AgaGFzIGEgbGF6eSBjb3VudGVycGFydCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTGF6aWFibGUoZnVuYykge1xuICAgICAgdmFyIGZ1bmNOYW1lID0gZ2V0RnVuY05hbWUoZnVuYyksXG4gICAgICAgICAgb3RoZXIgPSBsb2Rhc2hbZnVuY05hbWVdO1xuXG4gICAgICBpZiAodHlwZW9mIG90aGVyICE9ICdmdW5jdGlvbicgfHwgIShmdW5jTmFtZSBpbiBMYXp5V3JhcHBlci5wcm90b3R5cGUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChmdW5jID09PSBvdGhlcikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHZhciBkYXRhID0gZ2V0RGF0YShvdGhlcik7XG4gICAgICByZXR1cm4gISFkYXRhICYmIGZ1bmMgPT09IGRhdGFbMF07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBmdW5jYCBoYXMgaXRzIHNvdXJjZSBtYXNrZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgZnVuY2AgaXMgbWFza2VkLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNNYXNrZWQoZnVuYykge1xuICAgICAgcmV0dXJuICEhbWFza1NyY0tleSAmJiAobWFza1NyY0tleSBpbiBmdW5jKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYGZ1bmNgIGlzIGNhcGFibGUgb2YgYmVpbmcgbWFza2VkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGZ1bmNgIGlzIG1hc2thYmxlLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgdmFyIGlzTWFza2FibGUgPSBjb3JlSnNEYXRhID8gaXNGdW5jdGlvbiA6IHN0dWJGYWxzZTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhIHByb3RvdHlwZSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvdG90eXBlLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNQcm90b3R5cGUodmFsdWUpIHtcbiAgICAgIHZhciBDdG9yID0gdmFsdWUgJiYgdmFsdWUuY29uc3RydWN0b3IsXG4gICAgICAgICAgcHJvdG8gPSAodHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBDdG9yLnByb3RvdHlwZSkgfHwgb2JqZWN0UHJvdG87XG5cbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gcHJvdG87XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUgZm9yIHN0cmljdCBlcXVhbGl0eSBjb21wYXJpc29ucywgaS5lLiBgPT09YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaWYgc3VpdGFibGUgZm9yIHN0cmljdFxuICAgICAqICBlcXVhbGl0eSBjb21wYXJpc29ucywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzU3RyaWN0Q29tcGFyYWJsZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZSAmJiAhaXNPYmplY3QodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgbWF0Y2hlc1Byb3BlcnR5YCBmb3Igc291cmNlIHZhbHVlcyBzdWl0YWJsZVxuICAgICAqIGZvciBzdHJpY3QgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGkuZS4gYD09PWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHZhbHVlIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWF0Y2hlc1N0cmljdENvbXBhcmFibGUoa2V5LCBzcmNWYWx1ZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iamVjdFtrZXldID09PSBzcmNWYWx1ZSAmJlxuICAgICAgICAgIChzcmNWYWx1ZSAhPT0gdW5kZWZpbmVkIHx8IChrZXkgaW4gT2JqZWN0KG9iamVjdCkpKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLm1lbW9pemVgIHdoaWNoIGNsZWFycyB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24nc1xuICAgICAqIGNhY2hlIHdoZW4gaXQgZXhjZWVkcyBgTUFYX01FTU9JWkVfU0laRWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGhhdmUgaXRzIG91dHB1dCBtZW1vaXplZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBtZW1vaXplZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtZW1vaXplQ2FwcGVkKGZ1bmMpIHtcbiAgICAgIHZhciByZXN1bHQgPSBtZW1vaXplKGZ1bmMsIGZ1bmN0aW9uKGtleSkge1xuICAgICAgICBpZiAoY2FjaGUuc2l6ZSA9PT0gTUFYX01FTU9JWkVfU0laRSkge1xuICAgICAgICAgIGNhY2hlLmNsZWFyKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGtleTtcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgY2FjaGUgPSByZXN1bHQuY2FjaGU7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1lcmdlcyB0aGUgZnVuY3Rpb24gbWV0YWRhdGEgb2YgYHNvdXJjZWAgaW50byBgZGF0YWAuXG4gICAgICpcbiAgICAgKiBNZXJnaW5nIG1ldGFkYXRhIHJlZHVjZXMgdGhlIG51bWJlciBvZiB3cmFwcGVycyB1c2VkIHRvIGludm9rZSBhIGZ1bmN0aW9uLlxuICAgICAqIFRoaXMgaXMgcG9zc2libGUgYmVjYXVzZSBtZXRob2RzIGxpa2UgYF8uYmluZGAsIGBfLmN1cnJ5YCwgYW5kIGBfLnBhcnRpYWxgXG4gICAgICogbWF5IGJlIGFwcGxpZWQgcmVnYXJkbGVzcyBvZiBleGVjdXRpb24gb3JkZXIuIE1ldGhvZHMgbGlrZSBgXy5hcnlgIGFuZFxuICAgICAqIGBfLnJlYXJnYCBtb2RpZnkgZnVuY3Rpb24gYXJndW1lbnRzLCBtYWtpbmcgdGhlIG9yZGVyIGluIHdoaWNoIHRoZXkgYXJlXG4gICAgICogZXhlY3V0ZWQgaW1wb3J0YW50LCBwcmV2ZW50aW5nIHRoZSBtZXJnaW5nIG9mIG1ldGFkYXRhLiBIb3dldmVyLCB3ZSBtYWtlXG4gICAgICogYW4gZXhjZXB0aW9uIGZvciBhIHNhZmUgY29tYmluZWQgY2FzZSB3aGVyZSBjdXJyaWVkIGZ1bmN0aW9ucyBoYXZlIGBfLmFyeWBcbiAgICAgKiBhbmQgb3IgYF8ucmVhcmdgIGFwcGxpZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGRhdGEgVGhlIGRlc3RpbmF0aW9uIG1ldGFkYXRhLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHNvdXJjZSBUaGUgc291cmNlIG1ldGFkYXRhLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgZGF0YWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWVyZ2VEYXRhKGRhdGEsIHNvdXJjZSkge1xuICAgICAgdmFyIGJpdG1hc2sgPSBkYXRhWzFdLFxuICAgICAgICAgIHNyY0JpdG1hc2sgPSBzb3VyY2VbMV0sXG4gICAgICAgICAgbmV3Qml0bWFzayA9IGJpdG1hc2sgfCBzcmNCaXRtYXNrLFxuICAgICAgICAgIGlzQ29tbW9uID0gbmV3Qml0bWFzayA8IChXUkFQX0JJTkRfRkxBRyB8IFdSQVBfQklORF9LRVlfRkxBRyB8IFdSQVBfQVJZX0ZMQUcpO1xuXG4gICAgICB2YXIgaXNDb21ibyA9XG4gICAgICAgICgoc3JjQml0bWFzayA9PSBXUkFQX0FSWV9GTEFHKSAmJiAoYml0bWFzayA9PSBXUkFQX0NVUlJZX0ZMQUcpKSB8fFxuICAgICAgICAoKHNyY0JpdG1hc2sgPT0gV1JBUF9BUllfRkxBRykgJiYgKGJpdG1hc2sgPT0gV1JBUF9SRUFSR19GTEFHKSAmJiAoZGF0YVs3XS5sZW5ndGggPD0gc291cmNlWzhdKSkgfHxcbiAgICAgICAgKChzcmNCaXRtYXNrID09IChXUkFQX0FSWV9GTEFHIHwgV1JBUF9SRUFSR19GTEFHKSkgJiYgKHNvdXJjZVs3XS5sZW5ndGggPD0gc291cmNlWzhdKSAmJiAoYml0bWFzayA9PSBXUkFQX0NVUlJZX0ZMQUcpKTtcblxuICAgICAgLy8gRXhpdCBlYXJseSBpZiBtZXRhZGF0YSBjYW4ndCBiZSBtZXJnZWQuXG4gICAgICBpZiAoIShpc0NvbW1vbiB8fCBpc0NvbWJvKSkge1xuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgIH1cbiAgICAgIC8vIFVzZSBzb3VyY2UgYHRoaXNBcmdgIGlmIGF2YWlsYWJsZS5cbiAgICAgIGlmIChzcmNCaXRtYXNrICYgV1JBUF9CSU5EX0ZMQUcpIHtcbiAgICAgICAgZGF0YVsyXSA9IHNvdXJjZVsyXTtcbiAgICAgICAgLy8gU2V0IHdoZW4gY3VycnlpbmcgYSBib3VuZCBmdW5jdGlvbi5cbiAgICAgICAgbmV3Qml0bWFzayB8PSBiaXRtYXNrICYgV1JBUF9CSU5EX0ZMQUcgPyAwIDogV1JBUF9DVVJSWV9CT1VORF9GTEFHO1xuICAgICAgfVxuICAgICAgLy8gQ29tcG9zZSBwYXJ0aWFsIGFyZ3VtZW50cy5cbiAgICAgIHZhciB2YWx1ZSA9IHNvdXJjZVszXTtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICB2YXIgcGFydGlhbHMgPSBkYXRhWzNdO1xuICAgICAgICBkYXRhWzNdID0gcGFydGlhbHMgPyBjb21wb3NlQXJncyhwYXJ0aWFscywgdmFsdWUsIHNvdXJjZVs0XSkgOiB2YWx1ZTtcbiAgICAgICAgZGF0YVs0XSA9IHBhcnRpYWxzID8gcmVwbGFjZUhvbGRlcnMoZGF0YVszXSwgUExBQ0VIT0xERVIpIDogc291cmNlWzRdO1xuICAgICAgfVxuICAgICAgLy8gQ29tcG9zZSBwYXJ0aWFsIHJpZ2h0IGFyZ3VtZW50cy5cbiAgICAgIHZhbHVlID0gc291cmNlWzVdO1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHBhcnRpYWxzID0gZGF0YVs1XTtcbiAgICAgICAgZGF0YVs1XSA9IHBhcnRpYWxzID8gY29tcG9zZUFyZ3NSaWdodChwYXJ0aWFscywgdmFsdWUsIHNvdXJjZVs2XSkgOiB2YWx1ZTtcbiAgICAgICAgZGF0YVs2XSA9IHBhcnRpYWxzID8gcmVwbGFjZUhvbGRlcnMoZGF0YVs1XSwgUExBQ0VIT0xERVIpIDogc291cmNlWzZdO1xuICAgICAgfVxuICAgICAgLy8gVXNlIHNvdXJjZSBgYXJnUG9zYCBpZiBhdmFpbGFibGUuXG4gICAgICB2YWx1ZSA9IHNvdXJjZVs3XTtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICBkYXRhWzddID0gdmFsdWU7XG4gICAgICB9XG4gICAgICAvLyBVc2Ugc291cmNlIGBhcnlgIGlmIGl0J3Mgc21hbGxlci5cbiAgICAgIGlmIChzcmNCaXRtYXNrICYgV1JBUF9BUllfRkxBRykge1xuICAgICAgICBkYXRhWzhdID0gZGF0YVs4XSA9PSBudWxsID8gc291cmNlWzhdIDogbmF0aXZlTWluKGRhdGFbOF0sIHNvdXJjZVs4XSk7XG4gICAgICB9XG4gICAgICAvLyBVc2Ugc291cmNlIGBhcml0eWAgaWYgb25lIGlzIG5vdCBwcm92aWRlZC5cbiAgICAgIGlmIChkYXRhWzldID09IG51bGwpIHtcbiAgICAgICAgZGF0YVs5XSA9IHNvdXJjZVs5XTtcbiAgICAgIH1cbiAgICAgIC8vIFVzZSBzb3VyY2UgYGZ1bmNgIGFuZCBtZXJnZSBiaXRtYXNrcy5cbiAgICAgIGRhdGFbMF0gPSBzb3VyY2VbMF07XG4gICAgICBkYXRhWzFdID0gbmV3Qml0bWFzaztcblxuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlXG4gICAgICogW2BPYmplY3Qua2V5c2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5rZXlzKVxuICAgICAqIGV4Y2VwdCB0aGF0IGl0IGluY2x1ZGVzIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnRpZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG5hdGl2ZUtleXNJbihvYmplY3QpIHtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIGlmIChvYmplY3QgIT0gbnVsbCkge1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcgdXNpbmcgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gICAgICovXG4gICAgZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcodmFsdWUpIHtcbiAgICAgIHJldHVybiBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VSZXN0YCB3aGljaCB0cmFuc2Zvcm1zIHRoZSByZXN0IGFycmF5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9ZnVuYy5sZW5ndGgtMV0gVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSByZXN0IHBhcmFtZXRlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIHJlc3QgYXJyYXkgdHJhbnNmb3JtLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG92ZXJSZXN0KGZ1bmMsIHN0YXJ0LCB0cmFuc2Zvcm0pIHtcbiAgICAgIHN0YXJ0ID0gbmF0aXZlTWF4KHN0YXJ0ID09PSB1bmRlZmluZWQgPyAoZnVuYy5sZW5ndGggLSAxKSA6IHN0YXJ0LCAwKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgICBpbmRleCA9IC0xLFxuICAgICAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWF4KGFyZ3MubGVuZ3RoIC0gc3RhcnQsIDApLFxuICAgICAgICAgICAgYXJyYXkgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgYXJyYXlbaW5kZXhdID0gYXJnc1tzdGFydCArIGluZGV4XTtcbiAgICAgICAgfVxuICAgICAgICBpbmRleCA9IC0xO1xuICAgICAgICB2YXIgb3RoZXJBcmdzID0gQXJyYXkoc3RhcnQgKyAxKTtcbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBzdGFydCkge1xuICAgICAgICAgIG90aGVyQXJnc1tpbmRleF0gPSBhcmdzW2luZGV4XTtcbiAgICAgICAgfVxuICAgICAgICBvdGhlckFyZ3Nbc3RhcnRdID0gdHJhbnNmb3JtKGFycmF5KTtcbiAgICAgICAgcmV0dXJuIGFwcGx5KGZ1bmMsIHRoaXMsIG90aGVyQXJncyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHBhcmVudCB2YWx1ZSBhdCBgcGF0aGAgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYXRoIFRoZSBwYXRoIHRvIGdldCB0aGUgcGFyZW50IHZhbHVlIG9mLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwYXJlbnQgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gcGFyZW50KG9iamVjdCwgcGF0aCkge1xuICAgICAgcmV0dXJuIHBhdGgubGVuZ3RoIDwgMiA/IG9iamVjdCA6IGJhc2VHZXQob2JqZWN0LCBiYXNlU2xpY2UocGF0aCwgMCwgLTEpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW9yZGVyIGBhcnJheWAgYWNjb3JkaW5nIHRvIHRoZSBzcGVjaWZpZWQgaW5kZXhlcyB3aGVyZSB0aGUgZWxlbWVudCBhdFxuICAgICAqIHRoZSBmaXJzdCBpbmRleCBpcyBhc3NpZ25lZCBhcyB0aGUgZmlyc3QgZWxlbWVudCwgdGhlIGVsZW1lbnQgYXRcbiAgICAgKiB0aGUgc2Vjb25kIGluZGV4IGlzIGFzc2lnbmVkIGFzIHRoZSBzZWNvbmQgZWxlbWVudCwgYW5kIHNvIG9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcmVvcmRlci5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBpbmRleGVzIFRoZSBhcnJhbmdlZCBhcnJheSBpbmRleGVzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlb3JkZXIoYXJyYXksIGluZGV4ZXMpIHtcbiAgICAgIHZhciBhcnJMZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWluKGluZGV4ZXMubGVuZ3RoLCBhcnJMZW5ndGgpLFxuICAgICAgICAgIG9sZEFycmF5ID0gY29weUFycmF5KGFycmF5KTtcblxuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGluZGV4ZXNbbGVuZ3RoXTtcbiAgICAgICAgYXJyYXlbbGVuZ3RoXSA9IGlzSW5kZXgoaW5kZXgsIGFyckxlbmd0aCkgPyBvbGRBcnJheVtpbmRleF0gOiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgdmFsdWUgYXQgYGtleWAsIHVubGVzcyBga2V5YCBpcyBcIl9fcHJvdG9fX1wiLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHByb3BlcnR5IHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNhZmVHZXQob2JqZWN0LCBrZXkpIHtcbiAgICAgIGlmIChrZXkgPT0gJ19fcHJvdG9fXycpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gb2JqZWN0W2tleV07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyBtZXRhZGF0YSBmb3IgYGZ1bmNgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIElmIHRoaXMgZnVuY3Rpb24gYmVjb21lcyBob3QsIGkuZS4gaXMgaW52b2tlZCBhIGxvdCBpbiBhIHNob3J0XG4gICAgICogcGVyaW9kIG9mIHRpbWUsIGl0IHdpbGwgdHJpcCBpdHMgYnJlYWtlciBhbmQgdHJhbnNpdGlvbiB0byBhbiBpZGVudGl0eVxuICAgICAqIGZ1bmN0aW9uIHRvIGF2b2lkIGdhcmJhZ2UgY29sbGVjdGlvbiBwYXVzZXMgaW4gVjguIFNlZVxuICAgICAqIFtWOCBpc3N1ZSAyMDcwXShodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0yMDcwKVxuICAgICAqIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFzc29jaWF0ZSBtZXRhZGF0YSB3aXRoLlxuICAgICAqIEBwYXJhbSB7Kn0gZGF0YSBUaGUgbWV0YWRhdGEuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBmdW5jYC5cbiAgICAgKi9cbiAgICB2YXIgc2V0RGF0YSA9IHNob3J0T3V0KGJhc2VTZXREYXRhKTtcblxuICAgIC8qKlxuICAgICAqIEEgc2ltcGxlIHdyYXBwZXIgYXJvdW5kIHRoZSBnbG9iYWwgW2BzZXRUaW1lb3V0YF0oaHR0cHM6Ly9tZG4uaW8vc2V0VGltZW91dCkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRlbGF5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB3YWl0IFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGRlbGF5IGludm9jYXRpb24uXG4gICAgICogQHJldHVybnMge251bWJlcnxPYmplY3R9IFJldHVybnMgdGhlIHRpbWVyIGlkIG9yIHRpbWVvdXQgb2JqZWN0LlxuICAgICAqL1xuICAgIHZhciBzZXRUaW1lb3V0ID0gY3R4U2V0VGltZW91dCB8fCBmdW5jdGlvbihmdW5jLCB3YWl0KSB7XG4gICAgICByZXR1cm4gcm9vdC5zZXRUaW1lb3V0KGZ1bmMsIHdhaXQpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBgdG9TdHJpbmdgIG1ldGhvZCBvZiBgZnVuY2AgdG8gcmV0dXJuIGBzdHJpbmdgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc3RyaW5nIFRoZSBgdG9TdHJpbmdgIHJlc3VsdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICAgICAqL1xuICAgIHZhciBzZXRUb1N0cmluZyA9IHNob3J0T3V0KGJhc2VTZXRUb1N0cmluZyk7XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBgdG9TdHJpbmdgIG1ldGhvZCBvZiBgd3JhcHBlcmAgdG8gbWltaWMgdGhlIHNvdXJjZSBvZiBgcmVmZXJlbmNlYFxuICAgICAqIHdpdGggd3JhcHBlciBkZXRhaWxzIGluIGEgY29tbWVudCBhdCB0aGUgdG9wIG9mIHRoZSBzb3VyY2UgYm9keS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gd3JhcHBlciBUaGUgZnVuY3Rpb24gdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHJlZmVyZW5jZSBUaGUgcmVmZXJlbmNlIGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGB3cmFwcGVyYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXRXcmFwVG9TdHJpbmcod3JhcHBlciwgcmVmZXJlbmNlLCBiaXRtYXNrKSB7XG4gICAgICB2YXIgc291cmNlID0gKHJlZmVyZW5jZSArICcnKTtcbiAgICAgIHJldHVybiBzZXRUb1N0cmluZyh3cmFwcGVyLCBpbnNlcnRXcmFwRGV0YWlscyhzb3VyY2UsIHVwZGF0ZVdyYXBEZXRhaWxzKGdldFdyYXBEZXRhaWxzKHNvdXJjZSksIGJpdG1hc2spKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQnbGwgc2hvcnQgb3V0IGFuZCBpbnZva2UgYGlkZW50aXR5YCBpbnN0ZWFkXG4gICAgICogb2YgYGZ1bmNgIHdoZW4gaXQncyBjYWxsZWQgYEhPVF9DT1VOVGAgb3IgbW9yZSB0aW1lcyBpbiBgSE9UX1NQQU5gXG4gICAgICogbWlsbGlzZWNvbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZXN0cmljdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzaG9ydGFibGUgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2hvcnRPdXQoZnVuYykge1xuICAgICAgdmFyIGNvdW50ID0gMCxcbiAgICAgICAgICBsYXN0Q2FsbGVkID0gMDtcblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgc3RhbXAgPSBuYXRpdmVOb3coKSxcbiAgICAgICAgICAgIHJlbWFpbmluZyA9IEhPVF9TUEFOIC0gKHN0YW1wIC0gbGFzdENhbGxlZCk7XG5cbiAgICAgICAgbGFzdENhbGxlZCA9IHN0YW1wO1xuICAgICAgICBpZiAocmVtYWluaW5nID4gMCkge1xuICAgICAgICAgIGlmICgrK2NvdW50ID49IEhPVF9DT1VOVCkge1xuICAgICAgICAgICAgcmV0dXJuIGFyZ3VtZW50c1swXTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY291bnQgPSAwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnNodWZmbGVgIHdoaWNoIG11dGF0ZXMgYW5kIHNldHMgdGhlIHNpemUgb2YgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNodWZmbGUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzaXplPWFycmF5Lmxlbmd0aF0gVGhlIHNpemUgb2YgYGFycmF5YC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzaHVmZmxlU2VsZihhcnJheSwgc2l6ZSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIGxhc3RJbmRleCA9IGxlbmd0aCAtIDE7XG5cbiAgICAgIHNpemUgPSBzaXplID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiBzaXplO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBzaXplKSB7XG4gICAgICAgIHZhciByYW5kID0gYmFzZVJhbmRvbShpbmRleCwgbGFzdEluZGV4KSxcbiAgICAgICAgICAgIHZhbHVlID0gYXJyYXlbcmFuZF07XG5cbiAgICAgICAgYXJyYXlbcmFuZF0gPSBhcnJheVtpbmRleF07XG4gICAgICAgIGFycmF5W2luZGV4XSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgYXJyYXkubGVuZ3RoID0gc2l6ZTtcbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0byBhIHByb3BlcnR5IHBhdGggYXJyYXkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAgICAgKi9cbiAgICB2YXIgc3RyaW5nVG9QYXRoID0gbWVtb2l6ZUNhcHBlZChmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIGlmIChzdHJpbmcuY2hhckNvZGVBdCgwKSA9PT0gNDYgLyogLiAqLykge1xuICAgICAgICByZXN1bHQucHVzaCgnJyk7XG4gICAgICB9XG4gICAgICBzdHJpbmcucmVwbGFjZShyZVByb3BOYW1lLCBmdW5jdGlvbihtYXRjaCwgbnVtYmVyLCBxdW90ZSwgc3ViU3RyaW5nKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKHF1b3RlID8gc3ViU3RyaW5nLnJlcGxhY2UocmVFc2NhcGVDaGFyLCAnJDEnKSA6IChudW1iZXIgfHwgbWF0Y2gpKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcga2V5IGlmIGl0J3Mgbm90IGEgc3RyaW5nIG9yIHN5bWJvbC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfHN5bWJvbH0gUmV0dXJucyB0aGUga2V5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvS2V5KHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8IGlzU3ltYm9sKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gKHZhbHVlICsgJycpO1xuICAgICAgcmV0dXJuIChyZXN1bHQgPT0gJzAnICYmICgxIC8gdmFsdWUpID09IC1JTkZJTklUWSkgPyAnLTAnIDogcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBmdW5jYCB0byBpdHMgc291cmNlIGNvZGUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc291cmNlIGNvZGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9Tb3VyY2UoZnVuYykge1xuICAgICAgaWYgKGZ1bmMgIT0gbnVsbCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHVybiBmdW5jVG9TdHJpbmcuY2FsbChmdW5jKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gKGZ1bmMgKyAnJyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICB9XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB3cmFwcGVyIGBkZXRhaWxzYCBiYXNlZCBvbiBgYml0bWFza2AgZmxhZ3MuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gZGV0YWlscyBUaGUgZGV0YWlscyB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGRldGFpbHNgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVwZGF0ZVdyYXBEZXRhaWxzKGRldGFpbHMsIGJpdG1hc2spIHtcbiAgICAgIGFycmF5RWFjaCh3cmFwRmxhZ3MsIGZ1bmN0aW9uKHBhaXIpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gJ18uJyArIHBhaXJbMF07XG4gICAgICAgIGlmICgoYml0bWFzayAmIHBhaXJbMV0pICYmICFhcnJheUluY2x1ZGVzKGRldGFpbHMsIHZhbHVlKSkge1xuICAgICAgICAgIGRldGFpbHMucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGRldGFpbHMuc29ydCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgd3JhcHBlcmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB3cmFwcGVyIFRoZSB3cmFwcGVyIHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCB3cmFwcGVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJDbG9uZSh3cmFwcGVyKSB7XG4gICAgICBpZiAod3JhcHBlciBpbnN0YW5jZW9mIExhenlXcmFwcGVyKSB7XG4gICAgICAgIHJldHVybiB3cmFwcGVyLmNsb25lKCk7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gbmV3IExvZGFzaFdyYXBwZXIod3JhcHBlci5fX3dyYXBwZWRfXywgd3JhcHBlci5fX2NoYWluX18pO1xuICAgICAgcmVzdWx0Ll9fYWN0aW9uc19fID0gY29weUFycmF5KHdyYXBwZXIuX19hY3Rpb25zX18pO1xuICAgICAgcmVzdWx0Ll9faW5kZXhfXyAgPSB3cmFwcGVyLl9faW5kZXhfXztcbiAgICAgIHJlc3VsdC5fX3ZhbHVlc19fID0gd3JhcHBlci5fX3ZhbHVlc19fO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGVsZW1lbnRzIHNwbGl0IGludG8gZ3JvdXBzIHRoZSBsZW5ndGggb2YgYHNpemVgLlxuICAgICAqIElmIGBhcnJheWAgY2FuJ3QgYmUgc3BsaXQgZXZlbmx5LCB0aGUgZmluYWwgY2h1bmsgd2lsbCBiZSB0aGUgcmVtYWluaW5nXG4gICAgICogZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3NpemU9MV0gVGhlIGxlbmd0aCBvZiBlYWNoIGNodW5rXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjaHVua3MuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY2h1bmsoWydhJywgJ2InLCAnYycsICdkJ10sIDIpO1xuICAgICAqIC8vID0+IFtbJ2EnLCAnYiddLCBbJ2MnLCAnZCddXVxuICAgICAqXG4gICAgICogXy5jaHVuayhbJ2EnLCAnYicsICdjJywgJ2QnXSwgMyk7XG4gICAgICogLy8gPT4gW1snYScsICdiJywgJ2MnXSwgWydkJ11dXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2h1bmsoYXJyYXksIHNpemUsIGd1YXJkKSB7XG4gICAgICBpZiAoKGd1YXJkID8gaXNJdGVyYXRlZUNhbGwoYXJyYXksIHNpemUsIGd1YXJkKSA6IHNpemUgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgc2l6ZSA9IDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzaXplID0gbmF0aXZlTWF4KHRvSW50ZWdlcihzaXplKSwgMCk7XG4gICAgICB9XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCB8fCBzaXplIDwgMSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSAwLFxuICAgICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShuYXRpdmVDZWlsKGxlbmd0aCAvIHNpemUpKTtcblxuICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IGJhc2VTbGljZShhcnJheSwgaW5kZXgsIChpbmRleCArPSBzaXplKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgd2l0aCBhbGwgZmFsc2V5IHZhbHVlcyByZW1vdmVkLiBUaGUgdmFsdWVzIGBmYWxzZWAsIGBudWxsYCxcbiAgICAgKiBgMGAsIGBcIlwiYCwgYHVuZGVmaW5lZGAsIGFuZCBgTmFOYCBhcmUgZmFsc2V5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNvbXBhY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNvbXBhY3QoWzAsIDEsIGZhbHNlLCAyLCAnJywgM10pO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBhY3QoYXJyYXkpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGFycmF5IGNvbmNhdGVuYXRpbmcgYGFycmF5YCB3aXRoIGFueSBhZGRpdGlvbmFsIGFycmF5c1xuICAgICAqIGFuZC9vciB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY29uY2F0ZW5hdGUuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGNvbmNhdGVuYXRlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGNvbmNhdGVuYXRlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzFdO1xuICAgICAqIHZhciBvdGhlciA9IF8uY29uY2F0KGFycmF5LCAyLCBbM10sIFtbNF1dKTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG90aGVyKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgMywgWzRdXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbmNhdCgpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIGFyZ3MgPSBBcnJheShsZW5ndGggLSAxKSxcbiAgICAgICAgICBhcnJheSA9IGFyZ3VtZW50c1swXSxcbiAgICAgICAgICBpbmRleCA9IGxlbmd0aDtcblxuICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgYXJnc1tpbmRleCAtIDFdID0gYXJndW1lbnRzW2luZGV4XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheVB1c2goaXNBcnJheShhcnJheSkgPyBjb3B5QXJyYXkoYXJyYXkpIDogW2FycmF5XSwgYmFzZUZsYXR0ZW4oYXJncywgMSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgYGFycmF5YCB2YWx1ZXMgbm90IGluY2x1ZGVkIGluIHRoZSBvdGhlciBnaXZlbiBhcnJheXNcbiAgICAgKiB1c2luZyBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy4gVGhlIG9yZGVyIGFuZCByZWZlcmVuY2VzIG9mIHJlc3VsdCB2YWx1ZXMgYXJlXG4gICAgICogZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLnB1bGxBbGxgLCB0aGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBleGNsdWRlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAc2VlIF8ud2l0aG91dCwgXy54b3JcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kaWZmZXJlbmNlKFsyLCAxXSwgWzIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMV1cbiAgICAgKi9cbiAgICB2YXIgZGlmZmVyZW5jZSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5LCB2YWx1ZXMpIHtcbiAgICAgIHJldHVybiBpc0FycmF5TGlrZU9iamVjdChhcnJheSlcbiAgICAgICAgPyBiYXNlRGlmZmVyZW5jZShhcnJheSwgYmFzZUZsYXR0ZW4odmFsdWVzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSkpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmRpZmZlcmVuY2VgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBvZiBgYXJyYXlgIGFuZCBgdmFsdWVzYCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uXG4gICAgICogYnkgd2hpY2ggdGhleSdyZSBjb21wYXJlZC4gVGhlIG9yZGVyIGFuZCByZWZlcmVuY2VzIG9mIHJlc3VsdCB2YWx1ZXMgYXJlXG4gICAgICogZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OlxuICAgICAqICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLnB1bGxBbGxCeWAsIHRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGV4Y2x1ZGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kaWZmZXJlbmNlQnkoWzIuMSwgMS4yXSwgWzIuMywgMy40XSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzEuMl1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZGlmZmVyZW5jZUJ5KFt7ICd4JzogMiB9LCB7ICd4JzogMSB9XSwgW3sgJ3gnOiAxIH1dLCAneCcpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMiB9XVxuICAgICAqL1xuICAgIHZhciBkaWZmZXJlbmNlQnkgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheSwgdmFsdWVzKSB7XG4gICAgICB2YXIgaXRlcmF0ZWUgPSBsYXN0KHZhbHVlcyk7XG4gICAgICBpZiAoaXNBcnJheUxpa2VPYmplY3QoaXRlcmF0ZWUpKSB7XG4gICAgICAgIGl0ZXJhdGVlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlT2JqZWN0KGFycmF5KVxuICAgICAgICA/IGJhc2VEaWZmZXJlbmNlKGFycmF5LCBiYXNlRmxhdHRlbih2YWx1ZXMsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5kaWZmZXJlbmNlYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlgIHRvIGB2YWx1ZXNgLiBUaGUgb3JkZXIgYW5kXG4gICAgICogcmVmZXJlbmNlcyBvZiByZXN1bHQgdmFsdWVzIGFyZSBkZXRlcm1pbmVkIGJ5IHRoZSBmaXJzdCBhcnJheS4gVGhlIGNvbXBhcmF0b3JcbiAgICAgKiBpcyBpbnZva2VkIHdpdGggdHdvIGFyZ3VtZW50czogKGFyclZhbCwgb3RoVmFsKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8ucHVsbEFsbFdpdGhgLCB0aGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBleGNsdWRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH1dO1xuICAgICAqXG4gICAgICogXy5kaWZmZXJlbmNlV2l0aChvYmplY3RzLCBbeyAneCc6IDEsICd5JzogMiB9XSwgXy5pc0VxdWFsKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDIsICd5JzogMSB9XVxuICAgICAqL1xuICAgIHZhciBkaWZmZXJlbmNlV2l0aCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5LCB2YWx1ZXMpIHtcbiAgICAgIHZhciBjb21wYXJhdG9yID0gbGFzdCh2YWx1ZXMpO1xuICAgICAgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KGNvbXBhcmF0b3IpKSB7XG4gICAgICAgIGNvbXBhcmF0b3IgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2VPYmplY3QoYXJyYXkpXG4gICAgICAgID8gYmFzZURpZmZlcmVuY2UoYXJyYXksIGJhc2VGbGF0dGVuKHZhbHVlcywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpLCB1bmRlZmluZWQsIGNvbXBhcmF0b3IpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGBuYCBlbGVtZW50cyBkcm9wcGVkIGZyb20gdGhlIGJlZ2lubmluZy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjUuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBkcm9wLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRyb3AoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMiwgM11cbiAgICAgKlxuICAgICAqIF8uZHJvcChbMSwgMiwgM10sIDIpO1xuICAgICAqIC8vID0+IFszXVxuICAgICAqXG4gICAgICogXy5kcm9wKFsxLCAyLCAzXSwgNSk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKlxuICAgICAqIF8uZHJvcChbMSwgMiwgM10sIDApO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRyb3AoYXJyYXksIG4sIGd1YXJkKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBuID0gKGd1YXJkIHx8IG4gPT09IHVuZGVmaW5lZCkgPyAxIDogdG9JbnRlZ2VyKG4pO1xuICAgICAgcmV0dXJuIGJhc2VTbGljZShhcnJheSwgbiA8IDAgPyAwIDogbiwgbGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGBuYCBlbGVtZW50cyBkcm9wcGVkIGZyb20gdGhlIGVuZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBkcm9wLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRyb3BSaWdodChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogXy5kcm9wUmlnaHQoWzEsIDIsIDNdLCAyKTtcbiAgICAgKiAvLyA9PiBbMV1cbiAgICAgKlxuICAgICAqIF8uZHJvcFJpZ2h0KFsxLCAyLCAzXSwgNSk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKlxuICAgICAqIF8uZHJvcFJpZ2h0KFsxLCAyLCAzXSwgMCk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZHJvcFJpZ2h0KGFycmF5LCBuLCBndWFyZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgbiA9IChndWFyZCB8fCBuID09PSB1bmRlZmluZWQpID8gMSA6IHRvSW50ZWdlcihuKTtcbiAgICAgIG4gPSBsZW5ndGggLSBuO1xuICAgICAgcmV0dXJuIGJhc2VTbGljZShhcnJheSwgMCwgbiA8IDAgPyAwIDogbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgZXhjbHVkaW5nIGVsZW1lbnRzIGRyb3BwZWQgZnJvbSB0aGUgZW5kLlxuICAgICAqIEVsZW1lbnRzIGFyZSBkcm9wcGVkIHVudGlsIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5LiBUaGUgcHJlZGljYXRlIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZHJvcFJpZ2h0V2hpbGUodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuICFvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRyb3BSaWdodFdoaWxlKHVzZXJzLCB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknLCAnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kcm9wUmlnaHRXaGlsZSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZHJvcFJpZ2h0V2hpbGUodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leScsICdmcmVkJywgJ3BlYmJsZXMnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRyb3BSaWdodFdoaWxlKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VXaGlsZShhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgdHJ1ZSwgdHJ1ZSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCBleGNsdWRpbmcgZWxlbWVudHMgZHJvcHBlZCBmcm9tIHRoZSBiZWdpbm5pbmcuXG4gICAgICogRWxlbWVudHMgYXJlIGRyb3BwZWQgdW50aWwgYHByZWRpY2F0ZWAgcmV0dXJucyBmYWxzZXkuIFRoZSBwcmVkaWNhdGUgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4LCBhcnJheSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5kcm9wV2hpbGUodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuICFvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kcm9wV2hpbGUodXNlcnMsIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCcsICdwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRyb3BXaGlsZSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRyb3BXaGlsZSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5JywgJ2ZyZWQnLCAncGViYmxlcyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gZHJvcFdoaWxlKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VXaGlsZShhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgdHJ1ZSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGaWxscyBlbGVtZW50cyBvZiBgYXJyYXlgIHdpdGggYHZhbHVlYCBmcm9tIGBzdGFydGAgdXAgdG8sIGJ1dCBub3RcbiAgICAgKiBpbmNsdWRpbmcsIGBlbmRgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjIuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmaWxsLlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGZpbGwgYGFycmF5YCB3aXRoLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kPWFycmF5Lmxlbmd0aF0gVGhlIGVuZCBwb3NpdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDIsIDNdO1xuICAgICAqXG4gICAgICogXy5maWxsKGFycmF5LCAnYScpO1xuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYScsICdhJ11cbiAgICAgKlxuICAgICAqIF8uZmlsbChBcnJheSgzKSwgMik7XG4gICAgICogLy8gPT4gWzIsIDIsIDJdXG4gICAgICpcbiAgICAgKiBfLmZpbGwoWzQsIDYsIDgsIDEwXSwgJyonLCAxLCAzKTtcbiAgICAgKiAvLyA9PiBbNCwgJyonLCAnKicsIDEwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbGwoYXJyYXksIHZhbHVlLCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBpZiAoc3RhcnQgJiYgdHlwZW9mIHN0YXJ0ICE9ICdudW1iZXInICYmIGlzSXRlcmF0ZWVDYWxsKGFycmF5LCB2YWx1ZSwgc3RhcnQpKSB7XG4gICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgICAgZW5kID0gbGVuZ3RoO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VGaWxsKGFycmF5LCB2YWx1ZSwgc3RhcnQsIGVuZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5maW5kYCBleGNlcHQgdGhhdCBpdCByZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZmlyc3RcbiAgICAgKiBlbGVtZW50IGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciBpbnN0ZWFkIG9mIHRoZSBlbGVtZW50IGl0c2VsZi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD0wXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGZvdW5kIGVsZW1lbnQsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maW5kSW5kZXgodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8udXNlciA9PSAnYmFybmV5JzsgfSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRJbmRleCh1c2VycywgeyAndXNlcic6ICdmcmVkJywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IDFcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRJbmRleCh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZEluZGV4KHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gMlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbmRJbmRleChhcnJheSwgcHJlZGljYXRlLCBmcm9tSW5kZXgpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IGZyb21JbmRleCA9PSBudWxsID8gMCA6IHRvSW50ZWdlcihmcm9tSW5kZXgpO1xuICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICBpbmRleCA9IG5hdGl2ZU1heChsZW5ndGggKyBpbmRleCwgMCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUZpbmRJbmRleChhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgaW5kZXgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmluZEluZGV4YCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzXG4gICAgICogb2YgYGNvbGxlY3Rpb25gIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD1hcnJheS5sZW5ndGgtMV0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBmb3VuZCBlbGVtZW50LCBlbHNlIGAtMWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZmluZExhc3RJbmRleCh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby51c2VyID09ICdwZWJibGVzJzsgfSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRMYXN0SW5kZXgodXNlcnMsIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZExhc3RJbmRleCh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IDJcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZExhc3RJbmRleCh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaW5kTGFzdEluZGV4KGFycmF5LCBwcmVkaWNhdGUsIGZyb21JbmRleCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gbGVuZ3RoIC0gMTtcbiAgICAgIGlmIChmcm9tSW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpbmRleCA9IHRvSW50ZWdlcihmcm9tSW5kZXgpO1xuICAgICAgICBpbmRleCA9IGZyb21JbmRleCA8IDBcbiAgICAgICAgICA/IG5hdGl2ZU1heChsZW5ndGggKyBpbmRleCwgMClcbiAgICAgICAgICA6IG5hdGl2ZU1pbihpbmRleCwgbGVuZ3RoIC0gMSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUZpbmRJbmRleChhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgaW5kZXgsIHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZsYXR0ZW5zIGBhcnJheWAgYSBzaW5nbGUgbGV2ZWwgZGVlcC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmbGF0dGVuLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mbGF0dGVuKFsxLCBbMiwgWzMsIFs0XV0sIDVdXSk7XG4gICAgICogLy8gPT4gWzEsIDIsIFszLCBbNF1dLCA1XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXR0ZW4oYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIHJldHVybiBsZW5ndGggPyBiYXNlRmxhdHRlbihhcnJheSwgMSkgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWN1cnNpdmVseSBmbGF0dGVucyBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZsYXR0ZW4uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmZsYXR0ZW5EZWVwKFsxLCBbMiwgWzMsIFs0XV0sIDVdXSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDMsIDQsIDVdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdHRlbkRlZXAoYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIHJldHVybiBsZW5ndGggPyBiYXNlRmxhdHRlbihhcnJheSwgSU5GSU5JVFkpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVjdXJzaXZlbHkgZmxhdHRlbiBgYXJyYXlgIHVwIHRvIGBkZXB0aGAgdGltZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC40LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmxhdHRlbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2RlcHRoPTFdIFRoZSBtYXhpbXVtIHJlY3Vyc2lvbiBkZXB0aC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCBbMiwgWzMsIFs0XV0sIDVdXTtcbiAgICAgKlxuICAgICAqIF8uZmxhdHRlbkRlcHRoKGFycmF5LCAxKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgWzMsIFs0XV0sIDVdXG4gICAgICpcbiAgICAgKiBfLmZsYXR0ZW5EZXB0aChhcnJheSwgMik7XG4gICAgICogLy8gPT4gWzEsIDIsIDMsIFs0XSwgNV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0dGVuRGVwdGgoYXJyYXksIGRlcHRoKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBkZXB0aCA9IGRlcHRoID09PSB1bmRlZmluZWQgPyAxIDogdG9JbnRlZ2VyKGRlcHRoKTtcbiAgICAgIHJldHVybiBiYXNlRmxhdHRlbihhcnJheSwgZGVwdGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBpbnZlcnNlIG9mIGBfLnRvUGFpcnNgOyB0aGlzIG1ldGhvZCByZXR1cm5zIGFuIG9iamVjdCBjb21wb3NlZFxuICAgICAqIGZyb20ga2V5LXZhbHVlIGBwYWlyc2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYWlycyBUaGUga2V5LXZhbHVlIHBhaXJzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZnJvbVBhaXJzKFtbJ2EnLCAxXSwgWydiJywgMl1dKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmcm9tUGFpcnMocGFpcnMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHBhaXJzID09IG51bGwgPyAwIDogcGFpcnMubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IHt9O1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgcGFpciA9IHBhaXJzW2luZGV4XTtcbiAgICAgICAgcmVzdWx0W3BhaXJbMF1dID0gcGFpclsxXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgZmlyc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGFsaWFzIGZpcnN0XG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmaXJzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaGVhZChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IDFcbiAgICAgKlxuICAgICAqIF8uaGVhZChbXSk7XG4gICAgICogLy8gPT4gdW5kZWZpbmVkXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGVhZChhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpID8gYXJyYXlbMF0gOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgaW5kZXggYXQgd2hpY2ggdGhlIGZpcnN0IG9jY3VycmVuY2Ugb2YgYHZhbHVlYCBpcyBmb3VuZCBpbiBgYXJyYXlgXG4gICAgICogdXNpbmcgW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuIElmIGBmcm9tSW5kZXhgIGlzIG5lZ2F0aXZlLCBpdCdzIHVzZWQgYXMgdGhlXG4gICAgICogb2Zmc2V0IGZyb20gdGhlIGVuZCBvZiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD0wXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pbmRleE9mKFsxLCAyLCAxLCAyXSwgMik7XG4gICAgICogLy8gPT4gMVxuICAgICAqXG4gICAgICogLy8gU2VhcmNoIGZyb20gdGhlIGBmcm9tSW5kZXhgLlxuICAgICAqIF8uaW5kZXhPZihbMSwgMiwgMSwgMl0sIDIsIDIpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBmcm9tSW5kZXggPT0gbnVsbCA/IDAgOiB0b0ludGVnZXIoZnJvbUluZGV4KTtcbiAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgaW5kZXggPSBuYXRpdmVNYXgobGVuZ3RoICsgaW5kZXgsIDApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VJbmRleE9mKGFycmF5LCB2YWx1ZSwgaW5kZXgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYWxsIGJ1dCB0aGUgbGFzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmluaXRpYWwoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbml0aWFsKGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICByZXR1cm4gbGVuZ3RoID8gYmFzZVNsaWNlKGFycmF5LCAwLCAtMSkgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHVuaXF1ZSB2YWx1ZXMgdGhhdCBhcmUgaW5jbHVkZWQgaW4gYWxsIGdpdmVuIGFycmF5c1xuICAgICAqIHVzaW5nIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLiBUaGUgb3JkZXIgYW5kIHJlZmVyZW5jZXMgb2YgcmVzdWx0IHZhbHVlcyBhcmVcbiAgICAgKiBkZXRlcm1pbmVkIGJ5IHRoZSBmaXJzdCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBpbnRlcnNlY3RpbmcgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmludGVyc2VjdGlvbihbMiwgMV0sIFsyLCAzXSk7XG4gICAgICogLy8gPT4gWzJdXG4gICAgICovXG4gICAgdmFyIGludGVyc2VjdGlvbiA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIG1hcHBlZCA9IGFycmF5TWFwKGFycmF5cywgY2FzdEFycmF5TGlrZU9iamVjdCk7XG4gICAgICByZXR1cm4gKG1hcHBlZC5sZW5ndGggJiYgbWFwcGVkWzBdID09PSBhcnJheXNbMF0pXG4gICAgICAgID8gYmFzZUludGVyc2VjdGlvbihtYXBwZWQpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmludGVyc2VjdGlvbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IG9mIGVhY2ggYGFycmF5c2AgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvblxuICAgICAqIGJ5IHdoaWNoIHRoZXkncmUgY29tcGFyZWQuIFRoZSBvcmRlciBhbmQgcmVmZXJlbmNlcyBvZiByZXN1bHQgdmFsdWVzIGFyZVxuICAgICAqIGRldGVybWluZWQgYnkgdGhlIGZpcnN0IGFycmF5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDpcbiAgICAgKiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBpbnRlcnNlY3RpbmcgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmludGVyc2VjdGlvbkJ5KFsyLjEsIDEuMl0sIFsyLjMsIDMuNF0sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IFsyLjFdXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmludGVyc2VjdGlvbkJ5KFt7ICd4JzogMSB9XSwgW3sgJ3gnOiAyIH0sIHsgJ3gnOiAxIH1dLCAneCcpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSB9XVxuICAgICAqL1xuICAgIHZhciBpbnRlcnNlY3Rpb25CeSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGl0ZXJhdGVlID0gbGFzdChhcnJheXMpLFxuICAgICAgICAgIG1hcHBlZCA9IGFycmF5TWFwKGFycmF5cywgY2FzdEFycmF5TGlrZU9iamVjdCk7XG5cbiAgICAgIGlmIChpdGVyYXRlZSA9PT0gbGFzdChtYXBwZWQpKSB7XG4gICAgICAgIGl0ZXJhdGVlID0gdW5kZWZpbmVkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWFwcGVkLnBvcCgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIChtYXBwZWQubGVuZ3RoICYmIG1hcHBlZFswXSA9PT0gYXJyYXlzWzBdKVxuICAgICAgICA/IGJhc2VJbnRlcnNlY3Rpb24obWFwcGVkLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmludGVyc2VjdGlvbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY29tcGFyYXRvcmBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIHRvIGNvbXBhcmUgZWxlbWVudHMgb2YgYGFycmF5c2AuIFRoZSBvcmRlciBhbmQgcmVmZXJlbmNlc1xuICAgICAqIG9mIHJlc3VsdCB2YWx1ZXMgYXJlIGRldGVybWluZWQgYnkgdGhlIGZpcnN0IGFycmF5LiBUaGUgY29tcGFyYXRvciBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0d28gYXJndW1lbnRzOiAoYXJyVmFsLCBvdGhWYWwpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGludGVyc2VjdGluZyB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9XTtcbiAgICAgKiB2YXIgb3RoZXJzID0gW3sgJ3gnOiAxLCAneSc6IDEgfSwgeyAneCc6IDEsICd5JzogMiB9XTtcbiAgICAgKlxuICAgICAqIF8uaW50ZXJzZWN0aW9uV2l0aChvYmplY3RzLCBvdGhlcnMsIF8uaXNFcXVhbCk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxLCAneSc6IDIgfV1cbiAgICAgKi9cbiAgICB2YXIgaW50ZXJzZWN0aW9uV2l0aCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGNvbXBhcmF0b3IgPSBsYXN0KGFycmF5cyksXG4gICAgICAgICAgbWFwcGVkID0gYXJyYXlNYXAoYXJyYXlzLCBjYXN0QXJyYXlMaWtlT2JqZWN0KTtcblxuICAgICAgY29tcGFyYXRvciA9IHR5cGVvZiBjb21wYXJhdG9yID09ICdmdW5jdGlvbicgPyBjb21wYXJhdG9yIDogdW5kZWZpbmVkO1xuICAgICAgaWYgKGNvbXBhcmF0b3IpIHtcbiAgICAgICAgbWFwcGVkLnBvcCgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIChtYXBwZWQubGVuZ3RoICYmIG1hcHBlZFswXSA9PT0gYXJyYXlzWzBdKVxuICAgICAgICA/IGJhc2VJbnRlcnNlY3Rpb24obWFwcGVkLCB1bmRlZmluZWQsIGNvbXBhcmF0b3IpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBhbGwgZWxlbWVudHMgaW4gYGFycmF5YCBpbnRvIGEgc3RyaW5nIHNlcGFyYXRlZCBieSBgc2VwYXJhdG9yYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjb252ZXJ0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc2VwYXJhdG9yPScsJ10gVGhlIGVsZW1lbnQgc2VwYXJhdG9yLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGpvaW5lZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uam9pbihbJ2EnLCAnYicsICdjJ10sICd+Jyk7XG4gICAgICogLy8gPT4gJ2F+Yn5jJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGpvaW4oYXJyYXksIHNlcGFyYXRvcikge1xuICAgICAgcmV0dXJuIGFycmF5ID09IG51bGwgPyAnJyA6IG5hdGl2ZUpvaW4uY2FsbChhcnJheSwgc2VwYXJhdG9yKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBsYXN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbGFzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubGFzdChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsYXN0KGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICByZXR1cm4gbGVuZ3RoID8gYXJyYXlbbGVuZ3RoIC0gMV0gOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pbmRleE9mYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mXG4gICAgICogYGFycmF5YCBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PWFycmF5Lmxlbmd0aC0xXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5sYXN0SW5kZXhPZihbMSwgMiwgMSwgMl0sIDIpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIC8vIFNlYXJjaCBmcm9tIHRoZSBgZnJvbUluZGV4YC5cbiAgICAgKiBfLmxhc3RJbmRleE9mKFsxLCAyLCAxLCAyXSwgMiwgMik7XG4gICAgICogLy8gPT4gMVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxhc3RJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBsZW5ndGg7XG4gICAgICBpZiAoZnJvbUluZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaW5kZXggPSB0b0ludGVnZXIoZnJvbUluZGV4KTtcbiAgICAgICAgaW5kZXggPSBpbmRleCA8IDAgPyBuYXRpdmVNYXgobGVuZ3RoICsgaW5kZXgsIDApIDogbmF0aXZlTWluKGluZGV4LCBsZW5ndGggLSAxKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdmFsdWVcbiAgICAgICAgPyBzdHJpY3RMYXN0SW5kZXhPZihhcnJheSwgdmFsdWUsIGluZGV4KVxuICAgICAgICA6IGJhc2VGaW5kSW5kZXgoYXJyYXksIGJhc2VJc05hTiwgaW5kZXgsIHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGVsZW1lbnQgYXQgaW5kZXggYG5gIG9mIGBhcnJheWAuIElmIGBuYCBpcyBuZWdhdGl2ZSwgdGhlIG50aFxuICAgICAqIGVsZW1lbnQgZnJvbSB0aGUgZW5kIGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MF0gVGhlIGluZGV4IG9mIHRoZSBlbGVtZW50IHRvIHJldHVybi5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbnRoIGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWydhJywgJ2InLCAnYycsICdkJ107XG4gICAgICpcbiAgICAgKiBfLm50aChhcnJheSwgMSk7XG4gICAgICogLy8gPT4gJ2InXG4gICAgICpcbiAgICAgKiBfLm50aChhcnJheSwgLTIpO1xuICAgICAqIC8vID0+ICdjJztcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBudGgoYXJyYXksIG4pIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSA/IGJhc2VOdGgoYXJyYXksIHRvSW50ZWdlcihuKSkgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwgZ2l2ZW4gdmFsdWVzIGZyb20gYGFycmF5YCB1c2luZ1xuICAgICAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy53aXRob3V0YCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLiBVc2UgYF8ucmVtb3ZlYFxuICAgICAqIHRvIHJlbW92ZSBlbGVtZW50cyBmcm9tIGFuIGFycmF5IGJ5IHByZWRpY2F0ZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWydhJywgJ2InLCAnYycsICdhJywgJ2InLCAnYyddO1xuICAgICAqXG4gICAgICogXy5wdWxsKGFycmF5LCAnYScsICdjJyk7XG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsnYicsICdiJ11cbiAgICAgKi9cbiAgICB2YXIgcHVsbCA9IGJhc2VSZXN0KHB1bGxBbGwpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5wdWxsYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGFuIGFycmF5IG9mIHZhbHVlcyB0byByZW1vdmUuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLmRpZmZlcmVuY2VgLCB0aGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWydhJywgJ2InLCAnYycsICdhJywgJ2InLCAnYyddO1xuICAgICAqXG4gICAgICogXy5wdWxsQWxsKGFycmF5LCBbJ2EnLCAnYyddKTtcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWydiJywgJ2InXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHB1bGxBbGwoYXJyYXksIHZhbHVlcykge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGggJiYgdmFsdWVzICYmIHZhbHVlcy5sZW5ndGgpXG4gICAgICAgID8gYmFzZVB1bGxBbGwoYXJyYXksIHZhbHVlcylcbiAgICAgICAgOiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnB1bGxBbGxgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBvZiBgYXJyYXlgIGFuZCBgdmFsdWVzYCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uXG4gICAgICogYnkgd2hpY2ggdGhleSdyZSBjb21wYXJlZC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLmRpZmZlcmVuY2VCeWAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gcmVtb3ZlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gW3sgJ3gnOiAxIH0sIHsgJ3gnOiAyIH0sIHsgJ3gnOiAzIH0sIHsgJ3gnOiAxIH1dO1xuICAgICAqXG4gICAgICogXy5wdWxsQWxsQnkoYXJyYXksIFt7ICd4JzogMSB9LCB7ICd4JzogMyB9XSwgJ3gnKTtcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAyIH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gcHVsbEFsbEJ5KGFycmF5LCB2YWx1ZXMsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCAmJiB2YWx1ZXMgJiYgdmFsdWVzLmxlbmd0aClcbiAgICAgICAgPyBiYXNlUHVsbEFsbChhcnJheSwgdmFsdWVzLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpXG4gICAgICAgIDogYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5wdWxsQWxsYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlgIHRvIGB2YWx1ZXNgLiBUaGUgY29tcGFyYXRvciBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0d28gYXJndW1lbnRzOiAoYXJyVmFsLCBvdGhWYWwpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5kaWZmZXJlbmNlV2l0aGAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjYuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gcmVtb3ZlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMywgJ3knOiA0IH0sIHsgJ3gnOiA1LCAneSc6IDYgfV07XG4gICAgICpcbiAgICAgKiBfLnB1bGxBbGxXaXRoKGFycmF5LCBbeyAneCc6IDMsICd5JzogNCB9XSwgXy5pc0VxdWFsKTtcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDUsICd5JzogNiB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHB1bGxBbGxXaXRoKGFycmF5LCB2YWx1ZXMsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoICYmIHZhbHVlcyAmJiB2YWx1ZXMubGVuZ3RoKVxuICAgICAgICA/IGJhc2VQdWxsQWxsKGFycmF5LCB2YWx1ZXMsIHVuZGVmaW5lZCwgY29tcGFyYXRvcilcbiAgICAgICAgOiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGVsZW1lbnRzIGZyb20gYGFycmF5YCBjb3JyZXNwb25kaW5nIHRvIGBpbmRleGVzYCBhbmQgcmV0dXJucyBhblxuICAgICAqIGFycmF5IG9mIHJlbW92ZWQgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLmF0YCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0gey4uLihudW1iZXJ8bnVtYmVyW10pfSBbaW5kZXhlc10gVGhlIGluZGV4ZXMgb2YgZWxlbWVudHMgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHJlbW92ZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsnYScsICdiJywgJ2MnLCAnZCddO1xuICAgICAqIHZhciBwdWxsZWQgPSBfLnB1bGxBdChhcnJheSwgWzEsIDNdKTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYyddXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhwdWxsZWQpO1xuICAgICAqIC8vID0+IFsnYicsICdkJ11cbiAgICAgKi9cbiAgICB2YXIgcHVsbEF0ID0gZmxhdFJlc3QoZnVuY3Rpb24oYXJyYXksIGluZGV4ZXMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBiYXNlQXQoYXJyYXksIGluZGV4ZXMpO1xuXG4gICAgICBiYXNlUHVsbEF0KGFycmF5LCBhcnJheU1hcChpbmRleGVzLCBmdW5jdGlvbihpbmRleCkge1xuICAgICAgICByZXR1cm4gaXNJbmRleChpbmRleCwgbGVuZ3RoKSA/ICtpbmRleCA6IGluZGV4O1xuICAgICAgfSkuc29ydChjb21wYXJlQXNjZW5kaW5nKSk7XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBlbGVtZW50cyBmcm9tIGBhcnJheWAgdGhhdCBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3JcbiAgICAgKiBhbmQgcmV0dXJucyBhbiBhcnJheSBvZiB0aGUgcmVtb3ZlZCBlbGVtZW50cy4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXgsIGFycmF5KS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8uZmlsdGVyYCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLiBVc2UgYF8ucHVsbGBcbiAgICAgKiB0byBwdWxsIGVsZW1lbnRzIGZyb20gYW4gYXJyYXkgYnkgdmFsdWUuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiByZW1vdmVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMiwgMywgNF07XG4gICAgICogdmFyIGV2ZW5zID0gXy5yZW1vdmUoYXJyYXksIGZ1bmN0aW9uKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICUgMiA9PSAwO1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsxLCAzXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2coZXZlbnMpO1xuICAgICAqIC8vID0+IFsyLCA0XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlbW92ZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICBpZiAoIShhcnJheSAmJiBhcnJheS5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBpbmRleGVzID0gW10sXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgICBwcmVkaWNhdGUgPSBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICAgIGluZGV4ZXMucHVzaChpbmRleCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJhc2VQdWxsQXQoYXJyYXksIGluZGV4ZXMpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXZlcnNlcyBgYXJyYXlgIHNvIHRoYXQgdGhlIGZpcnN0IGVsZW1lbnQgYmVjb21lcyB0aGUgbGFzdCwgdGhlIHNlY29uZFxuICAgICAqIGVsZW1lbnQgYmVjb21lcyB0aGUgc2Vjb25kIHRvIGxhc3QsIGFuZCBzbyBvbi5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAgYW5kIGlzIGJhc2VkIG9uXG4gICAgICogW2BBcnJheSNyZXZlcnNlYF0oaHR0cHM6Ly9tZG4uaW8vQXJyYXkvcmV2ZXJzZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMiwgM107XG4gICAgICpcbiAgICAgKiBfLnJldmVyc2UoYXJyYXkpO1xuICAgICAqIC8vID0+IFszLCAyLCAxXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFszLCAyLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJldmVyc2UoYXJyYXkpIHtcbiAgICAgIHJldHVybiBhcnJheSA9PSBudWxsID8gYXJyYXkgOiBuYXRpdmVSZXZlcnNlLmNhbGwoYXJyYXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIGZyb20gYHN0YXJ0YCB1cCB0bywgYnV0IG5vdCBpbmNsdWRpbmcsIGBlbmRgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIHVzZWQgaW5zdGVhZCBvZlxuICAgICAqIFtgQXJyYXkjc2xpY2VgXShodHRwczovL21kbi5pby9BcnJheS9zbGljZSkgdG8gZW5zdXJlIGRlbnNlIGFycmF5cyBhcmVcbiAgICAgKiByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzbGljZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNsaWNlKGFycmF5LCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBpZiAoZW5kICYmIHR5cGVvZiBlbmQgIT0gJ251bWJlcicgJiYgaXNJdGVyYXRlZUNhbGwoYXJyYXksIHN0YXJ0LCBlbmQpKSB7XG4gICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgICAgZW5kID0gbGVuZ3RoO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHN0YXJ0ID0gc3RhcnQgPT0gbnVsbCA/IDAgOiB0b0ludGVnZXIoc3RhcnQpO1xuICAgICAgICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IHRvSW50ZWdlcihlbmQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VTbGljZShhcnJheSwgc3RhcnQsIGVuZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlcyBhIGJpbmFyeSBzZWFyY2ggdG8gZGV0ZXJtaW5lIHRoZSBsb3dlc3QgaW5kZXggYXQgd2hpY2ggYHZhbHVlYFxuICAgICAqIHNob3VsZCBiZSBpbnNlcnRlZCBpbnRvIGBhcnJheWAgaW4gb3JkZXIgdG8gbWFpbnRhaW4gaXRzIHNvcnQgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXZhbHVhdGUuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICAgKiAgaW50byBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvcnRlZEluZGV4KFszMCwgNTBdLCA0MCk7XG4gICAgICogLy8gPT4gMVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIGJhc2VTb3J0ZWRJbmRleChhcnJheSwgdmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc29ydGVkSW5kZXhgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgZm9yIGB2YWx1ZWAgYW5kIGVhY2ggZWxlbWVudCBvZiBgYXJyYXlgIHRvIGNvbXB1dGUgdGhlaXJcbiAgICAgKiBzb3J0IHJhbmtpbmcuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZFxuICAgICAqICBpbnRvIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiA0IH0sIHsgJ3gnOiA1IH1dO1xuICAgICAqXG4gICAgICogXy5zb3J0ZWRJbmRleEJ5KG9iamVjdHMsIHsgJ3gnOiA0IH0sIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ueDsgfSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zb3J0ZWRJbmRleEJ5KG9iamVjdHMsIHsgJ3gnOiA0IH0sICd4Jyk7XG4gICAgICogLy8gPT4gMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZEluZGV4QnkoYXJyYXksIHZhbHVlLCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIGJhc2VTb3J0ZWRJbmRleEJ5KGFycmF5LCB2YWx1ZSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmluZGV4T2ZgIGV4Y2VwdCB0aGF0IGl0IHBlcmZvcm1zIGEgYmluYXJ5XG4gICAgICogc2VhcmNoIG9uIGEgc29ydGVkIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydGVkSW5kZXhPZihbNCwgNSwgNSwgNSwgNl0sIDUpO1xuICAgICAqIC8vID0+IDFcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRJbmRleE9mKGFycmF5LCB2YWx1ZSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKGxlbmd0aCkge1xuICAgICAgICB2YXIgaW5kZXggPSBiYXNlU29ydGVkSW5kZXgoYXJyYXksIHZhbHVlKTtcbiAgICAgICAgaWYgKGluZGV4IDwgbGVuZ3RoICYmIGVxKGFycmF5W2luZGV4XSwgdmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zb3J0ZWRJbmRleGAgZXhjZXB0IHRoYXQgaXQgcmV0dXJucyB0aGUgaGlnaGVzdFxuICAgICAqIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkIGludG8gYGFycmF5YCBpbiBvcmRlciB0b1xuICAgICAqIG1haW50YWluIGl0cyBzb3J0IG9yZGVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gICAgICogIGludG8gYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0ZWRMYXN0SW5kZXgoWzQsIDUsIDUsIDUsIDZdLCA1KTtcbiAgICAgKiAvLyA9PiA0XG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkTGFzdEluZGV4KGFycmF5LCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIGJhc2VTb3J0ZWRJbmRleChhcnJheSwgdmFsdWUsIHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc29ydGVkTGFzdEluZGV4YCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIGZvciBgdmFsdWVgIGFuZCBlYWNoIGVsZW1lbnQgb2YgYGFycmF5YCB0byBjb21wdXRlIHRoZWlyXG4gICAgICogc29ydCByYW5raW5nLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICAgKiAgaW50byBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogNCB9LCB7ICd4JzogNSB9XTtcbiAgICAgKlxuICAgICAqIF8uc29ydGVkTGFzdEluZGV4Qnkob2JqZWN0cywgeyAneCc6IDQgfSwgZnVuY3Rpb24obykgeyByZXR1cm4gby54OyB9KTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnNvcnRlZExhc3RJbmRleEJ5KG9iamVjdHMsIHsgJ3gnOiA0IH0sICd4Jyk7XG4gICAgICogLy8gPT4gMVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZExhc3RJbmRleEJ5KGFycmF5LCB2YWx1ZSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBiYXNlU29ydGVkSW5kZXhCeShhcnJheSwgdmFsdWUsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5sYXN0SW5kZXhPZmAgZXhjZXB0IHRoYXQgaXQgcGVyZm9ybXMgYSBiaW5hcnlcbiAgICAgKiBzZWFyY2ggb24gYSBzb3J0ZWQgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0ZWRMYXN0SW5kZXhPZihbNCwgNSwgNSwgNSwgNl0sIDUpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRMYXN0SW5kZXhPZihhcnJheSwgdmFsdWUpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmIChsZW5ndGgpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gYmFzZVNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSwgdHJ1ZSkgLSAxO1xuICAgICAgICBpZiAoZXEoYXJyYXlbaW5kZXhdLCB2YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuaXFgIGV4Y2VwdCB0aGF0IGl0J3MgZGVzaWduZWQgYW5kIG9wdGltaXplZFxuICAgICAqIGZvciBzb3J0ZWQgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydGVkVW5pcShbMSwgMSwgMl0pO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZFVuaXEoYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VTb3J0ZWRVbmlxKGFycmF5KVxuICAgICAgICA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pcUJ5YCBleGNlcHQgdGhhdCBpdCdzIGRlc2lnbmVkIGFuZCBvcHRpbWl6ZWRcbiAgICAgKiBmb3Igc29ydGVkIGFycmF5cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydGVkVW5pcUJ5KFsxLjEsIDEuMiwgMi4zLCAyLjRdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiBbMS4xLCAyLjNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkVW5pcUJ5KGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVNvcnRlZFVuaXEoYXJyYXksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGFsbCBidXQgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGFpbChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFsyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRhaWwoYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIHJldHVybiBsZW5ndGggPyBiYXNlU2xpY2UoYXJyYXksIDEsIGxlbmd0aCkgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGBuYCBlbGVtZW50cyB0YWtlbiBmcm9tIHRoZSBiZWdpbm5pbmcuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTFdIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gdGFrZS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50YWtlKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gWzFdXG4gICAgICpcbiAgICAgKiBfLnRha2UoWzEsIDIsIDNdLCAyKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIF8udGFrZShbMSwgMiwgM10sIDUpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogXy50YWtlKFsxLCAyLCAzXSwgMCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YWtlKGFycmF5LCBuLCBndWFyZCkge1xuICAgICAgaWYgKCEoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBuID0gKGd1YXJkIHx8IG4gPT09IHVuZGVmaW5lZCkgPyAxIDogdG9JbnRlZ2VyKG4pO1xuICAgICAgcmV0dXJuIGJhc2VTbGljZShhcnJheSwgMCwgbiA8IDAgPyAwIDogbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBgbmAgZWxlbWVudHMgdGFrZW4gZnJvbSB0aGUgZW5kLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHRha2UuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGFrZVJpZ2h0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gWzNdXG4gICAgICpcbiAgICAgKiBfLnRha2VSaWdodChbMSwgMiwgM10sIDIpO1xuICAgICAqIC8vID0+IFsyLCAzXVxuICAgICAqXG4gICAgICogXy50YWtlUmlnaHQoWzEsIDIsIDNdLCA1KTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIF8udGFrZVJpZ2h0KFsxLCAyLCAzXSwgMCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YWtlUmlnaHQoYXJyYXksIG4sIGd1YXJkKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBuID0gKGd1YXJkIHx8IG4gPT09IHVuZGVmaW5lZCkgPyAxIDogdG9JbnRlZ2VyKG4pO1xuICAgICAgbiA9IGxlbmd0aCAtIG47XG4gICAgICByZXR1cm4gYmFzZVNsaWNlKGFycmF5LCBuIDwgMCA/IDAgOiBuLCBsZW5ndGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggZWxlbWVudHMgdGFrZW4gZnJvbSB0aGUgZW5kLiBFbGVtZW50cyBhcmVcbiAgICAgKiB0YWtlbiB1bnRpbCBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleS4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGhcbiAgICAgKiB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXgsIGFycmF5KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLnRha2VSaWdodFdoaWxlKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiAhby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCcsICdwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy50YWtlUmlnaHRXaGlsZSh1c2VycywgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy50YWtlUmlnaHRXaGlsZSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCcsICdwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udGFrZVJpZ2h0V2hpbGUodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRha2VSaWdodFdoaWxlKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VXaGlsZShhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgZmFsc2UsIHRydWUpXG4gICAgICAgIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBlbGVtZW50cyB0YWtlbiBmcm9tIHRoZSBiZWdpbm5pbmcuIEVsZW1lbnRzXG4gICAgICogYXJlIHRha2VuIHVudGlsIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5LiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aFxuICAgICAqIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8udGFrZVdoaWxlKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiAhby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5JywgJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnRha2VXaGlsZSh1c2VycywgeyAndXNlcic6ICdiYXJuZXknLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udGFrZVdoaWxlKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknLCAnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnRha2VXaGlsZSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGFrZVdoaWxlKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VXaGlsZShhcnJheSwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHVuaXF1ZSB2YWx1ZXMsIGluIG9yZGVyLCBmcm9tIGFsbCBnaXZlbiBhcnJheXMgdXNpbmdcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjb21iaW5lZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5pb24oWzJdLCBbMSwgMl0pO1xuICAgICAqIC8vID0+IFsyLCAxXVxuICAgICAqL1xuICAgIHZhciB1bmlvbiA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgcmV0dXJuIGJhc2VVbmlxKGJhc2VGbGF0dGVuKGFycmF5cywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pb25gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBvZiBlYWNoIGBhcnJheXNgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb24gYnlcbiAgICAgKiB3aGljaCB1bmlxdWVuZXNzIGlzIGNvbXB1dGVkLiBSZXN1bHQgdmFsdWVzIGFyZSBjaG9zZW4gZnJvbSB0aGUgZmlyc3RcbiAgICAgKiBhcnJheSBpbiB3aGljaCB0aGUgdmFsdWUgb2NjdXJzLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDpcbiAgICAgKiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjb21iaW5lZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5pb25CeShbMi4xXSwgWzEuMiwgMi4zXSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzIuMSwgMS4yXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy51bmlvbkJ5KFt7ICd4JzogMSB9XSwgW3sgJ3gnOiAyIH0sIHsgJ3gnOiAxIH1dLCAneCcpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSB9LCB7ICd4JzogMiB9XVxuICAgICAqL1xuICAgIHZhciB1bmlvbkJ5ID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgaXRlcmF0ZWUgPSBsYXN0KGFycmF5cyk7XG4gICAgICBpZiAoaXNBcnJheUxpa2VPYmplY3QoaXRlcmF0ZWUpKSB7XG4gICAgICAgIGl0ZXJhdGVlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VVbmlxKGJhc2VGbGF0dGVuKGFycmF5cywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bmlvbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY29tcGFyYXRvcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIGNvbXBhcmUgZWxlbWVudHMgb2YgYGFycmF5c2AuIFJlc3VsdCB2YWx1ZXMgYXJlIGNob3NlbiBmcm9tXG4gICAgICogdGhlIGZpcnN0IGFycmF5IGluIHdoaWNoIHRoZSB2YWx1ZSBvY2N1cnMuIFRoZSBjb21wYXJhdG9yIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY29tYmluZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfV07XG4gICAgICogdmFyIG90aGVycyA9IFt7ICd4JzogMSwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLnVuaW9uV2l0aChvYmplY3RzLCBvdGhlcnMsIF8uaXNFcXVhbCk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9LCB7ICd4JzogMSwgJ3knOiAxIH1dXG4gICAgICovXG4gICAgdmFyIHVuaW9uV2l0aCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGNvbXBhcmF0b3IgPSBsYXN0KGFycmF5cyk7XG4gICAgICBjb21wYXJhdG9yID0gdHlwZW9mIGNvbXBhcmF0b3IgPT0gJ2Z1bmN0aW9uJyA/IGNvbXBhcmF0b3IgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gYmFzZVVuaXEoYmFzZUZsYXR0ZW4oYXJyYXlzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSksIHVuZGVmaW5lZCwgY29tcGFyYXRvcik7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZHVwbGljYXRlLWZyZWUgdmVyc2lvbiBvZiBhbiBhcnJheSwgdXNpbmdcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucywgaW4gd2hpY2ggb25seSB0aGUgZmlyc3Qgb2NjdXJyZW5jZSBvZiBlYWNoIGVsZW1lbnRcbiAgICAgKiBpcyBrZXB0LiBUaGUgb3JkZXIgb2YgcmVzdWx0IHZhbHVlcyBpcyBkZXRlcm1pbmVkIGJ5IHRoZSBvcmRlciB0aGV5IG9jY3VyXG4gICAgICogaW4gdGhlIGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5pcShbMiwgMSwgMl0pO1xuICAgICAqIC8vID0+IFsyLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuaXEoYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSA/IGJhc2VVbmlxKGFycmF5KSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pcWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IGluIGBhcnJheWAgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieSB3aGljaFxuICAgICAqIHVuaXF1ZW5lc3MgaXMgY29tcHV0ZWQuIFRoZSBvcmRlciBvZiByZXN1bHQgdmFsdWVzIGlzIGRldGVybWluZWQgYnkgdGhlXG4gICAgICogb3JkZXIgdGhleSBvY2N1ciBpbiB0aGUgYXJyYXkuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OlxuICAgICAqICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5pcUJ5KFsyLjEsIDEuMiwgMi4zXSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzIuMSwgMS4yXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy51bmlxQnkoW3sgJ3gnOiAxIH0sIHsgJ3gnOiAyIH0sIHsgJ3gnOiAxIH1dLCAneCcpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSB9LCB7ICd4JzogMiB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuaXFCeShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSA/IGJhc2VVbmlxKGFycmF5LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bmlxYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlgLiBUaGUgb3JkZXIgb2YgcmVzdWx0IHZhbHVlcyBpc1xuICAgICAqIGRldGVybWluZWQgYnkgdGhlIG9yZGVyIHRoZXkgb2NjdXIgaW4gdGhlIGFycmF5LlRoZSBjb21wYXJhdG9yIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLnVuaXFXaXRoKG9iamVjdHMsIF8uaXNFcXVhbCk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuaXFXaXRoKGFycmF5LCBjb21wYXJhdG9yKSB7XG4gICAgICBjb21wYXJhdG9yID0gdHlwZW9mIGNvbXBhcmF0b3IgPT0gJ2Z1bmN0aW9uJyA/IGNvbXBhcmF0b3IgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkgPyBiYXNlVW5pcShhcnJheSwgdW5kZWZpbmVkLCBjb21wYXJhdG9yKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uemlwYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGFuIGFycmF5IG9mIGdyb3VwZWRcbiAgICAgKiBlbGVtZW50cyBhbmQgY3JlYXRlcyBhbiBhcnJheSByZWdyb3VwaW5nIHRoZSBlbGVtZW50cyB0byB0aGVpciBwcmUtemlwXG4gICAgICogY29uZmlndXJhdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjIuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzIHRvIHByb2Nlc3MuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgcmVncm91cGVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgemlwcGVkID0gXy56aXAoWydhJywgJ2InXSwgWzEsIDJdLCBbdHJ1ZSwgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBbWydhJywgMSwgdHJ1ZV0sIFsnYicsIDIsIGZhbHNlXV1cbiAgICAgKlxuICAgICAqIF8udW56aXAoemlwcGVkKTtcbiAgICAgKiAvLyA9PiBbWydhJywgJ2InXSwgWzEsIDJdLCBbdHJ1ZSwgZmFsc2VdXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuemlwKGFycmF5KSB7XG4gICAgICBpZiAoIShhcnJheSAmJiBhcnJheS5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciBsZW5ndGggPSAwO1xuICAgICAgYXJyYXkgPSBhcnJheUZpbHRlcihhcnJheSwgZnVuY3Rpb24oZ3JvdXApIHtcbiAgICAgICAgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KGdyb3VwKSkge1xuICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1heChncm91cC5sZW5ndGgsIGxlbmd0aCk7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGJhc2VUaW1lcyhsZW5ndGgsIGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICAgIHJldHVybiBhcnJheU1hcChhcnJheSwgYmFzZVByb3BlcnR5KGluZGV4KSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuemlwYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgdG8gc3BlY2lmeVxuICAgICAqIGhvdyByZWdyb3VwZWQgdmFsdWVzIHNob3VsZCBiZSBjb21iaW5lZC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aGVcbiAgICAgKiBlbGVtZW50cyBvZiBlYWNoIGdyb3VwOiAoLi4uZ3JvdXApLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IG9mIGdyb3VwZWQgZWxlbWVudHMgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIHRvIGNvbWJpbmVcbiAgICAgKiAgcmVncm91cGVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiByZWdyb3VwZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB6aXBwZWQgPSBfLnppcChbMSwgMl0sIFsxMCwgMjBdLCBbMTAwLCAyMDBdKTtcbiAgICAgKiAvLyA9PiBbWzEsIDEwLCAxMDBdLCBbMiwgMjAsIDIwMF1dXG4gICAgICpcbiAgICAgKiBfLnVuemlwV2l0aCh6aXBwZWQsIF8uYWRkKTtcbiAgICAgKiAvLyA9PiBbMywgMzAsIDMwMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bnppcFdpdGgoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICBpZiAoIShhcnJheSAmJiBhcnJheS5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSB1bnppcChhcnJheSk7XG4gICAgICBpZiAoaXRlcmF0ZWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5TWFwKHJlc3VsdCwgZnVuY3Rpb24oZ3JvdXApIHtcbiAgICAgICAgcmV0dXJuIGFwcGx5KGl0ZXJhdGVlLCB1bmRlZmluZWQsIGdyb3VwKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgZXhjbHVkaW5nIGFsbCBnaXZlbiB2YWx1ZXMgdXNpbmdcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8ucHVsbGAsIHRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0gey4uLip9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gZXhjbHVkZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQHNlZSBfLmRpZmZlcmVuY2UsIF8ueG9yXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ud2l0aG91dChbMiwgMSwgMiwgM10sIDEsIDIpO1xuICAgICAqIC8vID0+IFszXVxuICAgICAqL1xuICAgIHZhciB3aXRob3V0ID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXksIHZhbHVlcykge1xuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlT2JqZWN0KGFycmF5KVxuICAgICAgICA/IGJhc2VEaWZmZXJlbmNlKGFycmF5LCB2YWx1ZXMpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHVuaXF1ZSB2YWx1ZXMgdGhhdCBpcyB0aGVcbiAgICAgKiBbc3ltbWV0cmljIGRpZmZlcmVuY2VdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1N5bW1ldHJpY19kaWZmZXJlbmNlKVxuICAgICAqIG9mIHRoZSBnaXZlbiBhcnJheXMuIFRoZSBvcmRlciBvZiByZXN1bHQgdmFsdWVzIGlzIGRldGVybWluZWQgYnkgdGhlIG9yZGVyXG4gICAgICogdGhleSBvY2N1ciBpbiB0aGUgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuNC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAc2VlIF8uZGlmZmVyZW5jZSwgXy53aXRob3V0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ueG9yKFsyLCAxXSwgWzIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMSwgM11cbiAgICAgKi9cbiAgICB2YXIgeG9yID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICByZXR1cm4gYmFzZVhvcihhcnJheUZpbHRlcihhcnJheXMsIGlzQXJyYXlMaWtlT2JqZWN0KSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnhvcmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IG9mIGVhY2ggYGFycmF5c2AgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieVxuICAgICAqIHdoaWNoIGJ5IHdoaWNoIHRoZXkncmUgY29tcGFyZWQuIFRoZSBvcmRlciBvZiByZXN1bHQgdmFsdWVzIGlzIGRldGVybWluZWRcbiAgICAgKiBieSB0aGUgb3JkZXIgdGhleSBvY2N1ciBpbiB0aGUgYXJyYXlzLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZVxuICAgICAqIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ueG9yQnkoWzIuMSwgMS4yXSwgWzIuMywgMy40XSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzEuMiwgMy40XVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy54b3JCeShbeyAneCc6IDEgfV0sIFt7ICd4JzogMiB9LCB7ICd4JzogMSB9XSwgJ3gnKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDIgfV1cbiAgICAgKi9cbiAgICB2YXIgeG9yQnkgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBpdGVyYXRlZSA9IGxhc3QoYXJyYXlzKTtcbiAgICAgIGlmIChpc0FycmF5TGlrZU9iamVjdChpdGVyYXRlZSkpIHtcbiAgICAgICAgaXRlcmF0ZWUgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVhvcihhcnJheUZpbHRlcihhcnJheXMsIGlzQXJyYXlMaWtlT2JqZWN0KSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ueG9yYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlzYC4gVGhlIG9yZGVyIG9mIHJlc3VsdCB2YWx1ZXMgaXNcbiAgICAgKiBkZXRlcm1pbmVkIGJ5IHRoZSBvcmRlciB0aGV5IG9jY3VyIGluIHRoZSBhcnJheXMuIFRoZSBjb21wYXJhdG9yIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfV07XG4gICAgICogdmFyIG90aGVycyA9IFt7ICd4JzogMSwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLnhvcldpdGgob2JqZWN0cywgb3RoZXJzLCBfLmlzRXF1YWwpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMiwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDEgfV1cbiAgICAgKi9cbiAgICB2YXIgeG9yV2l0aCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGNvbXBhcmF0b3IgPSBsYXN0KGFycmF5cyk7XG4gICAgICBjb21wYXJhdG9yID0gdHlwZW9mIGNvbXBhcmF0b3IgPT0gJ2Z1bmN0aW9uJyA/IGNvbXBhcmF0b3IgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gYmFzZVhvcihhcnJheUZpbHRlcihhcnJheXMsIGlzQXJyYXlMaWtlT2JqZWN0KSwgdW5kZWZpbmVkLCBjb21wYXJhdG9yKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cywgdGhlIGZpcnN0IG9mIHdoaWNoIGNvbnRhaW5zIHRoZVxuICAgICAqIGZpcnN0IGVsZW1lbnRzIG9mIHRoZSBnaXZlbiBhcnJheXMsIHRoZSBzZWNvbmQgb2Ygd2hpY2ggY29udGFpbnMgdGhlXG4gICAgICogc2Vjb25kIGVsZW1lbnRzIG9mIHRoZSBnaXZlbiBhcnJheXMsIGFuZCBzbyBvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnppcChbJ2EnLCAnYiddLCBbMSwgMl0sIFt0cnVlLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IFtbJ2EnLCAxLCB0cnVlXSwgWydiJywgMiwgZmFsc2VdXVxuICAgICAqL1xuICAgIHZhciB6aXAgPSBiYXNlUmVzdCh1bnppcCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZyb21QYWlyc2AgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyB0d28gYXJyYXlzLFxuICAgICAqIG9uZSBvZiBwcm9wZXJ0eSBpZGVudGlmaWVycyBhbmQgb25lIG9mIGNvcnJlc3BvbmRpbmcgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gW3Byb3BzPVtdXSBUaGUgcHJvcGVydHkgaWRlbnRpZmllcnMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3ZhbHVlcz1bXV0gVGhlIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnppcE9iamVjdChbJ2EnLCAnYiddLCBbMSwgMl0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHppcE9iamVjdChwcm9wcywgdmFsdWVzKSB7XG4gICAgICByZXR1cm4gYmFzZVppcE9iamVjdChwcm9wcyB8fCBbXSwgdmFsdWVzIHx8IFtdLCBhc3NpZ25WYWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy56aXBPYmplY3RgIGV4Y2VwdCB0aGF0IGl0IHN1cHBvcnRzIHByb3BlcnR5IHBhdGhzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gW3Byb3BzPVtdXSBUaGUgcHJvcGVydHkgaWRlbnRpZmllcnMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3ZhbHVlcz1bXV0gVGhlIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnppcE9iamVjdERlZXAoWydhLmJbMF0uYycsICdhLmJbMV0uZCddLCBbMSwgMl0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiB7ICdiJzogW3sgJ2MnOiAxIH0sIHsgJ2QnOiAyIH1dIH0gfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHppcE9iamVjdERlZXAocHJvcHMsIHZhbHVlcykge1xuICAgICAgcmV0dXJuIGJhc2VaaXBPYmplY3QocHJvcHMgfHwgW10sIHZhbHVlcyB8fCBbXSwgYmFzZVNldCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy56aXBgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB0byBzcGVjaWZ5XG4gICAgICogaG93IGdyb3VwZWQgdmFsdWVzIHNob3VsZCBiZSBjb21iaW5lZC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aGVcbiAgICAgKiBlbGVtZW50cyBvZiBlYWNoIGdyb3VwOiAoLi4uZ3JvdXApLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBwcm9jZXNzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gdG8gY29tYmluZVxuICAgICAqICBncm91cGVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnppcFdpdGgoWzEsIDJdLCBbMTAsIDIwXSwgWzEwMCwgMjAwXSwgZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAqICAgcmV0dXJuIGEgKyBiICsgYztcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBbMTExLCAyMjJdXG4gICAgICovXG4gICAgdmFyIHppcFdpdGggPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheXMubGVuZ3RoLFxuICAgICAgICAgIGl0ZXJhdGVlID0gbGVuZ3RoID4gMSA/IGFycmF5c1tsZW5ndGggLSAxXSA6IHVuZGVmaW5lZDtcblxuICAgICAgaXRlcmF0ZWUgPSB0eXBlb2YgaXRlcmF0ZWUgPT0gJ2Z1bmN0aW9uJyA/IChhcnJheXMucG9wKCksIGl0ZXJhdGVlKSA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiB1bnppcFdpdGgoYXJyYXlzLCBpdGVyYXRlZSk7XG4gICAgfSk7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZSB0aGF0IHdyYXBzIGB2YWx1ZWAgd2l0aCBleHBsaWNpdCBtZXRob2RcbiAgICAgKiBjaGFpbiBzZXF1ZW5jZXMgZW5hYmxlZC4gVGhlIHJlc3VsdCBvZiBzdWNoIHNlcXVlbmNlcyBtdXN0IGJlIHVud3JhcHBlZFxuICAgICAqIHdpdGggYF8jdmFsdWVgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMy4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHdyYXAuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhZ2UnOiAzNiB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FnZSc6IDQwIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWdlJzogMSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIHZhciB5b3VuZ2VzdCA9IF9cbiAgICAgKiAgIC5jaGFpbih1c2VycylcbiAgICAgKiAgIC5zb3J0QnkoJ2FnZScpXG4gICAgICogICAubWFwKGZ1bmN0aW9uKG8pIHtcbiAgICAgKiAgICAgcmV0dXJuIG8udXNlciArICcgaXMgJyArIG8uYWdlO1xuICAgICAqICAgfSlcbiAgICAgKiAgIC5oZWFkKClcbiAgICAgKiAgIC52YWx1ZSgpO1xuICAgICAqIC8vID0+ICdwZWJibGVzIGlzIDEnXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2hhaW4odmFsdWUpIHtcbiAgICAgIHZhciByZXN1bHQgPSBsb2Rhc2godmFsdWUpO1xuICAgICAgcmVzdWx0Ll9fY2hhaW5fXyA9IHRydWU7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGludm9rZXMgYGludGVyY2VwdG9yYCBhbmQgcmV0dXJucyBgdmFsdWVgLiBUaGUgaW50ZXJjZXB0b3JcbiAgICAgKiBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OyAodmFsdWUpLiBUaGUgcHVycG9zZSBvZiB0aGlzIG1ldGhvZCBpcyB0b1xuICAgICAqIFwidGFwIGludG9cIiBhIG1ldGhvZCBjaGFpbiBzZXF1ZW5jZSBpbiBvcmRlciB0byBtb2RpZnkgaW50ZXJtZWRpYXRlIHJlc3VsdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvdmlkZSB0byBgaW50ZXJjZXB0b3JgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGludGVyY2VwdG9yIFRoZSBmdW5jdGlvbiB0byBpbnZva2UuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgYHZhbHVlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXyhbMSwgMiwgM10pXG4gICAgICogIC50YXAoZnVuY3Rpb24oYXJyYXkpIHtcbiAgICAgKiAgICAvLyBNdXRhdGUgaW5wdXQgYXJyYXkuXG4gICAgICogICAgYXJyYXkucG9wKCk7XG4gICAgICogIH0pXG4gICAgICogIC5yZXZlcnNlKClcbiAgICAgKiAgLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWzIsIDFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGFwKHZhbHVlLCBpbnRlcmNlcHRvcikge1xuICAgICAgaW50ZXJjZXB0b3IodmFsdWUpO1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udGFwYCBleGNlcHQgdGhhdCBpdCByZXR1cm5zIHRoZSByZXN1bHQgb2YgYGludGVyY2VwdG9yYC5cbiAgICAgKiBUaGUgcHVycG9zZSBvZiB0aGlzIG1ldGhvZCBpcyB0byBcInBhc3MgdGhydVwiIHZhbHVlcyByZXBsYWNpbmcgaW50ZXJtZWRpYXRlXG4gICAgICogcmVzdWx0cyBpbiBhIG1ldGhvZCBjaGFpbiBzZXF1ZW5jZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm92aWRlIHRvIGBpbnRlcmNlcHRvcmAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaW50ZXJjZXB0b3IgVGhlIGZ1bmN0aW9uIHRvIGludm9rZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzdWx0IG9mIGBpbnRlcmNlcHRvcmAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8oJyAgYWJjICAnKVxuICAgICAqICAuY2hhaW4oKVxuICAgICAqICAudHJpbSgpXG4gICAgICogIC50aHJ1KGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICogICAgcmV0dXJuIFt2YWx1ZV07XG4gICAgICogIH0pXG4gICAgICogIC52YWx1ZSgpO1xuICAgICAqIC8vID0+IFsnYWJjJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0aHJ1KHZhbHVlLCBpbnRlcmNlcHRvcikge1xuICAgICAgcmV0dXJuIGludGVyY2VwdG9yKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyB0aGUgd3JhcHBlciB2ZXJzaW9uIG9mIGBfLmF0YC5cbiAgICAgKlxuICAgICAqIEBuYW1lIGF0XG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHBhcmFtIHsuLi4oc3RyaW5nfHN0cmluZ1tdKX0gW3BhdGhzXSBUaGUgcHJvcGVydHkgcGF0aHMgdG8gcGljay5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfSwgNF0gfTtcbiAgICAgKlxuICAgICAqIF8ob2JqZWN0KS5hdChbJ2FbMF0uYi5jJywgJ2FbMV0nXSkudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbMywgNF1cbiAgICAgKi9cbiAgICB2YXIgd3JhcHBlckF0ID0gZmxhdFJlc3QoZnVuY3Rpb24ocGF0aHMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBwYXRocy5sZW5ndGgsXG4gICAgICAgICAgc3RhcnQgPSBsZW5ndGggPyBwYXRoc1swXSA6IDAsXG4gICAgICAgICAgdmFsdWUgPSB0aGlzLl9fd3JhcHBlZF9fLFxuICAgICAgICAgIGludGVyY2VwdG9yID0gZnVuY3Rpb24ob2JqZWN0KSB7IHJldHVybiBiYXNlQXQob2JqZWN0LCBwYXRocyk7IH07XG5cbiAgICAgIGlmIChsZW5ndGggPiAxIHx8IHRoaXMuX19hY3Rpb25zX18ubGVuZ3RoIHx8XG4gICAgICAgICAgISh2YWx1ZSBpbnN0YW5jZW9mIExhenlXcmFwcGVyKSB8fCAhaXNJbmRleChzdGFydCkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGhydShpbnRlcmNlcHRvcik7XG4gICAgICB9XG4gICAgICB2YWx1ZSA9IHZhbHVlLnNsaWNlKHN0YXJ0LCArc3RhcnQgKyAobGVuZ3RoID8gMSA6IDApKTtcbiAgICAgIHZhbHVlLl9fYWN0aW9uc19fLnB1c2goe1xuICAgICAgICAnZnVuYyc6IHRocnUsXG4gICAgICAgICdhcmdzJzogW2ludGVyY2VwdG9yXSxcbiAgICAgICAgJ3RoaXNBcmcnOiB1bmRlZmluZWRcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG5ldyBMb2Rhc2hXcmFwcGVyKHZhbHVlLCB0aGlzLl9fY2hhaW5fXykudGhydShmdW5jdGlvbihhcnJheSkge1xuICAgICAgICBpZiAobGVuZ3RoICYmICFhcnJheS5sZW5ndGgpIHtcbiAgICAgICAgICBhcnJheS5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFycmF5O1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZSB3aXRoIGV4cGxpY2l0IG1ldGhvZCBjaGFpbiBzZXF1ZW5jZXMgZW5hYmxlZC5cbiAgICAgKlxuICAgICAqIEBuYW1lIGNoYWluXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2IH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIEEgc2VxdWVuY2Ugd2l0aG91dCBleHBsaWNpdCBjaGFpbmluZy5cbiAgICAgKiBfKHVzZXJzKS5oZWFkKCk7XG4gICAgICogLy8gPT4geyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYgfVxuICAgICAqXG4gICAgICogLy8gQSBzZXF1ZW5jZSB3aXRoIGV4cGxpY2l0IGNoYWluaW5nLlxuICAgICAqIF8odXNlcnMpXG4gICAgICogICAuY2hhaW4oKVxuICAgICAqICAgLmhlYWQoKVxuICAgICAqICAgLnBpY2soJ3VzZXInKVxuICAgICAqICAgLnZhbHVlKCk7XG4gICAgICogLy8gPT4geyAndXNlcic6ICdiYXJuZXknIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyQ2hhaW4oKSB7XG4gICAgICByZXR1cm4gY2hhaW4odGhpcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXhlY3V0ZXMgdGhlIGNoYWluIHNlcXVlbmNlIGFuZCByZXR1cm5zIHRoZSB3cmFwcGVkIHJlc3VsdC5cbiAgICAgKlxuICAgICAqIEBuYW1lIGNvbW1pdFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMi4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMl07XG4gICAgICogdmFyIHdyYXBwZWQgPSBfKGFycmF5KS5wdXNoKDMpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogd3JhcHBlZCA9IHdyYXBwZWQuY29tbWl0KCk7XG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogd3JhcHBlZC5sYXN0KCk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJDb21taXQoKSB7XG4gICAgICByZXR1cm4gbmV3IExvZGFzaFdyYXBwZXIodGhpcy52YWx1ZSgpLCB0aGlzLl9fY2hhaW5fXyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbmV4dCB2YWx1ZSBvbiBhIHdyYXBwZWQgb2JqZWN0IGZvbGxvd2luZyB0aGVcbiAgICAgKiBbaXRlcmF0b3IgcHJvdG9jb2xdKGh0dHBzOi8vbWRuLmlvL2l0ZXJhdGlvbl9wcm90b2NvbHMjaXRlcmF0b3IpLlxuICAgICAqXG4gICAgICogQG5hbWUgbmV4dFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5leHQgaXRlcmF0b3IgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB3cmFwcGVkID0gXyhbMSwgMl0pO1xuICAgICAqXG4gICAgICogd3JhcHBlZC5uZXh0KCk7XG4gICAgICogLy8gPT4geyAnZG9uZSc6IGZhbHNlLCAndmFsdWUnOiAxIH1cbiAgICAgKlxuICAgICAqIHdyYXBwZWQubmV4dCgpO1xuICAgICAqIC8vID0+IHsgJ2RvbmUnOiBmYWxzZSwgJ3ZhbHVlJzogMiB9XG4gICAgICpcbiAgICAgKiB3cmFwcGVkLm5leHQoKTtcbiAgICAgKiAvLyA9PiB7ICdkb25lJzogdHJ1ZSwgJ3ZhbHVlJzogdW5kZWZpbmVkIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyTmV4dCgpIHtcbiAgICAgIGlmICh0aGlzLl9fdmFsdWVzX18gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLl9fdmFsdWVzX18gPSB0b0FycmF5KHRoaXMudmFsdWUoKSk7XG4gICAgICB9XG4gICAgICB2YXIgZG9uZSA9IHRoaXMuX19pbmRleF9fID49IHRoaXMuX192YWx1ZXNfXy5sZW5ndGgsXG4gICAgICAgICAgdmFsdWUgPSBkb25lID8gdW5kZWZpbmVkIDogdGhpcy5fX3ZhbHVlc19fW3RoaXMuX19pbmRleF9fKytdO1xuXG4gICAgICByZXR1cm4geyAnZG9uZSc6IGRvbmUsICd2YWx1ZSc6IHZhbHVlIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRW5hYmxlcyB0aGUgd3JhcHBlciB0byBiZSBpdGVyYWJsZS5cbiAgICAgKlxuICAgICAqIEBuYW1lIFN5bWJvbC5pdGVyYXRvclxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIHdyYXBwZXIgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgd3JhcHBlZCA9IF8oWzEsIDJdKTtcbiAgICAgKlxuICAgICAqIHdyYXBwZWRbU3ltYm9sLml0ZXJhdG9yXSgpID09PSB3cmFwcGVkO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIEFycmF5LmZyb20od3JhcHBlZCk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlclRvSXRlcmF0b3IoKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgdGhlIGNoYWluIHNlcXVlbmNlIHBsYW50aW5nIGB2YWx1ZWAgYXMgdGhlIHdyYXBwZWQgdmFsdWUuXG4gICAgICpcbiAgICAgKiBAbmFtZSBwbGFudFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMi4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHBsYW50LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciB3cmFwcGVkID0gXyhbMSwgMl0pLm1hcChzcXVhcmUpO1xuICAgICAqIHZhciBvdGhlciA9IHdyYXBwZWQucGxhbnQoWzMsIDRdKTtcbiAgICAgKlxuICAgICAqIG90aGVyLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWzksIDE2XVxuICAgICAqXG4gICAgICogd3JhcHBlZC52YWx1ZSgpO1xuICAgICAqIC8vID0+IFsxLCA0XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJQbGFudCh2YWx1ZSkge1xuICAgICAgdmFyIHJlc3VsdCxcbiAgICAgICAgICBwYXJlbnQgPSB0aGlzO1xuXG4gICAgICB3aGlsZSAocGFyZW50IGluc3RhbmNlb2YgYmFzZUxvZGFzaCkge1xuICAgICAgICB2YXIgY2xvbmUgPSB3cmFwcGVyQ2xvbmUocGFyZW50KTtcbiAgICAgICAgY2xvbmUuX19pbmRleF9fID0gMDtcbiAgICAgICAgY2xvbmUuX192YWx1ZXNfXyA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgIHByZXZpb3VzLl9fd3JhcHBlZF9fID0gY2xvbmU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzdWx0ID0gY2xvbmU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHByZXZpb3VzID0gY2xvbmU7XG4gICAgICAgIHBhcmVudCA9IHBhcmVudC5fX3dyYXBwZWRfXztcbiAgICAgIH1cbiAgICAgIHByZXZpb3VzLl9fd3JhcHBlZF9fID0gdmFsdWU7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIHRoZSB3cmFwcGVyIHZlcnNpb24gb2YgYF8ucmV2ZXJzZWAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyB0aGUgd3JhcHBlZCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBuYW1lIHJldmVyc2VcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDIsIDNdO1xuICAgICAqXG4gICAgICogXyhhcnJheSkucmV2ZXJzZSgpLnZhbHVlKClcbiAgICAgKiAvLyA9PiBbMywgMiwgMV1cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMywgMiwgMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyUmV2ZXJzZSgpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHRoaXMuX193cmFwcGVkX187XG4gICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcikge1xuICAgICAgICB2YXIgd3JhcHBlZCA9IHZhbHVlO1xuICAgICAgICBpZiAodGhpcy5fX2FjdGlvbnNfXy5sZW5ndGgpIHtcbiAgICAgICAgICB3cmFwcGVkID0gbmV3IExhenlXcmFwcGVyKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHdyYXBwZWQgPSB3cmFwcGVkLnJldmVyc2UoKTtcbiAgICAgICAgd3JhcHBlZC5fX2FjdGlvbnNfXy5wdXNoKHtcbiAgICAgICAgICAnZnVuYyc6IHRocnUsXG4gICAgICAgICAgJ2FyZ3MnOiBbcmV2ZXJzZV0sXG4gICAgICAgICAgJ3RoaXNBcmcnOiB1bmRlZmluZWRcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBuZXcgTG9kYXNoV3JhcHBlcih3cmFwcGVkLCB0aGlzLl9fY2hhaW5fXyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy50aHJ1KHJldmVyc2UpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4ZWN1dGVzIHRoZSBjaGFpbiBzZXF1ZW5jZSB0byByZXNvbHZlIHRoZSB1bndyYXBwZWQgdmFsdWUuXG4gICAgICpcbiAgICAgKiBAbmFtZSB2YWx1ZVxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGFsaWFzIHRvSlNPTiwgdmFsdWVPZlxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdW53cmFwcGVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfKFsxLCAyLCAzXSkudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyVmFsdWUoKSB7XG4gICAgICByZXR1cm4gYmFzZVdyYXBwZXJWYWx1ZSh0aGlzLl9fd3JhcHBlZF9fLCB0aGlzLl9fYWN0aW9uc19fKTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiBrZXlzIGdlbmVyYXRlZCBmcm9tIHRoZSByZXN1bHRzIG9mIHJ1bm5pbmdcbiAgICAgKiBlYWNoIGVsZW1lbnQgb2YgYGNvbGxlY3Rpb25gIHRocnUgYGl0ZXJhdGVlYC4gVGhlIGNvcnJlc3BvbmRpbmcgdmFsdWUgb2ZcbiAgICAgKiBlYWNoIGtleSBpcyB0aGUgbnVtYmVyIG9mIHRpbWVzIHRoZSBrZXkgd2FzIHJldHVybmVkIGJ5IGBpdGVyYXRlZWAuIFRoZVxuICAgICAqIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC41LjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSBrZXlzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNvbXBvc2VkIGFnZ3JlZ2F0ZSBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY291bnRCeShbNi4xLCA0LjIsIDYuM10sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IHsgJzQnOiAxLCAnNic6IDIgfVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5jb3VudEJ5KFsnb25lJywgJ3R3bycsICd0aHJlZSddLCAnbGVuZ3RoJyk7XG4gICAgICogLy8gPT4geyAnMyc6IDIsICc1JzogMSB9XG4gICAgICovXG4gICAgdmFyIGNvdW50QnkgPSBjcmVhdGVBZ2dyZWdhdG9yKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwocmVzdWx0LCBrZXkpKSB7XG4gICAgICAgICsrcmVzdWx0W2tleV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUocmVzdWx0LCBrZXksIDEpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciAqKmFsbCoqIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYC5cbiAgICAgKiBJdGVyYXRpb24gaXMgc3RvcHBlZCBvbmNlIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5LiBUaGUgcHJlZGljYXRlIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIHJldHVybnMgYHRydWVgIGZvclxuICAgICAqIFtlbXB0eSBjb2xsZWN0aW9uc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRW1wdHlfc2V0KSBiZWNhdXNlXG4gICAgICogW2V2ZXJ5dGhpbmcgaXMgdHJ1ZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVmFjdW91c190cnV0aCkgb2ZcbiAgICAgKiBlbGVtZW50cyBvZiBlbXB0eSBjb2xsZWN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbGwgZWxlbWVudHMgcGFzcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZXZlcnkoW3RydWUsIDEsIG51bGwsICd5ZXMnXSwgQm9vbGVhbik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2LCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZXZlcnkodXNlcnMsIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5ldmVyeSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZXZlcnkodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGV2ZXJ5KGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZ3VhcmQpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5RXZlcnkgOiBiYXNlRXZlcnk7XG4gICAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBndWFyZCkpIHtcbiAgICAgICAgcHJlZGljYXRlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAsIHJldHVybmluZyBhbiBhcnJheSBvZiBhbGwgZWxlbWVudHNcbiAgICAgKiBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoIHRocmVlXG4gICAgICogYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLnJlbW92ZWAsIHRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gICAgICogQHNlZSBfLnJlamVjdFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbHRlcih1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgeyAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaWx0ZXIoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUZpbHRlciA6IGJhc2VGaWx0ZXI7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYCwgcmV0dXJuaW5nIHRoZSBmaXJzdCBlbGVtZW50XG4gICAgICogYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yLiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aCB0aHJlZVxuICAgICAqIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD0wXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1hdGNoZWQgZWxlbWVudCwgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhZ2UnOiAxLCAgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbmQodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8uYWdlIDwgNDA7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdCBmb3IgJ2Jhcm5leSdcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kKHVzZXJzLCB7ICdhZ2UnOiAxLCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3QgZm9yICdwZWJibGVzJ1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZCh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdCBmb3IgJ2ZyZWQnXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmQodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3QgZm9yICdiYXJuZXknXG4gICAgICovXG4gICAgdmFyIGZpbmQgPSBjcmVhdGVGaW5kKGZpbmRJbmRleCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZpbmRgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2ZcbiAgICAgKiBgY29sbGVjdGlvbmAgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD1jb2xsZWN0aW9uLmxlbmd0aC0xXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1hdGNoZWQgZWxlbWVudCwgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5maW5kTGFzdChbMSwgMiwgMywgNF0sIGZ1bmN0aW9uKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICUgMiA9PSAxO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICB2YXIgZmluZExhc3QgPSBjcmVhdGVGaW5kKGZpbmRMYXN0SW5kZXgpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZsYXR0ZW5lZCBhcnJheSBvZiB2YWx1ZXMgYnkgcnVubmluZyBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gXG4gICAgICogdGhydSBgaXRlcmF0ZWVgIGFuZCBmbGF0dGVuaW5nIHRoZSBtYXBwZWQgcmVzdWx0cy4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBkdXBsaWNhdGUobikge1xuICAgICAqICAgcmV0dXJuIFtuLCBuXTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLmZsYXRNYXAoWzEsIDJdLCBkdXBsaWNhdGUpO1xuICAgICAqIC8vID0+IFsxLCAxLCAyLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXRNYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBiYXNlRmxhdHRlbihtYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpLCAxKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZsYXRNYXBgIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IGZsYXR0ZW5zIHRoZVxuICAgICAqIG1hcHBlZCByZXN1bHRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNy4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBkdXBsaWNhdGUobikge1xuICAgICAqICAgcmV0dXJuIFtbW24sIG5dXV07XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5mbGF0TWFwRGVlcChbMSwgMl0sIGR1cGxpY2F0ZSk7XG4gICAgICogLy8gPT4gWzEsIDEsIDIsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdE1hcERlZXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBiYXNlRmxhdHRlbihtYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpLCBJTkZJTklUWSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mbGF0TWFwYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBmbGF0dGVucyB0aGVcbiAgICAgKiBtYXBwZWQgcmVzdWx0cyB1cCB0byBgZGVwdGhgIHRpbWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNy4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtkZXB0aD0xXSBUaGUgbWF4aW11bSByZWN1cnNpb24gZGVwdGguXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBkdXBsaWNhdGUobikge1xuICAgICAqICAgcmV0dXJuIFtbW24sIG5dXV07XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5mbGF0TWFwRGVwdGgoWzEsIDJdLCBkdXBsaWNhdGUsIDIpO1xuICAgICAqIC8vID0+IFtbMSwgMV0sIFsyLCAyXV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0TWFwRGVwdGgoY29sbGVjdGlvbiwgaXRlcmF0ZWUsIGRlcHRoKSB7XG4gICAgICBkZXB0aCA9IGRlcHRoID09PSB1bmRlZmluZWQgPyAxIDogdG9JbnRlZ2VyKGRlcHRoKTtcbiAgICAgIHJldHVybiBiYXNlRmxhdHRlbihtYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpLCBkZXB0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAgYW5kIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgZWFjaCBlbGVtZW50LlxuICAgICAqIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICogSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0IGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIEFzIHdpdGggb3RoZXIgXCJDb2xsZWN0aW9uc1wiIG1ldGhvZHMsIG9iamVjdHMgd2l0aCBhIFwibGVuZ3RoXCJcbiAgICAgKiBwcm9wZXJ0eSBhcmUgaXRlcmF0ZWQgbGlrZSBhcnJheXMuIFRvIGF2b2lkIHRoaXMgYmVoYXZpb3IgdXNlIGBfLmZvckluYFxuICAgICAqIG9yIGBfLmZvck93bmAgZm9yIG9iamVjdCBpdGVyYXRpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAYWxpYXMgZWFjaFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgYGNvbGxlY3Rpb25gLlxuICAgICAqIEBzZWUgXy5mb3JFYWNoUmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mb3JFYWNoKFsxLCAyXSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKHZhbHVlKTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzIGAxYCB0aGVuIGAyYC5cbiAgICAgKlxuICAgICAqIF8uZm9yRWFjaCh7ICdhJzogMSwgJ2InOiAyIH0sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyAnYScgdGhlbiAnYicgKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZCkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9yRWFjaChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlFYWNoIDogYmFzZUVhY2g7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZm9yRWFjaGAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZlxuICAgICAqIGBjb2xsZWN0aW9uYCBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAYWxpYXMgZWFjaFJpZ2h0XG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fE9iamVjdH0gUmV0dXJucyBgY29sbGVjdGlvbmAuXG4gICAgICogQHNlZSBfLmZvckVhY2hcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mb3JFYWNoUmlnaHQoWzEsIDJdLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAqICAgY29uc29sZS5sb2codmFsdWUpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgYDJgIHRoZW4gYDFgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvckVhY2hSaWdodChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlFYWNoUmlnaHQgOiBiYXNlRWFjaFJpZ2h0O1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiBrZXlzIGdlbmVyYXRlZCBmcm9tIHRoZSByZXN1bHRzIG9mIHJ1bm5pbmdcbiAgICAgKiBlYWNoIGVsZW1lbnQgb2YgYGNvbGxlY3Rpb25gIHRocnUgYGl0ZXJhdGVlYC4gVGhlIG9yZGVyIG9mIGdyb3VwZWQgdmFsdWVzXG4gICAgICogaXMgZGV0ZXJtaW5lZCBieSB0aGUgb3JkZXIgdGhleSBvY2N1ciBpbiBgY29sbGVjdGlvbmAuIFRoZSBjb3JyZXNwb25kaW5nXG4gICAgICogdmFsdWUgb2YgZWFjaCBrZXkgaXMgYW4gYXJyYXkgb2YgZWxlbWVudHMgcmVzcG9uc2libGUgZm9yIGdlbmVyYXRpbmcgdGhlXG4gICAgICoga2V5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgdG8gdHJhbnNmb3JtIGtleXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY29tcG9zZWQgYWdncmVnYXRlIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5ncm91cEJ5KFs2LjEsIDQuMiwgNi4zXSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4geyAnNCc6IFs0LjJdLCAnNic6IFs2LjEsIDYuM10gfVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5ncm91cEJ5KFsnb25lJywgJ3R3bycsICd0aHJlZSddLCAnbGVuZ3RoJyk7XG4gICAgICogLy8gPT4geyAnMyc6IFsnb25lJywgJ3R3byddLCAnNSc6IFsndGhyZWUnXSB9XG4gICAgICovXG4gICAgdmFyIGdyb3VwQnkgPSBjcmVhdGVBZ2dyZWdhdG9yKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwocmVzdWx0LCBrZXkpKSB7XG4gICAgICAgIHJlc3VsdFtrZXldLnB1c2godmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKHJlc3VsdCwga2V5LCBbdmFsdWVdKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGluIGBjb2xsZWN0aW9uYC4gSWYgYGNvbGxlY3Rpb25gIGlzIGEgc3RyaW5nLCBpdCdzXG4gICAgICogY2hlY2tlZCBmb3IgYSBzdWJzdHJpbmcgb2YgYHZhbHVlYCwgb3RoZXJ3aXNlXG4gICAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBpcyB1c2VkIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy4gSWYgYGZyb21JbmRleGAgaXMgbmVnYXRpdmUsIGl0J3MgdXNlZCBhc1xuICAgICAqIHRoZSBvZmZzZXQgZnJvbSB0aGUgZW5kIG9mIGBjb2xsZWN0aW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD0wXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ucmVkdWNlYC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmluY2x1ZGVzKFsxLCAyLCAzXSwgMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pbmNsdWRlcyhbMSwgMiwgM10sIDEsIDIpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmluY2x1ZGVzKHsgJ2EnOiAxLCAnYic6IDIgfSwgMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pbmNsdWRlcygnYWJjZCcsICdiYycpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbmNsdWRlcyhjb2xsZWN0aW9uLCB2YWx1ZSwgZnJvbUluZGV4LCBndWFyZCkge1xuICAgICAgY29sbGVjdGlvbiA9IGlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pID8gY29sbGVjdGlvbiA6IHZhbHVlcyhjb2xsZWN0aW9uKTtcbiAgICAgIGZyb21JbmRleCA9IChmcm9tSW5kZXggJiYgIWd1YXJkKSA/IHRvSW50ZWdlcihmcm9tSW5kZXgpIDogMDtcblxuICAgICAgdmFyIGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuICAgICAgaWYgKGZyb21JbmRleCA8IDApIHtcbiAgICAgICAgZnJvbUluZGV4ID0gbmF0aXZlTWF4KGxlbmd0aCArIGZyb21JbmRleCwgMCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNTdHJpbmcoY29sbGVjdGlvbilcbiAgICAgICAgPyAoZnJvbUluZGV4IDw9IGxlbmd0aCAmJiBjb2xsZWN0aW9uLmluZGV4T2YodmFsdWUsIGZyb21JbmRleCkgPiAtMSlcbiAgICAgICAgOiAoISFsZW5ndGggJiYgYmFzZUluZGV4T2YoY29sbGVjdGlvbiwgdmFsdWUsIGZyb21JbmRleCkgPiAtMSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW52b2tlcyB0aGUgbWV0aG9kIGF0IGBwYXRoYCBvZiBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gLCByZXR1cm5pbmdcbiAgICAgKiBhbiBhcnJheSBvZiB0aGUgcmVzdWx0cyBvZiBlYWNoIGludm9rZWQgbWV0aG9kLiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHNcbiAgICAgKiBhcmUgcHJvdmlkZWQgdG8gZWFjaCBpbnZva2VkIG1ldGhvZC4gSWYgYHBhdGhgIGlzIGEgZnVuY3Rpb24sIGl0J3MgaW52b2tlZFxuICAgICAqIGZvciwgYW5kIGB0aGlzYCBib3VuZCB0bywgZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7QXJyYXl8RnVuY3Rpb258c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBtZXRob2QgdG8gaW52b2tlIG9yXG4gICAgICogIHRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgZWFjaCBtZXRob2Qgd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHJlc3VsdHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW52b2tlTWFwKFtbNSwgMSwgN10sIFszLCAyLCAxXV0sICdzb3J0Jyk7XG4gICAgICogLy8gPT4gW1sxLCA1LCA3XSwgWzEsIDIsIDNdXVxuICAgICAqXG4gICAgICogXy5pbnZva2VNYXAoWzEyMywgNDU2XSwgU3RyaW5nLnByb3RvdHlwZS5zcGxpdCwgJycpO1xuICAgICAqIC8vID0+IFtbJzEnLCAnMicsICczJ10sIFsnNCcsICc1JywgJzYnXV1cbiAgICAgKi9cbiAgICB2YXIgaW52b2tlTWFwID0gYmFzZVJlc3QoZnVuY3Rpb24oY29sbGVjdGlvbiwgcGF0aCwgYXJncykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgaXNGdW5jID0gdHlwZW9mIHBhdGggPT0gJ2Z1bmN0aW9uJyxcbiAgICAgICAgICByZXN1bHQgPSBpc0FycmF5TGlrZShjb2xsZWN0aW9uKSA/IEFycmF5KGNvbGxlY3Rpb24ubGVuZ3RoKSA6IFtdO1xuXG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXN1bHRbKytpbmRleF0gPSBpc0Z1bmMgPyBhcHBseShwYXRoLCB2YWx1ZSwgYXJncykgOiBiYXNlSW52b2tlKHZhbHVlLCBwYXRoLCBhcmdzKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIGtleXMgZ2VuZXJhdGVkIGZyb20gdGhlIHJlc3VsdHMgb2YgcnVubmluZ1xuICAgICAqIGVhY2ggZWxlbWVudCBvZiBgY29sbGVjdGlvbmAgdGhydSBgaXRlcmF0ZWVgLiBUaGUgY29ycmVzcG9uZGluZyB2YWx1ZSBvZlxuICAgICAqIGVhY2gga2V5IGlzIHRoZSBsYXN0IGVsZW1lbnQgcmVzcG9uc2libGUgZm9yIGdlbmVyYXRpbmcgdGhlIGtleS4gVGhlXG4gICAgICogaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgdG8gdHJhbnNmb3JtIGtleXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY29tcG9zZWQgYWdncmVnYXRlIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gW1xuICAgICAqICAgeyAnZGlyJzogJ2xlZnQnLCAnY29kZSc6IDk3IH0sXG4gICAgICogICB7ICdkaXInOiAncmlnaHQnLCAnY29kZSc6IDEwMCB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8ua2V5QnkoYXJyYXksIGZ1bmN0aW9uKG8pIHtcbiAgICAgKiAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKG8uY29kZSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4geyAnYSc6IHsgJ2Rpcic6ICdsZWZ0JywgJ2NvZGUnOiA5NyB9LCAnZCc6IHsgJ2Rpcic6ICdyaWdodCcsICdjb2RlJzogMTAwIH0gfVxuICAgICAqXG4gICAgICogXy5rZXlCeShhcnJheSwgJ2RpcicpO1xuICAgICAqIC8vID0+IHsgJ2xlZnQnOiB7ICdkaXInOiAnbGVmdCcsICdjb2RlJzogOTcgfSwgJ3JpZ2h0JzogeyAnZGlyJzogJ3JpZ2h0JywgJ2NvZGUnOiAxMDAgfSB9XG4gICAgICovXG4gICAgdmFyIGtleUJ5ID0gY3JlYXRlQWdncmVnYXRvcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIGJhc2VBc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgdmFsdWUpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB2YWx1ZXMgYnkgcnVubmluZyBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gIHRocnVcbiAgICAgKiBgaXRlcmF0ZWVgLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czpcbiAgICAgKiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBNYW55IGxvZGFzaCBtZXRob2RzIGFyZSBndWFyZGVkIHRvIHdvcmsgYXMgaXRlcmF0ZWVzIGZvciBtZXRob2RzIGxpa2VcbiAgICAgKiBgXy5ldmVyeWAsIGBfLmZpbHRlcmAsIGBfLm1hcGAsIGBfLm1hcFZhbHVlc2AsIGBfLnJlamVjdGAsIGFuZCBgXy5zb21lYC5cbiAgICAgKlxuICAgICAqIFRoZSBndWFyZGVkIG1ldGhvZHMgYXJlOlxuICAgICAqIGBhcnlgLCBgY2h1bmtgLCBgY3VycnlgLCBgY3VycnlSaWdodGAsIGBkcm9wYCwgYGRyb3BSaWdodGAsIGBldmVyeWAsXG4gICAgICogYGZpbGxgLCBgaW52ZXJ0YCwgYHBhcnNlSW50YCwgYHJhbmRvbWAsIGByYW5nZWAsIGByYW5nZVJpZ2h0YCwgYHJlcGVhdGAsXG4gICAgICogYHNhbXBsZVNpemVgLCBgc2xpY2VgLCBgc29tZWAsIGBzb3J0QnlgLCBgc3BsaXRgLCBgdGFrZWAsIGB0YWtlUmlnaHRgLFxuICAgICAqIGB0ZW1wbGF0ZWAsIGB0cmltYCwgYHRyaW1FbmRgLCBgdHJpbVN0YXJ0YCwgYW5kIGB3b3Jkc2BcbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLm1hcChbNCwgOF0sIHNxdWFyZSk7XG4gICAgICogLy8gPT4gWzE2LCA2NF1cbiAgICAgKlxuICAgICAqIF8ubWFwKHsgJ2EnOiA0LCAnYic6IDggfSwgc3F1YXJlKTtcbiAgICAgKiAvLyA9PiBbMTYsIDY0XSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5tYXAodXNlcnMsICd1c2VyJyk7XG4gICAgICogLy8gPT4gWydiYXJuZXknLCAnZnJlZCddXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheU1hcCA6IGJhc2VNYXA7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc29ydEJ5YCBleGNlcHQgdGhhdCBpdCBhbGxvd3Mgc3BlY2lmeWluZyB0aGUgc29ydFxuICAgICAqIG9yZGVycyBvZiB0aGUgaXRlcmF0ZWVzIHRvIHNvcnQgYnkuIElmIGBvcmRlcnNgIGlzIHVuc3BlY2lmaWVkLCBhbGwgdmFsdWVzXG4gICAgICogYXJlIHNvcnRlZCBpbiBhc2NlbmRpbmcgb3JkZXIuIE90aGVyd2lzZSwgc3BlY2lmeSBhbiBvcmRlciBvZiBcImRlc2NcIiBmb3JcbiAgICAgKiBkZXNjZW5kaW5nIG9yIFwiYXNjXCIgZm9yIGFzY2VuZGluZyBzb3J0IG9yZGVyIG9mIGNvcnJlc3BvbmRpbmcgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtBcnJheVtdfEZ1bmN0aW9uW118T2JqZWN0W118c3RyaW5nW119IFtpdGVyYXRlZXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgaXRlcmF0ZWVzIHRvIHNvcnQgYnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gW29yZGVyc10gVGhlIHNvcnQgb3JkZXJzIG9mIGBpdGVyYXRlZXNgLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLnJlZHVjZWAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc29ydGVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0OCB9LFxuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzQgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIFNvcnQgYnkgYHVzZXJgIGluIGFzY2VuZGluZyBvcmRlciBhbmQgYnkgYGFnZWAgaW4gZGVzY2VuZGluZyBvcmRlci5cbiAgICAgKiBfLm9yZGVyQnkodXNlcnMsIFsndXNlcicsICdhZ2UnXSwgWydhc2MnLCAnZGVzYyddKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydiYXJuZXknLCAzNl0sIFsnYmFybmV5JywgMzRdLCBbJ2ZyZWQnLCA0OF0sIFsnZnJlZCcsIDQwXV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvcmRlckJ5KGNvbGxlY3Rpb24sIGl0ZXJhdGVlcywgb3JkZXJzLCBndWFyZCkge1xuICAgICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBpZiAoIWlzQXJyYXkoaXRlcmF0ZWVzKSkge1xuICAgICAgICBpdGVyYXRlZXMgPSBpdGVyYXRlZXMgPT0gbnVsbCA/IFtdIDogW2l0ZXJhdGVlc107XG4gICAgICB9XG4gICAgICBvcmRlcnMgPSBndWFyZCA/IHVuZGVmaW5lZCA6IG9yZGVycztcbiAgICAgIGlmICghaXNBcnJheShvcmRlcnMpKSB7XG4gICAgICAgIG9yZGVycyA9IG9yZGVycyA9PSBudWxsID8gW10gOiBbb3JkZXJzXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlT3JkZXJCeShjb2xsZWN0aW9uLCBpdGVyYXRlZXMsIG9yZGVycyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBlbGVtZW50cyBzcGxpdCBpbnRvIHR3byBncm91cHMsIHRoZSBmaXJzdCBvZiB3aGljaFxuICAgICAqIGNvbnRhaW5zIGVsZW1lbnRzIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciwgdGhlIHNlY29uZCBvZiB3aGljaFxuICAgICAqIGNvbnRhaW5zIGVsZW1lbnRzIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5IGZvci4gVGhlIHByZWRpY2F0ZSBpc1xuICAgICAqIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWdlJzogMzYsICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FnZSc6IDEsICAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLnBhcnRpdGlvbih1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2ZyZWQnXSwgWydiYXJuZXknLCAncGViYmxlcyddXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnBhcnRpdGlvbih1c2VycywgeyAnYWdlJzogMSwgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ3BlYmJsZXMnXSwgWydiYXJuZXknLCAnZnJlZCddXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ucGFydGl0aW9uKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgW1snYmFybmV5JywgJ3BlYmJsZXMnXSwgWydmcmVkJ11dXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnBhcnRpdGlvbih1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2ZyZWQnXSwgWydiYXJuZXknLCAncGViYmxlcyddXVxuICAgICAqL1xuICAgIHZhciBwYXJ0aXRpb24gPSBjcmVhdGVBZ2dyZWdhdG9yKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgcmVzdWx0W2tleSA/IDAgOiAxXS5wdXNoKHZhbHVlKTtcbiAgICB9LCBmdW5jdGlvbigpIHsgcmV0dXJuIFtbXSwgW11dOyB9KTtcblxuICAgIC8qKlxuICAgICAqIFJlZHVjZXMgYGNvbGxlY3Rpb25gIHRvIGEgdmFsdWUgd2hpY2ggaXMgdGhlIGFjY3VtdWxhdGVkIHJlc3VsdCBvZiBydW5uaW5nXG4gICAgICogZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYCB0aHJ1IGBpdGVyYXRlZWAsIHdoZXJlIGVhY2ggc3VjY2Vzc2l2ZVxuICAgICAqIGludm9jYXRpb24gaXMgc3VwcGxpZWQgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgcHJldmlvdXMuIElmIGBhY2N1bXVsYXRvcmBcbiAgICAgKiBpcyBub3QgZ2l2ZW4sIHRoZSBmaXJzdCBlbGVtZW50IG9mIGBjb2xsZWN0aW9uYCBpcyB1c2VkIGFzIHRoZSBpbml0aWFsXG4gICAgICogdmFsdWUuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggZm91ciBhcmd1bWVudHM6XG4gICAgICogKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqIE1hbnkgbG9kYXNoIG1ldGhvZHMgYXJlIGd1YXJkZWQgdG8gd29yayBhcyBpdGVyYXRlZXMgZm9yIG1ldGhvZHMgbGlrZVxuICAgICAqIGBfLnJlZHVjZWAsIGBfLnJlZHVjZVJpZ2h0YCwgYW5kIGBfLnRyYW5zZm9ybWAuXG4gICAgICpcbiAgICAgKiBUaGUgZ3VhcmRlZCBtZXRob2RzIGFyZTpcbiAgICAgKiBgYXNzaWduYCwgYGRlZmF1bHRzYCwgYGRlZmF1bHRzRGVlcGAsIGBpbmNsdWRlc2AsIGBtZXJnZWAsIGBvcmRlckJ5YCxcbiAgICAgKiBhbmQgYHNvcnRCeWBcbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAgICogQHNlZSBfLnJlZHVjZVJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmVkdWNlKFsxLCAyXSwgZnVuY3Rpb24oc3VtLCBuKSB7XG4gICAgICogICByZXR1cm4gc3VtICsgbjtcbiAgICAgKiB9LCAwKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLnJlZHVjZSh7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDEgfSwgZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICogICAocmVzdWx0W3ZhbHVlXSB8fCAocmVzdWx0W3ZhbHVlXSA9IFtdKSkucHVzaChrZXkpO1xuICAgICAqICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgKiB9LCB7fSk7XG4gICAgICogLy8gPT4geyAnMSc6IFsnYScsICdjJ10sICcyJzogWydiJ10gfSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlZHVjZShjb2xsZWN0aW9uLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5UmVkdWNlIDogYmFzZVJlZHVjZSxcbiAgICAgICAgICBpbml0QWNjdW0gPSBhcmd1bWVudHMubGVuZ3RoIDwgMztcblxuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDQpLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtLCBiYXNlRWFjaCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5yZWR1Y2VgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2ZcbiAgICAgKiBgY29sbGVjdGlvbmAgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBpbml0aWFsIHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICAgKiBAc2VlIF8ucmVkdWNlXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFtbMCwgMV0sIFsyLCAzXSwgWzQsIDVdXTtcbiAgICAgKlxuICAgICAqIF8ucmVkdWNlUmlnaHQoYXJyYXksIGZ1bmN0aW9uKGZsYXR0ZW5lZCwgb3RoZXIpIHtcbiAgICAgKiAgIHJldHVybiBmbGF0dGVuZWQuY29uY2F0KG90aGVyKTtcbiAgICAgKiB9LCBbXSk7XG4gICAgICogLy8gPT4gWzQsIDUsIDIsIDMsIDAsIDFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVkdWNlUmlnaHQoY29sbGVjdGlvbiwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVJlZHVjZVJpZ2h0IDogYmFzZVJlZHVjZSxcbiAgICAgICAgICBpbml0QWNjdW0gPSBhcmd1bWVudHMubGVuZ3RoIDwgMztcblxuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDQpLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtLCBiYXNlRWFjaFJpZ2h0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8uZmlsdGVyYDsgdGhpcyBtZXRob2QgcmV0dXJucyB0aGUgZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gXG4gICAgICogdGhhdCBgcHJlZGljYXRlYCBkb2VzICoqbm90KiogcmV0dXJuIHRydXRoeSBmb3IuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gICAgICogQHNlZSBfLmZpbHRlclxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLnJlamVjdCh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnJlamVjdCh1c2VycywgeyAnYWdlJzogNDAsICdhY3RpdmUnOiB0cnVlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnJlamVjdCh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnJlamVjdCh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZWplY3QoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUZpbHRlciA6IGJhc2VGaWx0ZXI7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBuZWdhdGUoZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYSByYW5kb20gZWxlbWVudCBmcm9tIGBjb2xsZWN0aW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2FtcGxlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByYW5kb20gZWxlbWVudC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zYW1wbGUoWzEsIDIsIDMsIDRdKTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2FtcGxlKGNvbGxlY3Rpb24pIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5U2FtcGxlIDogYmFzZVNhbXBsZTtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYG5gIHJhbmRvbSBlbGVtZW50cyBhdCB1bmlxdWUga2V5cyBmcm9tIGBjb2xsZWN0aW9uYCB1cCB0byB0aGVcbiAgICAgKiBzaXplIG9mIGBjb2xsZWN0aW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2FtcGxlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHNhbXBsZS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNhbXBsZVNpemUoWzEsIDIsIDNdLCAyKTtcbiAgICAgKiAvLyA9PiBbMywgMV1cbiAgICAgKlxuICAgICAqIF8uc2FtcGxlU2l6ZShbMSwgMiwgM10sIDQpO1xuICAgICAqIC8vID0+IFsyLCAzLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNhbXBsZVNpemUoY29sbGVjdGlvbiwgbiwgZ3VhcmQpIHtcbiAgICAgIGlmICgoZ3VhcmQgPyBpc0l0ZXJhdGVlQ2FsbChjb2xsZWN0aW9uLCBuLCBndWFyZCkgOiBuID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIG4gPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbiA9IHRvSW50ZWdlcihuKTtcbiAgICAgIH1cbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5U2FtcGxlU2l6ZSA6IGJhc2VTYW1wbGVTaXplO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBzaHVmZmxlZCB2YWx1ZXMsIHVzaW5nIGEgdmVyc2lvbiBvZiB0aGVcbiAgICAgKiBbRmlzaGVyLVlhdGVzIHNodWZmbGVdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Zpc2hlci1ZYXRlc19zaHVmZmxlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2h1ZmZsZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzaHVmZmxlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zaHVmZmxlKFsxLCAyLCAzLCA0XSk7XG4gICAgICogLy8gPT4gWzQsIDEsIDMsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2h1ZmZsZShjb2xsZWN0aW9uKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVNodWZmbGUgOiBiYXNlU2h1ZmZsZTtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHNpemUgb2YgYGNvbGxlY3Rpb25gIGJ5IHJldHVybmluZyBpdHMgbGVuZ3RoIGZvciBhcnJheS1saWtlXG4gICAgICogdmFsdWVzIG9yIHRoZSBudW1iZXIgb2Ygb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgZm9yIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbGxlY3Rpb24gc2l6ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zaXplKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy5zaXplKHsgJ2EnOiAxLCAnYic6IDIgfSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqXG4gICAgICogXy5zaXplKCdwZWJibGVzJyk7XG4gICAgICogLy8gPT4gN1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNpemUoY29sbGVjdGlvbikge1xuICAgICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cbiAgICAgIGlmIChpc0FycmF5TGlrZShjb2xsZWN0aW9uKSkge1xuICAgICAgICByZXR1cm4gaXNTdHJpbmcoY29sbGVjdGlvbikgPyBzdHJpbmdTaXplKGNvbGxlY3Rpb24pIDogY29sbGVjdGlvbi5sZW5ndGg7XG4gICAgICB9XG4gICAgICB2YXIgdGFnID0gZ2V0VGFnKGNvbGxlY3Rpb24pO1xuICAgICAgaWYgKHRhZyA9PSBtYXBUYWcgfHwgdGFnID09IHNldFRhZykge1xuICAgICAgICByZXR1cm4gY29sbGVjdGlvbi5zaXplO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VLZXlzKGNvbGxlY3Rpb24pLmxlbmd0aDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yICoqYW55KiogZWxlbWVudCBvZiBgY29sbGVjdGlvbmAuXG4gICAgICogSXRlcmF0aW9uIGlzIHN0b3BwZWQgb25jZSBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeS4gVGhlIHByZWRpY2F0ZSBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbnkgZWxlbWVudCBwYXNzZXMgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvbWUoW251bGwsIDAsICd5ZXMnLCBmYWxzZV0sIEJvb2xlYW4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnNvbWUodXNlcnMsIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zb21lKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zb21lKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvbWUoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBndWFyZCkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlTb21lIDogYmFzZVNvbWU7XG4gICAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBndWFyZCkpIHtcbiAgICAgICAgcHJlZGljYXRlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBlbGVtZW50cywgc29ydGVkIGluIGFzY2VuZGluZyBvcmRlciBieSB0aGUgcmVzdWx0cyBvZlxuICAgICAqIHJ1bm5pbmcgZWFjaCBlbGVtZW50IGluIGEgY29sbGVjdGlvbiB0aHJ1IGVhY2ggaXRlcmF0ZWUuIFRoaXMgbWV0aG9kXG4gICAgICogcGVyZm9ybXMgYSBzdGFibGUgc29ydCwgdGhhdCBpcywgaXQgcHJlc2VydmVzIHRoZSBvcmlnaW5hbCBzb3J0IG9yZGVyIG9mXG4gICAgICogZXF1YWwgZWxlbWVudHMuIFRoZSBpdGVyYXRlZXMgYXJlIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW2l0ZXJhdGVlcz1bXy5pZGVudGl0eV1dXG4gICAgICogIFRoZSBpdGVyYXRlZXMgdG8gc29ydCBieS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzb3J0ZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQ4IH0sXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM0IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5zb3J0QnkodXNlcnMsIFtmdW5jdGlvbihvKSB7IHJldHVybiBvLnVzZXI7IH1dKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydiYXJuZXknLCAzNl0sIFsnYmFybmV5JywgMzRdLCBbJ2ZyZWQnLCA0OF0sIFsnZnJlZCcsIDQwXV1cbiAgICAgKlxuICAgICAqIF8uc29ydEJ5KHVzZXJzLCBbJ3VzZXInLCAnYWdlJ10pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2Jhcm5leScsIDM0XSwgWydiYXJuZXknLCAzNl0sIFsnZnJlZCcsIDQwXSwgWydmcmVkJywgNDhdXVxuICAgICAqL1xuICAgIHZhciBzb3J0QnkgPSBiYXNlUmVzdChmdW5jdGlvbihjb2xsZWN0aW9uLCBpdGVyYXRlZXMpIHtcbiAgICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIGxlbmd0aCA9IGl0ZXJhdGVlcy5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoID4gMSAmJiBpc0l0ZXJhdGVlQ2FsbChjb2xsZWN0aW9uLCBpdGVyYXRlZXNbMF0sIGl0ZXJhdGVlc1sxXSkpIHtcbiAgICAgICAgaXRlcmF0ZWVzID0gW107XG4gICAgICB9IGVsc2UgaWYgKGxlbmd0aCA+IDIgJiYgaXNJdGVyYXRlZUNhbGwoaXRlcmF0ZWVzWzBdLCBpdGVyYXRlZXNbMV0sIGl0ZXJhdGVlc1syXSkpIHtcbiAgICAgICAgaXRlcmF0ZWVzID0gW2l0ZXJhdGVlc1swXV07XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZU9yZGVyQnkoY29sbGVjdGlvbiwgYmFzZUZsYXR0ZW4oaXRlcmF0ZWVzLCAxKSwgW10pO1xuICAgIH0pO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgdGltZXN0YW1wIG9mIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRoYXQgaGF2ZSBlbGFwc2VkIHNpbmNlXG4gICAgICogdGhlIFVuaXggZXBvY2ggKDEgSmFudWFyeSAxOTcwIDAwOjAwOjAwIFVUQykuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi40LjBcbiAgICAgKiBAY2F0ZWdvcnkgRGF0ZVxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRpbWVzdGFtcC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWZlcihmdW5jdGlvbihzdGFtcCkge1xuICAgICAqICAgY29uc29sZS5sb2coXy5ub3coKSAtIHN0YW1wKTtcbiAgICAgKiB9LCBfLm5vdygpKTtcbiAgICAgKiAvLyA9PiBMb2dzIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGl0IHRvb2sgZm9yIHRoZSBkZWZlcnJlZCBpbnZvY2F0aW9uLlxuICAgICAqL1xuICAgIHZhciBub3cgPSBjdHhOb3cgfHwgZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gcm9vdC5EYXRlLm5vdygpO1xuICAgIH07XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8uYmVmb3JlYDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlc1xuICAgICAqIGBmdW5jYCBvbmNlIGl0J3MgY2FsbGVkIGBuYCBvciBtb3JlIHRpbWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiBjYWxscyBiZWZvcmUgYGZ1bmNgIGlzIGludm9rZWQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVzdHJpY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmVzdHJpY3RlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHNhdmVzID0gWydwcm9maWxlJywgJ3NldHRpbmdzJ107XG4gICAgICpcbiAgICAgKiB2YXIgZG9uZSA9IF8uYWZ0ZXIoc2F2ZXMubGVuZ3RoLCBmdW5jdGlvbigpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKCdkb25lIHNhdmluZyEnKTtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIF8uZm9yRWFjaChzYXZlcywgZnVuY3Rpb24odHlwZSkge1xuICAgICAqICAgYXN5bmNTYXZlKHsgJ3R5cGUnOiB0eXBlLCAnY29tcGxldGUnOiBkb25lIH0pO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2RvbmUgc2F2aW5nIScgYWZ0ZXIgdGhlIHR3byBhc3luYyBzYXZlcyBoYXZlIGNvbXBsZXRlZC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhZnRlcihuLCBmdW5jKSB7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICBuID0gdG9JbnRlZ2VyKG4pO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoLS1uIDwgMSkge1xuICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2AsIHdpdGggdXAgdG8gYG5gIGFyZ3VtZW50cyxcbiAgICAgKiBpZ25vcmluZyBhbnkgYWRkaXRpb25hbCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYXAgYXJndW1lbnRzIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249ZnVuYy5sZW5ndGhdIFRoZSBhcml0eSBjYXAuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXBwZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnNicsICc4JywgJzEwJ10sIF8uYXJ5KHBhcnNlSW50LCAxKSk7XG4gICAgICogLy8gPT4gWzYsIDgsIDEwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFyeShmdW5jLCBuLCBndWFyZCkge1xuICAgICAgbiA9IGd1YXJkID8gdW5kZWZpbmVkIDogbjtcbiAgICAgIG4gPSAoZnVuYyAmJiBuID09IG51bGwpID8gZnVuYy5sZW5ndGggOiBuO1xuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9BUllfRkxBRywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBuKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCwgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgYW5kIGFyZ3VtZW50c1xuICAgICAqIG9mIHRoZSBjcmVhdGVkIGZ1bmN0aW9uLCB3aGlsZSBpdCdzIGNhbGxlZCBsZXNzIHRoYW4gYG5gIHRpbWVzLiBTdWJzZXF1ZW50XG4gICAgICogY2FsbHMgdG8gdGhlIGNyZWF0ZWQgZnVuY3Rpb24gcmV0dXJuIHRoZSByZXN1bHQgb2YgdGhlIGxhc3QgYGZ1bmNgIGludm9jYXRpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIGNhbGxzIGF0IHdoaWNoIGBmdW5jYCBpcyBubyBsb25nZXIgaW52b2tlZC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZXN0cmljdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyByZXN0cmljdGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgXy5iZWZvcmUoNSwgYWRkQ29udGFjdFRvTGlzdCkpO1xuICAgICAqIC8vID0+IEFsbG93cyBhZGRpbmcgdXAgdG8gNCBjb250YWN0cyB0byB0aGUgbGlzdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiZWZvcmUobiwgZnVuYykge1xuICAgICAgdmFyIHJlc3VsdDtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICgtLW4gPiAwKSB7XG4gICAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChuIDw9IDEpIHtcbiAgICAgICAgICBmdW5jID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIGB0aGlzQXJnYFxuICAgICAqIGFuZCBgcGFydGlhbHNgIHByZXBlbmRlZCB0byB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogVGhlIGBfLmJpbmQucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpYyBidWlsZHMsXG4gICAgICogbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBuYXRpdmUgYEZ1bmN0aW9uI2JpbmRgLCB0aGlzIG1ldGhvZCBkb2Vzbid0IHNldCB0aGUgXCJsZW5ndGhcIlxuICAgICAqIHByb3BlcnR5IG9mIGJvdW5kIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGJpbmQuXG4gICAgICogQHBhcmFtIHsqfSB0aGlzQXJnIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gYmUgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYm91bmQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGdyZWV0KGdyZWV0aW5nLCBwdW5jdHVhdGlvbikge1xuICAgICAqICAgcmV0dXJuIGdyZWV0aW5nICsgJyAnICsgdGhpcy51c2VyICsgcHVuY3R1YXRpb247XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ3VzZXInOiAnZnJlZCcgfTtcbiAgICAgKlxuICAgICAqIHZhciBib3VuZCA9IF8uYmluZChncmVldCwgb2JqZWN0LCAnaGknKTtcbiAgICAgKiBib3VuZCgnIScpO1xuICAgICAqIC8vID0+ICdoaSBmcmVkISdcbiAgICAgKlxuICAgICAqIC8vIEJvdW5kIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIHZhciBib3VuZCA9IF8uYmluZChncmVldCwgb2JqZWN0LCBfLCAnIScpO1xuICAgICAqIGJvdW5kKCdoaScpO1xuICAgICAqIC8vID0+ICdoaSBmcmVkISdcbiAgICAgKi9cbiAgICB2YXIgYmluZCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIHRoaXNBcmcsIHBhcnRpYWxzKSB7XG4gICAgICB2YXIgYml0bWFzayA9IFdSQVBfQklORF9GTEFHO1xuICAgICAgaWYgKHBhcnRpYWxzLmxlbmd0aCkge1xuICAgICAgICB2YXIgaG9sZGVycyA9IHJlcGxhY2VIb2xkZXJzKHBhcnRpYWxzLCBnZXRIb2xkZXIoYmluZCkpO1xuICAgICAgICBiaXRtYXNrIHw9IFdSQVBfUEFSVElBTF9GTEFHO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMsIGhvbGRlcnMpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyB0aGUgbWV0aG9kIGF0IGBvYmplY3Rba2V5XWAgd2l0aCBgcGFydGlhbHNgXG4gICAgICogcHJlcGVuZGVkIHRvIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCBkaWZmZXJzIGZyb20gYF8uYmluZGAgYnkgYWxsb3dpbmcgYm91bmQgZnVuY3Rpb25zIHRvIHJlZmVyZW5jZVxuICAgICAqIG1ldGhvZHMgdGhhdCBtYXkgYmUgcmVkZWZpbmVkIG9yIGRvbid0IHlldCBleGlzdC4gU2VlXG4gICAgICogW1BldGVyIE1pY2hhdXgncyBhcnRpY2xlXShodHRwOi8vcGV0ZXIubWljaGF1eC5jYS9hcnRpY2xlcy9sYXp5LWZ1bmN0aW9uLWRlZmluaXRpb24tcGF0dGVybilcbiAgICAgKiBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqXG4gICAgICogVGhlIGBfLmJpbmRLZXkucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpY1xuICAgICAqIGJ1aWxkcywgbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnZva2UgdGhlIG1ldGhvZCBvbi5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIG1ldGhvZC5cbiAgICAgKiBAcGFyYW0gey4uLip9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBiZSBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBib3VuZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHtcbiAgICAgKiAgICd1c2VyJzogJ2ZyZWQnLFxuICAgICAqICAgJ2dyZWV0JzogZnVuY3Rpb24oZ3JlZXRpbmcsIHB1bmN0dWF0aW9uKSB7XG4gICAgICogICAgIHJldHVybiBncmVldGluZyArICcgJyArIHRoaXMudXNlciArIHB1bmN0dWF0aW9uO1xuICAgICAqICAgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB2YXIgYm91bmQgPSBfLmJpbmRLZXkob2JqZWN0LCAnZ3JlZXQnLCAnaGknKTtcbiAgICAgKiBib3VuZCgnIScpO1xuICAgICAqIC8vID0+ICdoaSBmcmVkISdcbiAgICAgKlxuICAgICAqIG9iamVjdC5ncmVldCA9IGZ1bmN0aW9uKGdyZWV0aW5nLCBwdW5jdHVhdGlvbikge1xuICAgICAqICAgcmV0dXJuIGdyZWV0aW5nICsgJ3lhICcgKyB0aGlzLnVzZXIgKyBwdW5jdHVhdGlvbjtcbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogYm91bmQoJyEnKTtcbiAgICAgKiAvLyA9PiAnaGl5YSBmcmVkISdcbiAgICAgKlxuICAgICAqIC8vIEJvdW5kIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIHZhciBib3VuZCA9IF8uYmluZEtleShvYmplY3QsICdncmVldCcsIF8sICchJyk7XG4gICAgICogYm91bmQoJ2hpJyk7XG4gICAgICogLy8gPT4gJ2hpeWEgZnJlZCEnXG4gICAgICovXG4gICAgdmFyIGJpbmRLZXkgPSBiYXNlUmVzdChmdW5jdGlvbihvYmplY3QsIGtleSwgcGFydGlhbHMpIHtcbiAgICAgIHZhciBiaXRtYXNrID0gV1JBUF9CSU5EX0ZMQUcgfCBXUkFQX0JJTkRfS0VZX0ZMQUc7XG4gICAgICBpZiAocGFydGlhbHMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBob2xkZXJzID0gcmVwbGFjZUhvbGRlcnMocGFydGlhbHMsIGdldEhvbGRlcihiaW5kS2V5KSk7XG4gICAgICAgIGJpdG1hc2sgfD0gV1JBUF9QQVJUSUFMX0ZMQUc7XG4gICAgICB9XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcChrZXksIGJpdG1hc2ssIG9iamVjdCwgcGFydGlhbHMsIGhvbGRlcnMpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyBhcmd1bWVudHMgb2YgYGZ1bmNgIGFuZCBlaXRoZXIgaW52b2tlc1xuICAgICAqIGBmdW5jYCByZXR1cm5pbmcgaXRzIHJlc3VsdCwgaWYgYXQgbGVhc3QgYGFyaXR5YCBudW1iZXIgb2YgYXJndW1lbnRzIGhhdmVcbiAgICAgKiBiZWVuIHByb3ZpZGVkLCBvciByZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBhY2NlcHRzIHRoZSByZW1haW5pbmcgYGZ1bmNgXG4gICAgICogYXJndW1lbnRzLCBhbmQgc28gb24uIFRoZSBhcml0eSBvZiBgZnVuY2AgbWF5IGJlIHNwZWNpZmllZCBpZiBgZnVuYy5sZW5ndGhgXG4gICAgICogaXMgbm90IHN1ZmZpY2llbnQuXG4gICAgICpcbiAgICAgKiBUaGUgYF8uY3VycnkucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpYyBidWlsZHMsXG4gICAgICogbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcHJvdmlkZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGRvZXNuJ3Qgc2V0IHRoZSBcImxlbmd0aFwiIHByb3BlcnR5IG9mIGN1cnJpZWQgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY3VycnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eT1mdW5jLmxlbmd0aF0gVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGN1cnJpZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhYmMgPSBmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICogICByZXR1cm4gW2EsIGIsIGNdO1xuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB2YXIgY3VycmllZCA9IF8uY3VycnkoYWJjKTtcbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMSkoMikoMyk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDEsIDIpKDMpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogY3VycmllZCgxLCAyLCAzKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIC8vIEN1cnJpZWQgd2l0aCBwbGFjZWhvbGRlcnMuXG4gICAgICogY3VycmllZCgxKShfLCAzKSgyKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjdXJyeShmdW5jLCBhcml0eSwgZ3VhcmQpIHtcbiAgICAgIGFyaXR5ID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBhcml0eTtcbiAgICAgIHZhciByZXN1bHQgPSBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfQ1VSUllfRkxBRywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGFyaXR5KTtcbiAgICAgIHJlc3VsdC5wbGFjZWhvbGRlciA9IGN1cnJ5LnBsYWNlaG9sZGVyO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmN1cnJ5YCBleGNlcHQgdGhhdCBhcmd1bWVudHMgYXJlIGFwcGxpZWQgdG8gYGZ1bmNgXG4gICAgICogaW4gdGhlIG1hbm5lciBvZiBgXy5wYXJ0aWFsUmlnaHRgIGluc3RlYWQgb2YgYF8ucGFydGlhbGAuXG4gICAgICpcbiAgICAgKiBUaGUgYF8uY3VycnlSaWdodC5wbGFjZWhvbGRlcmAgdmFsdWUsIHdoaWNoIGRlZmF1bHRzIHRvIGBfYCBpbiBtb25vbGl0aGljXG4gICAgICogYnVpbGRzLCBtYXkgYmUgdXNlZCBhcyBhIHBsYWNlaG9sZGVyIGZvciBwcm92aWRlZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCIgcHJvcGVydHkgb2YgY3VycmllZCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjdXJyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5PWZ1bmMubGVuZ3RoXSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY3VycmllZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFiYyA9IGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgICAgKiAgIHJldHVybiBbYSwgYiwgY107XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIHZhciBjdXJyaWVkID0gXy5jdXJyeVJpZ2h0KGFiYyk7XG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDMpKDIpKDEpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogY3VycmllZCgyLCAzKSgxKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMSwgMiwgMyk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiAvLyBDdXJyaWVkIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIGN1cnJpZWQoMykoMSwgXykoMik7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3VycnlSaWdodChmdW5jLCBhcml0eSwgZ3VhcmQpIHtcbiAgICAgIGFyaXR5ID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBhcml0eTtcbiAgICAgIHZhciByZXN1bHQgPSBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfQ1VSUllfUklHSFRfRkxBRywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGFyaXR5KTtcbiAgICAgIHJlc3VsdC5wbGFjZWhvbGRlciA9IGN1cnJ5UmlnaHQucGxhY2Vob2xkZXI7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBkZWJvdW5jZWQgZnVuY3Rpb24gdGhhdCBkZWxheXMgaW52b2tpbmcgYGZ1bmNgIHVudGlsIGFmdGVyIGB3YWl0YFxuICAgICAqIG1pbGxpc2Vjb25kcyBoYXZlIGVsYXBzZWQgc2luY2UgdGhlIGxhc3QgdGltZSB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uIHdhc1xuICAgICAqIGludm9rZWQuIFRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gY29tZXMgd2l0aCBhIGBjYW5jZWxgIG1ldGhvZCB0byBjYW5jZWxcbiAgICAgKiBkZWxheWVkIGBmdW5jYCBpbnZvY2F0aW9ucyBhbmQgYSBgZmx1c2hgIG1ldGhvZCB0byBpbW1lZGlhdGVseSBpbnZva2UgdGhlbS5cbiAgICAgKiBQcm92aWRlIGBvcHRpb25zYCB0byBpbmRpY2F0ZSB3aGV0aGVyIGBmdW5jYCBzaG91bGQgYmUgaW52b2tlZCBvbiB0aGVcbiAgICAgKiBsZWFkaW5nIGFuZC9vciB0cmFpbGluZyBlZGdlIG9mIHRoZSBgd2FpdGAgdGltZW91dC4gVGhlIGBmdW5jYCBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aGUgbGFzdCBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIGRlYm91bmNlZCBmdW5jdGlvbi4gU3Vic2VxdWVudFxuICAgICAqIGNhbGxzIHRvIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gcmV0dXJuIHRoZSByZXN1bHQgb2YgdGhlIGxhc3QgYGZ1bmNgXG4gICAgICogaW52b2NhdGlvbi5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBJZiBgbGVhZGluZ2AgYW5kIGB0cmFpbGluZ2Agb3B0aW9ucyBhcmUgYHRydWVgLCBgZnVuY2AgaXNcbiAgICAgKiBpbnZva2VkIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0IG9ubHkgaWYgdGhlIGRlYm91bmNlZCBmdW5jdGlvblxuICAgICAqIGlzIGludm9rZWQgbW9yZSB0aGFuIG9uY2UgZHVyaW5nIHRoZSBgd2FpdGAgdGltZW91dC5cbiAgICAgKlxuICAgICAqIElmIGB3YWl0YCBpcyBgMGAgYW5kIGBsZWFkaW5nYCBpcyBgZmFsc2VgLCBgZnVuY2AgaW52b2NhdGlvbiBpcyBkZWZlcnJlZFxuICAgICAqIHVudGlsIHRvIHRoZSBuZXh0IHRpY2ssIHNpbWlsYXIgdG8gYHNldFRpbWVvdXRgIHdpdGggYSB0aW1lb3V0IG9mIGAwYC5cbiAgICAgKlxuICAgICAqIFNlZSBbRGF2aWQgQ29yYmFjaG8ncyBhcnRpY2xlXShodHRwczovL2Nzcy10cmlja3MuY29tL2RlYm91bmNpbmctdGhyb3R0bGluZy1leHBsYWluZWQtZXhhbXBsZXMvKVxuICAgICAqIGZvciBkZXRhaWxzIG92ZXIgdGhlIGRpZmZlcmVuY2VzIGJldHdlZW4gYF8uZGVib3VuY2VgIGFuZCBgXy50aHJvdHRsZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWJvdW5jZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3dhaXQ9MF0gVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5sZWFkaW5nPWZhbHNlXVxuICAgICAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSBsZWFkaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm1heFdhaXRdXG4gICAgICogIFRoZSBtYXhpbXVtIHRpbWUgYGZ1bmNgIGlzIGFsbG93ZWQgdG8gYmUgZGVsYXllZCBiZWZvcmUgaXQncyBpbnZva2VkLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudHJhaWxpbmc9dHJ1ZV1cbiAgICAgKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBkZWJvdW5jZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIC8vIEF2b2lkIGNvc3RseSBjYWxjdWxhdGlvbnMgd2hpbGUgdGhlIHdpbmRvdyBzaXplIGlzIGluIGZsdXguXG4gICAgICogalF1ZXJ5KHdpbmRvdykub24oJ3Jlc2l6ZScsIF8uZGVib3VuY2UoY2FsY3VsYXRlTGF5b3V0LCAxNTApKTtcbiAgICAgKlxuICAgICAqIC8vIEludm9rZSBgc2VuZE1haWxgIHdoZW4gY2xpY2tlZCwgZGVib3VuY2luZyBzdWJzZXF1ZW50IGNhbGxzLlxuICAgICAqIGpRdWVyeShlbGVtZW50KS5vbignY2xpY2snLCBfLmRlYm91bmNlKHNlbmRNYWlsLCAzMDAsIHtcbiAgICAgKiAgICdsZWFkaW5nJzogdHJ1ZSxcbiAgICAgKiAgICd0cmFpbGluZyc6IGZhbHNlXG4gICAgICogfSkpO1xuICAgICAqXG4gICAgICogLy8gRW5zdXJlIGBiYXRjaExvZ2AgaXMgaW52b2tlZCBvbmNlIGFmdGVyIDEgc2Vjb25kIG9mIGRlYm91bmNlZCBjYWxscy5cbiAgICAgKiB2YXIgZGVib3VuY2VkID0gXy5kZWJvdW5jZShiYXRjaExvZywgMjUwLCB7ICdtYXhXYWl0JzogMTAwMCB9KTtcbiAgICAgKiB2YXIgc291cmNlID0gbmV3IEV2ZW50U291cmNlKCcvc3RyZWFtJyk7XG4gICAgICogalF1ZXJ5KHNvdXJjZSkub24oJ21lc3NhZ2UnLCBkZWJvdW5jZWQpO1xuICAgICAqXG4gICAgICogLy8gQ2FuY2VsIHRoZSB0cmFpbGluZyBkZWJvdW5jZWQgaW52b2NhdGlvbi5cbiAgICAgKiBqUXVlcnkod2luZG93KS5vbigncG9wc3RhdGUnLCBkZWJvdW5jZWQuY2FuY2VsKTtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkZWJvdW5jZShmdW5jLCB3YWl0LCBvcHRpb25zKSB7XG4gICAgICB2YXIgbGFzdEFyZ3MsXG4gICAgICAgICAgbGFzdFRoaXMsXG4gICAgICAgICAgbWF4V2FpdCxcbiAgICAgICAgICByZXN1bHQsXG4gICAgICAgICAgdGltZXJJZCxcbiAgICAgICAgICBsYXN0Q2FsbFRpbWUsXG4gICAgICAgICAgbGFzdEludm9rZVRpbWUgPSAwLFxuICAgICAgICAgIGxlYWRpbmcgPSBmYWxzZSxcbiAgICAgICAgICBtYXhpbmcgPSBmYWxzZSxcbiAgICAgICAgICB0cmFpbGluZyA9IHRydWU7XG5cbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHdhaXQgPSB0b051bWJlcih3YWl0KSB8fCAwO1xuICAgICAgaWYgKGlzT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgICAgIGxlYWRpbmcgPSAhIW9wdGlvbnMubGVhZGluZztcbiAgICAgICAgbWF4aW5nID0gJ21heFdhaXQnIGluIG9wdGlvbnM7XG4gICAgICAgIG1heFdhaXQgPSBtYXhpbmcgPyBuYXRpdmVNYXgodG9OdW1iZXIob3B0aW9ucy5tYXhXYWl0KSB8fCAwLCB3YWl0KSA6IG1heFdhaXQ7XG4gICAgICAgIHRyYWlsaW5nID0gJ3RyYWlsaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLnRyYWlsaW5nIDogdHJhaWxpbmc7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGludm9rZUZ1bmModGltZSkge1xuICAgICAgICB2YXIgYXJncyA9IGxhc3RBcmdzLFxuICAgICAgICAgICAgdGhpc0FyZyA9IGxhc3RUaGlzO1xuXG4gICAgICAgIGxhc3RBcmdzID0gbGFzdFRoaXMgPSB1bmRlZmluZWQ7XG4gICAgICAgIGxhc3RJbnZva2VUaW1lID0gdGltZTtcbiAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gbGVhZGluZ0VkZ2UodGltZSkge1xuICAgICAgICAvLyBSZXNldCBhbnkgYG1heFdhaXRgIHRpbWVyLlxuICAgICAgICBsYXN0SW52b2tlVGltZSA9IHRpbWU7XG4gICAgICAgIC8vIFN0YXJ0IHRoZSB0aW1lciBmb3IgdGhlIHRyYWlsaW5nIGVkZ2UuXG4gICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgICAgIC8vIEludm9rZSB0aGUgbGVhZGluZyBlZGdlLlxuICAgICAgICByZXR1cm4gbGVhZGluZyA/IGludm9rZUZ1bmModGltZSkgOiByZXN1bHQ7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHJlbWFpbmluZ1dhaXQodGltZSkge1xuICAgICAgICB2YXIgdGltZVNpbmNlTGFzdENhbGwgPSB0aW1lIC0gbGFzdENhbGxUaW1lLFxuICAgICAgICAgICAgdGltZVNpbmNlTGFzdEludm9rZSA9IHRpbWUgLSBsYXN0SW52b2tlVGltZSxcbiAgICAgICAgICAgIHRpbWVXYWl0aW5nID0gd2FpdCAtIHRpbWVTaW5jZUxhc3RDYWxsO1xuXG4gICAgICAgIHJldHVybiBtYXhpbmdcbiAgICAgICAgICA/IG5hdGl2ZU1pbih0aW1lV2FpdGluZywgbWF4V2FpdCAtIHRpbWVTaW5jZUxhc3RJbnZva2UpXG4gICAgICAgICAgOiB0aW1lV2FpdGluZztcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gc2hvdWxkSW52b2tlKHRpbWUpIHtcbiAgICAgICAgdmFyIHRpbWVTaW5jZUxhc3RDYWxsID0gdGltZSAtIGxhc3RDYWxsVGltZSxcbiAgICAgICAgICAgIHRpbWVTaW5jZUxhc3RJbnZva2UgPSB0aW1lIC0gbGFzdEludm9rZVRpbWU7XG5cbiAgICAgICAgLy8gRWl0aGVyIHRoaXMgaXMgdGhlIGZpcnN0IGNhbGwsIGFjdGl2aXR5IGhhcyBzdG9wcGVkIGFuZCB3ZSdyZSBhdCB0aGVcbiAgICAgICAgLy8gdHJhaWxpbmcgZWRnZSwgdGhlIHN5c3RlbSB0aW1lIGhhcyBnb25lIGJhY2t3YXJkcyBhbmQgd2UncmUgdHJlYXRpbmdcbiAgICAgICAgLy8gaXQgYXMgdGhlIHRyYWlsaW5nIGVkZ2UsIG9yIHdlJ3ZlIGhpdCB0aGUgYG1heFdhaXRgIGxpbWl0LlxuICAgICAgICByZXR1cm4gKGxhc3RDYWxsVGltZSA9PT0gdW5kZWZpbmVkIHx8ICh0aW1lU2luY2VMYXN0Q2FsbCA+PSB3YWl0KSB8fFxuICAgICAgICAgICh0aW1lU2luY2VMYXN0Q2FsbCA8IDApIHx8IChtYXhpbmcgJiYgdGltZVNpbmNlTGFzdEludm9rZSA+PSBtYXhXYWl0KSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHRpbWVyRXhwaXJlZCgpIHtcbiAgICAgICAgdmFyIHRpbWUgPSBub3coKTtcbiAgICAgICAgaWYgKHNob3VsZEludm9rZSh0aW1lKSkge1xuICAgICAgICAgIHJldHVybiB0cmFpbGluZ0VkZ2UodGltZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVzdGFydCB0aGUgdGltZXIuXG4gICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgcmVtYWluaW5nV2FpdCh0aW1lKSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHRyYWlsaW5nRWRnZSh0aW1lKSB7XG4gICAgICAgIHRpbWVySWQgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgLy8gT25seSBpbnZva2UgaWYgd2UgaGF2ZSBgbGFzdEFyZ3NgIHdoaWNoIG1lYW5zIGBmdW5jYCBoYXMgYmVlblxuICAgICAgICAvLyBkZWJvdW5jZWQgYXQgbGVhc3Qgb25jZS5cbiAgICAgICAgaWYgKHRyYWlsaW5nICYmIGxhc3RBcmdzKSB7XG4gICAgICAgICAgcmV0dXJuIGludm9rZUZ1bmModGltZSk7XG4gICAgICAgIH1cbiAgICAgICAgbGFzdEFyZ3MgPSBsYXN0VGhpcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gY2FuY2VsKCkge1xuICAgICAgICBpZiAodGltZXJJZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVySWQpO1xuICAgICAgICB9XG4gICAgICAgIGxhc3RJbnZva2VUaW1lID0gMDtcbiAgICAgICAgbGFzdEFyZ3MgPSBsYXN0Q2FsbFRpbWUgPSBsYXN0VGhpcyA9IHRpbWVySWQgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGZsdXNoKCkge1xuICAgICAgICByZXR1cm4gdGltZXJJZCA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogdHJhaWxpbmdFZGdlKG5vdygpKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZGVib3VuY2VkKCkge1xuICAgICAgICB2YXIgdGltZSA9IG5vdygpLFxuICAgICAgICAgICAgaXNJbnZva2luZyA9IHNob3VsZEludm9rZSh0aW1lKTtcblxuICAgICAgICBsYXN0QXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgbGFzdFRoaXMgPSB0aGlzO1xuICAgICAgICBsYXN0Q2FsbFRpbWUgPSB0aW1lO1xuXG4gICAgICAgIGlmIChpc0ludm9raW5nKSB7XG4gICAgICAgICAgaWYgKHRpbWVySWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGxlYWRpbmdFZGdlKGxhc3RDYWxsVGltZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChtYXhpbmcpIHtcbiAgICAgICAgICAgIC8vIEhhbmRsZSBpbnZvY2F0aW9ucyBpbiBhIHRpZ2h0IGxvb3AuXG4gICAgICAgICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgICAgICAgICAgcmV0dXJuIGludm9rZUZ1bmMobGFzdENhbGxUaW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRpbWVySWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGRlYm91bmNlZC5jYW5jZWwgPSBjYW5jZWw7XG4gICAgICBkZWJvdW5jZWQuZmx1c2ggPSBmbHVzaDtcbiAgICAgIHJldHVybiBkZWJvdW5jZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVmZXJzIGludm9raW5nIHRoZSBgZnVuY2AgdW50aWwgdGhlIGN1cnJlbnQgY2FsbCBzdGFjayBoYXMgY2xlYXJlZC4gQW55XG4gICAgICogYWRkaXRpb25hbCBhcmd1bWVudHMgYXJlIHByb3ZpZGVkIHRvIGBmdW5jYCB3aGVuIGl0J3MgaW52b2tlZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRlZmVyLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIGBmdW5jYCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRpbWVyIGlkLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlZmVyKGZ1bmN0aW9uKHRleHQpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKHRleHQpO1xuICAgICAqIH0sICdkZWZlcnJlZCcpO1xuICAgICAqIC8vID0+IExvZ3MgJ2RlZmVycmVkJyBhZnRlciBvbmUgbWlsbGlzZWNvbmQuXG4gICAgICovXG4gICAgdmFyIGRlZmVyID0gYmFzZVJlc3QoZnVuY3Rpb24oZnVuYywgYXJncykge1xuICAgICAgcmV0dXJuIGJhc2VEZWxheShmdW5jLCAxLCBhcmdzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIEludm9rZXMgYGZ1bmNgIGFmdGVyIGB3YWl0YCBtaWxsaXNlY29uZHMuIEFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cyBhcmVcbiAgICAgKiBwcm92aWRlZCB0byBgZnVuY2Agd2hlbiBpdCdzIGludm9rZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWxheS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gd2FpdCBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkZWxheSBpbnZvY2F0aW9uLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIGBmdW5jYCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRpbWVyIGlkLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlbGF5KGZ1bmN0aW9uKHRleHQpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKHRleHQpO1xuICAgICAqIH0sIDEwMDAsICdsYXRlcicpO1xuICAgICAqIC8vID0+IExvZ3MgJ2xhdGVyJyBhZnRlciBvbmUgc2Vjb25kLlxuICAgICAqL1xuICAgIHZhciBkZWxheSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIHdhaXQsIGFyZ3MpIHtcbiAgICAgIHJldHVybiBiYXNlRGVsYXkoZnVuYywgdG9OdW1iZXIod2FpdCkgfHwgMCwgYXJncyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGFyZ3VtZW50cyByZXZlcnNlZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGZsaXAgYXJndW1lbnRzIGZvci5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmbGlwcGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZmxpcHBlZCA9IF8uZmxpcChmdW5jdGlvbigpIHtcbiAgICAgKiAgIHJldHVybiBfLnRvQXJyYXkoYXJndW1lbnRzKTtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIGZsaXBwZWQoJ2EnLCAnYicsICdjJywgJ2QnKTtcbiAgICAgKiAvLyA9PiBbJ2QnLCAnYycsICdiJywgJ2EnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsaXAoZnVuYykge1xuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9GTElQX0ZMQUcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IG1lbW9pemVzIHRoZSByZXN1bHQgb2YgYGZ1bmNgLiBJZiBgcmVzb2x2ZXJgIGlzXG4gICAgICogcHJvdmlkZWQsIGl0IGRldGVybWluZXMgdGhlIGNhY2hlIGtleSBmb3Igc3RvcmluZyB0aGUgcmVzdWx0IGJhc2VkIG9uIHRoZVxuICAgICAqIGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uIEJ5IGRlZmF1bHQsIHRoZSBmaXJzdCBhcmd1bWVudFxuICAgICAqIHByb3ZpZGVkIHRvIHRoZSBtZW1vaXplZCBmdW5jdGlvbiBpcyB1c2VkIGFzIHRoZSBtYXAgY2FjaGUga2V5LiBUaGUgYGZ1bmNgXG4gICAgICogaXMgaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhlIGNhY2hlIGlzIGV4cG9zZWQgYXMgdGhlIGBjYWNoZWAgcHJvcGVydHkgb24gdGhlIG1lbW9pemVkXG4gICAgICogZnVuY3Rpb24uIEl0cyBjcmVhdGlvbiBtYXkgYmUgY3VzdG9taXplZCBieSByZXBsYWNpbmcgdGhlIGBfLm1lbW9pemUuQ2FjaGVgXG4gICAgICogY29uc3RydWN0b3Igd2l0aCBvbmUgd2hvc2UgaW5zdGFuY2VzIGltcGxlbWVudCB0aGVcbiAgICAgKiBbYE1hcGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXByb3BlcnRpZXMtb2YtdGhlLW1hcC1wcm90b3R5cGUtb2JqZWN0KVxuICAgICAqIG1ldGhvZCBpbnRlcmZhY2Ugb2YgYGNsZWFyYCwgYGRlbGV0ZWAsIGBnZXRgLCBgaGFzYCwgYW5kIGBzZXRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaGF2ZSBpdHMgb3V0cHV0IG1lbW9pemVkLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtyZXNvbHZlcl0gVGhlIGZ1bmN0aW9uIHRvIHJlc29sdmUgdGhlIGNhY2hlIGtleS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBtZW1vaXplZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6IDIgfTtcbiAgICAgKiB2YXIgb3RoZXIgPSB7ICdjJzogMywgJ2QnOiA0IH07XG4gICAgICpcbiAgICAgKiB2YXIgdmFsdWVzID0gXy5tZW1vaXplKF8udmFsdWVzKTtcbiAgICAgKiB2YWx1ZXMob2JqZWN0KTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIHZhbHVlcyhvdGhlcik7XG4gICAgICogLy8gPT4gWzMsIDRdXG4gICAgICpcbiAgICAgKiBvYmplY3QuYSA9IDI7XG4gICAgICogdmFsdWVzKG9iamVjdCk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiAvLyBNb2RpZnkgdGhlIHJlc3VsdCBjYWNoZS5cbiAgICAgKiB2YWx1ZXMuY2FjaGUuc2V0KG9iamVjdCwgWydhJywgJ2InXSk7XG4gICAgICogdmFsdWVzKG9iamVjdCk7XG4gICAgICogLy8gPT4gWydhJywgJ2InXVxuICAgICAqXG4gICAgICogLy8gUmVwbGFjZSBgXy5tZW1vaXplLkNhY2hlYC5cbiAgICAgKiBfLm1lbW9pemUuQ2FjaGUgPSBXZWFrTWFwO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1lbW9pemUoZnVuYywgcmVzb2x2ZXIpIHtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nIHx8IChyZXNvbHZlciAhPSBudWxsICYmIHR5cGVvZiByZXNvbHZlciAhPSAnZnVuY3Rpb24nKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICB2YXIgbWVtb2l6ZWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgICBrZXkgPSByZXNvbHZlciA/IHJlc29sdmVyLmFwcGx5KHRoaXMsIGFyZ3MpIDogYXJnc1swXSxcbiAgICAgICAgICAgIGNhY2hlID0gbWVtb2l6ZWQuY2FjaGU7XG5cbiAgICAgICAgaWYgKGNhY2hlLmhhcyhrZXkpKSB7XG4gICAgICAgICAgcmV0dXJuIGNhY2hlLmdldChrZXkpO1xuICAgICAgICB9XG4gICAgICAgIHZhciByZXN1bHQgPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICBtZW1vaXplZC5jYWNoZSA9IGNhY2hlLnNldChrZXksIHJlc3VsdCkgfHwgY2FjaGU7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgICAgbWVtb2l6ZWQuY2FjaGUgPSBuZXcgKG1lbW9pemUuQ2FjaGUgfHwgTWFwQ2FjaGUpO1xuICAgICAgcmV0dXJuIG1lbW9pemVkO1xuICAgIH1cblxuICAgIC8vIEV4cG9zZSBgTWFwQ2FjaGVgLlxuICAgIG1lbW9pemUuQ2FjaGUgPSBNYXBDYWNoZTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IG5lZ2F0ZXMgdGhlIHJlc3VsdCBvZiB0aGUgcHJlZGljYXRlIGBmdW5jYC4gVGhlXG4gICAgICogYGZ1bmNgIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIGFuZCBhcmd1bWVudHMgb2YgdGhlXG4gICAgICogY3JlYXRlZCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgcHJlZGljYXRlIHRvIG5lZ2F0ZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBuZWdhdGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBpc0V2ZW4obikge1xuICAgICAqICAgcmV0dXJuIG4gJSAyID09IDA7XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5maWx0ZXIoWzEsIDIsIDMsIDQsIDUsIDZdLCBfLm5lZ2F0ZShpc0V2ZW4pKTtcbiAgICAgKiAvLyA9PiBbMSwgMywgNV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBuZWdhdGUocHJlZGljYXRlKSB7XG4gICAgICBpZiAodHlwZW9mIHByZWRpY2F0ZSAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgICBjYXNlIDA6IHJldHVybiAhcHJlZGljYXRlLmNhbGwodGhpcyk7XG4gICAgICAgICAgY2FzZSAxOiByZXR1cm4gIXByZWRpY2F0ZS5jYWxsKHRoaXMsIGFyZ3NbMF0pO1xuICAgICAgICAgIGNhc2UgMjogcmV0dXJuICFwcmVkaWNhdGUuY2FsbCh0aGlzLCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgICBjYXNlIDM6IHJldHVybiAhcHJlZGljYXRlLmNhbGwodGhpcywgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICFwcmVkaWNhdGUuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGlzIHJlc3RyaWN0ZWQgdG8gaW52b2tpbmcgYGZ1bmNgIG9uY2UuIFJlcGVhdCBjYWxsc1xuICAgICAqIHRvIHRoZSBmdW5jdGlvbiByZXR1cm4gdGhlIHZhbHVlIG9mIHRoZSBmaXJzdCBpbnZvY2F0aW9uLiBUaGUgYGZ1bmNgIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBhbmQgYXJndW1lbnRzIG9mIHRoZSBjcmVhdGVkIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVzdHJpY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmVzdHJpY3RlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGluaXRpYWxpemUgPSBfLm9uY2UoY3JlYXRlQXBwbGljYXRpb24pO1xuICAgICAqIGluaXRpYWxpemUoKTtcbiAgICAgKiBpbml0aWFsaXplKCk7XG4gICAgICogLy8gPT4gYGNyZWF0ZUFwcGxpY2F0aW9uYCBpcyBpbnZva2VkIG9uY2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvbmNlKGZ1bmMpIHtcbiAgICAgIHJldHVybiBiZWZvcmUoMiwgZnVuYyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBpdHMgYXJndW1lbnRzIHRyYW5zZm9ybWVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW3RyYW5zZm9ybXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgYXJndW1lbnQgdHJhbnNmb3Jtcy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZG91YmxlZChuKSB7XG4gICAgICogICByZXR1cm4gbiAqIDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ub3ZlckFyZ3MoZnVuY3Rpb24oeCwgeSkge1xuICAgICAqICAgcmV0dXJuIFt4LCB5XTtcbiAgICAgKiB9LCBbc3F1YXJlLCBkb3VibGVkXSk7XG4gICAgICpcbiAgICAgKiBmdW5jKDksIDMpO1xuICAgICAqIC8vID0+IFs4MSwgNl1cbiAgICAgKlxuICAgICAqIGZ1bmMoMTAsIDUpO1xuICAgICAqIC8vID0+IFsxMDAsIDEwXVxuICAgICAqL1xuICAgIHZhciBvdmVyQXJncyA9IGNhc3RSZXN0KGZ1bmN0aW9uKGZ1bmMsIHRyYW5zZm9ybXMpIHtcbiAgICAgIHRyYW5zZm9ybXMgPSAodHJhbnNmb3Jtcy5sZW5ndGggPT0gMSAmJiBpc0FycmF5KHRyYW5zZm9ybXNbMF0pKVxuICAgICAgICA/IGFycmF5TWFwKHRyYW5zZm9ybXNbMF0sIGJhc2VVbmFyeShnZXRJdGVyYXRlZSgpKSlcbiAgICAgICAgOiBhcnJheU1hcChiYXNlRmxhdHRlbih0cmFuc2Zvcm1zLCAxKSwgYmFzZVVuYXJ5KGdldEl0ZXJhdGVlKCkpKTtcblxuICAgICAgdmFyIGZ1bmNzTGVuZ3RoID0gdHJhbnNmb3Jtcy5sZW5ndGg7XG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1pbihhcmdzLmxlbmd0aCwgZnVuY3NMZW5ndGgpO1xuXG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgYXJnc1tpbmRleF0gPSB0cmFuc2Zvcm1zW2luZGV4XS5jYWxsKHRoaXMsIGFyZ3NbaW5kZXhdKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXBwbHkoZnVuYywgdGhpcywgYXJncyk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggYHBhcnRpYWxzYCBwcmVwZW5kZWQgdG8gdGhlXG4gICAgICogYXJndW1lbnRzIGl0IHJlY2VpdmVzLiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmJpbmRgIGV4Y2VwdCBpdCBkb2VzICoqbm90KipcbiAgICAgKiBhbHRlciB0aGUgYHRoaXNgIGJpbmRpbmcuXG4gICAgICpcbiAgICAgKiBUaGUgYF8ucGFydGlhbC5wbGFjZWhvbGRlcmAgdmFsdWUsIHdoaWNoIGRlZmF1bHRzIHRvIGBfYCBpbiBtb25vbGl0aGljXG4gICAgICogYnVpbGRzLCBtYXkgYmUgdXNlZCBhcyBhIHBsYWNlaG9sZGVyIGZvciBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCIgcHJvcGVydHkgb2YgcGFydGlhbGx5XG4gICAgICogYXBwbGllZCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBwYXJ0aWFsbHkgYXBwbHkgYXJndW1lbnRzIHRvLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIGJlIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHBhcnRpYWxseSBhcHBsaWVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBncmVldChncmVldGluZywgbmFtZSkge1xuICAgICAqICAgcmV0dXJuIGdyZWV0aW5nICsgJyAnICsgbmFtZTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgc2F5SGVsbG9UbyA9IF8ucGFydGlhbChncmVldCwgJ2hlbGxvJyk7XG4gICAgICogc2F5SGVsbG9UbygnZnJlZCcpO1xuICAgICAqIC8vID0+ICdoZWxsbyBmcmVkJ1xuICAgICAqXG4gICAgICogLy8gUGFydGlhbGx5IGFwcGxpZWQgd2l0aCBwbGFjZWhvbGRlcnMuXG4gICAgICogdmFyIGdyZWV0RnJlZCA9IF8ucGFydGlhbChncmVldCwgXywgJ2ZyZWQnKTtcbiAgICAgKiBncmVldEZyZWQoJ2hpJyk7XG4gICAgICogLy8gPT4gJ2hpIGZyZWQnXG4gICAgICovXG4gICAgdmFyIHBhcnRpYWwgPSBiYXNlUmVzdChmdW5jdGlvbihmdW5jLCBwYXJ0aWFscykge1xuICAgICAgdmFyIGhvbGRlcnMgPSByZXBsYWNlSG9sZGVycyhwYXJ0aWFscywgZ2V0SG9sZGVyKHBhcnRpYWwpKTtcbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfUEFSVElBTF9GTEFHLCB1bmRlZmluZWQsIHBhcnRpYWxzLCBob2xkZXJzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ucGFydGlhbGAgZXhjZXB0IHRoYXQgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzXG4gICAgICogYXJlIGFwcGVuZGVkIHRvIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBUaGUgYF8ucGFydGlhbFJpZ2h0LnBsYWNlaG9sZGVyYCB2YWx1ZSwgd2hpY2ggZGVmYXVsdHMgdG8gYF9gIGluIG1vbm9saXRoaWNcbiAgICAgKiBidWlsZHMsIG1heSBiZSB1c2VkIGFzIGEgcGxhY2Vob2xkZXIgZm9yIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBkb2Vzbid0IHNldCB0aGUgXCJsZW5ndGhcIiBwcm9wZXJ0eSBvZiBwYXJ0aWFsbHlcbiAgICAgKiBhcHBsaWVkIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHBhcnRpYWxseSBhcHBseSBhcmd1bWVudHMgdG8uXG4gICAgICogQHBhcmFtIHsuLi4qfSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gYmUgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcGFydGlhbGx5IGFwcGxpZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGdyZWV0KGdyZWV0aW5nLCBuYW1lKSB7XG4gICAgICogICByZXR1cm4gZ3JlZXRpbmcgKyAnICcgKyBuYW1lO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBncmVldEZyZWQgPSBfLnBhcnRpYWxSaWdodChncmVldCwgJ2ZyZWQnKTtcbiAgICAgKiBncmVldEZyZWQoJ2hpJyk7XG4gICAgICogLy8gPT4gJ2hpIGZyZWQnXG4gICAgICpcbiAgICAgKiAvLyBQYXJ0aWFsbHkgYXBwbGllZCB3aXRoIHBsYWNlaG9sZGVycy5cbiAgICAgKiB2YXIgc2F5SGVsbG9UbyA9IF8ucGFydGlhbFJpZ2h0KGdyZWV0LCAnaGVsbG8nLCBfKTtcbiAgICAgKiBzYXlIZWxsb1RvKCdmcmVkJyk7XG4gICAgICogLy8gPT4gJ2hlbGxvIGZyZWQnXG4gICAgICovXG4gICAgdmFyIHBhcnRpYWxSaWdodCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIHBhcnRpYWxzKSB7XG4gICAgICB2YXIgaG9sZGVycyA9IHJlcGxhY2VIb2xkZXJzKHBhcnRpYWxzLCBnZXRIb2xkZXIocGFydGlhbFJpZ2h0KSk7XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcChmdW5jLCBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRywgdW5kZWZpbmVkLCBwYXJ0aWFscywgaG9sZGVycyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGFyZ3VtZW50cyBhcnJhbmdlZCBhY2NvcmRpbmdcbiAgICAgKiB0byB0aGUgc3BlY2lmaWVkIGBpbmRleGVzYCB3aGVyZSB0aGUgYXJndW1lbnQgdmFsdWUgYXQgdGhlIGZpcnN0IGluZGV4IGlzXG4gICAgICogcHJvdmlkZWQgYXMgdGhlIGZpcnN0IGFyZ3VtZW50LCB0aGUgYXJndW1lbnQgdmFsdWUgYXQgdGhlIHNlY29uZCBpbmRleCBpc1xuICAgICAqIHByb3ZpZGVkIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQsIGFuZCBzbyBvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHJlYXJyYW5nZSBhcmd1bWVudHMgZm9yLlxuICAgICAqIEBwYXJhbSB7Li4uKG51bWJlcnxudW1iZXJbXSl9IGluZGV4ZXMgVGhlIGFycmFuZ2VkIGFyZ3VtZW50IGluZGV4ZXMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciByZWFyZ2VkID0gXy5yZWFyZyhmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICogICByZXR1cm4gW2EsIGIsIGNdO1xuICAgICAqIH0sIFsyLCAwLCAxXSk7XG4gICAgICpcbiAgICAgKiByZWFyZ2VkKCdiJywgJ2MnLCAnYScpXG4gICAgICogLy8gPT4gWydhJywgJ2InLCAnYyddXG4gICAgICovXG4gICAgdmFyIHJlYXJnID0gZmxhdFJlc3QoZnVuY3Rpb24oZnVuYywgaW5kZXhlcykge1xuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9SRUFSR19GTEFHLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBpbmRleGVzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZVxuICAgICAqIGNyZWF0ZWQgZnVuY3Rpb24gYW5kIGFyZ3VtZW50cyBmcm9tIGBzdGFydGAgYW5kIGJleW9uZCBwcm92aWRlZCBhc1xuICAgICAqIGFuIGFycmF5LlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uIHRoZVxuICAgICAqIFtyZXN0IHBhcmFtZXRlcl0oaHR0cHM6Ly9tZG4uaW8vcmVzdF9wYXJhbWV0ZXJzKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD1mdW5jLmxlbmd0aC0xXSBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHJlc3QgcGFyYW1ldGVyLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgc2F5ID0gXy5yZXN0KGZ1bmN0aW9uKHdoYXQsIG5hbWVzKSB7XG4gICAgICogICByZXR1cm4gd2hhdCArICcgJyArIF8uaW5pdGlhbChuYW1lcykuam9pbignLCAnKSArXG4gICAgICogICAgIChfLnNpemUobmFtZXMpID4gMSA/ICcsICYgJyA6ICcnKSArIF8ubGFzdChuYW1lcyk7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBzYXkoJ2hlbGxvJywgJ2ZyZWQnLCAnYmFybmV5JywgJ3BlYmJsZXMnKTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVzdChmdW5jLCBzdGFydCkge1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgc3RhcnQgPSBzdGFydCA9PT0gdW5kZWZpbmVkID8gc3RhcnQgOiB0b0ludGVnZXIoc3RhcnQpO1xuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmMsIHN0YXJ0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGVcbiAgICAgKiBjcmVhdGUgZnVuY3Rpb24gYW5kIGFuIGFycmF5IG9mIGFyZ3VtZW50cyBtdWNoIGxpa2VcbiAgICAgKiBbYEZ1bmN0aW9uI2FwcGx5YF0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb24gdGhlXG4gICAgICogW3NwcmVhZCBvcGVyYXRvcl0oaHR0cHM6Ly9tZG4uaW8vc3ByZWFkX29wZXJhdG9yKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjIuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHNwcmVhZCBhcmd1bWVudHMgb3Zlci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgc3ByZWFkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgc2F5ID0gXy5zcHJlYWQoZnVuY3Rpb24od2hvLCB3aGF0KSB7XG4gICAgICogICByZXR1cm4gd2hvICsgJyBzYXlzICcgKyB3aGF0O1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogc2F5KFsnZnJlZCcsICdoZWxsbyddKTtcbiAgICAgKiAvLyA9PiAnZnJlZCBzYXlzIGhlbGxvJ1xuICAgICAqXG4gICAgICogdmFyIG51bWJlcnMgPSBQcm9taXNlLmFsbChbXG4gICAgICogICBQcm9taXNlLnJlc29sdmUoNDApLFxuICAgICAqICAgUHJvbWlzZS5yZXNvbHZlKDM2KVxuICAgICAqIF0pO1xuICAgICAqXG4gICAgICogbnVtYmVycy50aGVuKF8uc3ByZWFkKGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgKiAgIHJldHVybiB4ICsgeTtcbiAgICAgKiB9KSk7XG4gICAgICogLy8gPT4gYSBQcm9taXNlIG9mIDc2XG4gICAgICovXG4gICAgZnVuY3Rpb24gc3ByZWFkKGZ1bmMsIHN0YXJ0KSB7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICBzdGFydCA9IHN0YXJ0ID09IG51bGwgPyAwIDogbmF0aXZlTWF4KHRvSW50ZWdlcihzdGFydCksIDApO1xuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgICAgdmFyIGFycmF5ID0gYXJnc1tzdGFydF0sXG4gICAgICAgICAgICBvdGhlckFyZ3MgPSBjYXN0U2xpY2UoYXJncywgMCwgc3RhcnQpO1xuXG4gICAgICAgIGlmIChhcnJheSkge1xuICAgICAgICAgIGFycmF5UHVzaChvdGhlckFyZ3MsIGFycmF5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXBwbHkoZnVuYywgdGhpcywgb3RoZXJBcmdzKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSB0aHJvdHRsZWQgZnVuY3Rpb24gdGhhdCBvbmx5IGludm9rZXMgYGZ1bmNgIGF0IG1vc3Qgb25jZSBwZXJcbiAgICAgKiBldmVyeSBgd2FpdGAgbWlsbGlzZWNvbmRzLiBUaGUgdGhyb3R0bGVkIGZ1bmN0aW9uIGNvbWVzIHdpdGggYSBgY2FuY2VsYFxuICAgICAqIG1ldGhvZCB0byBjYW5jZWwgZGVsYXllZCBgZnVuY2AgaW52b2NhdGlvbnMgYW5kIGEgYGZsdXNoYCBtZXRob2QgdG9cbiAgICAgKiBpbW1lZGlhdGVseSBpbnZva2UgdGhlbS4gUHJvdmlkZSBgb3B0aW9uc2AgdG8gaW5kaWNhdGUgd2hldGhlciBgZnVuY2BcbiAgICAgKiBzaG91bGQgYmUgaW52b2tlZCBvbiB0aGUgbGVhZGluZyBhbmQvb3IgdHJhaWxpbmcgZWRnZSBvZiB0aGUgYHdhaXRgXG4gICAgICogdGltZW91dC4gVGhlIGBmdW5jYCBpcyBpbnZva2VkIHdpdGggdGhlIGxhc3QgYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZVxuICAgICAqIHRocm90dGxlZCBmdW5jdGlvbi4gU3Vic2VxdWVudCBjYWxscyB0byB0aGUgdGhyb3R0bGVkIGZ1bmN0aW9uIHJldHVybiB0aGVcbiAgICAgKiByZXN1bHQgb2YgdGhlIGxhc3QgYGZ1bmNgIGludm9jYXRpb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSWYgYGxlYWRpbmdgIGFuZCBgdHJhaWxpbmdgIG9wdGlvbnMgYXJlIGB0cnVlYCwgYGZ1bmNgIGlzXG4gICAgICogaW52b2tlZCBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dCBvbmx5IGlmIHRoZSB0aHJvdHRsZWQgZnVuY3Rpb25cbiAgICAgKiBpcyBpbnZva2VkIG1vcmUgdGhhbiBvbmNlIGR1cmluZyB0aGUgYHdhaXRgIHRpbWVvdXQuXG4gICAgICpcbiAgICAgKiBJZiBgd2FpdGAgaXMgYDBgIGFuZCBgbGVhZGluZ2AgaXMgYGZhbHNlYCwgYGZ1bmNgIGludm9jYXRpb24gaXMgZGVmZXJyZWRcbiAgICAgKiB1bnRpbCB0byB0aGUgbmV4dCB0aWNrLCBzaW1pbGFyIHRvIGBzZXRUaW1lb3V0YCB3aXRoIGEgdGltZW91dCBvZiBgMGAuXG4gICAgICpcbiAgICAgKiBTZWUgW0RhdmlkIENvcmJhY2hvJ3MgYXJ0aWNsZV0oaHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS9kZWJvdW5jaW5nLXRocm90dGxpbmctZXhwbGFpbmVkLWV4YW1wbGVzLylcbiAgICAgKiBmb3IgZGV0YWlscyBvdmVyIHRoZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIGBfLnRocm90dGxlYCBhbmQgYF8uZGVib3VuY2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gdGhyb3R0bGUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFt3YWl0PTBdIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHRocm90dGxlIGludm9jYXRpb25zIHRvLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMubGVhZGluZz10cnVlXVxuICAgICAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSBsZWFkaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy50cmFpbGluZz10cnVlXVxuICAgICAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHRocm90dGxlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogLy8gQXZvaWQgZXhjZXNzaXZlbHkgdXBkYXRpbmcgdGhlIHBvc2l0aW9uIHdoaWxlIHNjcm9sbGluZy5cbiAgICAgKiBqUXVlcnkod2luZG93KS5vbignc2Nyb2xsJywgXy50aHJvdHRsZSh1cGRhdGVQb3NpdGlvbiwgMTAwKSk7XG4gICAgICpcbiAgICAgKiAvLyBJbnZva2UgYHJlbmV3VG9rZW5gIHdoZW4gdGhlIGNsaWNrIGV2ZW50IGlzIGZpcmVkLCBidXQgbm90IG1vcmUgdGhhbiBvbmNlIGV2ZXJ5IDUgbWludXRlcy5cbiAgICAgKiB2YXIgdGhyb3R0bGVkID0gXy50aHJvdHRsZShyZW5ld1Rva2VuLCAzMDAwMDAsIHsgJ3RyYWlsaW5nJzogZmFsc2UgfSk7XG4gICAgICogalF1ZXJ5KGVsZW1lbnQpLm9uKCdjbGljaycsIHRocm90dGxlZCk7XG4gICAgICpcbiAgICAgKiAvLyBDYW5jZWwgdGhlIHRyYWlsaW5nIHRocm90dGxlZCBpbnZvY2F0aW9uLlxuICAgICAqIGpRdWVyeSh3aW5kb3cpLm9uKCdwb3BzdGF0ZScsIHRocm90dGxlZC5jYW5jZWwpO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRocm90dGxlKGZ1bmMsIHdhaXQsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBsZWFkaW5nID0gdHJ1ZSxcbiAgICAgICAgICB0cmFpbGluZyA9IHRydWU7XG5cbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc09iamVjdChvcHRpb25zKSkge1xuICAgICAgICBsZWFkaW5nID0gJ2xlYWRpbmcnIGluIG9wdGlvbnMgPyAhIW9wdGlvbnMubGVhZGluZyA6IGxlYWRpbmc7XG4gICAgICAgIHRyYWlsaW5nID0gJ3RyYWlsaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLnRyYWlsaW5nIDogdHJhaWxpbmc7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGVib3VuY2UoZnVuYywgd2FpdCwge1xuICAgICAgICAnbGVhZGluZyc6IGxlYWRpbmcsXG4gICAgICAgICdtYXhXYWl0Jzogd2FpdCxcbiAgICAgICAgJ3RyYWlsaW5nJzogdHJhaWxpbmdcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgdXAgdG8gb25lIGFyZ3VtZW50LCBpZ25vcmluZyBhbnlcbiAgICAgKiBhZGRpdGlvbmFsIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhcCBhcmd1bWVudHMgZm9yLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhcHBlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5tYXAoWyc2JywgJzgnLCAnMTAnXSwgXy51bmFyeShwYXJzZUludCkpO1xuICAgICAqIC8vID0+IFs2LCA4LCAxMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bmFyeShmdW5jKSB7XG4gICAgICByZXR1cm4gYXJ5KGZ1bmMsIDEpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHByb3ZpZGVzIGB2YWx1ZWAgdG8gYHdyYXBwZXJgIGFzIGl0cyBmaXJzdFxuICAgICAqIGFyZ3VtZW50LiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIGZ1bmN0aW9uIGFyZSBhcHBlbmRlZFxuICAgICAqIHRvIHRob3NlIHByb3ZpZGVkIHRvIHRoZSBgd3JhcHBlcmAuIFRoZSB3cmFwcGVyIGlzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgXG4gICAgICogYmluZGluZyBvZiB0aGUgY3JlYXRlZCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3dyYXBwZXI9aWRlbnRpdHldIFRoZSB3cmFwcGVyIGZ1bmN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgcCA9IF8ud3JhcChfLmVzY2FwZSwgZnVuY3Rpb24oZnVuYywgdGV4dCkge1xuICAgICAqICAgcmV0dXJuICc8cD4nICsgZnVuYyh0ZXh0KSArICc8L3A+JztcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIHAoJ2ZyZWQsIGJhcm5leSwgJiBwZWJibGVzJyk7XG4gICAgICogLy8gPT4gJzxwPmZyZWQsIGJhcm5leSwgJmFtcDsgcGViYmxlczwvcD4nXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcCh2YWx1ZSwgd3JhcHBlcikge1xuICAgICAgcmV0dXJuIHBhcnRpYWwoY2FzdEZ1bmN0aW9uKHdyYXBwZXIpLCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ2FzdHMgYHZhbHVlYCBhcyBhbiBhcnJheSBpZiBpdCdzIG5vdCBvbmUuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC40LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjYXN0IGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNhc3RBcnJheSgxKTtcbiAgICAgKiAvLyA9PiBbMV1cbiAgICAgKlxuICAgICAqIF8uY2FzdEFycmF5KHsgJ2EnOiAxIH0pO1xuICAgICAqIC8vID0+IFt7ICdhJzogMSB9XVxuICAgICAqXG4gICAgICogXy5jYXN0QXJyYXkoJ2FiYycpO1xuICAgICAqIC8vID0+IFsnYWJjJ11cbiAgICAgKlxuICAgICAqIF8uY2FzdEFycmF5KG51bGwpO1xuICAgICAqIC8vID0+IFtudWxsXVxuICAgICAqXG4gICAgICogXy5jYXN0QXJyYXkodW5kZWZpbmVkKTtcbiAgICAgKiAvLyA9PiBbdW5kZWZpbmVkXVxuICAgICAqXG4gICAgICogXy5jYXN0QXJyYXkoKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDIsIDNdO1xuICAgICAqIGNvbnNvbGUubG9nKF8uY2FzdEFycmF5KGFycmF5KSA9PT0gYXJyYXkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYXN0QXJyYXkoKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIHZhbHVlID0gYXJndW1lbnRzWzBdO1xuICAgICAgcmV0dXJuIGlzQXJyYXkodmFsdWUpID8gdmFsdWUgOiBbdmFsdWVdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzaGFsbG93IGNsb25lIG9mIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvbiB0aGVcbiAgICAgKiBbc3RydWN0dXJlZCBjbG9uZSBhbGdvcml0aG1dKGh0dHBzOi8vbWRuLmlvL1N0cnVjdHVyZWRfY2xvbmVfYWxnb3JpdGhtKVxuICAgICAqIGFuZCBzdXBwb3J0cyBjbG9uaW5nIGFycmF5cywgYXJyYXkgYnVmZmVycywgYm9vbGVhbnMsIGRhdGUgb2JqZWN0cywgbWFwcyxcbiAgICAgKiBudW1iZXJzLCBgT2JqZWN0YCBvYmplY3RzLCByZWdleGVzLCBzZXRzLCBzdHJpbmdzLCBzeW1ib2xzLCBhbmQgdHlwZWRcbiAgICAgKiBhcnJheXMuIFRoZSBvd24gZW51bWVyYWJsZSBwcm9wZXJ0aWVzIG9mIGBhcmd1bWVudHNgIG9iamVjdHMgYXJlIGNsb25lZFxuICAgICAqIGFzIHBsYWluIG9iamVjdHMuIEFuIGVtcHR5IG9iamVjdCBpcyByZXR1cm5lZCBmb3IgdW5jbG9uZWFibGUgdmFsdWVzIHN1Y2hcbiAgICAgKiBhcyBlcnJvciBvYmplY3RzLCBmdW5jdGlvbnMsIERPTSBub2RlcywgYW5kIFdlYWtNYXBzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgY2xvbmVkIHZhbHVlLlxuICAgICAqIEBzZWUgXy5jbG9uZURlZXBcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnYSc6IDEgfSwgeyAnYic6IDIgfV07XG4gICAgICpcbiAgICAgKiB2YXIgc2hhbGxvdyA9IF8uY2xvbmUob2JqZWN0cyk7XG4gICAgICogY29uc29sZS5sb2coc2hhbGxvd1swXSA9PT0gb2JqZWN0c1swXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lKHZhbHVlKSB7XG4gICAgICByZXR1cm4gYmFzZUNsb25lKHZhbHVlLCBDTE9ORV9TWU1CT0xTX0ZMQUcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uY2xvbmVgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBwcm9kdWNlIHRoZSBjbG9uZWQgdmFsdWUuIElmIGBjdXN0b21pemVyYCByZXR1cm5zIGB1bmRlZmluZWRgLFxuICAgICAqIGNsb25pbmcgaXMgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgaW52b2tlZCB3aXRoXG4gICAgICogdXAgdG8gZm91ciBhcmd1bWVudHM7ICh2YWx1ZSBbLCBpbmRleHxrZXksIG9iamVjdCwgc3RhY2tdKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY2xvbmluZy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgY2xvbmVkIHZhbHVlLlxuICAgICAqIEBzZWUgXy5jbG9uZURlZXBXaXRoXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIodmFsdWUpIHtcbiAgICAgKiAgIGlmIChfLmlzRWxlbWVudCh2YWx1ZSkpIHtcbiAgICAgKiAgICAgcmV0dXJuIHZhbHVlLmNsb25lTm9kZShmYWxzZSk7XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGVsID0gXy5jbG9uZVdpdGgoZG9jdW1lbnQuYm9keSwgY3VzdG9taXplcik7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhlbCA9PT0gZG9jdW1lbnQuYm9keSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKiBjb25zb2xlLmxvZyhlbC5ub2RlTmFtZSk7XG4gICAgICogLy8gPT4gJ0JPRFknXG4gICAgICogY29uc29sZS5sb2coZWwuY2hpbGROb2Rlcy5sZW5ndGgpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZVdpdGgodmFsdWUsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBiYXNlQ2xvbmUodmFsdWUsIENMT05FX1NZTUJPTFNfRkxBRywgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5jbG9uZWAgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgY2xvbmVzIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHJlY3Vyc2l2ZWx5IGNsb25lLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBkZWVwIGNsb25lZCB2YWx1ZS5cbiAgICAgKiBAc2VlIF8uY2xvbmVcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnYSc6IDEgfSwgeyAnYic6IDIgfV07XG4gICAgICpcbiAgICAgKiB2YXIgZGVlcCA9IF8uY2xvbmVEZWVwKG9iamVjdHMpO1xuICAgICAqIGNvbnNvbGUubG9nKGRlZXBbMF0gPT09IG9iamVjdHNbMF0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVEZWVwKHZhbHVlKSB7XG4gICAgICByZXR1cm4gYmFzZUNsb25lKHZhbHVlLCBDTE9ORV9ERUVQX0ZMQUcgfCBDTE9ORV9TWU1CT0xTX0ZMQUcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uY2xvbmVXaXRoYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBjbG9uZXMgYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcmVjdXJzaXZlbHkgY2xvbmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY2xvbmluZy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZGVlcCBjbG9uZWQgdmFsdWUuXG4gICAgICogQHNlZSBfLmNsb25lV2l0aFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKHZhbHVlKSB7XG4gICAgICogICBpZiAoXy5pc0VsZW1lbnQodmFsdWUpKSB7XG4gICAgICogICAgIHJldHVybiB2YWx1ZS5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGVsID0gXy5jbG9uZURlZXBXaXRoKGRvY3VtZW50LmJvZHksIGN1c3RvbWl6ZXIpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coZWwgPT09IGRvY3VtZW50LmJvZHkpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICogY29uc29sZS5sb2coZWwubm9kZU5hbWUpO1xuICAgICAqIC8vID0+ICdCT0RZJ1xuICAgICAqIGNvbnNvbGUubG9nKGVsLmNoaWxkTm9kZXMubGVuZ3RoKTtcbiAgICAgKiAvLyA9PiAyMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lRGVlcFdpdGgodmFsdWUsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBiYXNlQ2xvbmUodmFsdWUsIENMT05FX0RFRVBfRkxBRyB8IENMT05FX1NZTUJPTFNfRkxBRywgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBvYmplY3RgIGNvbmZvcm1zIHRvIGBzb3VyY2VgIGJ5IGludm9raW5nIHRoZSBwcmVkaWNhdGVcbiAgICAgKiBwcm9wZXJ0aWVzIG9mIGBzb3VyY2VgIHdpdGggdGhlIGNvcnJlc3BvbmRpbmcgcHJvcGVydHkgdmFsdWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGVxdWl2YWxlbnQgdG8gYF8uY29uZm9ybXNgIHdoZW4gYHNvdXJjZWAgaXNcbiAgICAgKiBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjE0LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSBwcmVkaWNhdGVzIHRvIGNvbmZvcm0gdG8uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBvYmplY3RgIGNvbmZvcm1zLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAyIH07XG4gICAgICpcbiAgICAgKiBfLmNvbmZvcm1zVG8ob2JqZWN0LCB7ICdiJzogZnVuY3Rpb24obikgeyByZXR1cm4gbiA+IDE7IH0gfSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5jb25mb3Jtc1RvKG9iamVjdCwgeyAnYic6IGZ1bmN0aW9uKG4pIHsgcmV0dXJuIG4gPiAyOyB9IH0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29uZm9ybXNUbyhvYmplY3QsIHNvdXJjZSkge1xuICAgICAgcmV0dXJuIHNvdXJjZSA9PSBudWxsIHx8IGJhc2VDb25mb3Jtc1RvKG9iamVjdCwgc291cmNlLCBrZXlzKHNvdXJjZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIGFcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZSBlcXVpdmFsZW50LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gICAgICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAgICAgKlxuICAgICAqIF8uZXEob2JqZWN0LCBvYmplY3QpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZXEob2JqZWN0LCBvdGhlcik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uZXEoJ2EnLCAnYScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZXEoJ2EnLCBPYmplY3QoJ2EnKSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uZXEoTmFOLCBOYU4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlcSh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gb3RoZXIgfHwgKHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGdyZWF0ZXIgdGhhbiBgb3RoZXJgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZ3JlYXRlciB0aGFuIGBvdGhlcmAsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAc2VlIF8ubHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5ndCgzLCAxKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmd0KDMsIDMpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmd0KDEsIDMpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGd0ID0gY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbihiYXNlR3QpO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIGBvdGhlcmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy45LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG9cbiAgICAgKiAgYG90aGVyYCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBzZWUgXy5sdGVcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5ndGUoMywgMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5ndGUoMywgMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5ndGUoMSwgMyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgZ3RlID0gY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbihmdW5jdGlvbih2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA+PSBvdGhlcjtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhbiBgYXJndW1lbnRzYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcmd1bWVudHMoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc0FyZ3VtZW50cyA9IGJhc2VJc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA/IGJhc2VJc0FyZ3VtZW50cyA6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCAnY2FsbGVlJykgJiZcbiAgICAgICAgIXByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwodmFsdWUsICdjYWxsZWUnKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhbiBgQXJyYXlgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXkoJ2FiYycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXkoXy5ub29wKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYW4gYEFycmF5QnVmZmVyYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5IGJ1ZmZlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlCdWZmZXIobmV3IEFycmF5QnVmZmVyKDIpKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlCdWZmZXIobmV3IEFycmF5KDIpKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc0FycmF5QnVmZmVyID0gbm9kZUlzQXJyYXlCdWZmZXIgPyBiYXNlVW5hcnkobm9kZUlzQXJyYXlCdWZmZXIpIDogYmFzZUlzQXJyYXlCdWZmZXI7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLiBBIHZhbHVlIGlzIGNvbnNpZGVyZWQgYXJyYXktbGlrZSBpZiBpdCdzXG4gICAgICogbm90IGEgZnVuY3Rpb24gYW5kIGhhcyBhIGB2YWx1ZS5sZW5ndGhgIHRoYXQncyBhbiBpbnRlZ2VyIGdyZWF0ZXIgdGhhbiBvclxuICAgICAqIGVxdWFsIHRvIGAwYCBhbmQgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIGBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2UoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZSgnYWJjJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZShfLm5vb3ApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNBcnJheUxpa2UodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgIWlzRnVuY3Rpb24odmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaXNBcnJheUxpa2VgIGV4Y2VwdCB0aGF0IGl0IGFsc28gY2hlY2tzIGlmIGB2YWx1ZWBcbiAgICAgKiBpcyBhbiBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5LWxpa2Ugb2JqZWN0LFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2VPYmplY3QoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlT2JqZWN0KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2VPYmplY3QoJ2FiYycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlT2JqZWN0KF8ubm9vcCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0FycmF5TGlrZU9iamVjdCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaXNBcnJheUxpa2UodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBib29sZWFuIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgYm9vbGVhbiwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQm9vbGVhbihmYWxzZSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0Jvb2xlYW4obnVsbCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0Jvb2xlYW4odmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gZmFsc2UgfHxcbiAgICAgICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gYm9vbFRhZyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBidWZmZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNCdWZmZXIobmV3IEJ1ZmZlcigyKSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0J1ZmZlcihuZXcgVWludDhBcnJheSgyKSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNCdWZmZXIgPSBuYXRpdmVJc0J1ZmZlciB8fCBzdHViRmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYERhdGVgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBkYXRlIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRGF0ZShuZXcgRGF0ZSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0RhdGUoJ01vbiBBcHJpbCAyMyAyMDEyJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNEYXRlID0gbm9kZUlzRGF0ZSA/IGJhc2VVbmFyeShub2RlSXNEYXRlKSA6IGJhc2VJc0RhdGU7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYSBET00gZWxlbWVudC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBET00gZWxlbWVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRWxlbWVudChkb2N1bWVudC5ib2R5KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRWxlbWVudCgnPGJvZHk+Jyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0VsZW1lbnQodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIHZhbHVlLm5vZGVUeXBlID09PSAxICYmICFpc1BsYWluT2JqZWN0KHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhbiBlbXB0eSBvYmplY3QsIGNvbGxlY3Rpb24sIG1hcCwgb3Igc2V0LlxuICAgICAqXG4gICAgICogT2JqZWN0cyBhcmUgY29uc2lkZXJlZCBlbXB0eSBpZiB0aGV5IGhhdmUgbm8gb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkXG4gICAgICogcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqIEFycmF5LWxpa2UgdmFsdWVzIHN1Y2ggYXMgYGFyZ3VtZW50c2Agb2JqZWN0cywgYXJyYXlzLCBidWZmZXJzLCBzdHJpbmdzLCBvclxuICAgICAqIGpRdWVyeS1saWtlIGNvbGxlY3Rpb25zIGFyZSBjb25zaWRlcmVkIGVtcHR5IGlmIHRoZXkgaGF2ZSBhIGBsZW5ndGhgIG9mIGAwYC5cbiAgICAgKiBTaW1pbGFybHksIG1hcHMgYW5kIHNldHMgYXJlIGNvbnNpZGVyZWQgZW1wdHkgaWYgdGhleSBoYXZlIGEgYHNpemVgIG9mIGAwYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZW1wdHksIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0VtcHR5KG51bGwpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNFbXB0eSh0cnVlKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRW1wdHkoMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0VtcHR5KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNFbXB0eSh7ICdhJzogMSB9KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRW1wdHkodmFsdWUpIHtcbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKGlzQXJyYXlMaWtlKHZhbHVlKSAmJlxuICAgICAgICAgIChpc0FycmF5KHZhbHVlKSB8fCB0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHwgdHlwZW9mIHZhbHVlLnNwbGljZSA9PSAnZnVuY3Rpb24nIHx8XG4gICAgICAgICAgICBpc0J1ZmZlcih2YWx1ZSkgfHwgaXNUeXBlZEFycmF5KHZhbHVlKSB8fCBpc0FyZ3VtZW50cyh2YWx1ZSkpKSB7XG4gICAgICAgIHJldHVybiAhdmFsdWUubGVuZ3RoO1xuICAgICAgfVxuICAgICAgdmFyIHRhZyA9IGdldFRhZyh2YWx1ZSk7XG4gICAgICBpZiAodGFnID09IG1hcFRhZyB8fCB0YWcgPT0gc2V0VGFnKSB7XG4gICAgICAgIHJldHVybiAhdmFsdWUuc2l6ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1Byb3RvdHlwZSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuICFiYXNlS2V5cyh2YWx1ZSkubGVuZ3RoO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBrZXkpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtcyBhIGRlZXAgY29tcGFyaXNvbiBiZXR3ZWVuIHR3byB2YWx1ZXMgdG8gZGV0ZXJtaW5lIGlmIHRoZXkgYXJlXG4gICAgICogZXF1aXZhbGVudC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBzdXBwb3J0cyBjb21wYXJpbmcgYXJyYXlzLCBhcnJheSBidWZmZXJzLCBib29sZWFucyxcbiAgICAgKiBkYXRlIG9iamVjdHMsIGVycm9yIG9iamVjdHMsIG1hcHMsIG51bWJlcnMsIGBPYmplY3RgIG9iamVjdHMsIHJlZ2V4ZXMsXG4gICAgICogc2V0cywgc3RyaW5ncywgc3ltYm9scywgYW5kIHR5cGVkIGFycmF5cy4gYE9iamVjdGAgb2JqZWN0cyBhcmUgY29tcGFyZWRcbiAgICAgKiBieSB0aGVpciBvd24sIG5vdCBpbmhlcml0ZWQsIGVudW1lcmFibGUgcHJvcGVydGllcy4gRnVuY3Rpb25zIGFuZCBET01cbiAgICAgKiBub2RlcyBhcmUgY29tcGFyZWQgYnkgc3RyaWN0IGVxdWFsaXR5LCBpLmUuIGA9PT1gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gICAgICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAgICAgKlxuICAgICAqIF8uaXNFcXVhbChvYmplY3QsIG90aGVyKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBvYmplY3QgPT09IG90aGVyO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNFcXVhbCh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiBiYXNlSXNFcXVhbCh2YWx1ZSwgb3RoZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaXNFcXVhbGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIGNvbXBhcmUgdmFsdWVzLiBJZiBgY3VzdG9taXplcmAgcmV0dXJucyBgdW5kZWZpbmVkYCwgY29tcGFyaXNvbnNcbiAgICAgKiBhcmUgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgaW52b2tlZCB3aXRoIHVwIHRvXG4gICAgICogc2l4IGFyZ3VtZW50czogKG9ialZhbHVlLCBvdGhWYWx1ZSBbLCBpbmRleHxrZXksIG9iamVjdCwgb3RoZXIsIHN0YWNrXSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBpc0dyZWV0aW5nKHZhbHVlKSB7XG4gICAgICogICByZXR1cm4gL15oKD86aXxlbGxvKSQvLnRlc3QodmFsdWUpO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIob2JqVmFsdWUsIG90aFZhbHVlKSB7XG4gICAgICogICBpZiAoaXNHcmVldGluZyhvYmpWYWx1ZSkgJiYgaXNHcmVldGluZyhvdGhWYWx1ZSkpIHtcbiAgICAgKiAgICAgcmV0dXJuIHRydWU7XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWydoZWxsbycsICdnb29kYnllJ107XG4gICAgICogdmFyIG90aGVyID0gWydoaScsICdnb29kYnllJ107XG4gICAgICpcbiAgICAgKiBfLmlzRXF1YWxXaXRoKGFycmF5LCBvdGhlciwgY3VzdG9taXplcik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRXF1YWxXaXRoKHZhbHVlLCBvdGhlciwgY3VzdG9taXplcikge1xuICAgICAgY3VzdG9taXplciA9IHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicgPyBjdXN0b21pemVyIDogdW5kZWZpbmVkO1xuICAgICAgdmFyIHJlc3VsdCA9IGN1c3RvbWl6ZXIgPyBjdXN0b21pemVyKHZhbHVlLCBvdGhlcikgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gcmVzdWx0ID09PSB1bmRlZmluZWQgPyBiYXNlSXNFcXVhbCh2YWx1ZSwgb3RoZXIsIHVuZGVmaW5lZCwgY3VzdG9taXplcikgOiAhIXJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhbiBgRXJyb3JgLCBgRXZhbEVycm9yYCwgYFJhbmdlRXJyb3JgLCBgUmVmZXJlbmNlRXJyb3JgLFxuICAgICAqIGBTeW50YXhFcnJvcmAsIGBUeXBlRXJyb3JgLCBvciBgVVJJRXJyb3JgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gZXJyb3Igb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNFcnJvcihuZXcgRXJyb3IpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNFcnJvcihFcnJvcik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0Vycm9yKHZhbHVlKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHRhZyA9IGJhc2VHZXRUYWcodmFsdWUpO1xuICAgICAgcmV0dXJuIHRhZyA9PSBlcnJvclRhZyB8fCB0YWcgPT0gZG9tRXhjVGFnIHx8XG4gICAgICAgICh0eXBlb2YgdmFsdWUubWVzc2FnZSA9PSAnc3RyaW5nJyAmJiB0eXBlb2YgdmFsdWUubmFtZSA9PSAnc3RyaW5nJyAmJiAhaXNQbGFpbk9iamVjdCh2YWx1ZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgZmluaXRlIHByaW1pdGl2ZSBudW1iZXIuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYE51bWJlci5pc0Zpbml0ZWBdKGh0dHBzOi8vbWRuLmlvL051bWJlci9pc0Zpbml0ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZmluaXRlIG51bWJlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRmluaXRlKDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNGaW5pdGUoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0Zpbml0ZShJbmZpbml0eSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNGaW5pdGUoJzMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRmluaXRlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmIG5hdGl2ZUlzRmluaXRlKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYEZ1bmN0aW9uYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZnVuY3Rpb24sIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0Z1bmN0aW9uKF8pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNGdW5jdGlvbigvYWJjLyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICAvLyBUaGUgdXNlIG9mIGBPYmplY3QjdG9TdHJpbmdgIGF2b2lkcyBpc3N1ZXMgd2l0aCB0aGUgYHR5cGVvZmAgb3BlcmF0b3JcbiAgICAgIC8vIGluIFNhZmFyaSA5IHdoaWNoIHJldHVybnMgJ29iamVjdCcgZm9yIHR5cGVkIGFycmF5cyBhbmQgb3RoZXIgY29uc3RydWN0b3JzLlxuICAgICAgdmFyIHRhZyA9IGJhc2VHZXRUYWcodmFsdWUpO1xuICAgICAgcmV0dXJuIHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWcgfHwgdGFnID09IGFzeW5jVGFnIHx8IHRhZyA9PSBwcm94eVRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhbiBpbnRlZ2VyLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BOdW1iZXIuaXNJbnRlZ2VyYF0oaHR0cHM6Ly9tZG4uaW8vTnVtYmVyL2lzSW50ZWdlcikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGludGVnZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0ludGVnZXIoMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0ludGVnZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNJbnRlZ2VyKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0ludGVnZXIoJzMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzSW50ZWdlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJiB2YWx1ZSA9PSB0b0ludGVnZXIodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBsZW5ndGguXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvblxuICAgICAqIFtgVG9MZW5ndGhgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2xlbmd0aCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgbGVuZ3RoLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNMZW5ndGgoMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0xlbmd0aChOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0xlbmd0aChJbmZpbml0eSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNMZW5ndGgoJzMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTGVuZ3RoKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmXG4gICAgICAgIHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPD0gTUFYX1NBRkVfSU5URUdFUjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyB0aGVcbiAgICAgKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpXG4gICAgICogb2YgYE9iamVjdGAuIChlLmcuIGFycmF5cywgZnVuY3Rpb25zLCBvYmplY3RzLCByZWdleGVzLCBgbmV3IE51bWJlcigwKWAsIGFuZCBgbmV3IFN0cmluZygnJylgKVxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdCh7fSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3QoXy5ub29wKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0KG51bGwpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICAgICAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgKHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnZnVuY3Rpb24nKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAgICAgKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBNYXBgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjMuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBtYXAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc01hcChuZXcgTWFwKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTWFwKG5ldyBXZWFrTWFwKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc01hcCA9IG5vZGVJc01hcCA/IGJhc2VVbmFyeShub2RlSXNNYXApIDogYmFzZUlzTWFwO1xuXG4gICAgLyoqXG4gICAgICogUGVyZm9ybXMgYSBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbiBiZXR3ZWVuIGBvYmplY3RgIGFuZCBgc291cmNlYCB0b1xuICAgICAqIGRldGVybWluZSBpZiBgb2JqZWN0YCBjb250YWlucyBlcXVpdmFsZW50IHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBlcXVpdmFsZW50IHRvIGBfLm1hdGNoZXNgIHdoZW4gYHNvdXJjZWAgaXNcbiAgICAgKiBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKlxuICAgICAqIFBhcnRpYWwgY29tcGFyaXNvbnMgd2lsbCBtYXRjaCBlbXB0eSBhcnJheSBhbmQgZW1wdHkgb2JqZWN0IGBzb3VyY2VgXG4gICAgICogdmFsdWVzIGFnYWluc3QgYW55IGFycmF5IG9yIG9iamVjdCB2YWx1ZSwgcmVzcGVjdGl2ZWx5LiBTZWUgYF8uaXNFcXVhbGBcbiAgICAgKiBmb3IgYSBsaXN0IG9mIHN1cHBvcnRlZCB2YWx1ZSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgaXMgYSBtYXRjaCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiB9O1xuICAgICAqXG4gICAgICogXy5pc01hdGNoKG9iamVjdCwgeyAnYic6IDIgfSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc01hdGNoKG9iamVjdCwgeyAnYic6IDEgfSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc01hdGNoKG9iamVjdCwgc291cmNlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09PSBzb3VyY2UgfHwgYmFzZUlzTWF0Y2gob2JqZWN0LCBzb3VyY2UsIGdldE1hdGNoRGF0YShzb3VyY2UpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmlzTWF0Y2hgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBjb21wYXJlIHZhbHVlcy4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGAsIGNvbXBhcmlzb25zXG4gICAgICogYXJlIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGludm9rZWQgd2l0aCBmaXZlXG4gICAgICogYXJndW1lbnRzOiAob2JqVmFsdWUsIHNyY1ZhbHVlLCBpbmRleHxrZXksIG9iamVjdCwgc291cmNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgaXMgYSBtYXRjaCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBpc0dyZWV0aW5nKHZhbHVlKSB7XG4gICAgICogICByZXR1cm4gL15oKD86aXxlbGxvKSQvLnRlc3QodmFsdWUpO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlKSB7XG4gICAgICogICBpZiAoaXNHcmVldGluZyhvYmpWYWx1ZSkgJiYgaXNHcmVldGluZyhzcmNWYWx1ZSkpIHtcbiAgICAgKiAgICAgcmV0dXJuIHRydWU7XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2dyZWV0aW5nJzogJ2hlbGxvJyB9O1xuICAgICAqIHZhciBzb3VyY2UgPSB7ICdncmVldGluZyc6ICdoaScgfTtcbiAgICAgKlxuICAgICAqIF8uaXNNYXRjaFdpdGgob2JqZWN0LCBzb3VyY2UsIGN1c3RvbWl6ZXIpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc01hdGNoV2l0aChvYmplY3QsIHNvdXJjZSwgY3VzdG9taXplcikge1xuICAgICAgY3VzdG9taXplciA9IHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicgPyBjdXN0b21pemVyIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIGJhc2VJc01hdGNoKG9iamVjdCwgc291cmNlLCBnZXRNYXRjaERhdGEoc291cmNlKSwgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYE5hTmAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYE51bWJlci5pc05hTmBdKGh0dHBzOi8vbWRuLmlvL051bWJlci9pc05hTikgYW5kIGlzIG5vdCB0aGUgc2FtZSBhc1xuICAgICAqIGdsb2JhbCBbYGlzTmFOYF0oaHR0cHM6Ly9tZG4uaW8vaXNOYU4pIHdoaWNoIHJldHVybnMgYHRydWVgIGZvclxuICAgICAqIGB1bmRlZmluZWRgIGFuZCBvdGhlciBub24tbnVtYmVyIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYE5hTmAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc05hTihOYU4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOYU4obmV3IE51bWJlcihOYU4pKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBpc05hTih1bmRlZmluZWQpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOYU4odW5kZWZpbmVkKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTmFOKHZhbHVlKSB7XG4gICAgICAvLyBBbiBgTmFOYCBwcmltaXRpdmUgaXMgdGhlIG9ubHkgdmFsdWUgdGhhdCBpcyBub3QgZXF1YWwgdG8gaXRzZWxmLlxuICAgICAgLy8gUGVyZm9ybSB0aGUgYHRvU3RyaW5nVGFnYCBjaGVjayBmaXJzdCB0byBhdm9pZCBlcnJvcnMgd2l0aCBzb21lXG4gICAgICAvLyBBY3RpdmVYIG9iamVjdHMgaW4gSUUuXG4gICAgICByZXR1cm4gaXNOdW1iZXIodmFsdWUpICYmIHZhbHVlICE9ICt2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHByaXN0aW5lIG5hdGl2ZSBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBjYW4ndCByZWxpYWJseSBkZXRlY3QgbmF0aXZlIGZ1bmN0aW9ucyBpbiB0aGUgcHJlc2VuY2VcbiAgICAgKiBvZiB0aGUgY29yZS1qcyBwYWNrYWdlIGJlY2F1c2UgY29yZS1qcyBjaXJjdW12ZW50cyB0aGlzIGtpbmQgb2YgZGV0ZWN0aW9uLlxuICAgICAqIERlc3BpdGUgbXVsdGlwbGUgcmVxdWVzdHMsIHRoZSBjb3JlLWpzIG1haW50YWluZXIgaGFzIG1hZGUgaXQgY2xlYXI6IGFueVxuICAgICAqIGF0dGVtcHQgdG8gZml4IHRoZSBkZXRlY3Rpb24gd2lsbCBiZSBvYnN0cnVjdGVkLiBBcyBhIHJlc3VsdCwgd2UncmUgbGVmdFxuICAgICAqIHdpdGggbGl0dGxlIGNob2ljZSBidXQgdG8gdGhyb3cgYW4gZXJyb3IuIFVuZm9ydHVuYXRlbHksIHRoaXMgYWxzbyBhZmZlY3RzXG4gICAgICogcGFja2FnZXMsIGxpa2UgW2JhYmVsLXBvbHlmaWxsXShodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9iYWJlbC1wb2x5ZmlsbCksXG4gICAgICogd2hpY2ggcmVseSBvbiBjb3JlLWpzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG5hdGl2ZSBmdW5jdGlvbixcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTmF0aXZlKEFycmF5LnByb3RvdHlwZS5wdXNoKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTmF0aXZlKF8pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNOYXRpdmUodmFsdWUpIHtcbiAgICAgIGlmIChpc01hc2thYmxlKHZhbHVlKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoQ09SRV9FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlSXNOYXRpdmUodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGBudWxsYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYG51bGxgLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNOdWxsKG51bGwpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOdWxsKHZvaWQgMCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc051bGwodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBgbnVsbGAgb3IgYHVuZGVmaW5lZGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG51bGxpc2gsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc05pbChudWxsKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTmlsKHZvaWQgMCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc05pbChOYU4pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNOaWwodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PSBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgTnVtYmVyYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRvIGV4Y2x1ZGUgYEluZmluaXR5YCwgYC1JbmZpbml0eWAsIGFuZCBgTmFOYCwgd2hpY2ggYXJlXG4gICAgICogY2xhc3NpZmllZCBhcyBudW1iZXJzLCB1c2UgdGhlIGBfLmlzRmluaXRlYCBtZXRob2QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbnVtYmVyLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNOdW1iZXIoMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc051bWJlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTnVtYmVyKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTnVtYmVyKCczJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc051bWJlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyB8fFxuICAgICAgICAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBudW1iZXJUYWcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCB0aGF0IGlzLCBhbiBvYmplY3QgY3JlYXRlZCBieSB0aGVcbiAgICAgKiBgT2JqZWN0YCBjb25zdHJ1Y3RvciBvciBvbmUgd2l0aCBhIGBbW1Byb3RvdHlwZV1dYCBvZiBgbnVsbGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC44LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5pc1BsYWluT2JqZWN0KG5ldyBGb28pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzUGxhaW5PYmplY3QoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc1BsYWluT2JqZWN0KHsgJ3gnOiAwLCAneSc6IDAgfSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1BsYWluT2JqZWN0KE9iamVjdC5jcmVhdGUobnVsbCkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1BsYWluT2JqZWN0KHZhbHVlKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkgfHwgYmFzZUdldFRhZyh2YWx1ZSkgIT0gb2JqZWN0VGFnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBwcm90byA9IGdldFByb3RvdHlwZSh2YWx1ZSk7XG4gICAgICBpZiAocHJvdG8gPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICB2YXIgQ3RvciA9IGhhc093blByb3BlcnR5LmNhbGwocHJvdG8sICdjb25zdHJ1Y3RvcicpICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuICAgICAgcmV0dXJuIHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiYgQ3RvciBpbnN0YW5jZW9mIEN0b3IgJiZcbiAgICAgICAgZnVuY1RvU3RyaW5nLmNhbGwoQ3RvcikgPT0gb2JqZWN0Q3RvclN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFJlZ0V4cGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHJlZ2V4cCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzUmVnRXhwKC9hYmMvKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzUmVnRXhwKCcvYWJjLycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzUmVnRXhwID0gbm9kZUlzUmVnRXhwID8gYmFzZVVuYXJ5KG5vZGVJc1JlZ0V4cCkgOiBiYXNlSXNSZWdFeHA7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHNhZmUgaW50ZWdlci4gQW4gaW50ZWdlciBpcyBzYWZlIGlmIGl0J3MgYW4gSUVFRS03NTRcbiAgICAgKiBkb3VibGUgcHJlY2lzaW9uIG51bWJlciB3aGljaCBpc24ndCB0aGUgcmVzdWx0IG9mIGEgcm91bmRlZCB1bnNhZmUgaW50ZWdlci5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgTnVtYmVyLmlzU2FmZUludGVnZXJgXShodHRwczovL21kbi5pby9OdW1iZXIvaXNTYWZlSW50ZWdlcikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc2FmZSBpbnRlZ2VyLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNTYWZlSW50ZWdlcigzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzU2FmZUludGVnZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNTYWZlSW50ZWdlcihJbmZpbml0eSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNTYWZlSW50ZWdlcignMycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNTYWZlSW50ZWdlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzSW50ZWdlcih2YWx1ZSkgJiYgdmFsdWUgPj0gLU1BWF9TQUZFX0lOVEVHRVIgJiYgdmFsdWUgPD0gTUFYX1NBRkVfSU5URUdFUjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFNldGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHNldCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzU2V0KG5ldyBTZXQpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNTZXQobmV3IFdlYWtTZXQpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzU2V0ID0gbm9kZUlzU2V0ID8gYmFzZVVuYXJ5KG5vZGVJc1NldCkgOiBiYXNlSXNTZXQ7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFN0cmluZ2AgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzdHJpbmcsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1N0cmluZygnYWJjJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1N0cmluZygxKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzU3RyaW5nKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8XG4gICAgICAgICghaXNBcnJheSh2YWx1ZSkgJiYgaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBzdHJpbmdUYWcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU3ltYm9sYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHN5bWJvbCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzU3ltYm9sKFN5bWJvbC5pdGVyYXRvcik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1N5bWJvbCgnYWJjJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1N5bWJvbCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnc3ltYm9sJyB8fFxuICAgICAgICAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBzeW1ib2xUYWcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSB0eXBlZCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB0eXBlZCBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzVHlwZWRBcnJheShuZXcgVWludDhBcnJheSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1R5cGVkQXJyYXkoW10pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzVHlwZWRBcnJheSA9IG5vZGVJc1R5cGVkQXJyYXkgPyBiYXNlVW5hcnkobm9kZUlzVHlwZWRBcnJheSkgOiBiYXNlSXNUeXBlZEFycmF5O1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYHVuZGVmaW5lZGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGB1bmRlZmluZWRgLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNVbmRlZmluZWQodm9pZCAwKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzVW5kZWZpbmVkKG51bGwpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgV2Vha01hcGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHdlYWsgbWFwLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNXZWFrTWFwKG5ldyBXZWFrTWFwKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzV2Vha01hcChuZXcgTWFwKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzV2Vha01hcCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgZ2V0VGFnKHZhbHVlKSA9PSB3ZWFrTWFwVGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgV2Vha1NldGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHdlYWsgc2V0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNXZWFrU2V0KG5ldyBXZWFrU2V0KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzV2Vha1NldChuZXcgU2V0KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzV2Vha1NldCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gd2Vha1NldFRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsZXNzIHRoYW4gYG90aGVyYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjkuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGxlc3MgdGhhbiBgb3RoZXJgLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQHNlZSBfLmd0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubHQoMSwgMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5sdCgzLCAzKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5sdCgzLCAxKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBsdCA9IGNyZWF0ZVJlbGF0aW9uYWxPcGVyYXRpb24oYmFzZUx0KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0byBgb3RoZXJgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgbGVzcyB0aGFuIG9yIGVxdWFsIHRvXG4gICAgICogIGBvdGhlcmAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAc2VlIF8uZ3RlXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubHRlKDEsIDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8ubHRlKDMsIDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8ubHRlKDMsIDEpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGx0ZSA9IGNyZWF0ZVJlbGF0aW9uYWxPcGVyYXRpb24oZnVuY3Rpb24odmFsdWUsIG90aGVyKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPD0gb3RoZXI7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGFuIGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvQXJyYXkoeyAnYSc6IDEsICdiJzogMiB9KTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIF8udG9BcnJheSgnYWJjJyk7XG4gICAgICogLy8gPT4gWydhJywgJ2InLCAnYyddXG4gICAgICpcbiAgICAgKiBfLnRvQXJyYXkoMSk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKlxuICAgICAqIF8udG9BcnJheShudWxsKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvQXJyYXkodmFsdWUpIHtcbiAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgaWYgKGlzQXJyYXlMaWtlKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gaXNTdHJpbmcodmFsdWUpID8gc3RyaW5nVG9BcnJheSh2YWx1ZSkgOiBjb3B5QXJyYXkodmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKHN5bUl0ZXJhdG9yICYmIHZhbHVlW3N5bUl0ZXJhdG9yXSkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JUb0FycmF5KHZhbHVlW3N5bUl0ZXJhdG9yXSgpKTtcbiAgICAgIH1cbiAgICAgIHZhciB0YWcgPSBnZXRUYWcodmFsdWUpLFxuICAgICAgICAgIGZ1bmMgPSB0YWcgPT0gbWFwVGFnID8gbWFwVG9BcnJheSA6ICh0YWcgPT0gc2V0VGFnID8gc2V0VG9BcnJheSA6IHZhbHVlcyk7XG5cbiAgICAgIHJldHVybiBmdW5jKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgZmluaXRlIG51bWJlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEyLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b0Zpbml0ZSgzLjIpO1xuICAgICAqIC8vID0+IDMuMlxuICAgICAqXG4gICAgICogXy50b0Zpbml0ZShOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiA1ZS0zMjRcbiAgICAgKlxuICAgICAqIF8udG9GaW5pdGUoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4XG4gICAgICpcbiAgICAgKiBfLnRvRmluaXRlKCczLjInKTtcbiAgICAgKiAvLyA9PiAzLjJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0Zpbml0ZSh2YWx1ZSkge1xuICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdmFsdWUgPT09IDAgPyB2YWx1ZSA6IDA7XG4gICAgICB9XG4gICAgICB2YWx1ZSA9IHRvTnVtYmVyKHZhbHVlKTtcbiAgICAgIGlmICh2YWx1ZSA9PT0gSU5GSU5JVFkgfHwgdmFsdWUgPT09IC1JTkZJTklUWSkge1xuICAgICAgICB2YXIgc2lnbiA9ICh2YWx1ZSA8IDAgPyAtMSA6IDEpO1xuICAgICAgICByZXR1cm4gc2lnbiAqIE1BWF9JTlRFR0VSO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZSA/IHZhbHVlIDogMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGFuIGludGVnZXIuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvblxuICAgICAqIFtgVG9JbnRlZ2VyYF0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRvaW50ZWdlcikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIGludGVnZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9JbnRlZ2VyKDMuMik7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy50b0ludGVnZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogXy50b0ludGVnZXIoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4XG4gICAgICpcbiAgICAgKiBfLnRvSW50ZWdlcignMy4yJyk7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvSW50ZWdlcih2YWx1ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHRvRmluaXRlKHZhbHVlKSxcbiAgICAgICAgICByZW1haW5kZXIgPSByZXN1bHQgJSAxO1xuXG4gICAgICByZXR1cm4gcmVzdWx0ID09PSByZXN1bHQgPyAocmVtYWluZGVyID8gcmVzdWx0IC0gcmVtYWluZGVyIDogcmVzdWx0KSA6IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhbiBpbnRlZ2VyIHN1aXRhYmxlIGZvciB1c2UgYXMgdGhlIGxlbmd0aCBvZiBhblxuICAgICAqIGFycmF5LWxpa2Ugb2JqZWN0LlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BUb0xlbmd0aGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRvbGVuZ3RoKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgaW50ZWdlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b0xlbmd0aCgzLjIpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8udG9MZW5ndGgoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogXy50b0xlbmd0aChJbmZpbml0eSk7XG4gICAgICogLy8gPT4gNDI5NDk2NzI5NVxuICAgICAqXG4gICAgICogXy50b0xlbmd0aCgnMy4yJyk7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvTGVuZ3RoKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPyBiYXNlQ2xhbXAodG9JbnRlZ2VyKHZhbHVlKSwgMCwgTUFYX0FSUkFZX0xFTkdUSCkgOiAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBudW1iZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvTnVtYmVyKDMuMik7XG4gICAgICogLy8gPT4gMy4yXG4gICAgICpcbiAgICAgKiBfLnRvTnVtYmVyKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IDVlLTMyNFxuICAgICAqXG4gICAgICogXy50b051bWJlcihJbmZpbml0eSk7XG4gICAgICogLy8gPT4gSW5maW5pdHlcbiAgICAgKlxuICAgICAqIF8udG9OdW1iZXIoJzMuMicpO1xuICAgICAqIC8vID0+IDMuMlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvTnVtYmVyKHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdudW1iZXInKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIE5BTjtcbiAgICAgIH1cbiAgICAgIGlmIChpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgdmFyIG90aGVyID0gdHlwZW9mIHZhbHVlLnZhbHVlT2YgPT0gJ2Z1bmN0aW9uJyA/IHZhbHVlLnZhbHVlT2YoKSA6IHZhbHVlO1xuICAgICAgICB2YWx1ZSA9IGlzT2JqZWN0KG90aGVyKSA/IChvdGhlciArICcnKSA6IG90aGVyO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gdmFsdWUgPT09IDAgPyB2YWx1ZSA6ICt2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZShyZVRyaW0sICcnKTtcbiAgICAgIHZhciBpc0JpbmFyeSA9IHJlSXNCaW5hcnkudGVzdCh2YWx1ZSk7XG4gICAgICByZXR1cm4gKGlzQmluYXJ5IHx8IHJlSXNPY3RhbC50ZXN0KHZhbHVlKSlcbiAgICAgICAgPyBmcmVlUGFyc2VJbnQodmFsdWUuc2xpY2UoMiksIGlzQmluYXJ5ID8gMiA6IDgpXG4gICAgICAgIDogKHJlSXNCYWRIZXgudGVzdCh2YWx1ZSkgPyBOQU4gOiArdmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBwbGFpbiBvYmplY3QgZmxhdHRlbmluZyBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmdcbiAgICAgKiBrZXllZCBwcm9wZXJ0aWVzIG9mIGB2YWx1ZWAgdG8gb3duIHByb3BlcnRpZXMgb2YgdGhlIHBsYWluIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgcGxhaW4gb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmFzc2lnbih7ICdhJzogMSB9LCBuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKlxuICAgICAqIF8uYXNzaWduKHsgJ2EnOiAxIH0sIF8udG9QbGFpbk9iamVjdChuZXcgRm9vKSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b1BsYWluT2JqZWN0KHZhbHVlKSB7XG4gICAgICByZXR1cm4gY29weU9iamVjdCh2YWx1ZSwga2V5c0luKHZhbHVlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIHNhZmUgaW50ZWdlci4gQSBzYWZlIGludGVnZXIgY2FuIGJlIGNvbXBhcmVkIGFuZFxuICAgICAqIHJlcHJlc2VudGVkIGNvcnJlY3RseS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgaW50ZWdlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b1NhZmVJbnRlZ2VyKDMuMik7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy50b1NhZmVJbnRlZ2VyKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIF8udG9TYWZlSW50ZWdlcihJbmZpbml0eSk7XG4gICAgICogLy8gPT4gOTAwNzE5OTI1NDc0MDk5MVxuICAgICAqXG4gICAgICogXy50b1NhZmVJbnRlZ2VyKCczLjInKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9TYWZlSW50ZWdlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlXG4gICAgICAgID8gYmFzZUNsYW1wKHRvSW50ZWdlcih2YWx1ZSksIC1NQVhfU0FGRV9JTlRFR0VSLCBNQVhfU0FGRV9JTlRFR0VSKVxuICAgICAgICA6ICh2YWx1ZSA9PT0gMCA/IHZhbHVlIDogMCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZy4gQW4gZW1wdHkgc3RyaW5nIGlzIHJldHVybmVkIGZvciBgbnVsbGBcbiAgICAgKiBhbmQgYHVuZGVmaW5lZGAgdmFsdWVzLiBUaGUgc2lnbiBvZiBgLTBgIGlzIHByZXNlcnZlZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvU3RyaW5nKG51bGwpO1xuICAgICAqIC8vID0+ICcnXG4gICAgICpcbiAgICAgKiBfLnRvU3RyaW5nKC0wKTtcbiAgICAgKiAvLyA9PiAnLTAnXG4gICAgICpcbiAgICAgKiBfLnRvU3RyaW5nKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gJzEsMiwzJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvU3RyaW5nKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/ICcnIDogYmFzZVRvU3RyaW5nKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBBc3NpZ25zIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIHNvdXJjZSBvYmplY3RzIHRvIHRoZVxuICAgICAqIGRlc3RpbmF0aW9uIG9iamVjdC4gU291cmNlIG9iamVjdHMgYXJlIGFwcGxpZWQgZnJvbSBsZWZ0IHRvIHJpZ2h0LlxuICAgICAqIFN1YnNlcXVlbnQgc291cmNlcyBvdmVyd3JpdGUgcHJvcGVydHkgYXNzaWdubWVudHMgb2YgcHJldmlvdXMgc291cmNlcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgIGFuZCBpcyBsb29zZWx5IGJhc2VkIG9uXG4gICAgICogW2BPYmplY3QuYXNzaWduYF0oaHR0cHM6Ly9tZG4uaW8vT2JqZWN0L2Fzc2lnbikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZXNdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5hc3NpZ25JblxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEJhcigpIHtcbiAgICAgKiAgIHRoaXMuYyA9IDM7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5iID0gMjtcbiAgICAgKiBCYXIucHJvdG90eXBlLmQgPSA0O1xuICAgICAqXG4gICAgICogXy5hc3NpZ24oeyAnYSc6IDAgfSwgbmV3IEZvbywgbmV3IEJhcik7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdjJzogMyB9XG4gICAgICovXG4gICAgdmFyIGFzc2lnbiA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlKSB7XG4gICAgICBpZiAoaXNQcm90b3R5cGUoc291cmNlKSB8fCBpc0FycmF5TGlrZShzb3VyY2UpKSB7XG4gICAgICAgIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzKHNvdXJjZSksIG9iamVjdCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgYXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHNvdXJjZVtrZXldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5hc3NpZ25gIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgb3duIGFuZFxuICAgICAqIGluaGVyaXRlZCBzb3VyY2UgcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGFsaWFzIGV4dGVuZFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IFtzb3VyY2VzXSBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uYXNzaWduXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogfVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gQmFyKCkge1xuICAgICAqICAgdGhpcy5jID0gMztcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmIgPSAyO1xuICAgICAqIEJhci5wcm90b3R5cGUuZCA9IDQ7XG4gICAgICpcbiAgICAgKiBfLmFzc2lnbkluKHsgJ2EnOiAwIH0sIG5ldyBGb28sIG5ldyBCYXIpO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMywgJ2QnOiA0IH1cbiAgICAgKi9cbiAgICB2YXIgYXNzaWduSW4gPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSkge1xuICAgICAgY29weU9iamVjdChzb3VyY2UsIGtleXNJbihzb3VyY2UpLCBvYmplY3QpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5hc3NpZ25JbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIHRvIHByb2R1Y2UgdGhlIGFzc2lnbmVkIHZhbHVlcy4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnNcbiAgICAgKiBgdW5kZWZpbmVkYCwgYXNzaWdubWVudCBpcyBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYFxuICAgICAqIGlzIGludm9rZWQgd2l0aCBmaXZlIGFyZ3VtZW50czogKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QsIHNvdXJjZSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBhbGlhcyBleHRlbmRXaXRoXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gc291cmNlcyBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmFzc2lnbldpdGhcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUpIHtcbiAgICAgKiAgIHJldHVybiBfLmlzVW5kZWZpbmVkKG9ialZhbHVlKSA/IHNyY1ZhbHVlIDogb2JqVmFsdWU7XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGRlZmF1bHRzID0gXy5wYXJ0aWFsUmlnaHQoXy5hc3NpZ25JbldpdGgsIGN1c3RvbWl6ZXIpO1xuICAgICAqXG4gICAgICogZGVmYXVsdHMoeyAnYSc6IDEgfSwgeyAnYic6IDIgfSwgeyAnYSc6IDMgfSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gICAgICovXG4gICAgdmFyIGFzc2lnbkluV2l0aCA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCwgY3VzdG9taXplcikge1xuICAgICAgY29weU9iamVjdChzb3VyY2UsIGtleXNJbihzb3VyY2UpLCBvYmplY3QsIGN1c3RvbWl6ZXIpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5hc3NpZ25gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCB0byBwcm9kdWNlIHRoZSBhc3NpZ25lZCB2YWx1ZXMuIElmIGBjdXN0b21pemVyYCByZXR1cm5zXG4gICAgICogYHVuZGVmaW5lZGAsIGFzc2lnbm1lbnQgaXMgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmBcbiAgICAgKiBpcyBpbnZva2VkIHdpdGggZml2ZSBhcmd1bWVudHM6IChvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBzb3VyY2VzIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uYXNzaWduSW5XaXRoXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlKSB7XG4gICAgICogICByZXR1cm4gXy5pc1VuZGVmaW5lZChvYmpWYWx1ZSkgPyBzcmNWYWx1ZSA6IG9ialZhbHVlO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBkZWZhdWx0cyA9IF8ucGFydGlhbFJpZ2h0KF8uYXNzaWduV2l0aCwgY3VzdG9taXplcik7XG4gICAgICpcbiAgICAgKiBkZWZhdWx0cyh7ICdhJzogMSB9LCB7ICdiJzogMiB9LCB7ICdhJzogMyB9KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKi9cbiAgICB2YXIgYXNzaWduV2l0aCA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCwgY3VzdG9taXplcikge1xuICAgICAgY29weU9iamVjdChzb3VyY2UsIGtleXMoc291cmNlKSwgb2JqZWN0LCBjdXN0b21pemVyKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdmFsdWVzIGNvcnJlc3BvbmRpbmcgdG8gYHBhdGhzYCBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7Li4uKHN0cmluZ3xzdHJpbmdbXSl9IFtwYXRoc10gVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBwaWNrZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDMgfSB9LCA0XSB9O1xuICAgICAqXG4gICAgICogXy5hdChvYmplY3QsIFsnYVswXS5iLmMnLCAnYVsxXSddKTtcbiAgICAgKiAvLyA9PiBbMywgNF1cbiAgICAgKi9cbiAgICB2YXIgYXQgPSBmbGF0UmVzdChiYXNlQXQpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgdGhhdCBpbmhlcml0cyBmcm9tIHRoZSBgcHJvdG90eXBlYCBvYmplY3QuIElmIGFcbiAgICAgKiBgcHJvcGVydGllc2Agb2JqZWN0IGlzIGdpdmVuLCBpdHMgb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXNcbiAgICAgKiBhcmUgYXNzaWduZWQgdG8gdGhlIGNyZWF0ZWQgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcm90b3R5cGUgVGhlIG9iamVjdCB0byBpbmhlcml0IGZyb20uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtwcm9wZXJ0aWVzXSBUaGUgcHJvcGVydGllcyB0byBhc3NpZ24gdG8gdGhlIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBTaGFwZSgpIHtcbiAgICAgKiAgIHRoaXMueCA9IDA7XG4gICAgICogICB0aGlzLnkgPSAwO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIENpcmNsZSgpIHtcbiAgICAgKiAgIFNoYXBlLmNhbGwodGhpcyk7XG4gICAgICogfVxuICAgICAqXG4gICAgICogQ2lyY2xlLnByb3RvdHlwZSA9IF8uY3JlYXRlKFNoYXBlLnByb3RvdHlwZSwge1xuICAgICAqICAgJ2NvbnN0cnVjdG9yJzogQ2lyY2xlXG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiB2YXIgY2lyY2xlID0gbmV3IENpcmNsZTtcbiAgICAgKiBjaXJjbGUgaW5zdGFuY2VvZiBDaXJjbGU7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogY2lyY2xlIGluc3RhbmNlb2YgU2hhcGU7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZShwcm90b3R5cGUsIHByb3BlcnRpZXMpIHtcbiAgICAgIHZhciByZXN1bHQgPSBiYXNlQ3JlYXRlKHByb3RvdHlwZSk7XG4gICAgICByZXR1cm4gcHJvcGVydGllcyA9PSBudWxsID8gcmVzdWx0IDogYmFzZUFzc2lnbihyZXN1bHQsIHByb3BlcnRpZXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFzc2lnbnMgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBzb3VyY2VcbiAgICAgKiBvYmplY3RzIHRvIHRoZSBkZXN0aW5hdGlvbiBvYmplY3QgZm9yIGFsbCBkZXN0aW5hdGlvbiBwcm9wZXJ0aWVzIHRoYXRcbiAgICAgKiByZXNvbHZlIHRvIGB1bmRlZmluZWRgLiBTb3VyY2Ugb2JqZWN0cyBhcmUgYXBwbGllZCBmcm9tIGxlZnQgdG8gcmlnaHQuXG4gICAgICogT25jZSBhIHByb3BlcnR5IGlzIHNldCwgYWRkaXRpb25hbCB2YWx1ZXMgb2YgdGhlIHNhbWUgcHJvcGVydHkgYXJlIGlnbm9yZWQuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IFtzb3VyY2VzXSBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uZGVmYXVsdHNEZWVwXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGVmYXVsdHMoeyAnYSc6IDEgfSwgeyAnYic6IDIgfSwgeyAnYSc6IDMgfSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gICAgICovXG4gICAgdmFyIGRlZmF1bHRzID0gYmFzZVJlc3QoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2VzKSB7XG4gICAgICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcblxuICAgICAgdmFyIGluZGV4ID0gLTE7XG4gICAgICB2YXIgbGVuZ3RoID0gc291cmNlcy5sZW5ndGg7XG4gICAgICB2YXIgZ3VhcmQgPSBsZW5ndGggPiAyID8gc291cmNlc1syXSA6IHVuZGVmaW5lZDtcblxuICAgICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKHNvdXJjZXNbMF0sIHNvdXJjZXNbMV0sIGd1YXJkKSkge1xuICAgICAgICBsZW5ndGggPSAxO1xuICAgICAgfVxuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgc291cmNlID0gc291cmNlc1tpbmRleF07XG4gICAgICAgIHZhciBwcm9wcyA9IGtleXNJbihzb3VyY2UpO1xuICAgICAgICB2YXIgcHJvcHNJbmRleCA9IC0xO1xuICAgICAgICB2YXIgcHJvcHNMZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgICAgICAgd2hpbGUgKCsrcHJvcHNJbmRleCA8IHByb3BzTGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIGtleSA9IHByb3BzW3Byb3BzSW5kZXhdO1xuICAgICAgICAgIHZhciB2YWx1ZSA9IG9iamVjdFtrZXldO1xuXG4gICAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgICAgKGVxKHZhbHVlLCBvYmplY3RQcm90b1trZXldKSAmJiAhaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpKSB7XG4gICAgICAgICAgICBvYmplY3Rba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5kZWZhdWx0c2AgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgYXNzaWduc1xuICAgICAqIGRlZmF1bHQgcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IFtzb3VyY2VzXSBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uZGVmYXVsdHNcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWZhdWx0c0RlZXAoeyAnYSc6IHsgJ2InOiAyIH0gfSwgeyAnYSc6IHsgJ2InOiAxLCAnYyc6IDMgfSB9KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogeyAnYic6IDIsICdjJzogMyB9IH1cbiAgICAgKi9cbiAgICB2YXIgZGVmYXVsdHNEZWVwID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgYXJncy5wdXNoKHVuZGVmaW5lZCwgY3VzdG9tRGVmYXVsdHNNZXJnZSk7XG4gICAgICByZXR1cm4gYXBwbHkobWVyZ2VXaXRoLCB1bmRlZmluZWQsIGFyZ3MpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5maW5kYCBleGNlcHQgdGhhdCBpdCByZXR1cm5zIHRoZSBrZXkgb2YgdGhlIGZpcnN0XG4gICAgICogZWxlbWVudCBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IgaW5zdGVhZCBvZiB0aGUgZWxlbWVudCBpdHNlbGYuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8dW5kZWZpbmVkfSBSZXR1cm5zIHRoZSBrZXkgb2YgdGhlIG1hdGNoZWQgZWxlbWVudCxcbiAgICAgKiAgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0ge1xuICAgICAqICAgJ2Jhcm5leSc6ICB7ICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgICdmcmVkJzogICAgeyAnYWdlJzogNDAsICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgJ3BlYmJsZXMnOiB7ICdhZ2UnOiAxLCAgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBfLmZpbmRLZXkodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8uYWdlIDwgNDA7IH0pO1xuICAgICAqIC8vID0+ICdiYXJuZXknIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZEtleSh1c2VycywgeyAnYWdlJzogMSwgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gICAgICogLy8gPT4gJ3BlYmJsZXMnXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kS2V5KHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gJ2ZyZWQnXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRLZXkodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiAnYmFybmV5J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbmRLZXkob2JqZWN0LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiBiYXNlRmluZEtleShvYmplY3QsIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIGJhc2VGb3JPd24pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmluZEtleWAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZlxuICAgICAqIGEgY29sbGVjdGlvbiBpbiB0aGUgb3Bwb3NpdGUgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8dW5kZWZpbmVkfSBSZXR1cm5zIHRoZSBrZXkgb2YgdGhlIG1hdGNoZWQgZWxlbWVudCxcbiAgICAgKiAgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0ge1xuICAgICAqICAgJ2Jhcm5leSc6ICB7ICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgICdmcmVkJzogICAgeyAnYWdlJzogNDAsICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgJ3BlYmJsZXMnOiB7ICdhZ2UnOiAxLCAgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBfLmZpbmRMYXN0S2V5KHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLmFnZSA8IDQwOyB9KTtcbiAgICAgKiAvLyA9PiByZXR1cm5zICdwZWJibGVzJyBhc3N1bWluZyBgXy5maW5kS2V5YCByZXR1cm5zICdiYXJuZXknXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZExhc3RLZXkodXNlcnMsIHsgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAgICAgKiAvLyA9PiAnYmFybmV5J1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZExhc3RLZXkodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiAnZnJlZCdcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZExhc3RLZXkodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiAncGViYmxlcydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaW5kTGFzdEtleShvYmplY3QsIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIGJhc2VGaW5kS2V5KG9iamVjdCwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgYmFzZUZvck93blJpZ2h0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyBvdmVyIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2YgYW5cbiAgICAgKiBvYmplY3QgYW5kIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgZWFjaCBwcm9wZXJ0eS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBrZXksIG9iamVjdCkuIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdFxuICAgICAqIGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uZm9ySW5SaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5mb3JJbihuZXcgRm9vLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICBjb25zb2xlLmxvZyhrZXkpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2EnLCAnYicsIHRoZW4gJ2MnIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvckluKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbFxuICAgICAgICA/IG9iamVjdFxuICAgICAgICA6IGJhc2VGb3Iob2JqZWN0LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMyksIGtleXNJbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mb3JJbmAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBwcm9wZXJ0aWVzIG9mXG4gICAgICogYG9iamVjdGAgaW4gdGhlIG9wcG9zaXRlIG9yZGVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uZm9ySW5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8uZm9ySW5SaWdodChuZXcgRm9vLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICBjb25zb2xlLmxvZyhrZXkpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2MnLCAnYicsIHRoZW4gJ2EnIGFzc3VtaW5nIGBfLmZvckluYCBsb2dzICdhJywgJ2InLCB0aGVuICdjJy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb3JJblJpZ2h0KG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbFxuICAgICAgICA/IG9iamVjdFxuICAgICAgICA6IGJhc2VGb3JSaWdodChvYmplY3QsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSwga2V5c0luKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyBvdmVyIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIGFuIG9iamVjdCBhbmRcbiAgICAgKiBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGVhY2ggcHJvcGVydHkuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhyZWVcbiAgICAgKiBhcmd1bWVudHM6ICh2YWx1ZSwga2V5LCBvYmplY3QpLiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXQgaXRlcmF0aW9uXG4gICAgICogZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjMuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmZvck93blJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmZvck93bihuZXcgRm9vLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICBjb25zb2xlLmxvZyhrZXkpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2EnIHRoZW4gJ2InIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvck93bihvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGJhc2VGb3JPd24ob2JqZWN0LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZm9yT3duYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIHByb3BlcnRpZXMgb2ZcbiAgICAgKiBgb2JqZWN0YCBpbiB0aGUgb3Bwb3NpdGUgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5mb3JPd25cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8uZm9yT3duUmlnaHQobmV3IEZvbywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAqICAgY29uc29sZS5sb2coa2V5KTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzICdiJyB0aGVuICdhJyBhc3N1bWluZyBgXy5mb3JPd25gIGxvZ3MgJ2EnIHRoZW4gJ2InLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvck93blJpZ2h0KG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgJiYgYmFzZUZvck93blJpZ2h0KG9iamVjdCwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGZ1bmN0aW9uIHByb3BlcnR5IG5hbWVzIGZyb20gb3duIGVudW1lcmFibGUgcHJvcGVydGllc1xuICAgICAqIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgZnVuY3Rpb24gbmFtZXMuXG4gICAgICogQHNlZSBfLmZ1bmN0aW9uc0luXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IF8uY29uc3RhbnQoJ2EnKTtcbiAgICAgKiAgIHRoaXMuYiA9IF8uY29uc3RhbnQoJ2InKTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSBfLmNvbnN0YW50KCdjJyk7XG4gICAgICpcbiAgICAgKiBfLmZ1bmN0aW9ucyhuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYiddXG4gICAgICovXG4gICAgZnVuY3Rpb24gZnVuY3Rpb25zKG9iamVjdCkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gW10gOiBiYXNlRnVuY3Rpb25zKG9iamVjdCwga2V5cyhvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGZ1bmN0aW9uIHByb3BlcnR5IG5hbWVzIGZyb20gb3duIGFuZCBpbmhlcml0ZWRcbiAgICAgKiBlbnVtZXJhYmxlIHByb3BlcnRpZXMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBuYW1lcy5cbiAgICAgKiBAc2VlIF8uZnVuY3Rpb25zXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IF8uY29uc3RhbnQoJ2EnKTtcbiAgICAgKiAgIHRoaXMuYiA9IF8uY29uc3RhbnQoJ2InKTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSBfLmNvbnN0YW50KCdjJyk7XG4gICAgICpcbiAgICAgKiBfLmZ1bmN0aW9uc0luKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFsnYScsICdiJywgJ2MnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZ1bmN0aW9uc0luKG9iamVjdCkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gW10gOiBiYXNlRnVuY3Rpb25zKG9iamVjdCwga2V5c0luKG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHZhbHVlIGF0IGBwYXRoYCBvZiBgb2JqZWN0YC4gSWYgdGhlIHJlc29sdmVkIHZhbHVlIGlzXG4gICAgICogYHVuZGVmaW5lZGAsIHRoZSBgZGVmYXVsdFZhbHVlYCBpcyByZXR1cm5lZCBpbiBpdHMgcGxhY2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy43LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHBhcmFtIHsqfSBbZGVmYXVsdFZhbHVlXSBUaGUgdmFsdWUgcmV0dXJuZWQgZm9yIGB1bmRlZmluZWRgIHJlc29sdmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogMyB9IH1dIH07XG4gICAgICpcbiAgICAgKiBfLmdldChvYmplY3QsICdhWzBdLmIuYycpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8uZ2V0KG9iamVjdCwgWydhJywgJzAnLCAnYicsICdjJ10pO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8uZ2V0KG9iamVjdCwgJ2EuYi5jJywgJ2RlZmF1bHQnKTtcbiAgICAgKiAvLyA9PiAnZGVmYXVsdCdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXQob2JqZWN0LCBwYXRoLCBkZWZhdWx0VmFsdWUpIHtcbiAgICAgIHZhciByZXN1bHQgPSBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcbiAgICAgIHJldHVybiByZXN1bHQgPT09IHVuZGVmaW5lZCA/IGRlZmF1bHRWYWx1ZSA6IHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHBhdGhgIGlzIGEgZGlyZWN0IHByb3BlcnR5IG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHBhdGhgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IHsgJ2InOiAyIH0gfTtcbiAgICAgKiB2YXIgb3RoZXIgPSBfLmNyZWF0ZSh7ICdhJzogXy5jcmVhdGUoeyAnYic6IDIgfSkgfSk7XG4gICAgICpcbiAgICAgKiBfLmhhcyhvYmplY3QsICdhJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5oYXMob2JqZWN0LCAnYS5iJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5oYXMob2JqZWN0LCBbJ2EnLCAnYiddKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmhhcyhvdGhlciwgJ2EnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhcyhvYmplY3QsIHBhdGgpIHtcbiAgICAgIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBoYXNQYXRoKG9iamVjdCwgcGF0aCwgYmFzZUhhcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBwYXRoYCBpcyBhIGRpcmVjdCBvciBpbmhlcml0ZWQgcHJvcGVydHkgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgcGF0aGAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSBfLmNyZWF0ZSh7ICdhJzogXy5jcmVhdGUoeyAnYic6IDIgfSkgfSk7XG4gICAgICpcbiAgICAgKiBfLmhhc0luKG9iamVjdCwgJ2EnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmhhc0luKG9iamVjdCwgJ2EuYicpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaGFzSW4ob2JqZWN0LCBbJ2EnLCAnYiddKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmhhc0luKG9iamVjdCwgJ2InKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc0luKG9iamVjdCwgcGF0aCkge1xuICAgICAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGhhc1BhdGgob2JqZWN0LCBwYXRoLCBiYXNlSGFzSW4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIHRoZSBpbnZlcnRlZCBrZXlzIGFuZCB2YWx1ZXMgb2YgYG9iamVjdGAuXG4gICAgICogSWYgYG9iamVjdGAgY29udGFpbnMgZHVwbGljYXRlIHZhbHVlcywgc3Vic2VxdWVudCB2YWx1ZXMgb3ZlcndyaXRlXG4gICAgICogcHJvcGVydHkgYXNzaWdubWVudHMgb2YgcHJldmlvdXMgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnZlcnQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGludmVydGVkIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMSB9O1xuICAgICAqXG4gICAgICogXy5pbnZlcnQob2JqZWN0KTtcbiAgICAgKiAvLyA9PiB7ICcxJzogJ2MnLCAnMic6ICdiJyB9XG4gICAgICovXG4gICAgdmFyIGludmVydCA9IGNyZWF0ZUludmVydGVyKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgaWYgKHZhbHVlICE9IG51bGwgJiZcbiAgICAgICAgICB0eXBlb2YgdmFsdWUudG9TdHJpbmcgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YWx1ZSA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICAgICAgfVxuXG4gICAgICByZXN1bHRbdmFsdWVdID0ga2V5O1xuICAgIH0sIGNvbnN0YW50KGlkZW50aXR5KSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmludmVydGAgZXhjZXB0IHRoYXQgdGhlIGludmVydGVkIG9iamVjdCBpcyBnZW5lcmF0ZWRcbiAgICAgKiBmcm9tIHRoZSByZXN1bHRzIG9mIHJ1bm5pbmcgZWFjaCBlbGVtZW50IG9mIGBvYmplY3RgIHRocnUgYGl0ZXJhdGVlYC4gVGhlXG4gICAgICogY29ycmVzcG9uZGluZyBpbnZlcnRlZCB2YWx1ZSBvZiBlYWNoIGludmVydGVkIGtleSBpcyBhbiBhcnJheSBvZiBrZXlzXG4gICAgICogcmVzcG9uc2libGUgZm9yIGdlbmVyYXRpbmcgdGhlIGludmVydGVkIHZhbHVlLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZFxuICAgICAqIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMS4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnZlcnQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBpbnZlcnRlZCBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDEgfTtcbiAgICAgKlxuICAgICAqIF8uaW52ZXJ0Qnkob2JqZWN0KTtcbiAgICAgKiAvLyA9PiB7ICcxJzogWydhJywgJ2MnXSwgJzInOiBbJ2InXSB9XG4gICAgICpcbiAgICAgKiBfLmludmVydEJ5KG9iamVjdCwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgKiAgIHJldHVybiAnZ3JvdXAnICsgdmFsdWU7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4geyAnZ3JvdXAxJzogWydhJywgJ2MnXSwgJ2dyb3VwMic6IFsnYiddIH1cbiAgICAgKi9cbiAgICB2YXIgaW52ZXJ0QnkgPSBjcmVhdGVJbnZlcnRlcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIGlmICh2YWx1ZSAhPSBudWxsICYmXG4gICAgICAgICAgdHlwZW9mIHZhbHVlLnRvU3RyaW5nICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdmFsdWUgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwocmVzdWx0LCB2YWx1ZSkpIHtcbiAgICAgICAgcmVzdWx0W3ZhbHVlXS5wdXNoKGtleSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHRbdmFsdWVdID0gW2tleV07XG4gICAgICB9XG4gICAgfSwgZ2V0SXRlcmF0ZWUpO1xuXG4gICAgLyoqXG4gICAgICogSW52b2tlcyB0aGUgbWV0aG9kIGF0IGBwYXRoYCBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIG1ldGhvZCB0byBpbnZva2UuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgdGhlIG1ldGhvZCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXN1bHQgb2YgdGhlIGludm9rZWQgbWV0aG9kLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IFsxLCAyLCAzLCA0XSB9IH1dIH07XG4gICAgICpcbiAgICAgKiBfLmludm9rZShvYmplY3QsICdhWzBdLmIuYy5zbGljZScsIDEsIDMpO1xuICAgICAqIC8vID0+IFsyLCAzXVxuICAgICAqL1xuICAgIHZhciBpbnZva2UgPSBiYXNlUmVzdChiYXNlSW52b2tlKTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuIFNlZSB0aGVcbiAgICAgKiBbRVMgc3BlY10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LmtleXMpXG4gICAgICogZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8ua2V5cyhuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYiddIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICpcbiAgICAgKiBfLmtleXMoJ2hpJyk7XG4gICAgICogLy8gPT4gWycwJywgJzEnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGtleXMob2JqZWN0KSB7XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2Uob2JqZWN0KSA/IGFycmF5TGlrZUtleXMob2JqZWN0KSA6IGJhc2VLZXlzKG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5rZXlzSW4obmV3IEZvbyk7XG4gICAgICogLy8gPT4gWydhJywgJ2InLCAnYyddIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICovXG4gICAgZnVuY3Rpb24ga2V5c0luKG9iamVjdCkge1xuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlKG9iamVjdCkgPyBhcnJheUxpa2VLZXlzKG9iamVjdCwgdHJ1ZSkgOiBiYXNlS2V5c0luKG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLm1hcFZhbHVlc2A7IHRoaXMgbWV0aG9kIGNyZWF0ZXMgYW4gb2JqZWN0IHdpdGggdGhlXG4gICAgICogc2FtZSB2YWx1ZXMgYXMgYG9iamVjdGAgYW5kIGtleXMgZ2VuZXJhdGVkIGJ5IHJ1bm5pbmcgZWFjaCBvd24gZW51bWVyYWJsZVxuICAgICAqIHN0cmluZyBrZXllZCBwcm9wZXJ0eSBvZiBgb2JqZWN0YCB0aHJ1IGBpdGVyYXRlZWAuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwga2V5LCBvYmplY3QpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBvYmplY3QuXG4gICAgICogQHNlZSBfLm1hcFZhbHVlc1xuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1hcEtleXMoeyAnYSc6IDEsICdiJzogMiB9LCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICByZXR1cm4ga2V5ICsgdmFsdWU7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4geyAnYTEnOiAxLCAnYjInOiAyIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBLZXlzKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgIGl0ZXJhdGVlID0gZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpO1xuXG4gICAgICBiYXNlRm9yT3duKG9iamVjdCwgZnVuY3Rpb24odmFsdWUsIGtleSwgb2JqZWN0KSB7XG4gICAgICAgIGJhc2VBc3NpZ25WYWx1ZShyZXN1bHQsIGl0ZXJhdGVlKHZhbHVlLCBrZXksIG9iamVjdCksIHZhbHVlKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCB3aXRoIHRoZSBzYW1lIGtleXMgYXMgYG9iamVjdGAgYW5kIHZhbHVlcyBnZW5lcmF0ZWRcbiAgICAgKiBieSBydW5uaW5nIGVhY2ggb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnR5IG9mIGBvYmplY3RgIHRocnVcbiAgICAgKiBgaXRlcmF0ZWVgLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czpcbiAgICAgKiAodmFsdWUsIGtleSwgb2JqZWN0KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjQuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgb2JqZWN0LlxuICAgICAqIEBzZWUgXy5tYXBLZXlzXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IHtcbiAgICAgKiAgICdmcmVkJzogICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FnZSc6IDQwIH0sXG4gICAgICogICAncGViYmxlcyc6IHsgJ3VzZXInOiAncGViYmxlcycsICdhZ2UnOiAxIH1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5tYXBWYWx1ZXModXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8uYWdlOyB9KTtcbiAgICAgKiAvLyA9PiB7ICdmcmVkJzogNDAsICdwZWJibGVzJzogMSB9IChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLm1hcFZhbHVlcyh1c2VycywgJ2FnZScpO1xuICAgICAqIC8vID0+IHsgJ2ZyZWQnOiA0MCwgJ3BlYmJsZXMnOiAxIH0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBWYWx1ZXMob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgICAgaXRlcmF0ZWUgPSBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMyk7XG5cbiAgICAgIGJhc2VGb3JPd24ob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSwga2V5LCBvYmplY3QpIHtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKHJlc3VsdCwga2V5LCBpdGVyYXRlZSh2YWx1ZSwga2V5LCBvYmplY3QpKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmFzc2lnbmAgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgbWVyZ2VzIG93biBhbmRcbiAgICAgKiBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBzb3VyY2Ugb2JqZWN0cyBpbnRvIHRoZVxuICAgICAqIGRlc3RpbmF0aW9uIG9iamVjdC4gU291cmNlIHByb3BlcnRpZXMgdGhhdCByZXNvbHZlIHRvIGB1bmRlZmluZWRgIGFyZVxuICAgICAqIHNraXBwZWQgaWYgYSBkZXN0aW5hdGlvbiB2YWx1ZSBleGlzdHMuIEFycmF5IGFuZCBwbGFpbiBvYmplY3QgcHJvcGVydGllc1xuICAgICAqIGFyZSBtZXJnZWQgcmVjdXJzaXZlbHkuIE90aGVyIG9iamVjdHMgYW5kIHZhbHVlIHR5cGVzIGFyZSBvdmVycmlkZGVuIGJ5XG4gICAgICogYXNzaWdubWVudC4gU291cmNlIG9iamVjdHMgYXJlIGFwcGxpZWQgZnJvbSBsZWZ0IHRvIHJpZ2h0LiBTdWJzZXF1ZW50XG4gICAgICogc291cmNlcyBvdmVyd3JpdGUgcHJvcGVydHkgYXNzaWdubWVudHMgb2YgcHJldmlvdXMgc291cmNlcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNS4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZXNdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0ge1xuICAgICAqICAgJ2EnOiBbeyAnYic6IDIgfSwgeyAnZCc6IDQgfV1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogdmFyIG90aGVyID0ge1xuICAgICAqICAgJ2EnOiBbeyAnYyc6IDMgfSwgeyAnZSc6IDUgfV1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5tZXJnZShvYmplY3QsIG90aGVyKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogW3sgJ2InOiAyLCAnYyc6IDMgfSwgeyAnZCc6IDQsICdlJzogNSB9XSB9XG4gICAgICovXG4gICAgdmFyIG1lcmdlID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4KSB7XG4gICAgICBiYXNlTWVyZ2Uob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4KTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ubWVyZ2VgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBwcm9kdWNlIHRoZSBtZXJnZWQgdmFsdWVzIG9mIHRoZSBkZXN0aW5hdGlvbiBhbmQgc291cmNlXG4gICAgICogcHJvcGVydGllcy4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGAsIG1lcmdpbmcgaXMgaGFuZGxlZCBieSB0aGVcbiAgICAgKiBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYCBpcyBpbnZva2VkIHdpdGggc2l4IGFyZ3VtZW50czpcbiAgICAgKiAob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlLCBzdGFjaykuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IHNvdXJjZXMgVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUpIHtcbiAgICAgKiAgIGlmIChfLmlzQXJyYXkob2JqVmFsdWUpKSB7XG4gICAgICogICAgIHJldHVybiBvYmpWYWx1ZS5jb25jYXQoc3JjVmFsdWUpO1xuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogWzFdLCAnYic6IFsyXSB9O1xuICAgICAqIHZhciBvdGhlciA9IHsgJ2EnOiBbM10sICdiJzogWzRdIH07XG4gICAgICpcbiAgICAgKiBfLm1lcmdlV2l0aChvYmplY3QsIG90aGVyLCBjdXN0b21pemVyKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogWzEsIDNdLCAnYic6IFsyLCA0XSB9XG4gICAgICovXG4gICAgdmFyIG1lcmdlV2l0aCA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCwgY3VzdG9taXplcikge1xuICAgICAgYmFzZU1lcmdlKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCwgY3VzdG9taXplcik7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8ucGlja2A7IHRoaXMgbWV0aG9kIGNyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIHRoZVxuICAgICAqIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydHkgcGF0aHMgb2YgYG9iamVjdGAgdGhhdCBhcmUgbm90IG9taXR0ZWQuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgY29uc2lkZXJhYmx5IHNsb3dlciB0aGFuIGBfLnBpY2tgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi4oc3RyaW5nfHN0cmluZ1tdKX0gW3BhdGhzXSBUaGUgcHJvcGVydHkgcGF0aHMgdG8gb21pdC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogJzInLCAnYyc6IDMgfTtcbiAgICAgKlxuICAgICAqIF8ub21pdChvYmplY3QsIFsnYScsICdjJ10pO1xuICAgICAqIC8vID0+IHsgJ2InOiAnMicgfVxuICAgICAqL1xuICAgIHZhciBvbWl0ID0gZmxhdFJlc3QoZnVuY3Rpb24ob2JqZWN0LCBwYXRocykge1xuICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICB2YXIgaXNEZWVwID0gZmFsc2U7XG4gICAgICBwYXRocyA9IGFycmF5TWFwKHBhdGhzLCBmdW5jdGlvbihwYXRoKSB7XG4gICAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuICAgICAgICBpc0RlZXAgfHwgKGlzRGVlcCA9IHBhdGgubGVuZ3RoID4gMSk7XG4gICAgICAgIHJldHVybiBwYXRoO1xuICAgICAgfSk7XG4gICAgICBjb3B5T2JqZWN0KG9iamVjdCwgZ2V0QWxsS2V5c0luKG9iamVjdCksIHJlc3VsdCk7XG4gICAgICBpZiAoaXNEZWVwKSB7XG4gICAgICAgIHJlc3VsdCA9IGJhc2VDbG9uZShyZXN1bHQsIENMT05FX0RFRVBfRkxBRyB8IENMT05FX0ZMQVRfRkxBRyB8IENMT05FX1NZTUJPTFNfRkxBRywgY3VzdG9tT21pdENsb25lKTtcbiAgICAgIH1cbiAgICAgIHZhciBsZW5ndGggPSBwYXRocy5sZW5ndGg7XG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgYmFzZVVuc2V0KHJlc3VsdCwgcGF0aHNbbGVuZ3RoXSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLnBpY2tCeWA7IHRoaXMgbWV0aG9kIGNyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mXG4gICAgICogdGhlIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2YgYG9iamVjdGAgdGhhdFxuICAgICAqIGBwcmVkaWNhdGVgIGRvZXNuJ3QgcmV0dXJuIHRydXRoeSBmb3IuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoIHR3b1xuICAgICAqIGFyZ3VtZW50czogKHZhbHVlLCBrZXkpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgcHJvcGVydHkuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6ICcyJywgJ2MnOiAzIH07XG4gICAgICpcbiAgICAgKiBfLm9taXRCeShvYmplY3QsIF8uaXNOdW1iZXIpO1xuICAgICAqIC8vID0+IHsgJ2InOiAnMicgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9taXRCeShvYmplY3QsIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIHBpY2tCeShvYmplY3QsIG5lZ2F0ZShnZXRJdGVyYXRlZShwcmVkaWNhdGUpKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2YgdGhlIHBpY2tlZCBgb2JqZWN0YCBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi4oc3RyaW5nfHN0cmluZ1tdKX0gW3BhdGhzXSBUaGUgcHJvcGVydHkgcGF0aHMgdG8gcGljay5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogJzInLCAnYyc6IDMgfTtcbiAgICAgKlxuICAgICAqIF8ucGljayhvYmplY3QsIFsnYScsICdjJ10pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYyc6IDMgfVxuICAgICAqL1xuICAgIHZhciBwaWNrID0gZmxhdFJlc3QoZnVuY3Rpb24ob2JqZWN0LCBwYXRocykge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8ge30gOiBiYXNlUGljayhvYmplY3QsIHBhdGhzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIHRoZSBgb2JqZWN0YCBwcm9wZXJ0aWVzIGBwcmVkaWNhdGVgIHJldHVybnNcbiAgICAgKiB0cnV0aHkgZm9yLiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aCB0d28gYXJndW1lbnRzOiAodmFsdWUsIGtleSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBwcm9wZXJ0eS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogJzInLCAnYyc6IDMgfTtcbiAgICAgKlxuICAgICAqIF8ucGlja0J5KG9iamVjdCwgXy5pc051bWJlcik7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdjJzogMyB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gcGlja0J5KG9iamVjdCwgcHJlZGljYXRlKSB7XG4gICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgfVxuICAgICAgdmFyIHByb3BzID0gYXJyYXlNYXAoZ2V0QWxsS2V5c0luKG9iamVjdCksIGZ1bmN0aW9uKHByb3ApIHtcbiAgICAgICAgcmV0dXJuIFtwcm9wXTtcbiAgICAgIH0pO1xuICAgICAgcHJlZGljYXRlID0gZ2V0SXRlcmF0ZWUocHJlZGljYXRlKTtcbiAgICAgIHJldHVybiBiYXNlUGlja0J5KG9iamVjdCwgcHJvcHMsIGZ1bmN0aW9uKHZhbHVlLCBwYXRoKSB7XG4gICAgICAgIHJldHVybiBwcmVkaWNhdGUodmFsdWUsIHBhdGhbMF0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5nZXRgIGV4Y2VwdCB0aGF0IGlmIHRoZSByZXNvbHZlZCB2YWx1ZSBpcyBhXG4gICAgICogZnVuY3Rpb24gaXQncyBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIGl0cyBwYXJlbnQgb2JqZWN0IGFuZFxuICAgICAqIGl0cyByZXN1bHQgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byByZXNvbHZlLlxuICAgICAqIEBwYXJhbSB7Kn0gW2RlZmF1bHRWYWx1ZV0gVGhlIHZhbHVlIHJldHVybmVkIGZvciBgdW5kZWZpbmVkYCByZXNvbHZlZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYzEnOiAzLCAnYzInOiBfLmNvbnN0YW50KDQpIH0gfV0gfTtcbiAgICAgKlxuICAgICAqIF8ucmVzdWx0KG9iamVjdCwgJ2FbMF0uYi5jMScpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8ucmVzdWx0KG9iamVjdCwgJ2FbMF0uYi5jMicpO1xuICAgICAqIC8vID0+IDRcbiAgICAgKlxuICAgICAqIF8ucmVzdWx0KG9iamVjdCwgJ2FbMF0uYi5jMycsICdkZWZhdWx0Jyk7XG4gICAgICogLy8gPT4gJ2RlZmF1bHQnXG4gICAgICpcbiAgICAgKiBfLnJlc3VsdChvYmplY3QsICdhWzBdLmIuYzMnLCBfLmNvbnN0YW50KCdkZWZhdWx0JykpO1xuICAgICAqIC8vID0+ICdkZWZhdWx0J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlc3VsdChvYmplY3QsIHBhdGgsIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG5cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHBhdGgubGVuZ3RoO1xuXG4gICAgICAvLyBFbnN1cmUgdGhlIGxvb3AgaXMgZW50ZXJlZCB3aGVuIHBhdGggaXMgZW1wdHkuXG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICBsZW5ndGggPSAxO1xuICAgICAgICBvYmplY3QgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFt0b0tleShwYXRoW2luZGV4XSldO1xuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGluZGV4ID0gbGVuZ3RoO1xuICAgICAgICAgIHZhbHVlID0gZGVmYXVsdFZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIG9iamVjdCA9IGlzRnVuY3Rpb24odmFsdWUpID8gdmFsdWUuY2FsbChvYmplY3QpIDogdmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHZhbHVlIGF0IGBwYXRoYCBvZiBgb2JqZWN0YC4gSWYgYSBwb3J0aW9uIG9mIGBwYXRoYCBkb2Vzbid0IGV4aXN0LFxuICAgICAqIGl0J3MgY3JlYXRlZC4gQXJyYXlzIGFyZSBjcmVhdGVkIGZvciBtaXNzaW5nIGluZGV4IHByb3BlcnRpZXMgd2hpbGUgb2JqZWN0c1xuICAgICAqIGFyZSBjcmVhdGVkIGZvciBhbGwgb3RoZXIgbWlzc2luZyBwcm9wZXJ0aWVzLiBVc2UgYF8uc2V0V2l0aGAgdG8gY3VzdG9taXplXG4gICAgICogYHBhdGhgIGNyZWF0aW9uLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy43LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDMgfSB9XSB9O1xuICAgICAqXG4gICAgICogXy5zZXQob2JqZWN0LCAnYVswXS5iLmMnLCA0KTtcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3QuYVswXS5iLmMpO1xuICAgICAqIC8vID0+IDRcbiAgICAgKlxuICAgICAqIF8uc2V0KG9iamVjdCwgWyd4JywgJzAnLCAneScsICd6J10sIDUpO1xuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdC54WzBdLnkueik7XG4gICAgICogLy8gPT4gNVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldChvYmplY3QsIHBhdGgsIHZhbHVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBvYmplY3QgOiBiYXNlU2V0KG9iamVjdCwgcGF0aCwgdmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc2V0YCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgdG8gcHJvZHVjZSB0aGUgb2JqZWN0cyBvZiBgcGF0aGAuICBJZiBgY3VzdG9taXplcmAgcmV0dXJucyBgdW5kZWZpbmVkYFxuICAgICAqIHBhdGggY3JlYXRpb24gaXMgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhyZWUgYXJndW1lbnRzOiAobnNWYWx1ZSwga2V5LCBuc09iamVjdCkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0ge307XG4gICAgICpcbiAgICAgKiBfLnNldFdpdGgob2JqZWN0LCAnWzBdWzFdJywgJ2EnLCBPYmplY3QpO1xuICAgICAqIC8vID0+IHsgJzAnOiB7ICcxJzogJ2EnIH0gfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldFdpdGgob2JqZWN0LCBwYXRoLCB2YWx1ZSwgY3VzdG9taXplcikge1xuICAgICAgY3VzdG9taXplciA9IHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicgPyBjdXN0b21pemVyIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gb2JqZWN0IDogYmFzZVNldChvYmplY3QsIHBhdGgsIHZhbHVlLCBjdXN0b21pemVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZC12YWx1ZSBwYWlycyBmb3IgYG9iamVjdGBcbiAgICAgKiB3aGljaCBjYW4gYmUgY29uc3VtZWQgYnkgYF8uZnJvbVBhaXJzYC4gSWYgYG9iamVjdGAgaXMgYSBtYXAgb3Igc2V0LCBpdHNcbiAgICAgKiBlbnRyaWVzIGFyZSByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBhbGlhcyBlbnRyaWVzXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8udG9QYWlycyhuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbWydhJywgMV0sIFsnYicsIDJdXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIHZhciB0b1BhaXJzID0gY3JlYXRlVG9QYWlycyhrZXlzKTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQtdmFsdWUgcGFpcnNcbiAgICAgKiBmb3IgYG9iamVjdGAgd2hpY2ggY2FuIGJlIGNvbnN1bWVkIGJ5IGBfLmZyb21QYWlyc2AuIElmIGBvYmplY3RgIGlzIGEgbWFwXG4gICAgICogb3Igc2V0LCBpdHMgZW50cmllcyBhcmUgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAYWxpYXMgZW50cmllc0luXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8udG9QYWlyc0luKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFtbJ2EnLCAxXSwgWydiJywgMl0sIFsnYycsIDNdXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIHZhciB0b1BhaXJzSW4gPSBjcmVhdGVUb1BhaXJzKGtleXNJbik7XG5cbiAgICAvKipcbiAgICAgKiBBbiBhbHRlcm5hdGl2ZSB0byBgXy5yZWR1Y2VgOyB0aGlzIG1ldGhvZCB0cmFuc2Zvcm1zIGBvYmplY3RgIHRvIGEgbmV3XG4gICAgICogYGFjY3VtdWxhdG9yYCBvYmplY3Qgd2hpY2ggaXMgdGhlIHJlc3VsdCBvZiBydW5uaW5nIGVhY2ggb2YgaXRzIG93blxuICAgICAqIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgdGhydSBgaXRlcmF0ZWVgLCB3aXRoIGVhY2ggaW52b2NhdGlvblxuICAgICAqIHBvdGVudGlhbGx5IG11dGF0aW5nIHRoZSBgYWNjdW11bGF0b3JgIG9iamVjdC4gSWYgYGFjY3VtdWxhdG9yYCBpcyBub3RcbiAgICAgKiBwcm92aWRlZCwgYSBuZXcgb2JqZWN0IHdpdGggdGhlIHNhbWUgYFtbUHJvdG90eXBlXV1gIHdpbGwgYmUgdXNlZC4gVGhlXG4gICAgICogaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIGZvdXIgYXJndW1lbnRzOiAoYWNjdW11bGF0b3IsIHZhbHVlLCBrZXksIG9iamVjdCkuXG4gICAgICogSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0IGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBjdXN0b20gYWNjdW11bGF0b3IgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRyYW5zZm9ybShbMiwgMywgNF0sIGZ1bmN0aW9uKHJlc3VsdCwgbikge1xuICAgICAqICAgcmVzdWx0LnB1c2gobiAqPSBuKTtcbiAgICAgKiAgIHJldHVybiBuICUgMiA9PSAwO1xuICAgICAqIH0sIFtdKTtcbiAgICAgKiAvLyA9PiBbNCwgOV1cbiAgICAgKlxuICAgICAqIF8udHJhbnNmb3JtKHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMSB9LCBmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIChyZXN1bHRbdmFsdWVdIHx8IChyZXN1bHRbdmFsdWVdID0gW10pKS5wdXNoKGtleSk7XG4gICAgICogfSwge30pO1xuICAgICAqIC8vID0+IHsgJzEnOiBbJ2EnLCAnYyddLCAnMic6IFsnYiddIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cmFuc2Zvcm0ob2JqZWN0LCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgICAgIHZhciBpc0FyciA9IGlzQXJyYXkob2JqZWN0KSxcbiAgICAgICAgICBpc0Fyckxpa2UgPSBpc0FyciB8fCBpc0J1ZmZlcihvYmplY3QpIHx8IGlzVHlwZWRBcnJheShvYmplY3QpO1xuXG4gICAgICBpdGVyYXRlZSA9IGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCA0KTtcbiAgICAgIGlmIChhY2N1bXVsYXRvciA9PSBudWxsKSB7XG4gICAgICAgIHZhciBDdG9yID0gb2JqZWN0ICYmIG9iamVjdC5jb25zdHJ1Y3RvcjtcbiAgICAgICAgaWYgKGlzQXJyTGlrZSkge1xuICAgICAgICAgIGFjY3VtdWxhdG9yID0gaXNBcnIgPyBuZXcgQ3RvciA6IFtdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgICBhY2N1bXVsYXRvciA9IGlzRnVuY3Rpb24oQ3RvcikgPyBiYXNlQ3JlYXRlKGdldFByb3RvdHlwZShvYmplY3QpKSA6IHt9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGFjY3VtdWxhdG9yID0ge307XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIChpc0Fyckxpa2UgPyBhcnJheUVhY2ggOiBiYXNlRm9yT3duKShvYmplY3QsIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgb2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRlZShhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4LCBvYmplY3QpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyB0aGUgcHJvcGVydHkgYXQgYHBhdGhgIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gdW5zZXQuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBwcm9wZXJ0eSBpcyBkZWxldGVkLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogNyB9IH1dIH07XG4gICAgICogXy51bnNldChvYmplY3QsICdhWzBdLmIuYycpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdCk7XG4gICAgICogLy8gPT4geyAnYSc6IFt7ICdiJzoge30gfV0gfTtcbiAgICAgKlxuICAgICAqIF8udW5zZXQob2JqZWN0LCBbJ2EnLCAnMCcsICdiJywgJ2MnXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob2JqZWN0KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogW3sgJ2InOiB7fSB9XSB9O1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuc2V0KG9iamVjdCwgcGF0aCkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdHJ1ZSA6IGJhc2VVbnNldChvYmplY3QsIHBhdGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc2V0YCBleGNlcHQgdGhhdCBhY2NlcHRzIGB1cGRhdGVyYCB0byBwcm9kdWNlIHRoZVxuICAgICAqIHZhbHVlIHRvIHNldC4gVXNlIGBfLnVwZGF0ZVdpdGhgIHRvIGN1c3RvbWl6ZSBgcGF0aGAgY3JlYXRpb24uIFRoZSBgdXBkYXRlcmBcbiAgICAgKiBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC42LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHVwZGF0ZXIgVGhlIGZ1bmN0aW9uIHRvIHByb2R1Y2UgdGhlIHVwZGF0ZWQgdmFsdWUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfV0gfTtcbiAgICAgKlxuICAgICAqIF8udXBkYXRlKG9iamVjdCwgJ2FbMF0uYi5jJywgZnVuY3Rpb24obikgeyByZXR1cm4gbiAqIG47IH0pO1xuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdC5hWzBdLmIuYyk7XG4gICAgICogLy8gPT4gOVxuICAgICAqXG4gICAgICogXy51cGRhdGUob2JqZWN0LCAneFswXS55LnonLCBmdW5jdGlvbihuKSB7IHJldHVybiBuID8gbiArIDEgOiAwOyB9KTtcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3QueFswXS55LnopO1xuICAgICAqIC8vID0+IDBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1cGRhdGUob2JqZWN0LCBwYXRoLCB1cGRhdGVyKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBvYmplY3QgOiBiYXNlVXBkYXRlKG9iamVjdCwgcGF0aCwgY2FzdEZ1bmN0aW9uKHVwZGF0ZXIpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVwZGF0ZWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIHRvIHByb2R1Y2UgdGhlIG9iamVjdHMgb2YgYHBhdGhgLiAgSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGBcbiAgICAgKiBwYXRoIGNyZWF0aW9uIGlzIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKG5zVmFsdWUsIGtleSwgbnNPYmplY3QpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC42LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHVwZGF0ZXIgVGhlIGZ1bmN0aW9uIHRvIHByb2R1Y2UgdGhlIHVwZGF0ZWQgdmFsdWUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7fTtcbiAgICAgKlxuICAgICAqIF8udXBkYXRlV2l0aChvYmplY3QsICdbMF1bMV0nLCBfLmNvbnN0YW50KCdhJyksIE9iamVjdCk7XG4gICAgICogLy8gPT4geyAnMCc6IHsgJzEnOiAnYScgfSB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gdXBkYXRlV2l0aChvYmplY3QsIHBhdGgsIHVwZGF0ZXIsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IG9iamVjdCA6IGJhc2VVcGRhdGUob2JqZWN0LCBwYXRoLCBjYXN0RnVuY3Rpb24odXBkYXRlciksIGN1c3RvbWl6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0eSB2YWx1ZXMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLnZhbHVlcyhuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbMSwgMl0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKlxuICAgICAqIF8udmFsdWVzKCdoaScpO1xuICAgICAqIC8vID0+IFsnaCcsICdpJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB2YWx1ZXMob2JqZWN0KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBbXSA6IGJhc2VWYWx1ZXMob2JqZWN0LCBrZXlzKG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnR5XG4gICAgICogdmFsdWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy52YWx1ZXNJbihuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB2YWx1ZXNJbihvYmplY3QpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IFtdIDogYmFzZVZhbHVlcyhvYmplY3QsIGtleXNJbihvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDbGFtcHMgYG51bWJlcmAgd2l0aGluIHRoZSBpbmNsdXNpdmUgYGxvd2VyYCBhbmQgYHVwcGVyYCBib3VuZHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTnVtYmVyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIGNsYW1wLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbG93ZXJdIFRoZSBsb3dlciBib3VuZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdXBwZXIgVGhlIHVwcGVyIGJvdW5kLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNsYW1wZWQgbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNsYW1wKC0xMCwgLTUsIDUpO1xuICAgICAqIC8vID0+IC01XG4gICAgICpcbiAgICAgKiBfLmNsYW1wKDEwLCAtNSwgNSk7XG4gICAgICogLy8gPT4gNVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsYW1wKG51bWJlciwgbG93ZXIsIHVwcGVyKSB7XG4gICAgICBpZiAodXBwZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB1cHBlciA9IGxvd2VyO1xuICAgICAgICBsb3dlciA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGlmICh1cHBlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHVwcGVyID0gdG9OdW1iZXIodXBwZXIpO1xuICAgICAgICB1cHBlciA9IHVwcGVyID09PSB1cHBlciA/IHVwcGVyIDogMDtcbiAgICAgIH1cbiAgICAgIGlmIChsb3dlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGxvd2VyID0gdG9OdW1iZXIobG93ZXIpO1xuICAgICAgICBsb3dlciA9IGxvd2VyID09PSBsb3dlciA/IGxvd2VyIDogMDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlQ2xhbXAodG9OdW1iZXIobnVtYmVyKSwgbG93ZXIsIHVwcGVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYG5gIGlzIGJldHdlZW4gYHN0YXJ0YCBhbmQgdXAgdG8sIGJ1dCBub3QgaW5jbHVkaW5nLCBgZW5kYC4gSWZcbiAgICAgKiBgZW5kYCBpcyBub3Qgc3BlY2lmaWVkLCBpdCdzIHNldCB0byBgc3RhcnRgIHdpdGggYHN0YXJ0YCB0aGVuIHNldCB0byBgMGAuXG4gICAgICogSWYgYHN0YXJ0YCBpcyBncmVhdGVyIHRoYW4gYGVuZGAgdGhlIHBhcmFtcyBhcmUgc3dhcHBlZCB0byBzdXBwb3J0XG4gICAgICogbmVnYXRpdmUgcmFuZ2VzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMy4wXG4gICAgICogQGNhdGVnb3J5IE51bWJlclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG51bWJlcmAgaXMgaW4gdGhlIHJhbmdlLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQHNlZSBfLnJhbmdlLCBfLnJhbmdlUmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKDMsIDIsIDQpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSg0LCA4KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoNCwgMik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSgyLCAyKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKDEuMiwgMik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKDUuMiwgNCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSgtMywgLTIsIC02KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5SYW5nZShudW1iZXIsIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHN0YXJ0ID0gdG9GaW5pdGUoc3RhcnQpO1xuICAgICAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGVuZCA9IHN0YXJ0O1xuICAgICAgICBzdGFydCA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbmQgPSB0b0Zpbml0ZShlbmQpO1xuICAgICAgfVxuICAgICAgbnVtYmVyID0gdG9OdW1iZXIobnVtYmVyKTtcbiAgICAgIHJldHVybiBiYXNlSW5SYW5nZShudW1iZXIsIHN0YXJ0LCBlbmQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFByb2R1Y2VzIGEgcmFuZG9tIG51bWJlciBiZXR3ZWVuIHRoZSBpbmNsdXNpdmUgYGxvd2VyYCBhbmQgYHVwcGVyYCBib3VuZHMuXG4gICAgICogSWYgb25seSBvbmUgYXJndW1lbnQgaXMgcHJvdmlkZWQgYSBudW1iZXIgYmV0d2VlbiBgMGAgYW5kIHRoZSBnaXZlbiBudW1iZXJcbiAgICAgKiBpcyByZXR1cm5lZC4gSWYgYGZsb2F0aW5nYCBpcyBgdHJ1ZWAsIG9yIGVpdGhlciBgbG93ZXJgIG9yIGB1cHBlcmAgYXJlXG4gICAgICogZmxvYXRzLCBhIGZsb2F0aW5nLXBvaW50IG51bWJlciBpcyByZXR1cm5lZCBpbnN0ZWFkIG9mIGFuIGludGVnZXIuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSmF2YVNjcmlwdCBmb2xsb3dzIHRoZSBJRUVFLTc1NCBzdGFuZGFyZCBmb3IgcmVzb2x2aW5nXG4gICAgICogZmxvYXRpbmctcG9pbnQgdmFsdWVzIHdoaWNoIGNhbiBwcm9kdWNlIHVuZXhwZWN0ZWQgcmVzdWx0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjcuMFxuICAgICAqIEBjYXRlZ29yeSBOdW1iZXJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xvd2VyPTBdIFRoZSBsb3dlciBib3VuZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3VwcGVyPTFdIFRoZSB1cHBlciBib3VuZC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmbG9hdGluZ10gU3BlY2lmeSByZXR1cm5pbmcgYSBmbG9hdGluZy1wb2ludCBudW1iZXIuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcmFuZG9tIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yYW5kb20oMCwgNSk7XG4gICAgICogLy8gPT4gYW4gaW50ZWdlciBiZXR3ZWVuIDAgYW5kIDVcbiAgICAgKlxuICAgICAqIF8ucmFuZG9tKDUpO1xuICAgICAqIC8vID0+IGFsc28gYW4gaW50ZWdlciBiZXR3ZWVuIDAgYW5kIDVcbiAgICAgKlxuICAgICAqIF8ucmFuZG9tKDUsIHRydWUpO1xuICAgICAqIC8vID0+IGEgZmxvYXRpbmctcG9pbnQgbnVtYmVyIGJldHdlZW4gMCBhbmQgNVxuICAgICAqXG4gICAgICogXy5yYW5kb20oMS4yLCA1LjIpO1xuICAgICAqIC8vID0+IGEgZmxvYXRpbmctcG9pbnQgbnVtYmVyIGJldHdlZW4gMS4yIGFuZCA1LjJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByYW5kb20obG93ZXIsIHVwcGVyLCBmbG9hdGluZykge1xuICAgICAgaWYgKGZsb2F0aW5nICYmIHR5cGVvZiBmbG9hdGluZyAhPSAnYm9vbGVhbicgJiYgaXNJdGVyYXRlZUNhbGwobG93ZXIsIHVwcGVyLCBmbG9hdGluZykpIHtcbiAgICAgICAgdXBwZXIgPSBmbG9hdGluZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGlmIChmbG9hdGluZyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdXBwZXIgPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgZmxvYXRpbmcgPSB1cHBlcjtcbiAgICAgICAgICB1cHBlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgbG93ZXIgPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgZmxvYXRpbmcgPSBsb3dlcjtcbiAgICAgICAgICBsb3dlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGxvd2VyID09PSB1bmRlZmluZWQgJiYgdXBwZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBsb3dlciA9IDA7XG4gICAgICAgIHVwcGVyID0gMTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBsb3dlciA9IHRvRmluaXRlKGxvd2VyKTtcbiAgICAgICAgaWYgKHVwcGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB1cHBlciA9IGxvd2VyO1xuICAgICAgICAgIGxvd2VyID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB1cHBlciA9IHRvRmluaXRlKHVwcGVyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGxvd2VyID4gdXBwZXIpIHtcbiAgICAgICAgdmFyIHRlbXAgPSBsb3dlcjtcbiAgICAgICAgbG93ZXIgPSB1cHBlcjtcbiAgICAgICAgdXBwZXIgPSB0ZW1wO1xuICAgICAgfVxuICAgICAgaWYgKGZsb2F0aW5nIHx8IGxvd2VyICUgMSB8fCB1cHBlciAlIDEpIHtcbiAgICAgICAgdmFyIHJhbmQgPSBuYXRpdmVSYW5kb20oKTtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZU1pbihsb3dlciArIChyYW5kICogKHVwcGVyIC0gbG93ZXIgKyBmcmVlUGFyc2VGbG9hdCgnMWUtJyArICgocmFuZCArICcnKS5sZW5ndGggLSAxKSkpKSwgdXBwZXIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VSYW5kb20obG93ZXIsIHVwcGVyKTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0byBbY2FtZWwgY2FzZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ2FtZWxDYXNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNhbWVsIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jYW1lbENhc2UoJ0ZvbyBCYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vQmFyJ1xuICAgICAqXG4gICAgICogXy5jYW1lbENhc2UoJy0tZm9vLWJhci0tJyk7XG4gICAgICogLy8gPT4gJ2Zvb0JhcidcbiAgICAgKlxuICAgICAqIF8uY2FtZWxDYXNlKCdfX0ZPT19CQVJfXycpO1xuICAgICAqIC8vID0+ICdmb29CYXInXG4gICAgICovXG4gICAgdmFyIGNhbWVsQ2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICAgICAgd29yZCA9IHdvcmQudG9Mb3dlckNhc2UoKTtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyBjYXBpdGFsaXplKHdvcmQpIDogd29yZCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyB0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIGBzdHJpbmdgIHRvIHVwcGVyIGNhc2UgYW5kIHRoZSByZW1haW5pbmdcbiAgICAgKiB0byBsb3dlciBjYXNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNhcGl0YWxpemUuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY2FwaXRhbGl6ZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNhcGl0YWxpemUoJ0ZSRUQnKTtcbiAgICAgKiAvLyA9PiAnRnJlZCdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYXBpdGFsaXplKHN0cmluZykge1xuICAgICAgcmV0dXJuIHVwcGVyRmlyc3QodG9TdHJpbmcoc3RyaW5nKS50b0xvd2VyQ2FzZSgpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZWJ1cnJzIGBzdHJpbmdgIGJ5IGNvbnZlcnRpbmdcbiAgICAgKiBbTGF0aW4tMSBTdXBwbGVtZW50XShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MYXRpbi0xX1N1cHBsZW1lbnRfKFVuaWNvZGVfYmxvY2spI0NoYXJhY3Rlcl90YWJsZSlcbiAgICAgKiBhbmQgW0xhdGluIEV4dGVuZGVkLUFdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xhdGluX0V4dGVuZGVkLUEpXG4gICAgICogbGV0dGVycyB0byBiYXNpYyBMYXRpbiBsZXR0ZXJzIGFuZCByZW1vdmluZ1xuICAgICAqIFtjb21iaW5pbmcgZGlhY3JpdGljYWwgbWFya3NdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvbWJpbmluZ19EaWFjcml0aWNhbF9NYXJrcykuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gZGVidXJyLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGRlYnVycmVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWJ1cnIoJ2TDqWrDoCB2dScpO1xuICAgICAqIC8vID0+ICdkZWphIHZ1J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRlYnVycihzdHJpbmcpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICByZXR1cm4gc3RyaW5nICYmIHN0cmluZy5yZXBsYWNlKHJlTGF0aW4sIGRlYnVyckxldHRlcikucmVwbGFjZShyZUNvbWJvTWFyaywgJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgc3RyaW5nYCBlbmRzIHdpdGggdGhlIGdpdmVuIHRhcmdldCBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3RhcmdldF0gVGhlIHN0cmluZyB0byBzZWFyY2ggZm9yLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcG9zaXRpb249c3RyaW5nLmxlbmd0aF0gVGhlIHBvc2l0aW9uIHRvIHNlYXJjaCB1cCB0by5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHN0cmluZ2AgZW5kcyB3aXRoIGB0YXJnZXRgLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZW5kc1dpdGgoJ2FiYycsICdjJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5lbmRzV2l0aCgnYWJjJywgJ2InKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5lbmRzV2l0aCgnYWJjJywgJ2InLCAyKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gZW5kc1dpdGgoc3RyaW5nLCB0YXJnZXQsIHBvc2l0aW9uKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgdGFyZ2V0ID0gYmFzZVRvU3RyaW5nKHRhcmdldCk7XG5cbiAgICAgIHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuICAgICAgcG9zaXRpb24gPSBwb3NpdGlvbiA9PT0gdW5kZWZpbmVkXG4gICAgICAgID8gbGVuZ3RoXG4gICAgICAgIDogYmFzZUNsYW1wKHRvSW50ZWdlcihwb3NpdGlvbiksIDAsIGxlbmd0aCk7XG5cbiAgICAgIHZhciBlbmQgPSBwb3NpdGlvbjtcbiAgICAgIHBvc2l0aW9uIC09IHRhcmdldC5sZW5ndGg7XG4gICAgICByZXR1cm4gcG9zaXRpb24gPj0gMCAmJiBzdHJpbmcuc2xpY2UocG9zaXRpb24sIGVuZCkgPT0gdGFyZ2V0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRoZSBjaGFyYWN0ZXJzIFwiJlwiLCBcIjxcIiwgXCI+XCIsICdcIicsIGFuZCBcIidcIiBpbiBgc3RyaW5nYCB0byB0aGVpclxuICAgICAqIGNvcnJlc3BvbmRpbmcgSFRNTCBlbnRpdGllcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBObyBvdGhlciBjaGFyYWN0ZXJzIGFyZSBlc2NhcGVkLiBUbyBlc2NhcGUgYWRkaXRpb25hbFxuICAgICAqIGNoYXJhY3RlcnMgdXNlIGEgdGhpcmQtcGFydHkgbGlicmFyeSBsaWtlIFtfaGVfXShodHRwczovL210aHMuYmUvaGUpLlxuICAgICAqXG4gICAgICogVGhvdWdoIHRoZSBcIj5cIiBjaGFyYWN0ZXIgaXMgZXNjYXBlZCBmb3Igc3ltbWV0cnksIGNoYXJhY3RlcnMgbGlrZVxuICAgICAqIFwiPlwiIGFuZCBcIi9cIiBkb24ndCBuZWVkIGVzY2FwaW5nIGluIEhUTUwgYW5kIGhhdmUgbm8gc3BlY2lhbCBtZWFuaW5nXG4gICAgICogdW5sZXNzIHRoZXkncmUgcGFydCBvZiBhIHRhZyBvciB1bnF1b3RlZCBhdHRyaWJ1dGUgdmFsdWUuIFNlZVxuICAgICAqIFtNYXRoaWFzIEJ5bmVucydzIGFydGljbGVdKGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9hbWJpZ3VvdXMtYW1wZXJzYW5kcylcbiAgICAgKiAodW5kZXIgXCJzZW1pLXJlbGF0ZWQgZnVuIGZhY3RcIikgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKlxuICAgICAqIFdoZW4gd29ya2luZyB3aXRoIEhUTUwgeW91IHNob3VsZCBhbHdheXNcbiAgICAgKiBbcXVvdGUgYXR0cmlidXRlIHZhbHVlc10oaHR0cDovL3dvbmtvLmNvbS9wb3N0L2h0bWwtZXNjYXBpbmcpIHRvIHJlZHVjZVxuICAgICAqIFhTUyB2ZWN0b3JzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGVzY2FwZS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBlc2NhcGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5lc2NhcGUoJ2ZyZWQsIGJhcm5leSwgJiBwZWJibGVzJyk7XG4gICAgICogLy8gPT4gJ2ZyZWQsIGJhcm5leSwgJmFtcDsgcGViYmxlcydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlc2NhcGUoc3RyaW5nKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgcmV0dXJuIChzdHJpbmcgJiYgcmVIYXNVbmVzY2FwZWRIdG1sLnRlc3Qoc3RyaW5nKSlcbiAgICAgICAgPyBzdHJpbmcucmVwbGFjZShyZVVuZXNjYXBlZEh0bWwsIGVzY2FwZUh0bWxDaGFyKVxuICAgICAgICA6IHN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFc2NhcGVzIHRoZSBgUmVnRXhwYCBzcGVjaWFsIGNoYXJhY3RlcnMgXCJeXCIsIFwiJFwiLCBcIlxcXCIsIFwiLlwiLCBcIipcIiwgXCIrXCIsXG4gICAgICogXCI/XCIsIFwiKFwiLCBcIilcIiwgXCJbXCIsIFwiXVwiLCBcIntcIiwgXCJ9XCIsIGFuZCBcInxcIiBpbiBgc3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBlc2NhcGUuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZXNjYXBlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZXNjYXBlUmVnRXhwKCdbbG9kYXNoXShodHRwczovL2xvZGFzaC5jb20vKScpO1xuICAgICAqIC8vID0+ICdcXFtsb2Rhc2hcXF1cXChodHRwczovL2xvZGFzaFxcLmNvbS9cXCknXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXNjYXBlUmVnRXhwKHN0cmluZykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHJldHVybiAoc3RyaW5nICYmIHJlSGFzUmVnRXhwQ2hhci50ZXN0KHN0cmluZykpXG4gICAgICAgID8gc3RyaW5nLnJlcGxhY2UocmVSZWdFeHBDaGFyLCAnXFxcXCQmJylcbiAgICAgICAgOiBzdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG9cbiAgICAgKiBba2ViYWIgY2FzZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGV0dGVyX2Nhc2UjU3BlY2lhbF9jYXNlX3N0eWxlcykuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBrZWJhYiBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ua2ViYWJDYXNlKCdGb28gQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvby1iYXInXG4gICAgICpcbiAgICAgKiBfLmtlYmFiQ2FzZSgnZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvby1iYXInXG4gICAgICpcbiAgICAgKiBfLmtlYmFiQ2FzZSgnX19GT09fQkFSX18nKTtcbiAgICAgKiAvLyA9PiAnZm9vLWJhcidcbiAgICAgKi9cbiAgICB2YXIga2ViYWJDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gJy0nIDogJycpICsgd29yZC50b0xvd2VyQ2FzZSgpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AsIGFzIHNwYWNlIHNlcGFyYXRlZCB3b3JkcywgdG8gbG93ZXIgY2FzZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGxvd2VyIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5sb3dlckNhc2UoJy0tRm9vLUJhci0tJyk7XG4gICAgICogLy8gPT4gJ2ZvbyBiYXInXG4gICAgICpcbiAgICAgKiBfLmxvd2VyQ2FzZSgnZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ2ZvbyBiYXInXG4gICAgICpcbiAgICAgKiBfLmxvd2VyQ2FzZSgnX19GT09fQkFSX18nKTtcbiAgICAgKiAvLyA9PiAnZm9vIGJhcidcbiAgICAgKi9cbiAgICB2YXIgbG93ZXJDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gJyAnIDogJycpICsgd29yZC50b0xvd2VyQ2FzZSgpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhlIGZpcnN0IGNoYXJhY3RlciBvZiBgc3RyaW5nYCB0byBsb3dlciBjYXNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5sb3dlckZpcnN0KCdGcmVkJyk7XG4gICAgICogLy8gPT4gJ2ZyZWQnXG4gICAgICpcbiAgICAgKiBfLmxvd2VyRmlyc3QoJ0ZSRUQnKTtcbiAgICAgKiAvLyA9PiAnZlJFRCdcbiAgICAgKi9cbiAgICB2YXIgbG93ZXJGaXJzdCA9IGNyZWF0ZUNhc2VGaXJzdCgndG9Mb3dlckNhc2UnKTtcblxuICAgIC8qKlxuICAgICAqIFBhZHMgYHN0cmluZ2Agb24gdGhlIGxlZnQgYW5kIHJpZ2h0IHNpZGVzIGlmIGl0J3Mgc2hvcnRlciB0aGFuIGBsZW5ndGhgLlxuICAgICAqIFBhZGRpbmcgY2hhcmFjdGVycyBhcmUgdHJ1bmNhdGVkIGlmIHRoZXkgY2FuJ3QgYmUgZXZlbmx5IGRpdmlkZWQgYnkgYGxlbmd0aGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gcGFkLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPTBdIFRoZSBwYWRkaW5nIGxlbmd0aC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPScgJ10gVGhlIHN0cmluZyB1c2VkIGFzIHBhZGRpbmcuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcGFkZGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5wYWQoJ2FiYycsIDgpO1xuICAgICAqIC8vID0+ICcgIGFiYyAgICdcbiAgICAgKlxuICAgICAqIF8ucGFkKCdhYmMnLCA4LCAnXy0nKTtcbiAgICAgKiAvLyA9PiAnXy1hYmNfLV8nXG4gICAgICpcbiAgICAgKiBfLnBhZCgnYWJjJywgMyk7XG4gICAgICogLy8gPT4gJ2FiYydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwYWQoc3RyaW5nLCBsZW5ndGgsIGNoYXJzKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgbGVuZ3RoID0gdG9JbnRlZ2VyKGxlbmd0aCk7XG5cbiAgICAgIHZhciBzdHJMZW5ndGggPSBsZW5ndGggPyBzdHJpbmdTaXplKHN0cmluZykgOiAwO1xuICAgICAgaWYgKCFsZW5ndGggfHwgc3RyTGVuZ3RoID49IGxlbmd0aCkge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgfVxuICAgICAgdmFyIG1pZCA9IChsZW5ndGggLSBzdHJMZW5ndGgpIC8gMjtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIGNyZWF0ZVBhZGRpbmcobmF0aXZlRmxvb3IobWlkKSwgY2hhcnMpICtcbiAgICAgICAgc3RyaW5nICtcbiAgICAgICAgY3JlYXRlUGFkZGluZyhuYXRpdmVDZWlsKG1pZCksIGNoYXJzKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQYWRzIGBzdHJpbmdgIG9uIHRoZSByaWdodCBzaWRlIGlmIGl0J3Mgc2hvcnRlciB0aGFuIGBsZW5ndGhgLiBQYWRkaW5nXG4gICAgICogY2hhcmFjdGVycyBhcmUgdHJ1bmNhdGVkIGlmIHRoZXkgZXhjZWVkIGBsZW5ndGhgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHBhZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD0wXSBUaGUgcGFkZGluZyBsZW5ndGguXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz0nICddIFRoZSBzdHJpbmcgdXNlZCBhcyBwYWRkaW5nLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHBhZGRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucGFkRW5kKCdhYmMnLCA2KTtcbiAgICAgKiAvLyA9PiAnYWJjICAgJ1xuICAgICAqXG4gICAgICogXy5wYWRFbmQoJ2FiYycsIDYsICdfLScpO1xuICAgICAqIC8vID0+ICdhYmNfLV8nXG4gICAgICpcbiAgICAgKiBfLnBhZEVuZCgnYWJjJywgMyk7XG4gICAgICogLy8gPT4gJ2FiYydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwYWRFbmQoc3RyaW5nLCBsZW5ndGgsIGNoYXJzKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgbGVuZ3RoID0gdG9JbnRlZ2VyKGxlbmd0aCk7XG5cbiAgICAgIHZhciBzdHJMZW5ndGggPSBsZW5ndGggPyBzdHJpbmdTaXplKHN0cmluZykgOiAwO1xuICAgICAgcmV0dXJuIChsZW5ndGggJiYgc3RyTGVuZ3RoIDwgbGVuZ3RoKVxuICAgICAgICA/IChzdHJpbmcgKyBjcmVhdGVQYWRkaW5nKGxlbmd0aCAtIHN0ckxlbmd0aCwgY2hhcnMpKVxuICAgICAgICA6IHN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQYWRzIGBzdHJpbmdgIG9uIHRoZSBsZWZ0IHNpZGUgaWYgaXQncyBzaG9ydGVyIHRoYW4gYGxlbmd0aGAuIFBhZGRpbmdcbiAgICAgKiBjaGFyYWN0ZXJzIGFyZSB0cnVuY2F0ZWQgaWYgdGhleSBleGNlZWQgYGxlbmd0aGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gcGFkLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPTBdIFRoZSBwYWRkaW5nIGxlbmd0aC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPScgJ10gVGhlIHN0cmluZyB1c2VkIGFzIHBhZGRpbmcuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcGFkZGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5wYWRTdGFydCgnYWJjJywgNik7XG4gICAgICogLy8gPT4gJyAgIGFiYydcbiAgICAgKlxuICAgICAqIF8ucGFkU3RhcnQoJ2FiYycsIDYsICdfLScpO1xuICAgICAqIC8vID0+ICdfLV9hYmMnXG4gICAgICpcbiAgICAgKiBfLnBhZFN0YXJ0KCdhYmMnLCAzKTtcbiAgICAgKiAvLyA9PiAnYWJjJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBhZFN0YXJ0KHN0cmluZywgbGVuZ3RoLCBjaGFycykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGxlbmd0aCA9IHRvSW50ZWdlcihsZW5ndGgpO1xuXG4gICAgICB2YXIgc3RyTGVuZ3RoID0gbGVuZ3RoID8gc3RyaW5nU2l6ZShzdHJpbmcpIDogMDtcbiAgICAgIHJldHVybiAobGVuZ3RoICYmIHN0ckxlbmd0aCA8IGxlbmd0aClcbiAgICAgICAgPyAoY3JlYXRlUGFkZGluZyhsZW5ndGggLSBzdHJMZW5ndGgsIGNoYXJzKSArIHN0cmluZylcbiAgICAgICAgOiBzdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG8gYW4gaW50ZWdlciBvZiB0aGUgc3BlY2lmaWVkIHJhZGl4LiBJZiBgcmFkaXhgIGlzXG4gICAgICogYHVuZGVmaW5lZGAgb3IgYDBgLCBhIGByYWRpeGAgb2YgYDEwYCBpcyB1c2VkIHVubGVzcyBgdmFsdWVgIGlzIGFcbiAgICAgKiBoZXhhZGVjaW1hbCwgaW4gd2hpY2ggY2FzZSBhIGByYWRpeGAgb2YgYDE2YCBpcyB1c2VkLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGFsaWducyB3aXRoIHRoZVxuICAgICAqIFtFUzUgaW1wbGVtZW50YXRpb25dKGh0dHBzOi8vZXM1LmdpdGh1Yi5pby8jeDE1LjEuMi4yKSBvZiBgcGFyc2VJbnRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMS4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcmFkaXg9MTBdIFRoZSByYWRpeCB0byBpbnRlcnByZXQgYHZhbHVlYCBieS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBpbnRlZ2VyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnBhcnNlSW50KCcwOCcpO1xuICAgICAqIC8vID0+IDhcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnNicsICcwOCcsICcxMCddLCBfLnBhcnNlSW50KTtcbiAgICAgKiAvLyA9PiBbNiwgOCwgMTBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcGFyc2VJbnQoc3RyaW5nLCByYWRpeCwgZ3VhcmQpIHtcbiAgICAgIGlmIChndWFyZCB8fCByYWRpeCA9PSBudWxsKSB7XG4gICAgICAgIHJhZGl4ID0gMDtcbiAgICAgIH0gZWxzZSBpZiAocmFkaXgpIHtcbiAgICAgICAgcmFkaXggPSArcmFkaXg7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmF0aXZlUGFyc2VJbnQodG9TdHJpbmcoc3RyaW5nKS5yZXBsYWNlKHJlVHJpbVN0YXJ0LCAnJyksIHJhZGl4IHx8IDApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlcGVhdHMgdGhlIGdpdmVuIHN0cmluZyBgbmAgdGltZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gcmVwZWF0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIHJlcGVhdCB0aGUgc3RyaW5nLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmVwZWF0ZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJlcGVhdCgnKicsIDMpO1xuICAgICAqIC8vID0+ICcqKionXG4gICAgICpcbiAgICAgKiBfLnJlcGVhdCgnYWJjJywgMik7XG4gICAgICogLy8gPT4gJ2FiY2FiYydcbiAgICAgKlxuICAgICAqIF8ucmVwZWF0KCdhYmMnLCAwKTtcbiAgICAgKiAvLyA9PiAnJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlcGVhdChzdHJpbmcsIG4sIGd1YXJkKSB7XG4gICAgICBpZiAoKGd1YXJkID8gaXNJdGVyYXRlZUNhbGwoc3RyaW5nLCBuLCBndWFyZCkgOiBuID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIG4gPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbiA9IHRvSW50ZWdlcihuKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlUmVwZWF0KHRvU3RyaW5nKHN0cmluZyksIG4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlcGxhY2VzIG1hdGNoZXMgZm9yIGBwYXR0ZXJuYCBpbiBgc3RyaW5nYCB3aXRoIGByZXBsYWNlbWVudGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYFN0cmluZyNyZXBsYWNlYF0oaHR0cHM6Ly9tZG4uaW8vU3RyaW5nL3JlcGxhY2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cHxzdHJpbmd9IHBhdHRlcm4gVGhlIHBhdHRlcm4gdG8gcmVwbGFjZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufHN0cmluZ30gcmVwbGFjZW1lbnQgVGhlIG1hdGNoIHJlcGxhY2VtZW50LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIG1vZGlmaWVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yZXBsYWNlKCdIaSBGcmVkJywgJ0ZyZWQnLCAnQmFybmV5Jyk7XG4gICAgICogLy8gPT4gJ0hpIEJhcm5leSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZXBsYWNlKCkge1xuICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgc3RyaW5nID0gdG9TdHJpbmcoYXJnc1swXSk7XG5cbiAgICAgIHJldHVybiBhcmdzLmxlbmd0aCA8IDMgPyBzdHJpbmcgOiBzdHJpbmcucmVwbGFjZShhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0b1xuICAgICAqIFtzbmFrZSBjYXNlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TbmFrZV9jYXNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHNuYWtlIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zbmFrZUNhc2UoJ0ZvbyBCYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vX2JhcidcbiAgICAgKlxuICAgICAqIF8uc25ha2VDYXNlKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vX2JhcidcbiAgICAgKlxuICAgICAqIF8uc25ha2VDYXNlKCctLUZPTy1CQVItLScpO1xuICAgICAqIC8vID0+ICdmb29fYmFyJ1xuICAgICAqL1xuICAgIHZhciBzbmFrZUNhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyAnXycgOiAnJykgKyB3b3JkLnRvTG93ZXJDYXNlKCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBTcGxpdHMgYHN0cmluZ2AgYnkgYHNlcGFyYXRvcmAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYFN0cmluZyNzcGxpdGBdKGh0dHBzOi8vbWRuLmlvL1N0cmluZy9zcGxpdCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gc3BsaXQuXG4gICAgICogQHBhcmFtIHtSZWdFeHB8c3RyaW5nfSBzZXBhcmF0b3IgVGhlIHNlcGFyYXRvciBwYXR0ZXJuIHRvIHNwbGl0IGJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbGltaXRdIFRoZSBsZW5ndGggdG8gdHJ1bmNhdGUgcmVzdWx0cyB0by5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHN0cmluZyBzZWdtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zcGxpdCgnYS1iLWMnLCAnLScsIDIpO1xuICAgICAqIC8vID0+IFsnYScsICdiJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzcGxpdChzdHJpbmcsIHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIGlmIChsaW1pdCAmJiB0eXBlb2YgbGltaXQgIT0gJ251bWJlcicgJiYgaXNJdGVyYXRlZUNhbGwoc3RyaW5nLCBzZXBhcmF0b3IsIGxpbWl0KSkge1xuICAgICAgICBzZXBhcmF0b3IgPSBsaW1pdCA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGxpbWl0ID0gbGltaXQgPT09IHVuZGVmaW5lZCA/IE1BWF9BUlJBWV9MRU5HVEggOiBsaW1pdCA+Pj4gMDtcbiAgICAgIGlmICghbGltaXQpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGlmIChzdHJpbmcgJiYgKFxuICAgICAgICAgICAgdHlwZW9mIHNlcGFyYXRvciA9PSAnc3RyaW5nJyB8fFxuICAgICAgICAgICAgKHNlcGFyYXRvciAhPSBudWxsICYmICFpc1JlZ0V4cChzZXBhcmF0b3IpKVxuICAgICAgICAgICkpIHtcbiAgICAgICAgc2VwYXJhdG9yID0gYmFzZVRvU3RyaW5nKHNlcGFyYXRvcik7XG4gICAgICAgIGlmICghc2VwYXJhdG9yICYmIGhhc1VuaWNvZGUoc3RyaW5nKSkge1xuICAgICAgICAgIHJldHVybiBjYXN0U2xpY2Uoc3RyaW5nVG9BcnJheShzdHJpbmcpLCAwLCBsaW1pdCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBzdHJpbmcuc3BsaXQoc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG9cbiAgICAgKiBbc3RhcnQgY2FzZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGV0dGVyX2Nhc2UjU3R5bGlzdGljX29yX3NwZWNpYWxpc2VkX3VzYWdlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjEuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHN0YXJ0IGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zdGFydENhc2UoJy0tZm9vLWJhci0tJyk7XG4gICAgICogLy8gPT4gJ0ZvbyBCYXInXG4gICAgICpcbiAgICAgKiBfLnN0YXJ0Q2FzZSgnZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ0ZvbyBCYXInXG4gICAgICpcbiAgICAgKiBfLnN0YXJ0Q2FzZSgnX19GT09fQkFSX18nKTtcbiAgICAgKiAvLyA9PiAnRk9PIEJBUidcbiAgICAgKi9cbiAgICB2YXIgc3RhcnRDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gJyAnIDogJycpICsgdXBwZXJGaXJzdCh3b3JkKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgc3RyaW5nYCBzdGFydHMgd2l0aCB0aGUgZ2l2ZW4gdGFyZ2V0IHN0cmluZy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbdGFyZ2V0XSBUaGUgc3RyaW5nIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtwb3NpdGlvbj0wXSBUaGUgcG9zaXRpb24gdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBzdHJpbmdgIHN0YXJ0cyB3aXRoIGB0YXJnZXRgLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc3RhcnRzV2l0aCgnYWJjJywgJ2EnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLnN0YXJ0c1dpdGgoJ2FiYycsICdiJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uc3RhcnRzV2l0aCgnYWJjJywgJ2InLCAxKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhcnRzV2l0aChzdHJpbmcsIHRhcmdldCwgcG9zaXRpb24pIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBwb3NpdGlvbiA9IHBvc2l0aW9uID09IG51bGxcbiAgICAgICAgPyAwXG4gICAgICAgIDogYmFzZUNsYW1wKHRvSW50ZWdlcihwb3NpdGlvbiksIDAsIHN0cmluZy5sZW5ndGgpO1xuXG4gICAgICB0YXJnZXQgPSBiYXNlVG9TdHJpbmcodGFyZ2V0KTtcbiAgICAgIHJldHVybiBzdHJpbmcuc2xpY2UocG9zaXRpb24sIHBvc2l0aW9uICsgdGFyZ2V0Lmxlbmd0aCkgPT0gdGFyZ2V0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjb21waWxlZCB0ZW1wbGF0ZSBmdW5jdGlvbiB0aGF0IGNhbiBpbnRlcnBvbGF0ZSBkYXRhIHByb3BlcnRpZXNcbiAgICAgKiBpbiBcImludGVycG9sYXRlXCIgZGVsaW1pdGVycywgSFRNTC1lc2NhcGUgaW50ZXJwb2xhdGVkIGRhdGEgcHJvcGVydGllcyBpblxuICAgICAqIFwiZXNjYXBlXCIgZGVsaW1pdGVycywgYW5kIGV4ZWN1dGUgSmF2YVNjcmlwdCBpbiBcImV2YWx1YXRlXCIgZGVsaW1pdGVycy4gRGF0YVxuICAgICAqIHByb3BlcnRpZXMgbWF5IGJlIGFjY2Vzc2VkIGFzIGZyZWUgdmFyaWFibGVzIGluIHRoZSB0ZW1wbGF0ZS4gSWYgYSBzZXR0aW5nXG4gICAgICogb2JqZWN0IGlzIGdpdmVuLCBpdCB0YWtlcyBwcmVjZWRlbmNlIG92ZXIgYF8udGVtcGxhdGVTZXR0aW5nc2AgdmFsdWVzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIEluIHRoZSBkZXZlbG9wbWVudCBidWlsZCBgXy50ZW1wbGF0ZWAgdXRpbGl6ZXNcbiAgICAgKiBbc291cmNlVVJMc10oaHR0cDovL3d3dy5odG1sNXJvY2tzLmNvbS9lbi90dXRvcmlhbHMvZGV2ZWxvcGVydG9vbHMvc291cmNlbWFwcy8jdG9jLXNvdXJjZXVybClcbiAgICAgKiBmb3IgZWFzaWVyIGRlYnVnZ2luZy5cbiAgICAgKlxuICAgICAqIEZvciBtb3JlIGluZm9ybWF0aW9uIG9uIHByZWNvbXBpbGluZyB0ZW1wbGF0ZXMgc2VlXG4gICAgICogW2xvZGFzaCdzIGN1c3RvbSBidWlsZHMgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9sb2Rhc2guY29tL2N1c3RvbS1idWlsZHMpLlxuICAgICAqXG4gICAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24gb24gQ2hyb21lIGV4dGVuc2lvbiBzYW5kYm94ZXMgc2VlXG4gICAgICogW0Nocm9tZSdzIGV4dGVuc2lvbnMgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kZXZlbG9wZXIuY2hyb21lLmNvbS9leHRlbnNpb25zL3NhbmRib3hpbmdFdmFsKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHRlbXBsYXRlIHN0cmluZy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cH0gW29wdGlvbnMuZXNjYXBlPV8udGVtcGxhdGVTZXR0aW5ncy5lc2NhcGVdXG4gICAgICogIFRoZSBIVE1MIFwiZXNjYXBlXCIgZGVsaW1pdGVyLlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfSBbb3B0aW9ucy5ldmFsdWF0ZT1fLnRlbXBsYXRlU2V0dGluZ3MuZXZhbHVhdGVdXG4gICAgICogIFRoZSBcImV2YWx1YXRlXCIgZGVsaW1pdGVyLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucy5pbXBvcnRzPV8udGVtcGxhdGVTZXR0aW5ncy5pbXBvcnRzXVxuICAgICAqICBBbiBvYmplY3QgdG8gaW1wb3J0IGludG8gdGhlIHRlbXBsYXRlIGFzIGZyZWUgdmFyaWFibGVzLlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfSBbb3B0aW9ucy5pbnRlcnBvbGF0ZT1fLnRlbXBsYXRlU2V0dGluZ3MuaW50ZXJwb2xhdGVdXG4gICAgICogIFRoZSBcImludGVycG9sYXRlXCIgZGVsaW1pdGVyLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5zb3VyY2VVUkw9J2xvZGFzaC50ZW1wbGF0ZVNvdXJjZXNbbl0nXVxuICAgICAqICBUaGUgc291cmNlVVJMIG9mIHRoZSBjb21waWxlZCB0ZW1wbGF0ZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMudmFyaWFibGU9J29iaiddXG4gICAgICogIFRoZSBkYXRhIG9iamVjdCB2YXJpYWJsZSBuYW1lLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBjb21waWxlZCB0ZW1wbGF0ZSBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBcImludGVycG9sYXRlXCIgZGVsaW1pdGVyIHRvIGNyZWF0ZSBhIGNvbXBpbGVkIHRlbXBsYXRlLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hlbGxvIDwlPSB1c2VyICU+IScpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3VzZXInOiAnZnJlZCcgfSk7XG4gICAgICogLy8gPT4gJ2hlbGxvIGZyZWQhJ1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBIVE1MIFwiZXNjYXBlXCIgZGVsaW1pdGVyIHRvIGVzY2FwZSBkYXRhIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCc8Yj48JS0gdmFsdWUgJT48L2I+Jyk7XG4gICAgICogY29tcGlsZWQoeyAndmFsdWUnOiAnPHNjcmlwdD4nIH0pO1xuICAgICAqIC8vID0+ICc8Yj4mbHQ7c2NyaXB0Jmd0OzwvYj4nXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIFwiZXZhbHVhdGVcIiBkZWxpbWl0ZXIgdG8gZXhlY3V0ZSBKYXZhU2NyaXB0IGFuZCBnZW5lcmF0ZSBIVE1MLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJzwlIF8uZm9yRWFjaCh1c2VycywgZnVuY3Rpb24odXNlcikgeyAlPjxsaT48JS0gdXNlciAlPjwvbGk+PCUgfSk7ICU+Jyk7XG4gICAgICogY29tcGlsZWQoeyAndXNlcnMnOiBbJ2ZyZWQnLCAnYmFybmV5J10gfSk7XG4gICAgICogLy8gPT4gJzxsaT5mcmVkPC9saT48bGk+YmFybmV5PC9saT4nXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIGludGVybmFsIGBwcmludGAgZnVuY3Rpb24gaW4gXCJldmFsdWF0ZVwiIGRlbGltaXRlcnMuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnPCUgcHJpbnQoXCJoZWxsbyBcIiArIHVzZXIpOyAlPiEnKTtcbiAgICAgKiBjb21waWxlZCh7ICd1c2VyJzogJ2Jhcm5leScgfSk7XG4gICAgICogLy8gPT4gJ2hlbGxvIGJhcm5leSEnXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIEVTIHRlbXBsYXRlIGxpdGVyYWwgZGVsaW1pdGVyIGFzIGFuIFwiaW50ZXJwb2xhdGVcIiBkZWxpbWl0ZXIuXG4gICAgICogLy8gRGlzYWJsZSBzdXBwb3J0IGJ5IHJlcGxhY2luZyB0aGUgXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlci5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCdoZWxsbyAkeyB1c2VyIH0hJyk7XG4gICAgICogY29tcGlsZWQoeyAndXNlcic6ICdwZWJibGVzJyB9KTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gcGViYmxlcyEnXG4gICAgICpcbiAgICAgKiAvLyBVc2UgYmFja3NsYXNoZXMgdG8gdHJlYXQgZGVsaW1pdGVycyBhcyBwbGFpbiB0ZXh0LlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJzwlPSBcIlxcXFw8JS0gdmFsdWUgJVxcXFw+XCIgJT4nKTtcbiAgICAgKiBjb21waWxlZCh7ICd2YWx1ZSc6ICdpZ25vcmVkJyB9KTtcbiAgICAgKiAvLyA9PiAnPCUtIHZhbHVlICU+J1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBgaW1wb3J0c2Agb3B0aW9uIHRvIGltcG9ydCBgalF1ZXJ5YCBhcyBganFgLlxuICAgICAqIHZhciB0ZXh0ID0gJzwlIGpxLmVhY2godXNlcnMsIGZ1bmN0aW9uKHVzZXIpIHsgJT48bGk+PCUtIHVzZXIgJT48L2xpPjwlIH0pOyAlPic7XG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSh0ZXh0LCB7ICdpbXBvcnRzJzogeyAnanEnOiBqUXVlcnkgfSB9KTtcbiAgICAgKiBjb21waWxlZCh7ICd1c2Vycyc6IFsnZnJlZCcsICdiYXJuZXknXSB9KTtcbiAgICAgKiAvLyA9PiAnPGxpPmZyZWQ8L2xpPjxsaT5iYXJuZXk8L2xpPidcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgYHNvdXJjZVVSTGAgb3B0aW9uIHRvIHNwZWNpZnkgYSBjdXN0b20gc291cmNlVVJMIGZvciB0aGUgdGVtcGxhdGUuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnaGVsbG8gPCU9IHVzZXIgJT4hJywgeyAnc291cmNlVVJMJzogJy9iYXNpYy9ncmVldGluZy5qc3QnIH0pO1xuICAgICAqIGNvbXBpbGVkKGRhdGEpO1xuICAgICAqIC8vID0+IEZpbmQgdGhlIHNvdXJjZSBvZiBcImdyZWV0aW5nLmpzdFwiIHVuZGVyIHRoZSBTb3VyY2VzIHRhYiBvciBSZXNvdXJjZXMgcGFuZWwgb2YgdGhlIHdlYiBpbnNwZWN0b3IuXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIGB2YXJpYWJsZWAgb3B0aW9uIHRvIGVuc3VyZSBhIHdpdGgtc3RhdGVtZW50IGlzbid0IHVzZWQgaW4gdGhlIGNvbXBpbGVkIHRlbXBsYXRlLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hpIDwlPSBkYXRhLnVzZXIgJT4hJywgeyAndmFyaWFibGUnOiAnZGF0YScgfSk7XG4gICAgICogY29tcGlsZWQuc291cmNlO1xuICAgICAqIC8vID0+IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgKiAvLyAgIHZhciBfX3QsIF9fcCA9ICcnO1xuICAgICAqIC8vICAgX19wICs9ICdoaSAnICsgKChfX3QgPSAoIGRhdGEudXNlciApKSA9PSBudWxsID8gJycgOiBfX3QpICsgJyEnO1xuICAgICAqIC8vICAgcmV0dXJuIF9fcDtcbiAgICAgKiAvLyB9XG4gICAgICpcbiAgICAgKiAvLyBVc2UgY3VzdG9tIHRlbXBsYXRlIGRlbGltaXRlcnMuXG4gICAgICogXy50ZW1wbGF0ZVNldHRpbmdzLmludGVycG9sYXRlID0gL3t7KFtcXHNcXFNdKz8pfX0vZztcbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCdoZWxsbyB7eyB1c2VyIH19IScpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3VzZXInOiAnbXVzdGFjaGUnIH0pO1xuICAgICAqIC8vID0+ICdoZWxsbyBtdXN0YWNoZSEnXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIGBzb3VyY2VgIHByb3BlcnR5IHRvIGlubGluZSBjb21waWxlZCB0ZW1wbGF0ZXMgZm9yIG1lYW5pbmdmdWxcbiAgICAgKiAvLyBsaW5lIG51bWJlcnMgaW4gZXJyb3IgbWVzc2FnZXMgYW5kIHN0YWNrIHRyYWNlcy5cbiAgICAgKiBmcy53cml0ZUZpbGVTeW5jKHBhdGguam9pbihwcm9jZXNzLmN3ZCgpLCAnanN0LmpzJyksICdcXFxuICAgICAqICAgdmFyIEpTVCA9IHtcXFxuICAgICAqICAgICBcIm1haW5cIjogJyArIF8udGVtcGxhdGUobWFpblRleHQpLnNvdXJjZSArICdcXFxuICAgICAqICAgfTtcXFxuICAgICAqICcpO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRlbXBsYXRlKHN0cmluZywgb3B0aW9ucywgZ3VhcmQpIHtcbiAgICAgIC8vIEJhc2VkIG9uIEpvaG4gUmVzaWcncyBgdG1wbGAgaW1wbGVtZW50YXRpb25cbiAgICAgIC8vIChodHRwOi8vZWpvaG4ub3JnL2Jsb2cvamF2YXNjcmlwdC1taWNyby10ZW1wbGF0aW5nLylcbiAgICAgIC8vIGFuZCBMYXVyYSBEb2t0b3JvdmEncyBkb1QuanMgKGh0dHBzOi8vZ2l0aHViLmNvbS9vbGFkby9kb1QpLlxuICAgICAgdmFyIHNldHRpbmdzID0gbG9kYXNoLnRlbXBsYXRlU2V0dGluZ3M7XG5cbiAgICAgIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChzdHJpbmcsIG9wdGlvbnMsIGd1YXJkKSkge1xuICAgICAgICBvcHRpb25zID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIG9wdGlvbnMgPSBhc3NpZ25JbldpdGgoe30sIG9wdGlvbnMsIHNldHRpbmdzLCBjdXN0b21EZWZhdWx0c0Fzc2lnbkluKTtcblxuICAgICAgdmFyIGltcG9ydHMgPSBhc3NpZ25JbldpdGgoe30sIG9wdGlvbnMuaW1wb3J0cywgc2V0dGluZ3MuaW1wb3J0cywgY3VzdG9tRGVmYXVsdHNBc3NpZ25JbiksXG4gICAgICAgICAgaW1wb3J0c0tleXMgPSBrZXlzKGltcG9ydHMpLFxuICAgICAgICAgIGltcG9ydHNWYWx1ZXMgPSBiYXNlVmFsdWVzKGltcG9ydHMsIGltcG9ydHNLZXlzKTtcblxuICAgICAgdmFyIGlzRXNjYXBpbmcsXG4gICAgICAgICAgaXNFdmFsdWF0aW5nLFxuICAgICAgICAgIGluZGV4ID0gMCxcbiAgICAgICAgICBpbnRlcnBvbGF0ZSA9IG9wdGlvbnMuaW50ZXJwb2xhdGUgfHwgcmVOb01hdGNoLFxuICAgICAgICAgIHNvdXJjZSA9IFwiX19wICs9ICdcIjtcblxuICAgICAgLy8gQ29tcGlsZSB0aGUgcmVnZXhwIHRvIG1hdGNoIGVhY2ggZGVsaW1pdGVyLlxuICAgICAgdmFyIHJlRGVsaW1pdGVycyA9IFJlZ0V4cChcbiAgICAgICAgKG9wdGlvbnMuZXNjYXBlIHx8IHJlTm9NYXRjaCkuc291cmNlICsgJ3wnICtcbiAgICAgICAgaW50ZXJwb2xhdGUuc291cmNlICsgJ3wnICtcbiAgICAgICAgKGludGVycG9sYXRlID09PSByZUludGVycG9sYXRlID8gcmVFc1RlbXBsYXRlIDogcmVOb01hdGNoKS5zb3VyY2UgKyAnfCcgK1xuICAgICAgICAob3B0aW9ucy5ldmFsdWF0ZSB8fCByZU5vTWF0Y2gpLnNvdXJjZSArICd8JCdcbiAgICAgICwgJ2cnKTtcblxuICAgICAgLy8gVXNlIGEgc291cmNlVVJMIGZvciBlYXNpZXIgZGVidWdnaW5nLlxuICAgICAgdmFyIHNvdXJjZVVSTCA9ICcvLyMgc291cmNlVVJMPScgK1xuICAgICAgICAoJ3NvdXJjZVVSTCcgaW4gb3B0aW9uc1xuICAgICAgICAgID8gb3B0aW9ucy5zb3VyY2VVUkxcbiAgICAgICAgICA6ICgnbG9kYXNoLnRlbXBsYXRlU291cmNlc1snICsgKCsrdGVtcGxhdGVDb3VudGVyKSArICddJylcbiAgICAgICAgKSArICdcXG4nO1xuXG4gICAgICBzdHJpbmcucmVwbGFjZShyZURlbGltaXRlcnMsIGZ1bmN0aW9uKG1hdGNoLCBlc2NhcGVWYWx1ZSwgaW50ZXJwb2xhdGVWYWx1ZSwgZXNUZW1wbGF0ZVZhbHVlLCBldmFsdWF0ZVZhbHVlLCBvZmZzZXQpIHtcbiAgICAgICAgaW50ZXJwb2xhdGVWYWx1ZSB8fCAoaW50ZXJwb2xhdGVWYWx1ZSA9IGVzVGVtcGxhdGVWYWx1ZSk7XG5cbiAgICAgICAgLy8gRXNjYXBlIGNoYXJhY3RlcnMgdGhhdCBjYW4ndCBiZSBpbmNsdWRlZCBpbiBzdHJpbmcgbGl0ZXJhbHMuXG4gICAgICAgIHNvdXJjZSArPSBzdHJpbmcuc2xpY2UoaW5kZXgsIG9mZnNldCkucmVwbGFjZShyZVVuZXNjYXBlZFN0cmluZywgZXNjYXBlU3RyaW5nQ2hhcik7XG5cbiAgICAgICAgLy8gUmVwbGFjZSBkZWxpbWl0ZXJzIHdpdGggc25pcHBldHMuXG4gICAgICAgIGlmIChlc2NhcGVWYWx1ZSkge1xuICAgICAgICAgIGlzRXNjYXBpbmcgPSB0cnVlO1xuICAgICAgICAgIHNvdXJjZSArPSBcIicgK1xcbl9fZShcIiArIGVzY2FwZVZhbHVlICsgXCIpICtcXG4nXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV2YWx1YXRlVmFsdWUpIHtcbiAgICAgICAgICBpc0V2YWx1YXRpbmcgPSB0cnVlO1xuICAgICAgICAgIHNvdXJjZSArPSBcIic7XFxuXCIgKyBldmFsdWF0ZVZhbHVlICsgXCI7XFxuX19wICs9ICdcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW50ZXJwb2xhdGVWYWx1ZSkge1xuICAgICAgICAgIHNvdXJjZSArPSBcIicgK1xcbigoX190ID0gKFwiICsgaW50ZXJwb2xhdGVWYWx1ZSArIFwiKSkgPT0gbnVsbCA/ICcnIDogX190KSArXFxuJ1wiO1xuICAgICAgICB9XG4gICAgICAgIGluZGV4ID0gb2Zmc2V0ICsgbWF0Y2gubGVuZ3RoO1xuXG4gICAgICAgIC8vIFRoZSBKUyBlbmdpbmUgZW1iZWRkZWQgaW4gQWRvYmUgcHJvZHVjdHMgbmVlZHMgYG1hdGNoYCByZXR1cm5lZCBpblxuICAgICAgICAvLyBvcmRlciB0byBwcm9kdWNlIHRoZSBjb3JyZWN0IGBvZmZzZXRgIHZhbHVlLlxuICAgICAgICByZXR1cm4gbWF0Y2g7XG4gICAgICB9KTtcblxuICAgICAgc291cmNlICs9IFwiJztcXG5cIjtcblxuICAgICAgLy8gSWYgYHZhcmlhYmxlYCBpcyBub3Qgc3BlY2lmaWVkIHdyYXAgYSB3aXRoLXN0YXRlbWVudCBhcm91bmQgdGhlIGdlbmVyYXRlZFxuICAgICAgLy8gY29kZSB0byBhZGQgdGhlIGRhdGEgb2JqZWN0IHRvIHRoZSB0b3Agb2YgdGhlIHNjb3BlIGNoYWluLlxuICAgICAgdmFyIHZhcmlhYmxlID0gb3B0aW9ucy52YXJpYWJsZTtcbiAgICAgIGlmICghdmFyaWFibGUpIHtcbiAgICAgICAgc291cmNlID0gJ3dpdGggKG9iaikge1xcbicgKyBzb3VyY2UgKyAnXFxufVxcbic7XG4gICAgICB9XG4gICAgICAvLyBDbGVhbnVwIGNvZGUgYnkgc3RyaXBwaW5nIGVtcHR5IHN0cmluZ3MuXG4gICAgICBzb3VyY2UgPSAoaXNFdmFsdWF0aW5nID8gc291cmNlLnJlcGxhY2UocmVFbXB0eVN0cmluZ0xlYWRpbmcsICcnKSA6IHNvdXJjZSlcbiAgICAgICAgLnJlcGxhY2UocmVFbXB0eVN0cmluZ01pZGRsZSwgJyQxJylcbiAgICAgICAgLnJlcGxhY2UocmVFbXB0eVN0cmluZ1RyYWlsaW5nLCAnJDE7Jyk7XG5cbiAgICAgIC8vIEZyYW1lIGNvZGUgYXMgdGhlIGZ1bmN0aW9uIGJvZHkuXG4gICAgICBzb3VyY2UgPSAnZnVuY3Rpb24oJyArICh2YXJpYWJsZSB8fCAnb2JqJykgKyAnKSB7XFxuJyArXG4gICAgICAgICh2YXJpYWJsZVxuICAgICAgICAgID8gJydcbiAgICAgICAgICA6ICdvYmogfHwgKG9iaiA9IHt9KTtcXG4nXG4gICAgICAgICkgK1xuICAgICAgICBcInZhciBfX3QsIF9fcCA9ICcnXCIgK1xuICAgICAgICAoaXNFc2NhcGluZ1xuICAgICAgICAgICA/ICcsIF9fZSA9IF8uZXNjYXBlJ1xuICAgICAgICAgICA6ICcnXG4gICAgICAgICkgK1xuICAgICAgICAoaXNFdmFsdWF0aW5nXG4gICAgICAgICAgPyAnLCBfX2ogPSBBcnJheS5wcm90b3R5cGUuam9pbjtcXG4nICtcbiAgICAgICAgICAgIFwiZnVuY3Rpb24gcHJpbnQoKSB7IF9fcCArPSBfX2ouY2FsbChhcmd1bWVudHMsICcnKSB9XFxuXCJcbiAgICAgICAgICA6ICc7XFxuJ1xuICAgICAgICApICtcbiAgICAgICAgc291cmNlICtcbiAgICAgICAgJ3JldHVybiBfX3BcXG59JztcblxuICAgICAgdmFyIHJlc3VsdCA9IGF0dGVtcHQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBGdW5jdGlvbihpbXBvcnRzS2V5cywgc291cmNlVVJMICsgJ3JldHVybiAnICsgc291cmNlKVxuICAgICAgICAgIC5hcHBseSh1bmRlZmluZWQsIGltcG9ydHNWYWx1ZXMpO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIFByb3ZpZGUgdGhlIGNvbXBpbGVkIGZ1bmN0aW9uJ3Mgc291cmNlIGJ5IGl0cyBgdG9TdHJpbmdgIG1ldGhvZCBvclxuICAgICAgLy8gdGhlIGBzb3VyY2VgIHByb3BlcnR5IGFzIGEgY29udmVuaWVuY2UgZm9yIGlubGluaW5nIGNvbXBpbGVkIHRlbXBsYXRlcy5cbiAgICAgIHJlc3VsdC5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICBpZiAoaXNFcnJvcihyZXN1bHQpKSB7XG4gICAgICAgIHRocm93IHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AsIGFzIGEgd2hvbGUsIHRvIGxvd2VyIGNhc2UganVzdCBsaWtlXG4gICAgICogW1N0cmluZyN0b0xvd2VyQ2FzZV0oaHR0cHM6Ly9tZG4uaW8vdG9Mb3dlckNhc2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgbG93ZXIgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvTG93ZXIoJy0tRm9vLUJhci0tJyk7XG4gICAgICogLy8gPT4gJy0tZm9vLWJhci0tJ1xuICAgICAqXG4gICAgICogXy50b0xvd2VyKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vYmFyJ1xuICAgICAqXG4gICAgICogXy50b0xvd2VyKCdfX0ZPT19CQVJfXycpO1xuICAgICAqIC8vID0+ICdfX2Zvb19iYXJfXydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0xvd2VyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdG9TdHJpbmcodmFsdWUpLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AsIGFzIGEgd2hvbGUsIHRvIHVwcGVyIGNhc2UganVzdCBsaWtlXG4gICAgICogW1N0cmluZyN0b1VwcGVyQ2FzZV0oaHR0cHM6Ly9tZG4uaW8vdG9VcHBlckNhc2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdXBwZXIgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvVXBwZXIoJy0tZm9vLWJhci0tJyk7XG4gICAgICogLy8gPT4gJy0tRk9PLUJBUi0tJ1xuICAgICAqXG4gICAgICogXy50b1VwcGVyKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnRk9PQkFSJ1xuICAgICAqXG4gICAgICogXy50b1VwcGVyKCdfX2Zvb19iYXJfXycpO1xuICAgICAqIC8vID0+ICdfX0ZPT19CQVJfXydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b1VwcGVyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdG9TdHJpbmcodmFsdWUpLnRvVXBwZXJDYXNlKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBsZWFkaW5nIGFuZCB0cmFpbGluZyB3aGl0ZXNwYWNlIG9yIHNwZWNpZmllZCBjaGFyYWN0ZXJzIGZyb20gYHN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdHJpbS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPXdoaXRlc3BhY2VdIFRoZSBjaGFyYWN0ZXJzIHRvIHRyaW0uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB0cmltbWVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50cmltKCcgIGFiYyAgJyk7XG4gICAgICogLy8gPT4gJ2FiYydcbiAgICAgKlxuICAgICAqIF8udHJpbSgnLV8tYWJjLV8tJywgJ18tJyk7XG4gICAgICogLy8gPT4gJ2FiYydcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnICBmb28gICcsICcgIGJhciAgJ10sIF8udHJpbSk7XG4gICAgICogLy8gPT4gWydmb28nLCAnYmFyJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cmltKHN0cmluZywgY2hhcnMsIGd1YXJkKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgaWYgKHN0cmluZyAmJiAoZ3VhcmQgfHwgY2hhcnMgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKHJlVHJpbSwgJycpO1xuICAgICAgfVxuICAgICAgaWYgKCFzdHJpbmcgfHwgIShjaGFycyA9IGJhc2VUb1N0cmluZyhjaGFycykpKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgICB9XG4gICAgICB2YXIgc3RyU3ltYm9scyA9IHN0cmluZ1RvQXJyYXkoc3RyaW5nKSxcbiAgICAgICAgICBjaHJTeW1ib2xzID0gc3RyaW5nVG9BcnJheShjaGFycyksXG4gICAgICAgICAgc3RhcnQgPSBjaGFyc1N0YXJ0SW5kZXgoc3RyU3ltYm9scywgY2hyU3ltYm9scyksXG4gICAgICAgICAgZW5kID0gY2hhcnNFbmRJbmRleChzdHJTeW1ib2xzLCBjaHJTeW1ib2xzKSArIDE7XG5cbiAgICAgIHJldHVybiBjYXN0U2xpY2Uoc3RyU3ltYm9scywgc3RhcnQsIGVuZCkuam9pbignJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyB0cmFpbGluZyB3aGl0ZXNwYWNlIG9yIHNwZWNpZmllZCBjaGFyYWN0ZXJzIGZyb20gYHN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdHJpbS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPXdoaXRlc3BhY2VdIFRoZSBjaGFyYWN0ZXJzIHRvIHRyaW0uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB0cmltbWVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50cmltRW5kKCcgIGFiYyAgJyk7XG4gICAgICogLy8gPT4gJyAgYWJjJ1xuICAgICAqXG4gICAgICogXy50cmltRW5kKCctXy1hYmMtXy0nLCAnXy0nKTtcbiAgICAgKiAvLyA9PiAnLV8tYWJjJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRyaW1FbmQoc3RyaW5nLCBjaGFycywgZ3VhcmQpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBpZiAoc3RyaW5nICYmIChndWFyZCB8fCBjaGFycyA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UocmVUcmltRW5kLCAnJyk7XG4gICAgICB9XG4gICAgICBpZiAoIXN0cmluZyB8fCAhKGNoYXJzID0gYmFzZVRvU3RyaW5nKGNoYXJzKSkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgIH1cbiAgICAgIHZhciBzdHJTeW1ib2xzID0gc3RyaW5nVG9BcnJheShzdHJpbmcpLFxuICAgICAgICAgIGVuZCA9IGNoYXJzRW5kSW5kZXgoc3RyU3ltYm9scywgc3RyaW5nVG9BcnJheShjaGFycykpICsgMTtcblxuICAgICAgcmV0dXJuIGNhc3RTbGljZShzdHJTeW1ib2xzLCAwLCBlbmQpLmpvaW4oJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgbGVhZGluZyB3aGl0ZXNwYWNlIG9yIHNwZWNpZmllZCBjaGFyYWN0ZXJzIGZyb20gYHN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdHJpbS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPXdoaXRlc3BhY2VdIFRoZSBjaGFyYWN0ZXJzIHRvIHRyaW0uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB0cmltbWVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50cmltU3RhcnQoJyAgYWJjICAnKTtcbiAgICAgKiAvLyA9PiAnYWJjICAnXG4gICAgICpcbiAgICAgKiBfLnRyaW1TdGFydCgnLV8tYWJjLV8tJywgJ18tJyk7XG4gICAgICogLy8gPT4gJ2FiYy1fLSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cmltU3RhcnQoc3RyaW5nLCBjaGFycywgZ3VhcmQpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBpZiAoc3RyaW5nICYmIChndWFyZCB8fCBjaGFycyA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UocmVUcmltU3RhcnQsICcnKTtcbiAgICAgIH1cbiAgICAgIGlmICghc3RyaW5nIHx8ICEoY2hhcnMgPSBiYXNlVG9TdHJpbmcoY2hhcnMpKSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgfVxuICAgICAgdmFyIHN0clN5bWJvbHMgPSBzdHJpbmdUb0FycmF5KHN0cmluZyksXG4gICAgICAgICAgc3RhcnQgPSBjaGFyc1N0YXJ0SW5kZXgoc3RyU3ltYm9scywgc3RyaW5nVG9BcnJheShjaGFycykpO1xuXG4gICAgICByZXR1cm4gY2FzdFNsaWNlKHN0clN5bWJvbHMsIHN0YXJ0KS5qb2luKCcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcnVuY2F0ZXMgYHN0cmluZ2AgaWYgaXQncyBsb25nZXIgdGhhbiB0aGUgZ2l2ZW4gbWF4aW11bSBzdHJpbmcgbGVuZ3RoLlxuICAgICAqIFRoZSBsYXN0IGNoYXJhY3RlcnMgb2YgdGhlIHRydW5jYXRlZCBzdHJpbmcgYXJlIHJlcGxhY2VkIHdpdGggdGhlIG9taXNzaW9uXG4gICAgICogc3RyaW5nIHdoaWNoIGRlZmF1bHRzIHRvIFwiLi4uXCIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdHJ1bmNhdGUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLmxlbmd0aD0zMF0gVGhlIG1heGltdW0gc3RyaW5nIGxlbmd0aC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMub21pc3Npb249Jy4uLiddIFRoZSBzdHJpbmcgdG8gaW5kaWNhdGUgdGV4dCBpcyBvbWl0dGVkLlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfHN0cmluZ30gW29wdGlvbnMuc2VwYXJhdG9yXSBUaGUgc2VwYXJhdG9yIHBhdHRlcm4gdG8gdHJ1bmNhdGUgdG8uXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdHJ1bmNhdGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50cnVuY2F0ZSgnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvcmlubycpO1xuICAgICAqIC8vID0+ICdoaS1kaWRkbHktaG8gdGhlcmUsIG5laWdoYm8uLi4nXG4gICAgICpcbiAgICAgKiBfLnRydW5jYXRlKCdoaS1kaWRkbHktaG8gdGhlcmUsIG5laWdoYm9yaW5vJywge1xuICAgICAqICAgJ2xlbmd0aCc6IDI0LFxuICAgICAqICAgJ3NlcGFyYXRvcic6ICcgJ1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+ICdoaS1kaWRkbHktaG8gdGhlcmUsLi4uJ1xuICAgICAqXG4gICAgICogXy50cnVuY2F0ZSgnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvcmlubycsIHtcbiAgICAgKiAgICdsZW5ndGgnOiAyNCxcbiAgICAgKiAgICdzZXBhcmF0b3InOiAvLD8gKy9cbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiAnaGktZGlkZGx5LWhvIHRoZXJlLi4uJ1xuICAgICAqXG4gICAgICogXy50cnVuY2F0ZSgnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvcmlubycsIHtcbiAgICAgKiAgICdvbWlzc2lvbic6ICcgWy4uLl0nXG4gICAgICogfSk7XG4gICAgICogLy8gPT4gJ2hpLWRpZGRseS1obyB0aGVyZSwgbmVpZyBbLi4uXSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cnVuY2F0ZShzdHJpbmcsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBERUZBVUxUX1RSVU5DX0xFTkdUSCxcbiAgICAgICAgICBvbWlzc2lvbiA9IERFRkFVTFRfVFJVTkNfT01JU1NJT047XG5cbiAgICAgIGlmIChpc09iamVjdChvcHRpb25zKSkge1xuICAgICAgICB2YXIgc2VwYXJhdG9yID0gJ3NlcGFyYXRvcicgaW4gb3B0aW9ucyA/IG9wdGlvbnMuc2VwYXJhdG9yIDogc2VwYXJhdG9yO1xuICAgICAgICBsZW5ndGggPSAnbGVuZ3RoJyBpbiBvcHRpb25zID8gdG9JbnRlZ2VyKG9wdGlvbnMubGVuZ3RoKSA6IGxlbmd0aDtcbiAgICAgICAgb21pc3Npb24gPSAnb21pc3Npb24nIGluIG9wdGlvbnMgPyBiYXNlVG9TdHJpbmcob3B0aW9ucy5vbWlzc2lvbikgOiBvbWlzc2lvbjtcbiAgICAgIH1cbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG5cbiAgICAgIHZhciBzdHJMZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuICAgICAgaWYgKGhhc1VuaWNvZGUoc3RyaW5nKSkge1xuICAgICAgICB2YXIgc3RyU3ltYm9scyA9IHN0cmluZ1RvQXJyYXkoc3RyaW5nKTtcbiAgICAgICAgc3RyTGVuZ3RoID0gc3RyU3ltYm9scy5sZW5ndGg7XG4gICAgICB9XG4gICAgICBpZiAobGVuZ3RoID49IHN0ckxlbmd0aCkge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgfVxuICAgICAgdmFyIGVuZCA9IGxlbmd0aCAtIHN0cmluZ1NpemUob21pc3Npb24pO1xuICAgICAgaWYgKGVuZCA8IDEpIHtcbiAgICAgICAgcmV0dXJuIG9taXNzaW9uO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IHN0clN5bWJvbHNcbiAgICAgICAgPyBjYXN0U2xpY2Uoc3RyU3ltYm9scywgMCwgZW5kKS5qb2luKCcnKVxuICAgICAgICA6IHN0cmluZy5zbGljZSgwLCBlbmQpO1xuXG4gICAgICBpZiAoc2VwYXJhdG9yID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdCArIG9taXNzaW9uO1xuICAgICAgfVxuICAgICAgaWYgKHN0clN5bWJvbHMpIHtcbiAgICAgICAgZW5kICs9IChyZXN1bHQubGVuZ3RoIC0gZW5kKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1JlZ0V4cChzZXBhcmF0b3IpKSB7XG4gICAgICAgIGlmIChzdHJpbmcuc2xpY2UoZW5kKS5zZWFyY2goc2VwYXJhdG9yKSkge1xuICAgICAgICAgIHZhciBtYXRjaCxcbiAgICAgICAgICAgICAgc3Vic3RyaW5nID0gcmVzdWx0O1xuXG4gICAgICAgICAgaWYgKCFzZXBhcmF0b3IuZ2xvYmFsKSB7XG4gICAgICAgICAgICBzZXBhcmF0b3IgPSBSZWdFeHAoc2VwYXJhdG9yLnNvdXJjZSwgdG9TdHJpbmcocmVGbGFncy5leGVjKHNlcGFyYXRvcikpICsgJ2cnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc2VwYXJhdG9yLmxhc3RJbmRleCA9IDA7XG4gICAgICAgICAgd2hpbGUgKChtYXRjaCA9IHNlcGFyYXRvci5leGVjKHN1YnN0cmluZykpKSB7XG4gICAgICAgICAgICB2YXIgbmV3RW5kID0gbWF0Y2guaW5kZXg7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5zbGljZSgwLCBuZXdFbmQgPT09IHVuZGVmaW5lZCA/IGVuZCA6IG5ld0VuZCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoc3RyaW5nLmluZGV4T2YoYmFzZVRvU3RyaW5nKHNlcGFyYXRvciksIGVuZCkgIT0gZW5kKSB7XG4gICAgICAgIHZhciBpbmRleCA9IHJlc3VsdC5sYXN0SW5kZXhPZihzZXBhcmF0b3IpO1xuICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5zbGljZSgwLCBpbmRleCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQgKyBvbWlzc2lvbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgaW52ZXJzZSBvZiBgXy5lc2NhcGVgOyB0aGlzIG1ldGhvZCBjb252ZXJ0cyB0aGUgSFRNTCBlbnRpdGllc1xuICAgICAqIGAmYW1wO2AsIGAmbHQ7YCwgYCZndDtgLCBgJnF1b3Q7YCwgYW5kIGAmIzM5O2AgaW4gYHN0cmluZ2AgdG9cbiAgICAgKiB0aGVpciBjb3JyZXNwb25kaW5nIGNoYXJhY3RlcnMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm8gb3RoZXIgSFRNTCBlbnRpdGllcyBhcmUgdW5lc2NhcGVkLiBUbyB1bmVzY2FwZSBhZGRpdGlvbmFsXG4gICAgICogSFRNTCBlbnRpdGllcyB1c2UgYSB0aGlyZC1wYXJ0eSBsaWJyYXJ5IGxpa2UgW19oZV9dKGh0dHBzOi8vbXRocy5iZS9oZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC42LjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdW5lc2NhcGUuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdW5lc2NhcGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51bmVzY2FwZSgnZnJlZCwgYmFybmV5LCAmYW1wOyBwZWJibGVzJyk7XG4gICAgICogLy8gPT4gJ2ZyZWQsIGJhcm5leSwgJiBwZWJibGVzJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuZXNjYXBlKHN0cmluZykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHJldHVybiAoc3RyaW5nICYmIHJlSGFzRXNjYXBlZEh0bWwudGVzdChzdHJpbmcpKVxuICAgICAgICA/IHN0cmluZy5yZXBsYWNlKHJlRXNjYXBlZEh0bWwsIHVuZXNjYXBlSHRtbENoYXIpXG4gICAgICAgIDogc3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgLCBhcyBzcGFjZSBzZXBhcmF0ZWQgd29yZHMsIHRvIHVwcGVyIGNhc2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB1cHBlciBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udXBwZXJDYXNlKCctLWZvby1iYXInKTtcbiAgICAgKiAvLyA9PiAnRk9PIEJBUidcbiAgICAgKlxuICAgICAqIF8udXBwZXJDYXNlKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnRk9PIEJBUidcbiAgICAgKlxuICAgICAqIF8udXBwZXJDYXNlKCdfX2Zvb19iYXJfXycpO1xuICAgICAqIC8vID0+ICdGT08gQkFSJ1xuICAgICAqL1xuICAgIHZhciB1cHBlckNhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyAnICcgOiAnJykgKyB3b3JkLnRvVXBwZXJDYXNlKCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyB0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIGBzdHJpbmdgIHRvIHVwcGVyIGNhc2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVwcGVyRmlyc3QoJ2ZyZWQnKTtcbiAgICAgKiAvLyA9PiAnRnJlZCdcbiAgICAgKlxuICAgICAqIF8udXBwZXJGaXJzdCgnRlJFRCcpO1xuICAgICAqIC8vID0+ICdGUkVEJ1xuICAgICAqL1xuICAgIHZhciB1cHBlckZpcnN0ID0gY3JlYXRlQ2FzZUZpcnN0KCd0b1VwcGVyQ2FzZScpO1xuXG4gICAgLyoqXG4gICAgICogU3BsaXRzIGBzdHJpbmdgIGludG8gYW4gYXJyYXkgb2YgaXRzIHdvcmRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtSZWdFeHB8c3RyaW5nfSBbcGF0dGVybl0gVGhlIHBhdHRlcm4gdG8gbWF0Y2ggd29yZHMuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHdvcmRzIG9mIGBzdHJpbmdgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLndvcmRzKCdmcmVkLCBiYXJuZXksICYgcGViYmxlcycpO1xuICAgICAqIC8vID0+IFsnZnJlZCcsICdiYXJuZXknLCAncGViYmxlcyddXG4gICAgICpcbiAgICAgKiBfLndvcmRzKCdmcmVkLCBiYXJuZXksICYgcGViYmxlcycsIC9bXiwgXSsvZyk7XG4gICAgICogLy8gPT4gWydmcmVkJywgJ2Jhcm5leScsICcmJywgJ3BlYmJsZXMnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdvcmRzKHN0cmluZywgcGF0dGVybiwgZ3VhcmQpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBwYXR0ZXJuID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBwYXR0ZXJuO1xuXG4gICAgICBpZiAocGF0dGVybiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBoYXNVbmljb2RlV29yZChzdHJpbmcpID8gdW5pY29kZVdvcmRzKHN0cmluZykgOiBhc2NpaVdvcmRzKHN0cmluZyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RyaW5nLm1hdGNoKHBhdHRlcm4pIHx8IFtdO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIEF0dGVtcHRzIHRvIGludm9rZSBgZnVuY2AsIHJldHVybmluZyBlaXRoZXIgdGhlIHJlc3VsdCBvciB0aGUgY2F1Z2h0IGVycm9yXG4gICAgICogb2JqZWN0LiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgYXJlIHByb3ZpZGVkIHRvIGBmdW5jYCB3aGVuIGl0J3MgaW52b2tlZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXR0ZW1wdC5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSBgZnVuY2Agd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYGZ1bmNgIHJlc3VsdCBvciBlcnJvciBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIC8vIEF2b2lkIHRocm93aW5nIGVycm9ycyBmb3IgaW52YWxpZCBzZWxlY3RvcnMuXG4gICAgICogdmFyIGVsZW1lbnRzID0gXy5hdHRlbXB0KGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gICAgICogICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG4gICAgICogfSwgJz5fPicpO1xuICAgICAqXG4gICAgICogaWYgKF8uaXNFcnJvcihlbGVtZW50cykpIHtcbiAgICAgKiAgIGVsZW1lbnRzID0gW107XG4gICAgICogfVxuICAgICAqL1xuICAgIHZhciBhdHRlbXB0ID0gYmFzZVJlc3QoZnVuY3Rpb24oZnVuYywgYXJncykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGFwcGx5KGZ1bmMsIHVuZGVmaW5lZCwgYXJncyk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBpc0Vycm9yKGUpID8gZSA6IG5ldyBFcnJvcihlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIEJpbmRzIG1ldGhvZHMgb2YgYW4gb2JqZWN0IHRvIHRoZSBvYmplY3QgaXRzZWxmLCBvdmVyd3JpdGluZyB0aGUgZXhpc3RpbmdcbiAgICAgKiBtZXRob2QuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCIgcHJvcGVydHkgb2YgYm91bmQgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gYmluZCBhbmQgYXNzaWduIHRoZSBib3VuZCBtZXRob2RzIHRvLlxuICAgICAqIEBwYXJhbSB7Li4uKHN0cmluZ3xzdHJpbmdbXSl9IG1ldGhvZE5hbWVzIFRoZSBvYmplY3QgbWV0aG9kIG5hbWVzIHRvIGJpbmQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHZpZXcgPSB7XG4gICAgICogICAnbGFiZWwnOiAnZG9jcycsXG4gICAgICogICAnY2xpY2snOiBmdW5jdGlvbigpIHtcbiAgICAgKiAgICAgY29uc29sZS5sb2coJ2NsaWNrZWQgJyArIHRoaXMubGFiZWwpO1xuICAgICAqICAgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBfLmJpbmRBbGwodmlldywgWydjbGljayddKTtcbiAgICAgKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgdmlldy5jbGljayk7XG4gICAgICogLy8gPT4gTG9ncyAnY2xpY2tlZCBkb2NzJyB3aGVuIGNsaWNrZWQuXG4gICAgICovXG4gICAgdmFyIGJpbmRBbGwgPSBmbGF0UmVzdChmdW5jdGlvbihvYmplY3QsIG1ldGhvZE5hbWVzKSB7XG4gICAgICBhcnJheUVhY2gobWV0aG9kTmFtZXMsIGZ1bmN0aW9uKGtleSkge1xuICAgICAgICBrZXkgPSB0b0tleShrZXkpO1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIGJpbmQob2JqZWN0W2tleV0sIG9iamVjdCkpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaXRlcmF0ZXMgb3ZlciBgcGFpcnNgIGFuZCBpbnZva2VzIHRoZSBjb3JyZXNwb25kaW5nXG4gICAgICogZnVuY3Rpb24gb2YgdGhlIGZpcnN0IHByZWRpY2F0ZSB0byByZXR1cm4gdHJ1dGh5LiBUaGUgcHJlZGljYXRlLWZ1bmN0aW9uXG4gICAgICogcGFpcnMgYXJlIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgYW5kIGFyZ3VtZW50cyBvZiB0aGUgY3JlYXRlZFxuICAgICAqIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYWlycyBUaGUgcHJlZGljYXRlLWZ1bmN0aW9uIHBhaXJzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNvbXBvc2l0ZSBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLmNvbmQoW1xuICAgICAqICAgW18ubWF0Y2hlcyh7ICdhJzogMSB9KSwgICAgICAgICAgIF8uY29uc3RhbnQoJ21hdGNoZXMgQScpXSxcbiAgICAgKiAgIFtfLmNvbmZvcm1zKHsgJ2InOiBfLmlzTnVtYmVyIH0pLCBfLmNvbnN0YW50KCdtYXRjaGVzIEInKV0sXG4gICAgICogICBbXy5zdHViVHJ1ZSwgICAgICAgICAgICAgICAgICAgICAgXy5jb25zdGFudCgnbm8gbWF0Y2gnKV1cbiAgICAgKiBdKTtcbiAgICAgKlxuICAgICAqIGZ1bmMoeyAnYSc6IDEsICdiJzogMiB9KTtcbiAgICAgKiAvLyA9PiAnbWF0Y2hlcyBBJ1xuICAgICAqXG4gICAgICogZnVuYyh7ICdhJzogMCwgJ2InOiAxIH0pO1xuICAgICAqIC8vID0+ICdtYXRjaGVzIEInXG4gICAgICpcbiAgICAgKiBmdW5jKHsgJ2EnOiAnMScsICdiJzogJzInIH0pO1xuICAgICAqIC8vID0+ICdubyBtYXRjaCdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb25kKHBhaXJzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gcGFpcnMgPT0gbnVsbCA/IDAgOiBwYWlycy5sZW5ndGgsXG4gICAgICAgICAgdG9JdGVyYXRlZSA9IGdldEl0ZXJhdGVlKCk7XG5cbiAgICAgIHBhaXJzID0gIWxlbmd0aCA/IFtdIDogYXJyYXlNYXAocGFpcnMsIGZ1bmN0aW9uKHBhaXIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBwYWlyWzFdICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFt0b0l0ZXJhdGVlKHBhaXJbMF0pLCBwYWlyWzFdXTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgICB2YXIgaW5kZXggPSAtMTtcbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICB2YXIgcGFpciA9IHBhaXJzW2luZGV4XTtcbiAgICAgICAgICBpZiAoYXBwbHkocGFpclswXSwgdGhpcywgYXJncykpIHtcbiAgICAgICAgICAgIHJldHVybiBhcHBseShwYWlyWzFdLCB0aGlzLCBhcmdzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgdGhlIHByZWRpY2F0ZSBwcm9wZXJ0aWVzIG9mIGBzb3VyY2VgIHdpdGhcbiAgICAgKiB0aGUgY29ycmVzcG9uZGluZyBwcm9wZXJ0eSB2YWx1ZXMgb2YgYSBnaXZlbiBvYmplY3QsIHJldHVybmluZyBgdHJ1ZWAgaWZcbiAgICAgKiBhbGwgcHJlZGljYXRlcyByZXR1cm4gdHJ1dGh5LCBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhlIGNyZWF0ZWQgZnVuY3Rpb24gaXMgZXF1aXZhbGVudCB0byBgXy5jb25mb3Jtc1RvYCB3aXRoXG4gICAgICogYHNvdXJjZWAgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSBwcmVkaWNhdGVzIHRvIGNvbmZvcm0gdG8uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbXG4gICAgICogICB7ICdhJzogMiwgJ2InOiAxIH0sXG4gICAgICogICB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maWx0ZXIob2JqZWN0cywgXy5jb25mb3Jtcyh7ICdiJzogZnVuY3Rpb24obikgeyByZXR1cm4gbiA+IDE7IH0gfSkpO1xuICAgICAqIC8vID0+IFt7ICdhJzogMSwgJ2InOiAyIH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29uZm9ybXMoc291cmNlKSB7XG4gICAgICByZXR1cm4gYmFzZUNvbmZvcm1zKGJhc2VDbG9uZShzb3VyY2UsIENMT05FX0RFRVBfRkxBRykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjQuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcmV0dXJuIGZyb20gdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb25zdGFudCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBfLnRpbWVzKDIsIF8uY29uc3RhbnQoeyAnYSc6IDEgfSkpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob2JqZWN0cyk7XG4gICAgICogLy8gPT4gW3sgJ2EnOiAxIH0sIHsgJ2EnOiAxIH1dXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3RzWzBdID09PSBvYmplY3RzWzFdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29uc3RhbnQodmFsdWUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgYHZhbHVlYCB0byBkZXRlcm1pbmUgd2hldGhlciBhIGRlZmF1bHQgdmFsdWUgc2hvdWxkIGJlIHJldHVybmVkIGluXG4gICAgICogaXRzIHBsYWNlLiBUaGUgYGRlZmF1bHRWYWx1ZWAgaXMgcmV0dXJuZWQgaWYgYHZhbHVlYCBpcyBgTmFOYCwgYG51bGxgLFxuICAgICAqIG9yIGB1bmRlZmluZWRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTQuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHsqfSBkZWZhdWx0VmFsdWUgVGhlIGRlZmF1bHQgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlZmF1bHRUbygxLCAxMCk7XG4gICAgICogLy8gPT4gMVxuICAgICAqXG4gICAgICogXy5kZWZhdWx0VG8odW5kZWZpbmVkLCAxMCk7XG4gICAgICogLy8gPT4gMTBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkZWZhdWx0VG8odmFsdWUsIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgcmV0dXJuICh2YWx1ZSA9PSBudWxsIHx8IHZhbHVlICE9PSB2YWx1ZSkgPyBkZWZhdWx0VmFsdWUgOiB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSByZXN1bHQgb2YgaW52b2tpbmcgdGhlIGdpdmVuIGZ1bmN0aW9uc1xuICAgICAqIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZSBjcmVhdGVkIGZ1bmN0aW9uLCB3aGVyZSBlYWNoIHN1Y2Nlc3NpdmVcbiAgICAgKiBpbnZvY2F0aW9uIGlzIHN1cHBsaWVkIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIHByZXZpb3VzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW2Z1bmNzXSBUaGUgZnVuY3Rpb25zIHRvIGludm9rZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb21wb3NpdGUgZnVuY3Rpb24uXG4gICAgICogQHNlZSBfLmZsb3dSaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBhZGRTcXVhcmUgPSBfLmZsb3coW18uYWRkLCBzcXVhcmVdKTtcbiAgICAgKiBhZGRTcXVhcmUoMSwgMik7XG4gICAgICogLy8gPT4gOVxuICAgICAqL1xuICAgIHZhciBmbG93ID0gY3JlYXRlRmxvdygpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mbG93YCBleGNlcHQgdGhhdCBpdCBjcmVhdGVzIGEgZnVuY3Rpb24gdGhhdFxuICAgICAqIGludm9rZXMgdGhlIGdpdmVuIGZ1bmN0aW9ucyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Li4uKEZ1bmN0aW9ufEZ1bmN0aW9uW10pfSBbZnVuY3NdIFRoZSBmdW5jdGlvbnMgdG8gaW52b2tlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNvbXBvc2l0ZSBmdW5jdGlvbi5cbiAgICAgKiBAc2VlIF8uZmxvd1xuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBhZGRTcXVhcmUgPSBfLmZsb3dSaWdodChbc3F1YXJlLCBfLmFkZF0pO1xuICAgICAqIGFkZFNxdWFyZSgxLCAyKTtcbiAgICAgKiAvLyA9PiA5XG4gICAgICovXG4gICAgdmFyIGZsb3dSaWdodCA9IGNyZWF0ZUZsb3codHJ1ZSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIHRoZSBmaXJzdCBhcmd1bWVudCBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBBbnkgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgYHZhbHVlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhfLmlkZW50aXR5KG9iamVjdCkgPT09IG9iamVjdCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlkZW50aXR5KHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCB0aGUgYXJndW1lbnRzIG9mIHRoZSBjcmVhdGVkXG4gICAgICogZnVuY3Rpb24uIElmIGBmdW5jYCBpcyBhIHByb3BlcnR5IG5hbWUsIHRoZSBjcmVhdGVkIGZ1bmN0aW9uIHJldHVybnMgdGhlXG4gICAgICogcHJvcGVydHkgdmFsdWUgZm9yIGEgZ2l2ZW4gZWxlbWVudC4gSWYgYGZ1bmNgIGlzIGFuIGFycmF5IG9yIG9iamVjdCwgdGhlXG4gICAgICogY3JlYXRlZCBmdW5jdGlvbiByZXR1cm5zIGB0cnVlYCBmb3IgZWxlbWVudHMgdGhhdCBjb250YWluIHRoZSBlcXVpdmFsZW50XG4gICAgICogc291cmNlIHByb3BlcnRpZXMsIG90aGVyd2lzZSBpdCByZXR1cm5zIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Kn0gW2Z1bmM9Xy5pZGVudGl0eV0gVGhlIHZhbHVlIHRvIGNvbnZlcnQgdG8gYSBjYWxsYmFjay5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGNhbGxiYWNrLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmlsdGVyKHVzZXJzLCBfLml0ZXJhdGVlKHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IHRydWUgfSkpO1xuICAgICAqIC8vID0+IFt7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfV1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgXy5pdGVyYXRlZShbJ3VzZXInLCAnZnJlZCddKSk7XG4gICAgICogLy8gPT4gW3sgJ3VzZXInOiAnZnJlZCcsICdhZ2UnOiA0MCB9XVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5tYXAodXNlcnMsIF8uaXRlcmF0ZWUoJ3VzZXInKSk7XG4gICAgICogLy8gPT4gWydiYXJuZXknLCAnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBDcmVhdGUgY3VzdG9tIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICogXy5pdGVyYXRlZSA9IF8ud3JhcChfLml0ZXJhdGVlLCBmdW5jdGlvbihpdGVyYXRlZSwgZnVuYykge1xuICAgICAqICAgcmV0dXJuICFfLmlzUmVnRXhwKGZ1bmMpID8gaXRlcmF0ZWUoZnVuYykgOiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgKiAgICAgcmV0dXJuIGZ1bmMudGVzdChzdHJpbmcpO1xuICAgICAqICAgfTtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIF8uZmlsdGVyKFsnYWJjJywgJ2RlZiddLCAvZWYvKTtcbiAgICAgKiAvLyA9PiBbJ2RlZiddXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXRlcmF0ZWUoZnVuYykge1xuICAgICAgcmV0dXJuIGJhc2VJdGVyYXRlZSh0eXBlb2YgZnVuYyA9PSAnZnVuY3Rpb24nID8gZnVuYyA6IGJhc2VDbG9uZShmdW5jLCBDTE9ORV9ERUVQX0ZMQUcpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwZXJmb3JtcyBhIHBhcnRpYWwgZGVlcCBjb21wYXJpc29uIGJldHdlZW4gYSBnaXZlblxuICAgICAqIG9iamVjdCBhbmQgYHNvdXJjZWAsIHJldHVybmluZyBgdHJ1ZWAgaWYgdGhlIGdpdmVuIG9iamVjdCBoYXMgZXF1aXZhbGVudFxuICAgICAqIHByb3BlcnR5IHZhbHVlcywgZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoZSBjcmVhdGVkIGZ1bmN0aW9uIGlzIGVxdWl2YWxlbnQgdG8gYF8uaXNNYXRjaGAgd2l0aCBgc291cmNlYFxuICAgICAqIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqXG4gICAgICogUGFydGlhbCBjb21wYXJpc29ucyB3aWxsIG1hdGNoIGVtcHR5IGFycmF5IGFuZCBlbXB0eSBvYmplY3QgYHNvdXJjZWBcbiAgICAgKiB2YWx1ZXMgYWdhaW5zdCBhbnkgYXJyYXkgb3Igb2JqZWN0IHZhbHVlLCByZXNwZWN0aXZlbHkuIFNlZSBgXy5pc0VxdWFsYFxuICAgICAqIGZvciBhIGxpc3Qgb2Ygc3VwcG9ydGVkIHZhbHVlIGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzIH0sXG4gICAgICogICB7ICdhJzogNCwgJ2InOiA1LCAnYyc6IDYgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbHRlcihvYmplY3RzLCBfLm1hdGNoZXMoeyAnYSc6IDQsICdjJzogNiB9KSk7XG4gICAgICogLy8gPT4gW3sgJ2EnOiA0LCAnYic6IDUsICdjJzogNiB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hdGNoZXMoc291cmNlKSB7XG4gICAgICByZXR1cm4gYmFzZU1hdGNoZXMoYmFzZUNsb25lKHNvdXJjZSwgQ0xPTkVfREVFUF9GTEFHKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcGVyZm9ybXMgYSBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbiBiZXR3ZWVuIHRoZVxuICAgICAqIHZhbHVlIGF0IGBwYXRoYCBvZiBhIGdpdmVuIG9iamVjdCB0byBgc3JjVmFsdWVgLCByZXR1cm5pbmcgYHRydWVgIGlmIHRoZVxuICAgICAqIG9iamVjdCB2YWx1ZSBpcyBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogUGFydGlhbCBjb21wYXJpc29ucyB3aWxsIG1hdGNoIGVtcHR5IGFycmF5IGFuZCBlbXB0eSBvYmplY3RcbiAgICAgKiBgc3JjVmFsdWVgIHZhbHVlcyBhZ2FpbnN0IGFueSBhcnJheSBvciBvYmplY3QgdmFsdWUsIHJlc3BlY3RpdmVseS4gU2VlXG4gICAgICogYF8uaXNFcXVhbGAgZm9yIGEgbGlzdCBvZiBzdXBwb3J0ZWQgdmFsdWUgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgdmFsdWUgdG8gbWF0Y2guXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbXG4gICAgICogICB7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDMgfSxcbiAgICAgKiAgIHsgJ2EnOiA0LCAnYic6IDUsICdjJzogNiB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZmluZChvYmplY3RzLCBfLm1hdGNoZXNQcm9wZXJ0eSgnYScsIDQpKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogNCwgJ2InOiA1LCAnYyc6IDYgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hdGNoZXNQcm9wZXJ0eShwYXRoLCBzcmNWYWx1ZSkge1xuICAgICAgcmV0dXJuIGJhc2VNYXRjaGVzUHJvcGVydHkocGF0aCwgYmFzZUNsb25lKHNyY1ZhbHVlLCBDTE9ORV9ERUVQX0ZMQUcpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIHRoZSBtZXRob2QgYXQgYHBhdGhgIG9mIGEgZ2l2ZW4gb2JqZWN0LlxuICAgICAqIEFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cyBhcmUgcHJvdmlkZWQgdG8gdGhlIGludm9rZWQgbWV0aG9kLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuNy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgbWV0aG9kIHRvIGludm9rZS5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSB0aGUgbWV0aG9kIHdpdGguXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgaW52b2tlciBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbXG4gICAgICogICB7ICdhJzogeyAnYic6IF8uY29uc3RhbnQoMikgfSB9LFxuICAgICAqICAgeyAnYSc6IHsgJ2InOiBfLmNvbnN0YW50KDEpIH0gfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLm1hcChvYmplY3RzLCBfLm1ldGhvZCgnYS5iJykpO1xuICAgICAqIC8vID0+IFsyLCAxXVxuICAgICAqXG4gICAgICogXy5tYXAob2JqZWN0cywgXy5tZXRob2QoWydhJywgJ2InXSkpO1xuICAgICAqIC8vID0+IFsyLCAxXVxuICAgICAqL1xuICAgIHZhciBtZXRob2QgPSBiYXNlUmVzdChmdW5jdGlvbihwYXRoLCBhcmdzKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBiYXNlSW52b2tlKG9iamVjdCwgcGF0aCwgYXJncyk7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLm1ldGhvZGA7IHRoaXMgbWV0aG9kIGNyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXNcbiAgICAgKiB0aGUgbWV0aG9kIGF0IGEgZ2l2ZW4gcGF0aCBvZiBgb2JqZWN0YC4gQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzIGFyZVxuICAgICAqIHByb3ZpZGVkIHRvIHRoZSBpbnZva2VkIG1ldGhvZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjcuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIHRoZSBtZXRob2Qgd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBpbnZva2VyIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBfLnRpbWVzKDMsIF8uY29uc3RhbnQpLFxuICAgICAqICAgICBvYmplY3QgPSB7ICdhJzogYXJyYXksICdiJzogYXJyYXksICdjJzogYXJyYXkgfTtcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnYVsyXScsICdjWzBdJ10sIF8ubWV0aG9kT2Yob2JqZWN0KSk7XG4gICAgICogLy8gPT4gWzIsIDBdXG4gICAgICpcbiAgICAgKiBfLm1hcChbWydhJywgJzInXSwgWydjJywgJzAnXV0sIF8ubWV0aG9kT2Yob2JqZWN0KSk7XG4gICAgICogLy8gPT4gWzIsIDBdXG4gICAgICovXG4gICAgdmFyIG1ldGhvZE9mID0gYmFzZVJlc3QoZnVuY3Rpb24ob2JqZWN0LCBhcmdzKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ocGF0aCkge1xuICAgICAgICByZXR1cm4gYmFzZUludm9rZShvYmplY3QsIHBhdGgsIGFyZ3MpO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIEFkZHMgYWxsIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBmdW5jdGlvbiBwcm9wZXJ0aWVzIG9mIGEgc291cmNlXG4gICAgICogb2JqZWN0IHRvIHRoZSBkZXN0aW5hdGlvbiBvYmplY3QuIElmIGBvYmplY3RgIGlzIGEgZnVuY3Rpb24sIHRoZW4gbWV0aG9kc1xuICAgICAqIGFyZSBhZGRlZCB0byBpdHMgcHJvdG90eXBlIGFzIHdlbGwuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVXNlIGBfLnJ1bkluQ29udGV4dGAgdG8gY3JlYXRlIGEgcHJpc3RpbmUgYGxvZGFzaGAgZnVuY3Rpb24gdG9cbiAgICAgKiBhdm9pZCBjb25mbGljdHMgY2F1c2VkIGJ5IG1vZGlmeWluZyB0aGUgb3JpZ2luYWwuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fSBbb2JqZWN0PWxvZGFzaF0gVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgZnVuY3Rpb25zIHRvIGFkZC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmNoYWluPXRydWVdIFNwZWNpZnkgd2hldGhlciBtaXhpbnMgYXJlIGNoYWluYWJsZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb258T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiB2b3dlbHMoc3RyaW5nKSB7XG4gICAgICogICByZXR1cm4gXy5maWx0ZXIoc3RyaW5nLCBmdW5jdGlvbih2KSB7XG4gICAgICogICAgIHJldHVybiAvW2FlaW91XS9pLnRlc3Qodik7XG4gICAgICogICB9KTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLm1peGluKHsgJ3Zvd2Vscyc6IHZvd2VscyB9KTtcbiAgICAgKiBfLnZvd2VscygnZnJlZCcpO1xuICAgICAqIC8vID0+IFsnZSddXG4gICAgICpcbiAgICAgKiBfKCdmcmVkJykudm93ZWxzKCkudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbJ2UnXVxuICAgICAqXG4gICAgICogXy5taXhpbih7ICd2b3dlbHMnOiB2b3dlbHMgfSwgeyAnY2hhaW4nOiBmYWxzZSB9KTtcbiAgICAgKiBfKCdmcmVkJykudm93ZWxzKCk7XG4gICAgICogLy8gPT4gWydlJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtaXhpbihvYmplY3QsIHNvdXJjZSwgb3B0aW9ucykge1xuICAgICAgdmFyIHByb3BzID0ga2V5cyhzb3VyY2UpLFxuICAgICAgICAgIG1ldGhvZE5hbWVzID0gYmFzZUZ1bmN0aW9ucyhzb3VyY2UsIHByb3BzKTtcblxuICAgICAgaWYgKG9wdGlvbnMgPT0gbnVsbCAmJlxuICAgICAgICAgICEoaXNPYmplY3Qoc291cmNlKSAmJiAobWV0aG9kTmFtZXMubGVuZ3RoIHx8ICFwcm9wcy5sZW5ndGgpKSkge1xuICAgICAgICBvcHRpb25zID0gc291cmNlO1xuICAgICAgICBzb3VyY2UgPSBvYmplY3Q7XG4gICAgICAgIG9iamVjdCA9IHRoaXM7XG4gICAgICAgIG1ldGhvZE5hbWVzID0gYmFzZUZ1bmN0aW9ucyhzb3VyY2UsIGtleXMoc291cmNlKSk7XG4gICAgICB9XG4gICAgICB2YXIgY2hhaW4gPSAhKGlzT2JqZWN0KG9wdGlvbnMpICYmICdjaGFpbicgaW4gb3B0aW9ucykgfHwgISFvcHRpb25zLmNoYWluLFxuICAgICAgICAgIGlzRnVuYyA9IGlzRnVuY3Rpb24ob2JqZWN0KTtcblxuICAgICAgYXJyYXlFYWNoKG1ldGhvZE5hbWVzLCBmdW5jdGlvbihtZXRob2ROYW1lKSB7XG4gICAgICAgIHZhciBmdW5jID0gc291cmNlW21ldGhvZE5hbWVdO1xuICAgICAgICBvYmplY3RbbWV0aG9kTmFtZV0gPSBmdW5jO1xuICAgICAgICBpZiAoaXNGdW5jKSB7XG4gICAgICAgICAgb2JqZWN0LnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGNoYWluQWxsID0gdGhpcy5fX2NoYWluX187XG4gICAgICAgICAgICBpZiAoY2hhaW4gfHwgY2hhaW5BbGwpIHtcbiAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IG9iamVjdCh0aGlzLl9fd3JhcHBlZF9fKSxcbiAgICAgICAgICAgICAgICAgIGFjdGlvbnMgPSByZXN1bHQuX19hY3Rpb25zX18gPSBjb3B5QXJyYXkodGhpcy5fX2FjdGlvbnNfXyk7XG5cbiAgICAgICAgICAgICAgYWN0aW9ucy5wdXNoKHsgJ2Z1bmMnOiBmdW5jLCAnYXJncyc6IGFyZ3VtZW50cywgJ3RoaXNBcmcnOiBvYmplY3QgfSk7XG4gICAgICAgICAgICAgIHJlc3VsdC5fX2NoYWluX18gPSBjaGFpbkFsbDtcbiAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KG9iamVjdCwgYXJyYXlQdXNoKFt0aGlzLnZhbHVlKCldLCBhcmd1bWVudHMpKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXZlcnRzIHRoZSBgX2AgdmFyaWFibGUgdG8gaXRzIHByZXZpb3VzIHZhbHVlIGFuZCByZXR1cm5zIGEgcmVmZXJlbmNlIHRvXG4gICAgICogdGhlIGBsb2Rhc2hgIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGBsb2Rhc2hgIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgbG9kYXNoID0gXy5ub0NvbmZsaWN0KCk7XG4gICAgICovXG4gICAgZnVuY3Rpb24gbm9Db25mbGljdCgpIHtcbiAgICAgIGlmIChyb290Ll8gPT09IHRoaXMpIHtcbiAgICAgICAgcm9vdC5fID0gb2xkRGFzaDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYHVuZGVmaW5lZGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRpbWVzKDIsIF8ubm9vcCk7XG4gICAgICogLy8gPT4gW3VuZGVmaW5lZCwgdW5kZWZpbmVkXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG5vb3AoKSB7XG4gICAgICAvLyBObyBvcGVyYXRpb24gcGVyZm9ybWVkLlxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGdldHMgdGhlIGFyZ3VtZW50IGF0IGluZGV4IGBuYC4gSWYgYG5gIGlzIG5lZ2F0aXZlLFxuICAgICAqIHRoZSBudGggYXJndW1lbnQgZnJvbSB0aGUgZW5kIGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MF0gVGhlIGluZGV4IG9mIHRoZSBhcmd1bWVudCB0byByZXR1cm4uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcGFzcy10aHJ1IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ubnRoQXJnKDEpO1xuICAgICAqIGZ1bmMoJ2EnLCAnYicsICdjJywgJ2QnKTtcbiAgICAgKiAvLyA9PiAnYidcbiAgICAgKlxuICAgICAqIHZhciBmdW5jID0gXy5udGhBcmcoLTIpO1xuICAgICAqIGZ1bmMoJ2EnLCAnYicsICdjJywgJ2QnKTtcbiAgICAgKiAvLyA9PiAnYydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBudGhBcmcobikge1xuICAgICAgbiA9IHRvSW50ZWdlcihuKTtcbiAgICAgIHJldHVybiBiYXNlUmVzdChmdW5jdGlvbihhcmdzKSB7XG4gICAgICAgIHJldHVybiBiYXNlTnRoKGFyZ3MsIG4pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgaXRlcmF0ZWVzYCB3aXRoIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXNcbiAgICAgKiBhbmQgcmV0dXJucyB0aGVpciByZXN1bHRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW2l0ZXJhdGVlcz1bXy5pZGVudGl0eV1dXG4gICAgICogIFRoZSBpdGVyYXRlZXMgdG8gaW52b2tlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ub3ZlcihbTWF0aC5tYXgsIE1hdGgubWluXSk7XG4gICAgICpcbiAgICAgKiBmdW5jKDEsIDIsIDMsIDQpO1xuICAgICAqIC8vID0+IFs0LCAxXVxuICAgICAqL1xuICAgIHZhciBvdmVyID0gY3JlYXRlT3ZlcihhcnJheU1hcCk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBjaGVja3MgaWYgKiphbGwqKiBvZiB0aGUgYHByZWRpY2F0ZXNgIHJldHVyblxuICAgICAqIHRydXRoeSB3aGVuIGludm9rZWQgd2l0aCB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW3ByZWRpY2F0ZXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgcHJlZGljYXRlcyB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm92ZXJFdmVyeShbQm9vbGVhbiwgaXNGaW5pdGVdKTtcbiAgICAgKlxuICAgICAqIGZ1bmMoJzEnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBmdW5jKG51bGwpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBmdW5jKE5hTik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgb3ZlckV2ZXJ5ID0gY3JlYXRlT3ZlcihhcnJheUV2ZXJ5KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGNoZWNrcyBpZiAqKmFueSoqIG9mIHRoZSBgcHJlZGljYXRlc2AgcmV0dXJuXG4gICAgICogdHJ1dGh5IHdoZW4gaW52b2tlZCB3aXRoIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Li4uKEZ1bmN0aW9ufEZ1bmN0aW9uW10pfSBbcHJlZGljYXRlcz1bXy5pZGVudGl0eV1dXG4gICAgICogIFRoZSBwcmVkaWNhdGVzIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ub3ZlclNvbWUoW0Jvb2xlYW4sIGlzRmluaXRlXSk7XG4gICAgICpcbiAgICAgKiBmdW5jKCcxJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogZnVuYyhudWxsKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBmdW5jKE5hTik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgb3ZlclNvbWUgPSBjcmVhdGVPdmVyKGFycmF5U29tZSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSB2YWx1ZSBhdCBgcGF0aGAgb2YgYSBnaXZlbiBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi40LjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IHsgJ2InOiAyIH0gfSxcbiAgICAgKiAgIHsgJ2EnOiB7ICdiJzogMSB9IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5tYXAob2JqZWN0cywgXy5wcm9wZXJ0eSgnYS5iJykpO1xuICAgICAqIC8vID0+IFsyLCAxXVxuICAgICAqXG4gICAgICogXy5tYXAoXy5zb3J0Qnkob2JqZWN0cywgXy5wcm9wZXJ0eShbJ2EnLCAnYiddKSksICdhLmInKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwcm9wZXJ0eShwYXRoKSB7XG4gICAgICByZXR1cm4gaXNLZXkocGF0aCkgPyBiYXNlUHJvcGVydHkodG9LZXkocGF0aCkpIDogYmFzZVByb3BlcnR5RGVlcChwYXRoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8ucHJvcGVydHlgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zXG4gICAgICogdGhlIHZhbHVlIGF0IGEgZ2l2ZW4gcGF0aCBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMCwgMSwgMl0sXG4gICAgICogICAgIG9iamVjdCA9IHsgJ2EnOiBhcnJheSwgJ2InOiBhcnJheSwgJ2MnOiBhcnJheSB9O1xuICAgICAqXG4gICAgICogXy5tYXAoWydhWzJdJywgJ2NbMF0nXSwgXy5wcm9wZXJ0eU9mKG9iamVjdCkpO1xuICAgICAqIC8vID0+IFsyLCAwXVxuICAgICAqXG4gICAgICogXy5tYXAoW1snYScsICcyJ10sIFsnYycsICcwJ11dLCBfLnByb3BlcnR5T2Yob2JqZWN0KSk7XG4gICAgICogLy8gPT4gWzIsIDBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcHJvcGVydHlPZihvYmplY3QpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihwYXRoKSB7XG4gICAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBudW1iZXJzIChwb3NpdGl2ZSBhbmQvb3IgbmVnYXRpdmUpIHByb2dyZXNzaW5nIGZyb21cbiAgICAgKiBgc3RhcnRgIHVwIHRvLCBidXQgbm90IGluY2x1ZGluZywgYGVuZGAuIEEgc3RlcCBvZiBgLTFgIGlzIHVzZWQgaWYgYSBuZWdhdGl2ZVxuICAgICAqIGBzdGFydGAgaXMgc3BlY2lmaWVkIHdpdGhvdXQgYW4gYGVuZGAgb3IgYHN0ZXBgLiBJZiBgZW5kYCBpcyBub3Qgc3BlY2lmaWVkLFxuICAgICAqIGl0J3Mgc2V0IHRvIGBzdGFydGAgd2l0aCBgc3RhcnRgIHRoZW4gc2V0IHRvIGAwYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBKYXZhU2NyaXB0IGZvbGxvd3MgdGhlIElFRUUtNzU0IHN0YW5kYXJkIGZvciByZXNvbHZpbmdcbiAgICAgKiBmbG9hdGluZy1wb2ludCB2YWx1ZXMgd2hpY2ggY2FuIHByb2R1Y2UgdW5leHBlY3RlZCByZXN1bHRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0ZXA9MV0gVGhlIHZhbHVlIHRvIGluY3JlbWVudCBvciBkZWNyZW1lbnQgYnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSByYW5nZSBvZiBudW1iZXJzLlxuICAgICAqIEBzZWUgXy5pblJhbmdlLCBfLnJhbmdlUmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yYW5nZSg0KTtcbiAgICAgKiAvLyA9PiBbMCwgMSwgMiwgM11cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoLTQpO1xuICAgICAqIC8vID0+IFswLCAtMSwgLTIsIC0zXVxuICAgICAqXG4gICAgICogXy5yYW5nZSgxLCA1KTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgMywgNF1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoMCwgMjAsIDUpO1xuICAgICAqIC8vID0+IFswLCA1LCAxMCwgMTVdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDAsIC00LCAtMSk7XG4gICAgICogLy8gPT4gWzAsIC0xLCAtMiwgLTNdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDEsIDQsIDApO1xuICAgICAqIC8vID0+IFsxLCAxLCAxXVxuICAgICAqXG4gICAgICogXy5yYW5nZSgwKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIHZhciByYW5nZSA9IGNyZWF0ZVJhbmdlKCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnJhbmdlYCBleGNlcHQgdGhhdCBpdCBwb3B1bGF0ZXMgdmFsdWVzIGluXG4gICAgICogZGVzY2VuZGluZyBvcmRlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGVwPTFdIFRoZSB2YWx1ZSB0byBpbmNyZW1lbnQgb3IgZGVjcmVtZW50IGJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZ2Ugb2YgbnVtYmVycy5cbiAgICAgKiBAc2VlIF8uaW5SYW5nZSwgXy5yYW5nZVxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoNCk7XG4gICAgICogLy8gPT4gWzMsIDIsIDEsIDBdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoLTQpO1xuICAgICAqIC8vID0+IFstMywgLTIsIC0xLCAwXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDEsIDUpO1xuICAgICAqIC8vID0+IFs0LCAzLCAyLCAxXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDAsIDIwLCA1KTtcbiAgICAgKiAvLyA9PiBbMTUsIDEwLCA1LCAwXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDAsIC00LCAtMSk7XG4gICAgICogLy8gPT4gWy0zLCAtMiwgLTEsIDBdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoMSwgNCwgMCk7XG4gICAgICogLy8gPT4gWzEsIDEsIDFdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoMCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICB2YXIgcmFuZ2VSaWdodCA9IGNyZWF0ZVJhbmdlKHRydWUpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBlbXB0eSBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEzLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGVtcHR5IGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXlzID0gXy50aW1lcygyLCBfLnN0dWJBcnJheSk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheXMpO1xuICAgICAqIC8vID0+IFtbXSwgW11dXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheXNbMF0gPT09IGFycmF5c1sxXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdHViQXJyYXkoKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTMuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50aW1lcygyLCBfLnN0dWJGYWxzZSk7XG4gICAgICogLy8gPT4gW2ZhbHNlLCBmYWxzZV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdHViRmFsc2UoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBlbXB0eSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgZW1wdHkgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IF8udGltZXMoMiwgXy5zdHViT2JqZWN0KTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdHMpO1xuICAgICAqIC8vID0+IFt7fSwge31dXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3RzWzBdID09PSBvYmplY3RzWzFdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0dWJPYmplY3QoKSB7XG4gICAgICByZXR1cm4ge307XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBhbiBlbXB0eSBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBlbXB0eSBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGltZXMoMiwgXy5zdHViU3RyaW5nKTtcbiAgICAgKiAvLyA9PiBbJycsICcnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0dWJTdHJpbmcoKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBgdHJ1ZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGltZXMoMiwgXy5zdHViVHJ1ZSk7XG4gICAgICogLy8gPT4gW3RydWUsIHRydWVdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3R1YlRydWUoKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbnZva2VzIHRoZSBpdGVyYXRlZSBgbmAgdGltZXMsIHJldHVybmluZyBhbiBhcnJheSBvZiB0aGUgcmVzdWx0cyBvZlxuICAgICAqIGVhY2ggaW52b2NhdGlvbi4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ7IChpbmRleCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gaW52b2tlIGBpdGVyYXRlZWAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiByZXN1bHRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRpbWVzKDMsIFN0cmluZyk7XG4gICAgICogLy8gPT4gWycwJywgJzEnLCAnMiddXG4gICAgICpcbiAgICAgKiAgXy50aW1lcyg0LCBfLmNvbnN0YW50KDApKTtcbiAgICAgKiAvLyA9PiBbMCwgMCwgMCwgMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0aW1lcyhuLCBpdGVyYXRlZSkge1xuICAgICAgbiA9IHRvSW50ZWdlcihuKTtcbiAgICAgIGlmIChuIDwgMSB8fCBuID4gTUFYX1NBRkVfSU5URUdFUikge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBNQVhfQVJSQVlfTEVOR1RILFxuICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1pbihuLCBNQVhfQVJSQVlfTEVOR1RIKTtcblxuICAgICAgaXRlcmF0ZWUgPSBnZXRJdGVyYXRlZShpdGVyYXRlZSk7XG4gICAgICBuIC09IE1BWF9BUlJBWV9MRU5HVEg7XG5cbiAgICAgIHZhciByZXN1bHQgPSBiYXNlVGltZXMobGVuZ3RoLCBpdGVyYXRlZSk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IG4pIHtcbiAgICAgICAgaXRlcmF0ZWUoaW5kZXgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvUGF0aCgnYS5iLmMnKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYicsICdjJ11cbiAgICAgKlxuICAgICAqIF8udG9QYXRoKCdhWzBdLmIuYycpO1xuICAgICAqIC8vID0+IFsnYScsICcwJywgJ2InLCAnYyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9QYXRoKHZhbHVlKSB7XG4gICAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGFycmF5TWFwKHZhbHVlLCB0b0tleSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNTeW1ib2wodmFsdWUpID8gW3ZhbHVlXSA6IGNvcHlBcnJheShzdHJpbmdUb1BhdGgodG9TdHJpbmcodmFsdWUpKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2VuZXJhdGVzIGEgdW5pcXVlIElELiBJZiBgcHJlZml4YCBpcyBnaXZlbiwgdGhlIElEIGlzIGFwcGVuZGVkIHRvIGl0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3ByZWZpeD0nJ10gVGhlIHZhbHVlIHRvIHByZWZpeCB0aGUgSUQgd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB1bmlxdWUgSUQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5pcXVlSWQoJ2NvbnRhY3RfJyk7XG4gICAgICogLy8gPT4gJ2NvbnRhY3RfMTA0J1xuICAgICAqXG4gICAgICogXy51bmlxdWVJZCgpO1xuICAgICAqIC8vID0+ICcxMDUnXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5pcXVlSWQocHJlZml4KSB7XG4gICAgICB2YXIgaWQgPSArK2lkQ291bnRlcjtcbiAgICAgIHJldHVybiB0b1N0cmluZyhwcmVmaXgpICsgaWQ7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQWRkcyB0d28gbnVtYmVycy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjQuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGF1Z2VuZCBUaGUgZmlyc3QgbnVtYmVyIGluIGFuIGFkZGl0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBhZGRlbmQgVGhlIHNlY29uZCBudW1iZXIgaW4gYW4gYWRkaXRpb24uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgdG90YWwuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uYWRkKDYsIDQpO1xuICAgICAqIC8vID0+IDEwXG4gICAgICovXG4gICAgdmFyIGFkZCA9IGNyZWF0ZU1hdGhPcGVyYXRpb24oZnVuY3Rpb24oYXVnZW5kLCBhZGRlbmQpIHtcbiAgICAgIHJldHVybiBhdWdlbmQgKyBhZGRlbmQ7XG4gICAgfSwgMCk7XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyBgbnVtYmVyYCByb3VuZGVkIHVwIHRvIGBwcmVjaXNpb25gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIHJvdW5kIHVwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcHJlY2lzaW9uPTBdIFRoZSBwcmVjaXNpb24gdG8gcm91bmQgdXAgdG8uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcm91bmRlZCB1cCBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY2VpbCg0LjAwNik7XG4gICAgICogLy8gPT4gNVxuICAgICAqXG4gICAgICogXy5jZWlsKDYuMDA0LCAyKTtcbiAgICAgKiAvLyA9PiA2LjAxXG4gICAgICpcbiAgICAgKiBfLmNlaWwoNjA0MCwgLTIpO1xuICAgICAqIC8vID0+IDYxMDBcbiAgICAgKi9cbiAgICB2YXIgY2VpbCA9IGNyZWF0ZVJvdW5kKCdjZWlsJyk7XG5cbiAgICAvKipcbiAgICAgKiBEaXZpZGUgdHdvIG51bWJlcnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC43LjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBkaXZpZGVuZCBUaGUgZmlyc3QgbnVtYmVyIGluIGEgZGl2aXNpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGRpdmlzb3IgVGhlIHNlY29uZCBudW1iZXIgaW4gYSBkaXZpc2lvbi5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBxdW90aWVudC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kaXZpZGUoNiwgNCk7XG4gICAgICogLy8gPT4gMS41XG4gICAgICovXG4gICAgdmFyIGRpdmlkZSA9IGNyZWF0ZU1hdGhPcGVyYXRpb24oZnVuY3Rpb24oZGl2aWRlbmQsIGRpdmlzb3IpIHtcbiAgICAgIHJldHVybiBkaXZpZGVuZCAvIGRpdmlzb3I7XG4gICAgfSwgMSk7XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyBgbnVtYmVyYCByb3VuZGVkIGRvd24gdG8gYHByZWNpc2lvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4xMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gcm91bmQgZG93bi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3ByZWNpc2lvbj0wXSBUaGUgcHJlY2lzaW9uIHRvIHJvdW5kIGRvd24gdG8uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcm91bmRlZCBkb3duIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mbG9vcig0LjAwNik7XG4gICAgICogLy8gPT4gNFxuICAgICAqXG4gICAgICogXy5mbG9vcigwLjA0NiwgMik7XG4gICAgICogLy8gPT4gMC4wNFxuICAgICAqXG4gICAgICogXy5mbG9vcig0MDYwLCAtMik7XG4gICAgICogLy8gPT4gNDAwMFxuICAgICAqL1xuICAgIHZhciBmbG9vciA9IGNyZWF0ZVJvdW5kKCdmbG9vcicpO1xuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgdGhlIG1heGltdW0gdmFsdWUgb2YgYGFycmF5YC4gSWYgYGFycmF5YCBpcyBlbXB0eSBvciBmYWxzZXksXG4gICAgICogYHVuZGVmaW5lZGAgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1heGltdW0gdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWF4KFs0LCAyLCA4LCA2XSk7XG4gICAgICogLy8gPT4gOFxuICAgICAqXG4gICAgICogXy5tYXgoW10pO1xuICAgICAqIC8vID0+IHVuZGVmaW5lZFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1heChhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZUV4dHJlbXVtKGFycmF5LCBpZGVudGl0eSwgYmFzZUd0KVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLm1heGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IGluIGBhcnJheWAgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieSB3aGljaFxuICAgICAqIHRoZSB2YWx1ZSBpcyByYW5rZWQuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWF4aW11bSB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnbic6IDEgfSwgeyAnbic6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLm1heEJ5KG9iamVjdHMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ubjsgfSk7XG4gICAgICogLy8gPT4geyAnbic6IDIgfVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5tYXhCeShvYmplY3RzLCAnbicpO1xuICAgICAqIC8vID0+IHsgJ24nOiAyIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXhCeShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VFeHRyZW11bShhcnJheSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpLCBiYXNlR3QpXG4gICAgICAgIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIHRoZSBtZWFuIG9mIHRoZSB2YWx1ZXMgaW4gYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBtZWFuLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1lYW4oWzQsIDIsIDgsIDZdKTtcbiAgICAgKiAvLyA9PiA1XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWVhbihhcnJheSkge1xuICAgICAgcmV0dXJuIGJhc2VNZWFuKGFycmF5LCBpZGVudGl0eSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5tZWFuYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgaW4gYGFycmF5YCB0byBnZW5lcmF0ZSB0aGUgdmFsdWUgdG8gYmUgYXZlcmFnZWQuXG4gICAgICogVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC43LjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG1lYW4uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ24nOiA0IH0sIHsgJ24nOiAyIH0sIHsgJ24nOiA4IH0sIHsgJ24nOiA2IH1dO1xuICAgICAqXG4gICAgICogXy5tZWFuQnkob2JqZWN0cywgZnVuY3Rpb24obykgeyByZXR1cm4gby5uOyB9KTtcbiAgICAgKiAvLyA9PiA1XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLm1lYW5CeShvYmplY3RzLCAnbicpO1xuICAgICAqIC8vID0+IDVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtZWFuQnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gYmFzZU1lYW4oYXJyYXksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgdGhlIG1pbmltdW0gdmFsdWUgb2YgYGFycmF5YC4gSWYgYGFycmF5YCBpcyBlbXB0eSBvciBmYWxzZXksXG4gICAgICogYHVuZGVmaW5lZGAgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1pbmltdW0gdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWluKFs0LCAyLCA4LCA2XSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqXG4gICAgICogXy5taW4oW10pO1xuICAgICAqIC8vID0+IHVuZGVmaW5lZFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1pbihhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZUV4dHJlbXVtKGFycmF5LCBpZGVudGl0eSwgYmFzZUx0KVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLm1pbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IGluIGBhcnJheWAgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieSB3aGljaFxuICAgICAqIHRoZSB2YWx1ZSBpcyByYW5rZWQuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWluaW11bSB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnbic6IDEgfSwgeyAnbic6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLm1pbkJ5KG9iamVjdHMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ubjsgfSk7XG4gICAgICogLy8gPT4geyAnbic6IDEgfVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5taW5CeShvYmplY3RzLCAnbicpO1xuICAgICAqIC8vID0+IHsgJ24nOiAxIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtaW5CeShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VFeHRyZW11bShhcnJheSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpLCBiYXNlTHQpXG4gICAgICAgIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE11bHRpcGx5IHR3byBudW1iZXJzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNy4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbXVsdGlwbGllciBUaGUgZmlyc3QgbnVtYmVyIGluIGEgbXVsdGlwbGljYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG11bHRpcGxpY2FuZCBUaGUgc2Vjb25kIG51bWJlciBpbiBhIG11bHRpcGxpY2F0aW9uLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHByb2R1Y3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubXVsdGlwbHkoNiwgNCk7XG4gICAgICogLy8gPT4gMjRcbiAgICAgKi9cbiAgICB2YXIgbXVsdGlwbHkgPSBjcmVhdGVNYXRoT3BlcmF0aW9uKGZ1bmN0aW9uKG11bHRpcGxpZXIsIG11bHRpcGxpY2FuZCkge1xuICAgICAgcmV0dXJuIG11bHRpcGxpZXIgKiBtdWx0aXBsaWNhbmQ7XG4gICAgfSwgMSk7XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyBgbnVtYmVyYCByb3VuZGVkIHRvIGBwcmVjaXNpb25gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIHJvdW5kLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcHJlY2lzaW9uPTBdIFRoZSBwcmVjaXNpb24gdG8gcm91bmQgdG8uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcm91bmRlZCBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucm91bmQoNC4wMDYpO1xuICAgICAqIC8vID0+IDRcbiAgICAgKlxuICAgICAqIF8ucm91bmQoNC4wMDYsIDIpO1xuICAgICAqIC8vID0+IDQuMDFcbiAgICAgKlxuICAgICAqIF8ucm91bmQoNDA2MCwgLTIpO1xuICAgICAqIC8vID0+IDQxMDBcbiAgICAgKi9cbiAgICB2YXIgcm91bmQgPSBjcmVhdGVSb3VuZCgncm91bmQnKTtcblxuICAgIC8qKlxuICAgICAqIFN1YnRyYWN0IHR3byBudW1iZXJzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbWludWVuZCBUaGUgZmlyc3QgbnVtYmVyIGluIGEgc3VidHJhY3Rpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN1YnRyYWhlbmQgVGhlIHNlY29uZCBudW1iZXIgaW4gYSBzdWJ0cmFjdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBkaWZmZXJlbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnN1YnRyYWN0KDYsIDQpO1xuICAgICAqIC8vID0+IDJcbiAgICAgKi9cbiAgICB2YXIgc3VidHJhY3QgPSBjcmVhdGVNYXRoT3BlcmF0aW9uKGZ1bmN0aW9uKG1pbnVlbmQsIHN1YnRyYWhlbmQpIHtcbiAgICAgIHJldHVybiBtaW51ZW5kIC0gc3VidHJhaGVuZDtcbiAgICB9LCAwKTtcblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIHRoZSBzdW0gb2YgdGhlIHZhbHVlcyBpbiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuNC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN1bS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zdW0oWzQsIDIsIDgsIDZdKTtcbiAgICAgKiAvLyA9PiAyMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN1bShhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVN1bShhcnJheSwgaWRlbnRpdHkpXG4gICAgICAgIDogMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnN1bWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IGluIGBhcnJheWAgdG8gZ2VuZXJhdGUgdGhlIHZhbHVlIHRvIGJlIHN1bW1lZC5cbiAgICAgKiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3VtLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICduJzogNCB9LCB7ICduJzogMiB9LCB7ICduJzogOCB9LCB7ICduJzogNiB9XTtcbiAgICAgKlxuICAgICAqIF8uc3VtQnkob2JqZWN0cywgZnVuY3Rpb24obykgeyByZXR1cm4gby5uOyB9KTtcbiAgICAgKiAvLyA9PiAyMFxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zdW1CeShvYmplY3RzLCAnbicpO1xuICAgICAqIC8vID0+IDIwXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3VtQnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlU3VtKGFycmF5LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpXG4gICAgICAgIDogMDtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0aGF0IHJldHVybiB3cmFwcGVkIHZhbHVlcyBpbiBjaGFpbiBzZXF1ZW5jZXMuXG4gICAgbG9kYXNoLmFmdGVyID0gYWZ0ZXI7XG4gICAgbG9kYXNoLmFyeSA9IGFyeTtcbiAgICBsb2Rhc2guYXNzaWduID0gYXNzaWduO1xuICAgIGxvZGFzaC5hc3NpZ25JbiA9IGFzc2lnbkluO1xuICAgIGxvZGFzaC5hc3NpZ25JbldpdGggPSBhc3NpZ25JbldpdGg7XG4gICAgbG9kYXNoLmFzc2lnbldpdGggPSBhc3NpZ25XaXRoO1xuICAgIGxvZGFzaC5hdCA9IGF0O1xuICAgIGxvZGFzaC5iZWZvcmUgPSBiZWZvcmU7XG4gICAgbG9kYXNoLmJpbmQgPSBiaW5kO1xuICAgIGxvZGFzaC5iaW5kQWxsID0gYmluZEFsbDtcbiAgICBsb2Rhc2guYmluZEtleSA9IGJpbmRLZXk7XG4gICAgbG9kYXNoLmNhc3RBcnJheSA9IGNhc3RBcnJheTtcbiAgICBsb2Rhc2guY2hhaW4gPSBjaGFpbjtcbiAgICBsb2Rhc2guY2h1bmsgPSBjaHVuaztcbiAgICBsb2Rhc2guY29tcGFjdCA9IGNvbXBhY3Q7XG4gICAgbG9kYXNoLmNvbmNhdCA9IGNvbmNhdDtcbiAgICBsb2Rhc2guY29uZCA9IGNvbmQ7XG4gICAgbG9kYXNoLmNvbmZvcm1zID0gY29uZm9ybXM7XG4gICAgbG9kYXNoLmNvbnN0YW50ID0gY29uc3RhbnQ7XG4gICAgbG9kYXNoLmNvdW50QnkgPSBjb3VudEJ5O1xuICAgIGxvZGFzaC5jcmVhdGUgPSBjcmVhdGU7XG4gICAgbG9kYXNoLmN1cnJ5ID0gY3Vycnk7XG4gICAgbG9kYXNoLmN1cnJ5UmlnaHQgPSBjdXJyeVJpZ2h0O1xuICAgIGxvZGFzaC5kZWJvdW5jZSA9IGRlYm91bmNlO1xuICAgIGxvZGFzaC5kZWZhdWx0cyA9IGRlZmF1bHRzO1xuICAgIGxvZGFzaC5kZWZhdWx0c0RlZXAgPSBkZWZhdWx0c0RlZXA7XG4gICAgbG9kYXNoLmRlZmVyID0gZGVmZXI7XG4gICAgbG9kYXNoLmRlbGF5ID0gZGVsYXk7XG4gICAgbG9kYXNoLmRpZmZlcmVuY2UgPSBkaWZmZXJlbmNlO1xuICAgIGxvZGFzaC5kaWZmZXJlbmNlQnkgPSBkaWZmZXJlbmNlQnk7XG4gICAgbG9kYXNoLmRpZmZlcmVuY2VXaXRoID0gZGlmZmVyZW5jZVdpdGg7XG4gICAgbG9kYXNoLmRyb3AgPSBkcm9wO1xuICAgIGxvZGFzaC5kcm9wUmlnaHQgPSBkcm9wUmlnaHQ7XG4gICAgbG9kYXNoLmRyb3BSaWdodFdoaWxlID0gZHJvcFJpZ2h0V2hpbGU7XG4gICAgbG9kYXNoLmRyb3BXaGlsZSA9IGRyb3BXaGlsZTtcbiAgICBsb2Rhc2guZmlsbCA9IGZpbGw7XG4gICAgbG9kYXNoLmZpbHRlciA9IGZpbHRlcjtcbiAgICBsb2Rhc2guZmxhdE1hcCA9IGZsYXRNYXA7XG4gICAgbG9kYXNoLmZsYXRNYXBEZWVwID0gZmxhdE1hcERlZXA7XG4gICAgbG9kYXNoLmZsYXRNYXBEZXB0aCA9IGZsYXRNYXBEZXB0aDtcbiAgICBsb2Rhc2guZmxhdHRlbiA9IGZsYXR0ZW47XG4gICAgbG9kYXNoLmZsYXR0ZW5EZWVwID0gZmxhdHRlbkRlZXA7XG4gICAgbG9kYXNoLmZsYXR0ZW5EZXB0aCA9IGZsYXR0ZW5EZXB0aDtcbiAgICBsb2Rhc2guZmxpcCA9IGZsaXA7XG4gICAgbG9kYXNoLmZsb3cgPSBmbG93O1xuICAgIGxvZGFzaC5mbG93UmlnaHQgPSBmbG93UmlnaHQ7XG4gICAgbG9kYXNoLmZyb21QYWlycyA9IGZyb21QYWlycztcbiAgICBsb2Rhc2guZnVuY3Rpb25zID0gZnVuY3Rpb25zO1xuICAgIGxvZGFzaC5mdW5jdGlvbnNJbiA9IGZ1bmN0aW9uc0luO1xuICAgIGxvZGFzaC5ncm91cEJ5ID0gZ3JvdXBCeTtcbiAgICBsb2Rhc2guaW5pdGlhbCA9IGluaXRpYWw7XG4gICAgbG9kYXNoLmludGVyc2VjdGlvbiA9IGludGVyc2VjdGlvbjtcbiAgICBsb2Rhc2guaW50ZXJzZWN0aW9uQnkgPSBpbnRlcnNlY3Rpb25CeTtcbiAgICBsb2Rhc2guaW50ZXJzZWN0aW9uV2l0aCA9IGludGVyc2VjdGlvbldpdGg7XG4gICAgbG9kYXNoLmludmVydCA9IGludmVydDtcbiAgICBsb2Rhc2guaW52ZXJ0QnkgPSBpbnZlcnRCeTtcbiAgICBsb2Rhc2guaW52b2tlTWFwID0gaW52b2tlTWFwO1xuICAgIGxvZGFzaC5pdGVyYXRlZSA9IGl0ZXJhdGVlO1xuICAgIGxvZGFzaC5rZXlCeSA9IGtleUJ5O1xuICAgIGxvZGFzaC5rZXlzID0ga2V5cztcbiAgICBsb2Rhc2gua2V5c0luID0ga2V5c0luO1xuICAgIGxvZGFzaC5tYXAgPSBtYXA7XG4gICAgbG9kYXNoLm1hcEtleXMgPSBtYXBLZXlzO1xuICAgIGxvZGFzaC5tYXBWYWx1ZXMgPSBtYXBWYWx1ZXM7XG4gICAgbG9kYXNoLm1hdGNoZXMgPSBtYXRjaGVzO1xuICAgIGxvZGFzaC5tYXRjaGVzUHJvcGVydHkgPSBtYXRjaGVzUHJvcGVydHk7XG4gICAgbG9kYXNoLm1lbW9pemUgPSBtZW1vaXplO1xuICAgIGxvZGFzaC5tZXJnZSA9IG1lcmdlO1xuICAgIGxvZGFzaC5tZXJnZVdpdGggPSBtZXJnZVdpdGg7XG4gICAgbG9kYXNoLm1ldGhvZCA9IG1ldGhvZDtcbiAgICBsb2Rhc2gubWV0aG9kT2YgPSBtZXRob2RPZjtcbiAgICBsb2Rhc2gubWl4aW4gPSBtaXhpbjtcbiAgICBsb2Rhc2gubmVnYXRlID0gbmVnYXRlO1xuICAgIGxvZGFzaC5udGhBcmcgPSBudGhBcmc7XG4gICAgbG9kYXNoLm9taXQgPSBvbWl0O1xuICAgIGxvZGFzaC5vbWl0QnkgPSBvbWl0Qnk7XG4gICAgbG9kYXNoLm9uY2UgPSBvbmNlO1xuICAgIGxvZGFzaC5vcmRlckJ5ID0gb3JkZXJCeTtcbiAgICBsb2Rhc2gub3ZlciA9IG92ZXI7XG4gICAgbG9kYXNoLm92ZXJBcmdzID0gb3ZlckFyZ3M7XG4gICAgbG9kYXNoLm92ZXJFdmVyeSA9IG92ZXJFdmVyeTtcbiAgICBsb2Rhc2gub3ZlclNvbWUgPSBvdmVyU29tZTtcbiAgICBsb2Rhc2gucGFydGlhbCA9IHBhcnRpYWw7XG4gICAgbG9kYXNoLnBhcnRpYWxSaWdodCA9IHBhcnRpYWxSaWdodDtcbiAgICBsb2Rhc2gucGFydGl0aW9uID0gcGFydGl0aW9uO1xuICAgIGxvZGFzaC5waWNrID0gcGljaztcbiAgICBsb2Rhc2gucGlja0J5ID0gcGlja0J5O1xuICAgIGxvZGFzaC5wcm9wZXJ0eSA9IHByb3BlcnR5O1xuICAgIGxvZGFzaC5wcm9wZXJ0eU9mID0gcHJvcGVydHlPZjtcbiAgICBsb2Rhc2gucHVsbCA9IHB1bGw7XG4gICAgbG9kYXNoLnB1bGxBbGwgPSBwdWxsQWxsO1xuICAgIGxvZGFzaC5wdWxsQWxsQnkgPSBwdWxsQWxsQnk7XG4gICAgbG9kYXNoLnB1bGxBbGxXaXRoID0gcHVsbEFsbFdpdGg7XG4gICAgbG9kYXNoLnB1bGxBdCA9IHB1bGxBdDtcbiAgICBsb2Rhc2gucmFuZ2UgPSByYW5nZTtcbiAgICBsb2Rhc2gucmFuZ2VSaWdodCA9IHJhbmdlUmlnaHQ7XG4gICAgbG9kYXNoLnJlYXJnID0gcmVhcmc7XG4gICAgbG9kYXNoLnJlamVjdCA9IHJlamVjdDtcbiAgICBsb2Rhc2gucmVtb3ZlID0gcmVtb3ZlO1xuICAgIGxvZGFzaC5yZXN0ID0gcmVzdDtcbiAgICBsb2Rhc2gucmV2ZXJzZSA9IHJldmVyc2U7XG4gICAgbG9kYXNoLnNhbXBsZVNpemUgPSBzYW1wbGVTaXplO1xuICAgIGxvZGFzaC5zZXQgPSBzZXQ7XG4gICAgbG9kYXNoLnNldFdpdGggPSBzZXRXaXRoO1xuICAgIGxvZGFzaC5zaHVmZmxlID0gc2h1ZmZsZTtcbiAgICBsb2Rhc2guc2xpY2UgPSBzbGljZTtcbiAgICBsb2Rhc2guc29ydEJ5ID0gc29ydEJ5O1xuICAgIGxvZGFzaC5zb3J0ZWRVbmlxID0gc29ydGVkVW5pcTtcbiAgICBsb2Rhc2guc29ydGVkVW5pcUJ5ID0gc29ydGVkVW5pcUJ5O1xuICAgIGxvZGFzaC5zcGxpdCA9IHNwbGl0O1xuICAgIGxvZGFzaC5zcHJlYWQgPSBzcHJlYWQ7XG4gICAgbG9kYXNoLnRhaWwgPSB0YWlsO1xuICAgIGxvZGFzaC50YWtlID0gdGFrZTtcbiAgICBsb2Rhc2gudGFrZVJpZ2h0ID0gdGFrZVJpZ2h0O1xuICAgIGxvZGFzaC50YWtlUmlnaHRXaGlsZSA9IHRha2VSaWdodFdoaWxlO1xuICAgIGxvZGFzaC50YWtlV2hpbGUgPSB0YWtlV2hpbGU7XG4gICAgbG9kYXNoLnRhcCA9IHRhcDtcbiAgICBsb2Rhc2gudGhyb3R0bGUgPSB0aHJvdHRsZTtcbiAgICBsb2Rhc2gudGhydSA9IHRocnU7XG4gICAgbG9kYXNoLnRvQXJyYXkgPSB0b0FycmF5O1xuICAgIGxvZGFzaC50b1BhaXJzID0gdG9QYWlycztcbiAgICBsb2Rhc2gudG9QYWlyc0luID0gdG9QYWlyc0luO1xuICAgIGxvZGFzaC50b1BhdGggPSB0b1BhdGg7XG4gICAgbG9kYXNoLnRvUGxhaW5PYmplY3QgPSB0b1BsYWluT2JqZWN0O1xuICAgIGxvZGFzaC50cmFuc2Zvcm0gPSB0cmFuc2Zvcm07XG4gICAgbG9kYXNoLnVuYXJ5ID0gdW5hcnk7XG4gICAgbG9kYXNoLnVuaW9uID0gdW5pb247XG4gICAgbG9kYXNoLnVuaW9uQnkgPSB1bmlvbkJ5O1xuICAgIGxvZGFzaC51bmlvbldpdGggPSB1bmlvbldpdGg7XG4gICAgbG9kYXNoLnVuaXEgPSB1bmlxO1xuICAgIGxvZGFzaC51bmlxQnkgPSB1bmlxQnk7XG4gICAgbG9kYXNoLnVuaXFXaXRoID0gdW5pcVdpdGg7XG4gICAgbG9kYXNoLnVuc2V0ID0gdW5zZXQ7XG4gICAgbG9kYXNoLnVuemlwID0gdW56aXA7XG4gICAgbG9kYXNoLnVuemlwV2l0aCA9IHVuemlwV2l0aDtcbiAgICBsb2Rhc2gudXBkYXRlID0gdXBkYXRlO1xuICAgIGxvZGFzaC51cGRhdGVXaXRoID0gdXBkYXRlV2l0aDtcbiAgICBsb2Rhc2gudmFsdWVzID0gdmFsdWVzO1xuICAgIGxvZGFzaC52YWx1ZXNJbiA9IHZhbHVlc0luO1xuICAgIGxvZGFzaC53aXRob3V0ID0gd2l0aG91dDtcbiAgICBsb2Rhc2gud29yZHMgPSB3b3JkcztcbiAgICBsb2Rhc2gud3JhcCA9IHdyYXA7XG4gICAgbG9kYXNoLnhvciA9IHhvcjtcbiAgICBsb2Rhc2gueG9yQnkgPSB4b3JCeTtcbiAgICBsb2Rhc2gueG9yV2l0aCA9IHhvcldpdGg7XG4gICAgbG9kYXNoLnppcCA9IHppcDtcbiAgICBsb2Rhc2guemlwT2JqZWN0ID0gemlwT2JqZWN0O1xuICAgIGxvZGFzaC56aXBPYmplY3REZWVwID0gemlwT2JqZWN0RGVlcDtcbiAgICBsb2Rhc2guemlwV2l0aCA9IHppcFdpdGg7XG5cbiAgICAvLyBBZGQgYWxpYXNlcy5cbiAgICBsb2Rhc2guZW50cmllcyA9IHRvUGFpcnM7XG4gICAgbG9kYXNoLmVudHJpZXNJbiA9IHRvUGFpcnNJbjtcbiAgICBsb2Rhc2guZXh0ZW5kID0gYXNzaWduSW47XG4gICAgbG9kYXNoLmV4dGVuZFdpdGggPSBhc3NpZ25JbldpdGg7XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgbG9kYXNoLnByb3RvdHlwZWAuXG4gICAgbWl4aW4obG9kYXNoLCBsb2Rhc2gpO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLy8gQWRkIG1ldGhvZHMgdGhhdCByZXR1cm4gdW53cmFwcGVkIHZhbHVlcyBpbiBjaGFpbiBzZXF1ZW5jZXMuXG4gICAgbG9kYXNoLmFkZCA9IGFkZDtcbiAgICBsb2Rhc2guYXR0ZW1wdCA9IGF0dGVtcHQ7XG4gICAgbG9kYXNoLmNhbWVsQ2FzZSA9IGNhbWVsQ2FzZTtcbiAgICBsb2Rhc2guY2FwaXRhbGl6ZSA9IGNhcGl0YWxpemU7XG4gICAgbG9kYXNoLmNlaWwgPSBjZWlsO1xuICAgIGxvZGFzaC5jbGFtcCA9IGNsYW1wO1xuICAgIGxvZGFzaC5jbG9uZSA9IGNsb25lO1xuICAgIGxvZGFzaC5jbG9uZURlZXAgPSBjbG9uZURlZXA7XG4gICAgbG9kYXNoLmNsb25lRGVlcFdpdGggPSBjbG9uZURlZXBXaXRoO1xuICAgIGxvZGFzaC5jbG9uZVdpdGggPSBjbG9uZVdpdGg7XG4gICAgbG9kYXNoLmNvbmZvcm1zVG8gPSBjb25mb3Jtc1RvO1xuICAgIGxvZGFzaC5kZWJ1cnIgPSBkZWJ1cnI7XG4gICAgbG9kYXNoLmRlZmF1bHRUbyA9IGRlZmF1bHRUbztcbiAgICBsb2Rhc2guZGl2aWRlID0gZGl2aWRlO1xuICAgIGxvZGFzaC5lbmRzV2l0aCA9IGVuZHNXaXRoO1xuICAgIGxvZGFzaC5lcSA9IGVxO1xuICAgIGxvZGFzaC5lc2NhcGUgPSBlc2NhcGU7XG4gICAgbG9kYXNoLmVzY2FwZVJlZ0V4cCA9IGVzY2FwZVJlZ0V4cDtcbiAgICBsb2Rhc2guZXZlcnkgPSBldmVyeTtcbiAgICBsb2Rhc2guZmluZCA9IGZpbmQ7XG4gICAgbG9kYXNoLmZpbmRJbmRleCA9IGZpbmRJbmRleDtcbiAgICBsb2Rhc2guZmluZEtleSA9IGZpbmRLZXk7XG4gICAgbG9kYXNoLmZpbmRMYXN0ID0gZmluZExhc3Q7XG4gICAgbG9kYXNoLmZpbmRMYXN0SW5kZXggPSBmaW5kTGFzdEluZGV4O1xuICAgIGxvZGFzaC5maW5kTGFzdEtleSA9IGZpbmRMYXN0S2V5O1xuICAgIGxvZGFzaC5mbG9vciA9IGZsb29yO1xuICAgIGxvZGFzaC5mb3JFYWNoID0gZm9yRWFjaDtcbiAgICBsb2Rhc2guZm9yRWFjaFJpZ2h0ID0gZm9yRWFjaFJpZ2h0O1xuICAgIGxvZGFzaC5mb3JJbiA9IGZvckluO1xuICAgIGxvZGFzaC5mb3JJblJpZ2h0ID0gZm9ySW5SaWdodDtcbiAgICBsb2Rhc2guZm9yT3duID0gZm9yT3duO1xuICAgIGxvZGFzaC5mb3JPd25SaWdodCA9IGZvck93blJpZ2h0O1xuICAgIGxvZGFzaC5nZXQgPSBnZXQ7XG4gICAgbG9kYXNoLmd0ID0gZ3Q7XG4gICAgbG9kYXNoLmd0ZSA9IGd0ZTtcbiAgICBsb2Rhc2guaGFzID0gaGFzO1xuICAgIGxvZGFzaC5oYXNJbiA9IGhhc0luO1xuICAgIGxvZGFzaC5oZWFkID0gaGVhZDtcbiAgICBsb2Rhc2guaWRlbnRpdHkgPSBpZGVudGl0eTtcbiAgICBsb2Rhc2guaW5jbHVkZXMgPSBpbmNsdWRlcztcbiAgICBsb2Rhc2guaW5kZXhPZiA9IGluZGV4T2Y7XG4gICAgbG9kYXNoLmluUmFuZ2UgPSBpblJhbmdlO1xuICAgIGxvZGFzaC5pbnZva2UgPSBpbnZva2U7XG4gICAgbG9kYXNoLmlzQXJndW1lbnRzID0gaXNBcmd1bWVudHM7XG4gICAgbG9kYXNoLmlzQXJyYXkgPSBpc0FycmF5O1xuICAgIGxvZGFzaC5pc0FycmF5QnVmZmVyID0gaXNBcnJheUJ1ZmZlcjtcbiAgICBsb2Rhc2guaXNBcnJheUxpa2UgPSBpc0FycmF5TGlrZTtcbiAgICBsb2Rhc2guaXNBcnJheUxpa2VPYmplY3QgPSBpc0FycmF5TGlrZU9iamVjdDtcbiAgICBsb2Rhc2guaXNCb29sZWFuID0gaXNCb29sZWFuO1xuICAgIGxvZGFzaC5pc0J1ZmZlciA9IGlzQnVmZmVyO1xuICAgIGxvZGFzaC5pc0RhdGUgPSBpc0RhdGU7XG4gICAgbG9kYXNoLmlzRWxlbWVudCA9IGlzRWxlbWVudDtcbiAgICBsb2Rhc2guaXNFbXB0eSA9IGlzRW1wdHk7XG4gICAgbG9kYXNoLmlzRXF1YWwgPSBpc0VxdWFsO1xuICAgIGxvZGFzaC5pc0VxdWFsV2l0aCA9IGlzRXF1YWxXaXRoO1xuICAgIGxvZGFzaC5pc0Vycm9yID0gaXNFcnJvcjtcbiAgICBsb2Rhc2guaXNGaW5pdGUgPSBpc0Zpbml0ZTtcbiAgICBsb2Rhc2guaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG4gICAgbG9kYXNoLmlzSW50ZWdlciA9IGlzSW50ZWdlcjtcbiAgICBsb2Rhc2guaXNMZW5ndGggPSBpc0xlbmd0aDtcbiAgICBsb2Rhc2guaXNNYXAgPSBpc01hcDtcbiAgICBsb2Rhc2guaXNNYXRjaCA9IGlzTWF0Y2g7XG4gICAgbG9kYXNoLmlzTWF0Y2hXaXRoID0gaXNNYXRjaFdpdGg7XG4gICAgbG9kYXNoLmlzTmFOID0gaXNOYU47XG4gICAgbG9kYXNoLmlzTmF0aXZlID0gaXNOYXRpdmU7XG4gICAgbG9kYXNoLmlzTmlsID0gaXNOaWw7XG4gICAgbG9kYXNoLmlzTnVsbCA9IGlzTnVsbDtcbiAgICBsb2Rhc2guaXNOdW1iZXIgPSBpc051bWJlcjtcbiAgICBsb2Rhc2guaXNPYmplY3QgPSBpc09iamVjdDtcbiAgICBsb2Rhc2guaXNPYmplY3RMaWtlID0gaXNPYmplY3RMaWtlO1xuICAgIGxvZGFzaC5pc1BsYWluT2JqZWN0ID0gaXNQbGFpbk9iamVjdDtcbiAgICBsb2Rhc2guaXNSZWdFeHAgPSBpc1JlZ0V4cDtcbiAgICBsb2Rhc2guaXNTYWZlSW50ZWdlciA9IGlzU2FmZUludGVnZXI7XG4gICAgbG9kYXNoLmlzU2V0ID0gaXNTZXQ7XG4gICAgbG9kYXNoLmlzU3RyaW5nID0gaXNTdHJpbmc7XG4gICAgbG9kYXNoLmlzU3ltYm9sID0gaXNTeW1ib2w7XG4gICAgbG9kYXNoLmlzVHlwZWRBcnJheSA9IGlzVHlwZWRBcnJheTtcbiAgICBsb2Rhc2guaXNVbmRlZmluZWQgPSBpc1VuZGVmaW5lZDtcbiAgICBsb2Rhc2guaXNXZWFrTWFwID0gaXNXZWFrTWFwO1xuICAgIGxvZGFzaC5pc1dlYWtTZXQgPSBpc1dlYWtTZXQ7XG4gICAgbG9kYXNoLmpvaW4gPSBqb2luO1xuICAgIGxvZGFzaC5rZWJhYkNhc2UgPSBrZWJhYkNhc2U7XG4gICAgbG9kYXNoLmxhc3QgPSBsYXN0O1xuICAgIGxvZGFzaC5sYXN0SW5kZXhPZiA9IGxhc3RJbmRleE9mO1xuICAgIGxvZGFzaC5sb3dlckNhc2UgPSBsb3dlckNhc2U7XG4gICAgbG9kYXNoLmxvd2VyRmlyc3QgPSBsb3dlckZpcnN0O1xuICAgIGxvZGFzaC5sdCA9IGx0O1xuICAgIGxvZGFzaC5sdGUgPSBsdGU7XG4gICAgbG9kYXNoLm1heCA9IG1heDtcbiAgICBsb2Rhc2gubWF4QnkgPSBtYXhCeTtcbiAgICBsb2Rhc2gubWVhbiA9IG1lYW47XG4gICAgbG9kYXNoLm1lYW5CeSA9IG1lYW5CeTtcbiAgICBsb2Rhc2gubWluID0gbWluO1xuICAgIGxvZGFzaC5taW5CeSA9IG1pbkJ5O1xuICAgIGxvZGFzaC5zdHViQXJyYXkgPSBzdHViQXJyYXk7XG4gICAgbG9kYXNoLnN0dWJGYWxzZSA9IHN0dWJGYWxzZTtcbiAgICBsb2Rhc2guc3R1Yk9iamVjdCA9IHN0dWJPYmplY3Q7XG4gICAgbG9kYXNoLnN0dWJTdHJpbmcgPSBzdHViU3RyaW5nO1xuICAgIGxvZGFzaC5zdHViVHJ1ZSA9IHN0dWJUcnVlO1xuICAgIGxvZGFzaC5tdWx0aXBseSA9IG11bHRpcGx5O1xuICAgIGxvZGFzaC5udGggPSBudGg7XG4gICAgbG9kYXNoLm5vQ29uZmxpY3QgPSBub0NvbmZsaWN0O1xuICAgIGxvZGFzaC5ub29wID0gbm9vcDtcbiAgICBsb2Rhc2gubm93ID0gbm93O1xuICAgIGxvZGFzaC5wYWQgPSBwYWQ7XG4gICAgbG9kYXNoLnBhZEVuZCA9IHBhZEVuZDtcbiAgICBsb2Rhc2gucGFkU3RhcnQgPSBwYWRTdGFydDtcbiAgICBsb2Rhc2gucGFyc2VJbnQgPSBwYXJzZUludDtcbiAgICBsb2Rhc2gucmFuZG9tID0gcmFuZG9tO1xuICAgIGxvZGFzaC5yZWR1Y2UgPSByZWR1Y2U7XG4gICAgbG9kYXNoLnJlZHVjZVJpZ2h0ID0gcmVkdWNlUmlnaHQ7XG4gICAgbG9kYXNoLnJlcGVhdCA9IHJlcGVhdDtcbiAgICBsb2Rhc2gucmVwbGFjZSA9IHJlcGxhY2U7XG4gICAgbG9kYXNoLnJlc3VsdCA9IHJlc3VsdDtcbiAgICBsb2Rhc2gucm91bmQgPSByb3VuZDtcbiAgICBsb2Rhc2gucnVuSW5Db250ZXh0ID0gcnVuSW5Db250ZXh0O1xuICAgIGxvZGFzaC5zYW1wbGUgPSBzYW1wbGU7XG4gICAgbG9kYXNoLnNpemUgPSBzaXplO1xuICAgIGxvZGFzaC5zbmFrZUNhc2UgPSBzbmFrZUNhc2U7XG4gICAgbG9kYXNoLnNvbWUgPSBzb21lO1xuICAgIGxvZGFzaC5zb3J0ZWRJbmRleCA9IHNvcnRlZEluZGV4O1xuICAgIGxvZGFzaC5zb3J0ZWRJbmRleEJ5ID0gc29ydGVkSW5kZXhCeTtcbiAgICBsb2Rhc2guc29ydGVkSW5kZXhPZiA9IHNvcnRlZEluZGV4T2Y7XG4gICAgbG9kYXNoLnNvcnRlZExhc3RJbmRleCA9IHNvcnRlZExhc3RJbmRleDtcbiAgICBsb2Rhc2guc29ydGVkTGFzdEluZGV4QnkgPSBzb3J0ZWRMYXN0SW5kZXhCeTtcbiAgICBsb2Rhc2guc29ydGVkTGFzdEluZGV4T2YgPSBzb3J0ZWRMYXN0SW5kZXhPZjtcbiAgICBsb2Rhc2guc3RhcnRDYXNlID0gc3RhcnRDYXNlO1xuICAgIGxvZGFzaC5zdGFydHNXaXRoID0gc3RhcnRzV2l0aDtcbiAgICBsb2Rhc2guc3VidHJhY3QgPSBzdWJ0cmFjdDtcbiAgICBsb2Rhc2guc3VtID0gc3VtO1xuICAgIGxvZGFzaC5zdW1CeSA9IHN1bUJ5O1xuICAgIGxvZGFzaC50ZW1wbGF0ZSA9IHRlbXBsYXRlO1xuICAgIGxvZGFzaC50aW1lcyA9IHRpbWVzO1xuICAgIGxvZGFzaC50b0Zpbml0ZSA9IHRvRmluaXRlO1xuICAgIGxvZGFzaC50b0ludGVnZXIgPSB0b0ludGVnZXI7XG4gICAgbG9kYXNoLnRvTGVuZ3RoID0gdG9MZW5ndGg7XG4gICAgbG9kYXNoLnRvTG93ZXIgPSB0b0xvd2VyO1xuICAgIGxvZGFzaC50b051bWJlciA9IHRvTnVtYmVyO1xuICAgIGxvZGFzaC50b1NhZmVJbnRlZ2VyID0gdG9TYWZlSW50ZWdlcjtcbiAgICBsb2Rhc2gudG9TdHJpbmcgPSB0b1N0cmluZztcbiAgICBsb2Rhc2gudG9VcHBlciA9IHRvVXBwZXI7XG4gICAgbG9kYXNoLnRyaW0gPSB0cmltO1xuICAgIGxvZGFzaC50cmltRW5kID0gdHJpbUVuZDtcbiAgICBsb2Rhc2gudHJpbVN0YXJ0ID0gdHJpbVN0YXJ0O1xuICAgIGxvZGFzaC50cnVuY2F0ZSA9IHRydW5jYXRlO1xuICAgIGxvZGFzaC51bmVzY2FwZSA9IHVuZXNjYXBlO1xuICAgIGxvZGFzaC51bmlxdWVJZCA9IHVuaXF1ZUlkO1xuICAgIGxvZGFzaC51cHBlckNhc2UgPSB1cHBlckNhc2U7XG4gICAgbG9kYXNoLnVwcGVyRmlyc3QgPSB1cHBlckZpcnN0O1xuXG4gICAgLy8gQWRkIGFsaWFzZXMuXG4gICAgbG9kYXNoLmVhY2ggPSBmb3JFYWNoO1xuICAgIGxvZGFzaC5lYWNoUmlnaHQgPSBmb3JFYWNoUmlnaHQ7XG4gICAgbG9kYXNoLmZpcnN0ID0gaGVhZDtcblxuICAgIG1peGluKGxvZGFzaCwgKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNvdXJjZSA9IHt9O1xuICAgICAgYmFzZUZvck93bihsb2Rhc2gsIGZ1bmN0aW9uKGZ1bmMsIG1ldGhvZE5hbWUpIHtcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wZXJ0eS5jYWxsKGxvZGFzaC5wcm90b3R5cGUsIG1ldGhvZE5hbWUpKSB7XG4gICAgICAgICAgc291cmNlW21ldGhvZE5hbWVdID0gZnVuYztcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gc291cmNlO1xuICAgIH0oKSksIHsgJ2NoYWluJzogZmFsc2UgfSk7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBUaGUgc2VtYW50aWMgdmVyc2lvbiBudW1iZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIGxvZGFzaC5WRVJTSU9OID0gVkVSU0lPTjtcblxuICAgIC8vIEFzc2lnbiBkZWZhdWx0IHBsYWNlaG9sZGVycy5cbiAgICBhcnJheUVhY2goWydiaW5kJywgJ2JpbmRLZXknLCAnY3VycnknLCAnY3VycnlSaWdodCcsICdwYXJ0aWFsJywgJ3BhcnRpYWxSaWdodCddLCBmdW5jdGlvbihtZXRob2ROYW1lKSB7XG4gICAgICBsb2Rhc2hbbWV0aG9kTmFtZV0ucGxhY2Vob2xkZXIgPSBsb2Rhc2g7XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYExhenlXcmFwcGVyYCBtZXRob2RzIGZvciBgXy5kcm9wYCBhbmQgYF8udGFrZWAgdmFyaWFudHMuXG4gICAgYXJyYXlFYWNoKFsnZHJvcCcsICd0YWtlJ10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUsIGluZGV4KSB7XG4gICAgICBMYXp5V3JhcHBlci5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbihuKSB7XG4gICAgICAgIG4gPSBuID09PSB1bmRlZmluZWQgPyAxIDogbmF0aXZlTWF4KHRvSW50ZWdlcihuKSwgMCk7XG5cbiAgICAgICAgdmFyIHJlc3VsdCA9ICh0aGlzLl9fZmlsdGVyZWRfXyAmJiAhaW5kZXgpXG4gICAgICAgICAgPyBuZXcgTGF6eVdyYXBwZXIodGhpcylcbiAgICAgICAgICA6IHRoaXMuY2xvbmUoKTtcblxuICAgICAgICBpZiAocmVzdWx0Ll9fZmlsdGVyZWRfXykge1xuICAgICAgICAgIHJlc3VsdC5fX3Rha2VDb3VudF9fID0gbmF0aXZlTWluKG4sIHJlc3VsdC5fX3Rha2VDb3VudF9fKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXN1bHQuX192aWV3c19fLnB1c2goe1xuICAgICAgICAgICAgJ3NpemUnOiBuYXRpdmVNaW4obiwgTUFYX0FSUkFZX0xFTkdUSCksXG4gICAgICAgICAgICAndHlwZSc6IG1ldGhvZE5hbWUgKyAocmVzdWx0Ll9fZGlyX18gPCAwID8gJ1JpZ2h0JyA6ICcnKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuXG4gICAgICBMYXp5V3JhcHBlci5wcm90b3R5cGVbbWV0aG9kTmFtZSArICdSaWdodCddID0gZnVuY3Rpb24obikge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXZlcnNlKClbbWV0aG9kTmFtZV0obikucmV2ZXJzZSgpO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIEFkZCBgTGF6eVdyYXBwZXJgIG1ldGhvZHMgdGhhdCBhY2NlcHQgYW4gYGl0ZXJhdGVlYCB2YWx1ZS5cbiAgICBhcnJheUVhY2goWydmaWx0ZXInLCAnbWFwJywgJ3Rha2VXaGlsZSddLCBmdW5jdGlvbihtZXRob2ROYW1lLCBpbmRleCkge1xuICAgICAgdmFyIHR5cGUgPSBpbmRleCArIDEsXG4gICAgICAgICAgaXNGaWx0ZXIgPSB0eXBlID09IExBWllfRklMVEVSX0ZMQUcgfHwgdHlwZSA9PSBMQVpZX1dISUxFX0ZMQUc7XG5cbiAgICAgIExhenlXcmFwcGVyLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKGl0ZXJhdGVlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSB0aGlzLmNsb25lKCk7XG4gICAgICAgIHJlc3VsdC5fX2l0ZXJhdGVlc19fLnB1c2goe1xuICAgICAgICAgICdpdGVyYXRlZSc6IGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSxcbiAgICAgICAgICAndHlwZSc6IHR5cGVcbiAgICAgICAgfSk7XG4gICAgICAgIHJlc3VsdC5fX2ZpbHRlcmVkX18gPSByZXN1bHQuX19maWx0ZXJlZF9fIHx8IGlzRmlsdGVyO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIEFkZCBgTGF6eVdyYXBwZXJgIG1ldGhvZHMgZm9yIGBfLmhlYWRgIGFuZCBgXy5sYXN0YC5cbiAgICBhcnJheUVhY2goWydoZWFkJywgJ2xhc3QnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSwgaW5kZXgpIHtcbiAgICAgIHZhciB0YWtlTmFtZSA9ICd0YWtlJyArIChpbmRleCA/ICdSaWdodCcgOiAnJyk7XG5cbiAgICAgIExhenlXcmFwcGVyLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpc1t0YWtlTmFtZV0oMSkudmFsdWUoKVswXTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYExhenlXcmFwcGVyYCBtZXRob2RzIGZvciBgXy5pbml0aWFsYCBhbmQgYF8udGFpbGAuXG4gICAgYXJyYXlFYWNoKFsnaW5pdGlhbCcsICd0YWlsJ10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUsIGluZGV4KSB7XG4gICAgICB2YXIgZHJvcE5hbWUgPSAnZHJvcCcgKyAoaW5kZXggPyAnJyA6ICdSaWdodCcpO1xuXG4gICAgICBMYXp5V3JhcHBlci5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX19maWx0ZXJlZF9fID8gbmV3IExhenlXcmFwcGVyKHRoaXMpIDogdGhpc1tkcm9wTmFtZV0oMSk7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLmNvbXBhY3QgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmZpbHRlcihpZGVudGl0eSk7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5maW5kID0gZnVuY3Rpb24ocHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gdGhpcy5maWx0ZXIocHJlZGljYXRlKS5oZWFkKCk7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5maW5kTGFzdCA9IGZ1bmN0aW9uKHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIHRoaXMucmV2ZXJzZSgpLmZpbmQocHJlZGljYXRlKTtcbiAgICB9O1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLmludm9rZU1hcCA9IGJhc2VSZXN0KGZ1bmN0aW9uKHBhdGgsIGFyZ3MpIHtcbiAgICAgIGlmICh0eXBlb2YgcGF0aCA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBuZXcgTGF6eVdyYXBwZXIodGhpcyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VJbnZva2UodmFsdWUsIHBhdGgsIGFyZ3MpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUucmVqZWN0ID0gZnVuY3Rpb24ocHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gdGhpcy5maWx0ZXIobmVnYXRlKGdldEl0ZXJhdGVlKHByZWRpY2F0ZSkpKTtcbiAgICB9O1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgICAgc3RhcnQgPSB0b0ludGVnZXIoc3RhcnQpO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gdGhpcztcbiAgICAgIGlmIChyZXN1bHQuX19maWx0ZXJlZF9fICYmIChzdGFydCA+IDAgfHwgZW5kIDwgMCkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBMYXp5V3JhcHBlcihyZXN1bHQpO1xuICAgICAgfVxuICAgICAgaWYgKHN0YXJ0IDwgMCkge1xuICAgICAgICByZXN1bHQgPSByZXN1bHQudGFrZVJpZ2h0KC1zdGFydCk7XG4gICAgICB9IGVsc2UgaWYgKHN0YXJ0KSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdC5kcm9wKHN0YXJ0KTtcbiAgICAgIH1cbiAgICAgIGlmIChlbmQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBlbmQgPSB0b0ludGVnZXIoZW5kKTtcbiAgICAgICAgcmVzdWx0ID0gZW5kIDwgMCA/IHJlc3VsdC5kcm9wUmlnaHQoLWVuZCkgOiByZXN1bHQudGFrZShlbmQgLSBzdGFydCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUudGFrZVJpZ2h0V2hpbGUgPSBmdW5jdGlvbihwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiB0aGlzLnJldmVyc2UoKS50YWtlV2hpbGUocHJlZGljYXRlKS5yZXZlcnNlKCk7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS50b0FycmF5ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy50YWtlKE1BWF9BUlJBWV9MRU5HVEgpO1xuICAgIH07XG5cbiAgICAvLyBBZGQgYExhenlXcmFwcGVyYCBtZXRob2RzIHRvIGBsb2Rhc2gucHJvdG90eXBlYC5cbiAgICBiYXNlRm9yT3duKExhenlXcmFwcGVyLnByb3RvdHlwZSwgZnVuY3Rpb24oZnVuYywgbWV0aG9kTmFtZSkge1xuICAgICAgdmFyIGNoZWNrSXRlcmF0ZWUgPSAvXig/OmZpbHRlcnxmaW5kfG1hcHxyZWplY3QpfFdoaWxlJC8udGVzdChtZXRob2ROYW1lKSxcbiAgICAgICAgICBpc1Rha2VyID0gL14oPzpoZWFkfGxhc3QpJC8udGVzdChtZXRob2ROYW1lKSxcbiAgICAgICAgICBsb2Rhc2hGdW5jID0gbG9kYXNoW2lzVGFrZXIgPyAoJ3Rha2UnICsgKG1ldGhvZE5hbWUgPT0gJ2xhc3QnID8gJ1JpZ2h0JyA6ICcnKSkgOiBtZXRob2ROYW1lXSxcbiAgICAgICAgICByZXRVbndyYXBwZWQgPSBpc1Rha2VyIHx8IC9eZmluZC8udGVzdChtZXRob2ROYW1lKTtcblxuICAgICAgaWYgKCFsb2Rhc2hGdW5jKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGxvZGFzaC5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gdGhpcy5fX3dyYXBwZWRfXyxcbiAgICAgICAgICAgIGFyZ3MgPSBpc1Rha2VyID8gWzFdIDogYXJndW1lbnRzLFxuICAgICAgICAgICAgaXNMYXp5ID0gdmFsdWUgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcixcbiAgICAgICAgICAgIGl0ZXJhdGVlID0gYXJnc1swXSxcbiAgICAgICAgICAgIHVzZUxhenkgPSBpc0xhenkgfHwgaXNBcnJheSh2YWx1ZSk7XG5cbiAgICAgICAgdmFyIGludGVyY2VwdG9yID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gbG9kYXNoRnVuYy5hcHBseShsb2Rhc2gsIGFycmF5UHVzaChbdmFsdWVdLCBhcmdzKSk7XG4gICAgICAgICAgcmV0dXJuIChpc1Rha2VyICYmIGNoYWluQWxsKSA/IHJlc3VsdFswXSA6IHJlc3VsdDtcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAodXNlTGF6eSAmJiBjaGVja0l0ZXJhdGVlICYmIHR5cGVvZiBpdGVyYXRlZSA9PSAnZnVuY3Rpb24nICYmIGl0ZXJhdGVlLmxlbmd0aCAhPSAxKSB7XG4gICAgICAgICAgLy8gQXZvaWQgbGF6eSB1c2UgaWYgdGhlIGl0ZXJhdGVlIGhhcyBhIFwibGVuZ3RoXCIgdmFsdWUgb3RoZXIgdGhhbiBgMWAuXG4gICAgICAgICAgaXNMYXp5ID0gdXNlTGF6eSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjaGFpbkFsbCA9IHRoaXMuX19jaGFpbl9fLFxuICAgICAgICAgICAgaXNIeWJyaWQgPSAhIXRoaXMuX19hY3Rpb25zX18ubGVuZ3RoLFxuICAgICAgICAgICAgaXNVbndyYXBwZWQgPSByZXRVbndyYXBwZWQgJiYgIWNoYWluQWxsLFxuICAgICAgICAgICAgb25seUxhenkgPSBpc0xhenkgJiYgIWlzSHlicmlkO1xuXG4gICAgICAgIGlmICghcmV0VW53cmFwcGVkICYmIHVzZUxhenkpIHtcbiAgICAgICAgICB2YWx1ZSA9IG9ubHlMYXp5ID8gdmFsdWUgOiBuZXcgTGF6eVdyYXBwZXIodGhpcyk7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IGZ1bmMuYXBwbHkodmFsdWUsIGFyZ3MpO1xuICAgICAgICAgIHJlc3VsdC5fX2FjdGlvbnNfXy5wdXNoKHsgJ2Z1bmMnOiB0aHJ1LCAnYXJncyc6IFtpbnRlcmNlcHRvcl0sICd0aGlzQXJnJzogdW5kZWZpbmVkIH0pO1xuICAgICAgICAgIHJldHVybiBuZXcgTG9kYXNoV3JhcHBlcihyZXN1bHQsIGNoYWluQWxsKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNVbndyYXBwZWQgJiYgb25seUxhenkpIHtcbiAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQgPSB0aGlzLnRocnUoaW50ZXJjZXB0b3IpO1xuICAgICAgICByZXR1cm4gaXNVbndyYXBwZWQgPyAoaXNUYWtlciA/IHJlc3VsdC52YWx1ZSgpWzBdIDogcmVzdWx0LnZhbHVlKCkpIDogcmVzdWx0O1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIEFkZCBgQXJyYXlgIG1ldGhvZHMgdG8gYGxvZGFzaC5wcm90b3R5cGVgLlxuICAgIGFycmF5RWFjaChbJ3BvcCcsICdwdXNoJywgJ3NoaWZ0JywgJ3NvcnQnLCAnc3BsaWNlJywgJ3Vuc2hpZnQnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSkge1xuICAgICAgdmFyIGZ1bmMgPSBhcnJheVByb3RvW21ldGhvZE5hbWVdLFxuICAgICAgICAgIGNoYWluTmFtZSA9IC9eKD86cHVzaHxzb3J0fHVuc2hpZnQpJC8udGVzdChtZXRob2ROYW1lKSA/ICd0YXAnIDogJ3RocnUnLFxuICAgICAgICAgIHJldFVud3JhcHBlZCA9IC9eKD86cG9wfHNoaWZ0KSQvLnRlc3QobWV0aG9kTmFtZSk7XG5cbiAgICAgIGxvZGFzaC5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIGlmIChyZXRVbndyYXBwZWQgJiYgIXRoaXMuX19jaGFpbl9fKSB7XG4gICAgICAgICAgdmFyIHZhbHVlID0gdGhpcy52YWx1ZSgpO1xuICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KGlzQXJyYXkodmFsdWUpID8gdmFsdWUgOiBbXSwgYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXNbY2hhaW5OYW1lXShmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KGlzQXJyYXkodmFsdWUpID8gdmFsdWUgOiBbXSwgYXJncyk7XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIE1hcCBtaW5pZmllZCBtZXRob2QgbmFtZXMgdG8gdGhlaXIgcmVhbCBuYW1lcy5cbiAgICBiYXNlRm9yT3duKExhenlXcmFwcGVyLnByb3RvdHlwZSwgZnVuY3Rpb24oZnVuYywgbWV0aG9kTmFtZSkge1xuICAgICAgdmFyIGxvZGFzaEZ1bmMgPSBsb2Rhc2hbbWV0aG9kTmFtZV07XG4gICAgICBpZiAobG9kYXNoRnVuYykge1xuICAgICAgICB2YXIga2V5ID0gKGxvZGFzaEZ1bmMubmFtZSArICcnKSxcbiAgICAgICAgICAgIG5hbWVzID0gcmVhbE5hbWVzW2tleV0gfHwgKHJlYWxOYW1lc1trZXldID0gW10pO1xuXG4gICAgICAgIG5hbWVzLnB1c2goeyAnbmFtZSc6IG1ldGhvZE5hbWUsICdmdW5jJzogbG9kYXNoRnVuYyB9KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJlYWxOYW1lc1tjcmVhdGVIeWJyaWQodW5kZWZpbmVkLCBXUkFQX0JJTkRfS0VZX0ZMQUcpLm5hbWVdID0gW3tcbiAgICAgICduYW1lJzogJ3dyYXBwZXInLFxuICAgICAgJ2Z1bmMnOiB1bmRlZmluZWRcbiAgICB9XTtcblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBMYXp5V3JhcHBlcmAuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLmNsb25lID0gbGF6eUNsb25lO1xuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5yZXZlcnNlID0gbGF6eVJldmVyc2U7XG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLnZhbHVlID0gbGF6eVZhbHVlO1xuXG4gICAgLy8gQWRkIGNoYWluIHNlcXVlbmNlIG1ldGhvZHMgdG8gdGhlIGBsb2Rhc2hgIHdyYXBwZXIuXG4gICAgbG9kYXNoLnByb3RvdHlwZS5hdCA9IHdyYXBwZXJBdDtcbiAgICBsb2Rhc2gucHJvdG90eXBlLmNoYWluID0gd3JhcHBlckNoYWluO1xuICAgIGxvZGFzaC5wcm90b3R5cGUuY29tbWl0ID0gd3JhcHBlckNvbW1pdDtcbiAgICBsb2Rhc2gucHJvdG90eXBlLm5leHQgPSB3cmFwcGVyTmV4dDtcbiAgICBsb2Rhc2gucHJvdG90eXBlLnBsYW50ID0gd3JhcHBlclBsYW50O1xuICAgIGxvZGFzaC5wcm90b3R5cGUucmV2ZXJzZSA9IHdyYXBwZXJSZXZlcnNlO1xuICAgIGxvZGFzaC5wcm90b3R5cGUudG9KU09OID0gbG9kYXNoLnByb3RvdHlwZS52YWx1ZU9mID0gbG9kYXNoLnByb3RvdHlwZS52YWx1ZSA9IHdyYXBwZXJWYWx1ZTtcblxuICAgIC8vIEFkZCBsYXp5IGFsaWFzZXMuXG4gICAgbG9kYXNoLnByb3RvdHlwZS5maXJzdCA9IGxvZGFzaC5wcm90b3R5cGUuaGVhZDtcblxuICAgIGlmIChzeW1JdGVyYXRvcikge1xuICAgICAgbG9kYXNoLnByb3RvdHlwZVtzeW1JdGVyYXRvcl0gPSB3cmFwcGVyVG9JdGVyYXRvcjtcbiAgICB9XG4gICAgcmV0dXJuIGxvZGFzaDtcbiAgfSk7XG5cbiAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgLy8gRXhwb3J0IGxvZGFzaC5cbiAgdmFyIF8gPSBydW5JbkNvbnRleHQoKTtcblxuICAvLyBTb21lIEFNRCBidWlsZCBvcHRpbWl6ZXJzLCBsaWtlIHIuanMsIGNoZWNrIGZvciBjb25kaXRpb24gcGF0dGVybnMgbGlrZTpcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZGVmaW5lLmFtZCA9PSAnb2JqZWN0JyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgLy8gRXhwb3NlIExvZGFzaCBvbiB0aGUgZ2xvYmFsIG9iamVjdCB0byBwcmV2ZW50IGVycm9ycyB3aGVuIExvZGFzaCBpc1xuICAgIC8vIGxvYWRlZCBieSBhIHNjcmlwdCB0YWcgaW4gdGhlIHByZXNlbmNlIG9mIGFuIEFNRCBsb2FkZXIuXG4gICAgLy8gU2VlIGh0dHA6Ly9yZXF1aXJlanMub3JnL2RvY3MvZXJyb3JzLmh0bWwjbWlzbWF0Y2ggZm9yIG1vcmUgZGV0YWlscy5cbiAgICAvLyBVc2UgYF8ubm9Db25mbGljdGAgdG8gcmVtb3ZlIExvZGFzaCBmcm9tIHRoZSBnbG9iYWwgb2JqZWN0LlxuICAgIHJvb3QuXyA9IF87XG5cbiAgICAvLyBEZWZpbmUgYXMgYW4gYW5vbnltb3VzIG1vZHVsZSBzbywgdGhyb3VnaCBwYXRoIG1hcHBpbmcsIGl0IGNhbiBiZVxuICAgIC8vIHJlZmVyZW5jZWQgYXMgdGhlIFwidW5kZXJzY29yZVwiIG1vZHVsZS5cbiAgICBkZWZpbmUoZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gXztcbiAgICB9KTtcbiAgfVxuICAvLyBDaGVjayBmb3IgYGV4cG9ydHNgIGFmdGVyIGBkZWZpbmVgIGluIGNhc2UgYSBidWlsZCBvcHRpbWl6ZXIgYWRkcyBpdC5cbiAgZWxzZSBpZiAoZnJlZU1vZHVsZSkge1xuICAgIC8vIEV4cG9ydCBmb3IgTm9kZS5qcy5cbiAgICAoZnJlZU1vZHVsZS5leHBvcnRzID0gXykuXyA9IF87XG4gICAgLy8gRXhwb3J0IGZvciBDb21tb25KUyBzdXBwb3J0LlxuICAgIGZyZWVFeHBvcnRzLl8gPSBfO1xuICB9XG4gIGVsc2Uge1xuICAgIC8vIEV4cG9ydCB0byB0aGUgZ2xvYmFsIG9iamVjdC5cbiAgICByb290Ll8gPSBfO1xuICB9XG59LmNhbGwodGhpcykpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwic3RhdGljL2ljb21vb24uM2M1NDQ5Zi5lb3RcIjsiLCJpbXBvcnQgeyBQbHVnaW5PYmplY3QgfSBmcm9tIFwidnVlXCI7XHJcbmltcG9ydCBYYkNoZWNrYm94R3JvdXAgZnJvbSBcIkAveGItY2hlY2tib3gvc3JjL3hiLWNoZWNrYm94LWdyb3VwLnZ1ZVwiO1xyXG5leHBvcnQgZGVmYXVsdCBYYkNoZWNrYm94R3JvdXA7XHJcblxyXG5leHBvcnQgY29uc3QgeGJDaGVja2JveEdyb3VwOiBQbHVnaW5PYmplY3Q8WGJDaGVja2JveEdyb3VwPiA9IHtcclxuICBpbnN0YWxsOiAoVnVlKSA9PiB7XHJcbiAgICBWdWUuY29tcG9uZW50KFwiWGJDaGVja2JveEdyb3VwXCIsIFhiQ2hlY2tib3hHcm91cCk7XHJcbiAgfSxcclxufTtcclxuIiwibW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdkaXYnKSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQ7XG4vLyB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0JyBpbiBvbGQgSUVcbnZhciBpcyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpcyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuIiwidmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBhcnJheUluZGV4T2YgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpKGZhbHNlKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBuYW1lcykge1xuICB2YXIgTyA9IHRvSU9iamVjdChvYmplY3QpO1xuICB2YXIgaSA9IDA7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gTykgaWYgKGtleSAhPSBJRV9QUk9UTykgaGFzKE8sIGtleSkgJiYgcmVzdWx0LnB1c2goa2V5KTtcbiAgLy8gRG9uJ3QgZW51bSBidWcgJiBoaWRkZW4ga2V5c1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkgaWYgKGhhcyhPLCBrZXkgPSBuYW1lc1tpKytdKSkge1xuICAgIH5hcnJheUluZGV4T2YocmVzdWx0LCBrZXkpIHx8IHJlc3VsdC5wdXNoKGtleSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCIvLyBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIGFuZCBub24tZW51bWVyYWJsZSBvbGQgVjggc3RyaW5nc1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QoJ3onKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKSA/IE9iamVjdCA6IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gY29mKGl0KSA9PSAnU3RyaW5nJyA/IGl0LnNwbGl0KCcnKSA6IE9iamVjdChpdCk7XG59O1xuIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGl0KS5zbGljZSg4LCAtMSk7XG59O1xuIiwiLy8gNy4xLjEzIFRvT2JqZWN0KGFyZ3VtZW50KVxudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgJGl0ZXJDcmVhdGUgPSByZXF1aXJlKCcuL19pdGVyLWNyZWF0ZScpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIEJVR0dZID0gIShbXS5rZXlzICYmICduZXh0JyBpbiBbXS5rZXlzKCkpOyAvLyBTYWZhcmkgaGFzIGJ1Z2d5IGl0ZXJhdG9ycyB3L28gYG5leHRgXG52YXIgRkZfSVRFUkFUT1IgPSAnQEBpdGVyYXRvcic7XG52YXIgS0VZUyA9ICdrZXlzJztcbnZhciBWQUxVRVMgPSAndmFsdWVzJztcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChCYXNlLCBOQU1FLCBDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpIHtcbiAgJGl0ZXJDcmVhdGUoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpO1xuICB2YXIgZ2V0TWV0aG9kID0gZnVuY3Rpb24gKGtpbmQpIHtcbiAgICBpZiAoIUJVR0dZICYmIGtpbmQgaW4gcHJvdG8pIHJldHVybiBwcm90b1traW5kXTtcbiAgICBzd2l0Y2ggKGtpbmQpIHtcbiAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgICBjYXNlIFZBTFVFUzogcmV0dXJuIGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICB9IHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICB9O1xuICB2YXIgVEFHID0gTkFNRSArICcgSXRlcmF0b3InO1xuICB2YXIgREVGX1ZBTFVFUyA9IERFRkFVTFQgPT0gVkFMVUVTO1xuICB2YXIgVkFMVUVTX0JVRyA9IGZhbHNlO1xuICB2YXIgcHJvdG8gPSBCYXNlLnByb3RvdHlwZTtcbiAgdmFyICRuYXRpdmUgPSBwcm90b1tJVEVSQVRPUl0gfHwgcHJvdG9bRkZfSVRFUkFUT1JdIHx8IERFRkFVTFQgJiYgcHJvdG9bREVGQVVMVF07XG4gIHZhciAkZGVmYXVsdCA9ICRuYXRpdmUgfHwgZ2V0TWV0aG9kKERFRkFVTFQpO1xuICB2YXIgJGVudHJpZXMgPSBERUZBVUxUID8gIURFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZCgnZW50cmllcycpIDogdW5kZWZpbmVkO1xuICB2YXIgJGFueU5hdGl2ZSA9IE5BTUUgPT0gJ0FycmF5JyA/IHByb3RvLmVudHJpZXMgfHwgJG5hdGl2ZSA6ICRuYXRpdmU7XG4gIHZhciBtZXRob2RzLCBrZXksIEl0ZXJhdG9yUHJvdG90eXBlO1xuICAvLyBGaXggbmF0aXZlXG4gIGlmICgkYW55TmF0aXZlKSB7XG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZigkYW55TmF0aXZlLmNhbGwobmV3IEJhc2UoKSkpO1xuICAgIGlmIChJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSAmJiBJdGVyYXRvclByb3RvdHlwZS5uZXh0KSB7XG4gICAgICAvLyBTZXQgQEB0b1N0cmluZ1RhZyB0byBuYXRpdmUgaXRlcmF0b3JzXG4gICAgICBzZXRUb1N0cmluZ1RhZyhJdGVyYXRvclByb3RvdHlwZSwgVEFHLCB0cnVlKTtcbiAgICAgIC8vIGZpeCBmb3Igc29tZSBvbGQgZW5naW5lc1xuICAgICAgaWYgKCFMSUJSQVJZICYmIHR5cGVvZiBJdGVyYXRvclByb3RvdHlwZVtJVEVSQVRPUl0gIT0gJ2Z1bmN0aW9uJykgaGlkZShJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IsIHJldHVyblRoaXMpO1xuICAgIH1cbiAgfVxuICAvLyBmaXggQXJyYXkje3ZhbHVlcywgQEBpdGVyYXRvcn0ubmFtZSBpbiBWOCAvIEZGXG4gIGlmIChERUZfVkFMVUVTICYmICRuYXRpdmUgJiYgJG5hdGl2ZS5uYW1lICE9PSBWQUxVRVMpIHtcbiAgICBWQUxVRVNfQlVHID0gdHJ1ZTtcbiAgICAkZGVmYXVsdCA9IGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuICRuYXRpdmUuY2FsbCh0aGlzKTsgfTtcbiAgfVxuICAvLyBEZWZpbmUgaXRlcmF0b3JcbiAgaWYgKCghTElCUkFSWSB8fCBGT1JDRUQpICYmIChCVUdHWSB8fCBWQUxVRVNfQlVHIHx8ICFwcm90b1tJVEVSQVRPUl0pKSB7XG4gICAgaGlkZShwcm90bywgSVRFUkFUT1IsICRkZWZhdWx0KTtcbiAgfVxuICAvLyBQbHVnIGZvciBsaWJyYXJ5XG4gIEl0ZXJhdG9yc1tOQU1FXSA9ICRkZWZhdWx0O1xuICBJdGVyYXRvcnNbVEFHXSA9IHJldHVyblRoaXM7XG4gIGlmIChERUZBVUxUKSB7XG4gICAgbWV0aG9kcyA9IHtcbiAgICAgIHZhbHVlczogREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKFZBTFVFUyksXG4gICAgICBrZXlzOiBJU19TRVQgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChLRVlTKSxcbiAgICAgIGVudHJpZXM6ICRlbnRyaWVzXG4gICAgfTtcbiAgICBpZiAoRk9SQ0VEKSBmb3IgKGtleSBpbiBtZXRob2RzKSB7XG4gICAgICBpZiAoIShrZXkgaW4gcHJvdG8pKSByZWRlZmluZShwcm90bywga2V5LCBtZXRob2RzW2tleV0pO1xuICAgIH0gZWxzZSAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChCVUdHWSB8fCBWQUxVRVNfQlVHKSwgTkFNRSwgbWV0aG9kcyk7XG4gIH1cbiAgcmV0dXJuIG1ldGhvZHM7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19oaWRlJyk7XG4iLCIvLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGRQcyA9IHJlcXVpcmUoJy4vX29iamVjdC1kcHMnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcbnZhciBFbXB0eSA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxuLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGZha2UgYG51bGxgIHByb3RvdHlwZTogdXNlIGlmcmFtZSBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZVxudmFyIGNyZWF0ZURpY3QgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIFRocmFzaCwgd2FzdGUgYW5kIHNvZG9teTogSUUgR0MgYnVnXG4gIHZhciBpZnJhbWUgPSByZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2lmcmFtZScpO1xuICB2YXIgaSA9IGVudW1CdWdLZXlzLmxlbmd0aDtcbiAgdmFyIGx0ID0gJzwnO1xuICB2YXIgZ3QgPSAnPic7XG4gIHZhciBpZnJhbWVEb2N1bWVudDtcbiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIHJlcXVpcmUoJy4vX2h0bWwnKS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICBpZnJhbWUuc3JjID0gJ2phdmFzY3JpcHQ6JzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zY3JpcHQtdXJsXG4gIC8vIGNyZWF0ZURpY3QgPSBpZnJhbWUuY29udGVudFdpbmRvdy5PYmplY3Q7XG4gIC8vIGh0bWwucmVtb3ZlQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgaWZyYW1lRG9jdW1lbnQub3BlbigpO1xuICBpZnJhbWVEb2N1bWVudC53cml0ZShsdCArICdzY3JpcHQnICsgZ3QgKyAnZG9jdW1lbnQuRj1PYmplY3QnICsgbHQgKyAnL3NjcmlwdCcgKyBndCk7XG4gIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XG4gIGNyZWF0ZURpY3QgPSBpZnJhbWVEb2N1bWVudC5GO1xuICB3aGlsZSAoaS0tKSBkZWxldGUgY3JlYXRlRGljdFtQUk9UT1RZUEVdW2VudW1CdWdLZXlzW2ldXTtcbiAgcmV0dXJuIGNyZWF0ZURpY3QoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoTyAhPT0gbnVsbCkge1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBhbk9iamVjdChPKTtcbiAgICByZXN1bHQgPSBuZXcgRW1wdHkoKTtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gbnVsbDtcbiAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXG4gICAgcmVzdWx0W0lFX1BST1RPXSA9IE87XG4gIH0gZWxzZSByZXN1bHQgPSBjcmVhdGVEaWN0KCk7XG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiBkUHMocmVzdWx0LCBQcm9wZXJ0aWVzKTtcbn07XG4iLCIvLyAxOS4xLjIuNyAvIDE1LjIuMy40IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJykuY29uY2F0KCdsZW5ndGgnLCAncHJvdG90eXBlJyk7XG5cbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICByZXR1cm4gJGtleXMoTywgaGlkZGVuS2V5cyk7XG59O1xuIiwiaW1wb3J0IHsgUGx1Z2luT2JqZWN0IH0gZnJvbSBcInZ1ZVwiO1xyXG5pbXBvcnQgWGJQb3B0aXAgZnJvbSBcIi4vc3JjL3hiLXBvcHRpcC52dWVcIjtcclxuZXhwb3J0IGRlZmF1bHQgWGJQb3B0aXA7XHJcblxyXG5leHBvcnQgY29uc3QgeGJQb3B0aXA6IFBsdWdpbk9iamVjdDxYYlBvcHRpcD4gPSB7XHJcbiAgaW5zdGFsbDogKFZ1ZSkgPT4ge1xyXG4gICAgVnVlLmNvbXBvbmVudChcIlhiUG9wdGlwXCIsIFhiUG9wdGlwKTtcclxuICB9LFxyXG59O1xyXG4iLCJpbXBvcnQgeyBDb21wb25lbnQsIFByb3AsIFZ1ZSB9IGZyb20gXCJ2dWUtcHJvcGVydHktZGVjb3JhdG9yXCI7XHJcblxyXG5AQ29tcG9uZW50XHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFhiVGFibGVNaXhpbiBleHRlbmRzIFZ1ZSB7XHJcbiAgYWxpZ25DbHMoY29sdW1uLCByb3cgPSB7fSkge1xyXG4gICAgbGV0IGNlbGxDbGFzc05hbWUgPSBcIlwiO1xyXG4gICAgaWYgKHJvdy5jZWxsQ2xhc3NOYW1lICYmIGNvbHVtbi5rZXkgJiYgcm93LmNlbGxDbGFzc05hbWVbY29sdW1uLmtleV0pIHtcclxuICAgICAgY2VsbENsYXNzTmFtZSA9IHJvdy5jZWxsQ2xhc3NOYW1lW2NvbHVtbi5rZXldO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFtcclxuICAgICAge1xyXG4gICAgICAgIFtgJHtjZWxsQ2xhc3NOYW1lfWBdOiBjZWxsQ2xhc3NOYW1lLCAvLyBjZWxsIGNsYXNzTmFtZVxyXG4gICAgICAgIFtgJHtjb2x1bW4uY2xhc3NOYW1lfWBdOiBjb2x1bW4uY2xhc3NOYW1lLCAvLyBjb2x1bW4gY2xhc3NOYW1lXHJcbiAgICAgICAgW2Ake3RoaXMucHJlZml4Q2xzfS1jb2x1bW4tJHtjb2x1bW4uYWxpZ259YF06IGNvbHVtbi5hbGlnbixcclxuICAgICAgICBbYCR7dGhpcy5wcmVmaXhDbHN9LWhpZGRlbmBdOlxyXG4gICAgICAgICAgKHRoaXMuZml4ZWQgPT09IFwibGVmdFwiICYmIGNvbHVtbi5maXhlZCAhPT0gXCJsZWZ0XCIpIHx8XHJcbiAgICAgICAgICAodGhpcy5maXhlZCA9PT0gXCJyaWdodFwiICYmIGNvbHVtbi5maXhlZCAhPT0gXCJyaWdodFwiKSB8fFxyXG4gICAgICAgICAgKCF0aGlzLmZpeGVkICYmIGNvbHVtbi5maXhlZCAmJiAoY29sdW1uLmZpeGVkID09PSBcImxlZnRcIiB8fCBjb2x1bW4uZml4ZWQgPT09IFwicmlnaHRcIikpLFxyXG4gICAgICB9LFxyXG4gICAgXTtcclxuICB9XHJcbiAgaXNQb3BwZXJTaG93KGNvbHVtbikge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgY29sdW1uLmZpbHRlcnMgJiZcclxuICAgICAgKCghdGhpcy5maXhlZCAmJiAhY29sdW1uLmZpeGVkKSB8fFxyXG4gICAgICAgICh0aGlzLmZpeGVkID09PSBcImxlZnRcIiAmJiBjb2x1bW4uZml4ZWQgPT09IFwibGVmdFwiKSB8fFxyXG4gICAgICAgICh0aGlzLmZpeGVkID09PSBcInJpZ2h0XCIgJiYgY29sdW1uLmZpeGVkID09PSBcInJpZ2h0XCIpKVxyXG4gICAgKTtcclxuICB9XHJcbiAgc2V0Q2VsbFdpZHRoKGNvbHVtbikge1xyXG4gICAgbGV0IHdpZHRoID0gXCJcIjtcclxuICAgIGlmIChjb2x1bW4ud2lkdGgpIHtcclxuICAgICAgd2lkdGggPSBjb2x1bW4ud2lkdGg7XHJcbiAgICB9IGVsc2UgaWYgKHRoaXMuY29sdW1uc1dpZHRoW2NvbHVtbi5faW5kZXhdKSB7XHJcbiAgICAgIHdpZHRoID0gdGhpcy5jb2x1bW5zV2lkdGhbY29sdW1uLl9pbmRleF0ud2lkdGg7XHJcbiAgICB9XHJcbiAgICBpZiAod2lkdGggPT09IFwiMFwiKSB7XHJcbiAgICAgIHdpZHRoID0gXCJcIjtcclxuICAgIH1cclxuICAgIHJldHVybiB3aWR0aDtcclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQge1xyXG4gIG5hbWU6IFwiVGFibGVFeHBhbmRcIixcclxuICBmdW5jdGlvbmFsOiB0cnVlLFxyXG4gIHByb3BzOiB7XHJcbiAgICByb3c6IE9iamVjdCxcclxuICAgIHJlbmRlcjogRnVuY3Rpb24sXHJcbiAgICBpbmRleDogTnVtYmVyLFxyXG4gICAgY29sdW1uOiB7XHJcbiAgICAgIHR5cGU6IE9iamVjdCxcclxuICAgICAgZGVmYXVsdDogbnVsbCxcclxuICAgIH0sXHJcbiAgfSxcclxuICByZW5kZXI6IChoLCBjdHgpID0+IHtcclxuICAgIGNvbnN0IHBhcmFtcyA9IHtcclxuICAgICAgcm93OiBjdHgucHJvcHMucm93LFxyXG4gICAgICBpbmRleDogY3R4LnByb3BzLmluZGV4LFxyXG4gICAgICBjb2x1bW46IHVuZGVmaW5lZCxcclxuICAgIH07XHJcbiAgICBpZiAoY3R4LnByb3BzLmNvbHVtbikge1xyXG4gICAgICBwYXJhbXMuY29sdW1uID0gY3R4LnByb3BzLmNvbHVtbjtcclxuICAgIH1cclxuICAgIHJldHVybiBjdHgucHJvcHMucmVuZGVyKGgsIHBhcmFtcyk7XHJcbiAgfSxcclxufTtcclxuIiwidmFyIGJhc2VDbG9uZSA9IHJlcXVpcmUoJy4vX2Jhc2VDbG9uZScpO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciBjbG9uaW5nLiAqL1xudmFyIENMT05FX0RFRVBfRkxBRyA9IDEsXG4gICAgQ0xPTkVfU1lNQk9MU19GTEFHID0gNDtcblxuLyoqXG4gKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmNsb25lYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBjbG9uZXMgYHZhbHVlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDEuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcmVjdXJzaXZlbHkgY2xvbmUuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZGVlcCBjbG9uZWQgdmFsdWUuXG4gKiBAc2VlIF8uY2xvbmVcbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdHMgPSBbeyAnYSc6IDEgfSwgeyAnYic6IDIgfV07XG4gKlxuICogdmFyIGRlZXAgPSBfLmNsb25lRGVlcChvYmplY3RzKTtcbiAqIGNvbnNvbGUubG9nKGRlZXBbMF0gPT09IG9iamVjdHNbMF0pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gY2xvbmVEZWVwKHZhbHVlKSB7XG4gIHJldHVybiBiYXNlQ2xvbmUodmFsdWUsIENMT05FX0RFRVBfRkxBRyB8IENMT05FX1NZTUJPTFNfRkxBRyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2xvbmVEZWVwO1xuIiwiLyoqXG4gKiBQZXJmb3JtcyBhXG4gKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICogY29tcGFyaXNvbiBiZXR3ZWVuIHR3byB2YWx1ZXMgdG8gZGV0ZXJtaW5lIGlmIHRoZXkgYXJlIGVxdWl2YWxlbnQuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gKiB2YXIgb3RoZXIgPSB7ICdhJzogMSB9O1xuICpcbiAqIF8uZXEob2JqZWN0LCBvYmplY3QpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uZXEob2JqZWN0LCBvdGhlcik7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uZXEoJ2EnLCAnYScpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uZXEoJ2EnLCBPYmplY3QoJ2EnKSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uZXEoTmFOLCBOYU4pO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBlcSh2YWx1ZSwgb3RoZXIpIHtcbiAgcmV0dXJuIHZhbHVlID09PSBvdGhlciB8fCAodmFsdWUgIT09IHZhbHVlICYmIG90aGVyICE9PSBvdGhlcik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXE7XG4iLCJ2YXIgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFzeW5jVGFnID0gJ1tvYmplY3QgQXN5bmNGdW5jdGlvbl0nLFxuICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgIGdlblRhZyA9ICdbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXScsXG4gICAgcHJveHlUYWcgPSAnW29iamVjdCBQcm94eV0nO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgRnVuY3Rpb25gIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGZ1bmN0aW9uLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNGdW5jdGlvbihfKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzRnVuY3Rpb24oL2FiYy8pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvLyBUaGUgdXNlIG9mIGBPYmplY3QjdG9TdHJpbmdgIGF2b2lkcyBpc3N1ZXMgd2l0aCB0aGUgYHR5cGVvZmAgb3BlcmF0b3JcbiAgLy8gaW4gU2FmYXJpIDkgd2hpY2ggcmV0dXJucyAnb2JqZWN0JyBmb3IgdHlwZWQgYXJyYXlzIGFuZCBvdGhlciBjb25zdHJ1Y3RvcnMuXG4gIHZhciB0YWcgPSBiYXNlR2V0VGFnKHZhbHVlKTtcbiAgcmV0dXJuIHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWcgfHwgdGFnID09IGFzeW5jVGFnIHx8IHRhZyA9PSBwcm94eVRhZztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0Z1bmN0aW9uO1xuIiwiLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwgJiYgZ2xvYmFsLk9iamVjdCA9PT0gT2JqZWN0ICYmIGdsb2JhbDtcblxubW9kdWxlLmV4cG9ydHMgPSBmcmVlR2xvYmFsO1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xudmFyIGZ1bmNUb1N0cmluZyA9IGZ1bmNQcm90by50b1N0cmluZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgZnVuY2AgdG8gaXRzIHNvdXJjZSBjb2RlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc291cmNlIGNvZGUuXG4gKi9cbmZ1bmN0aW9uIHRvU291cmNlKGZ1bmMpIHtcbiAgaWYgKGZ1bmMgIT0gbnVsbCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gZnVuY1RvU3RyaW5nLmNhbGwoZnVuYyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgICB0cnkge1xuICAgICAgcmV0dXJuIChmdW5jICsgJycpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH1cbiAgcmV0dXJuICcnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRvU291cmNlO1xuIiwidmFyIGJhc2VBc3NpZ25WYWx1ZSA9IHJlcXVpcmUoJy4vX2Jhc2VBc3NpZ25WYWx1ZScpLFxuICAgIGVxID0gcmVxdWlyZSgnLi9lcScpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEFzc2lnbnMgYHZhbHVlYCB0byBga2V5YCBvZiBgb2JqZWN0YCBpZiB0aGUgZXhpc3RpbmcgdmFsdWUgaXMgbm90IGVxdWl2YWxlbnRcbiAqIHVzaW5nIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAqL1xuZnVuY3Rpb24gYXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHZhciBvYmpWYWx1ZSA9IG9iamVjdFtrZXldO1xuICBpZiAoIShoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSAmJiBlcShvYmpWYWx1ZSwgdmFsdWUpKSB8fFxuICAgICAgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkpIHtcbiAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFzc2lnblZhbHVlO1xuIiwidmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fZGVmaW5lUHJvcGVydHknKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgYXNzaWduVmFsdWVgIGFuZCBgYXNzaWduTWVyZ2VWYWx1ZWAgd2l0aG91dFxuICogdmFsdWUgY2hlY2tzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSA9PSAnX19wcm90b19fJyAmJiBkZWZpbmVQcm9wZXJ0eSkge1xuICAgIGRlZmluZVByb3BlcnR5KG9iamVjdCwga2V5LCB7XG4gICAgICAnY29uZmlndXJhYmxlJzogdHJ1ZSxcbiAgICAgICdlbnVtZXJhYmxlJzogdHJ1ZSxcbiAgICAgICd2YWx1ZSc6IHZhbHVlLFxuICAgICAgJ3dyaXRhYmxlJzogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlQXNzaWduVmFsdWU7XG4iLCJ2YXIgYmFzZVRpbWVzID0gcmVxdWlyZSgnLi9fYmFzZVRpbWVzJyksXG4gICAgaXNBcmd1bWVudHMgPSByZXF1aXJlKCcuL2lzQXJndW1lbnRzJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpLFxuICAgIGlzQnVmZmVyID0gcmVxdWlyZSgnLi9pc0J1ZmZlcicpLFxuICAgIGlzSW5kZXggPSByZXF1aXJlKCcuL19pc0luZGV4JyksXG4gICAgaXNUeXBlZEFycmF5ID0gcmVxdWlyZSgnLi9pc1R5cGVkQXJyYXknKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIHRoZSBhcnJheS1saWtlIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtib29sZWFufSBpbmhlcml0ZWQgU3BlY2lmeSByZXR1cm5pbmcgaW5oZXJpdGVkIHByb3BlcnR5IG5hbWVzLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gYXJyYXlMaWtlS2V5cyh2YWx1ZSwgaW5oZXJpdGVkKSB7XG4gIHZhciBpc0FyciA9IGlzQXJyYXkodmFsdWUpLFxuICAgICAgaXNBcmcgPSAhaXNBcnIgJiYgaXNBcmd1bWVudHModmFsdWUpLFxuICAgICAgaXNCdWZmID0gIWlzQXJyICYmICFpc0FyZyAmJiBpc0J1ZmZlcih2YWx1ZSksXG4gICAgICBpc1R5cGUgPSAhaXNBcnIgJiYgIWlzQXJnICYmICFpc0J1ZmYgJiYgaXNUeXBlZEFycmF5KHZhbHVlKSxcbiAgICAgIHNraXBJbmRleGVzID0gaXNBcnIgfHwgaXNBcmcgfHwgaXNCdWZmIHx8IGlzVHlwZSxcbiAgICAgIHJlc3VsdCA9IHNraXBJbmRleGVzID8gYmFzZVRpbWVzKHZhbHVlLmxlbmd0aCwgU3RyaW5nKSA6IFtdLFxuICAgICAgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aDtcblxuICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICBpZiAoKGluaGVyaXRlZCB8fCBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBrZXkpKSAmJlxuICAgICAgICAhKHNraXBJbmRleGVzICYmIChcbiAgICAgICAgICAgLy8gU2FmYXJpIDkgaGFzIGVudW1lcmFibGUgYGFyZ3VtZW50cy5sZW5ndGhgIGluIHN0cmljdCBtb2RlLlxuICAgICAgICAgICBrZXkgPT0gJ2xlbmd0aCcgfHxcbiAgICAgICAgICAgLy8gTm9kZS5qcyAwLjEwIGhhcyBlbnVtZXJhYmxlIG5vbi1pbmRleCBwcm9wZXJ0aWVzIG9uIGJ1ZmZlcnMuXG4gICAgICAgICAgIChpc0J1ZmYgJiYgKGtleSA9PSAnb2Zmc2V0JyB8fCBrZXkgPT0gJ3BhcmVudCcpKSB8fFxuICAgICAgICAgICAvLyBQaGFudG9tSlMgMiBoYXMgZW51bWVyYWJsZSBub24taW5kZXggcHJvcGVydGllcyBvbiB0eXBlZCBhcnJheXMuXG4gICAgICAgICAgIChpc1R5cGUgJiYgKGtleSA9PSAnYnVmZmVyJyB8fCBrZXkgPT0gJ2J5dGVMZW5ndGgnIHx8IGtleSA9PSAnYnl0ZU9mZnNldCcpKSB8fFxuICAgICAgICAgICAvLyBTa2lwIGluZGV4IHByb3BlcnRpZXMuXG4gICAgICAgICAgIGlzSW5kZXgoa2V5LCBsZW5ndGgpXG4gICAgICAgICkpKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFycmF5TGlrZUtleXM7XG4iLCJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKSxcbiAgICBzdHViRmFsc2UgPSByZXF1aXJlKCcuL3N0dWJGYWxzZScpO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xudmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgJiYgZXhwb3J0cyAmJiAhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYG1vZHVsZWAuICovXG52YXIgZnJlZU1vZHVsZSA9IGZyZWVFeHBvcnRzICYmIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXG4vKiogRGV0ZWN0IHRoZSBwb3B1bGFyIENvbW1vbkpTIGV4dGVuc2lvbiBgbW9kdWxlLmV4cG9ydHNgLiAqL1xudmFyIG1vZHVsZUV4cG9ydHMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUuZXhwb3J0cyA9PT0gZnJlZUV4cG9ydHM7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIEJ1ZmZlciA9IG1vZHVsZUV4cG9ydHMgPyByb290LkJ1ZmZlciA6IHVuZGVmaW5lZDtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZUlzQnVmZmVyID0gQnVmZmVyID8gQnVmZmVyLmlzQnVmZmVyIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4zLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNCdWZmZXIobmV3IEJ1ZmZlcigyKSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0J1ZmZlcihuZXcgVWludDhBcnJheSgyKSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNCdWZmZXIgPSBuYXRpdmVJc0J1ZmZlciB8fCBzdHViRmFsc2U7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNCdWZmZXI7XG4iLCIvKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgbGVuZ3RoLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uXG4gKiBbYFRvTGVuZ3RoYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdG9sZW5ndGgpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgbGVuZ3RoLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNMZW5ndGgoMyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0xlbmd0aChOdW1iZXIuTUlOX1ZBTFVFKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0xlbmd0aChJbmZpbml0eSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNMZW5ndGgoJzMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTGVuZ3RoKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiZcbiAgICB2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDw9IE1BWF9TQUZFX0lOVEVHRVI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNMZW5ndGg7XG4iLCIvKipcbiAqIENyZWF0ZXMgYSB1bmFyeSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggaXRzIGFyZ3VtZW50IHRyYW5zZm9ybWVkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gdHJhbnNmb3JtIFRoZSBhcmd1bWVudCB0cmFuc2Zvcm0uXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gb3ZlckFyZyhmdW5jLCB0cmFuc2Zvcm0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiBmdW5jKHRyYW5zZm9ybShhcmcpKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBvdmVyQXJnO1xuIiwidmFyIGlzRnVuY3Rpb24gPSByZXF1aXJlKCcuL2lzRnVuY3Rpb24nKSxcbiAgICBpc0xlbmd0aCA9IHJlcXVpcmUoJy4vaXNMZW5ndGgnKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLiBBIHZhbHVlIGlzIGNvbnNpZGVyZWQgYXJyYXktbGlrZSBpZiBpdCdzXG4gKiBub3QgYSBmdW5jdGlvbiBhbmQgaGFzIGEgYHZhbHVlLmxlbmd0aGAgdGhhdCdzIGFuIGludGVnZXIgZ3JlYXRlciB0aGFuIG9yXG4gKiBlcXVhbCB0byBgMGAgYW5kIGxlc3MgdGhhbiBvciBlcXVhbCB0byBgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZSgnYWJjJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUxpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgaXNMZW5ndGgodmFsdWUubGVuZ3RoKSAmJiAhaXNGdW5jdGlvbih2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNBcnJheUxpa2U7XG4iLCJ2YXIgYXJyYXlMaWtlS2V5cyA9IHJlcXVpcmUoJy4vX2FycmF5TGlrZUtleXMnKSxcbiAgICBiYXNlS2V5c0luID0gcmVxdWlyZSgnLi9fYmFzZUtleXNJbicpLFxuICAgIGlzQXJyYXlMaWtlID0gcmVxdWlyZSgnLi9pc0FycmF5TGlrZScpO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgYG9iamVjdGAuXG4gKlxuICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gRm9vKCkge1xuICogICB0aGlzLmEgPSAxO1xuICogICB0aGlzLmIgPSAyO1xuICogfVxuICpcbiAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gKlxuICogXy5rZXlzSW4obmV3IEZvbyk7XG4gKiAvLyA9PiBbJ2EnLCAnYicsICdjJ10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAqL1xuZnVuY3Rpb24ga2V5c0luKG9iamVjdCkge1xuICByZXR1cm4gaXNBcnJheUxpa2Uob2JqZWN0KSA/IGFycmF5TGlrZUtleXMob2JqZWN0LCB0cnVlKSA6IGJhc2VLZXlzSW4ob2JqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBrZXlzSW47XG4iLCIvKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgZW1wdHkgYXJyYXkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjEzLjBcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBlbXB0eSBhcnJheS5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIGFycmF5cyA9IF8udGltZXMoMiwgXy5zdHViQXJyYXkpO1xuICpcbiAqIGNvbnNvbGUubG9nKGFycmF5cyk7XG4gKiAvLyA9PiBbW10sIFtdXVxuICpcbiAqIGNvbnNvbGUubG9nKGFycmF5c1swXSA9PT0gYXJyYXlzWzFdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIHN0dWJBcnJheSgpIHtcbiAgcmV0dXJuIFtdO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0dWJBcnJheTtcbiIsInZhciBhcnJheVB1c2ggPSByZXF1aXJlKCcuL19hcnJheVB1c2gnKSxcbiAgICBnZXRQcm90b3R5cGUgPSByZXF1aXJlKCcuL19nZXRQcm90b3R5cGUnKSxcbiAgICBnZXRTeW1ib2xzID0gcmVxdWlyZSgnLi9fZ2V0U3ltYm9scycpLFxuICAgIHN0dWJBcnJheSA9IHJlcXVpcmUoJy4vc3R1YkFycmF5Jyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVHZXRTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2Ygc3ltYm9scy5cbiAqL1xudmFyIGdldFN5bWJvbHNJbiA9ICFuYXRpdmVHZXRTeW1ib2xzID8gc3R1YkFycmF5IDogZnVuY3Rpb24ob2JqZWN0KSB7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgd2hpbGUgKG9iamVjdCkge1xuICAgIGFycmF5UHVzaChyZXN1bHQsIGdldFN5bWJvbHMob2JqZWN0KSk7XG4gICAgb2JqZWN0ID0gZ2V0UHJvdG90eXBlKG9iamVjdCk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0U3ltYm9sc0luO1xuIiwiLyoqXG4gKiBBcHBlbmRzIHRoZSBlbGVtZW50cyBvZiBgdmFsdWVzYCB0byBgYXJyYXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gYXBwZW5kLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gKi9cbmZ1bmN0aW9uIGFycmF5UHVzaChhcnJheSwgdmFsdWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgIG9mZnNldCA9IGFycmF5Lmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGFycmF5W29mZnNldCArIGluZGV4XSA9IHZhbHVlc1tpbmRleF07XG4gIH1cbiAgcmV0dXJuIGFycmF5O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFycmF5UHVzaDtcbiIsInZhciBvdmVyQXJnID0gcmVxdWlyZSgnLi9fb3ZlckFyZycpO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBnZXRQcm90b3R5cGUgPSBvdmVyQXJnKE9iamVjdC5nZXRQcm90b3R5cGVPZiwgT2JqZWN0KTtcblxubW9kdWxlLmV4cG9ydHMgPSBnZXRQcm90b3R5cGU7XG4iLCJ2YXIgYXJyYXlQdXNoID0gcmVxdWlyZSgnLi9fYXJyYXlQdXNoJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRBbGxLZXlzYCBhbmQgYGdldEFsbEtleXNJbmAgd2hpY2ggdXNlc1xuICogYGtleXNGdW5jYCBhbmQgYHN5bWJvbHNGdW5jYCB0byBnZXQgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kXG4gKiBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGBvYmplY3RgLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gc3ltYm9sc0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5c0Z1bmMsIHN5bWJvbHNGdW5jKSB7XG4gIHZhciByZXN1bHQgPSBrZXlzRnVuYyhvYmplY3QpO1xuICByZXR1cm4gaXNBcnJheShvYmplY3QpID8gcmVzdWx0IDogYXJyYXlQdXNoKHJlc3VsdCwgc3ltYm9sc0Z1bmMob2JqZWN0KSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUdldEFsbEtleXM7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHV0aWxzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLyoqXG4gKiBMb29wcyB0aHJvdWdoIHRoZSBjb2xsZWN0aW9uIGFuZCBjYWxscyB0aGUgY2FsbGJhY2sgZm9yIGVhY2ggZWxlbWVudC4gaWYgdGhlIGNhbGxiYWNrIHJldHVybnMgdHJ1dGh5LCB0aGUgbG9vcCBpcyBicm9rZW4gYW5kIHJldHVybnMgdGhlIHNhbWUgdmFsdWUuXG4gKiBAcHVibGljXG4gKiBAcGFyYW0geyp9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gbG9vcCB0aHJvdWdoLiBOZWVkcyB0byBoYXZlIGEgbGVuZ3RoIHByb3BlcnR5IHNldCBhbmQgaGF2ZSBpbmRpY2VzIHNldCBmcm9tIDAgdG8gbGVuZ3RoIC0gMS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIFRoZSBjYWxsYmFjayB0byBiZSBjYWxsZWQgZm9yIGVhY2ggZWxlbWVudC4gVGhlIGVsZW1lbnQgd2lsbCBiZSBnaXZlbiBhcyBhIHBhcmFtZXRlciB0byB0aGUgY2FsbGJhY2suIElmIHRoaXMgY2FsbGJhY2sgcmV0dXJucyB0cnV0aHksIHRoZSBsb29wIGlzIGJyb2tlbiBhbmQgdGhlIHNhbWUgdmFsdWUgaXMgcmV0dXJuZWQuXG4gKiBAcmV0dXJucyB7Kn0gVGhlIHZhbHVlIHRoYXQgYSBjYWxsYmFjayBoYXMgcmV0dXJuZWQgKGlmIHRydXRoeSkuIE90aGVyd2lzZSBub3RoaW5nLlxuICovXG51dGlscy5mb3JFYWNoID0gZnVuY3Rpb24oY29sbGVjdGlvbiwgY2FsbGJhY2spIHtcbiAgICBmb3IodmFyIGkgPSAwOyBpIDwgY29sbGVjdGlvbi5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgcmVzdWx0ID0gY2FsbGJhY2soY29sbGVjdGlvbltpXSk7XG4gICAgICAgIGlmKHJlc3VsdCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgIH1cbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIGRldGVjdG9yID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuZGV0ZWN0b3IuaXNJRSA9IGZ1bmN0aW9uKHZlcnNpb24pIHtcbiAgICBmdW5jdGlvbiBpc0FueUllVmVyc2lvbigpIHtcbiAgICAgICAgdmFyIGFnZW50ID0gbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpO1xuICAgICAgICByZXR1cm4gYWdlbnQuaW5kZXhPZihcIm1zaWVcIikgIT09IC0xIHx8IGFnZW50LmluZGV4T2YoXCJ0cmlkZW50XCIpICE9PSAtMSB8fCBhZ2VudC5pbmRleE9mKFwiIGVkZ2UvXCIpICE9PSAtMTtcbiAgICB9XG5cbiAgICBpZighaXNBbnlJZVZlcnNpb24oKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYoIXZlcnNpb24pIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLy9TaGFtZWxlc3NseSBzdG9sZW4gZnJvbSBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9wYWRvbHNleS81Mjc2ODNcbiAgICB2YXIgaWVWZXJzaW9uID0gKGZ1bmN0aW9uKCl7XG4gICAgICAgIHZhciB1bmRlZixcbiAgICAgICAgICAgIHYgPSAzLFxuICAgICAgICAgICAgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxcbiAgICAgICAgICAgIGFsbCA9IGRpdi5nZXRFbGVtZW50c0J5VGFnTmFtZShcImlcIik7XG5cbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgZGl2LmlubmVySFRNTCA9IFwiPCEtLVtpZiBndCBJRSBcIiArICgrK3YpICsgXCJdPjxpPjwvaT48IVtlbmRpZl0tLT5cIjtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoYWxsWzBdKTtcblxuICAgICAgICByZXR1cm4gdiA+IDQgPyB2IDogdW5kZWY7XG4gICAgfSgpKTtcblxuICAgIHJldHVybiB2ZXJzaW9uID09PSBpZVZlcnNpb247XG59O1xuXG5kZXRlY3Rvci5pc0xlZ2FjeU9wZXJhID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICEhd2luZG93Lm9wZXJhO1xufTtcbiIsImltcG9ydCBWdWUgZnJvbSBcInZ1ZVwiO1xyXG5pbXBvcnQgQXBwIGZyb20gXCIuL0FwcC52dWVcIjtcclxuaW1wb3J0IHJvdXRlciBmcm9tIFwiLi9yb3V0ZXJcIjtcclxuaW1wb3J0IGRlbW9CbG9jayBmcm9tIFwiLi9jb21wb25lbnRzL2RlbW8tYmxvY2sudnVlXCI7XHJcbmltcG9ydCB7IGNhbWVsQ2FzZSwgdXBwZXJGaXJzdCB9IGZyb20gXCJsb2Rhc2hcIjtcclxuaW1wb3J0IFwiLi4vcGFja2FnZXMvdGhlbWUtY2hhbGsvc3JjL2luZGV4Lmxlc3NcIjtcclxuXHJcbmNvbnN0IHJlcXVpcmVDb21wb25lbnQgPSByZXF1aXJlLmNvbnRleHQoXHJcbiAgLy8g5YW257uE5Lu255uu5b2V55qE55u45a+56Lev5b6EXHJcbiAgXCIuLi9wYWNrYWdlc1wiLFxyXG4gIC8vIOaYr+WQpuafpeivouWFtuWtkOebruW9lVxyXG4gIHRydWUsXHJcbiAgLy8g5Yy56YWN5Z+656GA57uE5Lu25paH5Lu25ZCN55qE5q2j5YiZ6KGo6L6+5byPXHJcbiAgL2luZGV4XFwudHMkL1xyXG4pO1xyXG5cclxucmVxdWlyZUNvbXBvbmVudC5rZXlzKCkuZm9yRWFjaCgoZmlsZU5hbWU6IHN0cmluZykgPT4ge1xyXG4gIGlmIChmaWxlTmFtZSAhPT0gXCJ0aGVtZS1jaGFsa1wiKSB7XHJcbiAgICAvLyDojrflj5bnu4Tku7bphY3nva5cclxuICAgIGNvbnN0IGNvbXBvbmVudENvbmZpZyA9IHJlcXVpcmVDb21wb25lbnQoZmlsZU5hbWUpO1xyXG5cclxuICAgIC8vIOiOt+WPlue7hOS7tueahCBQYXNjYWxDYXNlIOWRveWQjVxyXG4gICAgY29uc3QgY29tcG9uZW50TmFtZSA9IHVwcGVyRmlyc3QoXHJcbiAgICAgIGNhbWVsQ2FzZShcclxuICAgICAgICAvLyDliaXljrvmlofku7blkI3lvIDlpLTnmoQgYC4vYCDlkoznu5PlsL7nmoTmianlsZXlkI1cclxuICAgICAgICBmaWxlTmFtZS5yZXBsYWNlKC9eXFwuXFwvKC4qKVxcL2luZGV4XFwudHMrJC8sIFwiJDFcIilcclxuICAgICAgKVxyXG4gICAgKTtcclxuXHJcbiAgICAvLyDlhajlsYDms6jlhoznu4Tku7ZcclxuICAgIFZ1ZS5jb21wb25lbnQoXHJcbiAgICAgIGNvbXBvbmVudE5hbWUsXHJcbiAgICAgIC8vIOWmguaenOi/meS4que7hOS7tumAiemhueaYr+mAmui/hyBgZXhwb3J0IGRlZmF1bHRgIOWvvOWHuueahO+8jFxyXG4gICAgICAvLyDpgqPkuYjlsLHkvJrkvJjlhYjkvb/nlKggYC5kZWZhdWx0YO+8jFxyXG4gICAgICAvLyDlkKbliJnlm57pgIDliLDkvb/nlKjmqKHlnZfnmoTmoLnjgIJcclxuICAgICAgY29tcG9uZW50Q29uZmlnLmRlZmF1bHQgfHwgY29tcG9uZW50Q29uZmlnXHJcbiAgICApO1xyXG4gICAgaWYgKGNvbXBvbmVudE5hbWUgPT09IFwiWGJNZXNzYWdlVGlwc1wiKSB7XHJcbiAgICAgIFZ1ZS5wcm90b3R5cGUuJG1lc3NhZ2UgPSBjb21wb25lbnRDb25maWcuZGVmYXVsdDtcclxuICAgIH1cclxuICB9XHJcbn0pO1xyXG5WdWUuY29tcG9uZW50KFwiZGVtby1ibG9ja1wiLCBkZW1vQmxvY2spO1xyXG5WdWUuY29uZmlnLnByb2R1Y3Rpb25UaXAgPSBmYWxzZTtcclxud2luZG93LmFwcCA9IG5ldyBWdWUoe1xyXG4gIHJvdXRlcixcclxuICByZW5kZXI6IChoKSA9PiBoKEFwcCksXHJcbn0pLiRtb3VudChcIiNhcHBcIik7XHJcbiIsInZhciBzY29wZSA9ICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbCkgfHxcbiAgICAgICAgICAgICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmKSB8fFxuICAgICAgICAgICAgd2luZG93O1xudmFyIGFwcGx5ID0gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5O1xuXG4vLyBET00gQVBJcywgZm9yIGNvbXBsZXRlbmVzc1xuXG5leHBvcnRzLnNldFRpbWVvdXQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBUaW1lb3V0KGFwcGx5LmNhbGwoc2V0VGltZW91dCwgc2NvcGUsIGFyZ3VtZW50cyksIGNsZWFyVGltZW91dCk7XG59O1xuZXhwb3J0cy5zZXRJbnRlcnZhbCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRJbnRlcnZhbCwgc2NvcGUsIGFyZ3VtZW50cyksIGNsZWFySW50ZXJ2YWwpO1xufTtcbmV4cG9ydHMuY2xlYXJUaW1lb3V0ID1cbmV4cG9ydHMuY2xlYXJJbnRlcnZhbCA9IGZ1bmN0aW9uKHRpbWVvdXQpIHtcbiAgaWYgKHRpbWVvdXQpIHtcbiAgICB0aW1lb3V0LmNsb3NlKCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIFRpbWVvdXQoaWQsIGNsZWFyRm4pIHtcbiAgdGhpcy5faWQgPSBpZDtcbiAgdGhpcy5fY2xlYXJGbiA9IGNsZWFyRm47XG59XG5UaW1lb3V0LnByb3RvdHlwZS51bnJlZiA9IFRpbWVvdXQucHJvdG90eXBlLnJlZiA9IGZ1bmN0aW9uKCkge307XG5UaW1lb3V0LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9jbGVhckZuLmNhbGwoc2NvcGUsIHRoaXMuX2lkKTtcbn07XG5cbi8vIERvZXMgbm90IHN0YXJ0IHRoZSB0aW1lLCBqdXN0IHNldHMgdXAgdGhlIG1lbWJlcnMgbmVlZGVkLlxuZXhwb3J0cy5lbnJvbGwgPSBmdW5jdGlvbihpdGVtLCBtc2Vjcykge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG4gIGl0ZW0uX2lkbGVUaW1lb3V0ID0gbXNlY3M7XG59O1xuXG5leHBvcnRzLnVuZW5yb2xsID0gZnVuY3Rpb24oaXRlbSkge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG4gIGl0ZW0uX2lkbGVUaW1lb3V0ID0gLTE7XG59O1xuXG5leHBvcnRzLl91bnJlZkFjdGl2ZSA9IGV4cG9ydHMuYWN0aXZlID0gZnVuY3Rpb24oaXRlbSkge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG5cbiAgdmFyIG1zZWNzID0gaXRlbS5faWRsZVRpbWVvdXQ7XG4gIGlmIChtc2VjcyA+PSAwKSB7XG4gICAgaXRlbS5faWRsZVRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gb25UaW1lb3V0KCkge1xuICAgICAgaWYgKGl0ZW0uX29uVGltZW91dClcbiAgICAgICAgaXRlbS5fb25UaW1lb3V0KCk7XG4gICAgfSwgbXNlY3MpO1xuICB9XG59O1xuXG4vLyBzZXRpbW1lZGlhdGUgYXR0YWNoZXMgaXRzZWxmIHRvIHRoZSBnbG9iYWwgb2JqZWN0XG5yZXF1aXJlKFwic2V0aW1tZWRpYXRlXCIpO1xuLy8gT24gc29tZSBleG90aWMgZW52aXJvbm1lbnRzLCBpdCdzIG5vdCBjbGVhciB3aGljaCBvYmplY3QgYHNldGltbWVkaWF0ZWAgd2FzXG4vLyBhYmxlIHRvIGluc3RhbGwgb250by4gIFNlYXJjaCBlYWNoIHBvc3NpYmlsaXR5IGluIHRoZSBzYW1lIG9yZGVyIGFzIHRoZVxuLy8gYHNldGltbWVkaWF0ZWAgbGlicmFyeS5cbmV4cG9ydHMuc2V0SW1tZWRpYXRlID0gKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYuc2V0SW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwuc2V0SW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAodGhpcyAmJiB0aGlzLnNldEltbWVkaWF0ZSk7XG5leHBvcnRzLmNsZWFySW1tZWRpYXRlID0gKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYuY2xlYXJJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsLmNsZWFySW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzICYmIHRoaXMuY2xlYXJJbW1lZGlhdGUpO1xuIiwiKGZ1bmN0aW9uIChnbG9iYWwsIHVuZGVmaW5lZCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgaWYgKGdsb2JhbC5zZXRJbW1lZGlhdGUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBuZXh0SGFuZGxlID0gMTsgLy8gU3BlYyBzYXlzIGdyZWF0ZXIgdGhhbiB6ZXJvXG4gICAgdmFyIHRhc2tzQnlIYW5kbGUgPSB7fTtcbiAgICB2YXIgY3VycmVudGx5UnVubmluZ0FUYXNrID0gZmFsc2U7XG4gICAgdmFyIGRvYyA9IGdsb2JhbC5kb2N1bWVudDtcbiAgICB2YXIgcmVnaXN0ZXJJbW1lZGlhdGU7XG5cbiAgICBmdW5jdGlvbiBzZXRJbW1lZGlhdGUoY2FsbGJhY2spIHtcbiAgICAgIC8vIENhbGxiYWNrIGNhbiBlaXRoZXIgYmUgYSBmdW5jdGlvbiBvciBhIHN0cmluZ1xuICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGNhbGxiYWNrID0gbmV3IEZ1bmN0aW9uKFwiXCIgKyBjYWxsYmFjayk7XG4gICAgICB9XG4gICAgICAvLyBDb3B5IGZ1bmN0aW9uIGFyZ3VtZW50c1xuICAgICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpICsgMV07XG4gICAgICB9XG4gICAgICAvLyBTdG9yZSBhbmQgcmVnaXN0ZXIgdGhlIHRhc2tcbiAgICAgIHZhciB0YXNrID0geyBjYWxsYmFjazogY2FsbGJhY2ssIGFyZ3M6IGFyZ3MgfTtcbiAgICAgIHRhc2tzQnlIYW5kbGVbbmV4dEhhbmRsZV0gPSB0YXNrO1xuICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUobmV4dEhhbmRsZSk7XG4gICAgICByZXR1cm4gbmV4dEhhbmRsZSsrO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsZWFySW1tZWRpYXRlKGhhbmRsZSkge1xuICAgICAgICBkZWxldGUgdGFza3NCeUhhbmRsZVtoYW5kbGVdO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJ1bih0YXNrKSB7XG4gICAgICAgIHZhciBjYWxsYmFjayA9IHRhc2suY2FsbGJhY2s7XG4gICAgICAgIHZhciBhcmdzID0gdGFzay5hcmdzO1xuICAgICAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgY2FsbGJhY2soYXJnc1swXSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgY2FsbGJhY2soYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgY2FsbGJhY2soYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGNhbGxiYWNrLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJ1bklmUHJlc2VudChoYW5kbGUpIHtcbiAgICAgICAgLy8gRnJvbSB0aGUgc3BlYzogXCJXYWl0IHVudGlsIGFueSBpbnZvY2F0aW9ucyBvZiB0aGlzIGFsZ29yaXRobSBzdGFydGVkIGJlZm9yZSB0aGlzIG9uZSBoYXZlIGNvbXBsZXRlZC5cIlxuICAgICAgICAvLyBTbyBpZiB3ZSdyZSBjdXJyZW50bHkgcnVubmluZyBhIHRhc2ssIHdlJ2xsIG5lZWQgdG8gZGVsYXkgdGhpcyBpbnZvY2F0aW9uLlxuICAgICAgICBpZiAoY3VycmVudGx5UnVubmluZ0FUYXNrKSB7XG4gICAgICAgICAgICAvLyBEZWxheSBieSBkb2luZyBhIHNldFRpbWVvdXQuIHNldEltbWVkaWF0ZSB3YXMgdHJpZWQgaW5zdGVhZCwgYnV0IGluIEZpcmVmb3ggNyBpdCBnZW5lcmF0ZWQgYVxuICAgICAgICAgICAgLy8gXCJ0b28gbXVjaCByZWN1cnNpb25cIiBlcnJvci5cbiAgICAgICAgICAgIHNldFRpbWVvdXQocnVuSWZQcmVzZW50LCAwLCBoYW5kbGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHRhc2sgPSB0YXNrc0J5SGFuZGxlW2hhbmRsZV07XG4gICAgICAgICAgICBpZiAodGFzaykge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRseVJ1bm5pbmdBVGFzayA9IHRydWU7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcnVuKHRhc2spO1xuICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIGNsZWFySW1tZWRpYXRlKGhhbmRsZSk7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRseVJ1bm5pbmdBVGFzayA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxOZXh0VGlja0ltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiAoKSB7IHJ1bklmUHJlc2VudChoYW5kbGUpOyB9KTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjYW5Vc2VQb3N0TWVzc2FnZSgpIHtcbiAgICAgICAgLy8gVGhlIHRlc3QgYWdhaW5zdCBgaW1wb3J0U2NyaXB0c2AgcHJldmVudHMgdGhpcyBpbXBsZW1lbnRhdGlvbiBmcm9tIGJlaW5nIGluc3RhbGxlZCBpbnNpZGUgYSB3ZWIgd29ya2VyLFxuICAgICAgICAvLyB3aGVyZSBgZ2xvYmFsLnBvc3RNZXNzYWdlYCBtZWFucyBzb21ldGhpbmcgY29tcGxldGVseSBkaWZmZXJlbnQgYW5kIGNhbid0IGJlIHVzZWQgZm9yIHRoaXMgcHVycG9zZS5cbiAgICAgICAgaWYgKGdsb2JhbC5wb3N0TWVzc2FnZSAmJiAhZ2xvYmFsLmltcG9ydFNjcmlwdHMpIHtcbiAgICAgICAgICAgIHZhciBwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhciBvbGRPbk1lc3NhZ2UgPSBnbG9iYWwub25tZXNzYWdlO1xuICAgICAgICAgICAgZ2xvYmFsLm9ubWVzc2FnZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXMgPSBmYWxzZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBnbG9iYWwucG9zdE1lc3NhZ2UoXCJcIiwgXCIqXCIpO1xuICAgICAgICAgICAgZ2xvYmFsLm9ubWVzc2FnZSA9IG9sZE9uTWVzc2FnZTtcbiAgICAgICAgICAgIHJldHVybiBwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbFBvc3RNZXNzYWdlSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIC8vIEluc3RhbGxzIGFuIGV2ZW50IGhhbmRsZXIgb24gYGdsb2JhbGAgZm9yIHRoZSBgbWVzc2FnZWAgZXZlbnQ6IHNlZVxuICAgICAgICAvLyAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL0RPTS93aW5kb3cucG9zdE1lc3NhZ2VcbiAgICAgICAgLy8gKiBodHRwOi8vd3d3LndoYXR3Zy5vcmcvc3BlY3Mvd2ViLWFwcHMvY3VycmVudC13b3JrL211bHRpcGFnZS9jb21tcy5odG1sI2Nyb3NzRG9jdW1lbnRNZXNzYWdlc1xuXG4gICAgICAgIHZhciBtZXNzYWdlUHJlZml4ID0gXCJzZXRJbW1lZGlhdGUkXCIgKyBNYXRoLnJhbmRvbSgpICsgXCIkXCI7XG4gICAgICAgIHZhciBvbkdsb2JhbE1lc3NhZ2UgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgaWYgKGV2ZW50LnNvdXJjZSA9PT0gZ2xvYmFsICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIGV2ZW50LmRhdGEgPT09IFwic3RyaW5nXCIgJiZcbiAgICAgICAgICAgICAgICBldmVudC5kYXRhLmluZGV4T2YobWVzc2FnZVByZWZpeCkgPT09IDApIHtcbiAgICAgICAgICAgICAgICBydW5JZlByZXNlbnQoK2V2ZW50LmRhdGEuc2xpY2UobWVzc2FnZVByZWZpeC5sZW5ndGgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCBvbkdsb2JhbE1lc3NhZ2UsIGZhbHNlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGdsb2JhbC5hdHRhY2hFdmVudChcIm9ubWVzc2FnZVwiLCBvbkdsb2JhbE1lc3NhZ2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShtZXNzYWdlUHJlZml4ICsgaGFuZGxlLCBcIipcIik7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbE1lc3NhZ2VDaGFubmVsSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHZhciBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsKCk7XG4gICAgICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIHZhciBoYW5kbGUgPSBldmVudC5kYXRhO1xuICAgICAgICAgICAgcnVuSWZQcmVzZW50KGhhbmRsZSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIGNoYW5uZWwucG9ydDIucG9zdE1lc3NhZ2UoaGFuZGxlKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsUmVhZHlTdGF0ZUNoYW5nZUltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICB2YXIgaHRtbCA9IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICAvLyBDcmVhdGUgYSA8c2NyaXB0PiBlbGVtZW50OyBpdHMgcmVhZHlzdGF0ZWNoYW5nZSBldmVudCB3aWxsIGJlIGZpcmVkIGFzeW5jaHJvbm91c2x5IG9uY2UgaXQgaXMgaW5zZXJ0ZWRcbiAgICAgICAgICAgIC8vIGludG8gdGhlIGRvY3VtZW50LiBEbyBzbywgdGh1cyBxdWV1aW5nIHVwIHRoZSB0YXNrLiBSZW1lbWJlciB0byBjbGVhbiB1cCBvbmNlIGl0J3MgYmVlbiBjYWxsZWQuXG4gICAgICAgICAgICB2YXIgc2NyaXB0ID0gZG9jLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7XG4gICAgICAgICAgICBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJ1bklmUHJlc2VudChoYW5kbGUpO1xuICAgICAgICAgICAgICAgIHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsO1xuICAgICAgICAgICAgICAgIGh0bWwucmVtb3ZlQ2hpbGQoc2NyaXB0KTtcbiAgICAgICAgICAgICAgICBzY3JpcHQgPSBudWxsO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGh0bWwuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsU2V0VGltZW91dEltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgc2V0VGltZW91dChydW5JZlByZXNlbnQsIDAsIGhhbmRsZSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gSWYgc3VwcG9ydGVkLCB3ZSBzaG91bGQgYXR0YWNoIHRvIHRoZSBwcm90b3R5cGUgb2YgZ2xvYmFsLCBzaW5jZSB0aGF0IGlzIHdoZXJlIHNldFRpbWVvdXQgZXQgYWwuIGxpdmUuXG4gICAgdmFyIGF0dGFjaFRvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mICYmIE9iamVjdC5nZXRQcm90b3R5cGVPZihnbG9iYWwpO1xuICAgIGF0dGFjaFRvID0gYXR0YWNoVG8gJiYgYXR0YWNoVG8uc2V0VGltZW91dCA/IGF0dGFjaFRvIDogZ2xvYmFsO1xuXG4gICAgLy8gRG9uJ3QgZ2V0IGZvb2xlZCBieSBlLmcuIGJyb3dzZXJpZnkgZW52aXJvbm1lbnRzLlxuICAgIGlmICh7fS50b1N0cmluZy5jYWxsKGdsb2JhbC5wcm9jZXNzKSA9PT0gXCJbb2JqZWN0IHByb2Nlc3NdXCIpIHtcbiAgICAgICAgLy8gRm9yIE5vZGUuanMgYmVmb3JlIDAuOVxuICAgICAgICBpbnN0YWxsTmV4dFRpY2tJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIGlmIChjYW5Vc2VQb3N0TWVzc2FnZSgpKSB7XG4gICAgICAgIC8vIEZvciBub24tSUUxMCBtb2Rlcm4gYnJvd3NlcnNcbiAgICAgICAgaW5zdGFsbFBvc3RNZXNzYWdlSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSBpZiAoZ2xvYmFsLk1lc3NhZ2VDaGFubmVsKSB7XG4gICAgICAgIC8vIEZvciB3ZWIgd29ya2Vycywgd2hlcmUgc3VwcG9ydGVkXG4gICAgICAgIGluc3RhbGxNZXNzYWdlQ2hhbm5lbEltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2UgaWYgKGRvYyAmJiBcIm9ucmVhZHlzdGF0ZWNoYW5nZVwiIGluIGRvYy5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpKSB7XG4gICAgICAgIC8vIEZvciBJRSA24oCTOFxuICAgICAgICBpbnN0YWxsUmVhZHlTdGF0ZUNoYW5nZUltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBGb3Igb2xkZXIgYnJvd3NlcnNcbiAgICAgICAgaW5zdGFsbFNldFRpbWVvdXRJbXBsZW1lbnRhdGlvbigpO1xuICAgIH1cblxuICAgIGF0dGFjaFRvLnNldEltbWVkaWF0ZSA9IHNldEltbWVkaWF0ZTtcbiAgICBhdHRhY2hUby5jbGVhckltbWVkaWF0ZSA9IGNsZWFySW1tZWRpYXRlO1xufSh0eXBlb2Ygc2VsZiA9PT0gXCJ1bmRlZmluZWRcIiA/IHR5cGVvZiBnbG9iYWwgPT09IFwidW5kZWZpbmVkXCIgPyB0aGlzIDogZ2xvYmFsIDogc2VsZikpO1xuIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyID0gbm9vcDtcblxucHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gW10gfVxuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcbiIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vQXBwLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0xZWJjYWM0OSZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9BcHAudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9BcHAudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiXG5pbXBvcnQgc3R5bGUwIGZyb20gXCIuL0FwcC52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZsYW5nPWxlc3MmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBudWxsLFxuICBudWxsXG4gIFxuKVxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkge1xuICB2YXIgYXBpID0gcmVxdWlyZShcIkQ6XFxcXFhiLUJhc2ljLUNvbXBvbmVudHNcXFxcbm9kZV9tb2R1bGVzXFxcXHZ1ZS1ob3QtcmVsb2FkLWFwaVxcXFxkaXN0XFxcXGluZGV4LmpzXCIpXG4gIGFwaS5pbnN0YWxsKHJlcXVpcmUoJ3Z1ZScpKVxuICBpZiAoYXBpLmNvbXBhdGlibGUpIHtcbiAgICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gICAgaWYgKCFtb2R1bGUuaG90LmRhdGEpIHtcbiAgICAgIGFwaS5jcmVhdGVSZWNvcmQoJzFlYmNhYzQ5JywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZWxvYWQoJzFlYmNhYzQ5JywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfVxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9BcHAudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTFlYmNhYzQ5JlwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBhcGkucmVyZW5kZXIoJzFlYmNhYzQ5Jywge1xuICAgICAgICByZW5kZXI6IHJlbmRlcixcbiAgICAgICAgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnNcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxufVxuY29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJleGFtcGxlcy9BcHAudnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9oZWFkZXIudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTg4YzQxMTI0JlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL2hlYWRlci52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9dHMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL2hlYWRlci52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9dHMmXCJcbmltcG9ydCBzdHlsZTAgZnJvbSBcIi4vaGVhZGVyLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9bGVzcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIG51bGwsXG4gIG51bGxcbiAgXG4pXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIHZhciBhcGkgPSByZXF1aXJlKFwiRDpcXFxcWGItQmFzaWMtQ29tcG9uZW50c1xcXFxub2RlX21vZHVsZXNcXFxcdnVlLWhvdC1yZWxvYWQtYXBpXFxcXGRpc3RcXFxcaW5kZXguanNcIilcbiAgYXBpLmluc3RhbGwocmVxdWlyZSgndnVlJykpXG4gIGlmIChhcGkuY29tcGF0aWJsZSkge1xuICAgIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgICBpZiAoIW1vZHVsZS5ob3QuZGF0YSkge1xuICAgICAgYXBpLmNyZWF0ZVJlY29yZCgnODhjNDExMjQnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbG9hZCgnODhjNDExMjQnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL2hlYWRlci52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9ODhjNDExMjQmXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGFwaS5yZXJlbmRlcignODhjNDExMjQnLCB7XG4gICAgICAgIHJlbmRlcjogcmVuZGVyLFxuICAgICAgICBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZuc1xuICAgICAgfSlcbiAgICB9KVxuICB9XG59XG5jb21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcImV4YW1wbGVzL2NvbXBvbmVudHMvaGVhZGVyLnZ1ZVwiXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcInN0YXRpYy9iYW5uZXIuNTg4YmI4YS5wbmdcIjsiLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9sZXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL2hlYWRlci52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZsYW5nPWxlc3MmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL2xlc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vaGVhZGVyLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9bGVzcyZcIiIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoZmFsc2UpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiXFxuLnBhZ2UtaGVhZGVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XFxuICBib3gtc2hhZG93OiAwIDEwcHggNjBweCAwIHJnYmEoMjksIDI5LCAzMSwgMC4wNyk7XFxuICBvcGFjaXR5OiAwLjk4O1xcbiAgcG9zaXRpb246IHJlbGF0aXZlICFpbXBvcnRhbnQ7XFxuICB0b3A6IDA7XFxuICBsZWZ0OiAwO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IDgwcHg7XFxuICB0cmFuc2l0aW9uOiBhbGwgMC4zcztcXG4gIHotaW5kZXg6IDEwMDtcXG59XFxuLnBhZ2UtaGVhZGVyIC5oZWFkZXItY29udGFpbmVyIHtcXG4gIHdpZHRoOiA5MCU7XFxuICBtYXJnaW46IDAgYXV0bztcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgaGVpZ2h0OiA4MHB4O1xcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcbn1cXG5cIiwgXCJcIl0pO1xuXG4vLyBleHBvcnRzXG4iLCJcbi8qKlxuICogV2hlbiBzb3VyY2UgbWFwcyBhcmUgZW5hYmxlZCwgYHN0eWxlLWxvYWRlcmAgdXNlcyBhIGxpbmsgZWxlbWVudCB3aXRoIGEgZGF0YS11cmkgdG9cbiAqIGVtYmVkIHRoZSBjc3Mgb24gdGhlIHBhZ2UuIFRoaXMgYnJlYWtzIGFsbCByZWxhdGl2ZSB1cmxzIGJlY2F1c2Ugbm93IHRoZXkgYXJlIHJlbGF0aXZlIHRvIGFcbiAqIGJ1bmRsZSBpbnN0ZWFkIG9mIHRoZSBjdXJyZW50IHBhZ2UuXG4gKlxuICogT25lIHNvbHV0aW9uIGlzIHRvIG9ubHkgdXNlIGZ1bGwgdXJscywgYnV0IHRoYXQgbWF5IGJlIGltcG9zc2libGUuXG4gKlxuICogSW5zdGVhZCwgdGhpcyBmdW5jdGlvbiBcImZpeGVzXCIgdGhlIHJlbGF0aXZlIHVybHMgdG8gYmUgYWJzb2x1dGUgYWNjb3JkaW5nIHRvIHRoZSBjdXJyZW50IHBhZ2UgbG9jYXRpb24uXG4gKlxuICogQSBydWRpbWVudGFyeSB0ZXN0IHN1aXRlIGlzIGxvY2F0ZWQgYXQgYHRlc3QvZml4VXJscy5qc2AgYW5kIGNhbiBiZSBydW4gdmlhIHRoZSBgbnBtIHRlc3RgIGNvbW1hbmQuXG4gKlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzcykge1xuICAvLyBnZXQgY3VycmVudCBsb2NhdGlvblxuICB2YXIgbG9jYXRpb24gPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5sb2NhdGlvbjtcblxuICBpZiAoIWxvY2F0aW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiZml4VXJscyByZXF1aXJlcyB3aW5kb3cubG9jYXRpb25cIik7XG4gIH1cblxuXHQvLyBibGFuayBvciBudWxsP1xuXHRpZiAoIWNzcyB8fCB0eXBlb2YgY3NzICE9PSBcInN0cmluZ1wiKSB7XG5cdCAgcmV0dXJuIGNzcztcbiAgfVxuXG4gIHZhciBiYXNlVXJsID0gbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKyBsb2NhdGlvbi5ob3N0O1xuICB2YXIgY3VycmVudERpciA9IGJhc2VVcmwgKyBsb2NhdGlvbi5wYXRobmFtZS5yZXBsYWNlKC9cXC9bXlxcL10qJC8sIFwiL1wiKTtcblxuXHQvLyBjb252ZXJ0IGVhY2ggdXJsKC4uLilcblx0Lypcblx0VGhpcyByZWd1bGFyIGV4cHJlc3Npb24gaXMganVzdCBhIHdheSB0byByZWN1cnNpdmVseSBtYXRjaCBicmFja2V0cyB3aXRoaW5cblx0YSBzdHJpbmcuXG5cblx0IC91cmxcXHMqXFwoICA9IE1hdGNoIG9uIHRoZSB3b3JkIFwidXJsXCIgd2l0aCBhbnkgd2hpdGVzcGFjZSBhZnRlciBpdCBhbmQgdGhlbiBhIHBhcmVuc1xuXHQgICAoICA9IFN0YXJ0IGEgY2FwdHVyaW5nIGdyb3VwXG5cdCAgICAgKD86ICA9IFN0YXJ0IGEgbm9uLWNhcHR1cmluZyBncm91cFxuXHQgICAgICAgICBbXikoXSAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICBcXCggID0gTWF0Y2ggYSBzdGFydCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgKD86ICA9IFN0YXJ0IGFub3RoZXIgbm9uLWNhcHR1cmluZyBncm91cHNcblx0ICAgICAgICAgICAgICAgICBbXikoXSsgID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICAgICAgICAgIFxcKCAgPSBNYXRjaCBhIHN0YXJ0IHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgICAgIFteKShdKiAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICBcXCkgID0gTWF0Y2ggYSBlbmQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICkgID0gRW5kIEdyb3VwXG4gICAgICAgICAgICAgICpcXCkgPSBNYXRjaCBhbnl0aGluZyBhbmQgdGhlbiBhIGNsb3NlIHBhcmVuc1xuICAgICAgICAgICkgID0gQ2xvc2Ugbm9uLWNhcHR1cmluZyBncm91cFxuICAgICAgICAgICogID0gTWF0Y2ggYW55dGhpbmdcbiAgICAgICApICA9IENsb3NlIGNhcHR1cmluZyBncm91cFxuXHQgXFwpICA9IE1hdGNoIGEgY2xvc2UgcGFyZW5zXG5cblx0IC9naSAgPSBHZXQgYWxsIG1hdGNoZXMsIG5vdCB0aGUgZmlyc3QuICBCZSBjYXNlIGluc2Vuc2l0aXZlLlxuXHQgKi9cblx0dmFyIGZpeGVkQ3NzID0gY3NzLnJlcGxhY2UoL3VybFxccypcXCgoKD86W14pKF18XFwoKD86W14pKF0rfFxcKFteKShdKlxcKSkqXFwpKSopXFwpL2dpLCBmdW5jdGlvbihmdWxsTWF0Y2gsIG9yaWdVcmwpIHtcblx0XHQvLyBzdHJpcCBxdW90ZXMgKGlmIHRoZXkgZXhpc3QpXG5cdFx0dmFyIHVucXVvdGVkT3JpZ1VybCA9IG9yaWdVcmxcblx0XHRcdC50cmltKClcblx0XHRcdC5yZXBsYWNlKC9eXCIoLiopXCIkLywgZnVuY3Rpb24obywgJDEpeyByZXR1cm4gJDE7IH0pXG5cdFx0XHQucmVwbGFjZSgvXicoLiopJyQvLCBmdW5jdGlvbihvLCAkMSl7IHJldHVybiAkMTsgfSk7XG5cblx0XHQvLyBhbHJlYWR5IGEgZnVsbCB1cmw/IG5vIGNoYW5nZVxuXHRcdGlmICgvXigjfGRhdGE6fGh0dHA6XFwvXFwvfGh0dHBzOlxcL1xcL3xmaWxlOlxcL1xcL1xcLykvaS50ZXN0KHVucXVvdGVkT3JpZ1VybCkpIHtcblx0XHQgIHJldHVybiBmdWxsTWF0Y2g7XG5cdFx0fVxuXG5cdFx0Ly8gY29udmVydCB0aGUgdXJsIHRvIGEgZnVsbCB1cmxcblx0XHR2YXIgbmV3VXJsO1xuXG5cdFx0aWYgKHVucXVvdGVkT3JpZ1VybC5pbmRleE9mKFwiLy9cIikgPT09IDApIHtcblx0XHQgIFx0Ly9UT0RPOiBzaG91bGQgd2UgYWRkIHByb3RvY29sP1xuXHRcdFx0bmV3VXJsID0gdW5xdW90ZWRPcmlnVXJsO1xuXHRcdH0gZWxzZSBpZiAodW5xdW90ZWRPcmlnVXJsLmluZGV4T2YoXCIvXCIpID09PSAwKSB7XG5cdFx0XHQvLyBwYXRoIHNob3VsZCBiZSByZWxhdGl2ZSB0byB0aGUgYmFzZSB1cmxcblx0XHRcdG5ld1VybCA9IGJhc2VVcmwgKyB1bnF1b3RlZE9yaWdVcmw7IC8vIGFscmVhZHkgc3RhcnRzIHdpdGggJy8nXG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIHBhdGggc2hvdWxkIGJlIHJlbGF0aXZlIHRvIGN1cnJlbnQgZGlyZWN0b3J5XG5cdFx0XHRuZXdVcmwgPSBjdXJyZW50RGlyICsgdW5xdW90ZWRPcmlnVXJsLnJlcGxhY2UoL15cXC5cXC8vLCBcIlwiKTsgLy8gU3RyaXAgbGVhZGluZyAnLi8nXG5cdFx0fVxuXG5cdFx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCB1cmwoLi4uKVxuXHRcdHJldHVybiBcInVybChcIiArIEpTT04uc3RyaW5naWZ5KG5ld1VybCkgKyBcIilcIjtcblx0fSk7XG5cblx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCBjc3Ncblx0cmV0dXJuIGZpeGVkQ3NzO1xufTtcbiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9pbmRleC5qcyEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vbm9kZV9tb2R1bGVzL2xlc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vQXBwLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9bGVzcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2luZGV4LmpzIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi9ub2RlX21vZHVsZXMvbGVzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9BcHAudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1sZXNzJlwiIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKShmYWxzZSk7XG4vLyBpbXBvcnRzXG5leHBvcnRzLmkocmVxdWlyZShcIi0hLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vbm9kZV9tb2R1bGVzL2hpZ2hsaWdodC5qcy9zdHlsZXMvY29sb3ItYnJld2VyLmNzc1wiKSwgXCJcIik7XG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiXFxuYXJ0aWNsZSxcXG5hc2lkZSxcXG5ibG9ja3F1b3RlLFxcbmJvZHksXFxuYnV0dG9uLFxcbmNvZGUsXFxuZGQsXFxuZGV0YWlscyxcXG5kaXYsXFxuZGwsXFxuZHQsXFxuZmllbGRzZXQsXFxuZmlnY2FwdGlvbixcXG5maWd1cmUsXFxuZm9vdGVyLFxcbmZvcm0sXFxuaDEsXFxuaDIsXFxuaDMsXFxuaDQsXFxuaDUsXFxuaDYsXFxuaGVhZGVyLFxcbmhncm91cCxcXG5ocixcXG5pbnB1dCxcXG5sZWdlbmQsXFxubGksXFxubWVudSxcXG5uYXYsXFxub2wsXFxucCxcXG5wcmUsXFxuc2VjdGlvbixcXG50ZCxcXG50ZXh0YXJlYSxcXG50aCxcXG51bCB7XFxuICBtYXJnaW46IDA7XFxuICBwYWRkaW5nOiAwO1xcbn1cXG5hIHtcXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXG59XFxuY29kZSxcXG5rYmQsXFxucHJlLFxcbnNhbXAge1xcbiAgZm9udC1mYW1pbHk6IENvbnNvbGFzLCBNZW5sbywgQ291cmllciwgbW9ub3NwYWNlO1xcbn1cXG4uZ3JpZC1jb250ZW50IHtcXG4gIGJvcmRlci1yYWRpdXM6IDRweDtcXG4gIG1pbi1oZWlnaHQ6IDM2cHg7XFxufVxcbi5iZy1wdXJwbGUtZGFyayB7XFxuICBiYWNrZ3JvdW5kOiAjOTlhOWJmO1xcbn1cXG4uYmctcHVycGxlIHtcXG4gIGJhY2tncm91bmQ6ICNkM2RjZTY7XFxufVxcbi5iZy1wdXJwbGUtbGlnaHQge1xcbiAgYmFja2dyb3VuZDogI2U1ZTlmMjtcXG59XFxuLm0tMTAge1xcbiAgbWFyZ2luLXRvcDogMTBweDtcXG59XFxuLm1yLTEwIHtcXG4gIG1hcmdpbi1yaWdodDogMTBweDtcXG59XFxuLm1sLTEwIHtcXG4gIG1hcmdpbi1sZWZ0OiAxMHB4O1xcbn1cXG4ucm93LWJnIHtcXG4gIHBhZGRpbmc6IDEwcHggMDtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmOWZhZmM7XFxufVxcbi50ZXh0LWxlZnQge1xcbiAgdGV4dC1hbGlnbjogbGVmdDtcXG59XFxuLnRleHQtcmlnaHQge1xcbiAgdGV4dC1hbGlnbjogcmlnaHQ7XFxufVxcbi5mcy0xMiB7XFxuICBmb250LXNpemU6IDEycHg7XFxufVxcbi5mcy0xNCB7XFxuICBmb250LXNpemU6IDE0cHg7XFxufVxcbi5mcy0xNiB7XFxuICBmb250LXNpemU6IDE2cHg7XFxufVxcbi5mcy0xOCB7XFxuICBmb250LXNpemU6IDE4cHg7XFxufVxcbi5mcy0yMCB7XFxuICBmb250LXNpemU6IDIwcHg7XFxufVxcbi5mcy0yMiB7XFxuICBmb250LXNpemU6IDIycHg7XFxufVxcbi5mcy0yNCB7XFxuICBmb250LXNpemU6IDI0cHg7XFxufVxcbnRhYmxlIHtcXG4gIGZvbnQtZmFtaWx5OiBDb25zb2xhcywgTWVubG8sIENvdXJpZXIsIG1vbm9zcGFjZTtcXG4gIGZvbnQtc2l6ZTogMTJweDtcXG4gIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XFxuICBib3JkZXItc3BhY2luZzogMDtcXG4gIGVtcHR5LWNlbGxzOiBzaG93O1xcbiAgYm9yZGVyOiAxcHggc29saWQgI2U5ZTllOTtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgbWFyZ2luLWJvdHRvbTogMjRweDtcXG59XFxudGFibGUgdGgge1xcbiAgYmFja2dyb3VuZDogI2Y3ZjdmNztcXG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XFxuICBjb2xvcjogIzVjNmI3NztcXG4gIGZvbnQtd2VpZ2h0OiA2MDA7XFxuICBib3JkZXI6IDFweCBzb2xpZCAjZTllOWU5O1xcbiAgcGFkZGluZzogOHB4IDE2cHg7XFxuICB0ZXh0LWFsaWduOiBsZWZ0O1xcbn1cXG50YWJsZSB0ZCB7XFxuICBib3JkZXI6IDFweCBzb2xpZCAjZTllOWU5O1xcbiAgcGFkZGluZzogOHB4IDE2cHg7XFxuICB0ZXh0LWFsaWduOiBsZWZ0O1xcbn1cXG5wIGltZyB7XFxuICB3aWR0aDogMTAwJTtcXG59XFxuc2VjdGlvbiB7XFxuICBjb2xvcjogIzNmNTM2ZTtcXG4gIGZvbnQtc2l6ZTogMTRweDtcXG59XFxuc2VjdGlvbiAuZGVtby1ibG9jayB7XFxuICBwYWRkaW5nOiAzMnB4O1xcbiAgYm9yZGVyOiAxcHggc29saWQgI2UyZWNmNDtcXG4gIGJvcmRlci1yYWRpdXM6IDRweCA0cHggMCAwO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG4gIG1hcmdpbi10b3A6IDE2cHg7XFxufVxcbnNlY3Rpb24gaHIge1xcbiAgbWFyZ2luOiAxLjJlbSAwO1xcbiAgYm9yZGVyOiAwO1xcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNDNUQ5RTg7XFxufVxcbnNlY3Rpb24gcCB7XFxuICBwYWRkaW5nOiAwO1xcbiAgbGluZS1oZWlnaHQ6IDEuNztcXG4gIGNvbG9yOiAjM2Y1MzZlO1xcbiAgZm9udC1zaXplOiAxNHB4O1xcbiAgcGFkZGluZy1ib3R0b206IDEwcHg7XFxufVxcbnNlY3Rpb24gaDEge1xcbiAgZm9udC1zaXplOiAyNHB4O1xcbn1cXG5zZWN0aW9uIGgxLFxcbnNlY3Rpb24gaDIsXFxuc2VjdGlvbiBoMyxcXG5zZWN0aW9uIGg0LFxcbnNlY3Rpb24gaDUge1xcbiAgbWFyZ2luOiAxNnB4IDA7XFxuICBsaW5lLWhlaWdodDogMS41O1xcbn1cXG5zZWN0aW9uIGgyIHtcXG4gIGZvbnQtc2l6ZTogMThweDtcXG59XFxuc2VjdGlvbiB1bCB7XFxuICBtYXJnaW46IDE2cHggMDtcXG4gIHBhZGRpbmctbGVmdDogMjRweDtcXG4gIGxpc3Qtc3R5bGU6IGRpc2M7XFxufVxcbnNlY3Rpb24gdWwgbGkge1xcbiAgbGluZS1oZWlnaHQ6IDEuODtcXG59XFxuc2VjdGlvbiBwcmUge1xcbiAgbWFyZ2luOiAxNnB4IDA7XFxuICBwYWRkaW5nOiAxNnB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI0Y3RjdGNztcXG4gIG92ZXJmbG93OiBhdXRvO1xcbn1cXG5zZWN0aW9uIHByZSBjb2RlIHtcXG4gIHBhZGRpbmc6IDA7XFxuICBmb250LXNpemU6IDFlbTtcXG4gIGJvcmRlcjogbm9uZTtcXG4gIGJvcmRlci1yYWRpdXM6IDA7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG59XFxuc2VjdGlvbiBjb2RlIHtcXG4gIHBhZGRpbmc6IDAuM2VtIDAuNWVtO1xcbiAgZm9udC1zaXplOiAwLjllbTtcXG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XFxuICBib3JkZXI6IDFweCBzb2xpZCAjRUNFQ0VDO1xcbiAgYm9yZGVyLXJhZGl1czogMnB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI0Y3RjdGNztcXG59XFxuc2VjdGlvbiBjb2RlLmNvZGVfaW5saW5lIHtcXG4gIHBhZGRpbmc6IDAgMC41ZW07XFxufVxcbnNlY3Rpb24gaW1nIHtcXG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XFxufVxcbnNlY3Rpb24gcCArIHAge1xcbiAgbWFyZ2luLXRvcDogOHB4O1xcbn1cXG5zZWN0aW9uIGEge1xcbiAgY29sb3I6ICM2MTkwZTg7XFxufVxcbnNlY3Rpb24gdGFibGUudGFibGUge1xcbiAgZGlzcGxheTogdGFibGU7XFxuICB3aWR0aDogMTAwJTtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XFxuICBjb2xvcjogIzVlNmQ4MjtcXG4gIGZvbnQtc2l6ZTogMTRweDtcXG4gIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XFxuICBvdmVyZmxvdzogYXV0bztcXG4gIG1hcmdpbi1ib3R0b206IDUwcHg7XFxufVxcbnNlY3Rpb24gdGFibGUudGFibGUgdGgge1xcbiAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICNmM2Y3ZmE7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjRkFGQkZDO1xcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNmM2Y3ZmE7XFxuICBwYWRkaW5nOiAxMHB4IDhweDtcXG4gIHRleHQtYWxpZ246IGxlZnQ7XFxufVxcbnNlY3Rpb24gdGFibGUudGFibGUgdGQge1xcbiAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICNmM2Y3ZmE7XFxuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2YzZjdmYTtcXG4gIHBhZGRpbmc6IDEwcHggOHB4O1xcbn1cXG5cIiwgXCJcIl0pO1xuXG4vLyBleHBvcnRzXG4iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoZmFsc2UpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLypcXG5cXG5Db2xvcmJyZXdlciB0aGVtZVxcbk9yaWdpbmFsOiBodHRwczovL2dpdGh1Yi5jb20vbWJvc3RvY2svY29sb3JicmV3ZXItdGhlbWUgKGMpIE1pa2UgQm9zdG9jayA8bWlrZUBvY2tzLm9yZz5cXG5Qb3J0ZWQgYnkgRmFicsOtY2lvIFRhdmFyZXMgZGUgT2xpdmVpcmFcXG5cXG4qL1xcblxcbi5obGpzIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgb3ZlcmZsb3cteDogYXV0bztcXG4gIHBhZGRpbmc6IDAuNWVtO1xcbiAgYmFja2dyb3VuZDogI2ZmZjtcXG59XFxuXFxuLmhsanMsXFxuLmhsanMtc3Vic3Qge1xcbiAgY29sb3I6ICMwMDA7XFxufVxcblxcbi5obGpzLXN0cmluZyxcXG4uaGxqcy1tZXRhLFxcbi5obGpzLXN5bWJvbCxcXG4uaGxqcy10ZW1wbGF0ZS10YWcsXFxuLmhsanMtdGVtcGxhdGUtdmFyaWFibGUsXFxuLmhsanMtYWRkaXRpb24ge1xcbiAgY29sb3I6ICM3NTZiYjE7XFxufVxcblxcbi5obGpzLWNvbW1lbnQsXFxuLmhsanMtcXVvdGUge1xcbiAgY29sb3I6ICM2MzYzNjM7XFxufVxcblxcbi5obGpzLW51bWJlcixcXG4uaGxqcy1yZWdleHAsXFxuLmhsanMtbGl0ZXJhbCxcXG4uaGxqcy1idWxsZXQsXFxuLmhsanMtbGluayB7XFxuICBjb2xvcjogIzMxYTM1NDtcXG59XFxuXFxuLmhsanMtZGVsZXRpb24sXFxuLmhsanMtdmFyaWFibGUge1xcbiAgY29sb3I6ICM4OGY7XFxufVxcblxcblxcblxcbi5obGpzLWtleXdvcmQsXFxuLmhsanMtc2VsZWN0b3ItdGFnLFxcbi5obGpzLXRpdGxlLFxcbi5obGpzLXNlY3Rpb24sXFxuLmhsanMtYnVpbHRfaW4sXFxuLmhsanMtZG9jdGFnLFxcbi5obGpzLXR5cGUsXFxuLmhsanMtdGFnLFxcbi5obGpzLW5hbWUsXFxuLmhsanMtc2VsZWN0b3ItaWQsXFxuLmhsanMtc2VsZWN0b3ItY2xhc3MsXFxuLmhsanMtc3Ryb25nIHtcXG4gIGNvbG9yOiAjMzE4MmJkO1xcbn1cXG5cXG4uaGxqcy1lbXBoYXNpcyB7XFxuICBmb250LXN0eWxlOiBpdGFsaWM7XFxufVxcblxcbi5obGpzLWF0dHJpYnV0ZSB7XFxuICBjb2xvcjogI2U2NTUwZDtcXG59XFxuXCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuIiwiaW1wb3J0IFZ1ZSBmcm9tIFwidnVlXCI7XHJcbmltcG9ydCBSb3V0ZXIgZnJvbSBcInZ1ZS1yb3V0ZXJcIjtcclxuaW1wb3J0IHsgWGJSb3V0ZUNvbmZpZyB9IGZyb20gXCIuL3R5cGVzXCI7XHJcbmltcG9ydCBoZWFkZXJDb25mIGZyb20gXCIuL2NvbmZpZ1wiO1xyXG5cclxuVnVlLnVzZShSb3V0ZXIpO1xyXG5cclxuY29uc3QgaW5kZXhSb3V0ZTogWGJSb3V0ZUNvbmZpZyA9IHtcclxuICB0ZXh0OiBcIummlumhtVwiLFxyXG4gIG5hbWU6IFwiaW5kZXhcIixcclxuICBwYXRoOiBcIi9cIixcclxuICBjb21wb25lbnQ6IChyKSA9PiByZXF1aXJlLmVuc3VyZShbXSwgKCkgPT4gcihyZXF1aXJlKFwiZXhhbXBsZXMvcGFnZXMvaW5kZXgudnVlXCIpKSksXHJcbn07XHJcblxyXG5jb25zdCByb3V0ZXM6IFhiUm91dGVDb25maWdbXSA9IGhlYWRlckNvbmY7IC8vIGhlYWRlckNvbmZpZygpO1xyXG5cclxucm91dGVzLnVuc2hpZnQoaW5kZXhSb3V0ZSk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBuZXcgUm91dGVyKHtcclxuICByb3V0ZXMsXHJcbn0pO1xyXG4iLCIvKipcbiAgKiB2dWUtcm91dGVyIHYyLjguMVxuICAqIChjKSAyMDE3IEV2YW4gWW91XG4gICogQGxpY2Vuc2UgTUlUXG4gICovXG4vKiAgKi9cblxuZnVuY3Rpb24gYXNzZXJ0IChjb25kaXRpb24sIG1lc3NhZ2UpIHtcbiAgaWYgKCFjb25kaXRpb24pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoKFwiW3Z1ZS1yb3V0ZXJdIFwiICsgbWVzc2FnZSkpXG4gIH1cbn1cblxuZnVuY3Rpb24gd2FybiAoY29uZGl0aW9uLCBtZXNzYWdlKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFjb25kaXRpb24pIHtcbiAgICB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiYgY29uc29sZS53YXJuKChcIlt2dWUtcm91dGVyXSBcIiArIG1lc3NhZ2UpKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc0Vycm9yIChlcnIpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlcnIpLmluZGV4T2YoJ0Vycm9yJykgPiAtMVxufVxuXG52YXIgVmlldyA9IHtcbiAgbmFtZTogJ3JvdXRlci12aWV3JyxcbiAgZnVuY3Rpb25hbDogdHJ1ZSxcbiAgcHJvcHM6IHtcbiAgICBuYW1lOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnZGVmYXVsdCdcbiAgICB9XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyIChfLCByZWYpIHtcbiAgICB2YXIgcHJvcHMgPSByZWYucHJvcHM7XG4gICAgdmFyIGNoaWxkcmVuID0gcmVmLmNoaWxkcmVuO1xuICAgIHZhciBwYXJlbnQgPSByZWYucGFyZW50O1xuICAgIHZhciBkYXRhID0gcmVmLmRhdGE7XG5cbiAgICBkYXRhLnJvdXRlclZpZXcgPSB0cnVlO1xuXG4gICAgLy8gZGlyZWN0bHkgdXNlIHBhcmVudCBjb250ZXh0J3MgY3JlYXRlRWxlbWVudCgpIGZ1bmN0aW9uXG4gICAgLy8gc28gdGhhdCBjb21wb25lbnRzIHJlbmRlcmVkIGJ5IHJvdXRlci12aWV3IGNhbiByZXNvbHZlIG5hbWVkIHNsb3RzXG4gICAgdmFyIGggPSBwYXJlbnQuJGNyZWF0ZUVsZW1lbnQ7XG4gICAgdmFyIG5hbWUgPSBwcm9wcy5uYW1lO1xuICAgIHZhciByb3V0ZSA9IHBhcmVudC4kcm91dGU7XG4gICAgdmFyIGNhY2hlID0gcGFyZW50Ll9yb3V0ZXJWaWV3Q2FjaGUgfHwgKHBhcmVudC5fcm91dGVyVmlld0NhY2hlID0ge30pO1xuXG4gICAgLy8gZGV0ZXJtaW5lIGN1cnJlbnQgdmlldyBkZXB0aCwgYWxzbyBjaGVjayB0byBzZWUgaWYgdGhlIHRyZWVcbiAgICAvLyBoYXMgYmVlbiB0b2dnbGVkIGluYWN0aXZlIGJ1dCBrZXB0LWFsaXZlLlxuICAgIHZhciBkZXB0aCA9IDA7XG4gICAgdmFyIGluYWN0aXZlID0gZmFsc2U7XG4gICAgd2hpbGUgKHBhcmVudCAmJiBwYXJlbnQuX3JvdXRlclJvb3QgIT09IHBhcmVudCkge1xuICAgICAgaWYgKHBhcmVudC4kdm5vZGUgJiYgcGFyZW50LiR2bm9kZS5kYXRhLnJvdXRlclZpZXcpIHtcbiAgICAgICAgZGVwdGgrKztcbiAgICAgIH1cbiAgICAgIGlmIChwYXJlbnQuX2luYWN0aXZlKSB7XG4gICAgICAgIGluYWN0aXZlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHBhcmVudCA9IHBhcmVudC4kcGFyZW50O1xuICAgIH1cbiAgICBkYXRhLnJvdXRlclZpZXdEZXB0aCA9IGRlcHRoO1xuXG4gICAgLy8gcmVuZGVyIHByZXZpb3VzIHZpZXcgaWYgdGhlIHRyZWUgaXMgaW5hY3RpdmUgYW5kIGtlcHQtYWxpdmVcbiAgICBpZiAoaW5hY3RpdmUpIHtcbiAgICAgIHJldHVybiBoKGNhY2hlW25hbWVdLCBkYXRhLCBjaGlsZHJlbilcbiAgICB9XG5cbiAgICB2YXIgbWF0Y2hlZCA9IHJvdXRlLm1hdGNoZWRbZGVwdGhdO1xuICAgIC8vIHJlbmRlciBlbXB0eSBub2RlIGlmIG5vIG1hdGNoZWQgcm91dGVcbiAgICBpZiAoIW1hdGNoZWQpIHtcbiAgICAgIGNhY2hlW25hbWVdID0gbnVsbDtcbiAgICAgIHJldHVybiBoKClcbiAgICB9XG5cbiAgICB2YXIgY29tcG9uZW50ID0gY2FjaGVbbmFtZV0gPSBtYXRjaGVkLmNvbXBvbmVudHNbbmFtZV07XG5cbiAgICAvLyBhdHRhY2ggaW5zdGFuY2UgcmVnaXN0cmF0aW9uIGhvb2tcbiAgICAvLyB0aGlzIHdpbGwgYmUgY2FsbGVkIGluIHRoZSBpbnN0YW5jZSdzIGluamVjdGVkIGxpZmVjeWNsZSBob29rc1xuICAgIGRhdGEucmVnaXN0ZXJSb3V0ZUluc3RhbmNlID0gZnVuY3Rpb24gKHZtLCB2YWwpIHtcbiAgICAgIC8vIHZhbCBjb3VsZCBiZSB1bmRlZmluZWQgZm9yIHVucmVnaXN0cmF0aW9uXG4gICAgICB2YXIgY3VycmVudCA9IG1hdGNoZWQuaW5zdGFuY2VzW25hbWVdO1xuICAgICAgaWYgKFxuICAgICAgICAodmFsICYmIGN1cnJlbnQgIT09IHZtKSB8fFxuICAgICAgICAoIXZhbCAmJiBjdXJyZW50ID09PSB2bSlcbiAgICAgICkge1xuICAgICAgICBtYXRjaGVkLmluc3RhbmNlc1tuYW1lXSA9IHZhbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBhbHNvIHJlZ2lzdGVyIGluc3RhbmNlIGluIHByZXBhdGNoIGhvb2tcbiAgICAvLyBpbiBjYXNlIHRoZSBzYW1lIGNvbXBvbmVudCBpbnN0YW5jZSBpcyByZXVzZWQgYWNyb3NzIGRpZmZlcmVudCByb3V0ZXNcbiAgICA7KGRhdGEuaG9vayB8fCAoZGF0YS5ob29rID0ge30pKS5wcmVwYXRjaCA9IGZ1bmN0aW9uIChfLCB2bm9kZSkge1xuICAgICAgbWF0Y2hlZC5pbnN0YW5jZXNbbmFtZV0gPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICB9O1xuXG4gICAgLy8gcmVzb2x2ZSBwcm9wc1xuICAgIHZhciBwcm9wc1RvUGFzcyA9IGRhdGEucHJvcHMgPSByZXNvbHZlUHJvcHMocm91dGUsIG1hdGNoZWQucHJvcHMgJiYgbWF0Y2hlZC5wcm9wc1tuYW1lXSk7XG4gICAgaWYgKHByb3BzVG9QYXNzKSB7XG4gICAgICAvLyBjbG9uZSB0byBwcmV2ZW50IG11dGF0aW9uXG4gICAgICBwcm9wc1RvUGFzcyA9IGRhdGEucHJvcHMgPSBleHRlbmQoe30sIHByb3BzVG9QYXNzKTtcbiAgICAgIC8vIHBhc3Mgbm9uLWRlY2xhcmVkIHByb3BzIGFzIGF0dHJzXG4gICAgICB2YXIgYXR0cnMgPSBkYXRhLmF0dHJzID0gZGF0YS5hdHRycyB8fCB7fTtcbiAgICAgIGZvciAodmFyIGtleSBpbiBwcm9wc1RvUGFzcykge1xuICAgICAgICBpZiAoIWNvbXBvbmVudC5wcm9wcyB8fCAhKGtleSBpbiBjb21wb25lbnQucHJvcHMpKSB7XG4gICAgICAgICAgYXR0cnNba2V5XSA9IHByb3BzVG9QYXNzW2tleV07XG4gICAgICAgICAgZGVsZXRlIHByb3BzVG9QYXNzW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gaChjb21wb25lbnQsIGRhdGEsIGNoaWxkcmVuKVxuICB9XG59O1xuXG5mdW5jdGlvbiByZXNvbHZlUHJvcHMgKHJvdXRlLCBjb25maWcpIHtcbiAgc3dpdGNoICh0eXBlb2YgY29uZmlnKSB7XG4gICAgY2FzZSAndW5kZWZpbmVkJzpcbiAgICAgIHJldHVyblxuICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICByZXR1cm4gY29uZmlnXG4gICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAgcmV0dXJuIGNvbmZpZyhyb3V0ZSlcbiAgICBjYXNlICdib29sZWFuJzpcbiAgICAgIHJldHVybiBjb25maWcgPyByb3V0ZS5wYXJhbXMgOiB1bmRlZmluZWRcbiAgICBkZWZhdWx0OlxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICBcInByb3BzIGluIFxcXCJcIiArIChyb3V0ZS5wYXRoKSArIFwiXFxcIiBpcyBhIFwiICsgKHR5cGVvZiBjb25maWcpICsgXCIsIFwiICtcbiAgICAgICAgICBcImV4cGVjdGluZyBhbiBvYmplY3QsIGZ1bmN0aW9uIG9yIGJvb2xlYW4uXCJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBleHRlbmQgKHRvLCBmcm9tKSB7XG4gIGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG4gICAgdG9ba2V5XSA9IGZyb21ba2V5XTtcbiAgfVxuICByZXR1cm4gdG9cbn1cblxuLyogICovXG5cbnZhciBlbmNvZGVSZXNlcnZlUkUgPSAvWyEnKCkqXS9nO1xudmFyIGVuY29kZVJlc2VydmVSZXBsYWNlciA9IGZ1bmN0aW9uIChjKSB7IHJldHVybiAnJScgKyBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpOyB9O1xudmFyIGNvbW1hUkUgPSAvJTJDL2c7XG5cbi8vIGZpeGVkIGVuY29kZVVSSUNvbXBvbmVudCB3aGljaCBpcyBtb3JlIGNvbmZvcm1hbnQgdG8gUkZDMzk4Njpcbi8vIC0gZXNjYXBlcyBbIScoKSpdXG4vLyAtIHByZXNlcnZlIGNvbW1hc1xudmFyIGVuY29kZSA9IGZ1bmN0aW9uIChzdHIpIHsgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChzdHIpXG4gIC5yZXBsYWNlKGVuY29kZVJlc2VydmVSRSwgZW5jb2RlUmVzZXJ2ZVJlcGxhY2VyKVxuICAucmVwbGFjZShjb21tYVJFLCAnLCcpOyB9O1xuXG52YXIgZGVjb2RlID0gZGVjb2RlVVJJQ29tcG9uZW50O1xuXG5mdW5jdGlvbiByZXNvbHZlUXVlcnkgKFxuICBxdWVyeSxcbiAgZXh0cmFRdWVyeSxcbiAgX3BhcnNlUXVlcnlcbikge1xuICBpZiAoIGV4dHJhUXVlcnkgPT09IHZvaWQgMCApIGV4dHJhUXVlcnkgPSB7fTtcblxuICB2YXIgcGFyc2UgPSBfcGFyc2VRdWVyeSB8fCBwYXJzZVF1ZXJ5O1xuICB2YXIgcGFyc2VkUXVlcnk7XG4gIHRyeSB7XG4gICAgcGFyc2VkUXVlcnkgPSBwYXJzZShxdWVyeSB8fCAnJyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oZmFsc2UsIGUubWVzc2FnZSk7XG4gICAgcGFyc2VkUXVlcnkgPSB7fTtcbiAgfVxuICBmb3IgKHZhciBrZXkgaW4gZXh0cmFRdWVyeSkge1xuICAgIHBhcnNlZFF1ZXJ5W2tleV0gPSBleHRyYVF1ZXJ5W2tleV07XG4gIH1cbiAgcmV0dXJuIHBhcnNlZFF1ZXJ5XG59XG5cbmZ1bmN0aW9uIHBhcnNlUXVlcnkgKHF1ZXJ5KSB7XG4gIHZhciByZXMgPSB7fTtcblxuICBxdWVyeSA9IHF1ZXJ5LnRyaW0oKS5yZXBsYWNlKC9eKFxcP3wjfCYpLywgJycpO1xuXG4gIGlmICghcXVlcnkpIHtcbiAgICByZXR1cm4gcmVzXG4gIH1cblxuICBxdWVyeS5zcGxpdCgnJicpLmZvckVhY2goZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgdmFyIHBhcnRzID0gcGFyYW0ucmVwbGFjZSgvXFwrL2csICcgJykuc3BsaXQoJz0nKTtcbiAgICB2YXIga2V5ID0gZGVjb2RlKHBhcnRzLnNoaWZ0KCkpO1xuICAgIHZhciB2YWwgPSBwYXJ0cy5sZW5ndGggPiAwXG4gICAgICA/IGRlY29kZShwYXJ0cy5qb2luKCc9JykpXG4gICAgICA6IG51bGw7XG5cbiAgICBpZiAocmVzW2tleV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmVzW2tleV0gPSB2YWw7XG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHJlc1trZXldKSkge1xuICAgICAgcmVzW2tleV0ucHVzaCh2YWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXNba2V5XSA9IFtyZXNba2V5XSwgdmFsXTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5UXVlcnkgKG9iaikge1xuICB2YXIgcmVzID0gb2JqID8gT2JqZWN0LmtleXMob2JqKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciB2YWwgPSBvYmpba2V5XTtcblxuICAgIGlmICh2YWwgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuICcnXG4gICAgfVxuXG4gICAgaWYgKHZhbCA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGVuY29kZShrZXkpXG4gICAgfVxuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSkge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgdmFsLmZvckVhY2goZnVuY3Rpb24gKHZhbDIpIHtcbiAgICAgICAgaWYgKHZhbDIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIGlmICh2YWwyID09PSBudWxsKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goZW5jb2RlKGtleSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKGVuY29kZShrZXkpICsgJz0nICsgZW5jb2RlKHZhbDIpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0LmpvaW4oJyYnKVxuICAgIH1cblxuICAgIHJldHVybiBlbmNvZGUoa2V5KSArICc9JyArIGVuY29kZSh2YWwpXG4gIH0pLmZpbHRlcihmdW5jdGlvbiAoeCkgeyByZXR1cm4geC5sZW5ndGggPiAwOyB9KS5qb2luKCcmJykgOiBudWxsO1xuICByZXR1cm4gcmVzID8gKFwiP1wiICsgcmVzKSA6ICcnXG59XG5cbi8qICAqL1xuXG5cbnZhciB0cmFpbGluZ1NsYXNoUkUgPSAvXFwvPyQvO1xuXG5mdW5jdGlvbiBjcmVhdGVSb3V0ZSAoXG4gIHJlY29yZCxcbiAgbG9jYXRpb24sXG4gIHJlZGlyZWN0ZWRGcm9tLFxuICByb3V0ZXJcbikge1xuICB2YXIgc3RyaW5naWZ5UXVlcnkkJDEgPSByb3V0ZXIgJiYgcm91dGVyLm9wdGlvbnMuc3RyaW5naWZ5UXVlcnk7XG5cbiAgdmFyIHF1ZXJ5ID0gbG9jYXRpb24ucXVlcnkgfHwge307XG4gIHRyeSB7XG4gICAgcXVlcnkgPSBjbG9uZShxdWVyeSk7XG4gIH0gY2F0Y2ggKGUpIHt9XG5cbiAgdmFyIHJvdXRlID0ge1xuICAgIG5hbWU6IGxvY2F0aW9uLm5hbWUgfHwgKHJlY29yZCAmJiByZWNvcmQubmFtZSksXG4gICAgbWV0YTogKHJlY29yZCAmJiByZWNvcmQubWV0YSkgfHwge30sXG4gICAgcGF0aDogbG9jYXRpb24ucGF0aCB8fCAnLycsXG4gICAgaGFzaDogbG9jYXRpb24uaGFzaCB8fCAnJyxcbiAgICBxdWVyeTogcXVlcnksXG4gICAgcGFyYW1zOiBsb2NhdGlvbi5wYXJhbXMgfHwge30sXG4gICAgZnVsbFBhdGg6IGdldEZ1bGxQYXRoKGxvY2F0aW9uLCBzdHJpbmdpZnlRdWVyeSQkMSksXG4gICAgbWF0Y2hlZDogcmVjb3JkID8gZm9ybWF0TWF0Y2gocmVjb3JkKSA6IFtdXG4gIH07XG4gIGlmIChyZWRpcmVjdGVkRnJvbSkge1xuICAgIHJvdXRlLnJlZGlyZWN0ZWRGcm9tID0gZ2V0RnVsbFBhdGgocmVkaXJlY3RlZEZyb20sIHN0cmluZ2lmeVF1ZXJ5JCQxKTtcbiAgfVxuICByZXR1cm4gT2JqZWN0LmZyZWV6ZShyb3V0ZSlcbn1cblxuZnVuY3Rpb24gY2xvbmUgKHZhbHVlKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZS5tYXAoY2xvbmUpXG4gIH0gZWxzZSBpZiAodmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgIHZhciByZXMgPSB7fTtcbiAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICAgIHJlc1trZXldID0gY2xvbmUodmFsdWVba2V5XSk7XG4gICAgfVxuICAgIHJldHVybiByZXNcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdmFsdWVcbiAgfVxufVxuXG4vLyB0aGUgc3RhcnRpbmcgcm91dGUgdGhhdCByZXByZXNlbnRzIHRoZSBpbml0aWFsIHN0YXRlXG52YXIgU1RBUlQgPSBjcmVhdGVSb3V0ZShudWxsLCB7XG4gIHBhdGg6ICcvJ1xufSk7XG5cbmZ1bmN0aW9uIGZvcm1hdE1hdGNoIChyZWNvcmQpIHtcbiAgdmFyIHJlcyA9IFtdO1xuICB3aGlsZSAocmVjb3JkKSB7XG4gICAgcmVzLnVuc2hpZnQocmVjb3JkKTtcbiAgICByZWNvcmQgPSByZWNvcmQucGFyZW50O1xuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gZ2V0RnVsbFBhdGggKFxuICByZWYsXG4gIF9zdHJpbmdpZnlRdWVyeVxuKSB7XG4gIHZhciBwYXRoID0gcmVmLnBhdGg7XG4gIHZhciBxdWVyeSA9IHJlZi5xdWVyeTsgaWYgKCBxdWVyeSA9PT0gdm9pZCAwICkgcXVlcnkgPSB7fTtcbiAgdmFyIGhhc2ggPSByZWYuaGFzaDsgaWYgKCBoYXNoID09PSB2b2lkIDAgKSBoYXNoID0gJyc7XG5cbiAgdmFyIHN0cmluZ2lmeSA9IF9zdHJpbmdpZnlRdWVyeSB8fCBzdHJpbmdpZnlRdWVyeTtcbiAgcmV0dXJuIChwYXRoIHx8ICcvJykgKyBzdHJpbmdpZnkocXVlcnkpICsgaGFzaFxufVxuXG5mdW5jdGlvbiBpc1NhbWVSb3V0ZSAoYSwgYikge1xuICBpZiAoYiA9PT0gU1RBUlQpIHtcbiAgICByZXR1cm4gYSA9PT0gYlxuICB9IGVsc2UgaWYgKCFiKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH0gZWxzZSBpZiAoYS5wYXRoICYmIGIucGF0aCkge1xuICAgIHJldHVybiAoXG4gICAgICBhLnBhdGgucmVwbGFjZSh0cmFpbGluZ1NsYXNoUkUsICcnKSA9PT0gYi5wYXRoLnJlcGxhY2UodHJhaWxpbmdTbGFzaFJFLCAnJykgJiZcbiAgICAgIGEuaGFzaCA9PT0gYi5oYXNoICYmXG4gICAgICBpc09iamVjdEVxdWFsKGEucXVlcnksIGIucXVlcnkpXG4gICAgKVxuICB9IGVsc2UgaWYgKGEubmFtZSAmJiBiLm5hbWUpIHtcbiAgICByZXR1cm4gKFxuICAgICAgYS5uYW1lID09PSBiLm5hbWUgJiZcbiAgICAgIGEuaGFzaCA9PT0gYi5oYXNoICYmXG4gICAgICBpc09iamVjdEVxdWFsKGEucXVlcnksIGIucXVlcnkpICYmXG4gICAgICBpc09iamVjdEVxdWFsKGEucGFyYW1zLCBiLnBhcmFtcylcbiAgICApXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuZnVuY3Rpb24gaXNPYmplY3RFcXVhbCAoYSwgYikge1xuICBpZiAoIGEgPT09IHZvaWQgMCApIGEgPSB7fTtcbiAgaWYgKCBiID09PSB2b2lkIDAgKSBiID0ge307XG5cbiAgLy8gaGFuZGxlIG51bGwgdmFsdWUgIzE1NjZcbiAgaWYgKCFhIHx8ICFiKSB7IHJldHVybiBhID09PSBiIH1cbiAgdmFyIGFLZXlzID0gT2JqZWN0LmtleXMoYSk7XG4gIHZhciBiS2V5cyA9IE9iamVjdC5rZXlzKGIpO1xuICBpZiAoYUtleXMubGVuZ3RoICE9PSBiS2V5cy5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuICByZXR1cm4gYUtleXMuZXZlcnkoZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBhVmFsID0gYVtrZXldO1xuICAgIHZhciBiVmFsID0gYltrZXldO1xuICAgIC8vIGNoZWNrIG5lc3RlZCBlcXVhbGl0eVxuICAgIGlmICh0eXBlb2YgYVZhbCA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIGJWYWwgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RFcXVhbChhVmFsLCBiVmFsKVxuICAgIH1cbiAgICByZXR1cm4gU3RyaW5nKGFWYWwpID09PSBTdHJpbmcoYlZhbClcbiAgfSlcbn1cblxuZnVuY3Rpb24gaXNJbmNsdWRlZFJvdXRlIChjdXJyZW50LCB0YXJnZXQpIHtcbiAgcmV0dXJuIChcbiAgICBjdXJyZW50LnBhdGgucmVwbGFjZSh0cmFpbGluZ1NsYXNoUkUsICcvJykuaW5kZXhPZihcbiAgICAgIHRhcmdldC5wYXRoLnJlcGxhY2UodHJhaWxpbmdTbGFzaFJFLCAnLycpXG4gICAgKSA9PT0gMCAmJlxuICAgICghdGFyZ2V0Lmhhc2ggfHwgY3VycmVudC5oYXNoID09PSB0YXJnZXQuaGFzaCkgJiZcbiAgICBxdWVyeUluY2x1ZGVzKGN1cnJlbnQucXVlcnksIHRhcmdldC5xdWVyeSlcbiAgKVxufVxuXG5mdW5jdGlvbiBxdWVyeUluY2x1ZGVzIChjdXJyZW50LCB0YXJnZXQpIHtcbiAgZm9yICh2YXIga2V5IGluIHRhcmdldCkge1xuICAgIGlmICghKGtleSBpbiBjdXJyZW50KSkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlXG59XG5cbi8qICAqL1xuXG4vLyB3b3JrIGFyb3VuZCB3ZWlyZCBmbG93IGJ1Z1xudmFyIHRvVHlwZXMgPSBbU3RyaW5nLCBPYmplY3RdO1xudmFyIGV2ZW50VHlwZXMgPSBbU3RyaW5nLCBBcnJheV07XG5cbnZhciBMaW5rID0ge1xuICBuYW1lOiAncm91dGVyLWxpbmsnLFxuICBwcm9wczoge1xuICAgIHRvOiB7XG4gICAgICB0eXBlOiB0b1R5cGVzLFxuICAgICAgcmVxdWlyZWQ6IHRydWVcbiAgICB9LFxuICAgIHRhZzoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ2EnXG4gICAgfSxcbiAgICBleGFjdDogQm9vbGVhbixcbiAgICBhcHBlbmQ6IEJvb2xlYW4sXG4gICAgcmVwbGFjZTogQm9vbGVhbixcbiAgICBhY3RpdmVDbGFzczogU3RyaW5nLFxuICAgIGV4YWN0QWN0aXZlQ2xhc3M6IFN0cmluZyxcbiAgICBldmVudDoge1xuICAgICAgdHlwZTogZXZlbnRUeXBlcyxcbiAgICAgIGRlZmF1bHQ6ICdjbGljaydcbiAgICB9XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyIChoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB2YXIgcm91dGVyID0gdGhpcy4kcm91dGVyO1xuICAgIHZhciBjdXJyZW50ID0gdGhpcy4kcm91dGU7XG4gICAgdmFyIHJlZiA9IHJvdXRlci5yZXNvbHZlKHRoaXMudG8sIGN1cnJlbnQsIHRoaXMuYXBwZW5kKTtcbiAgICB2YXIgbG9jYXRpb24gPSByZWYubG9jYXRpb247XG4gICAgdmFyIHJvdXRlID0gcmVmLnJvdXRlO1xuICAgIHZhciBocmVmID0gcmVmLmhyZWY7XG5cbiAgICB2YXIgY2xhc3NlcyA9IHt9O1xuICAgIHZhciBnbG9iYWxBY3RpdmVDbGFzcyA9IHJvdXRlci5vcHRpb25zLmxpbmtBY3RpdmVDbGFzcztcbiAgICB2YXIgZ2xvYmFsRXhhY3RBY3RpdmVDbGFzcyA9IHJvdXRlci5vcHRpb25zLmxpbmtFeGFjdEFjdGl2ZUNsYXNzO1xuICAgIC8vIFN1cHBvcnQgZ2xvYmFsIGVtcHR5IGFjdGl2ZSBjbGFzc1xuICAgIHZhciBhY3RpdmVDbGFzc0ZhbGxiYWNrID0gZ2xvYmFsQWN0aXZlQ2xhc3MgPT0gbnVsbFxuICAgICAgICAgICAgPyAncm91dGVyLWxpbmstYWN0aXZlJ1xuICAgICAgICAgICAgOiBnbG9iYWxBY3RpdmVDbGFzcztcbiAgICB2YXIgZXhhY3RBY3RpdmVDbGFzc0ZhbGxiYWNrID0gZ2xvYmFsRXhhY3RBY3RpdmVDbGFzcyA9PSBudWxsXG4gICAgICAgICAgICA/ICdyb3V0ZXItbGluay1leGFjdC1hY3RpdmUnXG4gICAgICAgICAgICA6IGdsb2JhbEV4YWN0QWN0aXZlQ2xhc3M7XG4gICAgdmFyIGFjdGl2ZUNsYXNzID0gdGhpcy5hY3RpdmVDbGFzcyA9PSBudWxsXG4gICAgICAgICAgICA/IGFjdGl2ZUNsYXNzRmFsbGJhY2tcbiAgICAgICAgICAgIDogdGhpcy5hY3RpdmVDbGFzcztcbiAgICB2YXIgZXhhY3RBY3RpdmVDbGFzcyA9IHRoaXMuZXhhY3RBY3RpdmVDbGFzcyA9PSBudWxsXG4gICAgICAgICAgICA/IGV4YWN0QWN0aXZlQ2xhc3NGYWxsYmFja1xuICAgICAgICAgICAgOiB0aGlzLmV4YWN0QWN0aXZlQ2xhc3M7XG4gICAgdmFyIGNvbXBhcmVUYXJnZXQgPSBsb2NhdGlvbi5wYXRoXG4gICAgICA/IGNyZWF0ZVJvdXRlKG51bGwsIGxvY2F0aW9uLCBudWxsLCByb3V0ZXIpXG4gICAgICA6IHJvdXRlO1xuXG4gICAgY2xhc3Nlc1tleGFjdEFjdGl2ZUNsYXNzXSA9IGlzU2FtZVJvdXRlKGN1cnJlbnQsIGNvbXBhcmVUYXJnZXQpO1xuICAgIGNsYXNzZXNbYWN0aXZlQ2xhc3NdID0gdGhpcy5leGFjdFxuICAgICAgPyBjbGFzc2VzW2V4YWN0QWN0aXZlQ2xhc3NdXG4gICAgICA6IGlzSW5jbHVkZWRSb3V0ZShjdXJyZW50LCBjb21wYXJlVGFyZ2V0KTtcblxuICAgIHZhciBoYW5kbGVyID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIGlmIChndWFyZEV2ZW50KGUpKSB7XG4gICAgICAgIGlmICh0aGlzJDEucmVwbGFjZSkge1xuICAgICAgICAgIHJvdXRlci5yZXBsYWNlKGxvY2F0aW9uKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByb3V0ZXIucHVzaChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIG9uID0geyBjbGljazogZ3VhcmRFdmVudCB9O1xuICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMuZXZlbnQpKSB7XG4gICAgICB0aGlzLmV2ZW50LmZvckVhY2goZnVuY3Rpb24gKGUpIHsgb25bZV0gPSBoYW5kbGVyOyB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgb25bdGhpcy5ldmVudF0gPSBoYW5kbGVyO1xuICAgIH1cblxuICAgIHZhciBkYXRhID0ge1xuICAgICAgY2xhc3M6IGNsYXNzZXNcbiAgICB9O1xuXG4gICAgaWYgKHRoaXMudGFnID09PSAnYScpIHtcbiAgICAgIGRhdGEub24gPSBvbjtcbiAgICAgIGRhdGEuYXR0cnMgPSB7IGhyZWY6IGhyZWYgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZmluZCB0aGUgZmlyc3QgPGE+IGNoaWxkIGFuZCBhcHBseSBsaXN0ZW5lciBhbmQgaHJlZlxuICAgICAgdmFyIGEgPSBmaW5kQW5jaG9yKHRoaXMuJHNsb3RzLmRlZmF1bHQpO1xuICAgICAgaWYgKGEpIHtcbiAgICAgICAgLy8gaW4gY2FzZSB0aGUgPGE+IGlzIGEgc3RhdGljIG5vZGVcbiAgICAgICAgYS5pc1N0YXRpYyA9IGZhbHNlO1xuICAgICAgICB2YXIgZXh0ZW5kID0gX1Z1ZS51dGlsLmV4dGVuZDtcbiAgICAgICAgdmFyIGFEYXRhID0gYS5kYXRhID0gZXh0ZW5kKHt9LCBhLmRhdGEpO1xuICAgICAgICBhRGF0YS5vbiA9IG9uO1xuICAgICAgICB2YXIgYUF0dHJzID0gYS5kYXRhLmF0dHJzID0gZXh0ZW5kKHt9LCBhLmRhdGEuYXR0cnMpO1xuICAgICAgICBhQXR0cnMuaHJlZiA9IGhyZWY7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBkb2Vzbid0IGhhdmUgPGE+IGNoaWxkLCBhcHBseSBsaXN0ZW5lciB0byBzZWxmXG4gICAgICAgIGRhdGEub24gPSBvbjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gaCh0aGlzLnRhZywgZGF0YSwgdGhpcy4kc2xvdHMuZGVmYXVsdClcbiAgfVxufTtcblxuZnVuY3Rpb24gZ3VhcmRFdmVudCAoZSkge1xuICAvLyBkb24ndCByZWRpcmVjdCB3aXRoIGNvbnRyb2wga2V5c1xuICBpZiAoZS5tZXRhS2V5IHx8IGUuYWx0S2V5IHx8IGUuY3RybEtleSB8fCBlLnNoaWZ0S2V5KSB7IHJldHVybiB9XG4gIC8vIGRvbid0IHJlZGlyZWN0IHdoZW4gcHJldmVudERlZmF1bHQgY2FsbGVkXG4gIGlmIChlLmRlZmF1bHRQcmV2ZW50ZWQpIHsgcmV0dXJuIH1cbiAgLy8gZG9uJ3QgcmVkaXJlY3Qgb24gcmlnaHQgY2xpY2tcbiAgaWYgKGUuYnV0dG9uICE9PSB1bmRlZmluZWQgJiYgZS5idXR0b24gIT09IDApIHsgcmV0dXJuIH1cbiAgLy8gZG9uJ3QgcmVkaXJlY3QgaWYgYHRhcmdldD1cIl9ibGFua1wiYFxuICBpZiAoZS5jdXJyZW50VGFyZ2V0ICYmIGUuY3VycmVudFRhcmdldC5nZXRBdHRyaWJ1dGUpIHtcbiAgICB2YXIgdGFyZ2V0ID0gZS5jdXJyZW50VGFyZ2V0LmdldEF0dHJpYnV0ZSgndGFyZ2V0Jyk7XG4gICAgaWYgKC9cXGJfYmxhbmtcXGIvaS50ZXN0KHRhcmdldCkpIHsgcmV0dXJuIH1cbiAgfVxuICAvLyB0aGlzIG1heSBiZSBhIFdlZXggZXZlbnQgd2hpY2ggZG9lc24ndCBoYXZlIHRoaXMgbWV0aG9kXG4gIGlmIChlLnByZXZlbnREZWZhdWx0KSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICB9XG4gIHJldHVybiB0cnVlXG59XG5cbmZ1bmN0aW9uIGZpbmRBbmNob3IgKGNoaWxkcmVuKSB7XG4gIGlmIChjaGlsZHJlbikge1xuICAgIHZhciBjaGlsZDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjaGlsZCA9IGNoaWxkcmVuW2ldO1xuICAgICAgaWYgKGNoaWxkLnRhZyA9PT0gJ2EnKSB7XG4gICAgICAgIHJldHVybiBjaGlsZFxuICAgICAgfVxuICAgICAgaWYgKGNoaWxkLmNoaWxkcmVuICYmIChjaGlsZCA9IGZpbmRBbmNob3IoY2hpbGQuY2hpbGRyZW4pKSkge1xuICAgICAgICByZXR1cm4gY2hpbGRcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxudmFyIF9WdWU7XG5cbmZ1bmN0aW9uIGluc3RhbGwgKFZ1ZSkge1xuICBpZiAoaW5zdGFsbC5pbnN0YWxsZWQgJiYgX1Z1ZSA9PT0gVnVlKSB7IHJldHVybiB9XG4gIGluc3RhbGwuaW5zdGFsbGVkID0gdHJ1ZTtcblxuICBfVnVlID0gVnVlO1xuXG4gIHZhciBpc0RlZiA9IGZ1bmN0aW9uICh2KSB7IHJldHVybiB2ICE9PSB1bmRlZmluZWQ7IH07XG5cbiAgdmFyIHJlZ2lzdGVySW5zdGFuY2UgPSBmdW5jdGlvbiAodm0sIGNhbGxWYWwpIHtcbiAgICB2YXIgaSA9IHZtLiRvcHRpb25zLl9wYXJlbnRWbm9kZTtcbiAgICBpZiAoaXNEZWYoaSkgJiYgaXNEZWYoaSA9IGkuZGF0YSkgJiYgaXNEZWYoaSA9IGkucmVnaXN0ZXJSb3V0ZUluc3RhbmNlKSkge1xuICAgICAgaSh2bSwgY2FsbFZhbCk7XG4gICAgfVxuICB9O1xuXG4gIFZ1ZS5taXhpbih7XG4gICAgYmVmb3JlQ3JlYXRlOiBmdW5jdGlvbiBiZWZvcmVDcmVhdGUgKCkge1xuICAgICAgaWYgKGlzRGVmKHRoaXMuJG9wdGlvbnMucm91dGVyKSkge1xuICAgICAgICB0aGlzLl9yb3V0ZXJSb290ID0gdGhpcztcbiAgICAgICAgdGhpcy5fcm91dGVyID0gdGhpcy4kb3B0aW9ucy5yb3V0ZXI7XG4gICAgICAgIHRoaXMuX3JvdXRlci5pbml0KHRoaXMpO1xuICAgICAgICBWdWUudXRpbC5kZWZpbmVSZWFjdGl2ZSh0aGlzLCAnX3JvdXRlJywgdGhpcy5fcm91dGVyLmhpc3RvcnkuY3VycmVudCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9yb3V0ZXJSb290ID0gKHRoaXMuJHBhcmVudCAmJiB0aGlzLiRwYXJlbnQuX3JvdXRlclJvb3QpIHx8IHRoaXM7XG4gICAgICB9XG4gICAgICByZWdpc3Rlckluc3RhbmNlKHRoaXMsIHRoaXMpO1xuICAgIH0sXG4gICAgZGVzdHJveWVkOiBmdW5jdGlvbiBkZXN0cm95ZWQgKCkge1xuICAgICAgcmVnaXN0ZXJJbnN0YW5jZSh0aGlzKTtcbiAgICB9XG4gIH0pO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJHJvdXRlcicsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCAoKSB7IHJldHVybiB0aGlzLl9yb3V0ZXJSb290Ll9yb3V0ZXIgfVxuICB9KTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRyb3V0ZScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCAoKSB7IHJldHVybiB0aGlzLl9yb3V0ZXJSb290Ll9yb3V0ZSB9XG4gIH0pO1xuXG4gIFZ1ZS5jb21wb25lbnQoJ3JvdXRlci12aWV3JywgVmlldyk7XG4gIFZ1ZS5jb21wb25lbnQoJ3JvdXRlci1saW5rJywgTGluayk7XG5cbiAgdmFyIHN0cmF0cyA9IFZ1ZS5jb25maWcub3B0aW9uTWVyZ2VTdHJhdGVnaWVzO1xuICAvLyB1c2UgdGhlIHNhbWUgaG9vayBtZXJnaW5nIHN0cmF0ZWd5IGZvciByb3V0ZSBob29rc1xuICBzdHJhdHMuYmVmb3JlUm91dGVFbnRlciA9IHN0cmF0cy5iZWZvcmVSb3V0ZUxlYXZlID0gc3RyYXRzLmJlZm9yZVJvdXRlVXBkYXRlID0gc3RyYXRzLmNyZWF0ZWQ7XG59XG5cbi8qICAqL1xuXG52YXIgaW5Ccm93c2VyID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCc7XG5cbi8qICAqL1xuXG5mdW5jdGlvbiByZXNvbHZlUGF0aCAoXG4gIHJlbGF0aXZlLFxuICBiYXNlLFxuICBhcHBlbmRcbikge1xuICB2YXIgZmlyc3RDaGFyID0gcmVsYXRpdmUuY2hhckF0KDApO1xuICBpZiAoZmlyc3RDaGFyID09PSAnLycpIHtcbiAgICByZXR1cm4gcmVsYXRpdmVcbiAgfVxuXG4gIGlmIChmaXJzdENoYXIgPT09ICc/JyB8fCBmaXJzdENoYXIgPT09ICcjJykge1xuICAgIHJldHVybiBiYXNlICsgcmVsYXRpdmVcbiAgfVxuXG4gIHZhciBzdGFjayA9IGJhc2Uuc3BsaXQoJy8nKTtcblxuICAvLyByZW1vdmUgdHJhaWxpbmcgc2VnbWVudCBpZjpcbiAgLy8gLSBub3QgYXBwZW5kaW5nXG4gIC8vIC0gYXBwZW5kaW5nIHRvIHRyYWlsaW5nIHNsYXNoIChsYXN0IHNlZ21lbnQgaXMgZW1wdHkpXG4gIGlmICghYXBwZW5kIHx8ICFzdGFja1tzdGFjay5sZW5ndGggLSAxXSkge1xuICAgIHN0YWNrLnBvcCgpO1xuICB9XG5cbiAgLy8gcmVzb2x2ZSByZWxhdGl2ZSBwYXRoXG4gIHZhciBzZWdtZW50cyA9IHJlbGF0aXZlLnJlcGxhY2UoL15cXC8vLCAnJykuc3BsaXQoJy8nKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWdtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzZWdtZW50ID0gc2VnbWVudHNbaV07XG4gICAgaWYgKHNlZ21lbnQgPT09ICcuLicpIHtcbiAgICAgIHN0YWNrLnBvcCgpO1xuICAgIH0gZWxzZSBpZiAoc2VnbWVudCAhPT0gJy4nKSB7XG4gICAgICBzdGFjay5wdXNoKHNlZ21lbnQpO1xuICAgIH1cbiAgfVxuXG4gIC8vIGVuc3VyZSBsZWFkaW5nIHNsYXNoXG4gIGlmIChzdGFja1swXSAhPT0gJycpIHtcbiAgICBzdGFjay51bnNoaWZ0KCcnKTtcbiAgfVxuXG4gIHJldHVybiBzdGFjay5qb2luKCcvJylcbn1cblxuZnVuY3Rpb24gcGFyc2VQYXRoIChwYXRoKSB7XG4gIHZhciBoYXNoID0gJyc7XG4gIHZhciBxdWVyeSA9ICcnO1xuXG4gIHZhciBoYXNoSW5kZXggPSBwYXRoLmluZGV4T2YoJyMnKTtcbiAgaWYgKGhhc2hJbmRleCA+PSAwKSB7XG4gICAgaGFzaCA9IHBhdGguc2xpY2UoaGFzaEluZGV4KTtcbiAgICBwYXRoID0gcGF0aC5zbGljZSgwLCBoYXNoSW5kZXgpO1xuICB9XG5cbiAgdmFyIHF1ZXJ5SW5kZXggPSBwYXRoLmluZGV4T2YoJz8nKTtcbiAgaWYgKHF1ZXJ5SW5kZXggPj0gMCkge1xuICAgIHF1ZXJ5ID0gcGF0aC5zbGljZShxdWVyeUluZGV4ICsgMSk7XG4gICAgcGF0aCA9IHBhdGguc2xpY2UoMCwgcXVlcnlJbmRleCk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHBhdGg6IHBhdGgsXG4gICAgcXVlcnk6IHF1ZXJ5LFxuICAgIGhhc2g6IGhhc2hcbiAgfVxufVxuXG5mdW5jdGlvbiBjbGVhblBhdGggKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGgucmVwbGFjZSgvXFwvXFwvL2csICcvJylcbn1cblxudmFyIGlzYXJyYXkgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuXG4vKipcbiAqIEV4cG9zZSBgcGF0aFRvUmVnZXhwYC5cbiAqL1xudmFyIHBhdGhUb1JlZ2V4cF8xID0gcGF0aFRvUmVnZXhwO1xudmFyIHBhcnNlXzEgPSBwYXJzZTtcbnZhciBjb21waWxlXzEgPSBjb21waWxlO1xudmFyIHRva2Vuc1RvRnVuY3Rpb25fMSA9IHRva2Vuc1RvRnVuY3Rpb247XG52YXIgdG9rZW5zVG9SZWdFeHBfMSA9IHRva2Vuc1RvUmVnRXhwO1xuXG4vKipcbiAqIFRoZSBtYWluIHBhdGggbWF0Y2hpbmcgcmVnZXhwIHV0aWxpdHkuXG4gKlxuICogQHR5cGUge1JlZ0V4cH1cbiAqL1xudmFyIFBBVEhfUkVHRVhQID0gbmV3IFJlZ0V4cChbXG4gIC8vIE1hdGNoIGVzY2FwZWQgY2hhcmFjdGVycyB0aGF0IHdvdWxkIG90aGVyd2lzZSBhcHBlYXIgaW4gZnV0dXJlIG1hdGNoZXMuXG4gIC8vIFRoaXMgYWxsb3dzIHRoZSB1c2VyIHRvIGVzY2FwZSBzcGVjaWFsIGNoYXJhY3RlcnMgdGhhdCB3b24ndCB0cmFuc2Zvcm0uXG4gICcoXFxcXFxcXFwuKScsXG4gIC8vIE1hdGNoIEV4cHJlc3Mtc3R5bGUgcGFyYW1ldGVycyBhbmQgdW4tbmFtZWQgcGFyYW1ldGVycyB3aXRoIGEgcHJlZml4XG4gIC8vIGFuZCBvcHRpb25hbCBzdWZmaXhlcy4gTWF0Y2hlcyBhcHBlYXIgYXM6XG4gIC8vXG4gIC8vIFwiLzp0ZXN0KFxcXFxkKyk/XCIgPT4gW1wiL1wiLCBcInRlc3RcIiwgXCJcXGQrXCIsIHVuZGVmaW5lZCwgXCI/XCIsIHVuZGVmaW5lZF1cbiAgLy8gXCIvcm91dGUoXFxcXGQrKVwiICA9PiBbdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgXCJcXGQrXCIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkXVxuICAvLyBcIi8qXCIgICAgICAgICAgICA9PiBbXCIvXCIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgXCIqXCJdXG4gICcoW1xcXFwvLl0pPyg/Oig/OlxcXFw6KFxcXFx3KykoPzpcXFxcKCgoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpXSkrKVxcXFwpKT98XFxcXCgoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKV0pKylcXFxcKSkoWysqP10pP3woXFxcXCopKSdcbl0uam9pbignfCcpLCAnZycpO1xuXG4vKipcbiAqIFBhcnNlIGEgc3RyaW5nIGZvciB0aGUgcmF3IHRva2Vucy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICBzdHJcbiAqIEBwYXJhbSAge09iamVjdD19IG9wdGlvbnNcbiAqIEByZXR1cm4geyFBcnJheX1cbiAqL1xuZnVuY3Rpb24gcGFyc2UgKHN0ciwgb3B0aW9ucykge1xuICB2YXIgdG9rZW5zID0gW107XG4gIHZhciBrZXkgPSAwO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgcGF0aCA9ICcnO1xuICB2YXIgZGVmYXVsdERlbGltaXRlciA9IG9wdGlvbnMgJiYgb3B0aW9ucy5kZWxpbWl0ZXIgfHwgJy8nO1xuICB2YXIgcmVzO1xuXG4gIHdoaWxlICgocmVzID0gUEFUSF9SRUdFWFAuZXhlYyhzdHIpKSAhPSBudWxsKSB7XG4gICAgdmFyIG0gPSByZXNbMF07XG4gICAgdmFyIGVzY2FwZWQgPSByZXNbMV07XG4gICAgdmFyIG9mZnNldCA9IHJlcy5pbmRleDtcbiAgICBwYXRoICs9IHN0ci5zbGljZShpbmRleCwgb2Zmc2V0KTtcbiAgICBpbmRleCA9IG9mZnNldCArIG0ubGVuZ3RoO1xuXG4gICAgLy8gSWdub3JlIGFscmVhZHkgZXNjYXBlZCBzZXF1ZW5jZXMuXG4gICAgaWYgKGVzY2FwZWQpIHtcbiAgICAgIHBhdGggKz0gZXNjYXBlZFsxXTtcbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuXG4gICAgdmFyIG5leHQgPSBzdHJbaW5kZXhdO1xuICAgIHZhciBwcmVmaXggPSByZXNbMl07XG4gICAgdmFyIG5hbWUgPSByZXNbM107XG4gICAgdmFyIGNhcHR1cmUgPSByZXNbNF07XG4gICAgdmFyIGdyb3VwID0gcmVzWzVdO1xuICAgIHZhciBtb2RpZmllciA9IHJlc1s2XTtcbiAgICB2YXIgYXN0ZXJpc2sgPSByZXNbN107XG5cbiAgICAvLyBQdXNoIHRoZSBjdXJyZW50IHBhdGggb250byB0aGUgdG9rZW5zLlxuICAgIGlmIChwYXRoKSB7XG4gICAgICB0b2tlbnMucHVzaChwYXRoKTtcbiAgICAgIHBhdGggPSAnJztcbiAgICB9XG5cbiAgICB2YXIgcGFydGlhbCA9IHByZWZpeCAhPSBudWxsICYmIG5leHQgIT0gbnVsbCAmJiBuZXh0ICE9PSBwcmVmaXg7XG4gICAgdmFyIHJlcGVhdCA9IG1vZGlmaWVyID09PSAnKycgfHwgbW9kaWZpZXIgPT09ICcqJztcbiAgICB2YXIgb3B0aW9uYWwgPSBtb2RpZmllciA9PT0gJz8nIHx8IG1vZGlmaWVyID09PSAnKic7XG4gICAgdmFyIGRlbGltaXRlciA9IHJlc1syXSB8fCBkZWZhdWx0RGVsaW1pdGVyO1xuICAgIHZhciBwYXR0ZXJuID0gY2FwdHVyZSB8fCBncm91cDtcblxuICAgIHRva2Vucy5wdXNoKHtcbiAgICAgIG5hbWU6IG5hbWUgfHwga2V5KyssXG4gICAgICBwcmVmaXg6IHByZWZpeCB8fCAnJyxcbiAgICAgIGRlbGltaXRlcjogZGVsaW1pdGVyLFxuICAgICAgb3B0aW9uYWw6IG9wdGlvbmFsLFxuICAgICAgcmVwZWF0OiByZXBlYXQsXG4gICAgICBwYXJ0aWFsOiBwYXJ0aWFsLFxuICAgICAgYXN0ZXJpc2s6ICEhYXN0ZXJpc2ssXG4gICAgICBwYXR0ZXJuOiBwYXR0ZXJuID8gZXNjYXBlR3JvdXAocGF0dGVybikgOiAoYXN0ZXJpc2sgPyAnLionIDogJ1teJyArIGVzY2FwZVN0cmluZyhkZWxpbWl0ZXIpICsgJ10rPycpXG4gICAgfSk7XG4gIH1cblxuICAvLyBNYXRjaCBhbnkgY2hhcmFjdGVycyBzdGlsbCByZW1haW5pbmcuXG4gIGlmIChpbmRleCA8IHN0ci5sZW5ndGgpIHtcbiAgICBwYXRoICs9IHN0ci5zdWJzdHIoaW5kZXgpO1xuICB9XG5cbiAgLy8gSWYgdGhlIHBhdGggZXhpc3RzLCBwdXNoIGl0IG9udG8gdGhlIGVuZC5cbiAgaWYgKHBhdGgpIHtcbiAgICB0b2tlbnMucHVzaChwYXRoKTtcbiAgfVxuXG4gIHJldHVybiB0b2tlbnNcbn1cblxuLyoqXG4gKiBDb21waWxlIGEgc3RyaW5nIHRvIGEgdGVtcGxhdGUgZnVuY3Rpb24gZm9yIHRoZSBwYXRoLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gICAgICAgICAgICAgc3RyXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFmdW5jdGlvbihPYmplY3Q9LCBPYmplY3Q9KX1cbiAqL1xuZnVuY3Rpb24gY29tcGlsZSAoc3RyLCBvcHRpb25zKSB7XG4gIHJldHVybiB0b2tlbnNUb0Z1bmN0aW9uKHBhcnNlKHN0ciwgb3B0aW9ucykpXG59XG5cbi8qKlxuICogUHJldHRpZXIgZW5jb2Rpbmcgb2YgVVJJIHBhdGggc2VnbWVudHMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlbmNvZGVVUklDb21wb25lbnRQcmV0dHkgKHN0cikge1xuICByZXR1cm4gZW5jb2RlVVJJKHN0cikucmVwbGFjZSgvW1xcLz8jXS9nLCBmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiAnJScgKyBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKClcbiAgfSlcbn1cblxuLyoqXG4gKiBFbmNvZGUgdGhlIGFzdGVyaXNrIHBhcmFtZXRlci4gU2ltaWxhciB0byBgcHJldHR5YCwgYnV0IGFsbG93cyBzbGFzaGVzLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ31cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZW5jb2RlQXN0ZXJpc2sgKHN0cikge1xuICByZXR1cm4gZW5jb2RlVVJJKHN0cikucmVwbGFjZSgvWz8jXS9nLCBmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiAnJScgKyBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKClcbiAgfSlcbn1cblxuLyoqXG4gKiBFeHBvc2UgYSBtZXRob2QgZm9yIHRyYW5zZm9ybWluZyB0b2tlbnMgaW50byB0aGUgcGF0aCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gdG9rZW5zVG9GdW5jdGlvbiAodG9rZW5zKSB7XG4gIC8vIENvbXBpbGUgYWxsIHRoZSB0b2tlbnMgaW50byByZWdleHBzLlxuICB2YXIgbWF0Y2hlcyA9IG5ldyBBcnJheSh0b2tlbnMubGVuZ3RoKTtcblxuICAvLyBDb21waWxlIGFsbCB0aGUgcGF0dGVybnMgYmVmb3JlIGNvbXBpbGF0aW9uLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgIGlmICh0eXBlb2YgdG9rZW5zW2ldID09PSAnb2JqZWN0Jykge1xuICAgICAgbWF0Y2hlc1tpXSA9IG5ldyBSZWdFeHAoJ14oPzonICsgdG9rZW5zW2ldLnBhdHRlcm4gKyAnKSQnKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKG9iaiwgb3B0cykge1xuICAgIHZhciBwYXRoID0gJyc7XG4gICAgdmFyIGRhdGEgPSBvYmogfHwge307XG4gICAgdmFyIG9wdGlvbnMgPSBvcHRzIHx8IHt9O1xuICAgIHZhciBlbmNvZGUgPSBvcHRpb25zLnByZXR0eSA/IGVuY29kZVVSSUNvbXBvbmVudFByZXR0eSA6IGVuY29kZVVSSUNvbXBvbmVudDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdG9rZW4gPSB0b2tlbnNbaV07XG5cbiAgICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHBhdGggKz0gdG9rZW47XG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgdmFyIHZhbHVlID0gZGF0YVt0b2tlbi5uYW1lXTtcbiAgICAgIHZhciBzZWdtZW50O1xuXG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgICAvLyBQcmVwZW5kIHBhcnRpYWwgc2VnbWVudCBwcmVmaXhlcy5cbiAgICAgICAgICBpZiAodG9rZW4ucGFydGlhbCkge1xuICAgICAgICAgICAgcGF0aCArPSB0b2tlbi5wcmVmaXg7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIGJlIGRlZmluZWQnKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChpc2FycmF5KHZhbHVlKSkge1xuICAgICAgICBpZiAoIXRva2VuLnJlcGVhdCkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbm90IHJlcGVhdCwgYnV0IHJlY2VpdmVkIGAnICsgSlNPTi5zdHJpbmdpZnkodmFsdWUpICsgJ2AnKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBub3QgYmUgZW1wdHknKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsdWUubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICBzZWdtZW50ID0gZW5jb2RlKHZhbHVlW2pdKTtcblxuICAgICAgICAgIGlmICghbWF0Y2hlc1tpXS50ZXN0KHNlZ21lbnQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBhbGwgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBtYXRjaCBcIicgKyB0b2tlbi5wYXR0ZXJuICsgJ1wiLCBidXQgcmVjZWl2ZWQgYCcgKyBKU09OLnN0cmluZ2lmeShzZWdtZW50KSArICdgJylcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBwYXRoICs9IChqID09PSAwID8gdG9rZW4ucHJlZml4IDogdG9rZW4uZGVsaW1pdGVyKSArIHNlZ21lbnQ7XG4gICAgICAgIH1cblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICBzZWdtZW50ID0gdG9rZW4uYXN0ZXJpc2sgPyBlbmNvZGVBc3Rlcmlzayh2YWx1ZSkgOiBlbmNvZGUodmFsdWUpO1xuXG4gICAgICBpZiAoIW1hdGNoZXNbaV0udGVzdChzZWdtZW50KSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG1hdGNoIFwiJyArIHRva2VuLnBhdHRlcm4gKyAnXCIsIGJ1dCByZWNlaXZlZCBcIicgKyBzZWdtZW50ICsgJ1wiJylcbiAgICAgIH1cblxuICAgICAgcGF0aCArPSB0b2tlbi5wcmVmaXggKyBzZWdtZW50O1xuICAgIH1cblxuICAgIHJldHVybiBwYXRoXG4gIH1cbn1cblxuLyoqXG4gKiBFc2NhcGUgYSByZWd1bGFyIGV4cHJlc3Npb24gc3RyaW5nLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVzY2FwZVN0cmluZyAoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvKFsuKyo/PV4hOiR7fSgpW1xcXXxcXC9cXFxcXSkvZywgJ1xcXFwkMScpXG59XG5cbi8qKlxuICogRXNjYXBlIHRoZSBjYXB0dXJpbmcgZ3JvdXAgYnkgZXNjYXBpbmcgc3BlY2lhbCBjaGFyYWN0ZXJzIGFuZCBtZWFuaW5nLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gZ3JvdXBcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZXNjYXBlR3JvdXAgKGdyb3VwKSB7XG4gIHJldHVybiBncm91cC5yZXBsYWNlKC8oWz0hOiRcXC8oKV0pL2csICdcXFxcJDEnKVxufVxuXG4vKipcbiAqIEF0dGFjaCB0aGUga2V5cyBhcyBhIHByb3BlcnR5IG9mIHRoZSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IVJlZ0V4cH0gcmVcbiAqIEBwYXJhbSAge0FycmF5fSAgIGtleXNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIGF0dGFjaEtleXMgKHJlLCBrZXlzKSB7XG4gIHJlLmtleXMgPSBrZXlzO1xuICByZXR1cm4gcmVcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGZsYWdzIGZvciBhIHJlZ2V4cCBmcm9tIHRoZSBvcHRpb25zLlxuICpcbiAqIEBwYXJhbSAge09iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBmbGFncyAob3B0aW9ucykge1xuICByZXR1cm4gb3B0aW9ucy5zZW5zaXRpdmUgPyAnJyA6ICdpJ1xufVxuXG4vKipcbiAqIFB1bGwgb3V0IGtleXMgZnJvbSBhIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshUmVnRXhwfSBwYXRoXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBrZXlzXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiByZWdleHBUb1JlZ2V4cCAocGF0aCwga2V5cykge1xuICAvLyBVc2UgYSBuZWdhdGl2ZSBsb29rYWhlYWQgdG8gbWF0Y2ggb25seSBjYXB0dXJpbmcgZ3JvdXBzLlxuICB2YXIgZ3JvdXBzID0gcGF0aC5zb3VyY2UubWF0Y2goL1xcKCg/IVxcPykvZyk7XG5cbiAgaWYgKGdyb3Vwcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZ3JvdXBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBrZXlzLnB1c2goe1xuICAgICAgICBuYW1lOiBpLFxuICAgICAgICBwcmVmaXg6IG51bGwsXG4gICAgICAgIGRlbGltaXRlcjogbnVsbCxcbiAgICAgICAgb3B0aW9uYWw6IGZhbHNlLFxuICAgICAgICByZXBlYXQ6IGZhbHNlLFxuICAgICAgICBwYXJ0aWFsOiBmYWxzZSxcbiAgICAgICAgYXN0ZXJpc2s6IGZhbHNlLFxuICAgICAgICBwYXR0ZXJuOiBudWxsXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYXR0YWNoS2V5cyhwYXRoLCBrZXlzKVxufVxuXG4vKipcbiAqIFRyYW5zZm9ybSBhbiBhcnJheSBpbnRvIGEgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFBcnJheX0gIHBhdGhcbiAqIEBwYXJhbSAge0FycmF5fSAgIGtleXNcbiAqIEBwYXJhbSAgeyFPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIGFycmF5VG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgdmFyIHBhcnRzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoLmxlbmd0aDsgaSsrKSB7XG4gICAgcGFydHMucHVzaChwYXRoVG9SZWdleHAocGF0aFtpXSwga2V5cywgb3B0aW9ucykuc291cmNlKTtcbiAgfVxuXG4gIHZhciByZWdleHAgPSBuZXcgUmVnRXhwKCcoPzonICsgcGFydHMuam9pbignfCcpICsgJyknLCBmbGFncyhvcHRpb25zKSk7XG5cbiAgcmV0dXJuIGF0dGFjaEtleXMocmVnZXhwLCBrZXlzKVxufVxuXG4vKipcbiAqIENyZWF0ZSBhIHBhdGggcmVnZXhwIGZyb20gc3RyaW5nIGlucHV0LlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gIHBhdGhcbiAqIEBwYXJhbSAgeyFBcnJheX0gIGtleXNcbiAqIEBwYXJhbSAgeyFPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHN0cmluZ1RvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIHJldHVybiB0b2tlbnNUb1JlZ0V4cChwYXJzZShwYXRoLCBvcHRpb25zKSwga2V5cywgb3B0aW9ucylcbn1cblxuLyoqXG4gKiBFeHBvc2UgYSBmdW5jdGlvbiBmb3IgdGFraW5nIHRva2VucyBhbmQgcmV0dXJuaW5nIGEgUmVnRXhwLlxuICpcbiAqIEBwYXJhbSAgeyFBcnJheX0gICAgICAgICAgdG9rZW5zXG4gKiBAcGFyYW0gIHsoQXJyYXl8T2JqZWN0KT19IGtleXNcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gdG9rZW5zVG9SZWdFeHAgKHRva2Vucywga2V5cywgb3B0aW9ucykge1xuICBpZiAoIWlzYXJyYXkoa2V5cykpIHtcbiAgICBvcHRpb25zID0gLyoqIEB0eXBlIHshT2JqZWN0fSAqLyAoa2V5cyB8fCBvcHRpb25zKTtcbiAgICBrZXlzID0gW107XG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICB2YXIgc3RyaWN0ID0gb3B0aW9ucy5zdHJpY3Q7XG4gIHZhciBlbmQgPSBvcHRpb25zLmVuZCAhPT0gZmFsc2U7XG4gIHZhciByb3V0ZSA9ICcnO1xuXG4gIC8vIEl0ZXJhdGUgb3ZlciB0aGUgdG9rZW5zIGFuZCBjcmVhdGUgb3VyIHJlZ2V4cCBzdHJpbmcuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHRva2VuID0gdG9rZW5zW2ldO1xuXG4gICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJvdXRlICs9IGVzY2FwZVN0cmluZyh0b2tlbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBwcmVmaXggPSBlc2NhcGVTdHJpbmcodG9rZW4ucHJlZml4KTtcbiAgICAgIHZhciBjYXB0dXJlID0gJyg/OicgKyB0b2tlbi5wYXR0ZXJuICsgJyknO1xuXG4gICAgICBrZXlzLnB1c2godG9rZW4pO1xuXG4gICAgICBpZiAodG9rZW4ucmVwZWF0KSB7XG4gICAgICAgIGNhcHR1cmUgKz0gJyg/OicgKyBwcmVmaXggKyBjYXB0dXJlICsgJykqJztcbiAgICAgIH1cblxuICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgIGlmICghdG9rZW4ucGFydGlhbCkge1xuICAgICAgICAgIGNhcHR1cmUgPSAnKD86JyArIHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKSk/JztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjYXB0dXJlID0gcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpPyc7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhcHR1cmUgPSBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJyknO1xuICAgICAgfVxuXG4gICAgICByb3V0ZSArPSBjYXB0dXJlO1xuICAgIH1cbiAgfVxuXG4gIHZhciBkZWxpbWl0ZXIgPSBlc2NhcGVTdHJpbmcob3B0aW9ucy5kZWxpbWl0ZXIgfHwgJy8nKTtcbiAgdmFyIGVuZHNXaXRoRGVsaW1pdGVyID0gcm91dGUuc2xpY2UoLWRlbGltaXRlci5sZW5ndGgpID09PSBkZWxpbWl0ZXI7XG5cbiAgLy8gSW4gbm9uLXN0cmljdCBtb2RlIHdlIGFsbG93IGEgc2xhc2ggYXQgdGhlIGVuZCBvZiBtYXRjaC4gSWYgdGhlIHBhdGggdG9cbiAgLy8gbWF0Y2ggYWxyZWFkeSBlbmRzIHdpdGggYSBzbGFzaCwgd2UgcmVtb3ZlIGl0IGZvciBjb25zaXN0ZW5jeS4gVGhlIHNsYXNoXG4gIC8vIGlzIHZhbGlkIGF0IHRoZSBlbmQgb2YgYSBwYXRoIG1hdGNoLCBub3QgaW4gdGhlIG1pZGRsZS4gVGhpcyBpcyBpbXBvcnRhbnRcbiAgLy8gaW4gbm9uLWVuZGluZyBtb2RlLCB3aGVyZSBcIi90ZXN0L1wiIHNob3VsZG4ndCBtYXRjaCBcIi90ZXN0Ly9yb3V0ZVwiLlxuICBpZiAoIXN0cmljdCkge1xuICAgIHJvdXRlID0gKGVuZHNXaXRoRGVsaW1pdGVyID8gcm91dGUuc2xpY2UoMCwgLWRlbGltaXRlci5sZW5ndGgpIDogcm91dGUpICsgJyg/OicgKyBkZWxpbWl0ZXIgKyAnKD89JCkpPyc7XG4gIH1cblxuICBpZiAoZW5kKSB7XG4gICAgcm91dGUgKz0gJyQnO1xuICB9IGVsc2Uge1xuICAgIC8vIEluIG5vbi1lbmRpbmcgbW9kZSwgd2UgbmVlZCB0aGUgY2FwdHVyaW5nIGdyb3VwcyB0byBtYXRjaCBhcyBtdWNoIGFzXG4gICAgLy8gcG9zc2libGUgYnkgdXNpbmcgYSBwb3NpdGl2ZSBsb29rYWhlYWQgdG8gdGhlIGVuZCBvciBuZXh0IHBhdGggc2VnbWVudC5cbiAgICByb3V0ZSArPSBzdHJpY3QgJiYgZW5kc1dpdGhEZWxpbWl0ZXIgPyAnJyA6ICcoPz0nICsgZGVsaW1pdGVyICsgJ3wkKSc7XG4gIH1cblxuICByZXR1cm4gYXR0YWNoS2V5cyhuZXcgUmVnRXhwKCdeJyArIHJvdXRlLCBmbGFncyhvcHRpb25zKSksIGtleXMpXG59XG5cbi8qKlxuICogTm9ybWFsaXplIHRoZSBnaXZlbiBwYXRoIHN0cmluZywgcmV0dXJuaW5nIGEgcmVndWxhciBleHByZXNzaW9uLlxuICpcbiAqIEFuIGVtcHR5IGFycmF5IGNhbiBiZSBwYXNzZWQgaW4gZm9yIHRoZSBrZXlzLCB3aGljaCB3aWxsIGhvbGQgdGhlXG4gKiBwbGFjZWhvbGRlciBrZXkgZGVzY3JpcHRpb25zLiBGb3IgZXhhbXBsZSwgdXNpbmcgYC91c2VyLzppZGAsIGBrZXlzYCB3aWxsXG4gKiBjb250YWluIGBbeyBuYW1lOiAnaWQnLCBkZWxpbWl0ZXI6ICcvJywgb3B0aW9uYWw6IGZhbHNlLCByZXBlYXQ6IGZhbHNlIH1dYC5cbiAqXG4gKiBAcGFyYW0gIHsoc3RyaW5nfFJlZ0V4cHxBcnJheSl9IHBhdGhcbiAqIEBwYXJhbSAgeyhBcnJheXxPYmplY3QpPX0gICAgICAga2V5c1xuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBwYXRoVG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgaWYgKCFpc2FycmF5KGtleXMpKSB7XG4gICAgb3B0aW9ucyA9IC8qKiBAdHlwZSB7IU9iamVjdH0gKi8gKGtleXMgfHwgb3B0aW9ucyk7XG4gICAga2V5cyA9IFtdO1xuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgaWYgKHBhdGggaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICByZXR1cm4gcmVnZXhwVG9SZWdleHAocGF0aCwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSlcbiAgfVxuXG4gIGlmIChpc2FycmF5KHBhdGgpKSB7XG4gICAgcmV0dXJuIGFycmF5VG9SZWdleHAoLyoqIEB0eXBlIHshQXJyYXl9ICovIChwYXRoKSwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSwgb3B0aW9ucylcbiAgfVxuXG4gIHJldHVybiBzdHJpbmdUb1JlZ2V4cCgvKiogQHR5cGUge3N0cmluZ30gKi8gKHBhdGgpLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpLCBvcHRpb25zKVxufVxuXG5wYXRoVG9SZWdleHBfMS5wYXJzZSA9IHBhcnNlXzE7XG5wYXRoVG9SZWdleHBfMS5jb21waWxlID0gY29tcGlsZV8xO1xucGF0aFRvUmVnZXhwXzEudG9rZW5zVG9GdW5jdGlvbiA9IHRva2Vuc1RvRnVuY3Rpb25fMTtcbnBhdGhUb1JlZ2V4cF8xLnRva2Vuc1RvUmVnRXhwID0gdG9rZW5zVG9SZWdFeHBfMTtcblxuLyogICovXG5cbi8vICRmbG93LWRpc2FibGUtbGluZVxudmFyIHJlZ2V4cENvbXBpbGVDYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbmZ1bmN0aW9uIGZpbGxQYXJhbXMgKFxuICBwYXRoLFxuICBwYXJhbXMsXG4gIHJvdXRlTXNnXG4pIHtcbiAgdHJ5IHtcbiAgICB2YXIgZmlsbGVyID1cbiAgICAgIHJlZ2V4cENvbXBpbGVDYWNoZVtwYXRoXSB8fFxuICAgICAgKHJlZ2V4cENvbXBpbGVDYWNoZVtwYXRoXSA9IHBhdGhUb1JlZ2V4cF8xLmNvbXBpbGUocGF0aCkpO1xuICAgIHJldHVybiBmaWxsZXIocGFyYW1zIHx8IHt9LCB7IHByZXR0eTogdHJ1ZSB9KVxuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHdhcm4oZmFsc2UsIChcIm1pc3NpbmcgcGFyYW0gZm9yIFwiICsgcm91dGVNc2cgKyBcIjogXCIgKyAoZS5tZXNzYWdlKSkpO1xuICAgIH1cbiAgICByZXR1cm4gJydcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gY3JlYXRlUm91dGVNYXAgKFxuICByb3V0ZXMsXG4gIG9sZFBhdGhMaXN0LFxuICBvbGRQYXRoTWFwLFxuICBvbGROYW1lTWFwXG4pIHtcbiAgLy8gdGhlIHBhdGggbGlzdCBpcyB1c2VkIHRvIGNvbnRyb2wgcGF0aCBtYXRjaGluZyBwcmlvcml0eVxuICB2YXIgcGF0aExpc3QgPSBvbGRQYXRoTGlzdCB8fCBbXTtcbiAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gIHZhciBwYXRoTWFwID0gb2xkUGF0aE1hcCB8fCBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgdmFyIG5hbWVNYXAgPSBvbGROYW1lTWFwIHx8IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgcm91dGVzLmZvckVhY2goZnVuY3Rpb24gKHJvdXRlKSB7XG4gICAgYWRkUm91dGVSZWNvcmQocGF0aExpc3QsIHBhdGhNYXAsIG5hbWVNYXAsIHJvdXRlKTtcbiAgfSk7XG5cbiAgLy8gZW5zdXJlIHdpbGRjYXJkIHJvdXRlcyBhcmUgYWx3YXlzIGF0IHRoZSBlbmRcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBwYXRoTGlzdC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBpZiAocGF0aExpc3RbaV0gPT09ICcqJykge1xuICAgICAgcGF0aExpc3QucHVzaChwYXRoTGlzdC5zcGxpY2UoaSwgMSlbMF0pO1xuICAgICAgbC0tO1xuICAgICAgaS0tO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcGF0aExpc3Q6IHBhdGhMaXN0LFxuICAgIHBhdGhNYXA6IHBhdGhNYXAsXG4gICAgbmFtZU1hcDogbmFtZU1hcFxuICB9XG59XG5cbmZ1bmN0aW9uIGFkZFJvdXRlUmVjb3JkIChcbiAgcGF0aExpc3QsXG4gIHBhdGhNYXAsXG4gIG5hbWVNYXAsXG4gIHJvdXRlLFxuICBwYXJlbnQsXG4gIG1hdGNoQXNcbikge1xuICB2YXIgcGF0aCA9IHJvdXRlLnBhdGg7XG4gIHZhciBuYW1lID0gcm91dGUubmFtZTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBhc3NlcnQocGF0aCAhPSBudWxsLCBcIlxcXCJwYXRoXFxcIiBpcyByZXF1aXJlZCBpbiBhIHJvdXRlIGNvbmZpZ3VyYXRpb24uXCIpO1xuICAgIGFzc2VydChcbiAgICAgIHR5cGVvZiByb3V0ZS5jb21wb25lbnQgIT09ICdzdHJpbmcnLFxuICAgICAgXCJyb3V0ZSBjb25maWcgXFxcImNvbXBvbmVudFxcXCIgZm9yIHBhdGg6IFwiICsgKFN0cmluZyhwYXRoIHx8IG5hbWUpKSArIFwiIGNhbm5vdCBiZSBhIFwiICtcbiAgICAgIFwic3RyaW5nIGlkLiBVc2UgYW4gYWN0dWFsIGNvbXBvbmVudCBpbnN0ZWFkLlwiXG4gICAgKTtcbiAgfVxuXG4gIHZhciBwYXRoVG9SZWdleHBPcHRpb25zID0gcm91dGUucGF0aFRvUmVnZXhwT3B0aW9ucyB8fCB7fTtcbiAgdmFyIG5vcm1hbGl6ZWRQYXRoID0gbm9ybWFsaXplUGF0aChcbiAgICBwYXRoLFxuICAgIHBhcmVudCxcbiAgICBwYXRoVG9SZWdleHBPcHRpb25zLnN0cmljdFxuICApO1xuXG4gIGlmICh0eXBlb2Ygcm91dGUuY2FzZVNlbnNpdGl2ZSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgcGF0aFRvUmVnZXhwT3B0aW9ucy5zZW5zaXRpdmUgPSByb3V0ZS5jYXNlU2Vuc2l0aXZlO1xuICB9XG5cbiAgdmFyIHJlY29yZCA9IHtcbiAgICBwYXRoOiBub3JtYWxpemVkUGF0aCxcbiAgICByZWdleDogY29tcGlsZVJvdXRlUmVnZXgobm9ybWFsaXplZFBhdGgsIHBhdGhUb1JlZ2V4cE9wdGlvbnMpLFxuICAgIGNvbXBvbmVudHM6IHJvdXRlLmNvbXBvbmVudHMgfHwgeyBkZWZhdWx0OiByb3V0ZS5jb21wb25lbnQgfSxcbiAgICBpbnN0YW5jZXM6IHt9LFxuICAgIG5hbWU6IG5hbWUsXG4gICAgcGFyZW50OiBwYXJlbnQsXG4gICAgbWF0Y2hBczogbWF0Y2hBcyxcbiAgICByZWRpcmVjdDogcm91dGUucmVkaXJlY3QsXG4gICAgYmVmb3JlRW50ZXI6IHJvdXRlLmJlZm9yZUVudGVyLFxuICAgIG1ldGE6IHJvdXRlLm1ldGEgfHwge30sXG4gICAgcHJvcHM6IHJvdXRlLnByb3BzID09IG51bGxcbiAgICAgID8ge31cbiAgICAgIDogcm91dGUuY29tcG9uZW50c1xuICAgICAgICA/IHJvdXRlLnByb3BzXG4gICAgICAgIDogeyBkZWZhdWx0OiByb3V0ZS5wcm9wcyB9XG4gIH07XG5cbiAgaWYgKHJvdXRlLmNoaWxkcmVuKSB7XG4gICAgLy8gV2FybiBpZiByb3V0ZSBpcyBuYW1lZCwgZG9lcyBub3QgcmVkaXJlY3QgYW5kIGhhcyBhIGRlZmF1bHQgY2hpbGQgcm91dGUuXG4gICAgLy8gSWYgdXNlcnMgbmF2aWdhdGUgdG8gdGhpcyByb3V0ZSBieSBuYW1lLCB0aGUgZGVmYXVsdCBjaGlsZCB3aWxsXG4gICAgLy8gbm90IGJlIHJlbmRlcmVkIChHSCBJc3N1ZSAjNjI5KVxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAocm91dGUubmFtZSAmJiAhcm91dGUucmVkaXJlY3QgJiYgcm91dGUuY2hpbGRyZW4uc29tZShmdW5jdGlvbiAoY2hpbGQpIHsgcmV0dXJuIC9eXFwvPyQvLnRlc3QoY2hpbGQucGF0aCk7IH0pKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgXCJOYW1lZCBSb3V0ZSAnXCIgKyAocm91dGUubmFtZSkgKyBcIicgaGFzIGEgZGVmYXVsdCBjaGlsZCByb3V0ZS4gXCIgK1xuICAgICAgICAgIFwiV2hlbiBuYXZpZ2F0aW5nIHRvIHRoaXMgbmFtZWQgcm91dGUgKDp0bz1cXFwie25hbWU6ICdcIiArIChyb3V0ZS5uYW1lKSArIFwiJ1xcXCIpLCBcIiArXG4gICAgICAgICAgXCJ0aGUgZGVmYXVsdCBjaGlsZCByb3V0ZSB3aWxsIG5vdCBiZSByZW5kZXJlZC4gUmVtb3ZlIHRoZSBuYW1lIGZyb20gXCIgK1xuICAgICAgICAgIFwidGhpcyByb3V0ZSBhbmQgdXNlIHRoZSBuYW1lIG9mIHRoZSBkZWZhdWx0IGNoaWxkIHJvdXRlIGZvciBuYW1lZCBcIiArXG4gICAgICAgICAgXCJsaW5rcyBpbnN0ZWFkLlwiXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIHJvdXRlLmNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICB2YXIgY2hpbGRNYXRjaEFzID0gbWF0Y2hBc1xuICAgICAgICA/IGNsZWFuUGF0aCgobWF0Y2hBcyArIFwiL1wiICsgKGNoaWxkLnBhdGgpKSlcbiAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICBhZGRSb3V0ZVJlY29yZChwYXRoTGlzdCwgcGF0aE1hcCwgbmFtZU1hcCwgY2hpbGQsIHJlY29yZCwgY2hpbGRNYXRjaEFzKTtcbiAgICB9KTtcbiAgfVxuXG4gIGlmIChyb3V0ZS5hbGlhcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdmFyIGFsaWFzZXMgPSBBcnJheS5pc0FycmF5KHJvdXRlLmFsaWFzKVxuICAgICAgPyByb3V0ZS5hbGlhc1xuICAgICAgOiBbcm91dGUuYWxpYXNdO1xuXG4gICAgYWxpYXNlcy5mb3JFYWNoKGZ1bmN0aW9uIChhbGlhcykge1xuICAgICAgdmFyIGFsaWFzUm91dGUgPSB7XG4gICAgICAgIHBhdGg6IGFsaWFzLFxuICAgICAgICBjaGlsZHJlbjogcm91dGUuY2hpbGRyZW5cbiAgICAgIH07XG4gICAgICBhZGRSb3V0ZVJlY29yZChcbiAgICAgICAgcGF0aExpc3QsXG4gICAgICAgIHBhdGhNYXAsXG4gICAgICAgIG5hbWVNYXAsXG4gICAgICAgIGFsaWFzUm91dGUsXG4gICAgICAgIHBhcmVudCxcbiAgICAgICAgcmVjb3JkLnBhdGggfHwgJy8nIC8vIG1hdGNoQXNcbiAgICAgICk7XG4gICAgfSk7XG4gIH1cblxuICBpZiAoIXBhdGhNYXBbcmVjb3JkLnBhdGhdKSB7XG4gICAgcGF0aExpc3QucHVzaChyZWNvcmQucGF0aCk7XG4gICAgcGF0aE1hcFtyZWNvcmQucGF0aF0gPSByZWNvcmQ7XG4gIH1cblxuICBpZiAobmFtZSkge1xuICAgIGlmICghbmFtZU1hcFtuYW1lXSkge1xuICAgICAgbmFtZU1hcFtuYW1lXSA9IHJlY29yZDtcbiAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIW1hdGNoQXMpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIGZhbHNlLFxuICAgICAgICBcIkR1cGxpY2F0ZSBuYW1lZCByb3V0ZXMgZGVmaW5pdGlvbjogXCIgK1xuICAgICAgICBcInsgbmFtZTogXFxcIlwiICsgbmFtZSArIFwiXFxcIiwgcGF0aDogXFxcIlwiICsgKHJlY29yZC5wYXRoKSArIFwiXFxcIiB9XCJcbiAgICAgICk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNvbXBpbGVSb3V0ZVJlZ2V4IChwYXRoLCBwYXRoVG9SZWdleHBPcHRpb25zKSB7XG4gIHZhciByZWdleCA9IHBhdGhUb1JlZ2V4cF8xKHBhdGgsIFtdLCBwYXRoVG9SZWdleHBPcHRpb25zKTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB2YXIga2V5cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgcmVnZXgua2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHdhcm4oIWtleXNba2V5Lm5hbWVdLCAoXCJEdXBsaWNhdGUgcGFyYW0ga2V5cyBpbiByb3V0ZSB3aXRoIHBhdGg6IFxcXCJcIiArIHBhdGggKyBcIlxcXCJcIikpO1xuICAgICAga2V5c1trZXkubmFtZV0gPSB0cnVlO1xuICAgIH0pO1xuICB9XG4gIHJldHVybiByZWdleFxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVQYXRoIChwYXRoLCBwYXJlbnQsIHN0cmljdCkge1xuICBpZiAoIXN0cmljdCkgeyBwYXRoID0gcGF0aC5yZXBsYWNlKC9cXC8kLywgJycpOyB9XG4gIGlmIChwYXRoWzBdID09PSAnLycpIHsgcmV0dXJuIHBhdGggfVxuICBpZiAocGFyZW50ID09IG51bGwpIHsgcmV0dXJuIHBhdGggfVxuICByZXR1cm4gY2xlYW5QYXRoKCgocGFyZW50LnBhdGgpICsgXCIvXCIgKyBwYXRoKSlcbn1cblxuLyogICovXG5cblxuZnVuY3Rpb24gbm9ybWFsaXplTG9jYXRpb24gKFxuICByYXcsXG4gIGN1cnJlbnQsXG4gIGFwcGVuZCxcbiAgcm91dGVyXG4pIHtcbiAgdmFyIG5leHQgPSB0eXBlb2YgcmF3ID09PSAnc3RyaW5nJyA/IHsgcGF0aDogcmF3IH0gOiByYXc7XG4gIC8vIG5hbWVkIHRhcmdldFxuICBpZiAobmV4dC5uYW1lIHx8IG5leHQuX25vcm1hbGl6ZWQpIHtcbiAgICByZXR1cm4gbmV4dFxuICB9XG5cbiAgLy8gcmVsYXRpdmUgcGFyYW1zXG4gIGlmICghbmV4dC5wYXRoICYmIG5leHQucGFyYW1zICYmIGN1cnJlbnQpIHtcbiAgICBuZXh0ID0gYXNzaWduKHt9LCBuZXh0KTtcbiAgICBuZXh0Ll9ub3JtYWxpemVkID0gdHJ1ZTtcbiAgICB2YXIgcGFyYW1zID0gYXNzaWduKGFzc2lnbih7fSwgY3VycmVudC5wYXJhbXMpLCBuZXh0LnBhcmFtcyk7XG4gICAgaWYgKGN1cnJlbnQubmFtZSkge1xuICAgICAgbmV4dC5uYW1lID0gY3VycmVudC5uYW1lO1xuICAgICAgbmV4dC5wYXJhbXMgPSBwYXJhbXM7XG4gICAgfSBlbHNlIGlmIChjdXJyZW50Lm1hdGNoZWQubGVuZ3RoKSB7XG4gICAgICB2YXIgcmF3UGF0aCA9IGN1cnJlbnQubWF0Y2hlZFtjdXJyZW50Lm1hdGNoZWQubGVuZ3RoIC0gMV0ucGF0aDtcbiAgICAgIG5leHQucGF0aCA9IGZpbGxQYXJhbXMocmF3UGF0aCwgcGFyYW1zLCAoXCJwYXRoIFwiICsgKGN1cnJlbnQucGF0aCkpKTtcbiAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHdhcm4oZmFsc2UsIFwicmVsYXRpdmUgcGFyYW1zIG5hdmlnYXRpb24gcmVxdWlyZXMgYSBjdXJyZW50IHJvdXRlLlwiKTtcbiAgICB9XG4gICAgcmV0dXJuIG5leHRcbiAgfVxuXG4gIHZhciBwYXJzZWRQYXRoID0gcGFyc2VQYXRoKG5leHQucGF0aCB8fCAnJyk7XG4gIHZhciBiYXNlUGF0aCA9IChjdXJyZW50ICYmIGN1cnJlbnQucGF0aCkgfHwgJy8nO1xuICB2YXIgcGF0aCA9IHBhcnNlZFBhdGgucGF0aFxuICAgID8gcmVzb2x2ZVBhdGgocGFyc2VkUGF0aC5wYXRoLCBiYXNlUGF0aCwgYXBwZW5kIHx8IG5leHQuYXBwZW5kKVxuICAgIDogYmFzZVBhdGg7XG5cbiAgdmFyIHF1ZXJ5ID0gcmVzb2x2ZVF1ZXJ5KFxuICAgIHBhcnNlZFBhdGgucXVlcnksXG4gICAgbmV4dC5xdWVyeSxcbiAgICByb3V0ZXIgJiYgcm91dGVyLm9wdGlvbnMucGFyc2VRdWVyeVxuICApO1xuXG4gIHZhciBoYXNoID0gbmV4dC5oYXNoIHx8IHBhcnNlZFBhdGguaGFzaDtcbiAgaWYgKGhhc2ggJiYgaGFzaC5jaGFyQXQoMCkgIT09ICcjJykge1xuICAgIGhhc2ggPSBcIiNcIiArIGhhc2g7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIF9ub3JtYWxpemVkOiB0cnVlLFxuICAgIHBhdGg6IHBhdGgsXG4gICAgcXVlcnk6IHF1ZXJ5LFxuICAgIGhhc2g6IGhhc2hcbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NpZ24gKGEsIGIpIHtcbiAgZm9yICh2YXIga2V5IGluIGIpIHtcbiAgICBhW2tleV0gPSBiW2tleV07XG4gIH1cbiAgcmV0dXJuIGFcbn1cblxuLyogICovXG5cblxuZnVuY3Rpb24gY3JlYXRlTWF0Y2hlciAoXG4gIHJvdXRlcyxcbiAgcm91dGVyXG4pIHtcbiAgdmFyIHJlZiA9IGNyZWF0ZVJvdXRlTWFwKHJvdXRlcyk7XG4gIHZhciBwYXRoTGlzdCA9IHJlZi5wYXRoTGlzdDtcbiAgdmFyIHBhdGhNYXAgPSByZWYucGF0aE1hcDtcbiAgdmFyIG5hbWVNYXAgPSByZWYubmFtZU1hcDtcblxuICBmdW5jdGlvbiBhZGRSb3V0ZXMgKHJvdXRlcykge1xuICAgIGNyZWF0ZVJvdXRlTWFwKHJvdXRlcywgcGF0aExpc3QsIHBhdGhNYXAsIG5hbWVNYXApO1xuICB9XG5cbiAgZnVuY3Rpb24gbWF0Y2ggKFxuICAgIHJhdyxcbiAgICBjdXJyZW50Um91dGUsXG4gICAgcmVkaXJlY3RlZEZyb21cbiAgKSB7XG4gICAgdmFyIGxvY2F0aW9uID0gbm9ybWFsaXplTG9jYXRpb24ocmF3LCBjdXJyZW50Um91dGUsIGZhbHNlLCByb3V0ZXIpO1xuICAgIHZhciBuYW1lID0gbG9jYXRpb24ubmFtZTtcblxuICAgIGlmIChuYW1lKSB7XG4gICAgICB2YXIgcmVjb3JkID0gbmFtZU1hcFtuYW1lXTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHdhcm4ocmVjb3JkLCAoXCJSb3V0ZSB3aXRoIG5hbWUgJ1wiICsgbmFtZSArIFwiJyBkb2VzIG5vdCBleGlzdFwiKSk7XG4gICAgICB9XG4gICAgICBpZiAoIXJlY29yZCkgeyByZXR1cm4gX2NyZWF0ZVJvdXRlKG51bGwsIGxvY2F0aW9uKSB9XG4gICAgICB2YXIgcGFyYW1OYW1lcyA9IHJlY29yZC5yZWdleC5rZXlzXG4gICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gIWtleS5vcHRpb25hbDsgfSlcbiAgICAgICAgLm1hcChmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBrZXkubmFtZTsgfSk7XG5cbiAgICAgIGlmICh0eXBlb2YgbG9jYXRpb24ucGFyYW1zICE9PSAnb2JqZWN0Jykge1xuICAgICAgICBsb2NhdGlvbi5wYXJhbXMgPSB7fTtcbiAgICAgIH1cblxuICAgICAgaWYgKGN1cnJlbnRSb3V0ZSAmJiB0eXBlb2YgY3VycmVudFJvdXRlLnBhcmFtcyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIGN1cnJlbnRSb3V0ZS5wYXJhbXMpIHtcbiAgICAgICAgICBpZiAoIShrZXkgaW4gbG9jYXRpb24ucGFyYW1zKSAmJiBwYXJhbU5hbWVzLmluZGV4T2Yoa2V5KSA+IC0xKSB7XG4gICAgICAgICAgICBsb2NhdGlvbi5wYXJhbXNba2V5XSA9IGN1cnJlbnRSb3V0ZS5wYXJhbXNba2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHJlY29yZCkge1xuICAgICAgICBsb2NhdGlvbi5wYXRoID0gZmlsbFBhcmFtcyhyZWNvcmQucGF0aCwgbG9jYXRpb24ucGFyYW1zLCAoXCJuYW1lZCByb3V0ZSBcXFwiXCIgKyBuYW1lICsgXCJcXFwiXCIpKTtcbiAgICAgICAgcmV0dXJuIF9jcmVhdGVSb3V0ZShyZWNvcmQsIGxvY2F0aW9uLCByZWRpcmVjdGVkRnJvbSlcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGxvY2F0aW9uLnBhdGgpIHtcbiAgICAgIGxvY2F0aW9uLnBhcmFtcyA9IHt9O1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoTGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgcGF0aCA9IHBhdGhMaXN0W2ldO1xuICAgICAgICB2YXIgcmVjb3JkJDEgPSBwYXRoTWFwW3BhdGhdO1xuICAgICAgICBpZiAobWF0Y2hSb3V0ZShyZWNvcmQkMS5yZWdleCwgbG9jYXRpb24ucGF0aCwgbG9jYXRpb24ucGFyYW1zKSkge1xuICAgICAgICAgIHJldHVybiBfY3JlYXRlUm91dGUocmVjb3JkJDEsIGxvY2F0aW9uLCByZWRpcmVjdGVkRnJvbSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICAvLyBubyBtYXRjaFxuICAgIHJldHVybiBfY3JlYXRlUm91dGUobnVsbCwgbG9jYXRpb24pXG4gIH1cblxuICBmdW5jdGlvbiByZWRpcmVjdCAoXG4gICAgcmVjb3JkLFxuICAgIGxvY2F0aW9uXG4gICkge1xuICAgIHZhciBvcmlnaW5hbFJlZGlyZWN0ID0gcmVjb3JkLnJlZGlyZWN0O1xuICAgIHZhciByZWRpcmVjdCA9IHR5cGVvZiBvcmlnaW5hbFJlZGlyZWN0ID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gb3JpZ2luYWxSZWRpcmVjdChjcmVhdGVSb3V0ZShyZWNvcmQsIGxvY2F0aW9uLCBudWxsLCByb3V0ZXIpKVxuICAgICAgICA6IG9yaWdpbmFsUmVkaXJlY3Q7XG5cbiAgICBpZiAodHlwZW9mIHJlZGlyZWN0ID09PSAnc3RyaW5nJykge1xuICAgICAgcmVkaXJlY3QgPSB7IHBhdGg6IHJlZGlyZWN0IH07XG4gICAgfVxuXG4gICAgaWYgKCFyZWRpcmVjdCB8fCB0eXBlb2YgcmVkaXJlY3QgIT09ICdvYmplY3QnKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIGZhbHNlLCAoXCJpbnZhbGlkIHJlZGlyZWN0IG9wdGlvbjogXCIgKyAoSlNPTi5zdHJpbmdpZnkocmVkaXJlY3QpKSlcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBfY3JlYXRlUm91dGUobnVsbCwgbG9jYXRpb24pXG4gICAgfVxuXG4gICAgdmFyIHJlID0gcmVkaXJlY3Q7XG4gICAgdmFyIG5hbWUgPSByZS5uYW1lO1xuICAgIHZhciBwYXRoID0gcmUucGF0aDtcbiAgICB2YXIgcXVlcnkgPSBsb2NhdGlvbi5xdWVyeTtcbiAgICB2YXIgaGFzaCA9IGxvY2F0aW9uLmhhc2g7XG4gICAgdmFyIHBhcmFtcyA9IGxvY2F0aW9uLnBhcmFtcztcbiAgICBxdWVyeSA9IHJlLmhhc093blByb3BlcnR5KCdxdWVyeScpID8gcmUucXVlcnkgOiBxdWVyeTtcbiAgICBoYXNoID0gcmUuaGFzT3duUHJvcGVydHkoJ2hhc2gnKSA/IHJlLmhhc2ggOiBoYXNoO1xuICAgIHBhcmFtcyA9IHJlLmhhc093blByb3BlcnR5KCdwYXJhbXMnKSA/IHJlLnBhcmFtcyA6IHBhcmFtcztcblxuICAgIGlmIChuYW1lKSB7XG4gICAgICAvLyByZXNvbHZlZCBuYW1lZCBkaXJlY3RcbiAgICAgIHZhciB0YXJnZXRSZWNvcmQgPSBuYW1lTWFwW25hbWVdO1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgYXNzZXJ0KHRhcmdldFJlY29yZCwgKFwicmVkaXJlY3QgZmFpbGVkOiBuYW1lZCByb3V0ZSBcXFwiXCIgKyBuYW1lICsgXCJcXFwiIG5vdCBmb3VuZC5cIikpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1hdGNoKHtcbiAgICAgICAgX25vcm1hbGl6ZWQ6IHRydWUsXG4gICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgIHF1ZXJ5OiBxdWVyeSxcbiAgICAgICAgaGFzaDogaGFzaCxcbiAgICAgICAgcGFyYW1zOiBwYXJhbXNcbiAgICAgIH0sIHVuZGVmaW5lZCwgbG9jYXRpb24pXG4gICAgfSBlbHNlIGlmIChwYXRoKSB7XG4gICAgICAvLyAxLiByZXNvbHZlIHJlbGF0aXZlIHJlZGlyZWN0XG4gICAgICB2YXIgcmF3UGF0aCA9IHJlc29sdmVSZWNvcmRQYXRoKHBhdGgsIHJlY29yZCk7XG4gICAgICAvLyAyLiByZXNvbHZlIHBhcmFtc1xuICAgICAgdmFyIHJlc29sdmVkUGF0aCA9IGZpbGxQYXJhbXMocmF3UGF0aCwgcGFyYW1zLCAoXCJyZWRpcmVjdCByb3V0ZSB3aXRoIHBhdGggXFxcIlwiICsgcmF3UGF0aCArIFwiXFxcIlwiKSk7XG4gICAgICAvLyAzLiByZW1hdGNoIHdpdGggZXhpc3RpbmcgcXVlcnkgYW5kIGhhc2hcbiAgICAgIHJldHVybiBtYXRjaCh7XG4gICAgICAgIF9ub3JtYWxpemVkOiB0cnVlLFxuICAgICAgICBwYXRoOiByZXNvbHZlZFBhdGgsXG4gICAgICAgIHF1ZXJ5OiBxdWVyeSxcbiAgICAgICAgaGFzaDogaGFzaFxuICAgICAgfSwgdW5kZWZpbmVkLCBsb2NhdGlvbilcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgd2FybihmYWxzZSwgKFwiaW52YWxpZCByZWRpcmVjdCBvcHRpb246IFwiICsgKEpTT04uc3RyaW5naWZ5KHJlZGlyZWN0KSkpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBfY3JlYXRlUm91dGUobnVsbCwgbG9jYXRpb24pXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gYWxpYXMgKFxuICAgIHJlY29yZCxcbiAgICBsb2NhdGlvbixcbiAgICBtYXRjaEFzXG4gICkge1xuICAgIHZhciBhbGlhc2VkUGF0aCA9IGZpbGxQYXJhbXMobWF0Y2hBcywgbG9jYXRpb24ucGFyYW1zLCAoXCJhbGlhc2VkIHJvdXRlIHdpdGggcGF0aCBcXFwiXCIgKyBtYXRjaEFzICsgXCJcXFwiXCIpKTtcbiAgICB2YXIgYWxpYXNlZE1hdGNoID0gbWF0Y2goe1xuICAgICAgX25vcm1hbGl6ZWQ6IHRydWUsXG4gICAgICBwYXRoOiBhbGlhc2VkUGF0aFxuICAgIH0pO1xuICAgIGlmIChhbGlhc2VkTWF0Y2gpIHtcbiAgICAgIHZhciBtYXRjaGVkID0gYWxpYXNlZE1hdGNoLm1hdGNoZWQ7XG4gICAgICB2YXIgYWxpYXNlZFJlY29yZCA9IG1hdGNoZWRbbWF0Y2hlZC5sZW5ndGggLSAxXTtcbiAgICAgIGxvY2F0aW9uLnBhcmFtcyA9IGFsaWFzZWRNYXRjaC5wYXJhbXM7XG4gICAgICByZXR1cm4gX2NyZWF0ZVJvdXRlKGFsaWFzZWRSZWNvcmQsIGxvY2F0aW9uKVxuICAgIH1cbiAgICByZXR1cm4gX2NyZWF0ZVJvdXRlKG51bGwsIGxvY2F0aW9uKVxuICB9XG5cbiAgZnVuY3Rpb24gX2NyZWF0ZVJvdXRlIChcbiAgICByZWNvcmQsXG4gICAgbG9jYXRpb24sXG4gICAgcmVkaXJlY3RlZEZyb21cbiAgKSB7XG4gICAgaWYgKHJlY29yZCAmJiByZWNvcmQucmVkaXJlY3QpIHtcbiAgICAgIHJldHVybiByZWRpcmVjdChyZWNvcmQsIHJlZGlyZWN0ZWRGcm9tIHx8IGxvY2F0aW9uKVxuICAgIH1cbiAgICBpZiAocmVjb3JkICYmIHJlY29yZC5tYXRjaEFzKSB7XG4gICAgICByZXR1cm4gYWxpYXMocmVjb3JkLCBsb2NhdGlvbiwgcmVjb3JkLm1hdGNoQXMpXG4gICAgfVxuICAgIHJldHVybiBjcmVhdGVSb3V0ZShyZWNvcmQsIGxvY2F0aW9uLCByZWRpcmVjdGVkRnJvbSwgcm91dGVyKVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBtYXRjaDogbWF0Y2gsXG4gICAgYWRkUm91dGVzOiBhZGRSb3V0ZXNcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXRjaFJvdXRlIChcbiAgcmVnZXgsXG4gIHBhdGgsXG4gIHBhcmFtc1xuKSB7XG4gIHZhciBtID0gcGF0aC5tYXRjaChyZWdleCk7XG5cbiAgaWYgKCFtKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH0gZWxzZSBpZiAoIXBhcmFtcykge1xuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBmb3IgKHZhciBpID0gMSwgbGVuID0gbS5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgIHZhciBrZXkgPSByZWdleC5rZXlzW2kgLSAxXTtcbiAgICB2YXIgdmFsID0gdHlwZW9mIG1baV0gPT09ICdzdHJpbmcnID8gZGVjb2RlVVJJQ29tcG9uZW50KG1baV0pIDogbVtpXTtcbiAgICBpZiAoa2V5KSB7XG4gICAgICBwYXJhbXNba2V5Lm5hbWVdID0gdmFsO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlXG59XG5cbmZ1bmN0aW9uIHJlc29sdmVSZWNvcmRQYXRoIChwYXRoLCByZWNvcmQpIHtcbiAgcmV0dXJuIHJlc29sdmVQYXRoKHBhdGgsIHJlY29yZC5wYXJlbnQgPyByZWNvcmQucGFyZW50LnBhdGggOiAnLycsIHRydWUpXG59XG5cbi8qICAqL1xuXG5cbnZhciBwb3NpdGlvblN0b3JlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuZnVuY3Rpb24gc2V0dXBTY3JvbGwgKCkge1xuICAvLyBGaXggZm9yICMxNTg1IGZvciBGaXJlZm94XG4gIHdpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSh7IGtleTogZ2V0U3RhdGVLZXkoKSB9LCAnJyk7XG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIGZ1bmN0aW9uIChlKSB7XG4gICAgc2F2ZVNjcm9sbFBvc2l0aW9uKCk7XG4gICAgaWYgKGUuc3RhdGUgJiYgZS5zdGF0ZS5rZXkpIHtcbiAgICAgIHNldFN0YXRlS2V5KGUuc3RhdGUua2V5KTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVTY3JvbGwgKFxuICByb3V0ZXIsXG4gIHRvLFxuICBmcm9tLFxuICBpc1BvcFxuKSB7XG4gIGlmICghcm91dGVyLmFwcCkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGJlaGF2aW9yID0gcm91dGVyLm9wdGlvbnMuc2Nyb2xsQmVoYXZpb3I7XG4gIGlmICghYmVoYXZpb3IpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiZWhhdmlvciA9PT0gJ2Z1bmN0aW9uJywgXCJzY3JvbGxCZWhhdmlvciBtdXN0IGJlIGEgZnVuY3Rpb25cIik7XG4gIH1cblxuICAvLyB3YWl0IHVudGlsIHJlLXJlbmRlciBmaW5pc2hlcyBiZWZvcmUgc2Nyb2xsaW5nXG4gIHJvdXRlci5hcHAuJG5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcG9zaXRpb24gPSBnZXRTY3JvbGxQb3NpdGlvbigpO1xuICAgIHZhciBzaG91bGRTY3JvbGwgPSBiZWhhdmlvcih0bywgZnJvbSwgaXNQb3AgPyBwb3NpdGlvbiA6IG51bGwpO1xuXG4gICAgaWYgKCFzaG91bGRTY3JvbGwpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygc2hvdWxkU2Nyb2xsLnRoZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHNob3VsZFNjcm9sbC50aGVuKGZ1bmN0aW9uIChzaG91bGRTY3JvbGwpIHtcbiAgICAgICAgc2Nyb2xsVG9Qb3NpdGlvbigoc2hvdWxkU2Nyb2xsKSwgcG9zaXRpb24pO1xuICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGFzc2VydChmYWxzZSwgZXJyLnRvU3RyaW5nKCkpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2Nyb2xsVG9Qb3NpdGlvbihzaG91bGRTY3JvbGwsIHBvc2l0aW9uKTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBzYXZlU2Nyb2xsUG9zaXRpb24gKCkge1xuICB2YXIga2V5ID0gZ2V0U3RhdGVLZXkoKTtcbiAgaWYgKGtleSkge1xuICAgIHBvc2l0aW9uU3RvcmVba2V5XSA9IHtcbiAgICAgIHg6IHdpbmRvdy5wYWdlWE9mZnNldCxcbiAgICAgIHk6IHdpbmRvdy5wYWdlWU9mZnNldFxuICAgIH07XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0U2Nyb2xsUG9zaXRpb24gKCkge1xuICB2YXIga2V5ID0gZ2V0U3RhdGVLZXkoKTtcbiAgaWYgKGtleSkge1xuICAgIHJldHVybiBwb3NpdGlvblN0b3JlW2tleV1cbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRFbGVtZW50UG9zaXRpb24gKGVsLCBvZmZzZXQpIHtcbiAgdmFyIGRvY0VsID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICB2YXIgZG9jUmVjdCA9IGRvY0VsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICB2YXIgZWxSZWN0ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIHJldHVybiB7XG4gICAgeDogZWxSZWN0LmxlZnQgLSBkb2NSZWN0LmxlZnQgLSBvZmZzZXQueCxcbiAgICB5OiBlbFJlY3QudG9wIC0gZG9jUmVjdC50b3AgLSBvZmZzZXQueVxuICB9XG59XG5cbmZ1bmN0aW9uIGlzVmFsaWRQb3NpdGlvbiAob2JqKSB7XG4gIHJldHVybiBpc051bWJlcihvYmoueCkgfHwgaXNOdW1iZXIob2JqLnkpXG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVBvc2l0aW9uIChvYmopIHtcbiAgcmV0dXJuIHtcbiAgICB4OiBpc051bWJlcihvYmoueCkgPyBvYmoueCA6IHdpbmRvdy5wYWdlWE9mZnNldCxcbiAgICB5OiBpc051bWJlcihvYmoueSkgPyBvYmoueSA6IHdpbmRvdy5wYWdlWU9mZnNldFxuICB9XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZU9mZnNldCAob2JqKSB7XG4gIHJldHVybiB7XG4gICAgeDogaXNOdW1iZXIob2JqLngpID8gb2JqLnggOiAwLFxuICAgIHk6IGlzTnVtYmVyKG9iai55KSA/IG9iai55IDogMFxuICB9XG59XG5cbmZ1bmN0aW9uIGlzTnVtYmVyICh2KSB7XG4gIHJldHVybiB0eXBlb2YgdiA9PT0gJ251bWJlcidcbn1cblxuZnVuY3Rpb24gc2Nyb2xsVG9Qb3NpdGlvbiAoc2hvdWxkU2Nyb2xsLCBwb3NpdGlvbikge1xuICB2YXIgaXNPYmplY3QgPSB0eXBlb2Ygc2hvdWxkU2Nyb2xsID09PSAnb2JqZWN0JztcbiAgaWYgKGlzT2JqZWN0ICYmIHR5cGVvZiBzaG91bGRTY3JvbGwuc2VsZWN0b3IgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFyIGVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzaG91bGRTY3JvbGwuc2VsZWN0b3IpO1xuICAgIGlmIChlbCkge1xuICAgICAgdmFyIG9mZnNldCA9IHNob3VsZFNjcm9sbC5vZmZzZXQgJiYgdHlwZW9mIHNob3VsZFNjcm9sbC5vZmZzZXQgPT09ICdvYmplY3QnID8gc2hvdWxkU2Nyb2xsLm9mZnNldCA6IHt9O1xuICAgICAgb2Zmc2V0ID0gbm9ybWFsaXplT2Zmc2V0KG9mZnNldCk7XG4gICAgICBwb3NpdGlvbiA9IGdldEVsZW1lbnRQb3NpdGlvbihlbCwgb2Zmc2V0KTtcbiAgICB9IGVsc2UgaWYgKGlzVmFsaWRQb3NpdGlvbihzaG91bGRTY3JvbGwpKSB7XG4gICAgICBwb3NpdGlvbiA9IG5vcm1hbGl6ZVBvc2l0aW9uKHNob3VsZFNjcm9sbCk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzT2JqZWN0ICYmIGlzVmFsaWRQb3NpdGlvbihzaG91bGRTY3JvbGwpKSB7XG4gICAgcG9zaXRpb24gPSBub3JtYWxpemVQb3NpdGlvbihzaG91bGRTY3JvbGwpO1xuICB9XG5cbiAgaWYgKHBvc2l0aW9uKSB7XG4gICAgd2luZG93LnNjcm9sbFRvKHBvc2l0aW9uLngsIHBvc2l0aW9uLnkpO1xuICB9XG59XG5cbi8qICAqL1xuXG52YXIgc3VwcG9ydHNQdXNoU3RhdGUgPSBpbkJyb3dzZXIgJiYgKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHVhID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQ7XG5cbiAgaWYgKFxuICAgICh1YS5pbmRleE9mKCdBbmRyb2lkIDIuJykgIT09IC0xIHx8IHVhLmluZGV4T2YoJ0FuZHJvaWQgNC4wJykgIT09IC0xKSAmJlxuICAgIHVhLmluZGV4T2YoJ01vYmlsZSBTYWZhcmknKSAhPT0gLTEgJiZcbiAgICB1YS5pbmRleE9mKCdDaHJvbWUnKSA9PT0gLTEgJiZcbiAgICB1YS5pbmRleE9mKCdXaW5kb3dzIFBob25lJykgPT09IC0xXG4gICkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgcmV0dXJuIHdpbmRvdy5oaXN0b3J5ICYmICdwdXNoU3RhdGUnIGluIHdpbmRvdy5oaXN0b3J5XG59KSgpO1xuXG4vLyB1c2UgVXNlciBUaW1pbmcgYXBpIChpZiBwcmVzZW50KSBmb3IgbW9yZSBhY2N1cmF0ZSBrZXkgcHJlY2lzaW9uXG52YXIgVGltZSA9IGluQnJvd3NlciAmJiB3aW5kb3cucGVyZm9ybWFuY2UgJiYgd2luZG93LnBlcmZvcm1hbmNlLm5vd1xuICA/IHdpbmRvdy5wZXJmb3JtYW5jZVxuICA6IERhdGU7XG5cbnZhciBfa2V5ID0gZ2VuS2V5KCk7XG5cbmZ1bmN0aW9uIGdlbktleSAoKSB7XG4gIHJldHVybiBUaW1lLm5vdygpLnRvRml4ZWQoMylcbn1cblxuZnVuY3Rpb24gZ2V0U3RhdGVLZXkgKCkge1xuICByZXR1cm4gX2tleVxufVxuXG5mdW5jdGlvbiBzZXRTdGF0ZUtleSAoa2V5KSB7XG4gIF9rZXkgPSBrZXk7XG59XG5cbmZ1bmN0aW9uIHB1c2hTdGF0ZSAodXJsLCByZXBsYWNlKSB7XG4gIHNhdmVTY3JvbGxQb3NpdGlvbigpO1xuICAvLyB0cnkuLi5jYXRjaCB0aGUgcHVzaFN0YXRlIGNhbGwgdG8gZ2V0IGFyb3VuZCBTYWZhcmlcbiAgLy8gRE9NIEV4Y2VwdGlvbiAxOCB3aGVyZSBpdCBsaW1pdHMgdG8gMTAwIHB1c2hTdGF0ZSBjYWxsc1xuICB2YXIgaGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5O1xuICB0cnkge1xuICAgIGlmIChyZXBsYWNlKSB7XG4gICAgICBoaXN0b3J5LnJlcGxhY2VTdGF0ZSh7IGtleTogX2tleSB9LCAnJywgdXJsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgX2tleSA9IGdlbktleSgpO1xuICAgICAgaGlzdG9yeS5wdXNoU3RhdGUoeyBrZXk6IF9rZXkgfSwgJycsIHVybCk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgd2luZG93LmxvY2F0aW9uW3JlcGxhY2UgPyAncmVwbGFjZScgOiAnYXNzaWduJ10odXJsKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZXBsYWNlU3RhdGUgKHVybCkge1xuICBwdXNoU3RhdGUodXJsLCB0cnVlKTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIHJ1blF1ZXVlIChxdWV1ZSwgZm4sIGNiKSB7XG4gIHZhciBzdGVwID0gZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgaWYgKGluZGV4ID49IHF1ZXVlLmxlbmd0aCkge1xuICAgICAgY2IoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHF1ZXVlW2luZGV4XSkge1xuICAgICAgICBmbihxdWV1ZVtpbmRleF0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBzdGVwKGluZGV4ICsgMSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RlcChpbmRleCArIDEpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgc3RlcCgwKTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIHJlc29sdmVBc3luY0NvbXBvbmVudHMgKG1hdGNoZWQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0bywgZnJvbSwgbmV4dCkge1xuICAgIHZhciBoYXNBc3luYyA9IGZhbHNlO1xuICAgIHZhciBwZW5kaW5nID0gMDtcbiAgICB2YXIgZXJyb3IgPSBudWxsO1xuXG4gICAgZmxhdE1hcENvbXBvbmVudHMobWF0Y2hlZCwgZnVuY3Rpb24gKGRlZiwgXywgbWF0Y2gsIGtleSkge1xuICAgICAgLy8gaWYgaXQncyBhIGZ1bmN0aW9uIGFuZCBkb2Vzbid0IGhhdmUgY2lkIGF0dGFjaGVkLFxuICAgICAgLy8gYXNzdW1lIGl0J3MgYW4gYXN5bmMgY29tcG9uZW50IHJlc29sdmUgZnVuY3Rpb24uXG4gICAgICAvLyB3ZSBhcmUgbm90IHVzaW5nIFZ1ZSdzIGRlZmF1bHQgYXN5bmMgcmVzb2x2aW5nIG1lY2hhbmlzbSBiZWNhdXNlXG4gICAgICAvLyB3ZSB3YW50IHRvIGhhbHQgdGhlIG5hdmlnYXRpb24gdW50aWwgdGhlIGluY29taW5nIGNvbXBvbmVudCBoYXMgYmVlblxuICAgICAgLy8gcmVzb2x2ZWQuXG4gICAgICBpZiAodHlwZW9mIGRlZiA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWYuY2lkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaGFzQXN5bmMgPSB0cnVlO1xuICAgICAgICBwZW5kaW5nKys7XG5cbiAgICAgICAgdmFyIHJlc29sdmUgPSBvbmNlKGZ1bmN0aW9uIChyZXNvbHZlZERlZikge1xuICAgICAgICAgIGlmIChpc0VTTW9kdWxlKHJlc29sdmVkRGVmKSkge1xuICAgICAgICAgICAgcmVzb2x2ZWREZWYgPSByZXNvbHZlZERlZi5kZWZhdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBzYXZlIHJlc29sdmVkIG9uIGFzeW5jIGZhY3RvcnkgaW4gY2FzZSBpdCdzIHVzZWQgZWxzZXdoZXJlXG4gICAgICAgICAgZGVmLnJlc29sdmVkID0gdHlwZW9mIHJlc29sdmVkRGVmID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICA/IHJlc29sdmVkRGVmXG4gICAgICAgICAgICA6IF9WdWUuZXh0ZW5kKHJlc29sdmVkRGVmKTtcbiAgICAgICAgICBtYXRjaC5jb21wb25lbnRzW2tleV0gPSByZXNvbHZlZERlZjtcbiAgICAgICAgICBwZW5kaW5nLS07XG4gICAgICAgICAgaWYgKHBlbmRpbmcgPD0gMCkge1xuICAgICAgICAgICAgbmV4dCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdmFyIHJlamVjdCA9IG9uY2UoZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgICAgIHZhciBtc2cgPSBcIkZhaWxlZCB0byByZXNvbHZlIGFzeW5jIGNvbXBvbmVudCBcIiArIGtleSArIFwiOiBcIiArIHJlYXNvbjtcbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oZmFsc2UsIG1zZyk7XG4gICAgICAgICAgaWYgKCFlcnJvcikge1xuICAgICAgICAgICAgZXJyb3IgPSBpc0Vycm9yKHJlYXNvbilcbiAgICAgICAgICAgICAgPyByZWFzb25cbiAgICAgICAgICAgICAgOiBuZXcgRXJyb3IobXNnKTtcbiAgICAgICAgICAgIG5leHQoZXJyb3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdmFyIHJlcztcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXMgPSBkZWYocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiByZXMudGhlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcmVzLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gbmV3IHN5bnRheCBpbiBWdWUgMi4zXG4gICAgICAgICAgICB2YXIgY29tcCA9IHJlcy5jb21wb25lbnQ7XG4gICAgICAgICAgICBpZiAoY29tcCAmJiB0eXBlb2YgY29tcC50aGVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgIGNvbXAudGhlbihyZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKCFoYXNBc3luYykgeyBuZXh0KCk7IH1cbiAgfVxufVxuXG5mdW5jdGlvbiBmbGF0TWFwQ29tcG9uZW50cyAoXG4gIG1hdGNoZWQsXG4gIGZuXG4pIHtcbiAgcmV0dXJuIGZsYXR0ZW4obWF0Y2hlZC5tYXAoZnVuY3Rpb24gKG0pIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMobS5jb21wb25lbnRzKS5tYXAoZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gZm4oXG4gICAgICBtLmNvbXBvbmVudHNba2V5XSxcbiAgICAgIG0uaW5zdGFuY2VzW2tleV0sXG4gICAgICBtLCBrZXlcbiAgICApOyB9KVxuICB9KSlcbn1cblxuZnVuY3Rpb24gZmxhdHRlbiAoYXJyKSB7XG4gIHJldHVybiBBcnJheS5wcm90b3R5cGUuY29uY2F0LmFwcGx5KFtdLCBhcnIpXG59XG5cbnZhciBoYXNTeW1ib2wgPVxuICB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmXG4gIHR5cGVvZiBTeW1ib2wudG9TdHJpbmdUYWcgPT09ICdzeW1ib2wnO1xuXG5mdW5jdGlvbiBpc0VTTW9kdWxlIChvYmopIHtcbiAgcmV0dXJuIG9iai5fX2VzTW9kdWxlIHx8IChoYXNTeW1ib2wgJiYgb2JqW1N5bWJvbC50b1N0cmluZ1RhZ10gPT09ICdNb2R1bGUnKVxufVxuXG4vLyBpbiBXZWJwYWNrIDIsIHJlcXVpcmUuZW5zdXJlIG5vdyBhbHNvIHJldHVybnMgYSBQcm9taXNlXG4vLyBzbyB0aGUgcmVzb2x2ZS9yZWplY3QgZnVuY3Rpb25zIG1heSBnZXQgY2FsbGVkIGFuIGV4dHJhIHRpbWVcbi8vIGlmIHRoZSB1c2VyIHVzZXMgYW4gYXJyb3cgZnVuY3Rpb24gc2hvcnRoYW5kIHRoYXQgaGFwcGVucyB0b1xuLy8gcmV0dXJuIHRoYXQgUHJvbWlzZS5cbmZ1bmN0aW9uIG9uY2UgKGZuKSB7XG4gIHZhciBjYWxsZWQgPSBmYWxzZTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICBpZiAoY2FsbGVkKSB7IHJldHVybiB9XG4gICAgY2FsbGVkID0gdHJ1ZTtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJncylcbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIEhpc3RvcnkgPSBmdW5jdGlvbiBIaXN0b3J5IChyb3V0ZXIsIGJhc2UpIHtcbiAgdGhpcy5yb3V0ZXIgPSByb3V0ZXI7XG4gIHRoaXMuYmFzZSA9IG5vcm1hbGl6ZUJhc2UoYmFzZSk7XG4gIC8vIHN0YXJ0IHdpdGggYSByb3V0ZSBvYmplY3QgdGhhdCBzdGFuZHMgZm9yIFwibm93aGVyZVwiXG4gIHRoaXMuY3VycmVudCA9IFNUQVJUO1xuICB0aGlzLnBlbmRpbmcgPSBudWxsO1xuICB0aGlzLnJlYWR5ID0gZmFsc2U7XG4gIHRoaXMucmVhZHlDYnMgPSBbXTtcbiAgdGhpcy5yZWFkeUVycm9yQ2JzID0gW107XG4gIHRoaXMuZXJyb3JDYnMgPSBbXTtcbn07XG5cbkhpc3RvcnkucHJvdG90eXBlLmxpc3RlbiA9IGZ1bmN0aW9uIGxpc3RlbiAoY2IpIHtcbiAgdGhpcy5jYiA9IGNiO1xufTtcblxuSGlzdG9yeS5wcm90b3R5cGUub25SZWFkeSA9IGZ1bmN0aW9uIG9uUmVhZHkgKGNiLCBlcnJvckNiKSB7XG4gIGlmICh0aGlzLnJlYWR5KSB7XG4gICAgY2IoKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnJlYWR5Q2JzLnB1c2goY2IpO1xuICAgIGlmIChlcnJvckNiKSB7XG4gICAgICB0aGlzLnJlYWR5RXJyb3JDYnMucHVzaChlcnJvckNiKTtcbiAgICB9XG4gIH1cbn07XG5cbkhpc3RvcnkucHJvdG90eXBlLm9uRXJyb3IgPSBmdW5jdGlvbiBvbkVycm9yIChlcnJvckNiKSB7XG4gIHRoaXMuZXJyb3JDYnMucHVzaChlcnJvckNiKTtcbn07XG5cbkhpc3RvcnkucHJvdG90eXBlLnRyYW5zaXRpb25UbyA9IGZ1bmN0aW9uIHRyYW5zaXRpb25UbyAobG9jYXRpb24sIG9uQ29tcGxldGUsIG9uQWJvcnQpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICB2YXIgcm91dGUgPSB0aGlzLnJvdXRlci5tYXRjaChsb2NhdGlvbiwgdGhpcy5jdXJyZW50KTtcbiAgdGhpcy5jb25maXJtVHJhbnNpdGlvbihyb3V0ZSwgZnVuY3Rpb24gKCkge1xuICAgIHRoaXMkMS51cGRhdGVSb3V0ZShyb3V0ZSk7XG4gICAgb25Db21wbGV0ZSAmJiBvbkNvbXBsZXRlKHJvdXRlKTtcbiAgICB0aGlzJDEuZW5zdXJlVVJMKCk7XG5cbiAgICAvLyBmaXJlIHJlYWR5IGNicyBvbmNlXG4gICAgaWYgKCF0aGlzJDEucmVhZHkpIHtcbiAgICAgIHRoaXMkMS5yZWFkeSA9IHRydWU7XG4gICAgICB0aGlzJDEucmVhZHlDYnMuZm9yRWFjaChmdW5jdGlvbiAoY2IpIHsgY2Iocm91dGUpOyB9KTtcbiAgICB9XG4gIH0sIGZ1bmN0aW9uIChlcnIpIHtcbiAgICBpZiAob25BYm9ydCkge1xuICAgICAgb25BYm9ydChlcnIpO1xuICAgIH1cbiAgICBpZiAoZXJyICYmICF0aGlzJDEucmVhZHkpIHtcbiAgICAgIHRoaXMkMS5yZWFkeSA9IHRydWU7XG4gICAgICB0aGlzJDEucmVhZHlFcnJvckNicy5mb3JFYWNoKGZ1bmN0aW9uIChjYikgeyBjYihlcnIpOyB9KTtcbiAgICB9XG4gIH0pO1xufTtcblxuSGlzdG9yeS5wcm90b3R5cGUuY29uZmlybVRyYW5zaXRpb24gPSBmdW5jdGlvbiBjb25maXJtVHJhbnNpdGlvbiAocm91dGUsIG9uQ29tcGxldGUsIG9uQWJvcnQpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICB2YXIgY3VycmVudCA9IHRoaXMuY3VycmVudDtcbiAgdmFyIGFib3J0ID0gZnVuY3Rpb24gKGVycikge1xuICAgIGlmIChpc0Vycm9yKGVycikpIHtcbiAgICAgIGlmICh0aGlzJDEuZXJyb3JDYnMubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMkMS5lcnJvckNicy5mb3JFYWNoKGZ1bmN0aW9uIChjYikgeyBjYihlcnIpOyB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdhcm4oZmFsc2UsICd1bmNhdWdodCBlcnJvciBkdXJpbmcgcm91dGUgbmF2aWdhdGlvbjonKTtcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgfVxuICAgIH1cbiAgICBvbkFib3J0ICYmIG9uQWJvcnQoZXJyKTtcbiAgfTtcbiAgaWYgKFxuICAgIGlzU2FtZVJvdXRlKHJvdXRlLCBjdXJyZW50KSAmJlxuICAgIC8vIGluIHRoZSBjYXNlIHRoZSByb3V0ZSBtYXAgaGFzIGJlZW4gZHluYW1pY2FsbHkgYXBwZW5kZWQgdG9cbiAgICByb3V0ZS5tYXRjaGVkLmxlbmd0aCA9PT0gY3VycmVudC5tYXRjaGVkLmxlbmd0aFxuICApIHtcbiAgICB0aGlzLmVuc3VyZVVSTCgpO1xuICAgIHJldHVybiBhYm9ydCgpXG4gIH1cblxuICB2YXIgcmVmID0gcmVzb2x2ZVF1ZXVlKHRoaXMuY3VycmVudC5tYXRjaGVkLCByb3V0ZS5tYXRjaGVkKTtcbiAgICB2YXIgdXBkYXRlZCA9IHJlZi51cGRhdGVkO1xuICAgIHZhciBkZWFjdGl2YXRlZCA9IHJlZi5kZWFjdGl2YXRlZDtcbiAgICB2YXIgYWN0aXZhdGVkID0gcmVmLmFjdGl2YXRlZDtcblxuICB2YXIgcXVldWUgPSBbXS5jb25jYXQoXG4gICAgLy8gaW4tY29tcG9uZW50IGxlYXZlIGd1YXJkc1xuICAgIGV4dHJhY3RMZWF2ZUd1YXJkcyhkZWFjdGl2YXRlZCksXG4gICAgLy8gZ2xvYmFsIGJlZm9yZSBob29rc1xuICAgIHRoaXMucm91dGVyLmJlZm9yZUhvb2tzLFxuICAgIC8vIGluLWNvbXBvbmVudCB1cGRhdGUgaG9va3NcbiAgICBleHRyYWN0VXBkYXRlSG9va3ModXBkYXRlZCksXG4gICAgLy8gaW4tY29uZmlnIGVudGVyIGd1YXJkc1xuICAgIGFjdGl2YXRlZC5tYXAoZnVuY3Rpb24gKG0pIHsgcmV0dXJuIG0uYmVmb3JlRW50ZXI7IH0pLFxuICAgIC8vIGFzeW5jIGNvbXBvbmVudHNcbiAgICByZXNvbHZlQXN5bmNDb21wb25lbnRzKGFjdGl2YXRlZClcbiAgKTtcblxuICB0aGlzLnBlbmRpbmcgPSByb3V0ZTtcbiAgdmFyIGl0ZXJhdG9yID0gZnVuY3Rpb24gKGhvb2ssIG5leHQpIHtcbiAgICBpZiAodGhpcyQxLnBlbmRpbmcgIT09IHJvdXRlKSB7XG4gICAgICByZXR1cm4gYWJvcnQoKVxuICAgIH1cbiAgICB0cnkge1xuICAgICAgaG9vayhyb3V0ZSwgY3VycmVudCwgZnVuY3Rpb24gKHRvKSB7XG4gICAgICAgIGlmICh0byA9PT0gZmFsc2UgfHwgaXNFcnJvcih0bykpIHtcbiAgICAgICAgICAvLyBuZXh0KGZhbHNlKSAtPiBhYm9ydCBuYXZpZ2F0aW9uLCBlbnN1cmUgY3VycmVudCBVUkxcbiAgICAgICAgICB0aGlzJDEuZW5zdXJlVVJMKHRydWUpO1xuICAgICAgICAgIGFib3J0KHRvKTtcbiAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICB0eXBlb2YgdG8gPT09ICdzdHJpbmcnIHx8XG4gICAgICAgICAgKHR5cGVvZiB0byA9PT0gJ29iamVjdCcgJiYgKFxuICAgICAgICAgICAgdHlwZW9mIHRvLnBhdGggPT09ICdzdHJpbmcnIHx8XG4gICAgICAgICAgICB0eXBlb2YgdG8ubmFtZSA9PT0gJ3N0cmluZydcbiAgICAgICAgICApKVxuICAgICAgICApIHtcbiAgICAgICAgICAvLyBuZXh0KCcvJykgb3IgbmV4dCh7IHBhdGg6ICcvJyB9KSAtPiByZWRpcmVjdFxuICAgICAgICAgIGFib3J0KCk7XG4gICAgICAgICAgaWYgKHR5cGVvZiB0byA9PT0gJ29iamVjdCcgJiYgdG8ucmVwbGFjZSkge1xuICAgICAgICAgICAgdGhpcyQxLnJlcGxhY2UodG8pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzJDEucHVzaCh0byk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGNvbmZpcm0gdHJhbnNpdGlvbiBhbmQgcGFzcyBvbiB0aGUgdmFsdWVcbiAgICAgICAgICBuZXh0KHRvKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgYWJvcnQoZSk7XG4gICAgfVxuICB9O1xuXG4gIHJ1blF1ZXVlKHF1ZXVlLCBpdGVyYXRvciwgZnVuY3Rpb24gKCkge1xuICAgIHZhciBwb3N0RW50ZXJDYnMgPSBbXTtcbiAgICB2YXIgaXNWYWxpZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMkMS5jdXJyZW50ID09PSByb3V0ZTsgfTtcbiAgICAvLyB3YWl0IHVudGlsIGFzeW5jIGNvbXBvbmVudHMgYXJlIHJlc29sdmVkIGJlZm9yZVxuICAgIC8vIGV4dHJhY3RpbmcgaW4tY29tcG9uZW50IGVudGVyIGd1YXJkc1xuICAgIHZhciBlbnRlckd1YXJkcyA9IGV4dHJhY3RFbnRlckd1YXJkcyhhY3RpdmF0ZWQsIHBvc3RFbnRlckNicywgaXNWYWxpZCk7XG4gICAgdmFyIHF1ZXVlID0gZW50ZXJHdWFyZHMuY29uY2F0KHRoaXMkMS5yb3V0ZXIucmVzb2x2ZUhvb2tzKTtcbiAgICBydW5RdWV1ZShxdWV1ZSwgaXRlcmF0b3IsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICh0aGlzJDEucGVuZGluZyAhPT0gcm91dGUpIHtcbiAgICAgICAgcmV0dXJuIGFib3J0KClcbiAgICAgIH1cbiAgICAgIHRoaXMkMS5wZW5kaW5nID0gbnVsbDtcbiAgICAgIG9uQ29tcGxldGUocm91dGUpO1xuICAgICAgaWYgKHRoaXMkMS5yb3V0ZXIuYXBwKSB7XG4gICAgICAgIHRoaXMkMS5yb3V0ZXIuYXBwLiRuZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcG9zdEVudGVyQ2JzLmZvckVhY2goZnVuY3Rpb24gKGNiKSB7IGNiKCk7IH0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG59O1xuXG5IaXN0b3J5LnByb3RvdHlwZS51cGRhdGVSb3V0ZSA9IGZ1bmN0aW9uIHVwZGF0ZVJvdXRlIChyb3V0ZSkge1xuICB2YXIgcHJldiA9IHRoaXMuY3VycmVudDtcbiAgdGhpcy5jdXJyZW50ID0gcm91dGU7XG4gIHRoaXMuY2IgJiYgdGhpcy5jYihyb3V0ZSk7XG4gIHRoaXMucm91dGVyLmFmdGVySG9va3MuZm9yRWFjaChmdW5jdGlvbiAoaG9vaykge1xuICAgIGhvb2sgJiYgaG9vayhyb3V0ZSwgcHJldik7XG4gIH0pO1xufTtcblxuZnVuY3Rpb24gbm9ybWFsaXplQmFzZSAoYmFzZSkge1xuICBpZiAoIWJhc2UpIHtcbiAgICBpZiAoaW5Ccm93c2VyKSB7XG4gICAgICAvLyByZXNwZWN0IDxiYXNlPiB0YWdcbiAgICAgIHZhciBiYXNlRWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdiYXNlJyk7XG4gICAgICBiYXNlID0gKGJhc2VFbCAmJiBiYXNlRWwuZ2V0QXR0cmlidXRlKCdocmVmJykpIHx8ICcvJztcbiAgICAgIC8vIHN0cmlwIGZ1bGwgVVJMIG9yaWdpblxuICAgICAgYmFzZSA9IGJhc2UucmVwbGFjZSgvXmh0dHBzPzpcXC9cXC9bXlxcL10rLywgJycpO1xuICAgIH0gZWxzZSB7XG4gICAgICBiYXNlID0gJy8nO1xuICAgIH1cbiAgfVxuICAvLyBtYWtlIHN1cmUgdGhlcmUncyB0aGUgc3RhcnRpbmcgc2xhc2hcbiAgaWYgKGJhc2UuY2hhckF0KDApICE9PSAnLycpIHtcbiAgICBiYXNlID0gJy8nICsgYmFzZTtcbiAgfVxuICAvLyByZW1vdmUgdHJhaWxpbmcgc2xhc2hcbiAgcmV0dXJuIGJhc2UucmVwbGFjZSgvXFwvJC8sICcnKVxufVxuXG5mdW5jdGlvbiByZXNvbHZlUXVldWUgKFxuICBjdXJyZW50LFxuICBuZXh0XG4pIHtcbiAgdmFyIGk7XG4gIHZhciBtYXggPSBNYXRoLm1heChjdXJyZW50Lmxlbmd0aCwgbmV4dC5sZW5ndGgpO1xuICBmb3IgKGkgPSAwOyBpIDwgbWF4OyBpKyspIHtcbiAgICBpZiAoY3VycmVudFtpXSAhPT0gbmV4dFtpXSkge1xuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB1cGRhdGVkOiBuZXh0LnNsaWNlKDAsIGkpLFxuICAgIGFjdGl2YXRlZDogbmV4dC5zbGljZShpKSxcbiAgICBkZWFjdGl2YXRlZDogY3VycmVudC5zbGljZShpKVxuICB9XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RHdWFyZHMgKFxuICByZWNvcmRzLFxuICBuYW1lLFxuICBiaW5kLFxuICByZXZlcnNlXG4pIHtcbiAgdmFyIGd1YXJkcyA9IGZsYXRNYXBDb21wb25lbnRzKHJlY29yZHMsIGZ1bmN0aW9uIChkZWYsIGluc3RhbmNlLCBtYXRjaCwga2V5KSB7XG4gICAgdmFyIGd1YXJkID0gZXh0cmFjdEd1YXJkKGRlZiwgbmFtZSk7XG4gICAgaWYgKGd1YXJkKSB7XG4gICAgICByZXR1cm4gQXJyYXkuaXNBcnJheShndWFyZClcbiAgICAgICAgPyBndWFyZC5tYXAoZnVuY3Rpb24gKGd1YXJkKSB7IHJldHVybiBiaW5kKGd1YXJkLCBpbnN0YW5jZSwgbWF0Y2gsIGtleSk7IH0pXG4gICAgICAgIDogYmluZChndWFyZCwgaW5zdGFuY2UsIG1hdGNoLCBrZXkpXG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGZsYXR0ZW4ocmV2ZXJzZSA/IGd1YXJkcy5yZXZlcnNlKCkgOiBndWFyZHMpXG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RHdWFyZCAoXG4gIGRlZixcbiAga2V5XG4pIHtcbiAgaWYgKHR5cGVvZiBkZWYgIT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBleHRlbmQgbm93IHNvIHRoYXQgZ2xvYmFsIG1peGlucyBhcmUgYXBwbGllZC5cbiAgICBkZWYgPSBfVnVlLmV4dGVuZChkZWYpO1xuICB9XG4gIHJldHVybiBkZWYub3B0aW9uc1trZXldXG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RMZWF2ZUd1YXJkcyAoZGVhY3RpdmF0ZWQpIHtcbiAgcmV0dXJuIGV4dHJhY3RHdWFyZHMoZGVhY3RpdmF0ZWQsICdiZWZvcmVSb3V0ZUxlYXZlJywgYmluZEd1YXJkLCB0cnVlKVxufVxuXG5mdW5jdGlvbiBleHRyYWN0VXBkYXRlSG9va3MgKHVwZGF0ZWQpIHtcbiAgcmV0dXJuIGV4dHJhY3RHdWFyZHModXBkYXRlZCwgJ2JlZm9yZVJvdXRlVXBkYXRlJywgYmluZEd1YXJkKVxufVxuXG5mdW5jdGlvbiBiaW5kR3VhcmQgKGd1YXJkLCBpbnN0YW5jZSkge1xuICBpZiAoaW5zdGFuY2UpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gYm91bmRSb3V0ZUd1YXJkICgpIHtcbiAgICAgIHJldHVybiBndWFyZC5hcHBseShpbnN0YW5jZSwgYXJndW1lbnRzKVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBleHRyYWN0RW50ZXJHdWFyZHMgKFxuICBhY3RpdmF0ZWQsXG4gIGNicyxcbiAgaXNWYWxpZFxuKSB7XG4gIHJldHVybiBleHRyYWN0R3VhcmRzKGFjdGl2YXRlZCwgJ2JlZm9yZVJvdXRlRW50ZXInLCBmdW5jdGlvbiAoZ3VhcmQsIF8sIG1hdGNoLCBrZXkpIHtcbiAgICByZXR1cm4gYmluZEVudGVyR3VhcmQoZ3VhcmQsIG1hdGNoLCBrZXksIGNicywgaXNWYWxpZClcbiAgfSlcbn1cblxuZnVuY3Rpb24gYmluZEVudGVyR3VhcmQgKFxuICBndWFyZCxcbiAgbWF0Y2gsXG4gIGtleSxcbiAgY2JzLFxuICBpc1ZhbGlkXG4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHJvdXRlRW50ZXJHdWFyZCAodG8sIGZyb20sIG5leHQpIHtcbiAgICByZXR1cm4gZ3VhcmQodG8sIGZyb20sIGZ1bmN0aW9uIChjYikge1xuICAgICAgbmV4dChjYik7XG4gICAgICBpZiAodHlwZW9mIGNiID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGNicy5wdXNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAvLyAjNzUwXG4gICAgICAgICAgLy8gaWYgYSByb3V0ZXItdmlldyBpcyB3cmFwcGVkIHdpdGggYW4gb3V0LWluIHRyYW5zaXRpb24sXG4gICAgICAgICAgLy8gdGhlIGluc3RhbmNlIG1heSBub3QgaGF2ZSBiZWVuIHJlZ2lzdGVyZWQgYXQgdGhpcyB0aW1lLlxuICAgICAgICAgIC8vIHdlIHdpbGwgbmVlZCB0byBwb2xsIGZvciByZWdpc3RyYXRpb24gdW50aWwgY3VycmVudCByb3V0ZVxuICAgICAgICAgIC8vIGlzIG5vIGxvbmdlciB2YWxpZC5cbiAgICAgICAgICBwb2xsKGNiLCBtYXRjaC5pbnN0YW5jZXMsIGtleSwgaXNWYWxpZCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pXG4gIH1cbn1cblxuZnVuY3Rpb24gcG9sbCAoXG4gIGNiLCAvLyBzb21laG93IGZsb3cgY2Fubm90IGluZmVyIHRoaXMgaXMgYSBmdW5jdGlvblxuICBpbnN0YW5jZXMsXG4gIGtleSxcbiAgaXNWYWxpZFxuKSB7XG4gIGlmIChpbnN0YW5jZXNba2V5XSkge1xuICAgIGNiKGluc3RhbmNlc1trZXldKTtcbiAgfSBlbHNlIGlmIChpc1ZhbGlkKCkpIHtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHBvbGwoY2IsIGluc3RhbmNlcywga2V5LCBpc1ZhbGlkKTtcbiAgICB9LCAxNik7XG4gIH1cbn1cblxuLyogICovXG5cblxudmFyIEhUTUw1SGlzdG9yeSA9IChmdW5jdGlvbiAoSGlzdG9yeSQkMSkge1xuICBmdW5jdGlvbiBIVE1MNUhpc3RvcnkgKHJvdXRlciwgYmFzZSkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgSGlzdG9yeSQkMS5jYWxsKHRoaXMsIHJvdXRlciwgYmFzZSk7XG5cbiAgICB2YXIgZXhwZWN0U2Nyb2xsID0gcm91dGVyLm9wdGlvbnMuc2Nyb2xsQmVoYXZpb3I7XG5cbiAgICBpZiAoZXhwZWN0U2Nyb2xsKSB7XG4gICAgICBzZXR1cFNjcm9sbCgpO1xuICAgIH1cblxuICAgIHZhciBpbml0TG9jYXRpb24gPSBnZXRMb2NhdGlvbih0aGlzLmJhc2UpO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIGZ1bmN0aW9uIChlKSB7XG4gICAgICB2YXIgY3VycmVudCA9IHRoaXMkMS5jdXJyZW50O1xuXG4gICAgICAvLyBBdm9pZGluZyBmaXJzdCBgcG9wc3RhdGVgIGV2ZW50IGRpc3BhdGNoZWQgaW4gc29tZSBicm93c2VycyBidXQgZmlyc3RcbiAgICAgIC8vIGhpc3Rvcnkgcm91dGUgbm90IHVwZGF0ZWQgc2luY2UgYXN5bmMgZ3VhcmQgYXQgdGhlIHNhbWUgdGltZS5cbiAgICAgIHZhciBsb2NhdGlvbiA9IGdldExvY2F0aW9uKHRoaXMkMS5iYXNlKTtcbiAgICAgIGlmICh0aGlzJDEuY3VycmVudCA9PT0gU1RBUlQgJiYgbG9jYXRpb24gPT09IGluaXRMb2NhdGlvbikge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgdGhpcyQxLnRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgZnVuY3Rpb24gKHJvdXRlKSB7XG4gICAgICAgIGlmIChleHBlY3RTY3JvbGwpIHtcbiAgICAgICAgICBoYW5kbGVTY3JvbGwocm91dGVyLCByb3V0ZSwgY3VycmVudCwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgaWYgKCBIaXN0b3J5JCQxICkgSFRNTDVIaXN0b3J5Ll9fcHJvdG9fXyA9IEhpc3RvcnkkJDE7XG4gIEhUTUw1SGlzdG9yeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBIaXN0b3J5JCQxICYmIEhpc3RvcnkkJDEucHJvdG90eXBlICk7XG4gIEhUTUw1SGlzdG9yeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBIVE1MNUhpc3Rvcnk7XG5cbiAgSFRNTDVIaXN0b3J5LnByb3RvdHlwZS5nbyA9IGZ1bmN0aW9uIGdvIChuKSB7XG4gICAgd2luZG93Lmhpc3RvcnkuZ28obik7XG4gIH07XG5cbiAgSFRNTDVIaXN0b3J5LnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gcHVzaCAobG9jYXRpb24sIG9uQ29tcGxldGUsIG9uQWJvcnQpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHZhciByZWYgPSB0aGlzO1xuICAgIHZhciBmcm9tUm91dGUgPSByZWYuY3VycmVudDtcbiAgICB0aGlzLnRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgZnVuY3Rpb24gKHJvdXRlKSB7XG4gICAgICBwdXNoU3RhdGUoY2xlYW5QYXRoKHRoaXMkMS5iYXNlICsgcm91dGUuZnVsbFBhdGgpKTtcbiAgICAgIGhhbmRsZVNjcm9sbCh0aGlzJDEucm91dGVyLCByb3V0ZSwgZnJvbVJvdXRlLCBmYWxzZSk7XG4gICAgICBvbkNvbXBsZXRlICYmIG9uQ29tcGxldGUocm91dGUpO1xuICAgIH0sIG9uQWJvcnQpO1xuICB9O1xuXG4gIEhUTUw1SGlzdG9yeS5wcm90b3R5cGUucmVwbGFjZSA9IGZ1bmN0aW9uIHJlcGxhY2UgKGxvY2F0aW9uLCBvbkNvbXBsZXRlLCBvbkFib3J0KSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB2YXIgcmVmID0gdGhpcztcbiAgICB2YXIgZnJvbVJvdXRlID0gcmVmLmN1cnJlbnQ7XG4gICAgdGhpcy50cmFuc2l0aW9uVG8obG9jYXRpb24sIGZ1bmN0aW9uIChyb3V0ZSkge1xuICAgICAgcmVwbGFjZVN0YXRlKGNsZWFuUGF0aCh0aGlzJDEuYmFzZSArIHJvdXRlLmZ1bGxQYXRoKSk7XG4gICAgICBoYW5kbGVTY3JvbGwodGhpcyQxLnJvdXRlciwgcm91dGUsIGZyb21Sb3V0ZSwgZmFsc2UpO1xuICAgICAgb25Db21wbGV0ZSAmJiBvbkNvbXBsZXRlKHJvdXRlKTtcbiAgICB9LCBvbkFib3J0KTtcbiAgfTtcblxuICBIVE1MNUhpc3RvcnkucHJvdG90eXBlLmVuc3VyZVVSTCA9IGZ1bmN0aW9uIGVuc3VyZVVSTCAocHVzaCkge1xuICAgIGlmIChnZXRMb2NhdGlvbih0aGlzLmJhc2UpICE9PSB0aGlzLmN1cnJlbnQuZnVsbFBhdGgpIHtcbiAgICAgIHZhciBjdXJyZW50ID0gY2xlYW5QYXRoKHRoaXMuYmFzZSArIHRoaXMuY3VycmVudC5mdWxsUGF0aCk7XG4gICAgICBwdXNoID8gcHVzaFN0YXRlKGN1cnJlbnQpIDogcmVwbGFjZVN0YXRlKGN1cnJlbnQpO1xuICAgIH1cbiAgfTtcblxuICBIVE1MNUhpc3RvcnkucHJvdG90eXBlLmdldEN1cnJlbnRMb2NhdGlvbiA9IGZ1bmN0aW9uIGdldEN1cnJlbnRMb2NhdGlvbiAoKSB7XG4gICAgcmV0dXJuIGdldExvY2F0aW9uKHRoaXMuYmFzZSlcbiAgfTtcblxuICByZXR1cm4gSFRNTDVIaXN0b3J5O1xufShIaXN0b3J5KSk7XG5cbmZ1bmN0aW9uIGdldExvY2F0aW9uIChiYXNlKSB7XG4gIHZhciBwYXRoID0gd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lO1xuICBpZiAoYmFzZSAmJiBwYXRoLmluZGV4T2YoYmFzZSkgPT09IDApIHtcbiAgICBwYXRoID0gcGF0aC5zbGljZShiYXNlLmxlbmd0aCk7XG4gIH1cbiAgcmV0dXJuIChwYXRoIHx8ICcvJykgKyB3aW5kb3cubG9jYXRpb24uc2VhcmNoICsgd2luZG93LmxvY2F0aW9uLmhhc2hcbn1cblxuLyogICovXG5cblxudmFyIEhhc2hIaXN0b3J5ID0gKGZ1bmN0aW9uIChIaXN0b3J5JCQxKSB7XG4gIGZ1bmN0aW9uIEhhc2hIaXN0b3J5IChyb3V0ZXIsIGJhc2UsIGZhbGxiYWNrKSB7XG4gICAgSGlzdG9yeSQkMS5jYWxsKHRoaXMsIHJvdXRlciwgYmFzZSk7XG4gICAgLy8gY2hlY2sgaGlzdG9yeSBmYWxsYmFjayBkZWVwbGlua2luZ1xuICAgIGlmIChmYWxsYmFjayAmJiBjaGVja0ZhbGxiYWNrKHRoaXMuYmFzZSkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBlbnN1cmVTbGFzaCgpO1xuICB9XG5cbiAgaWYgKCBIaXN0b3J5JCQxICkgSGFzaEhpc3RvcnkuX19wcm90b19fID0gSGlzdG9yeSQkMTtcbiAgSGFzaEhpc3RvcnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggSGlzdG9yeSQkMSAmJiBIaXN0b3J5JCQxLnByb3RvdHlwZSApO1xuICBIYXNoSGlzdG9yeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBIYXNoSGlzdG9yeTtcblxuICAvLyB0aGlzIGlzIGRlbGF5ZWQgdW50aWwgdGhlIGFwcCBtb3VudHNcbiAgLy8gdG8gYXZvaWQgdGhlIGhhc2hjaGFuZ2UgbGlzdGVuZXIgYmVpbmcgZmlyZWQgdG9vIGVhcmx5XG4gIEhhc2hIaXN0b3J5LnByb3RvdHlwZS5zZXR1cExpc3RlbmVycyA9IGZ1bmN0aW9uIHNldHVwTGlzdGVuZXJzICgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHZhciByb3V0ZXIgPSB0aGlzLnJvdXRlcjtcbiAgICB2YXIgZXhwZWN0U2Nyb2xsID0gcm91dGVyLm9wdGlvbnMuc2Nyb2xsQmVoYXZpb3I7XG4gICAgdmFyIHN1cHBvcnRzU2Nyb2xsID0gc3VwcG9ydHNQdXNoU3RhdGUgJiYgZXhwZWN0U2Nyb2xsO1xuXG4gICAgaWYgKHN1cHBvcnRzU2Nyb2xsKSB7XG4gICAgICBzZXR1cFNjcm9sbCgpO1xuICAgIH1cblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKHN1cHBvcnRzUHVzaFN0YXRlID8gJ3BvcHN0YXRlJyA6ICdoYXNoY2hhbmdlJywgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGN1cnJlbnQgPSB0aGlzJDEuY3VycmVudDtcbiAgICAgIGlmICghZW5zdXJlU2xhc2goKSkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIHRoaXMkMS50cmFuc2l0aW9uVG8oZ2V0SGFzaCgpLCBmdW5jdGlvbiAocm91dGUpIHtcbiAgICAgICAgaWYgKHN1cHBvcnRzU2Nyb2xsKSB7XG4gICAgICAgICAgaGFuZGxlU2Nyb2xsKHRoaXMkMS5yb3V0ZXIsIHJvdXRlLCBjdXJyZW50LCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXN1cHBvcnRzUHVzaFN0YXRlKSB7XG4gICAgICAgICAgcmVwbGFjZUhhc2gocm91dGUuZnVsbFBhdGgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBIYXNoSGlzdG9yeS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIHB1c2ggKGxvY2F0aW9uLCBvbkNvbXBsZXRlLCBvbkFib3J0KSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB2YXIgcmVmID0gdGhpcztcbiAgICB2YXIgZnJvbVJvdXRlID0gcmVmLmN1cnJlbnQ7XG4gICAgdGhpcy50cmFuc2l0aW9uVG8obG9jYXRpb24sIGZ1bmN0aW9uIChyb3V0ZSkge1xuICAgICAgcHVzaEhhc2gocm91dGUuZnVsbFBhdGgpO1xuICAgICAgaGFuZGxlU2Nyb2xsKHRoaXMkMS5yb3V0ZXIsIHJvdXRlLCBmcm9tUm91dGUsIGZhbHNlKTtcbiAgICAgIG9uQ29tcGxldGUgJiYgb25Db21wbGV0ZShyb3V0ZSk7XG4gICAgfSwgb25BYm9ydCk7XG4gIH07XG5cbiAgSGFzaEhpc3RvcnkucHJvdG90eXBlLnJlcGxhY2UgPSBmdW5jdGlvbiByZXBsYWNlIChsb2NhdGlvbiwgb25Db21wbGV0ZSwgb25BYm9ydCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdmFyIHJlZiA9IHRoaXM7XG4gICAgdmFyIGZyb21Sb3V0ZSA9IHJlZi5jdXJyZW50O1xuICAgIHRoaXMudHJhbnNpdGlvblRvKGxvY2F0aW9uLCBmdW5jdGlvbiAocm91dGUpIHtcbiAgICAgIHJlcGxhY2VIYXNoKHJvdXRlLmZ1bGxQYXRoKTtcbiAgICAgIGhhbmRsZVNjcm9sbCh0aGlzJDEucm91dGVyLCByb3V0ZSwgZnJvbVJvdXRlLCBmYWxzZSk7XG4gICAgICBvbkNvbXBsZXRlICYmIG9uQ29tcGxldGUocm91dGUpO1xuICAgIH0sIG9uQWJvcnQpO1xuICB9O1xuXG4gIEhhc2hIaXN0b3J5LnByb3RvdHlwZS5nbyA9IGZ1bmN0aW9uIGdvIChuKSB7XG4gICAgd2luZG93Lmhpc3RvcnkuZ28obik7XG4gIH07XG5cbiAgSGFzaEhpc3RvcnkucHJvdG90eXBlLmVuc3VyZVVSTCA9IGZ1bmN0aW9uIGVuc3VyZVVSTCAocHVzaCkge1xuICAgIHZhciBjdXJyZW50ID0gdGhpcy5jdXJyZW50LmZ1bGxQYXRoO1xuICAgIGlmIChnZXRIYXNoKCkgIT09IGN1cnJlbnQpIHtcbiAgICAgIHB1c2ggPyBwdXNoSGFzaChjdXJyZW50KSA6IHJlcGxhY2VIYXNoKGN1cnJlbnQpO1xuICAgIH1cbiAgfTtcblxuICBIYXNoSGlzdG9yeS5wcm90b3R5cGUuZ2V0Q3VycmVudExvY2F0aW9uID0gZnVuY3Rpb24gZ2V0Q3VycmVudExvY2F0aW9uICgpIHtcbiAgICByZXR1cm4gZ2V0SGFzaCgpXG4gIH07XG5cbiAgcmV0dXJuIEhhc2hIaXN0b3J5O1xufShIaXN0b3J5KSk7XG5cbmZ1bmN0aW9uIGNoZWNrRmFsbGJhY2sgKGJhc2UpIHtcbiAgdmFyIGxvY2F0aW9uID0gZ2V0TG9jYXRpb24oYmFzZSk7XG4gIGlmICghL15cXC8jLy50ZXN0KGxvY2F0aW9uKSkge1xuICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKFxuICAgICAgY2xlYW5QYXRoKGJhc2UgKyAnLyMnICsgbG9jYXRpb24pXG4gICAgKTtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG59XG5cbmZ1bmN0aW9uIGVuc3VyZVNsYXNoICgpIHtcbiAgdmFyIHBhdGggPSBnZXRIYXNoKCk7XG4gIGlmIChwYXRoLmNoYXJBdCgwKSA9PT0gJy8nKSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuICByZXBsYWNlSGFzaCgnLycgKyBwYXRoKTtcbiAgcmV0dXJuIGZhbHNlXG59XG5cbmZ1bmN0aW9uIGdldEhhc2ggKCkge1xuICAvLyBXZSBjYW4ndCB1c2Ugd2luZG93LmxvY2F0aW9uLmhhc2ggaGVyZSBiZWNhdXNlIGl0J3Mgbm90XG4gIC8vIGNvbnNpc3RlbnQgYWNyb3NzIGJyb3dzZXJzIC0gRmlyZWZveCB3aWxsIHByZS1kZWNvZGUgaXQhXG4gIHZhciBocmVmID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gIHZhciBpbmRleCA9IGhyZWYuaW5kZXhPZignIycpO1xuICByZXR1cm4gaW5kZXggPT09IC0xID8gJycgOiBocmVmLnNsaWNlKGluZGV4ICsgMSlcbn1cblxuZnVuY3Rpb24gZ2V0VXJsIChwYXRoKSB7XG4gIHZhciBocmVmID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gIHZhciBpID0gaHJlZi5pbmRleE9mKCcjJyk7XG4gIHZhciBiYXNlID0gaSA+PSAwID8gaHJlZi5zbGljZSgwLCBpKSA6IGhyZWY7XG4gIHJldHVybiAoYmFzZSArIFwiI1wiICsgcGF0aClcbn1cblxuZnVuY3Rpb24gcHVzaEhhc2ggKHBhdGgpIHtcbiAgaWYgKHN1cHBvcnRzUHVzaFN0YXRlKSB7XG4gICAgcHVzaFN0YXRlKGdldFVybChwYXRoKSk7XG4gIH0gZWxzZSB7XG4gICAgd2luZG93LmxvY2F0aW9uLmhhc2ggPSBwYXRoO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlcGxhY2VIYXNoIChwYXRoKSB7XG4gIGlmIChzdXBwb3J0c1B1c2hTdGF0ZSkge1xuICAgIHJlcGxhY2VTdGF0ZShnZXRVcmwocGF0aCkpO1xuICB9IGVsc2Uge1xuICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGdldFVybChwYXRoKSk7XG4gIH1cbn1cblxuLyogICovXG5cblxudmFyIEFic3RyYWN0SGlzdG9yeSA9IChmdW5jdGlvbiAoSGlzdG9yeSQkMSkge1xuICBmdW5jdGlvbiBBYnN0cmFjdEhpc3RvcnkgKHJvdXRlciwgYmFzZSkge1xuICAgIEhpc3RvcnkkJDEuY2FsbCh0aGlzLCByb3V0ZXIsIGJhc2UpO1xuICAgIHRoaXMuc3RhY2sgPSBbXTtcbiAgICB0aGlzLmluZGV4ID0gLTE7XG4gIH1cblxuICBpZiAoIEhpc3RvcnkkJDEgKSBBYnN0cmFjdEhpc3RvcnkuX19wcm90b19fID0gSGlzdG9yeSQkMTtcbiAgQWJzdHJhY3RIaXN0b3J5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEhpc3RvcnkkJDEgJiYgSGlzdG9yeSQkMS5wcm90b3R5cGUgKTtcbiAgQWJzdHJhY3RIaXN0b3J5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEFic3RyYWN0SGlzdG9yeTtcblxuICBBYnN0cmFjdEhpc3RvcnkucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiBwdXNoIChsb2NhdGlvbiwgb25Db21wbGV0ZSwgb25BYm9ydCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdGhpcy50cmFuc2l0aW9uVG8obG9jYXRpb24sIGZ1bmN0aW9uIChyb3V0ZSkge1xuICAgICAgdGhpcyQxLnN0YWNrID0gdGhpcyQxLnN0YWNrLnNsaWNlKDAsIHRoaXMkMS5pbmRleCArIDEpLmNvbmNhdChyb3V0ZSk7XG4gICAgICB0aGlzJDEuaW5kZXgrKztcbiAgICAgIG9uQ29tcGxldGUgJiYgb25Db21wbGV0ZShyb3V0ZSk7XG4gICAgfSwgb25BYm9ydCk7XG4gIH07XG5cbiAgQWJzdHJhY3RIaXN0b3J5LnByb3RvdHlwZS5yZXBsYWNlID0gZnVuY3Rpb24gcmVwbGFjZSAobG9jYXRpb24sIG9uQ29tcGxldGUsIG9uQWJvcnQpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHRoaXMudHJhbnNpdGlvblRvKGxvY2F0aW9uLCBmdW5jdGlvbiAocm91dGUpIHtcbiAgICAgIHRoaXMkMS5zdGFjayA9IHRoaXMkMS5zdGFjay5zbGljZSgwLCB0aGlzJDEuaW5kZXgpLmNvbmNhdChyb3V0ZSk7XG4gICAgICBvbkNvbXBsZXRlICYmIG9uQ29tcGxldGUocm91dGUpO1xuICAgIH0sIG9uQWJvcnQpO1xuICB9O1xuXG4gIEFic3RyYWN0SGlzdG9yeS5wcm90b3R5cGUuZ28gPSBmdW5jdGlvbiBnbyAobikge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdmFyIHRhcmdldEluZGV4ID0gdGhpcy5pbmRleCArIG47XG4gICAgaWYgKHRhcmdldEluZGV4IDwgMCB8fCB0YXJnZXRJbmRleCA+PSB0aGlzLnN0YWNrLmxlbmd0aCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHZhciByb3V0ZSA9IHRoaXMuc3RhY2tbdGFyZ2V0SW5kZXhdO1xuICAgIHRoaXMuY29uZmlybVRyYW5zaXRpb24ocm91dGUsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMkMS5pbmRleCA9IHRhcmdldEluZGV4O1xuICAgICAgdGhpcyQxLnVwZGF0ZVJvdXRlKHJvdXRlKTtcbiAgICB9KTtcbiAgfTtcblxuICBBYnN0cmFjdEhpc3RvcnkucHJvdG90eXBlLmdldEN1cnJlbnRMb2NhdGlvbiA9IGZ1bmN0aW9uIGdldEN1cnJlbnRMb2NhdGlvbiAoKSB7XG4gICAgdmFyIGN1cnJlbnQgPSB0aGlzLnN0YWNrW3RoaXMuc3RhY2subGVuZ3RoIC0gMV07XG4gICAgcmV0dXJuIGN1cnJlbnQgPyBjdXJyZW50LmZ1bGxQYXRoIDogJy8nXG4gIH07XG5cbiAgQWJzdHJhY3RIaXN0b3J5LnByb3RvdHlwZS5lbnN1cmVVUkwgPSBmdW5jdGlvbiBlbnN1cmVVUkwgKCkge1xuICAgIC8vIG5vb3BcbiAgfTtcblxuICByZXR1cm4gQWJzdHJhY3RIaXN0b3J5O1xufShIaXN0b3J5KSk7XG5cbi8qICAqL1xuXG52YXIgVnVlUm91dGVyID0gZnVuY3Rpb24gVnVlUm91dGVyIChvcHRpb25zKSB7XG4gIGlmICggb3B0aW9ucyA9PT0gdm9pZCAwICkgb3B0aW9ucyA9IHt9O1xuXG4gIHRoaXMuYXBwID0gbnVsbDtcbiAgdGhpcy5hcHBzID0gW107XG4gIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gIHRoaXMuYmVmb3JlSG9va3MgPSBbXTtcbiAgdGhpcy5yZXNvbHZlSG9va3MgPSBbXTtcbiAgdGhpcy5hZnRlckhvb2tzID0gW107XG4gIHRoaXMubWF0Y2hlciA9IGNyZWF0ZU1hdGNoZXIob3B0aW9ucy5yb3V0ZXMgfHwgW10sIHRoaXMpO1xuXG4gIHZhciBtb2RlID0gb3B0aW9ucy5tb2RlIHx8ICdoYXNoJztcbiAgdGhpcy5mYWxsYmFjayA9IG1vZGUgPT09ICdoaXN0b3J5JyAmJiAhc3VwcG9ydHNQdXNoU3RhdGUgJiYgb3B0aW9ucy5mYWxsYmFjayAhPT0gZmFsc2U7XG4gIGlmICh0aGlzLmZhbGxiYWNrKSB7XG4gICAgbW9kZSA9ICdoYXNoJztcbiAgfVxuICBpZiAoIWluQnJvd3Nlcikge1xuICAgIG1vZGUgPSAnYWJzdHJhY3QnO1xuICB9XG4gIHRoaXMubW9kZSA9IG1vZGU7XG5cbiAgc3dpdGNoIChtb2RlKSB7XG4gICAgY2FzZSAnaGlzdG9yeSc6XG4gICAgICB0aGlzLmhpc3RvcnkgPSBuZXcgSFRNTDVIaXN0b3J5KHRoaXMsIG9wdGlvbnMuYmFzZSk7XG4gICAgICBicmVha1xuICAgIGNhc2UgJ2hhc2gnOlxuICAgICAgdGhpcy5oaXN0b3J5ID0gbmV3IEhhc2hIaXN0b3J5KHRoaXMsIG9wdGlvbnMuYmFzZSwgdGhpcy5mYWxsYmFjayk7XG4gICAgICBicmVha1xuICAgIGNhc2UgJ2Fic3RyYWN0JzpcbiAgICAgIHRoaXMuaGlzdG9yeSA9IG5ldyBBYnN0cmFjdEhpc3RvcnkodGhpcywgb3B0aW9ucy5iYXNlKTtcbiAgICAgIGJyZWFrXG4gICAgZGVmYXVsdDpcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGFzc2VydChmYWxzZSwgKFwiaW52YWxpZCBtb2RlOiBcIiArIG1vZGUpKTtcbiAgICAgIH1cbiAgfVxufTtcblxudmFyIHByb3RvdHlwZUFjY2Vzc29ycyA9IHsgY3VycmVudFJvdXRlOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH07XG5cblZ1ZVJvdXRlci5wcm90b3R5cGUubWF0Y2ggPSBmdW5jdGlvbiBtYXRjaCAoXG4gIHJhdyxcbiAgY3VycmVudCxcbiAgcmVkaXJlY3RlZEZyb21cbikge1xuICByZXR1cm4gdGhpcy5tYXRjaGVyLm1hdGNoKHJhdywgY3VycmVudCwgcmVkaXJlY3RlZEZyb20pXG59O1xuXG5wcm90b3R5cGVBY2Nlc3NvcnMuY3VycmVudFJvdXRlLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuaGlzdG9yeSAmJiB0aGlzLmhpc3RvcnkuY3VycmVudFxufTtcblxuVnVlUm91dGVyLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gaW5pdCAoYXBwIC8qIFZ1ZSBjb21wb25lbnQgaW5zdGFuY2UgKi8pIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGFzc2VydChcbiAgICBpbnN0YWxsLmluc3RhbGxlZCxcbiAgICBcIm5vdCBpbnN0YWxsZWQuIE1ha2Ugc3VyZSB0byBjYWxsIGBWdWUudXNlKFZ1ZVJvdXRlcilgIFwiICtcbiAgICBcImJlZm9yZSBjcmVhdGluZyByb290IGluc3RhbmNlLlwiXG4gICk7XG5cbiAgdGhpcy5hcHBzLnB1c2goYXBwKTtcblxuICAvLyBtYWluIGFwcCBhbHJlYWR5IGluaXRpYWxpemVkLlxuICBpZiAodGhpcy5hcHApIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHRoaXMuYXBwID0gYXBwO1xuXG4gIHZhciBoaXN0b3J5ID0gdGhpcy5oaXN0b3J5O1xuXG4gIGlmIChoaXN0b3J5IGluc3RhbmNlb2YgSFRNTDVIaXN0b3J5KSB7XG4gICAgaGlzdG9yeS50cmFuc2l0aW9uVG8oaGlzdG9yeS5nZXRDdXJyZW50TG9jYXRpb24oKSk7XG4gIH0gZWxzZSBpZiAoaGlzdG9yeSBpbnN0YW5jZW9mIEhhc2hIaXN0b3J5KSB7XG4gICAgdmFyIHNldHVwSGFzaExpc3RlbmVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgaGlzdG9yeS5zZXR1cExpc3RlbmVycygpO1xuICAgIH07XG4gICAgaGlzdG9yeS50cmFuc2l0aW9uVG8oXG4gICAgICBoaXN0b3J5LmdldEN1cnJlbnRMb2NhdGlvbigpLFxuICAgICAgc2V0dXBIYXNoTGlzdGVuZXIsXG4gICAgICBzZXR1cEhhc2hMaXN0ZW5lclxuICAgICk7XG4gIH1cblxuICBoaXN0b3J5Lmxpc3RlbihmdW5jdGlvbiAocm91dGUpIHtcbiAgICB0aGlzJDEuYXBwcy5mb3JFYWNoKGZ1bmN0aW9uIChhcHApIHtcbiAgICAgIGFwcC5fcm91dGUgPSByb3V0ZTtcbiAgICB9KTtcbiAgfSk7XG59O1xuXG5WdWVSb3V0ZXIucHJvdG90eXBlLmJlZm9yZUVhY2ggPSBmdW5jdGlvbiBiZWZvcmVFYWNoIChmbikge1xuICByZXR1cm4gcmVnaXN0ZXJIb29rKHRoaXMuYmVmb3JlSG9va3MsIGZuKVxufTtcblxuVnVlUm91dGVyLnByb3RvdHlwZS5iZWZvcmVSZXNvbHZlID0gZnVuY3Rpb24gYmVmb3JlUmVzb2x2ZSAoZm4pIHtcbiAgcmV0dXJuIHJlZ2lzdGVySG9vayh0aGlzLnJlc29sdmVIb29rcywgZm4pXG59O1xuXG5WdWVSb3V0ZXIucHJvdG90eXBlLmFmdGVyRWFjaCA9IGZ1bmN0aW9uIGFmdGVyRWFjaCAoZm4pIHtcbiAgcmV0dXJuIHJlZ2lzdGVySG9vayh0aGlzLmFmdGVySG9va3MsIGZuKVxufTtcblxuVnVlUm91dGVyLnByb3RvdHlwZS5vblJlYWR5ID0gZnVuY3Rpb24gb25SZWFkeSAoY2IsIGVycm9yQ2IpIHtcbiAgdGhpcy5oaXN0b3J5Lm9uUmVhZHkoY2IsIGVycm9yQ2IpO1xufTtcblxuVnVlUm91dGVyLnByb3RvdHlwZS5vbkVycm9yID0gZnVuY3Rpb24gb25FcnJvciAoZXJyb3JDYikge1xuICB0aGlzLmhpc3Rvcnkub25FcnJvcihlcnJvckNiKTtcbn07XG5cblZ1ZVJvdXRlci5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIHB1c2ggKGxvY2F0aW9uLCBvbkNvbXBsZXRlLCBvbkFib3J0KSB7XG4gIHRoaXMuaGlzdG9yeS5wdXNoKGxvY2F0aW9uLCBvbkNvbXBsZXRlLCBvbkFib3J0KTtcbn07XG5cblZ1ZVJvdXRlci5wcm90b3R5cGUucmVwbGFjZSA9IGZ1bmN0aW9uIHJlcGxhY2UgKGxvY2F0aW9uLCBvbkNvbXBsZXRlLCBvbkFib3J0KSB7XG4gIHRoaXMuaGlzdG9yeS5yZXBsYWNlKGxvY2F0aW9uLCBvbkNvbXBsZXRlLCBvbkFib3J0KTtcbn07XG5cblZ1ZVJvdXRlci5wcm90b3R5cGUuZ28gPSBmdW5jdGlvbiBnbyAobikge1xuICB0aGlzLmhpc3RvcnkuZ28obik7XG59O1xuXG5WdWVSb3V0ZXIucHJvdG90eXBlLmJhY2sgPSBmdW5jdGlvbiBiYWNrICgpIHtcbiAgdGhpcy5nbygtMSk7XG59O1xuXG5WdWVSb3V0ZXIucHJvdG90eXBlLmZvcndhcmQgPSBmdW5jdGlvbiBmb3J3YXJkICgpIHtcbiAgdGhpcy5nbygxKTtcbn07XG5cblZ1ZVJvdXRlci5wcm90b3R5cGUuZ2V0TWF0Y2hlZENvbXBvbmVudHMgPSBmdW5jdGlvbiBnZXRNYXRjaGVkQ29tcG9uZW50cyAodG8pIHtcbiAgdmFyIHJvdXRlID0gdG9cbiAgICA/IHRvLm1hdGNoZWRcbiAgICAgID8gdG9cbiAgICAgIDogdGhpcy5yZXNvbHZlKHRvKS5yb3V0ZVxuICAgIDogdGhpcy5jdXJyZW50Um91dGU7XG4gIGlmICghcm91dGUpIHtcbiAgICByZXR1cm4gW11cbiAgfVxuICByZXR1cm4gW10uY29uY2F0LmFwcGx5KFtdLCByb3V0ZS5tYXRjaGVkLm1hcChmdW5jdGlvbiAobSkge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhtLmNvbXBvbmVudHMpLm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICByZXR1cm4gbS5jb21wb25lbnRzW2tleV1cbiAgICB9KVxuICB9KSlcbn07XG5cblZ1ZVJvdXRlci5wcm90b3R5cGUucmVzb2x2ZSA9IGZ1bmN0aW9uIHJlc29sdmUgKFxuICB0byxcbiAgY3VycmVudCxcbiAgYXBwZW5kXG4pIHtcbiAgdmFyIGxvY2F0aW9uID0gbm9ybWFsaXplTG9jYXRpb24oXG4gICAgdG8sXG4gICAgY3VycmVudCB8fCB0aGlzLmhpc3RvcnkuY3VycmVudCxcbiAgICBhcHBlbmQsXG4gICAgdGhpc1xuICApO1xuICB2YXIgcm91dGUgPSB0aGlzLm1hdGNoKGxvY2F0aW9uLCBjdXJyZW50KTtcbiAgdmFyIGZ1bGxQYXRoID0gcm91dGUucmVkaXJlY3RlZEZyb20gfHwgcm91dGUuZnVsbFBhdGg7XG4gIHZhciBiYXNlID0gdGhpcy5oaXN0b3J5LmJhc2U7XG4gIHZhciBocmVmID0gY3JlYXRlSHJlZihiYXNlLCBmdWxsUGF0aCwgdGhpcy5tb2RlKTtcbiAgcmV0dXJuIHtcbiAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgcm91dGU6IHJvdXRlLFxuICAgIGhyZWY6IGhyZWYsXG4gICAgLy8gZm9yIGJhY2t3YXJkcyBjb21wYXRcbiAgICBub3JtYWxpemVkVG86IGxvY2F0aW9uLFxuICAgIHJlc29sdmVkOiByb3V0ZVxuICB9XG59O1xuXG5WdWVSb3V0ZXIucHJvdG90eXBlLmFkZFJvdXRlcyA9IGZ1bmN0aW9uIGFkZFJvdXRlcyAocm91dGVzKSB7XG4gIHRoaXMubWF0Y2hlci5hZGRSb3V0ZXMocm91dGVzKTtcbiAgaWYgKHRoaXMuaGlzdG9yeS5jdXJyZW50ICE9PSBTVEFSVCkge1xuICAgIHRoaXMuaGlzdG9yeS50cmFuc2l0aW9uVG8odGhpcy5oaXN0b3J5LmdldEN1cnJlbnRMb2NhdGlvbigpKTtcbiAgfVxufTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIFZ1ZVJvdXRlci5wcm90b3R5cGUsIHByb3RvdHlwZUFjY2Vzc29ycyApO1xuXG5mdW5jdGlvbiByZWdpc3Rlckhvb2sgKGxpc3QsIGZuKSB7XG4gIGxpc3QucHVzaChmbik7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGkgPSBsaXN0LmluZGV4T2YoZm4pO1xuICAgIGlmIChpID4gLTEpIHsgbGlzdC5zcGxpY2UoaSwgMSk7IH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVIcmVmIChiYXNlLCBmdWxsUGF0aCwgbW9kZSkge1xuICB2YXIgcGF0aCA9IG1vZGUgPT09ICdoYXNoJyA/ICcjJyArIGZ1bGxQYXRoIDogZnVsbFBhdGg7XG4gIHJldHVybiBiYXNlID8gY2xlYW5QYXRoKGJhc2UgKyAnLycgKyBwYXRoKSA6IHBhdGhcbn1cblxuVnVlUm91dGVyLmluc3RhbGwgPSBpbnN0YWxsO1xuVnVlUm91dGVyLnZlcnNpb24gPSAnMi44LjEnO1xuXG5pZiAoaW5Ccm93c2VyICYmIHdpbmRvdy5WdWUpIHtcbiAgd2luZG93LlZ1ZS51c2UoVnVlUm91dGVyKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgVnVlUm91dGVyO1xuIiwiaW1wb3J0IHsgWGJSb3V0ZUNvbmZpZyB9IGZyb20gXCIuL3R5cGVzXCI7XHJcbmltcG9ydCBuYXZDb25maWcgZnJvbSBcIi4vbmF2LmNvbmZpZy5qc29uXCI7XHJcblxyXG4vLyDms6jlhozot6/nlLFcclxuY29uc3QgcmVnaXN0ZXJSb3V0ZSA9IChuYXZDb25maWdzKSA9PiB7XHJcbiAgY29uc3Qgcm91dGVyczogWGJSb3V0ZUNvbmZpZ1tdID0gW107XHJcbiAgY29uc3QgYWRkRG9jc1JvdXRlID0gKHBhZ2UsIGZvbGRlciwgaW5kZXgpID0+IHtcclxuICAgIGlmIChyb3V0ZXJzW2luZGV4XSAmJiBBcnJheS5pc0FycmF5KHJvdXRlcnNbaW5kZXhdLmNoaWxkcmVuKSkge1xyXG4gICAgICBjb25zdCBjaGlsZDogWGJSb3V0ZUNvbmZpZyA9IHtcclxuICAgICAgICBwYXRoOiBwYWdlLnBhdGguc2xpY2UoMSksXHJcbiAgICAgICAgbmFtZTogXCJjb21wb25lbnQtXCIgKyBwYWdlLnRleHQsXHJcbiAgICAgICAgY29tcG9uZW50OiAocikgPT4gcmVxdWlyZS5lbnN1cmUoW10sICgpID0+IHIocmVxdWlyZShgZG9jcy8ke2ZvbGRlcn0ke3BhZ2UucGF0aH0ubWRgKSkpLFxyXG4gICAgICB9O1xyXG5cclxuICAgICAgcm91dGVyc1tpbmRleF0uY2hpbGRyZW4ucHVzaChjaGlsZCk7XHJcbiAgICB9XHJcbiAgfTtcclxuICBuYXZDb25maWdzLmZvckVhY2goKG5hdkNvbmYsIGluZGV4KSA9PiB7XHJcbiAgICBjb25zdCBpZHhSb3V0ZTogWGJSb3V0ZUNvbmZpZyA9IHtcclxuICAgICAgdGV4dDogbmF2Q29uZi50ZXh0LFxyXG4gICAgICBwYXRoOiBuYXZDb25mLnBhdGgsXHJcbiAgICAgIGNvbXBvbmVudDogKHIpID0+IHJlcXVpcmUuZW5zdXJlKFtdLCAoKSA9PiByKHJlcXVpcmUoXCJleGFtcGxlcy9wYWdlcy9jb250YWluZXIudnVlXCIpKSksXHJcbiAgICAgIGNoaWxkcmVuOiBbXSxcclxuICAgIH07XHJcbiAgICByb3V0ZXJzLnB1c2goaWR4Um91dGUpO1xyXG5cclxuICAgIGlmIChuYXZDb25mLmNoaWxkcmVuKSB7XHJcbiAgICAgIG5hdkNvbmYuY2hpbGRyZW4uZm9yRWFjaCgobmF2KSA9PiB7XHJcbiAgICAgICAgaWYgKG5hdi5ocmVmKSB7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChuYXYuZ3JvdXBzKSB7XHJcbiAgICAgICAgICBuYXYuZ3JvdXBzLmZvckVhY2goKGdyb3VwKSA9PiB7XHJcbiAgICAgICAgICAgIGdyb3VwLmxpc3QuZm9yRWFjaCgoaXRlbSkgPT4ge1xyXG4gICAgICAgICAgICAgIGFkZERvY3NSb3V0ZShpdGVtLCBgJHtncm91cC5mb2xkZXJ9YCwgaW5kZXgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSBpZiAobmF2LmNoaWxkcmVuKSB7XHJcbiAgICAgICAgICBuYXYuY2hpbGRyZW4uZm9yRWFjaCgoY2hpbGQpID0+IHtcclxuICAgICAgICAgICAgYWRkRG9jc1JvdXRlKGNoaWxkLCBcImd1aWRlXCIsIGluZGV4KTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBhZGREb2NzUm91dGUobmF2LCBcImd1aWRlXCIsIGluZGV4KTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICByZXR1cm4gcm91dGVycztcclxufTtcclxuXHJcbmNvbnN0IHJvdXRlciA9IHJlZ2lzdGVyUm91dGUobmF2Q29uZmlnKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHJvdXRlcjtcclxuIiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9kZW1vLWJsb2NrLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD02MjIyNmQ4NCZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9kZW1vLWJsb2NrLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz10cyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vZGVtby1ibG9jay52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9dHMmXCJcbmltcG9ydCBzdHlsZTAgZnJvbSBcIi4vZGVtby1ibG9jay52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZsYW5nPWxlc3MmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBudWxsLFxuICBudWxsXG4gIFxuKVxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkge1xuICB2YXIgYXBpID0gcmVxdWlyZShcIkQ6XFxcXFhiLUJhc2ljLUNvbXBvbmVudHNcXFxcbm9kZV9tb2R1bGVzXFxcXHZ1ZS1ob3QtcmVsb2FkLWFwaVxcXFxkaXN0XFxcXGluZGV4LmpzXCIpXG4gIGFwaS5pbnN0YWxsKHJlcXVpcmUoJ3Z1ZScpKVxuICBpZiAoYXBpLmNvbXBhdGlibGUpIHtcbiAgICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gICAgaWYgKCFtb2R1bGUuaG90LmRhdGEpIHtcbiAgICAgIGFwaS5jcmVhdGVSZWNvcmQoJzYyMjI2ZDg0JywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZWxvYWQoJzYyMjI2ZDg0JywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfVxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9kZW1vLWJsb2NrLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD02MjIyNmQ4NCZcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgYXBpLnJlcmVuZGVyKCc2MjIyNmQ4NCcsIHtcbiAgICAgICAgcmVuZGVyOiByZW5kZXIsXG4gICAgICAgIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn1cbmNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwiZXhhbXBsZXMvY29tcG9uZW50cy9kZW1vLWJsb2NrLnZ1ZVwiXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL2xlc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vZGVtby1ibG9jay52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZsYW5nPWxlc3MmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL2xlc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vZGVtby1ibG9jay52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZsYW5nPWxlc3MmXCIiLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKGZhbHNlKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIlxcbi5kZW1vLWNvbnRhaW5lciB7XFxuICB0cmFuc2l0aW9uOiBtYXgtaGVpZ2h0IDAuM3MgZWFzZTtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxufVxcbi5kb2NzLWRlbW8ge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IGF1dG87XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgZm9udC1zaXplOiAxNHB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2Y3ZjdmNztcXG4gIGJvcmRlcjogMXB4IHNvbGlkICNlMmVjZjQ7XFxuICBib3JkZXItdG9wOiBub25lO1xcbn1cXG4uZG9jcy1kZW1vIHByZSBjb2RlIHtcXG4gIGZvbnQtZmFtaWx5OiBDb25zb2xhcywgTWVubG8sIENvdXJpZXIsIG1vbm9zcGFjZTtcXG4gIGxpbmUtaGVpZ2h0OiAyMnB4O1xcbiAgYm9yZGVyOiBub25lO1xcbn1cXG4uZG9jcy10cmFucyB7XFxuICB3aWR0aDogMTAwJTtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIGNvbG9yOiAjMzE4YWU2O1xcbiAgZm9udC1zaXplOiAxMnB4O1xcbiAgcGFkZGluZzogMTBweCAwO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZhZmJmYztcXG59XFxuLmRvY3MtZGVtb19fY29kZSxcXG4uaGlnaGxpZ2h0LXdyYXBwZXIsXFxuLmRvY3MtZGVtb19fbWV0YSB7XFxuICBwYWRkaW5nOiAwIDIwcHg7XFxuICBvdmVyZmxvdy15OiBhdXRvO1xcbn1cXG4uZG9jcy1kZW1vX19jb2RlIHtcXG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZWVlO1xcbn1cXG4uZG9jcy1kZW1vLmRvY3MtZGVtby0tZXhwYW5kIC5kb2NzLWRlbW9fX21ldGEge1xcbiAgYm9yZGVyLWJvdHRvbTogMXB4IGRhc2hlZCAjZTllOWU5O1xcbn1cXG4uZG9jcy1kZW1vLmRvY3MtZGVtby0tZXhwYW5kIC5kb2NzLWRlbW9fX3RyaWFuZ2xlIHtcXG4gIHRyYW5zZm9ybTogcm90YXRlKDE4MGRlZyk7XFxufVxcbi5oaWdobGlnaHQtd3JhcHBlciB7XFxuICBkaXNwbGF5OiBub25lO1xcbn1cXG4uaGlnaGxpZ2h0LXdyYXBwZXIgcCxcXG4uaGlnaGxpZ2h0LXdyYXBwZXIgcHJlIHtcXG4gIG1hcmdpbjogMDtcXG59XFxuLmhpZ2hsaWdodC13cmFwcGVyIC5obGpzIHtcXG4gIHBhZGRpbmc6IDA7XFxufVxcbi5kb2NzLWRlbW8uZG9jcy1kZW1vLS1leHBhbmQgLmhpZ2hsaWdodC13cmFwcGVyIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbn1cXG4uZG9jcy1kZW1vX19jb2RlX19tb2JpIHtcXG4gIGhlaWdodDogNjIwcHg7XFxuICBtYXJnaW46IDIwcHggMDtcXG59XFxuLmRvY3MtZGVtb19fY29kZV9fbW9iaV9faGVhZGVyIHtcXG4gIGJvcmRlci1yYWRpdXM6IDRweCA0cHggMCAwO1xcbiAgYmFja2dyb3VuZDogLXdlYmtpdC1saW5lYXItZ3JhZGllbnQocmdiYSg1NSwgNTUsIDU1LCAwLjk4KSwgIzU0NTQ1Nik7XFxuICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQocmdiYSg1NSwgNTUsIDU1LCAwLjk4KSwgIzU0NTQ1Nik7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBwYWRkaW5nOiA4cHg7XFxufVxcbi5kb2NzLWRlbW9fX2NvZGVfX21vYmlfX2hlYWRlciBpbWcge1xcbiAgd2lkdGg6IDEwMCU7XFxufVxcbi5kb2NzLWRlbW9fX2NvZGVfX21vYmlfX2hlYWRlciAudXJsLWJveCB7XFxuICBoZWlnaHQ6IDI4cHg7XFxuICBsaW5lLWhlaWdodDogMjhweDtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgcGFkZGluZzogMCAzcHg7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjYTJhMmEyO1xcbiAgbWFyZ2luOiAxMHB4IGF1dG8gMDtcXG4gIGJvcmRlci1yYWRpdXM6IDRweDtcXG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XFxuICBvdmVyZmxvdy14OiBhdXRvO1xcbn1cXG4uZG9jcy1kZW1vX19jb2RlX19tb2JpX19jb250ZW50IGlmcmFtZSB7XFxuICB3aWR0aDogMTAwJTtcXG4gIGJvcmRlcjogMDtcXG4gIGhlaWdodDogNTQ4cHg7XFxufVxcblwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcbiIsIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvbGVzcy1sb2FkZXIvZGlzdC9janMuanMhLi9pbmRleC5sZXNzXCIpO1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4vLyBQcmVwYXJlIGNzc1RyYW5zZm9ybWF0aW9uXG52YXIgdHJhbnNmb3JtO1xuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBIb3QgTW9kdWxlIFJlcGxhY2VtZW50XG5pZihtb2R1bGUuaG90KSB7XG5cdC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG5cdGlmKCFjb250ZW50LmxvY2Fscykge1xuXHRcdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvbGVzcy1sb2FkZXIvZGlzdC9janMuanMhLi9pbmRleC5sZXNzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvbGVzcy1sb2FkZXIvZGlzdC9janMuanMhLi9pbmRleC5sZXNzXCIpO1xuXHRcdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cdFx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdFx0fSk7XG5cdH1cblx0Ly8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJ2YXIgZXNjYXBlID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi91cmwvZXNjYXBlLmpzXCIpO1xuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKShmYWxzZSk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIvKiogY3Nz5YmN57yA5ZCN56ewICovXFxuLyoqIGNzcy1pY29u5YmN57yA5ZCN56ewICovXFxuLyoqIOWFqOWxgOminOiJsuagt+W8j+WumuS5iSAtLSBTVEFSVCovXFxuLyoq57qv55m9KiovXFxuLyoq57qv6buRKiovXFxuLyoqIOS4u+minOiJsuagt+W8jy0t5ZOB54mM6ImyKi9cXG4vKiog54Gw77yM5LiA6Iis55So5L2c6IOM5pmv6ImyKi9cXG4vKiog54Gw77yM55So5L2c57uE5Lu256aB55So5pe255qE6IOM5pmv6ImyKi9cXG4vKiog54Gw77yM55So5L2c6L655qGG44CB5YiG5Ymy57q/Ki9cXG4vKiog5YWo5bGA6aKc6Imy5qC35byP5a6a5LmJIC0tIEVORCovXFxuLyoqIOWFqOWxgOWtl+S9k+agt+W8j+WumuS5iSAtLSBTVEFSVCovXFxuLyoqIOeBsO+8jOS4gOiIrOeUqOS9nHBsYWNlaG9sZGVy77yM5bi455SoKi9cXG4vKiog5YWo5bGA5a2X5L2T5qC35byP5a6a5LmJIC0tIEVORCovXFxuLyoq6byg5qCH57uP6L+H56aB55So5qC35byPKi9cXG5ib2R5IHtcXG4gIGZvbnQtZmFtaWx5OiBcXFwiSGVsdmV0aWNhIE5ldWVcXFwiLCBIZWx2ZXRpY2EsIFxcXCJQaW5nRmFuZyBTQ1xcXCIsIFxcXCJIaXJhZ2lubyBTYW5zIEdCXFxcIiwgXFxcIk1pY3Jvc29mdCBZYUhlaVxcXCIsIFxcXCJcXFxcNUZBRVxcXFw4RjZGXFxcXDk2QzVcXFxcOUVEMVxcXCIsIEFyaWFsLCBzYW5zLXNlcmlmO1xcbiAgZm9udC1zaXplOiAxNHB4O1xcbn1cXG4uZGlzYWJsZWQsXFxuLnhidWktYnV0dG9uLXJlc2V0LnhidWktYnV0dG9uOmRpc2FibGVkLFxcbi54YnVpLWJ1dHRvbi1lcnJvci54YnVpLWJ1dHRvbjpkaXNhYmxlZCxcXG4ueGJ1aS1idXR0b24tdGV4dC54YnVpLWJ1dHRvbjpkaXNhYmxlZCB7XFxuICBvcGFjaXR5OiAwLjQ7XFxuICBjdXJzb3I6IG5vdC1hbGxvd2VkO1xcbn1cXG4ueGJ1aS1idXR0b24ge1xcbiAgZm9udC1zaXplOiAxNHB4O1xcbiAgcGFkZGluZzogNnB4IDE1cHg7XFxuICBib3JkZXI6IDA7XFxuICBvdXRsaW5lOiBub25lO1xcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xcbiAgbWluLXdpZHRoOiA3MHB4O1xcbiAgbWF4LXdpZHRoOiAyMDBweDtcXG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICB1c2VyLXNlbGVjdDogbm9uZTtcXG4gIHRyYW5zaXRpb246IGFsbCAwLjdzO1xcbn1cXG4ueGJ1aS1idXR0b24tZGVmYXVsdCB7XFxuICBjb2xvcjogI2ZmZjtcXG4gIGJhY2tncm91bmQ6ICM1YjhhZjk7XFxuICBib3JkZXI6IDFweCBzb2xpZCAjNWI4YWY5O1xcbn1cXG4ueGJ1aS1idXR0b24tZGVmYXVsdDpob3ZlciB7XFxuICBiYWNrZ3JvdW5kOiAjOGNhZGZiO1xcbiAgYm9yZGVyOiAxcHggc29saWQgIzhjYWRmYjtcXG59XFxuLnhidWktYnV0dG9uLWRlZmF1bHQ6YWN0aXZlIHtcXG4gIGJhY2tncm91bmQ6ICM0OTZlYzc7XFxuICBib3JkZXI6IDFweCBzb2xpZCAjNDk2ZWM3O1xcbn1cXG4ueGJ1aS1idXR0b24tZGVmYXVsdC54YnVpLWJ1dHRvbjpkaXNhYmxlZCB7XFxuICBvcGFjaXR5OiAwLjQ7XFxuICBjdXJzb3I6IG5vdC1hbGxvd2VkO1xcbn1cXG4ueGJ1aS1idXR0b24tZGVmYXVsdC54YnVpLWJ1dHRvbjpkaXNhYmxlZDpob3ZlciB7XFxuICBjb2xvcjogI2ZmZjtcXG4gIGJhY2tncm91bmQ6ICM1YjhhZjk7XFxuICBib3JkZXI6IDFweCBzb2xpZCAjNWI4YWY5O1xcbn1cXG4ueGJ1aS1idXR0b24tcmVzZXQge1xcbiAgY29sb3I6ICM1YjhhZjk7XFxuICBiYWNrZ3JvdW5kOiAjZWZmM2ZlO1xcbiAgYm9yZGVyOiAxcHggc29saWQgIzhjYWRmYjtcXG59XFxuLnhidWktYnV0dG9uLXJlc2V0OmhvdmVyIHtcXG4gIGJhY2tncm91bmQ6ICM4Y2FkZmI7XFxuICBjb2xvcjogI2ZmZjtcXG59XFxuLnhidWktYnV0dG9uLXJlc2V0OmFjdGl2ZSB7XFxuICBjb2xvcjogI2ZmZjtcXG4gIGJhY2tncm91bmQ6ICM0OTZlYzc7XFxuICBib3JkZXI6IDFweCBzb2xpZCAjNDk2ZWM3O1xcbn1cXG4ueGJ1aS1idXR0b24tcmVzZXQueGJ1aS1idXR0b246ZGlzYWJsZWQ6aG92ZXIge1xcbiAgY29sb3I6ICM1YjhhZjk7XFxuICBiYWNrZ3JvdW5kOiAjZWZmM2ZlO1xcbiAgYm9yZGVyOiAxcHggc29saWQgIzhjYWRmYjtcXG59XFxuLnhidWktYnV0dG9uLWVycm9yIHtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgYmFja2dyb3VuZDogI2Y1MjIyZDtcXG4gIGJvcmRlcjogMXB4IHNvbGlkICNmNTIyMmQ7XFxufVxcbi54YnVpLWJ1dHRvbi1lcnJvcjpob3ZlciB7XFxuICBiYWNrZ3JvdW5kOiAjZjg2NDZjO1xcbiAgYm9yZGVyOiAxcHggc29saWQgI2Y4NjQ2YztcXG59XFxuLnhidWktYnV0dG9uLWVycm9yOmFjdGl2ZSB7XFxuICBiYWNrZ3JvdW5kOiAjYzQxYjI0O1xcbiAgYm9yZGVyOiAxcHggc29saWQgI2M0MWIyNDtcXG59XFxuLnhidWktYnV0dG9uLWVycm9yLnhidWktYnV0dG9uOmRpc2FibGVkOmhvdmVyIHtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgYmFja2dyb3VuZDogI2Y1MjIyZDtcXG4gIGJvcmRlcjogMXB4IHNvbGlkICNmNTIyMmQ7XFxufVxcbi54YnVpLWJ1dHRvbi10ZXh0IHtcXG4gIGNvbG9yOiAjNWI4YWY5O1xcbiAgYmFja2dyb3VuZDogbm9uZTtcXG4gIGJvcmRlcjogMXB4IHNvbGlkIG5vbmU7XFxufVxcbi54YnVpLWJ1dHRvbi10ZXh0OmhvdmVyIHtcXG4gIGNvbG9yOiAjOGNhZGZiO1xcbiAgYm9yZGVyOiAxcHggc29saWQgbm9uZTtcXG59XFxuLnhidWktYnV0dG9uLXRleHQ6YWN0aXZlIHtcXG4gIGNvbG9yOiAjNDk2ZWM3O1xcbiAgYm9yZGVyOiAxcHggc29saWQgbm9uZTtcXG59XFxuLnhidWktYnV0dG9uLXRleHQueGJ1aS1idXR0b246ZGlzYWJsZWQ6aG92ZXIge1xcbiAgY29sb3I6ICM1YjhhZjk7XFxuICBiYWNrZ3JvdW5kOiBub25lO1xcbiAgYm9yZGVyOiAxcHggc29saWQgbm9uZTtcXG59XFxuLnhidWktYnV0dG9uLWxhcmdlIHtcXG4gIHBhZGRpbmc6IDhweCAyMHB4O1xcbiAgbWluLXdpZHRoOiA4MHB4O1xcbn1cXG4ueGJ1aS1idXR0b24tc21hbGwge1xcbiAgcGFkZGluZzogM3B4IDVweDtcXG4gIGZvbnQtc2l6ZTogMTJweDtcXG4gIG1pbi13aWR0aDogNjBweDtcXG59XFxuLnhidWktYnV0dG9uLWxvbmcge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBtYXgtd2lkdGg6IG5vbmU7XFxufVxcbi54YnVpLWNoZWNrYm94LWZvY3VzIHtcXG4gIGJveC1zaGFkb3c6IDAgMCAwIDJweCByZ2JhKDkxLCAxMzgsIDI0OSwgMC4yKTtcXG4gIHotaW5kZXg6IDE7XFxufVxcbi54YnVpLWNoZWNrYm94IHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XFxuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgbGluZS1oZWlnaHQ6IDE7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxufVxcbi54YnVpLWNoZWNrYm94LWRpc2FibGVkIHtcXG4gIGN1cnNvcjogXFxcIm5vdC1hbGxvd2VkXFxcIjtcXG59XFxuLnhidWktY2hlY2tib3g6aG92ZXIgLnhidWktY2hlY2tib3gtaW5uZXIge1xcbiAgYm9yZGVyLWNvbG9yOiAjYWFhYWFhO1xcbn1cXG4ueGJ1aS1jaGVja2JveC1pbm5lciB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICB3aWR0aDogMTRweDtcXG4gIGhlaWdodDogMTRweDtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIHRvcDogMDtcXG4gIGxlZnQ6IDA7XFxuICBib3JkZXI6IDFweCBzb2xpZCAjY2NjY2NjO1xcbiAgYm9yZGVyLXJhZGl1czogMnB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG4gIHRyYW5zaXRpb246IGJvcmRlci1jb2xvciAwLjJzIGVhc2UtaW4tb3V0LCBiYWNrZ3JvdW5kLWNvbG9yIDAuMnMgZWFzZS1pbi1vdXQsIGJveC1zaGFkb3cgMC4ycyBlYXNlLWluLW91dDtcXG59XFxuLnhidWktY2hlY2tib3gtaW5uZXI6YWZ0ZXIge1xcbiAgY29udGVudDogXFxcIlxcXCI7XFxuICBkaXNwbGF5OiB0YWJsZTtcXG4gIHdpZHRoOiA0cHg7XFxuICBoZWlnaHQ6IDhweDtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMXB4O1xcbiAgbGVmdDogNHB4O1xcbiAgYm9yZGVyOiAycHggc29saWQgI2ZmZjtcXG4gIGJvcmRlci10b3A6IDA7XFxuICBib3JkZXItbGVmdDogMDtcXG4gIHRyYW5zZm9ybTogcm90YXRlKDQ1ZGVnKSBzY2FsZSgwKTtcXG4gIHRyYW5zaXRpb246IGFsbCAwLjJzIGVhc2UtaW4tb3V0O1xcbn1cXG4ueGJ1aS1jaGVja2JveC1sYXJnZXhidWktY2hlY2tib3gtaW5uZXIge1xcbiAgd2lkdGg6IDE2cHg7XFxuICBoZWlnaHQ6IDE2cHg7XFxufVxcbi54YnVpLWNoZWNrYm94LWxhcmdleGJ1aS1jaGVja2JveC1pbm5lcjphZnRlciB7XFxuICB3aWR0aDogNXB4O1xcbiAgaGVpZ2h0OiA5cHg7XFxufVxcbi54YnVpLWNoZWNrYm94LXNtYWxsIHtcXG4gIGZvbnQtc2l6ZTogMTJweDtcXG59XFxuLnhidWktY2hlY2tib3gtc21hbGx4YnVpLWNoZWNrYm94LWlubmVyIHtcXG4gIHdpZHRoOiAxMnB4O1xcbiAgaGVpZ2h0OiAxMnB4O1xcbn1cXG4ueGJ1aS1jaGVja2JveC1zbWFsbHhidWktY2hlY2tib3gtaW5uZXI6YWZ0ZXIge1xcbiAgdG9wOiAwO1xcbiAgbGVmdDogM3B4O1xcbn1cXG4ueGJ1aS1jaGVja2JveC1pbnB1dCB7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogMTAwJTtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMDtcXG4gIGJvdHRvbTogMDtcXG4gIGxlZnQ6IDA7XFxuICByaWdodDogMDtcXG4gIHotaW5kZXg6IDE7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBvcGFjaXR5OiAwO1xcbn1cXG4ueGJ1aS1jaGVja2JveC1pbnB1dFtkaXNhYmxlZF0ge1xcbiAgY3Vyc29yOiBcXFwibm90LWFsbG93ZWRcXFwiO1xcbn1cXG4ueGJ1aS1jaGVja2JveC1jaGVja2VkOmhvdmVyIC54YnVpLWNoZWNrYm94LWlubmVyIHtcXG4gIGJvcmRlci1jb2xvcjogIzViOGFmOTtcXG59XFxuLnhidWktY2hlY2tib3gtY2hlY2tlZCAueGJ1aS1jaGVja2JveC1pbm5lciB7XFxuICBib3JkZXItY29sb3I6ICM1YjhhZjk7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNWI4YWY5O1xcbn1cXG4ueGJ1aS1jaGVja2JveC1jaGVja2VkIC54YnVpLWNoZWNrYm94LWlubmVyOmFmdGVyIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFwiO1xcbiAgZGlzcGxheTogdGFibGU7XFxuICB3aWR0aDogNHB4O1xcbiAgaGVpZ2h0OiA4cHg7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDFweDtcXG4gIGxlZnQ6IDRweDtcXG4gIGJvcmRlcjogMnB4IHNvbGlkICNmZmY7XFxuICBib3JkZXItdG9wOiAwO1xcbiAgYm9yZGVyLWxlZnQ6IDA7XFxuICB0cmFuc2Zvcm06IHJvdGF0ZSg0NWRlZykgc2NhbGUoMSk7XFxuICB0cmFuc2l0aW9uOiBhbGwgMC4ycyBlYXNlLWluLW91dDtcXG59XFxuLnhidWktY2hlY2tib3gtbGFyZ2UgLnhidWktY2hlY2tib3gtY2hlY2tlZCAueGJ1aS1jaGVja2JveC1pbm5lcjphZnRlciB7XFxuICB3aWR0aDogNXB4O1xcbiAgaGVpZ2h0OiA5cHg7XFxufVxcbi54YnVpLWNoZWNrYm94LXNtYWxsIC54YnVpLWNoZWNrYm94LWNoZWNrZWQgLnhidWktY2hlY2tib3gtaW5uZXI6YWZ0ZXIge1xcbiAgdG9wOiAwO1xcbiAgbGVmdDogM3B4O1xcbn1cXG4ueGJ1aS1jaGVja2JveC1kaXNhYmxlZHhidWktY2hlY2tib3gtY2hlY2tlZDpob3ZlciAueGJ1aS1jaGVja2JveC1pbm5lciB7XFxuICBib3JkZXItY29sb3I6ICNjY2NjY2M7XFxufVxcbi54YnVpLWNoZWNrYm94LWRpc2FibGVkeGJ1aS1jaGVja2JveC1jaGVja2VkIC54YnVpLWNoZWNrYm94LWlubmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNlNWU1ZTU7XFxuICBib3JkZXItY29sb3I6ICNjY2NjY2M7XFxufVxcbi54YnVpLWNoZWNrYm94LWRpc2FibGVkeGJ1aS1jaGVja2JveC1jaGVja2VkIC54YnVpLWNoZWNrYm94LWlubmVyOmFmdGVyIHtcXG4gIGFuaW1hdGlvbi1uYW1lOiBub25lO1xcbiAgYm9yZGVyLWNvbG9yOiAjY2NjY2NjO1xcbn1cXG4ueGJ1aS1jaGVja2JveC1kaXNhYmxlZDpob3ZlciAueGJ1aS1jaGVja2JveC1pbm5lciB7XFxuICBib3JkZXItY29sb3I6ICNjY2NjY2M7XFxufVxcbi54YnVpLWNoZWNrYm94LWRpc2FibGVkIC54YnVpLWNoZWNrYm94LWlubmVyIHtcXG4gIGJvcmRlci1jb2xvcjogI2NjY2NjYztcXG4gIGJhY2tncm91bmQtY29sb3I6ICNlNWU1ZTU7XFxufVxcbi54YnVpLWNoZWNrYm94LWRpc2FibGVkIC54YnVpLWNoZWNrYm94LWlubmVyOmFmdGVyIHtcXG4gIGFuaW1hdGlvbi1uYW1lOiBub25lO1xcbiAgYm9yZGVyLWNvbG9yOiAjZTVlNWU1O1xcbn1cXG4ueGJ1aS1jaGVja2JveC1kaXNhYmxlZCAueGJ1aS1jaGVja2JveC1pbm5lci1pbnB1dCB7XFxuICBjdXJzb3I6IGRlZmF1bHQ7XFxufVxcbi54YnVpLWNoZWNrYm94LWRpc2FibGVkICsgc3BhbiB7XFxuICBjb2xvcjogI2NjY2NjYztcXG4gIGN1cnNvcjogXFxcIm5vdC1hbGxvd2VkXFxcIjtcXG59XFxuLnhidWktY2hlY2tib3gtaW5kZXRlcm1pbmF0ZSAueGJ1aS1jaGVja2JveC1pbm5lcjphZnRlciB7XFxuICBjb250ZW50OiBcXFwiXFxcIjtcXG4gIHdpZHRoOiA4cHg7XFxuICBoZWlnaHQ6IDFweDtcXG4gIHRyYW5zZm9ybTogc2NhbGUoMSk7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBsZWZ0OiAycHg7XFxuICB0b3A6IDVweDtcXG59XFxuLnhidWktY2hlY2tib3gtaW5kZXRlcm1pbmF0ZTpob3ZlciAueGJ1aS1jaGVja2JveC1pbm5lciB7XFxuICBib3JkZXItY29sb3I6ICM1YjhhZjk7XFxufVxcbi54YnVpLWNoZWNrYm94LWluZGV0ZXJtaW5hdGUgLnhidWktY2hlY2tib3gtaW5uZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzViOGFmOTtcXG4gIGJvcmRlci1jb2xvcjogIzViOGFmOTtcXG59XFxuLnhidWktY2hlY2tib3gtaW5kZXRlcm1pbmF0ZXhidWktY2hlY2tib3gtZGlzYWJsZWQgLnhidWktY2hlY2tib3gtaW5uZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2U1ZTVlNTtcXG4gIGJvcmRlci1jb2xvcjogI2NjY2NjYztcXG59XFxuLnhidWktY2hlY2tib3gtaW5kZXRlcm1pbmF0ZXhidWktY2hlY2tib3gtZGlzYWJsZWQgLnhidWktY2hlY2tib3gtaW5uZXI6YWZ0ZXIge1xcbiAgYm9yZGVyLWNvbG9yOiAjY2NjY2NjO1xcbn1cXG4ueGJ1aS1jaGVja2JveC1sYXJnZSAueGJ1aS1jaGVja2JveC1pbmRldGVybWluYXRlIC54YnVpLWNoZWNrYm94LWlubmVyOmFmdGVyIHtcXG4gIHdpZHRoOiAxMHB4O1xcbiAgdG9wOiA2cHg7XFxufVxcbi54YnVpLWNoZWNrYm94LXNtYWxsIC54YnVpLWNoZWNrYm94LWluZGV0ZXJtaW5hdGUgLnhidWktY2hlY2tib3gtaW5uZXI6YWZ0ZXIge1xcbiAgd2lkdGg6IDZweDtcXG4gIHRvcDogNHB4O1xcbn1cXG4ueGJ1aS1jaGVja2JveC13cmFwcGVyIHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIGZvbnQtc2l6ZTogMTJweDtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIG1hcmdpbi1yaWdodDogOHB4O1xcbn1cXG4ueGJ1aS1jaGVja2JveC13cmFwcGVyLWRpc2FibGVkIHtcXG4gIGN1cnNvcjogXFxcIm5vdC1hbGxvd2VkXFxcIjtcXG59XFxuLnhidWktY2hlY2tib3gtd3JhcHBlci54YnVpLWNoZWNrYm94LWxhcmdlIHtcXG4gIGZvbnQtc2l6ZTogMTRweDtcXG59XFxuLnhidWktY2hlY2tib3gtd3JhcHBlciArIHNwYW4sXFxuLnhidWktY2hlY2tib3ggKyBzcGFuIHtcXG4gIG1hcmdpbi1yaWdodDogNHB4O1xcbn1cXG4ueGJ1aS1jaGVja2JveC1ncm91cCB7XFxuICBmb250LXNpemU6IDE0cHg7XFxufVxcbi54YnVpLWNoZWNrYm94LWdyb3VwLWl0ZW0ge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbn1cXG4ueGJ1aS1pbnB1dC1udW1iZXItd2hvbGUtZGl2IHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIGhlaWdodDogMTAwJTtcXG59XFxuLnhidWktaW5wdXQtbnVtYmVyLWlucHV0LWRpdiB7XFxuICB3aWR0aDogMTgwcHg7XFxuICBoZWlnaHQ6IDQwcHg7XFxuICBtaW4taGVpZ2h0OiAzMHB4O1xcbiAgYm9yZGVyOiAxcHggI2NjYyBzb2xpZDtcXG4gIGZvbnQtc2l6ZTogMTRweDtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIGJvcmRlci1yYWRpdXM6IDNweDtcXG59XFxuLnhidWktaW5wdXQtbnVtYmVyLWlucHV0IHtcXG4gIHBhZGRpbmc6IDAgNTVweCAwIDEwcHg7XFxuICBtYXJnaW46IDA7XFxuICB3aWR0aDogY2FsYygxMDAlIC0gNjVweCk7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICBib3JkZXI6IG5vbmU7XFxuICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcXG59XFxuLnhidWktaW5wdXQtbnVtYmVyLWlucHV0LWRpc2FibGVkIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmNWY3ZmE7XFxuICBib3JkZXItY29sb3I6ICNlNGU3ZWQ7XFxuICBjb2xvcjogI2MwYzRjYztcXG4gIGN1cnNvcjogbm90LWFsbG93ZWQ7XFxufVxcbi54YnVpLWlucHV0LW51bWJlci1hcnJvdy1kaXYge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgd2lkdGg6IDQwcHg7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICByaWdodDogMDtcXG4gIHRvcDogMDtcXG4gIGZvbnQtc2l6ZTogMDtcXG4gIGJvcmRlci1sZWZ0OiAxcHggc29saWQgI2RkZDtcXG59XFxuLnhidWktaW5wdXQtbnVtYmVyLWFycm93IHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiA1MCU7XFxuICBib3JkZXItYm90dG9tOiBub25lO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgZm9udC1zaXplOiAxMnB4O1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbn1cXG4ueGJ1aS1pbnB1dC1udW1iZXItYXJyb3ctZGlzYWJsZWQge1xcbiAgY3Vyc29yOiBub3QtYWxsb3dlZDtcXG4gIGNvbG9yOiAjYzBjNGNjO1xcbn1cXG4ueGJ1aS1pbnB1dC1udW1iZXItYXJyb3ctZG93biB7XFxuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2RkZDtcXG59XFxuQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogXFxcImljb21vb25cXFwiO1xcbiAgc3JjOiB1cmwoXCIgKyBlc2NhcGUocmVxdWlyZShcIi4vZm9udHMvaWNvbW9vbi5lb3Q/eHgxMWlxXCIpKSArIFwiKTtcXG4gIHNyYzogdXJsKFwiICsgZXNjYXBlKHJlcXVpcmUoXCIuL2ZvbnRzL2ljb21vb24uZW90P3h4MTFpcVwiKSkgKyBcIiNpZWZpeCkgZm9ybWF0KFxcXCJlbWJlZGRlZC1vcGVudHlwZVxcXCIpLCB1cmwoXCIgKyBlc2NhcGUocmVxdWlyZShcIi4vZm9udHMvaWNvbW9vbi50dGY/eHgxMWlxXCIpKSArIFwiKSBmb3JtYXQoXFxcInRydWV0eXBlXFxcIiksIHVybChcIiArIGVzY2FwZShyZXF1aXJlKFwiLi9mb250cy9pY29tb29uLndvZmY/eHgxMWlxXCIpKSArIFwiKSBmb3JtYXQoXFxcIndvZmZcXFwiKSwgdXJsKFwiICsgZXNjYXBlKHJlcXVpcmUoXCIuL2ZvbnRzL2ljb21vb24uc3ZnP3h4MTFpcVwiKSkgKyBcIiNpY29tb29uKSBmb3JtYXQoXFxcInN2Z1xcXCIpO1xcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcXG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcXG59XFxuW2NsYXNzXj1cXFwieGItaWNvbi1cXFwiXSxcXG5bY2xhc3MqPVxcXCIgeGItaWNvbi1cXFwiXSB7XFxuICAvKiB1c2UgIWltcG9ydGFudCB0byBwcmV2ZW50IGlzc3VlcyB3aXRoIGJyb3dzZXIgZXh0ZW5zaW9ucyB0aGF0IGNoYW5nZSBmb250cyAqL1xcbiAgZm9udC1mYW1pbHk6IFxcXCJpY29tb29uXFxcIiAhaW1wb3J0YW50O1xcbiAgc3BlYWs6IG5vbmU7XFxuICBmb250LXN0eWxlOiBub3JtYWw7XFxuICBmb250LXdlaWdodDogbm9ybWFsO1xcbiAgZm9udC12YXJpYW50OiBub3JtYWw7XFxuICB0ZXh0LXRyYW5zZm9ybTogbm9uZTtcXG4gIGxpbmUtaGVpZ2h0OiAxO1xcbiAgLyogQmV0dGVyIEZvbnQgUmVuZGVyaW5nID09PT09PT09PT09ICovXFxuICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDtcXG4gIC1tb3otb3N4LWZvbnQtc21vb3RoaW5nOiBncmF5c2NhbGU7XFxufVxcbi54Yi1pY29uLWVkaXQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcRTk0QlxcXCI7XFxufVxcbi54Yi1pY29uLWFjaGlldmVtZW50OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXEU5MDBcXFwiO1xcbn1cXG4ueGItaWNvbi1hY3Rpdml0eTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxFOTAxXFxcIjtcXG59XFxuLnhiLWljb24tYW5uZXg6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcRTkwMlxcXCI7XFxufVxcbi54Yi1pY29uLWFubm91bmNlbWVudDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxFOTAzXFxcIjtcXG59XFxuLnhiLWljb24tYXJyb3ctZG93bjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxFOTA0XFxcIjtcXG59XFxuLnhiLWljb24tYXJyb3ctbGVmdDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxFOTA1XFxcIjtcXG59XFxuLnhiLWljb24tYXJyb3ctcmlnaHQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcRTkwNlxcXCI7XFxufVxcbi54Yi1pY29uLWFycm93LXVwOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXEU5MDdcXFwiO1xcbn1cXG4ueGItaWNvbi1BdHRlbmRhbmNlOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXEU5MDhcXFwiO1xcbn1cXG4ueGItaWNvbi1hdWRpbzpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxFOTA5XFxcIjtcXG59XFxuLnhiLWljb24tYmFyczpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxFOTBBXFxcIjtcXG59XFxuLnhiLWljb24tYmVkcm9vbTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxFOTBCXFxcIjtcXG59XFxuLnhiLWljb24tY2FtcHVzOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXEU5MENcXFwiO1xcbn1cXG4ueGItaWNvbi1jYXJldC1ib3R0b206YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcRTkwRFxcXCI7XFxufVxcbi54Yi1pY29uLWNhcmV0LWxlZnQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcRTkwRVxcXCI7XFxufVxcbi54Yi1pY29uLWNhcmV0LXJpZ2h0OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXEU5MEZcXFwiO1xcbn1cXG4ueGItaWNvbi1jYXJldC10b3A6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcRTkxMFxcXCI7XFxufVxcbi54Yi1pY29uLWNoZWNrOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXEU5MTFcXFwiO1xcbn1cXG4ueGItaWNvbi1DaGlsZDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxFOTEyXFxcIjtcXG59XFxuLnhiLWljb24tY2lyY2xlLWNoZWNrOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXEU5MTNcXFwiO1xcbn1cXG4ueGItaWNvbi1jaXJjbGUtY2hlY2stb3V0bGluZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxFOTE0XFxcIjtcXG59XFxuLnhiLWljb24tY2lyY2xlLWNsb3NlOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXEU5MTVcXFwiO1xcbn1cXG4ueGItaWNvbi1jaXJjbGUtY2xvc2Utb3V0bGluZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxFOTE2XFxcIjtcXG59XFxuLnhiLWljb24tY2lyY2xlLWRvd25sb2FkOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXEU5MTdcXFwiO1xcbn1cXG4ueGItaWNvbi1jaXJjbGUtcGx1czpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxFOTE4XFxcIjtcXG59XFxuLnhiLWljb24tY2lyY2xlLXJlbW92ZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxFOTE5XFxcIjtcXG59XFxuLnhiLWljb24tY2lyY2xlLXVwbG9hZDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxFOTFBXFxcIjtcXG59XFxuLnhiLWljb24tY2xhc3M6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcRTkxQlxcXCI7XFxufVxcbi54Yi1pY29uLWNsb3NlOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXEU5MUNcXFwiO1xcbn1cXG4ueGItaWNvbi1jb21tZW50OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXEU5MURcXFwiO1xcbn1cXG4ueGItaWNvbi1jb21tZW50LW91dGxpbmU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcRTkxRVxcXCI7XFxufVxcbi54Yi1pY29uLWNvcHk6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcRTkxRlxcXCI7XFxufVxcbi54Yi1pY29uLWN1cnJpY3VsdW06YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcRTkyMFxcXCI7XFxufVxcbi54Yi1pY29uLWRhdGEtZGlzazpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxFOTIxXFxcIjtcXG59XFxuLnhiLWljb24tZGF0ZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxFOTIyXFxcIjtcXG59XFxuLnhiLWljb24tZGVsZXRlOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXEU5MjNcXFwiO1xcbn1cXG4ueGItaWNvbi1kaXNhYmxlOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXEU5MjRcXFwiO1xcbn1cXG4ueGItaWNvbi1kcmFnOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXEU5MjVcXFwiO1xcbn1cXG4ueGItaWNvbi1lcnJvci1jaXJjbGU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcRTkyNlxcXCI7XFxufVxcbi54Yi1pY29uLWV4YW06YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcRTkyN1xcXCI7XFxufVxcbi54Yi1pY29uLWV4cG9ydDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxFOTI4XFxcIjtcXG59XFxuLnhiLWljb24tZXllOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXEU5MjlcXFwiO1xcbn1cXG4ueGItaWNvbi1leWUtb2ZmOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXEU5MkFcXFwiO1xcbn1cXG4ueGItaWNvbi1maWx0ZXI6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcRTkyQlxcXCI7XFxufVxcbi54Yi1pY29uLUZpbmFuY2U6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcRTkyQ1xcXCI7XFxufVxcbi54Yi1pY29uLWhvbWU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcRTkyRFxcXCI7XFxufVxcbi54Yi1pY29uLWluZm8tY2lyY2xlOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXEU5MkVcXFwiO1xcbn1cXG4ueGItaWNvbi1sZWFybmluZy10YXNrczpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxFOTJGXFxcIjtcXG59XFxuLnhiLWljb24tbGlzdDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxFOTMwXFxcIjtcXG59XFxuLnhiLWljb24tbG9hZGluZzpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxFOTMxXFxcIjtcXG59XFxuLnhiLWljb24tbWFuYWdlbWVudDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxFOTMyXFxcIjtcXG59XFxuLnhiLWljb24tbWVjaGFuaXNtOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXEU5MzNcXFwiO1xcbn1cXG4ueGItaWNvbi1taW51czpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxFOTM0XFxcIjtcXG59XFxuLnhiLWljb24tbW9yZTpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxFOTM1XFxcIjtcXG59XFxuLnhiLWljb24tcGFzc3dvcmQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcRTkzNlxcXCI7XFxufVxcbi54Yi1pY29uLXBsdXM6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcRTkzN1xcXCI7XFxufVxcbi54Yi1pY29uLXByaW50ZXI6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcRTkzOFxcXCI7XFxufVxcbi54Yi1pY29uLVByb2dyZXNzaW9uOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXEU5MzlcXFwiO1xcbn1cXG4ueGItaWNvbi1xdWVzdGlvbi1jaXJjbGU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcRTkzQVxcXCI7XFxufVxcbi54Yi1pY29uLXJlY3J1aXQtc3R1ZGVudHM6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcRTkzQlxcXCI7XFxufVxcbi54Yi1pY29uLXJvbGU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcRTkzQ1xcXCI7XFxufVxcbi54Yi1pY29uLXNhbWUtbGV2ZWw6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcRTkzRFxcXCI7XFxufVxcbi54Yi1pY29uLXNhdmU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcRTkzRVxcXCI7XFxufVxcbi54Yi1pY29uLXNjaGVkdWxlOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXEU5M0ZcXFwiO1xcbn1cXG4ueGItaWNvbi1zY2hvb2w6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcRTk0MFxcXCI7XFxufVxcbi54Yi1pY29uLXNlYXJjaDpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxFOTQxXFxcIjtcXG59XFxuLnhiLWljb24tc3RhZmY6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcRTk0MlxcXCI7XFxufVxcbi54Yi1pY29uLXN0dWRlbnQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcRTk0M1xcXCI7XFxufVxcbi54Yi1pY29uLXN1Y2Nlc3MtY2lyY2xlOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXEU5NDRcXFwiO1xcbn1cXG4ueGItaWNvbi1zeW5jOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXEU5NDVcXFwiO1xcbn1cXG4ueGItaWNvbi10ZWFjaGluZy1zZXR0aW5nOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXEU5NDZcXFwiO1xcbn1cXG4ueGItaWNvbi10aW1lOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcXEU5NDdcXFwiO1xcbn1cXG4ueGItaWNvbi10cmVlX2ljbzpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxFOTQ4XFxcIjtcXG59XFxuLnhiLWljb24tdXNlcjpiZWZvcmUge1xcbiAgY29udGVudDogXFxcIlxcXFxFOTQ5XFxcIjtcXG59XFxuLnhiLWljb24td2FybmluZy1jaXJjbGU6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcRTk0QVxcXCI7XFxufVxcbi54YnVpLW1lc3NhZ2VCb3gge1xcbiAgcG9zaXRpb246IGZpeGVkO1xcbiAgdG9wOiAwJTtcXG4gIHotaW5kZXg6IDk5OTtcXG4gIGxlZnQ6IDUwJTtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtNTAlKTtcXG4gIHdpZHRoOiA2MDBweDtcXG59XFxuLnhidWktbWVzc2FnZS10aXBzIHtcXG4gIHBvaW50ZXItZXZlbnRzOiBhbGw7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxufVxcbi54YnVpLW1lc3NhZ2UtdGlwcy1jb250ZW50IHtcXG4gIHBhZGRpbmc6IDEwcHggMTZweDtcXG4gIGJvcmRlci1yYWRpdXM6IDRweDtcXG4gIGJveC1zaGFkb3c6IDAgMXB4IDZweCByZ2JhKDAsIDAsIDAsIDAuMik7XFxuICBiYWNrZ3JvdW5kOiAjZmZmO1xcbiAgZm9udC1zaXplOiAxNHB4O1xcbiAgbWFyZ2luOiAxMHB4IDA7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxufVxcbi54YnVpLW1lc3NhZ2UtdGlwcy10ZXh0IHtcXG4gIG1hcmdpbi1sZWZ0OiAzcHg7XFxufVxcbi54YnVpLW1lc3NhZ2UtdGlwc19jbG9zZSB7XFxuICBtYXJnaW4tbGVmdDogNTBweDtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuLnNsaWRlLWZhZGUtZW50ZXItYWN0aXZlLFxcbi5zbGlkZS1mYWRlLWxlYXZlLWFjdGl2ZSB7XFxuICB0cmFuc2l0aW9uOiBhbGwgMC41cyBlYXNlO1xcbn1cXG4uc2xpZGUtZmFkZS1lbnRlcixcXG4uc2xpZGUtZmFkZS1sZWF2ZS10byB7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTEwcHgpO1xcbiAgb3BhY2l0eTogMDtcXG59XFxuLnNsaWRlLWZhZGUtbGVhdmUtdG8ge1xcbiAgbWFyZ2luLXRvcDogLTYwcHg7XFxufVxcbi54YnVpLXBvcHVwLXdpbmRvdyB7XFxuICB3aWR0aDogYXV0bztcXG4gIG1hcmdpbjogMCBhdXRvO1xcbiAgb3V0bGluZTogbm9uZTtcXG59XFxuLnhidWktcG9wdXAtd2luZG93LWhpZGRlbiB7XFxuICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7XFxufVxcbi54YnVpLXBvcHVwLXdpbmRvdy13cmFwIHtcXG4gIHotaW5kZXg6IDk5OTtcXG4gIHBvc2l0aW9uOiBmaXhlZDtcXG4gIGxlZnQ6IDUwJTtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtNTAlKTtcXG4gIHRvcDogMjAlO1xcbn1cXG4ueGJ1aS1wb3B1cC13aW5kb3ctd3JhcCAqIHtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICAtd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMCk7XFxufVxcbi54YnVpLXBvcHVwLXdpbmRvdy1tYXNrIHtcXG4gIHBvc2l0aW9uOiBmaXhlZDtcXG4gIHRvcDogMDtcXG4gIGJvdHRvbTogMDtcXG4gIGxlZnQ6IDA7XFxuICByaWdodDogMDtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoNTUsIDU1LCA1NSwgMC42KTtcXG4gIGhlaWdodDogMTAwJTtcXG4gIHotaW5kZXg6IDk5OTtcXG59XFxuLnhidWktcG9wdXAtd2luZG93LWNvbnRlbnQge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG4gIGJvcmRlcjogMDtcXG4gIGJvcmRlci1yYWRpdXM6IDVweDtcXG4gIGJhY2tncm91bmQtY2xpcDogcGFkZGluZy1ib3g7XFxufVxcbi54YnVpLXBvcHVwLXdpbmRvdy1oZWFkZXIge1xcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNlNWU1ZTU7XFxuICBwYWRkaW5nOiAxNHB4IDE2cHg7XFxuICBsaW5lLWhlaWdodDogMTtcXG59XFxuLnhidWktcG9wdXAtd2luZG93LWNsb3NlIHtcXG4gIHotaW5kZXg6IDE7XFxuICBmb250LXNpemU6IDEycHg7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICByaWdodDogOHB4O1xcbiAgdG9wOiA4cHg7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG4ueGJ1aS1wb3B1cC13aW5kb3ctYm9keSB7XFxuICBwYWRkaW5nOiAxNnB4O1xcbiAgZm9udC1zaXplOiAxMnB4O1xcbiAgbGluZS1oZWlnaHQ6IDEuNTtcXG59XFxuLnhidWktcG9wdXAtd2luZG93LWZvb3RlciB7XFxuICBib3JkZXItdG9wOiAxcHggc29saWQgI2U1ZTVlNTtcXG4gIHBhZGRpbmc6IDEycHggMThweCAxMnB4IDE4cHg7XFxuICB0ZXh0LWFsaWduOiByaWdodDtcXG59XFxuLnhidWktcG9wdXAtd2luZG93LWZvb3RlciBidXR0b24gKyBidXR0b24ge1xcbiAgbWFyZ2luLWxlZnQ6IDhweDtcXG4gIG1hcmdpbi1ib3R0b206IDA7XFxufVxcbi5jb2xvckJveCB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC13cmFwOiB3cmFwO1xcbn1cXG4uY29sb3JCb3ggLml0ZW0ge1xcbiAgZm9udC1zaXplOiAxNnB4O1xcbiAgcGFkZGluZzogMTVweDtcXG4gIHdpZHRoOiAxMCU7XFxuICBib3JkZXItcmFkaXVzOiAzcHg7XFxuICBtYXJnaW4tYm90dG9tOiAxNXB4O1xcbiAgbWFyZ2luLXJpZ2h0OiA1cHg7XFxuICBjb2xvcjogI2ZmZjtcXG59XFxuLmNvbG9yQm94IC5pdGVtIGRpdjpsYXN0LWNoaWxkIHtcXG4gIGZvbnQtc2l6ZTogMTRweDtcXG4gIG9wYWNpdHk6IDAuODtcXG4gIG1hcmdpbi10b3A6IDNweDtcXG59XFxuLmRlZmF1bHQge1xcbiAgYmFja2dyb3VuZDogIzViOGFmOTtcXG59XFxuLlByaW1hcnkzIHtcXG4gIGJhY2tncm91bmQ6ICM4Y2FkZmI7XFxuICBjb2xvcjogIzMzMyAhaW1wb3J0YW50O1xcbn1cXG4uUHJpbWFyeTIge1xcbiAgYmFja2dyb3VuZDogI2JkZDBmZDtcXG4gIGNvbG9yOiAjMzMzICFpbXBvcnRhbnQ7XFxufVxcbi5QcmltYXJ5MSB7XFxuICBiYWNrZ3JvdW5kOiAjZWZmM2ZlO1xcbiAgY29sb3I6ICMzMzMgIWltcG9ydGFudDtcXG59XFxuLlByaW1hcnk1IHtcXG4gIGJhY2tncm91bmQ6ICM0OTZlYzc7XFxufVxcbi5QcmltYXJ5NiB7XFxuICBiYWNrZ3JvdW5kOiAjMzc1Mzk1O1xcbn1cXG4uUHJpbWFyeTcge1xcbiAgYmFja2dyb3VuZDogIzI0Mzc2NDtcXG59XFxuLmdyYXkxIHtcXG4gIGJhY2tncm91bmQ6ICNmNWY1ZjU7XFxuICBjb2xvcjogIzMzMyAhaW1wb3J0YW50O1xcbn1cXG4uZ3JheTIge1xcbiAgYmFja2dyb3VuZDogI2U1ZTVlNTtcXG4gIGNvbG9yOiAjMzMzICFpbXBvcnRhbnQ7XFxufVxcbi5ncmF5MyB7XFxuICBiYWNrZ3JvdW5kOiAjY2NjY2NjO1xcbiAgY29sb3I6ICMzMzMgIWltcG9ydGFudDtcXG59XFxuLmdyYXk0IHtcXG4gIGJhY2tncm91bmQ6ICNhYWFhYWE7XFxuICBjb2xvcjogIzMzMyAhaW1wb3J0YW50O1xcbn1cXG4uZ3JheTUge1xcbiAgYmFja2dyb3VuZDogIzczNzM3MztcXG4gIGNvbG9yOiAjMzMzICFpbXBvcnRhbnQ7XFxufVxcbi5ncmF5NiB7XFxuICBiYWNrZ3JvdW5kOiAjMzMzMzMzO1xcbn1cXG4ud2hpdGUge1xcbiAgYmFja2dyb3VuZDogI2ZmZjtcXG4gIGNvbG9yOiAjMzMzICFpbXBvcnRhbnQ7XFxufVxcbi5ibGFjayB7XFxuICBiYWNrZ3JvdW5kOiAjMDAwO1xcbn1cXG4uYmx1ZSB7XFxuICBiYWNrZ3JvdW5kOiAjMTg5MGZmO1xcbn1cXG4uZ3JlZW4ge1xcbiAgYmFja2dyb3VuZDogIzUyYzQxYTtcXG59XFxuLm9yYW5nZSB7XFxuICBiYWNrZ3JvdW5kOiAjZmFhZDE0O1xcbn1cXG4ucmVkIHtcXG4gIGJhY2tncm91bmQ6ICNmNTIyMmQ7XFxufVxcbi5jbGVhcmZpeCB7XFxuICB6b29tOiAxO1xcbn1cXG4uY2xlYXJmaXg6YmVmb3JlLFxcbi5jbGVhcmZpeDphZnRlciB7XFxuICBjb250ZW50OiBcXFwiXFxcIjtcXG4gIGRpc3BsYXk6IHRhYmxlO1xcbn1cXG4uY2xlYXJmaXg6YWZ0ZXIge1xcbiAgY2xlYXI6IGJvdGg7XFxuICB2aXNpYmlsaXR5OiBoaWRkZW47XFxuICBmb250LXNpemU6IDA7XFxuICBoZWlnaHQ6IDA7XFxufVxcbi5cXFwieGJ1aS1cXFwiIFxcXCJmb3JtXFxcIiAuXFxcInhidWktXFxcIiBcXFwiZm9ybVxcXCIgXFxcIi1pdGVtXFxcIi1sYWJlbCB7XFxuICB0ZXh0LWFsaWduOiByaWdodDtcXG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XFxuICBmbG9hdDogbGVmdDtcXG4gIGZvbnQtc2l6ZTogMTJweDtcXG4gIGNvbG9yOiAjMDAwO1xcbiAgbGluZS1oZWlnaHQ6IDE7XFxuICBwYWRkaW5nOiAxMHB4IDEycHggMTBweCAwO1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG59XFxuLlxcXCJ4YnVpLVxcXCIgXFxcImZvcm1cXFwiLWxhYmVsLWxlZnQgLlxcXCJ4YnVpLVxcXCIgXFxcImZvcm1cXFwiIFxcXCItaXRlbVxcXCItbGFiZWwge1xcbiAgdGV4dC1hbGlnbjogbGVmdDtcXG59XFxuLlxcXCJ4YnVpLVxcXCIgXFxcImZvcm1cXFwiLWxhYmVsLXJpZ2h0IC5cXFwieGJ1aS1cXFwiIFxcXCJmb3JtXFxcIiBcXFwiLWl0ZW1cXFwiLWxhYmVsIHtcXG4gIHRleHQtYWxpZ246IGxlZnQ7XFxufVxcbi5cXFwieGJ1aS1cXFwiIFxcXCJmb3JtXFxcIi1pbmxpbmUgLlxcXCJ4YnVpLVxcXCIgXFxcImZvcm1cXFwiIFxcXCItaXRlbVxcXCIge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xcbiAgdmVydGljYWwtYWxpZ246IHRvcDtcXG59XFxuLlxcXCJ4YnVpLVxcXCIgXFxcImZvcm1cXFwiIFxcXCItaXRlbVxcXCIge1xcbiAgbWFyZ2luLWJvdHRvbTogMjRweDtcXG4gIHZlcnRpY2FsLWFsaWduOiB0b3A7XFxuICB6b29tOiAxO1xcbn1cXG4uXFxcInhidWktXFxcIiBcXFwiZm9ybVxcXCIgXFxcIi1pdGVtXFxcIjpiZWZvcmUsXFxuLlxcXCJ4YnVpLVxcXCIgXFxcImZvcm1cXFwiIFxcXCItaXRlbVxcXCI6YWZ0ZXIge1xcbiAgY29udGVudDogXFxcIlxcXCI7XFxuICBkaXNwbGF5OiB0YWJsZTtcXG59XFxuLlxcXCJ4YnVpLVxcXCIgXFxcImZvcm1cXFwiIFxcXCItaXRlbVxcXCI6YWZ0ZXIge1xcbiAgY2xlYXI6IGJvdGg7XFxuICB2aXNpYmlsaXR5OiBoaWRkZW47XFxuICBmb250LXNpemU6IDA7XFxuICBoZWlnaHQ6IDA7XFxufVxcbi5cXFwieGJ1aS1cXFwiIFxcXCJmb3JtXFxcIiBcXFwiLWl0ZW1cXFwiLWNvbnRlbnQge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgbGluZS1oZWlnaHQ6IDMycHg7XFxuICBmb250LXNpemU6IDEycHg7XFxufVxcbi5cXFwieGJ1aS1cXFwiIFxcXCJmb3JtXFxcIiBcXFwiLWl0ZW1cXFwiIC5cXFwieGJ1aS1cXFwiIFxcXCJmb3JtXFxcIiBcXFwiLWl0ZW1cXFwiIHtcXG4gIG1hcmdpbi1ib3R0b206IDA7XFxufVxcbi5cXFwieGJ1aS1cXFwiIFxcXCJmb3JtXFxcIiBcXFwiLWl0ZW1cXFwiIC5cXFwieGJ1aS1cXFwiIFxcXCJmb3JtXFxcIiBcXFwiLWl0ZW1cXFwiIC5cXFwieGJ1aS1cXFwiIFxcXCJmb3JtXFxcIiBcXFwiLWl0ZW1cXFwiLWNvbnRlbnQge1xcbiAgbWFyZ2luLWxlZnQ6IDAgIWltcG9ydGFudDtcXG59XFxuLlxcXCJ4YnVpLVxcXCIgXFxcImZvcm1cXFwiIFxcXCItaXRlbVxcXCItZXJyb3ItdGlwIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMTAwJTtcXG4gIGxlZnQ6IDA7XFxuICBsaW5lLWhlaWdodDogMTtcXG4gIHBhZGRpbmctdG9wOiA2cHg7XFxuICBjb2xvcjogI2Y1MjIyZDtcXG59XFxuLlxcXCJ4YnVpLVxcXCIgXFxcImZvcm1cXFwiIFxcXCItaXRlbVxcXCItcmVxdWlyZWQgLlxcXCJ4YnVpLVxcXCIgXFxcImZvcm1cXFwiIFxcXCItaXRlbVxcXCItbGFiZWw6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCIqXFxcIjtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIG1hcmdpbi1yaWdodDogNHB4O1xcbiAgbGluZS1oZWlnaHQ6IDE7XFxuICBmb250LWZhbWlseTogU2ltU3VuO1xcbiAgZm9udC1zaXplOiAxMnB4O1xcbiAgY29sb3I6ICNmNTIyMmQ7XFxufVxcbi5cXFwieGJ1aS1cXFwiIFxcXCJmb3JtXFxcIiBcXFwiLWl0ZW1cXFwiLWVycm9yIGlucHV0IHtcXG4gIGJvcmRlcjogMXB4IHNvbGlkICNmNTIyMmQ7XFxufVxcbi54YnVpLXRleHQtZGl2IHtcXG4gIHdpZHRoOiAyNjBweDtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG59XFxuLnhidWktdGV4dC1pbnB1dCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xcbiAgYmFja2dyb3VuZC1pbWFnZTogbm9uZTtcXG4gIGJvcmRlci1yYWRpdXM6IDNweDtcXG4gIGJvcmRlcjogMXB4IHNvbGlkICNjY2NjY2M7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgY29sb3I6ICMzMzMzMzM7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICB3aWR0aDogMTAwJTtcXG59XFxuLnhidWktdGV4dC1pbnB1dC1sYXJnZSB7XFxuICBoZWlnaHQ6IDQwcHg7XFxuICBsaW5lLWhlaWdodDogNDBweDtcXG4gIHBhZGRpbmc6IDAgMTVweDtcXG4gIGZvbnQtc2l6ZTogMTRweDtcXG59XFxuLnhidWktdGV4dC1pbnB1dC1tZWRpdW0ge1xcbiAgaGVpZ2h0OiAzMnB4O1xcbiAgbGluZS1oZWlnaHQ6IDMycHg7XFxuICBwYWRkaW5nOiAwIDEycHg7XFxuICBmb250LXNpemU6IDE0cHg7XFxufVxcbi54YnVpLXRleHQtaW5wdXQtc21hbGwge1xcbiAgaGVpZ2h0OiAyMHB4O1xcbiAgbGluZS1oZWlnaHQ6IDIwcHg7XFxuICBwYWRkaW5nOiAwIDEwcHg7XFxuICBmb250LXNpemU6IDEycHg7XFxufVxcbi54YnVpLXRleHQtZmFpbC1pbnB1dCB7XFxuICBmb250LXNpemU6IDE2cHg7XFxuICBib3JkZXItY29sb3I6ICNmNTIyMmQ7XFxufVxcbi54YnVpLXRleHQtbGVmdC1pbnB1dCB7XFxuICBwYWRkaW5nLWxlZnQ6IDMwcHg7XFxufVxcbi54YnVpLXRleHQtcmlnaHQtaW5wdXQge1xcbiAgcGFkZGluZy1yaWdodDogMzBweDtcXG59XFxuLnhidWktdGV4dC1pbnB1dDpob3ZlciB7XFxuICBib3JkZXItY29sb3I6ICM1YjhhZjk7XFxufVxcbi54YnVpLXRleHQtdGV4dGFyZWEge1xcbiAgcGFkZGluZzogNXB4IDE1cHg7XFxuICBsaW5lLWhlaWdodDogMjBweDtcXG4gIG1pbi1oZWlnaHQ6IDUwcHg7XFxuICByZXNpemU6IG5vbmU7XFxufVxcbi54YnVpLXRleHQtZGlzYWJsZWQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2U1ZTVlNTtcXG4gIGJvcmRlci1jb2xvcjogI2U1ZTVlNSAhaW1wb3J0YW50O1xcbiAgY29sb3I6ICNjY2NjY2M7XFxuICBjdXJzb3I6IG5vdC1hbGxvd2VkO1xcbn1cXG4ueGJ1aS10ZXh0LWxlZnQtaWNvbiB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBoZWlnaHQ6IDc1JTtcXG4gIGxlZnQ6IDEwcHg7XFxuICB0b3A6IDI1JTtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIGNvbG9yOiAjYzBjNGNjO1xcbiAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lO1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbn1cXG4ueGJ1aS10ZXh0LXJpZ2h0LWljb24ge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgaGVpZ2h0OiA3NSU7XFxuICByaWdodDogMTBweDtcXG4gIHRvcDogMjUlO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgY29sb3I6ICNjMGM0Y2M7XFxuICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxufVxcbi54YnVpLXRleHQtY2xvc2UtaWNvbiB7XFxuICBmb250LXNpemU6IDE2cHg7XFxuICBjb2xvcjogI2FhYWFhYTtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuLnhidWktdGV4dC1zdWNjZXNzLWljb24ge1xcbiAgZm9udC1zaXplOiAxNnB4O1xcbiAgY29sb3I6ICM1MmM0MWE7XFxufVxcbi54YnVpLXRleHQtZmFpbC1pY29uIHtcXG4gIGZvbnQtc2l6ZTogMTZweDtcXG4gIGNvbG9yOiAjZjUyMjJkO1xcbn1cXG4ueGJ1aS10YWJsZSB7XFxuICB3aWR0aDogaW5oZXJpdDtcXG4gIGhlaWdodDogMTAwJTtcXG4gIG1heC13aWR0aDogMTAwJTtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxuICBjb2xvcjogIzMzMzMzMztcXG4gIGZvbnQtc2l6ZTogMTJweDtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbn1cXG4ueGJ1aS10YWJsZS13cmFwcGVyIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGJvcmRlcjogMXB4IHNvbGlkICNjY2NjY2M7XFxuICBib3JkZXItYm90dG9tOiAwO1xcbiAgYm9yZGVyLXJpZ2h0OiAwO1xcbn1cXG4ueGJ1aS10YWJsZS1oaWRlIHtcXG4gIG9wYWNpdHk6IDA7XFxufVxcbi54YnVpLXRhYmxlOmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcIjtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiAxcHg7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBsZWZ0OiAwO1xcbiAgYm90dG9tOiAwO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2NjY2NjYztcXG4gIHotaW5kZXg6IDE7XFxufVxcbi54YnVpLXRhYmxlOmFmdGVyIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFwiO1xcbiAgd2lkdGg6IDFweDtcXG4gIGhlaWdodDogMTAwJTtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMDtcXG4gIHJpZ2h0OiAwO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2NjY2NjYztcXG4gIHotaW5kZXg6IDM7XFxufVxcbi54YnVpLXRhYmxlLXRpdGxlLFxcbi54YnVpLXRhYmxlLWZvb3RlciB7XFxuICBoZWlnaHQ6IDQ4cHg7XFxuICBsaW5lLWhlaWdodDogNDhweDtcXG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjNzM3MzczO1xcbn1cXG4ueGJ1aS10YWJsZS1mb290ZXIge1xcbiAgYm9yZGVyLWJvdHRvbTogbm9uZTtcXG59XFxuLnhidWktdGFibGUtaGVhZGVyIHtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxufVxcbi54YnVpLXRhYmxlLW92ZXJmbG93WCB7XFxuICBvdmVyZmxvdy14OiBzY3JvbGw7XFxufVxcbi54YnVpLXRhYmxlLW92ZXJmbG93WSB7XFxuICBvdmVyZmxvdy15OiBzY3JvbGw7XFxufVxcbi54YnVpLXRhYmxlLXRpcCB7XFxuICBvdmVyZmxvdy14OiBhdXRvO1xcbiAgb3ZlcmZsb3cteTogaGlkZGVuO1xcbn1cXG4ueGJ1aS10YWJsZS13aXRoLWZpeGVkLXRvcC54YnVpLXRhYmxlLXdpdGgtZm9vdGVyIC54YnVpLXRhYmxlLWZvb3RlciB7XFxuICBib3JkZXItdG9wOiAxcHggc29saWQgI2NjY2NjYztcXG59XFxuLnhidWktdGFibGUtd2l0aC1maXhlZC10b3AueGJ1aS10YWJsZS13aXRoLWZvb3RlciB0Ym9keSB0cjpsYXN0LWNoaWxkIHRkIHtcXG4gIGJvcmRlci1ib3R0b206IG5vbmU7XFxufVxcbi54YnVpLXRhYmxlIHRoLFxcbi54YnVpLXRhYmxlIHRkIHtcXG4gIG1pbi13aWR0aDogMDtcXG4gIGhlaWdodDogNDhweDtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICB0ZXh0LWFsaWduOiBsZWZ0O1xcbiAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XFxuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICM3MzczNzM7XFxufVxcbi54YnVpLXRhYmxlIHRoIHtcXG4gIGhlaWdodDogNDBweDtcXG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2Y1ZjVmNTtcXG59XFxuLnhidWktdGFibGUgdGQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG4gIHRyYW5zaXRpb246IGJhY2tncm91bmQtY29sb3IgMC4ycyBlYXNlLWluLW91dDtcXG59XFxudGgueGJ1aS10YWJsZS1jb2x1bW4tbGVmdCxcXG50ZC54YnVpLXRhYmxlLWNvbHVtbi1sZWZ0IHtcXG4gIHRleHQtYWxpZ246IGxlZnQ7XFxufVxcbnRoLnhidWktdGFibGUtY29sdW1uLWNlbnRlcixcXG50ZC54YnVpLXRhYmxlLWNvbHVtbi1jZW50ZXIge1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbn1cXG50aC54YnVpLXRhYmxlLWNvbHVtbi1yaWdodCxcXG50ZC54YnVpLXRhYmxlLWNvbHVtbi1yaWdodCB7XFxuICB0ZXh0LWFsaWduOiByaWdodDtcXG59XFxuLnhidWktdGFibGUgdGFibGUge1xcbiAgdGFibGUtbGF5b3V0OiBmaXhlZDtcXG59XFxuLnhidWktdGFibGUtYm9yZGVyIHRoLFxcbi54YnVpLXRhYmxlLWJvcmRlciB0ZCB7XFxuICBib3JkZXItcmlnaHQ6IDFweCBzb2xpZCAjNzM3MzczO1xcbn1cXG4ueGJ1aS10YWJsZS1jZWxsIHtcXG4gIHBhZGRpbmctbGVmdDogMThweDtcXG4gIHBhZGRpbmctcmlnaHQ6IDE4cHg7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XFxuICB3aGl0ZS1zcGFjZTogbm9ybWFsO1xcbiAgd29yZC1icmVhazogYnJlYWstYWxsO1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG59XFxuLnhidWktdGFibGUtY2VsbC1lbGxpcHNpcyB7XFxuICB3b3JkLWJyZWFrOiBrZWVwLWFsbDtcXG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XFxufVxcbi54YnVpLXRhYmxlLWNlbGwtdG9vbHRpcCB7XFxuICB3aWR0aDogMTAwJTtcXG59XFxuLnhidWktdGFibGUtY2VsbC10b29sdGlwLWNvbnRlbnQge1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XFxuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcbn1cXG4ueGJ1aS10YWJsZS1jZWxsLXdpdGgtZXhwYW5kIHtcXG4gIGhlaWdodDogNDdweDtcXG4gIGxpbmUtaGVpZ2h0OiA0N3B4O1xcbiAgcGFkZGluZzogMDtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG59XFxuLnhidWktdGFibGUtY2VsbC1leHBhbmQge1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDAuMnMgZWFzZS1pbi1vdXQ7XFxufVxcbi54YnVpLXRhYmxlLWNlbGwtZXhwYW5kIGkge1xcbiAgZm9udC1zaXplOiAxNHB4O1xcbn1cXG4ueGJ1aS10YWJsZS1jZWxsLWV4cGFuZC1leHBhbmRlZCB7XFxuICB0cmFuc2Zvcm06IHJvdGF0ZSg5MGRlZyk7XFxufVxcbi54YnVpLXRhYmxlLWNlbGwtc29ydCB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICB1c2VyLXNlbGVjdDogbm9uZTtcXG59XFxuLnhidWktdGFibGUtY2VsbC13aXRoLXNlbGVjdGlvbiAuXFxcInhidWktXFxcImNoZWNrYm94LXdyYXBwZXIge1xcbiAgbWFyZ2luLXJpZ2h0OiAwO1xcbn1cXG4ueGJ1aS10YWJsZS1oaWRkZW4ge1xcbiAgdmlzaWJpbGl0eTogaGlkZGVuO1xcbn1cXG50aCAueGJ1aS10YWJsZS1jZWxsIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHdvcmQtd3JhcDogbm9ybWFsO1xcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcXG59XFxudGQueGJ1aS10YWJsZS1leHBhbmRlZC1jZWxsIHtcXG4gIHBhZGRpbmc6IDIwcHggNTBweDtcXG4gIGJhY2tncm91bmQ6ICNmNWY1ZjU7XFxufVxcbi54YnVpLXRhYmxlLXN0cmlwZSAueGJ1aS10YWJsZS1ib2R5IHRyOm50aC1jaGlsZCgybikgdGQsXFxuLnhidWktdGFibGUtc3RyaXBlIC54YnVpLXRhYmxlLWZpeGVkLWJvZHkgdHI6bnRoLWNoaWxkKDJuKSB0ZCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xcbn1cXG4ueGJ1aS10YWJsZS1zdHJpcGUgLnhidWktdGFibGUtYm9keSB0ci54YnVpLXRhYmxlLXJvdy1ob3ZlciB0ZCxcXG4ueGJ1aS10YWJsZS1zdHJpcGUgLnhidWktdGFibGUtZml4ZWQtYm9keSB0ci54YnVpLXRhYmxlLXJvdy1ob3ZlciB0ZCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjYWFhYWFhO1xcbn1cXG50ci54YnVpLXRhYmxlLXJvdy1ob3ZlciB0ZCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjYWFhYWFhO1xcbn1cXG4ueGJ1aS10YWJsZS1sYXJnZSB7XFxuICBmb250LXNpemU6IDE0cHg7XFxufVxcbi54YnVpLXRhYmxlLWxhcmdlIHRoIHtcXG4gIGhlaWdodDogNDhweDtcXG59XFxuLnhidWktdGFibGUtbGFyZ2UgdGQge1xcbiAgaGVpZ2h0OiA2MHB4O1xcbn1cXG4ueGJ1aS10YWJsZS1sYXJnZS10aXRsZSxcXG4ueGJ1aS10YWJsZS1sYXJnZS1mb290ZXIge1xcbiAgaGVpZ2h0OiA2MHB4O1xcbiAgbGluZS1oZWlnaHQ6IDYwcHg7XFxufVxcbi54YnVpLXRhYmxlLWxhcmdlIC54YnVpLXRhYmxlLWNlbGwtd2l0aC1leHBhbmQge1xcbiAgaGVpZ2h0OiA1OXB4O1xcbiAgbGluZS1oZWlnaHQ6IDU5cHg7XFxufVxcbi54YnVpLXRhYmxlLWxhcmdlIC54YnVpLXRhYmxlLWNlbGwtd2l0aC1leHBhbmQgaSB7XFxuICBmb250LXNpemU6IDE2cHg7XFxufVxcbi54YnVpLXRhYmxlLXNtYWxsIHRoIHtcXG4gIGhlaWdodDogMzJweDtcXG59XFxuLnhidWktdGFibGUtc21hbGwgdGQge1xcbiAgaGVpZ2h0OiA0MHB4O1xcbn1cXG4ueGJ1aS10YWJsZS1zbWFsbC10aXRsZSxcXG4ueGJ1aS10YWJsZS1zbWFsbC1mb290ZXIge1xcbiAgaGVpZ2h0OiA0MHB4O1xcbiAgbGluZS1oZWlnaHQ6IDQwcHg7XFxufVxcbi54YnVpLXRhYmxlLXNtYWxsIC54YnVpLXRhYmxlLWNlbGwtd2l0aC1leHBhbmQge1xcbiAgaGVpZ2h0OiAzOXB4O1xcbiAgbGluZS1oZWlnaHQ6IDM5cHg7XFxufVxcbi54YnVpLXRhYmxlLXJvdy1oaWdobGlnaHQgdGQsXFxudHIueGJ1aS10YWJsZS1yb3ctaGlnaGxpZ2h0LnhidWktdGFibGUtcm93LWhvdmVyIHRkLFxcbi54YnVpLXRhYmxlLXN0cmlwZSAueGJ1aS10YWJsZS1ib2R5IHRyLnhidWktdGFibGUtcm93LWhpZ2hsaWdodDpudGgtY2hpbGQoMm4pIHRkLFxcbi54YnVpLXRhYmxlLXN0cmlwZSAueGJ1aS10YWJsZS1maXhlZC1ib2R5IHRyLnhidWktdGFibGUtcm93LWhpZ2hsaWdodDpudGgtY2hpbGQoMm4pIHRkIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNlNWU1ZTU7XFxufVxcbi54YnVpLXRhYmxlLWZpeGVkLFxcbi54YnVpLXRhYmxlLWZpeGVkLXJpZ2h0IHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMDtcXG4gIGxlZnQ6IDA7XFxuICBib3gtc2hhZG93OiAycHggMCA2cHggLTJweCByZ2JhKDAsIDAsIDAsIDAuMik7XFxufVxcbi54YnVpLXRhYmxlLWZpeGVkOjpiZWZvcmUsXFxuLnhidWktdGFibGUtZml4ZWQtcmlnaHQ6OmJlZm9yZSB7XFxuICBjb250ZW50OiBcXFwiXFxcIjtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiAxcHg7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjY2NjY2NjO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgbGVmdDogMDtcXG4gIGJvdHRvbTogMDtcXG4gIHotaW5kZXg6IDQ7XFxufVxcbi54YnVpLXRhYmxlLWZpeGVkLXJpZ2h0IHtcXG4gIHRvcDogMDtcXG4gIGxlZnQ6IGF1dG87XFxuICByaWdodDogMDtcXG4gIGJveC1zaGFkb3c6IC0ycHggMCA2cHggLTJweCByZ2JhKDAsIDAsIDAsIDAuMik7XFxufVxcbi54YnVpLXRhYmxlLWZpeGVkLXJpZ2h0LWhlYWRlciB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IC0xcHg7XFxuICByaWdodDogMDtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmNWY1ZjU7XFxuICBib3JkZXItdG9wOiAxcHggc29saWQgI2NjY2NjYztcXG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjNzM3MzczO1xcbn1cXG4ueGJ1aS10YWJsZS1maXhlZC1oZWFkZXIge1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG59XFxuLnhidWktdGFibGUtZml4ZWQtaGVhZGVyLXdpdGgtZW1wdHkgLnhidWktdGFibGUtaGlkZGVuIC54YnVpLXRhYmxlLXNvcnQge1xcbiAgZGlzcGxheTogbm9uZTtcXG59XFxuLnhidWktdGFibGUtZml4ZWQtaGVhZGVyLXdpdGgtZW1wdHkgLnhidWktdGFibGUtaGlkZGVuIC54YnVpLXRhYmxlLWNlbGwgc3BhbiB7XFxuICBkaXNwbGF5OiBub25lO1xcbn1cXG4ueGJ1aS10YWJsZS1maXhlZC1ib2R5IHtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB6LWluZGV4OiAzO1xcbn1cXG4ueGJ1aS10YWJsZS1maXhlZC1zaGFkb3cge1xcbiAgd2lkdGg6IDFweDtcXG4gIGhlaWdodDogMTAwJTtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMDtcXG4gIHJpZ2h0OiAwO1xcbiAgYm94LXNoYWRvdzogMXB4IDAgNnB4IHJnYmEoMCwgMCwgMCwgMC4yKTtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxuICB6LWluZGV4OiAxO1xcbn1cXG4ueGJ1aS10YWJsZS1zb3J0IHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHdpZHRoOiAxNHB4O1xcbiAgaGVpZ2h0OiAxMnB4O1xcbiAgbWFyZ2luLXRvcDogLTFweDtcXG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbn1cXG4ueGJ1aS10YWJsZS1zb3J0IGkge1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBoZWlnaHQ6IDZweDtcXG4gIGxpbmUtaGVpZ2h0OiA2cHg7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgY29sb3I6ICNlNWU1ZTU7XFxuICB0cmFuc2l0aW9uOiBjb2xvciAwLjJzIGVhc2UtaW4tb3V0O1xcbiAgZm9udC1zaXplOiAxNnB4O1xcbn1cXG4ueGJ1aS10YWJsZS1zb3J0IGk6aG92ZXIge1xcbiAgY29sb3I6IGluaGVyaXQ7XFxufVxcbi54YnVpLXRhYmxlLXNvcnQgaS5vbiB7XFxuICBjb2xvcjogIzViOGFmOTtcXG59XFxuLnhidWktdGFibGUtc29ydCBpOmZpcnN0LWNoaWxkIHtcXG4gIHRvcDogMDtcXG59XFxuLnhidWktdGFibGUtc29ydCBpOmxhc3QtY2hpbGQge1xcbiAgYm90dG9tOiAwO1xcbn1cXG4ueGJ1aS10YWJsZS1maWx0ZXIge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbn1cXG4ueGJ1aS10YWJsZS1maWx0ZXIgaSB7XFxuICBjb2xvcjogI2U1ZTVlNTtcXG4gIHRyYW5zaXRpb246IGNvbG9yIDAuMnMgZWFzZS1pbi1vdXQ7XFxufVxcbi54YnVpLXRhYmxlLWZpbHRlciBpOmhvdmVyIHtcXG4gIGNvbG9yOiBpbmhlcml0O1xcbn1cXG4ueGJ1aS10YWJsZS1maWx0ZXIgaS5vbiB7XFxuICBjb2xvcjogIzViOGFmOTtcXG59XFxuLnhidWktdGFibGUtZmlsdGVyLWxpc3Qge1xcbiAgcGFkZGluZzogOHB4IDAgMDtcXG59XFxuLnhidWktdGFibGUtZmlsdGVyLWxpc3QtaXRlbSB7XFxuICBwYWRkaW5nOiAwIDEycHggOHB4O1xcbn1cXG4ueGJ1aS10YWJsZS1maWx0ZXItbGlzdC1pdGVtIC5pdnUtY2hlY2tib3gtd3JhcHBlciArIC5pdnUtY2hlY2tib3gtd3JhcHBlciB7XFxuICBtYXJnaW46IDA7XFxufVxcbi54YnVpLXRhYmxlLWZpbHRlci1saXN0LWl0ZW0gbGFiZWwge1xcbiAgZGlzcGxheTogYmxvY2s7XFxufVxcbi54YnVpLXRhYmxlLWZpbHRlci1saXN0LWl0ZW0gbGFiZWwgPiBzcGFuIHtcXG4gIG1hcmdpbi1yaWdodDogNHB4O1xcbn1cXG4ueGJ1aS10YWJsZS1maWx0ZXItbGlzdCB1bCB7XFxuICBwYWRkaW5nLWJvdHRvbTogOHB4O1xcbn1cXG4ueGJ1aS10YWJsZS1maWx0ZXItbGlzdCAueGJ1aS10YWJsZS1maWx0ZXItc2VsZWN0LWl0ZW0ge1xcbiAgbWFyZ2luOiAwO1xcbiAgbGluZS1oZWlnaHQ6IG5vcm1hbDtcXG4gIHBhZGRpbmc6IDdweCAxNnB4O1xcbiAgY2xlYXI6IGJvdGg7XFxuICBjb2xvcjogIzMzMzMzMztcXG4gIGZvbnQtc2l6ZTogMTJweCAhaW1wb3J0YW50O1xcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcXG4gIGxpc3Qtc3R5bGU6IG5vbmU7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kIDAuMnMgZWFzZS1pbi1vdXQ7XFxufVxcbi54YnVpLXRhYmxlLWZpbHRlci1saXN0IC54YnVpLXRhYmxlLWZpbHRlci1zZWxlY3QtaXRlbTpob3ZlciB7XFxuICBiYWNrZ3JvdW5kOiAjZTVlNWU1O1xcbn1cXG4ueGJ1aS10YWJsZS1maWx0ZXItbGlzdCAueGJ1aS10YWJsZS1maWx0ZXItc2VsZWN0LWl0ZW0tZm9jdXMge1xcbiAgYmFja2dyb3VuZDogI2U1ZTVlNTtcXG59XFxuLnhidWktdGFibGUtZmlsdGVyLWxpc3QgLnhidWktdGFibGUtZmlsdGVyLXNlbGVjdC1pdGVtLWRpc2FibGVkIHtcXG4gIGNvbG9yOiAjZTVlNWU1O1xcbiAgY3Vyc29yOiBcXFwibm90LWFsbG93ZWRcXFwiO1xcbn1cXG4ueGJ1aS10YWJsZS1maWx0ZXItbGlzdCAueGJ1aS10YWJsZS1maWx0ZXItc2VsZWN0LWl0ZW0tZGlzYWJsZWQ6aG92ZXIge1xcbiAgY29sb3I6ICNlNWU1ZTU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xcbiAgY3Vyc29yOiBcXFwibm90LWFsbG93ZWRcXFwiO1xcbn1cXG4ueGJ1aS10YWJsZS1maWx0ZXItbGlzdCAueGJ1aS10YWJsZS1maWx0ZXItc2VsZWN0LWl0ZW0tc2VsZWN0ZWQsXFxuLnhidWktdGFibGUtZmlsdGVyLWxpc3QgLnhidWktdGFibGUtZmlsdGVyLXNlbGVjdC1pdGVtLXNlbGVjdGVkOmhvdmVyIHtcXG4gIGNvbG9yOiAjNWI4YWY5O1xcbn1cXG4ueGJ1aS10YWJsZS1maWx0ZXItbGlzdCAueGJ1aS10YWJsZS1maWx0ZXItc2VsZWN0LWl0ZW0tZGl2aWRlZCB7XFxuICBtYXJnaW4tdG9wOiA1cHg7XFxuICBib3JkZXItdG9wOiAxcHggc29saWQgIzczNzM3MztcXG59XFxuLnhidWktdGFibGUtZmlsdGVyLWxpc3QgLnhidWktdGFibGUtZmlsdGVyLXNlbGVjdC1pdGVtLWRpdmlkZWQ6YmVmb3JlIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFwiO1xcbiAgaGVpZ2h0OiA1cHg7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIG1hcmdpbjogMCAtMTZweDtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB0b3A6IC03cHg7XFxufVxcbi54YnVpLXRhYmxlLWZpbHRlci1saXN0IC54YnVpLXRhYmxlLWxhcmdlIC54YnVpLXRhYmxlLWZpbHRlci1zZWxlY3QtaXRlbSB7XFxuICBwYWRkaW5nOiA3cHggMTZweCA4cHg7XFxuICBmb250LXNpemU6IDE0cHggIWltcG9ydGFudDtcXG59XFxuQC1tb3otZG9jdW1lbnQgdXJsLXByZWZpeCgpIHtcXG4gIC54YnVpLXRhYmxlLWZpbHRlci1saXN0IC54YnVpLXRhYmxlLWZpbHRlci1zZWxlY3QtaXRlbSB7XFxuICAgIHdoaXRlLXNwYWNlOiBub3JtYWw7XFxuICB9XFxufVxcbi54YnVpLXRhYmxlLWZpbHRlci1mb290ZXIge1xcbiAgcGFkZGluZzogNHB4O1xcbiAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICM3MzczNzM7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbn1cXG4ueGJ1aS10YWJsZS1maWx0ZXItZm9vdGVyIGJ1dHRvbjpmaXJzdC1jaGlsZCB7XFxuICBmbG9hdDogbGVmdDtcXG59XFxuLnhidWktdGFibGUtZmlsdGVyLWZvb3RlciBidXR0b246bGFzdC1jaGlsZCB7XFxuICBmbG9hdDogcmlnaHQ7XFxufVxcbi54YnVpLXRhYmxlLXRpcCB0YWJsZSB7XFxuICB3aWR0aDogMTAwJTtcXG59XFxuLnhidWktdGFibGUtdGlwIHRhYmxlIHRkIHtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG59XFxuLnhidWktdGFibGUtZXhwYW5kZWQtaGlkZGVuIHtcXG4gIHZpc2liaWxpdHk6IGhpZGRlbjtcXG59XFxuLnhidWktdGFibGVwb3BwZXIge1xcbiAgbWluLXdpZHRoOiAwO1xcbiAgdGV4dC1hbGlnbjogbGVmdDtcXG59XFxuLnhidWktdGFibGVwb3BwZXIgLlxcXCJ4YnVpLVxcXCJwb3B0aXAtYm9keSB7XFxuICBwYWRkaW5nOiAwO1xcbn1cXG4uZmxleC13cnAge1xcbiAgZGlzcGxheTogYm94O1xcbiAgZGlzcGxheTogLXdlYmtpdC1ib3g7XFxuICBkaXNwbGF5OiAtd2Via2l0LWZsZXg7XFxuICBkaXNwbGF5OiAtbW96LWJveDtcXG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcbiAgZGlzcGxheTogZmxleDtcXG4gIC1wcmVmaXgtYm94LWZsZXg6IDE7XFxuICAtd2Via2l0LWJveC1mbGV4OiAxO1xcbiAgLXdlYmtpdC1mbGV4OiAxO1xcbiAgLW1vei1ib3gtZmxleDogMTtcXG4gIC1tcy1mbGV4OiAxO1xcbiAgZmxleDogMTtcXG4gIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxufVxcbi5mbGV4LXdycC1jbnQge1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxufVxcbi54YnVpLWxvYWRpbmcge1xcbiAgcG9zaXRpb246IGZpeGVkO1xcbiAgdG9wOiAwO1xcbiAgbGVmdDogMDtcXG4gIHJpZ2h0OiAwO1xcbiAgYm90dG9tOiAwO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuOCk7XFxuICB6LWluZGV4OiA5OTk7XFxufVxcbi5maXhlZCB7XFxuICBwb3NpdGlvbjogZml4ZWQ7XFxufVxcbi5yZWxhdGl2ZSB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmUhaW1wb3J0YW50O1xcbn1cXG4ueGJ1aS1sb2FkaW5nLXdycCB7XFxuICBtaW4td2lkdGg6IDI0MHB4O1xcbiAgbWluLWhlaWdodDogNjBweDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBwYWRkaW5nOiAyMHB4IDA7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDUwJTtcXG4gIGxlZnQ6IDUwJTtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG4gIGJvcmRlci1yYWRpdXM6IDEwcHg7XFxuICBib3gtc2hhZG93OiAxcHggMCA1cHggcmdiYSgwLCAwLCAwLCAwLjMpO1xcbn1cXG4ueGJ1aS1sb2FkaW5nLXR4dCB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBwYWRkaW5nLWxlZnQ6IDVweDtcXG4gIGZvbnQtc2l6ZTogMTRweDtcXG4gIGNvbG9yOiAjNzM3MzczO1xcbn1cXG4ueGJ1aS1sb2FkaW5nLXJvdGF0ZSB7XFxuICBhbmltYXRpb246IHJvdGF0ZSAxLjVzIGxpbmVhciBpbmZpbml0ZTtcXG59XFxuQC13ZWJraXQta2V5ZnJhbWVzIHJvdGF0ZSB7XFxuICBmcm9tIHtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcXG4gIH1cXG4gIHRvIHtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpO1xcbiAgfVxcbn1cXG5Aa2V5ZnJhbWVzIHJvdGF0ZSB7XFxuICBmcm9tIHtcXG4gICAgdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7XFxuICB9XFxuICB0byB7XFxuICAgIHRyYW5zZm9ybTogcm90YXRlKDM2MGRlZyk7XFxuICB9XFxufVxcbi54YnVpLXJhZGlvLWZvY3VzIHtcXG4gIHotaW5kZXg6IDE7XFxufVxcbi54YnVpLXJhZGlvLWdyb3VwIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIGZvbnQtc2l6ZTogMTRweDtcXG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XFxufVxcbi54YnVpLXJhZGlvLWdyb3VwLXZlcnRpY2FsIC54YnVpLXJhZGlvLXdyYXBwZXIge1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBoZWlnaHQ6IDMwcHg7XFxuICBsaW5lLWhlaWdodDogMzBweDtcXG59XFxuLnhidWktcmFkaW8td3JhcHBlciB7XFxuICBmb250LXNpemU6IDE0cHg7XFxuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcXG4gIG1hcmdpbi1yaWdodDogOHB4O1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG4ueGJ1aS1yYWRpby13cmFwcGVyLWRpc2FibGVkIHtcXG4gIGN1cnNvcjogXFxcIm5vdC1hbGxvd2VkXFxcIjtcXG59XFxuLnhidWktcmFkaW8ge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgbWFyZ2luLXJpZ2h0OiA0cHg7XFxuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgbGluZS1oZWlnaHQ6IDE7XFxuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG4ueGJ1aS1yYWRpbzpob3ZlciAueGJ1aS1yYWRpby1pbm5lciB7XFxuICBib3JkZXItY29sb3I6ICNiY2JjYmM7XFxufVxcbi54YnVpLXJhZGlvLWlubmVyIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHdpZHRoOiAxNHB4O1xcbiAgaGVpZ2h0OiAxNHB4O1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgdG9wOiAwO1xcbiAgbGVmdDogMDtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XFxuICBib3JkZXI6IDFweCBzb2xpZCAjY2NjY2NjO1xcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xcbiAgdHJhbnNpdGlvbjogYWxsIDAuMnMgZWFzZS1pbi1vdXQ7XFxufVxcbi54YnVpLXJhZGlvLWlubmVyOmFmdGVyIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHdpZHRoOiA4cHg7XFxuICBoZWlnaHQ6IDhweDtcXG4gIGxlZnQ6IDNweDtcXG4gIHRvcDogM3B4O1xcbiAgYm9yZGVyLXJhZGl1czogNnB4O1xcbiAgZGlzcGxheTogdGFibGU7XFxuICBib3JkZXItdG9wOiAwO1xcbiAgYm9yZGVyLWxlZnQ6IDA7XFxuICBjb250ZW50OiBcXFwiIFxcXCI7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xcbiAgb3BhY2l0eTogMDtcXG4gIHRyYW5zaXRpb246IGFsbCAwLjJzIGVhc2UtaW4tb3V0O1xcbiAgdHJhbnNmb3JtOiBzY2FsZSgwKTtcXG59XFxuLnhidWktcmFkaW8tbGFyZ2Uge1xcbiAgZm9udC1zaXplOiAxOHB4O1xcbn1cXG4ueGJ1aS1yYWRpby1sYXJnZSAueGJ1aS1yYWRpby1pbm5lciB7XFxuICB3aWR0aDogMTZweDtcXG4gIGhlaWdodDogMTZweDtcXG59XFxuLnhidWktcmFkaW8tbGFyZ2UgLnhidWktcmFkaW8taW5uZXI6YWZ0ZXIge1xcbiAgd2lkdGg6IDEwcHg7XFxuICBoZWlnaHQ6IDEwcHg7XFxufVxcbi54YnVpLXJhZGlvLWxhcmdlLnhidWktcmFkaW8td3JhcHBlcixcXG4ueGJ1aS1yYWRpby1sYXJnZSAueGJ1aS1yYWRpby13cmFwcGVyIHtcXG4gIGZvbnQtc2l6ZTogMThweDtcXG59XFxuLnhidWktcmFkaW8tc21hbGwgLnhidWktcmFkaW8taW5uZXIge1xcbiAgd2lkdGg6IDEycHg7XFxuICBoZWlnaHQ6IDEycHg7XFxufVxcbi54YnVpLXJhZGlvLXNtYWxsIC54YnVpLXJhZGlvLWlubmVyOmFmdGVyIHtcXG4gIHdpZHRoOiA2cHg7XFxuICBoZWlnaHQ6IDZweDtcXG59XFxuLnhidWktcmFkaW8taW5wdXQge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgdG9wOiAwO1xcbiAgYm90dG9tOiAwO1xcbiAgbGVmdDogMDtcXG4gIHJpZ2h0OiAwO1xcbiAgei1pbmRleDogMTtcXG4gIG9wYWNpdHk6IDA7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcbi54YnVpLXJhZGlvLWNoZWNrZWQgLnhidWktcmFkaW8taW5uZXIge1xcbiAgYm9yZGVyLWNvbG9yOiAjMTg5MGZmO1xcbiAgYmFja2dyb3VuZDogIzE4OTBmZjtcXG59XFxuLnhidWktcmFkaW8tY2hlY2tlZCAueGJ1aS1yYWRpby1pbm5lcjphZnRlciB7XFxuICBvcGFjaXR5OiAxO1xcbiAgdHJhbnNmb3JtOiBzY2FsZSgxKTtcXG4gIHRyYW5zaXRpb246IGFsbCAwLjJzIGVhc2UtaW4tb3V0O1xcbn1cXG4ueGJ1aS1yYWRpby1jaGVja2VkOmhvdmVyIC54YnVpLXJhZGlvLWlubmVyIHtcXG4gIGJvcmRlci1jb2xvcjogIzE4OTBmZjtcXG59XFxuLnhidWktcmFkaW8tZGlzYWJsZWQge1xcbiAgY3Vyc29yOiBcXFwibm90LWFsbG93ZWRcXFwiO1xcbn1cXG4ueGJ1aS1yYWRpby1kaXNhYmxlZCAueGJ1aS1yYWRpby1pbnB1dCB7XFxuICBjdXJzb3I6IFxcXCJub3QtYWxsb3dlZFxcXCI7XFxufVxcbi54YnVpLXJhZGlvLWRpc2FibGVkOmhvdmVyIC54YnVpLXJhZGlvLWlubmVyIHtcXG4gIGJvcmRlci1jb2xvcjogI2NjY2NjYztcXG59XFxuLnhidWktcmFkaW8tZGlzYWJsZWQgLnhidWktcmFkaW8taW5uZXIge1xcbiAgYm9yZGVyLWNvbG9yOiAjY2NjY2NjO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2U1ZTVlNTtcXG59XFxuLnhidWktcmFkaW8tZGlzYWJsZWQgLnhidWktcmFkaW8taW5uZXI6YWZ0ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG59XFxuLnhidWktcmFkaW8tZGlzYWJsZWQgLnhidWktcmFkaW8tZGlzYWJsZWQgKyBzcGFuIHtcXG4gIGNvbG9yOiAjY2NjO1xcbn1cXG5zcGFuLnhidWktcmFkaW8gKyAqIHtcXG4gIG1hcmdpbi1sZWZ0OiAycHg7XFxuICBtYXJnaW4tcmlnaHQ6IDJweDtcXG59XFxuLnhidWktcmFkaW8tZ3JvdXAtYnV0dG9uIHtcXG4gIGZvbnQtc2l6ZTogMDtcXG4gIC13ZWJraXQtdGV4dC1zaXplLWFkanVzdDogbm9uZTtcXG59XFxuLnhidWktcmFkaW8tZ3JvdXAtYnV0dG9uIC54YnVpLXJhZGlvIHtcXG4gIHdpZHRoOiAwO1xcbiAgbWFyZ2luLXJpZ2h0OiAwO1xcbn1cXG4ueGJ1aS1yYWRpby1ncm91cC1idXR0b24gLnhidWktcmFkaW8td3JhcHBlciB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBoZWlnaHQ6IDMycHg7XFxuICBsaW5lLWhlaWdodDogMzBweDtcXG4gIG1hcmdpbjogMDtcXG4gIHBhZGRpbmc6IDAgMTVweDtcXG4gIGZvbnQtc2l6ZTogMTRweDtcXG4gIGNvbG9yOiAjNzM3MzczO1xcbiAgdHJhbnNpdGlvbjogYWxsIDAuMnMgZWFzZS1pbi1vdXQ7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBib3JkZXI6IDFweCBzb2xpZCAjY2NjY2NjO1xcbiAgYm9yZGVyLWxlZnQ6IDA7XFxuICBiYWNrZ3JvdW5kOiAjZmZmO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbn1cXG4ueGJ1aS1yYWRpby1ncm91cC1idXR0b24gLnhidWktcmFkaW8td3JhcHBlciA+IHNwYW4ge1xcbiAgbWFyZ2luLWxlZnQ6IDA7XFxufVxcbi54YnVpLXJhZGlvLWdyb3VwLWJ1dHRvbiAueGJ1aS1yYWRpby13cmFwcGVyOmJlZm9yZSxcXG4ueGJ1aS1yYWRpby1ncm91cC1idXR0b24gLnhidWktcmFkaW8td3JhcHBlcjphZnRlciB7XFxuICBjb250ZW50OiBcXFwiXFxcIjtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgd2lkdGg6IDFweDtcXG4gIGhlaWdodDogMTAwJTtcXG4gIGxlZnQ6IC0xcHg7XFxuICB0b3A6IDA7XFxuICBiYWNrZ3JvdW5kOiAjY2NjY2NjO1xcbiAgdHJhbnNpdGlvbjogYWxsIDAuMnMgZWFzZS1pbi1vdXQ7XFxufVxcbi54YnVpLXJhZGlvLWdyb3VwLWJ1dHRvbiAueGJ1aS1yYWRpby13cmFwcGVyOmFmdGVyIHtcXG4gIGhlaWdodDogMzZweDtcXG4gIGxlZnQ6IC0xcHg7XFxuICB0b3A6IC0zcHg7XFxuICBiYWNrZ3JvdW5kOiByZ2JhKDI0LCAxNDQsIDI1NSwgMC4yKTtcXG4gIG9wYWNpdHk6IDA7XFxufVxcbi54YnVpLXJhZGlvLWdyb3VwLWJ1dHRvbiAueGJ1aS1yYWRpby13cmFwcGVyOmZpcnN0LWNoaWxkIHtcXG4gIGJvcmRlci1yYWRpdXM6IDRweCAwIDAgNHB4O1xcbiAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCAjY2NjY2NjO1xcbn1cXG4ueGJ1aS1yYWRpby1ncm91cC1idXR0b24gLnhidWktcmFkaW8td3JhcHBlcjpmaXJzdC1jaGlsZDpiZWZvcmUsXFxuLnhidWktcmFkaW8tZ3JvdXAtYnV0dG9uIC54YnVpLXJhZGlvLXdyYXBwZXI6Zmlyc3QtY2hpbGQ6YWZ0ZXIge1xcbiAgZGlzcGxheTogbm9uZTtcXG59XFxuLnhidWktcmFkaW8tZ3JvdXAtYnV0dG9uIC54YnVpLXJhZGlvLXdyYXBwZXI6bGFzdC1jaGlsZCB7XFxuICBib3JkZXItcmFkaXVzOiAwIDRweCA0cHggMDtcXG59XFxuLnhidWktcmFkaW8tZ3JvdXAtYnV0dG9uIC54YnVpLXJhZGlvLXdyYXBwZXI6Zmlyc3QtY2hpbGQ6bGFzdC1jaGlsZCB7XFxuICBib3JkZXItcmFkaXVzOiA0cHg7XFxufVxcbi54YnVpLXJhZGlvLWdyb3VwLWJ1dHRvbiAueGJ1aS1yYWRpby13cmFwcGVyOmhvdmVyIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGNvbG9yOiAjMTg5MGZmO1xcbn1cXG4ueGJ1aS1yYWRpby1ncm91cC1idXR0b24gLnhidWktcmFkaW8td3JhcHBlcjpob3ZlciAueGJ1aS1yYWRpbyB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBibGFjaztcXG59XFxuLnhidWktcmFkaW8tZ3JvdXAtYnV0dG9uIC54YnVpLXJhZGlvLXdyYXBwZXIgLnhidWktcmFkaW8taW5uZXIsXFxuLnhidWktcmFkaW8tZ3JvdXAtYnV0dG9uIC54YnVpLXJhZGlvLXdyYXBwZXIgaW5wdXQge1xcbiAgb3BhY2l0eTogMDtcXG4gIHdpZHRoOiAwO1xcbiAgaGVpZ2h0OiAwO1xcbn1cXG4ueGJ1aS1yYWRpby1ncm91cC1idXR0b24gLnhidWktcmFkaW8td3JhcHBlci1jaGVja2VkIHtcXG4gIGJhY2tncm91bmQ6ICMxODkwZmY7XFxuICBib3JkZXItY29sb3I6ICMxODkwZmY7XFxuICBjb2xvcjogI2ZmZjtcXG4gIHotaW5kZXg6IDE7XFxufVxcbi54YnVpLXJhZGlvLWdyb3VwLWJ1dHRvbiAueGJ1aS1yYWRpby13cmFwcGVyLWNoZWNrZWQ6YmVmb3JlIHtcXG4gIGJhY2tncm91bmQ6ICMxODkwZmY7XFxuICBvcGFjaXR5OiAwLjE7XFxufVxcbi54YnVpLXJhZGlvLWdyb3VwLWJ1dHRvbiAueGJ1aS1yYWRpby13cmFwcGVyLWNoZWNrZWQ6Zmlyc3QtY2hpbGQge1xcbiAgYm9yZGVyLWNvbG9yOiAjMTg5MGZmO1xcbn1cXG4ueGJ1aS1yYWRpby1ncm91cC1idXR0b24gLnhidWktcmFkaW8td3JhcHBlci1jaGVja2VkOmhvdmVyIHtcXG4gIGJvcmRlci1jb2xvcjogIzQ2YTZmZjtcXG4gIGNvbG9yOiAjNDZhNmZmO1xcbn1cXG4ueGJ1aS1yYWRpby1ncm91cC1idXR0b24gLnhidWktcmFkaW8td3JhcHBlci1jaGVja2VkOmFjdGl2ZSB7XFxuICBib3JkZXItY29sb3I6ICMxNzg5ZjI7XFxuICBjb2xvcjogIzE3ODlmMjtcXG59XFxuLnhidWktcmFkaW8tZ3JvdXAtYnV0dG9uIC54YnVpLXJhZGlvLXdyYXBwZXItZGlzYWJsZWQge1xcbiAgYm9yZGVyLWNvbG9yOiAjY2NjY2NjO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2NjY2NjYztcXG4gIGN1cnNvcjogXFxcIm5vdC1hbGxvd2VkXFxcIjtcXG4gIGNvbG9yOiAjY2NjO1xcbn1cXG4ueGJ1aS1yYWRpby1ncm91cC1idXR0b24gLnhidWktcmFkaW8td3JhcHBlci1kaXNhYmxlZDpmaXJzdC1jaGlsZCxcXG4ueGJ1aS1yYWRpby1ncm91cC1idXR0b24gLnhidWktcmFkaW8td3JhcHBlci1kaXNhYmxlZDpob3ZlciB7XFxuICBib3JkZXItY29sb3I6ICNjY2NjY2M7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjY2NjY2NjO1xcbiAgY29sb3I6ICNjY2M7XFxufVxcbi54YnVpLXJhZGlvLWdyb3VwLWJ1dHRvbiAueGJ1aS1yYWRpby13cmFwcGVyLWRpc2FibGVkOmZpcnN0LWNoaWxkIHtcXG4gIGJvcmRlci1sZWZ0LWNvbG9yOiAjY2NjY2NjO1xcbn1cXG4ueGJ1aS1yYWRpby1ncm91cC1idXR0b24gLnhidWktcmFkaW8td3JhcHBlci1kaXNhYmxlZC54YnVpLXJhZGlvLXdyYXBwZXItY2hlY2tlZCB7XFxuICBjb2xvcjogI2ZmZjtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNjY2NjY2M7XFxuICBib3JkZXItY29sb3I6ICNjY2NjY2M7XFxufVxcbi54YnVpLXJhZGlvLWdyb3VwLWJ1dHRvbi54YnVpLXJhZGlvLWdyb3VwLWxhcmdlIC54YnVpLXJhZGlvLXdyYXBwZXIge1xcbiAgaGVpZ2h0OiAzNnB4O1xcbiAgbGluZS1oZWlnaHQ6IDM0cHg7XFxuICBmb250LXNpemU6IDE4cHg7XFxufVxcbi54YnVpLXJhZGlvLWdyb3VwLWJ1dHRvbi54YnVpLXJhZGlvLWdyb3VwLWxhcmdlIC54YnVpLXJhZGlvLXdyYXBwZXI6YWZ0ZXIge1xcbiAgaGVpZ2h0OiA0MHB4O1xcbn1cXG4ueGJ1aS1yYWRpby1ncm91cC1idXR0b24ueGJ1aS1yYWRpby1ncm91cC1zbWFsbCAueGJ1aS1yYWRpby13cmFwcGVyIHtcXG4gIGhlaWdodDogMjRweDtcXG4gIGxpbmUtaGVpZ2h0OiAyMnB4O1xcbiAgcGFkZGluZzogMCAxMnB4O1xcbiAgZm9udC1zaXplOiAyNHB4O1xcbn1cXG4ueGJ1aS1yYWRpby1ncm91cC1idXR0b24ueGJ1aS1yYWRpby1ncm91cC1zbWFsbCAueGJ1aS1yYWRpby13cmFwcGVyOmFmdGVyIHtcXG4gIGhlaWdodDogMjhweDtcXG59XFxuLnhidWktcmFkaW8tZ3JvdXAtYnV0dG9uLnhidWktcmFkaW8tZ3JvdXAtc21hbGwgLnhidWktcmFkaW8td3JhcHBlcjpmaXJzdC1jaGlsZCB7XFxuICBib3JkZXItcmFkaXVzOiAzcHggMCAwIDNweDtcXG59XFxuLnhidWktcmFkaW8tZ3JvdXAtYnV0dG9uLnhidWktcmFkaW8tZ3JvdXAtc21hbGwgLnhidWktcmFkaW8td3JhcHBlcjpsYXN0LWNoaWxkIHtcXG4gIGJvcmRlci1yYWRpdXM6IDAgM3B4IDNweCAwO1xcbn1cXG4ueGJ1aS1yYWRpby1ib3JkZXIge1xcbiAgYmFja2dyb3VuZDogI2ZmZjtcXG4gIGJvcmRlci1yYWRpdXM6IDRweDtcXG4gIGJvcmRlcjogMXB4IHNvbGlkICNjY2NjY2M7XFxuICBwYWRkaW5nOiA1cHggMTBweDtcXG59XFxuLnhidWktcmFkaW8tYm9yZGVyLnhidWktcmFkaW8td3JhcHBlci1jaGVja2VkIHtcXG4gIGJhY2tncm91bmQ6ICNlZmYzZmU7XFxuICBib3JkZXItY29sb3I6ICMxODkwZmY7XFxuICBjb2xvcjogIzMzMzMzMztcXG59XFxuLnhidWktc2VhcmNoLWJ0bi1kaXYge1xcbiAgd2lkdGg6IDI2MHB4O1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbn1cXG4ueGJ1aS1zZWFyY2gtYnRuLWlucHV0IHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XFxuICBiYWNrZ3JvdW5kLWltYWdlOiBub25lO1xcbiAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogM3B4O1xcbiAgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogM3B4O1xcbiAgYm9yZGVyOiAxcHggc29saWQgI2NjY2NjYztcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICBjb2xvcjogIzMzMzMzMztcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHdpZHRoOiBjYWxjKDEwMCUgLSA0NnB4KTtcXG4gIGhlaWdodDogMTAwJTtcXG4gIGZvbnQtc2l6ZTogMTRweDtcXG4gIHZlcnRpY2FsLWFsaWduOiB0b3A7XFxuICBib3JkZXItcmlnaHQ6IG5vbmU7XFxuICBvdXRsaW5lLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGZsb2F0OiBsZWZ0O1xcbn1cXG4ueGJ1aS1zZWFyY2gtYnRuLWRpdi1sYXJnZSB7XFxuICBoZWlnaHQ6IDQwcHg7XFxufVxcbi54YnVpLXNlYXJjaC1idG4tZGl2LWxhcmdlIC54YnVpLXNlYXJjaC1idG4taW5wdXQge1xcbiAgcGFkZGluZzogMCAxNXB4O1xcbn1cXG4ueGJ1aS1zZWFyY2gtYnRuLWRpdi1tZWRpdW0ge1xcbiAgaGVpZ2h0OiAzMnB4O1xcbn1cXG4ueGJ1aS1zZWFyY2gtYnRuLWRpdi1tZWRpdW0gLnhidWktc2VhcmNoLWJ0bi1pbnB1dCB7XFxuICBwYWRkaW5nOiAwIDEycHg7XFxufVxcbi54YnVpLXNlYXJjaC1idG4tZGl2LXNtYWxsIHtcXG4gIGhlaWdodDogMjhweDtcXG59XFxuLnhidWktc2VhcmNoLWJ0bi1kaXYtc21hbGwgLnhidWktc2VhcmNoLWJ0bi1pbnB1dCB7XFxuICBwYWRkaW5nOiAwIDEwcHg7XFxufVxcbi54YnVpLXNlYXJjaC1idG4taWNvbi1kaXYge1xcbiAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDNweDtcXG4gIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiAzcHg7XFxuICB3aWR0aDogNDZweDtcXG4gIGhlaWdodDogMTAwJTtcXG4gIHBhZGRpbmc6IDAgMTJweDtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICB2ZXJ0aWNhbC1hbGlnbjogdG9wO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgZmxvYXQ6IGxlZnQ7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBhbGlnbi1pdGVtczogQ2VudGVyO1xcbn1cXG4ueGJ1aS1zZWFyY2gtYnRuLWljb24tc2hvdyB7XFxuICBiYWNrZ3JvdW5kOiAjNWI4YWY5O1xcbiAgY29sb3I6ICNmZmY7XFxuICBib3JkZXI6IDFweCBzb2xpZCAjNWI4YWY5O1xcbn1cXG4ueGJ1aS1zZWFyY2gtYnRuLWljb24taGlkZGVuIHtcXG4gIGJvcmRlcjogMXB4IHNvbGlkICNjY2NjY2M7XFxuICBib3JkZXItbGVmdDogbm9uZTtcXG59XFxuXCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBlc2NhcGUodXJsKSB7XG4gICAgaWYgKHR5cGVvZiB1cmwgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiB1cmxcbiAgICB9XG4gICAgLy8gSWYgdXJsIGlzIGFscmVhZHkgd3JhcHBlZCBpbiBxdW90ZXMsIHJlbW92ZSB0aGVtXG4gICAgaWYgKC9eWydcIl0uKlsnXCJdJC8udGVzdCh1cmwpKSB7XG4gICAgICAgIHVybCA9IHVybC5zbGljZSgxLCAtMSk7XG4gICAgfVxuICAgIC8vIFNob3VsZCB1cmwgYmUgd3JhcHBlZD9cbiAgICAvLyBTZWUgaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy12YWx1ZXMtMy8jdXJsc1xuICAgIGlmICgvW1wiJygpIFxcdFxcbl0vLnRlc3QodXJsKSkge1xuICAgICAgICByZXR1cm4gJ1wiJyArIHVybC5yZXBsYWNlKC9cIi9nLCAnXFxcXFwiJykucmVwbGFjZSgvXFxuL2csICdcXFxcbicpICsgJ1wiJ1xuICAgIH1cblxuICAgIHJldHVybiB1cmxcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcInN0YXRpYy9pY29tb29uLjA2YjgxMzMudHRmXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwic3RhdGljL2ljb21vb24uNWY4M2MyMy53b2ZmXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwic3RhdGljL2ljb21vb24uMDhmZDhmMy5zdmdcIjsiLCJ2YXIgbWFwID0ge1xuXHRcIi4veGItYnV0dG9uL2luZGV4LnRzXCI6IDk0LFxuXHRcIi4veGItY2hlY2tib3gtZ3JvdXAvaW5kZXgudHNcIjogMTQ3LFxuXHRcIi4veGItY2hlY2tib3gvaW5kZXgudHNcIjogOTYsXG5cdFwiLi94Yi1jb2xvci9pbmRleC50c1wiOiAyMTQsXG5cdFwiLi94Yi1mb3JtLWl0ZW0vaW5kZXgudHNcIjogMjE2LFxuXHRcIi4veGItZm9ybS9pbmRleC50c1wiOiAyNTAsXG5cdFwiLi94Yi1pY29uL2luZGV4LnRzXCI6IDM0LFxuXHRcIi4veGItaW5wdXQtbnVtYmVyL2luZGV4LnRzXCI6IDI1Myxcblx0XCIuL3hiLWxvYWRpbmcvaW5kZXgudHNcIjogMjU1LFxuXHRcIi4veGItbWVzc2FnZS10aXBzL2luZGV4LnRzXCI6IDI1Nyxcblx0XCIuL3hiLXBvcHRpcC9pbmRleC50c1wiOiAxNTgsXG5cdFwiLi94Yi1wb3B1cC13aW5kb3cvaW5kZXgudHNcIjogMjYxLFxuXHRcIi4veGItcmFkaW8tZ3JvdXAvaW5kZXgudHNcIjogMjY0LFxuXHRcIi4veGItcmFkaW8vaW5kZXgudHNcIjogMjY2LFxuXHRcIi4veGItc2VhcmNoLWJ0bi9pbmRleC50c1wiOiAyNjgsXG5cdFwiLi94Yi10YWJsZS9pbmRleC50c1wiOiAyNzAsXG5cdFwiLi94Yi10ZXh0L2luZGV4LnRzXCI6IDM2MSxcblx0XCIuL3hiLXVlZGl0b3IvaW5kZXgudHNcIjogMzYzXG59O1xuXG5cbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0KHJlcSkge1xuXHR2YXIgaWQgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKTtcblx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oaWQpO1xufVxuZnVuY3Rpb24gd2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSkge1xuXHR2YXIgaWQgPSBtYXBbcmVxXTtcblx0aWYoIShpZCArIDEpKSB7IC8vIGNoZWNrIGZvciBudW1iZXIgb3Igc3RyaW5nXG5cdFx0dmFyIGUgPSBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiICsgcmVxICsgXCInXCIpO1xuXHRcdGUuY29kZSA9ICdNT0RVTEVfTk9UX0ZPVU5EJztcblx0XHR0aHJvdyBlO1xuXHR9XG5cdHJldHVybiBpZDtcbn1cbndlYnBhY2tDb250ZXh0LmtleXMgPSBmdW5jdGlvbiB3ZWJwYWNrQ29udGV4dEtleXMoKSB7XG5cdHJldHVybiBPYmplY3Qua2V5cyhtYXApO1xufTtcbndlYnBhY2tDb250ZXh0LnJlc29sdmUgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmU7XG5tb2R1bGUuZXhwb3J0cyA9IHdlYnBhY2tDb250ZXh0O1xud2VicGFja0NvbnRleHQuaWQgPSAyMDY7IiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi94Yi1idXR0b24udnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTI5MWQxNTVjJlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL3hiLWJ1dHRvbi52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9dHMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL3hiLWJ1dHRvbi52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9dHMmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBudWxsLFxuICBudWxsXG4gIFxuKVxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkge1xuICB2YXIgYXBpID0gcmVxdWlyZShcIkQ6XFxcXFhiLUJhc2ljLUNvbXBvbmVudHNcXFxcbm9kZV9tb2R1bGVzXFxcXHZ1ZS1ob3QtcmVsb2FkLWFwaVxcXFxkaXN0XFxcXGluZGV4LmpzXCIpXG4gIGFwaS5pbnN0YWxsKHJlcXVpcmUoJ3Z1ZScpKVxuICBpZiAoYXBpLmNvbXBhdGlibGUpIHtcbiAgICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gICAgaWYgKCFtb2R1bGUuaG90LmRhdGEpIHtcbiAgICAgIGFwaS5jcmVhdGVSZWNvcmQoJzI5MWQxNTVjJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZWxvYWQoJzI5MWQxNTVjJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfVxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi94Yi1idXR0b24udnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTI5MWQxNTVjJlwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBhcGkucmVyZW5kZXIoJzI5MWQxNTVjJywge1xuICAgICAgICByZW5kZXI6IHJlbmRlcixcbiAgICAgICAgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnNcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxufVxuY29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJwYWNrYWdlcy94Yi1idXR0b24vc3JjL3hiLWJ1dHRvbi52dWVcIlxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCJpbXBvcnQgZGVmYXVsdExhbmcgZnJvbSBcIi4vbGFuZy96aC1DTlwiO1xyXG5pbXBvcnQgVnVlIGZyb20gXCJ2dWVcIjtcclxuaW1wb3J0IGRlZXBtZXJnZSBmcm9tIFwiZGVlcG1lcmdlXCI7XHJcbmltcG9ydCBGb3JtYXQgZnJvbSBcIi4vZm9ybWF0XCI7XHJcblxyXG5jb25zdCBmb3JtYXQgPSBGb3JtYXQoKTtcclxubGV0IGxhbmcgPSBkZWZhdWx0TGFuZztcclxubGV0IG1lcmdlZCA9IGZhbHNlO1xyXG5cclxubGV0IGkxOG5IYW5kbGVyID0gZnVuY3Rpb24odGhpczogVnVlKTogYW55IHtcclxuICAvLyDmn6XnnItWdWXnmoTljp/lnovkuIrmmK/lkKbmnIkkdO+8jOacieivtOaYjumHh+eUqOS6hmkxOG7nmoTkuJzopb9cclxuICBjb25zdCB2dWVpMThuID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKFZ1ZSkuJHQ7XHJcbiAgaWYgKHR5cGVvZiB2dWVpMThuID09PSBcImZ1bmN0aW9uXCIgJiYgISFWdWUubG9jYWxlKSB7XHJcbiAgICBpZiAoIW1lcmdlZCkge1xyXG4gICAgICBtZXJnZWQgPSB0cnVlO1xyXG4gICAgICBWdWUubG9jYWxlKFZ1ZS5jb25maWcubGFuZywgZGVlcG1lcmdlKGxhbmcsIFZ1ZS5sb2NhbGUoVnVlLmNvbmZpZy5sYW5nKSB8fCB7fSwgeyBjbG9uZTogdHJ1ZSB9KSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdnVlaTE4bi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG4gIH1cclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCB0ID0gZnVuY3Rpb24odGhpcywgcGF0aCwgb3B0aW9ucyk6IHN0cmluZyB7XHJcbiAgbGV0IHZhbHVlID0gaTE4bkhhbmRsZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuICBpZiAodmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgcmV0dXJuIHZhbHVlO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgYXJyYXkgPSBwYXRoLnNwbGl0KFwiLlwiKTtcclxuICBsZXQgY3VycmVudCA9IGxhbmc7XHJcblxyXG4gIGZvciAobGV0IGkgPSAwLCBqID0gYXJyYXkubGVuZ3RoOyBpIDwgajsgaSsrKSB7XHJcbiAgICBjb25zdCBwcm9wZXJ0eSA9IGFycmF5W2ldO1xyXG4gICAgdmFsdWUgPSBjdXJyZW50W3Byb3BlcnR5XTtcclxuICAgIGlmIChpID09PSBqIC0gMSkge1xyXG4gICAgICByZXR1cm4gZm9ybWF0KHZhbHVlLCBvcHRpb25zKTtcclxuICAgIH1cclxuICAgIGlmICghdmFsdWUpIHtcclxuICAgICAgcmV0dXJuIFwiXCI7XHJcbiAgICB9XHJcbiAgICBjdXJyZW50ID0gdmFsdWU7XHJcbiAgfVxyXG4gIHJldHVybiBcIlwiO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IHVzZSA9IGZ1bmN0aW9uKGwpIHtcclxuICBsYW5nID0gbCB8fCBsYW5nO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGkxOG4gPSBmdW5jdGlvbihmbikge1xyXG4gIGkxOG5IYW5kbGVyID0gZm4gfHwgaTE4bkhhbmRsZXI7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7IHVzZSwgdCwgaTE4biB9O1xyXG4iLCJleHBvcnQgZGVmYXVsdCB7XHJcbiAgeGI6IHtcclxuICAgIHBvcHVwV2lkb3c6IHtcclxuICAgICAgb2tUZXh0OiBcIuehruWumlwiLFxyXG4gICAgICBjYW5jZWxUZXh0OiBcIuWPlua2iFwiXHJcbiAgICB9LFxyXG4gICAgbG9hZGluZzp7XHJcbiAgICAgIGxvYWRUeHQ6XCLpobXpnaLliqDovb3kuK3igKZcIixcclxuICAgIH1cclxuICB9LFxyXG59O1xyXG4iLCJ2YXIgaXNNZXJnZWFibGVPYmplY3QgPSBmdW5jdGlvbiBpc01lcmdlYWJsZU9iamVjdCh2YWx1ZSkge1xuXHRyZXR1cm4gaXNOb25OdWxsT2JqZWN0KHZhbHVlKVxuXHRcdCYmICFpc1NwZWNpYWwodmFsdWUpXG59O1xuXG5mdW5jdGlvbiBpc05vbk51bGxPYmplY3QodmFsdWUpIHtcblx0cmV0dXJuICEhdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0J1xufVxuXG5mdW5jdGlvbiBpc1NwZWNpYWwodmFsdWUpIHtcblx0dmFyIHN0cmluZ1ZhbHVlID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKTtcblxuXHRyZXR1cm4gc3RyaW5nVmFsdWUgPT09ICdbb2JqZWN0IFJlZ0V4cF0nXG5cdFx0fHwgc3RyaW5nVmFsdWUgPT09ICdbb2JqZWN0IERhdGVdJ1xuXHRcdHx8IGlzUmVhY3RFbGVtZW50KHZhbHVlKVxufVxuXG4vLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2Jsb2IvYjVhYzk2M2ZiNzkxZDEyOThlN2YzOTYyMzYzODNiYzk1NWY5MTZjMS9zcmMvaXNvbW9ycGhpYy9jbGFzc2ljL2VsZW1lbnQvUmVhY3RFbGVtZW50LmpzI0wyMS1MMjVcbnZhciBjYW5Vc2VTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC5mb3I7XG52YXIgUkVBQ1RfRUxFTUVOVF9UWVBFID0gY2FuVXNlU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3QuZWxlbWVudCcpIDogMHhlYWM3O1xuXG5mdW5jdGlvbiBpc1JlYWN0RWxlbWVudCh2YWx1ZSkge1xuXHRyZXR1cm4gdmFsdWUuJCR0eXBlb2YgPT09IFJFQUNUX0VMRU1FTlRfVFlQRVxufVxuXG5mdW5jdGlvbiBlbXB0eVRhcmdldCh2YWwpIHtcblx0cmV0dXJuIEFycmF5LmlzQXJyYXkodmFsKSA/IFtdIDoge31cbn1cblxuZnVuY3Rpb24gY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQodmFsdWUsIG9wdGlvbnMpIHtcblx0cmV0dXJuIChvcHRpb25zLmNsb25lICE9PSBmYWxzZSAmJiBvcHRpb25zLmlzTWVyZ2VhYmxlT2JqZWN0KHZhbHVlKSlcblx0XHQ/IGRlZXBtZXJnZShlbXB0eVRhcmdldCh2YWx1ZSksIHZhbHVlLCBvcHRpb25zKVxuXHRcdDogdmFsdWVcbn1cblxuZnVuY3Rpb24gZGVmYXVsdEFycmF5TWVyZ2UodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMpIHtcblx0cmV0dXJuIHRhcmdldC5jb25jYXQoc291cmNlKS5tYXAoZnVuY3Rpb24oZWxlbWVudCkge1xuXHRcdHJldHVybiBjbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZChlbGVtZW50LCBvcHRpb25zKVxuXHR9KVxufVxuXG5mdW5jdGlvbiBtZXJnZU9iamVjdCh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucykge1xuXHR2YXIgZGVzdGluYXRpb24gPSB7fTtcblx0aWYgKG9wdGlvbnMuaXNNZXJnZWFibGVPYmplY3QodGFyZ2V0KSkge1xuXHRcdE9iamVjdC5rZXlzKHRhcmdldCkuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcblx0XHRcdGRlc3RpbmF0aW9uW2tleV0gPSBjbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZCh0YXJnZXRba2V5XSwgb3B0aW9ucyk7XG5cdFx0fSk7XG5cdH1cblx0T2JqZWN0LmtleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuXHRcdGlmICghb3B0aW9ucy5pc01lcmdlYWJsZU9iamVjdChzb3VyY2Vba2V5XSkgfHwgIXRhcmdldFtrZXldKSB7XG5cdFx0XHRkZXN0aW5hdGlvbltrZXldID0gY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQoc291cmNlW2tleV0sIG9wdGlvbnMpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkZXN0aW5hdGlvbltrZXldID0gZGVlcG1lcmdlKHRhcmdldFtrZXldLCBzb3VyY2Vba2V5XSwgb3B0aW9ucyk7XG5cdFx0fVxuXHR9KTtcblx0cmV0dXJuIGRlc3RpbmF0aW9uXG59XG5cbmZ1bmN0aW9uIGRlZXBtZXJnZSh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucykge1xuXHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblx0b3B0aW9ucy5hcnJheU1lcmdlID0gb3B0aW9ucy5hcnJheU1lcmdlIHx8IGRlZmF1bHRBcnJheU1lcmdlO1xuXHRvcHRpb25zLmlzTWVyZ2VhYmxlT2JqZWN0ID0gb3B0aW9ucy5pc01lcmdlYWJsZU9iamVjdCB8fCBpc01lcmdlYWJsZU9iamVjdDtcblxuXHR2YXIgc291cmNlSXNBcnJheSA9IEFycmF5LmlzQXJyYXkoc291cmNlKTtcblx0dmFyIHRhcmdldElzQXJyYXkgPSBBcnJheS5pc0FycmF5KHRhcmdldCk7XG5cdHZhciBzb3VyY2VBbmRUYXJnZXRUeXBlc01hdGNoID0gc291cmNlSXNBcnJheSA9PT0gdGFyZ2V0SXNBcnJheTtcblxuXHRpZiAoIXNvdXJjZUFuZFRhcmdldFR5cGVzTWF0Y2gpIHtcblx0XHRyZXR1cm4gY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQoc291cmNlLCBvcHRpb25zKVxuXHR9IGVsc2UgaWYgKHNvdXJjZUlzQXJyYXkpIHtcblx0XHRyZXR1cm4gb3B0aW9ucy5hcnJheU1lcmdlKHRhcmdldCwgc291cmNlLCBvcHRpb25zKVxuXHR9IGVsc2Uge1xuXHRcdHJldHVybiBtZXJnZU9iamVjdCh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucylcblx0fVxufVxuXG5kZWVwbWVyZ2UuYWxsID0gZnVuY3Rpb24gZGVlcG1lcmdlQWxsKGFycmF5LCBvcHRpb25zKSB7XG5cdGlmICghQXJyYXkuaXNBcnJheShhcnJheSkpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ2ZpcnN0IGFyZ3VtZW50IHNob3VsZCBiZSBhbiBhcnJheScpXG5cdH1cblxuXHRyZXR1cm4gYXJyYXkucmVkdWNlKGZ1bmN0aW9uKHByZXYsIG5leHQpIHtcblx0XHRyZXR1cm4gZGVlcG1lcmdlKHByZXYsIG5leHQsIG9wdGlvbnMpXG5cdH0sIHt9KVxufTtcblxudmFyIGRlZXBtZXJnZV8xID0gZGVlcG1lcmdlO1xuXG5leHBvcnQgZGVmYXVsdCBkZWVwbWVyZ2VfMTtcbiIsImltcG9ydCB7IGhhc093biB9IGZyb20gXCIuLi91dGlscy91dGlsc1wiO1xyXG5cclxuY29uc3QgUkVfTkFSR1MgPSAvKCV8KVxceyhbMC05YS16QS1aX10rKVxcfS9nO1xyXG4vKipcclxuICogIFN0cmluZyBmb3JtYXQgdGVtcGxhdGVcclxuICogIC0gSW5zcGlyZWQ6XHJcbiAqICAgIGh0dHBzOi8vZ2l0aHViLmNvbS9NYXR0LUVzY2gvc3RyaW5nLXRlbXBsYXRlL2luZGV4LmpzXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCAoKSA9PiB7XHJcbiAgLyoqXHJcbiAgICogdGVtcGxhdGVcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcclxuICAgKiBAcGFyYW0ge0FycmF5fSAuLi5hcmdzXHJcbiAgICogQHJldHVybiB7U3RyaW5nfVxyXG4gICAqL1xyXG4gIGZ1bmN0aW9uIHRlbXBsYXRlKHN0cjogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSB8IGFueSkge1xyXG4gICAgaWYgKGFyZ3MubGVuZ3RoID09PSAxICYmIHR5cGVvZiBhcmdzWzBdID09PSBcIm9iamVjdFwiKSB7XHJcbiAgICAgIGFyZ3MgPSBhcmdzWzBdO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICghYXJncyB8fCAhYXJncy5oYXNPd25Qcm9wZXJ0eSkge1xyXG4gICAgICBhcmdzID0ge307XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKFJFX05BUkdTLCAobWF0Y2gsIHByZWZpeCwgaSwgaW5kZXgpID0+IHtcclxuICAgICAgbGV0IHJlc3VsdDtcclxuXHJcbiAgICAgIGlmIChzdHJbaW5kZXggLSAxXSA9PT0gXCJ7XCIgJiYgc3RyW2luZGV4ICsgbWF0Y2gubGVuZ3RoXSA9PT0gXCJ9XCIpIHtcclxuICAgICAgICByZXR1cm4gaTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXN1bHQgPSBoYXNPd24oYXJncywgaSkgPyBhcmdzW2ldIDogbnVsbDtcclxuICAgICAgICBpZiAocmVzdWx0ID09PSBudWxsIHx8IHJlc3VsdCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICByZXR1cm4gXCJcIjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHRlbXBsYXRlO1xyXG59O1xyXG4iLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL3hiLWNoZWNrYm94LWdyb3VwLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0xZmQyYTIzMCZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi94Yi1jaGVja2JveC1ncm91cC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9dHMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL3hiLWNoZWNrYm94LWdyb3VwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz10cyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIG51bGwsXG4gIG51bGxcbiAgXG4pXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIHZhciBhcGkgPSByZXF1aXJlKFwiRDpcXFxcWGItQmFzaWMtQ29tcG9uZW50c1xcXFxub2RlX21vZHVsZXNcXFxcdnVlLWhvdC1yZWxvYWQtYXBpXFxcXGRpc3RcXFxcaW5kZXguanNcIilcbiAgYXBpLmluc3RhbGwocmVxdWlyZSgndnVlJykpXG4gIGlmIChhcGkuY29tcGF0aWJsZSkge1xuICAgIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgICBpZiAoIW1vZHVsZS5ob3QuZGF0YSkge1xuICAgICAgYXBpLmNyZWF0ZVJlY29yZCgnMWZkMmEyMzAnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbG9hZCgnMWZkMmEyMzAnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL3hiLWNoZWNrYm94LWdyb3VwLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0xZmQyYTIzMCZcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgYXBpLnJlcmVuZGVyKCcxZmQyYTIzMCcsIHtcbiAgICAgICAgcmVuZGVyOiByZW5kZXIsXG4gICAgICAgIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn1cbmNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwicGFja2FnZXMveGItY2hlY2tib3gvc3JjL3hiLWNoZWNrYm94LWdyb3VwLnZ1ZVwiXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4veGItY2hlY2tib3gudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPWIyZDU5NTg0JlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL3hiLWNoZWNrYm94LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz10cyZcIlxuZXhwb3J0ICogZnJvbSBcIi4veGItY2hlY2tib3gudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgbnVsbCxcbiAgbnVsbFxuICBcbilcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgdmFyIGFwaSA9IHJlcXVpcmUoXCJEOlxcXFxYYi1CYXNpYy1Db21wb25lbnRzXFxcXG5vZGVfbW9kdWxlc1xcXFx2dWUtaG90LXJlbG9hZC1hcGlcXFxcZGlzdFxcXFxpbmRleC5qc1wiKVxuICBhcGkuaW5zdGFsbChyZXF1aXJlKCd2dWUnKSlcbiAgaWYgKGFwaS5jb21wYXRpYmxlKSB7XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICAgIGlmICghbW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgICBhcGkuY3JlYXRlUmVjb3JkKCdiMmQ1OTU4NCcsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVsb2FkKCdiMmQ1OTU4NCcsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH1cbiAgICBtb2R1bGUuaG90LmFjY2VwdChcIi4veGItY2hlY2tib3gudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPWIyZDU5NTg0JlwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBhcGkucmVyZW5kZXIoJ2IyZDU5NTg0Jywge1xuICAgICAgICByZW5kZXI6IHJlbmRlcixcbiAgICAgICAgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnNcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxufVxuY29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJwYWNrYWdlcy94Yi1jaGVja2JveC9zcmMveGItY2hlY2tib3gudnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwiaW1wb3J0IHsgUGx1Z2luT2JqZWN0IH0gZnJvbSBcInZ1ZVwiO1xyXG5pbXBvcnQgWGJDb2xvciBmcm9tIFwiLi9zcmMveGItY29sb3IudnVlXCI7XHJcbmV4cG9ydCBkZWZhdWx0IFhiQ29sb3I7XHJcblxyXG5leHBvcnQgY29uc3QgeGJDb2xvcjogUGx1Z2luT2JqZWN0PFhiQ29sb3I+ID0ge1xyXG4gIGluc3RhbGw6IChWdWUpID0+IHtcclxuICAgIFZ1ZS5jb21wb25lbnQoXCJYYkNvbG9yXCIsIFhiQ29sb3IpO1xyXG4gIH0sXHJcbn07XHJcbiIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4veGItY29sb3IudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTU0OTYzYWU2JlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL3hiLWNvbG9yLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz10cyZcIlxuZXhwb3J0ICogZnJvbSBcIi4veGItY29sb3IudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgbnVsbCxcbiAgbnVsbFxuICBcbilcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgdmFyIGFwaSA9IHJlcXVpcmUoXCJEOlxcXFxYYi1CYXNpYy1Db21wb25lbnRzXFxcXG5vZGVfbW9kdWxlc1xcXFx2dWUtaG90LXJlbG9hZC1hcGlcXFxcZGlzdFxcXFxpbmRleC5qc1wiKVxuICBhcGkuaW5zdGFsbChyZXF1aXJlKCd2dWUnKSlcbiAgaWYgKGFwaS5jb21wYXRpYmxlKSB7XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICAgIGlmICghbW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgICBhcGkuY3JlYXRlUmVjb3JkKCc1NDk2M2FlNicsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVsb2FkKCc1NDk2M2FlNicsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH1cbiAgICBtb2R1bGUuaG90LmFjY2VwdChcIi4veGItY29sb3IudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTU0OTYzYWU2JlwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBhcGkucmVyZW5kZXIoJzU0OTYzYWU2Jywge1xuICAgICAgICByZW5kZXI6IHJlbmRlcixcbiAgICAgICAgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnNcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxufVxuY29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJwYWNrYWdlcy94Yi1jb2xvci9zcmMveGItY29sb3IudnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwiaW1wb3J0IHsgUGx1Z2luT2JqZWN0IH0gZnJvbSBcInZ1ZVwiO1xyXG5pbXBvcnQgWGJGb3JtSXRlbSBmcm9tIFwiLi9zcmMveGItZm9ybS1pdGVtLnZ1ZVwiO1xyXG5leHBvcnQgZGVmYXVsdCBYYkZvcm1JdGVtO1xyXG5cclxuZXhwb3J0IGNvbnN0IHhiRm9ybUl0ZW06IFBsdWdpbk9iamVjdDxYYkZvcm1JdGVtPiA9IHtcclxuICBpbnN0YWxsOiAoVnVlKSA9PiB7XHJcbiAgICBWdWUuY29tcG9uZW50KFwiWGJGb3JtSXRlbVwiLCBYYkZvcm1JdGVtKTtcclxuICB9LFxyXG59O1xyXG4iLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL3hiLWZvcm0taXRlbS52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9NzVmNmNmMDYmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4veGItZm9ybS1pdGVtLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz10cyZcIlxuZXhwb3J0ICogZnJvbSBcIi4veGItZm9ybS1pdGVtLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz10cyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIG51bGwsXG4gIG51bGxcbiAgXG4pXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIHZhciBhcGkgPSByZXF1aXJlKFwiRDpcXFxcWGItQmFzaWMtQ29tcG9uZW50c1xcXFxub2RlX21vZHVsZXNcXFxcdnVlLWhvdC1yZWxvYWQtYXBpXFxcXGRpc3RcXFxcaW5kZXguanNcIilcbiAgYXBpLmluc3RhbGwocmVxdWlyZSgndnVlJykpXG4gIGlmIChhcGkuY29tcGF0aWJsZSkge1xuICAgIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgICBpZiAoIW1vZHVsZS5ob3QuZGF0YSkge1xuICAgICAgYXBpLmNyZWF0ZVJlY29yZCgnNzVmNmNmMDYnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbG9hZCgnNzVmNmNmMDYnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL3hiLWZvcm0taXRlbS52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9NzVmNmNmMDYmXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGFwaS5yZXJlbmRlcignNzVmNmNmMDYnLCB7XG4gICAgICAgIHJlbmRlcjogcmVuZGVyLFxuICAgICAgICBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZuc1xuICAgICAgfSlcbiAgICB9KVxuICB9XG59XG5jb21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcInBhY2thZ2VzL3hiLWZvcm0taXRlbS9zcmMveGItZm9ybS1pdGVtLnZ1ZVwiXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyIsIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvYXNzaWduXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07IiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnbicpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0LmFzc2lnbjtcbiIsIi8vIDE5LjEuMy4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiwgJ09iamVjdCcsIHsgYXNzaWduOiByZXF1aXJlKCcuL19vYmplY3QtYXNzaWduJykgfSk7XG4iLCIvLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgdGhhdCwgbGVuZ3RoKSB7XG4gIGFGdW5jdGlvbihmbik7XG4gIGlmICh0aGF0ID09PSB1bmRlZmluZWQpIHJldHVybiBmbjtcbiAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbiAoYSkge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSk7XG4gICAgfTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG4gICAgfTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgZnVuY3Rpb24hJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyAxOS4xLjIuMSBPYmplY3QuYXNzaWduKHRhcmdldCwgc291cmNlLCAuLi4pXG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgZ09QUyA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJyk7XG52YXIgcElFID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciAkYXNzaWduID0gT2JqZWN0LmFzc2lnbjtcblxuLy8gc2hvdWxkIHdvcmsgd2l0aCBzeW1ib2xzIGFuZCBzaG91bGQgaGF2ZSBkZXRlcm1pbmlzdGljIHByb3BlcnR5IG9yZGVyIChWOCBidWcpXG5tb2R1bGUuZXhwb3J0cyA9ICEkYXNzaWduIHx8IHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICB2YXIgQSA9IHt9O1xuICB2YXIgQiA9IHt9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgdmFyIFMgPSBTeW1ib2woKTtcbiAgdmFyIEsgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3QnO1xuICBBW1NdID0gNztcbiAgSy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAoaykgeyBCW2tdID0gazsgfSk7XG4gIHJldHVybiAkYXNzaWduKHt9LCBBKVtTXSAhPSA3IHx8IE9iamVjdC5rZXlzKCRhc3NpZ24oe30sIEIpKS5qb2luKCcnKSAhPSBLO1xufSkgPyBmdW5jdGlvbiBhc3NpZ24odGFyZ2V0LCBzb3VyY2UpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICB2YXIgVCA9IHRvT2JqZWN0KHRhcmdldCk7XG4gIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gMTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIHZhciBpc0VudW0gPSBwSUUuZjtcbiAgd2hpbGUgKGFMZW4gPiBpbmRleCkge1xuICAgIHZhciBTID0gSU9iamVjdChhcmd1bWVudHNbaW5kZXgrK10pO1xuICAgIHZhciBrZXlzID0gZ2V0U3ltYm9scyA/IGdldEtleXMoUykuY29uY2F0KGdldFN5bWJvbHMoUykpIDogZ2V0S2V5cyhTKTtcbiAgICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgdmFyIGogPSAwO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGopIGlmIChpc0VudW0uY2FsbChTLCBrZXkgPSBrZXlzW2orK10pKSBUW2tleV0gPSBTW2tleV07XG4gIH0gcmV0dXJuIFQ7XG59IDogJGFzc2lnbjtcbiIsIi8vIGZhbHNlIC0+IEFycmF5I2luZGV4T2Zcbi8vIHRydWUgIC0+IEFycmF5I2luY2x1ZGVzXG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKElTX0lOQ0xVREVTKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGVsLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgTyA9IHRvSU9iamVjdCgkdGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSB0b0Fic29sdXRlSW5kZXgoZnJvbUluZGV4LCBsZW5ndGgpO1xuICAgIHZhciB2YWx1ZTtcbiAgICAvLyBBcnJheSNpbmNsdWRlcyB1c2VzIFNhbWVWYWx1ZVplcm8gZXF1YWxpdHkgYWxnb3JpdGhtXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIGlmIChJU19JTkNMVURFUyAmJiBlbCAhPSBlbCkgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSB7XG4gICAgICB2YWx1ZSA9IE9baW5kZXgrK107XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICBpZiAodmFsdWUgIT0gdmFsdWUpIHJldHVybiB0cnVlO1xuICAgIC8vIEFycmF5I2luZGV4T2YgaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3RcbiAgICB9IGVsc2UgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIGlmIChJU19JTkNMVURFUyB8fCBpbmRleCBpbiBPKSB7XG4gICAgICBpZiAoT1tpbmRleF0gPT09IGVsKSByZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDtcbiAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG4gIH07XG59O1xuIiwiLy8gNy4xLjE1IFRvTGVuZ3RoXG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID4gMCA/IG1pbih0b0ludGVnZXIoaXQpLCAweDFmZmZmZmZmZmZmZmZmKSA6IDA7IC8vIHBvdygyLCA1MykgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTFcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICBpbmRleCA9IHRvSW50ZWdlcihpbmRleCk7XG4gIHJldHVybiBpbmRleCA8IDAgPyBtYXgoaW5kZXggKyBsZW5ndGgsIDApIDogbWluKGluZGV4LCBsZW5ndGgpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9zeW1ib2wvaXRlcmF0b3JcIiksIF9fZXNNb2R1bGU6IHRydWUgfTsiLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL193a3MtZXh0JykuZignaXRlcmF0b3InKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkYXQgPSByZXF1aXJlKCcuL19zdHJpbmctYXQnKSh0cnVlKTtcblxuLy8gMjEuMS4zLjI3IFN0cmluZy5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxucmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKShTdHJpbmcsICdTdHJpbmcnLCBmdW5jdGlvbiAoaXRlcmF0ZWQpIHtcbiAgdGhpcy5fdCA9IFN0cmluZyhpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuLy8gMjEuMS41LjIuMSAlU3RyaW5nSXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgTyA9IHRoaXMuX3Q7XG4gIHZhciBpbmRleCA9IHRoaXMuX2k7XG4gIHZhciBwb2ludDtcbiAgaWYgKGluZGV4ID49IE8ubGVuZ3RoKSByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIHBvaW50ID0gJGF0KE8sIGluZGV4KTtcbiAgdGhpcy5faSArPSBwb2ludC5sZW5ndGg7XG4gIHJldHVybiB7IHZhbHVlOiBwb2ludCwgZG9uZTogZmFsc2UgfTtcbn0pO1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuLy8gdHJ1ZSAgLT4gU3RyaW5nI2F0XG4vLyBmYWxzZSAtPiBTdHJpbmcjY29kZVBvaW50QXRcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFRPX1NUUklORykge1xuICByZXR1cm4gZnVuY3Rpb24gKHRoYXQsIHBvcykge1xuICAgIHZhciBzID0gU3RyaW5nKGRlZmluZWQodGhhdCkpO1xuICAgIHZhciBpID0gdG9JbnRlZ2VyKHBvcyk7XG4gICAgdmFyIGwgPSBzLmxlbmd0aDtcbiAgICB2YXIgYSwgYjtcbiAgICBpZiAoaSA8IDAgfHwgaSA+PSBsKSByZXR1cm4gVE9fU1RSSU5HID8gJycgOiB1bmRlZmluZWQ7XG4gICAgYSA9IHMuY2hhckNvZGVBdChpKTtcbiAgICByZXR1cm4gYSA8IDB4ZDgwMCB8fCBhID4gMHhkYmZmIHx8IGkgKyAxID09PSBsIHx8IChiID0gcy5jaGFyQ29kZUF0KGkgKyAxKSkgPCAweGRjMDAgfHwgYiA+IDB4ZGZmZlxuICAgICAgPyBUT19TVFJJTkcgPyBzLmNoYXJBdChpKSA6IGFcbiAgICAgIDogVE9fU1RSSU5HID8gcy5zbGljZShpLCBpICsgMikgOiAoYSAtIDB4ZDgwMCA8PCAxMCkgKyAoYiAtIDB4ZGMwMCkgKyAweDEwMDAwO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgZGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcblxuLy8gMjUuMS4yLjEuMSAlSXRlcmF0b3JQcm90b3R5cGUlW0BAaXRlcmF0b3JdKClcbnJlcXVpcmUoJy4vX2hpZGUnKShJdGVyYXRvclByb3RvdHlwZSwgcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyksIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCkge1xuICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUsIHsgbmV4dDogZGVzY3JpcHRvcigxLCBuZXh0KSB9KTtcbiAgc2V0VG9TdHJpbmdUYWcoQ29uc3RydWN0b3IsIE5BTUUgKyAnIEl0ZXJhdG9yJyk7XG59O1xuIiwidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBrZXlzID0gZ2V0S2V5cyhQcm9wZXJ0aWVzKTtcbiAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICB2YXIgaSA9IDA7XG4gIHZhciBQO1xuICB3aGlsZSAobGVuZ3RoID4gaSkgZFAuZihPLCBQID0ga2V5c1tpKytdLCBQcm9wZXJ0aWVzW1BdKTtcbiAgcmV0dXJuIE87XG59O1xuIiwidmFyIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQ7XG5tb2R1bGUuZXhwb3J0cyA9IGRvY3VtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiIsIi8vIDE5LjEuMi45IC8gMTUuMi4zLjIgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pXG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcbnZhciBPYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmdldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIChPKSB7XG4gIE8gPSB0b09iamVjdChPKTtcbiAgaWYgKGhhcyhPLCBJRV9QUk9UTykpIHJldHVybiBPW0lFX1BST1RPXTtcbiAgaWYgKHR5cGVvZiBPLmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgTyBpbnN0YW5jZW9mIE8uY29uc3RydWN0b3IpIHtcbiAgICByZXR1cm4gTy5jb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gIH0gcmV0dXJuIE8gaW5zdGFuY2VvZiBPYmplY3QgPyBPYmplY3RQcm90byA6IG51bGw7XG59O1xuIiwicmVxdWlyZSgnLi9lczYuYXJyYXkuaXRlcmF0b3InKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIFRPX1NUUklOR19UQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcblxudmFyIERPTUl0ZXJhYmxlcyA9ICgnQ1NTUnVsZUxpc3QsQ1NTU3R5bGVEZWNsYXJhdGlvbixDU1NWYWx1ZUxpc3QsQ2xpZW50UmVjdExpc3QsRE9NUmVjdExpc3QsRE9NU3RyaW5nTGlzdCwnICtcbiAgJ0RPTVRva2VuTGlzdCxEYXRhVHJhbnNmZXJJdGVtTGlzdCxGaWxlTGlzdCxIVE1MQWxsQ29sbGVjdGlvbixIVE1MQ29sbGVjdGlvbixIVE1MRm9ybUVsZW1lbnQsSFRNTFNlbGVjdEVsZW1lbnQsJyArXG4gICdNZWRpYUxpc3QsTWltZVR5cGVBcnJheSxOYW1lZE5vZGVNYXAsTm9kZUxpc3QsUGFpbnRSZXF1ZXN0TGlzdCxQbHVnaW4sUGx1Z2luQXJyYXksU1ZHTGVuZ3RoTGlzdCxTVkdOdW1iZXJMaXN0LCcgK1xuICAnU1ZHUGF0aFNlZ0xpc3QsU1ZHUG9pbnRMaXN0LFNWR1N0cmluZ0xpc3QsU1ZHVHJhbnNmb3JtTGlzdCxTb3VyY2VCdWZmZXJMaXN0LFN0eWxlU2hlZXRMaXN0LFRleHRUcmFja0N1ZUxpc3QsJyArXG4gICdUZXh0VHJhY2tMaXN0LFRvdWNoTGlzdCcpLnNwbGl0KCcsJyk7XG5cbmZvciAodmFyIGkgPSAwOyBpIDwgRE9NSXRlcmFibGVzLmxlbmd0aDsgaSsrKSB7XG4gIHZhciBOQU1FID0gRE9NSXRlcmFibGVzW2ldO1xuICB2YXIgQ29sbGVjdGlvbiA9IGdsb2JhbFtOQU1FXTtcbiAgdmFyIHByb3RvID0gQ29sbGVjdGlvbiAmJiBDb2xsZWN0aW9uLnByb3RvdHlwZTtcbiAgaWYgKHByb3RvICYmICFwcm90b1tUT19TVFJJTkdfVEFHXSkgaGlkZShwcm90bywgVE9fU1RSSU5HX1RBRywgTkFNRSk7XG4gIEl0ZXJhdG9yc1tOQU1FXSA9IEl0ZXJhdG9ycy5BcnJheTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJyk7XG52YXIgc3RlcCA9IHJlcXVpcmUoJy4vX2l0ZXItc3RlcCcpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcblxuLy8gMjIuMS4zLjQgQXJyYXkucHJvdG90eXBlLmVudHJpZXMoKVxuLy8gMjIuMS4zLjEzIEFycmF5LnByb3RvdHlwZS5rZXlzKClcbi8vIDIyLjEuMy4yOSBBcnJheS5wcm90b3R5cGUudmFsdWVzKClcbi8vIDIyLjEuMy4zMCBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKEFycmF5LCAnQXJyYXknLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcbiAgdGhpcy5fdCA9IHRvSU9iamVjdChpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICB0aGlzLl9rID0ga2luZDsgICAgICAgICAgICAgICAgLy8ga2luZFxuLy8gMjIuMS41LjIuMSAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbiAoKSB7XG4gIHZhciBPID0gdGhpcy5fdDtcbiAgdmFyIGtpbmQgPSB0aGlzLl9rO1xuICB2YXIgaW5kZXggPSB0aGlzLl9pKys7XG4gIGlmICghTyB8fCBpbmRleCA+PSBPLmxlbmd0aCkge1xuICAgIHRoaXMuX3QgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHN0ZXAoMSk7XG4gIH1cbiAgaWYgKGtpbmQgPT0gJ2tleXMnKSByZXR1cm4gc3RlcCgwLCBpbmRleCk7XG4gIGlmIChraW5kID09ICd2YWx1ZXMnKSByZXR1cm4gc3RlcCgwLCBPW2luZGV4XSk7XG4gIHJldHVybiBzdGVwKDAsIFtpbmRleCwgT1tpbmRleF1dKTtcbn0sICd2YWx1ZXMnKTtcblxuLy8gYXJndW1lbnRzTGlzdFtAQGl0ZXJhdG9yXSBpcyAlQXJyYXlQcm90b192YWx1ZXMlICg5LjQuNC42LCA5LjQuNC43KVxuSXRlcmF0b3JzLkFyZ3VtZW50cyA9IEl0ZXJhdG9ycy5BcnJheTtcblxuYWRkVG9VbnNjb3BhYmxlcygna2V5cycpO1xuYWRkVG9VbnNjb3BhYmxlcygndmFsdWVzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCdlbnRyaWVzJyk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGRvbmUsIHZhbHVlKSB7XG4gIHJldHVybiB7IHZhbHVlOiB2YWx1ZSwgZG9uZTogISFkb25lIH07XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbFwiKSwgX19lc01vZHVsZTogdHJ1ZSB9OyIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2LnN5bWJvbCcpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5zeW1ib2wub2JzZXJ2YWJsZScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuU3ltYm9sO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gRUNNQVNjcmlwdCA2IHN5bWJvbHMgc2hpbVxudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIE1FVEEgPSByZXF1aXJlKCcuL19tZXRhJykuS0VZO1xudmFyICRmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi9fc2hhcmVkJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xudmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xudmFyIHdrc0V4dCA9IHJlcXVpcmUoJy4vX3drcy1leHQnKTtcbnZhciB3a3NEZWZpbmUgPSByZXF1aXJlKCcuL193a3MtZGVmaW5lJyk7XG52YXIgZW51bUtleXMgPSByZXF1aXJlKCcuL19lbnVtLWtleXMnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9faXMtYXJyYXknKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBfY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIGdPUE5FeHQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbi1leHQnKTtcbnZhciAkR09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgJERQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIGdPUEQgPSAkR09QRC5mO1xudmFyIGRQID0gJERQLmY7XG52YXIgZ09QTiA9IGdPUE5FeHQuZjtcbnZhciAkU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcbnZhciAkSlNPTiA9IGdsb2JhbC5KU09OO1xudmFyIF9zdHJpbmdpZnkgPSAkSlNPTiAmJiAkSlNPTi5zdHJpbmdpZnk7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgSElEREVOID0gd2tzKCdfaGlkZGVuJyk7XG52YXIgVE9fUFJJTUlUSVZFID0gd2tzKCd0b1ByaW1pdGl2ZScpO1xudmFyIGlzRW51bSA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xudmFyIFN5bWJvbFJlZ2lzdHJ5ID0gc2hhcmVkKCdzeW1ib2wtcmVnaXN0cnknKTtcbnZhciBBbGxTeW1ib2xzID0gc2hhcmVkKCdzeW1ib2xzJyk7XG52YXIgT1BTeW1ib2xzID0gc2hhcmVkKCdvcC1zeW1ib2xzJyk7XG52YXIgT2JqZWN0UHJvdG8gPSBPYmplY3RbUFJPVE9UWVBFXTtcbnZhciBVU0VfTkFUSVZFID0gdHlwZW9mICRTeW1ib2wgPT0gJ2Z1bmN0aW9uJztcbnZhciBRT2JqZWN0ID0gZ2xvYmFsLlFPYmplY3Q7XG4vLyBEb24ndCB1c2Ugc2V0dGVycyBpbiBRdCBTY3JpcHQsIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8xNzNcbnZhciBzZXR0ZXIgPSAhUU9iamVjdCB8fCAhUU9iamVjdFtQUk9UT1RZUEVdIHx8ICFRT2JqZWN0W1BST1RPVFlQRV0uZmluZENoaWxkO1xuXG4vLyBmYWxsYmFjayBmb3Igb2xkIEFuZHJvaWQsIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD02ODdcbnZhciBzZXRTeW1ib2xEZXNjID0gREVTQ1JJUFRPUlMgJiYgJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIF9jcmVhdGUoZFAoe30sICdhJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZFAodGhpcywgJ2EnLCB7IHZhbHVlOiA3IH0pLmE7IH1cbiAgfSkpLmEgIT0gNztcbn0pID8gZnVuY3Rpb24gKGl0LCBrZXksIEQpIHtcbiAgdmFyIHByb3RvRGVzYyA9IGdPUEQoT2JqZWN0UHJvdG8sIGtleSk7XG4gIGlmIChwcm90b0Rlc2MpIGRlbGV0ZSBPYmplY3RQcm90b1trZXldO1xuICBkUChpdCwga2V5LCBEKTtcbiAgaWYgKHByb3RvRGVzYyAmJiBpdCAhPT0gT2JqZWN0UHJvdG8pIGRQKE9iamVjdFByb3RvLCBrZXksIHByb3RvRGVzYyk7XG59IDogZFA7XG5cbnZhciB3cmFwID0gZnVuY3Rpb24gKHRhZykge1xuICB2YXIgc3ltID0gQWxsU3ltYm9sc1t0YWddID0gX2NyZWF0ZSgkU3ltYm9sW1BST1RPVFlQRV0pO1xuICBzeW0uX2sgPSB0YWc7XG4gIHJldHVybiBzeW07XG59O1xuXG52YXIgaXNTeW1ib2wgPSBVU0VfTkFUSVZFICYmIHR5cGVvZiAkU3ltYm9sLml0ZXJhdG9yID09ICdzeW1ib2wnID8gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCc7XG59IDogZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCBpbnN0YW5jZW9mICRTeW1ib2w7XG59O1xuXG52YXIgJGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoaXQsIGtleSwgRCkge1xuICBpZiAoaXQgPT09IE9iamVjdFByb3RvKSAkZGVmaW5lUHJvcGVydHkoT1BTeW1ib2xzLCBrZXksIEQpO1xuICBhbk9iamVjdChpdCk7XG4gIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEQpO1xuICBpZiAoaGFzKEFsbFN5bWJvbHMsIGtleSkpIHtcbiAgICBpZiAoIUQuZW51bWVyYWJsZSkge1xuICAgICAgaWYgKCFoYXMoaXQsIEhJRERFTikpIGRQKGl0LCBISURERU4sIGNyZWF0ZURlc2MoMSwge30pKTtcbiAgICAgIGl0W0hJRERFTl1ba2V5XSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKSBpdFtISURERU5dW2tleV0gPSBmYWxzZTtcbiAgICAgIEQgPSBfY3JlYXRlKEQsIHsgZW51bWVyYWJsZTogY3JlYXRlRGVzYygwLCBmYWxzZSkgfSk7XG4gICAgfSByZXR1cm4gc2V0U3ltYm9sRGVzYyhpdCwga2V5LCBEKTtcbiAgfSByZXR1cm4gZFAoaXQsIGtleSwgRCk7XG59O1xudmFyICRkZWZpbmVQcm9wZXJ0aWVzID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhpdCwgUCkge1xuICBhbk9iamVjdChpdCk7XG4gIHZhciBrZXlzID0gZW51bUtleXMoUCA9IHRvSU9iamVjdChQKSk7XG4gIHZhciBpID0gMDtcbiAgdmFyIGwgPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKGwgPiBpKSAkZGVmaW5lUHJvcGVydHkoaXQsIGtleSA9IGtleXNbaSsrXSwgUFtrZXldKTtcbiAgcmV0dXJuIGl0O1xufTtcbnZhciAkY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGl0LCBQKSB7XG4gIHJldHVybiBQID09PSB1bmRlZmluZWQgPyBfY3JlYXRlKGl0KSA6ICRkZWZpbmVQcm9wZXJ0aWVzKF9jcmVhdGUoaXQpLCBQKTtcbn07XG52YXIgJHByb3BlcnR5SXNFbnVtZXJhYmxlID0gZnVuY3Rpb24gcHJvcGVydHlJc0VudW1lcmFibGUoa2V5KSB7XG4gIHZhciBFID0gaXNFbnVtLmNhbGwodGhpcywga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKSk7XG4gIGlmICh0aGlzID09PSBPYmplY3RQcm90byAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKE9QU3ltYm9scywga2V5KSkgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gRSB8fCAhaGFzKHRoaXMsIGtleSkgfHwgIWhhcyhBbGxTeW1ib2xzLCBrZXkpIHx8IGhhcyh0aGlzLCBISURERU4pICYmIHRoaXNbSElEREVOXVtrZXldID8gRSA6IHRydWU7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSkge1xuICBpdCA9IHRvSU9iamVjdChpdCk7XG4gIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSk7XG4gIGlmIChpdCA9PT0gT2JqZWN0UHJvdG8gJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhPUFN5bWJvbHMsIGtleSkpIHJldHVybjtcbiAgdmFyIEQgPSBnT1BEKGl0LCBrZXkpO1xuICBpZiAoRCAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pKSBELmVudW1lcmFibGUgPSB0cnVlO1xuICByZXR1cm4gRDtcbn07XG52YXIgJGdldE93blByb3BlcnR5TmFtZXMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KSB7XG4gIHZhciBuYW1lcyA9IGdPUE4odG9JT2JqZWN0KGl0KSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGkgPSAwO1xuICB2YXIga2V5O1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkge1xuICAgIGlmICghaGFzKEFsbFN5bWJvbHMsIGtleSA9IG5hbWVzW2krK10pICYmIGtleSAhPSBISURERU4gJiYga2V5ICE9IE1FVEEpIHJlc3VsdC5wdXNoKGtleSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG52YXIgJGdldE93blByb3BlcnR5U3ltYm9scyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5U3ltYm9scyhpdCkge1xuICB2YXIgSVNfT1AgPSBpdCA9PT0gT2JqZWN0UHJvdG87XG4gIHZhciBuYW1lcyA9IGdPUE4oSVNfT1AgPyBPUFN5bWJvbHMgOiB0b0lPYmplY3QoaXQpKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIgaSA9IDA7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSB7XG4gICAgaWYgKGhhcyhBbGxTeW1ib2xzLCBrZXkgPSBuYW1lc1tpKytdKSAmJiAoSVNfT1AgPyBoYXMoT2JqZWN0UHJvdG8sIGtleSkgOiB0cnVlKSkgcmVzdWx0LnB1c2goQWxsU3ltYm9sc1trZXldKTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcblxuLy8gMTkuNC4xLjEgU3ltYm9sKFtkZXNjcmlwdGlvbl0pXG5pZiAoIVVTRV9OQVRJVkUpIHtcbiAgJFN5bWJvbCA9IGZ1bmN0aW9uIFN5bWJvbCgpIHtcbiAgICBpZiAodGhpcyBpbnN0YW5jZW9mICRTeW1ib2wpIHRocm93IFR5cGVFcnJvcignU3ltYm9sIGlzIG5vdCBhIGNvbnN0cnVjdG9yIScpO1xuICAgIHZhciB0YWcgPSB1aWQoYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpO1xuICAgIHZhciAkc2V0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG8pICRzZXQuY2FsbChPUFN5bWJvbHMsIHZhbHVlKTtcbiAgICAgIGlmIChoYXModGhpcywgSElEREVOKSAmJiBoYXModGhpc1tISURERU5dLCB0YWcpKSB0aGlzW0hJRERFTl1bdGFnXSA9IGZhbHNlO1xuICAgICAgc2V0U3ltYm9sRGVzYyh0aGlzLCB0YWcsIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTtcbiAgICB9O1xuICAgIGlmIChERVNDUklQVE9SUyAmJiBzZXR0ZXIpIHNldFN5bWJvbERlc2MoT2JqZWN0UHJvdG8sIHRhZywgeyBjb25maWd1cmFibGU6IHRydWUsIHNldDogJHNldCB9KTtcbiAgICByZXR1cm4gd3JhcCh0YWcpO1xuICB9O1xuICByZWRlZmluZSgkU3ltYm9sW1BST1RPVFlQRV0sICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLl9rO1xuICB9KTtcblxuICAkR09QRC5mID0gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbiAgJERQLmYgPSAkZGVmaW5lUHJvcGVydHk7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZiA9IGdPUE5FeHQuZiA9ICRnZXRPd25Qcm9wZXJ0eU5hbWVzO1xuICByZXF1aXJlKCcuL19vYmplY3QtcGllJykuZiA9ICRwcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKS5mID0gJGdldE93blByb3BlcnR5U3ltYm9scztcblxuICBpZiAoREVTQ1JJUFRPUlMgJiYgIXJlcXVpcmUoJy4vX2xpYnJhcnknKSkge1xuICAgIHJlZGVmaW5lKE9iamVjdFByb3RvLCAncHJvcGVydHlJc0VudW1lcmFibGUnLCAkcHJvcGVydHlJc0VudW1lcmFibGUsIHRydWUpO1xuICB9XG5cbiAgd2tzRXh0LmYgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHJldHVybiB3cmFwKHdrcyhuYW1lKSk7XG4gIH07XG59XG5cbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIHsgU3ltYm9sOiAkU3ltYm9sIH0pO1xuXG5mb3IgKHZhciBlczZTeW1ib2xzID0gKFxuICAvLyAxOS40LjIuMiwgMTkuNC4yLjMsIDE5LjQuMi40LCAxOS40LjIuNiwgMTkuNC4yLjgsIDE5LjQuMi45LCAxOS40LjIuMTAsIDE5LjQuMi4xMSwgMTkuNC4yLjEyLCAxOS40LjIuMTMsIDE5LjQuMi4xNFxuICAnaGFzSW5zdGFuY2UsaXNDb25jYXRTcHJlYWRhYmxlLGl0ZXJhdG9yLG1hdGNoLHJlcGxhY2Usc2VhcmNoLHNwZWNpZXMsc3BsaXQsdG9QcmltaXRpdmUsdG9TdHJpbmdUYWcsdW5zY29wYWJsZXMnXG4pLnNwbGl0KCcsJyksIGogPSAwOyBlczZTeW1ib2xzLmxlbmd0aCA+IGo7KXdrcyhlczZTeW1ib2xzW2orK10pO1xuXG5mb3IgKHZhciB3ZWxsS25vd25TeW1ib2xzID0gJGtleXMod2tzLnN0b3JlKSwgayA9IDA7IHdlbGxLbm93blN5bWJvbHMubGVuZ3RoID4gazspIHdrc0RlZmluZSh3ZWxsS25vd25TeW1ib2xzW2srK10pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCAnU3ltYm9sJywge1xuICAvLyAxOS40LjIuMSBTeW1ib2wuZm9yKGtleSlcbiAgJ2Zvcic6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gaGFzKFN5bWJvbFJlZ2lzdHJ5LCBrZXkgKz0gJycpXG4gICAgICA/IFN5bWJvbFJlZ2lzdHJ5W2tleV1cbiAgICAgIDogU3ltYm9sUmVnaXN0cnlba2V5XSA9ICRTeW1ib2woa2V5KTtcbiAgfSxcbiAgLy8gMTkuNC4yLjUgU3ltYm9sLmtleUZvcihzeW0pXG4gIGtleUZvcjogZnVuY3Rpb24ga2V5Rm9yKHN5bSkge1xuICAgIGlmICghaXNTeW1ib2woc3ltKSkgdGhyb3cgVHlwZUVycm9yKHN5bSArICcgaXMgbm90IGEgc3ltYm9sIScpO1xuICAgIGZvciAodmFyIGtleSBpbiBTeW1ib2xSZWdpc3RyeSkgaWYgKFN5bWJvbFJlZ2lzdHJ5W2tleV0gPT09IHN5bSkgcmV0dXJuIGtleTtcbiAgfSxcbiAgdXNlU2V0dGVyOiBmdW5jdGlvbiAoKSB7IHNldHRlciA9IHRydWU7IH0sXG4gIHVzZVNpbXBsZTogZnVuY3Rpb24gKCkgeyBzZXR0ZXIgPSBmYWxzZTsgfVxufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsICdPYmplY3QnLCB7XG4gIC8vIDE5LjEuMi4yIE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbiAgY3JlYXRlOiAkY3JlYXRlLFxuICAvLyAxOS4xLjIuNCBPYmplY3QuZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcylcbiAgZGVmaW5lUHJvcGVydHk6ICRkZWZpbmVQcm9wZXJ0eSxcbiAgLy8gMTkuMS4yLjMgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcylcbiAgZGVmaW5lUHJvcGVydGllczogJGRlZmluZVByb3BlcnRpZXMsXG4gIC8vIDE5LjEuMi42IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUClcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLFxuICAvLyAxOS4xLjIuNyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxuICBnZXRPd25Qcm9wZXJ0eU5hbWVzOiAkZ2V0T3duUHJvcGVydHlOYW1lcyxcbiAgLy8gMTkuMS4yLjggT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhPKVxuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHNcbn0pO1xuXG4vLyAyNC4zLjIgSlNPTi5zdHJpbmdpZnkodmFsdWUgWywgcmVwbGFjZXIgWywgc3BhY2VdXSlcbiRKU09OICYmICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKCFVU0VfTkFUSVZFIHx8ICRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBTID0gJFN5bWJvbCgpO1xuICAvLyBNUyBFZGdlIGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyB7fVxuICAvLyBXZWJLaXQgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIG51bGxcbiAgLy8gVjggdGhyb3dzIG9uIGJveGVkIHN5bWJvbHNcbiAgcmV0dXJuIF9zdHJpbmdpZnkoW1NdKSAhPSAnW251bGxdJyB8fCBfc3RyaW5naWZ5KHsgYTogUyB9KSAhPSAne30nIHx8IF9zdHJpbmdpZnkoT2JqZWN0KFMpKSAhPSAne30nO1xufSkpLCAnSlNPTicsIHtcbiAgc3RyaW5naWZ5OiBmdW5jdGlvbiBzdHJpbmdpZnkoaXQpIHtcbiAgICB2YXIgYXJncyA9IFtpdF07XG4gICAgdmFyIGkgPSAxO1xuICAgIHZhciByZXBsYWNlciwgJHJlcGxhY2VyO1xuICAgIHdoaWxlIChhcmd1bWVudHMubGVuZ3RoID4gaSkgYXJncy5wdXNoKGFyZ3VtZW50c1tpKytdKTtcbiAgICAkcmVwbGFjZXIgPSByZXBsYWNlciA9IGFyZ3NbMV07XG4gICAgaWYgKCFpc09iamVjdChyZXBsYWNlcikgJiYgaXQgPT09IHVuZGVmaW5lZCB8fCBpc1N5bWJvbChpdCkpIHJldHVybjsgLy8gSUU4IHJldHVybnMgc3RyaW5nIG9uIHVuZGVmaW5lZFxuICAgIGlmICghaXNBcnJheShyZXBsYWNlcikpIHJlcGxhY2VyID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgIGlmICh0eXBlb2YgJHJlcGxhY2VyID09ICdmdW5jdGlvbicpIHZhbHVlID0gJHJlcGxhY2VyLmNhbGwodGhpcywga2V5LCB2YWx1ZSk7XG4gICAgICBpZiAoIWlzU3ltYm9sKHZhbHVlKSkgcmV0dXJuIHZhbHVlO1xuICAgIH07XG4gICAgYXJnc1sxXSA9IHJlcGxhY2VyO1xuICAgIHJldHVybiBfc3RyaW5naWZ5LmFwcGx5KCRKU09OLCBhcmdzKTtcbiAgfVxufSk7XG5cbi8vIDE5LjQuMy40IFN5bWJvbC5wcm90b3R5cGVbQEB0b1ByaW1pdGl2ZV0oaGludClcbiRTeW1ib2xbUFJPVE9UWVBFXVtUT19QUklNSVRJVkVdIHx8IHJlcXVpcmUoJy4vX2hpZGUnKSgkU3ltYm9sW1BST1RPVFlQRV0sIFRPX1BSSU1JVElWRSwgJFN5bWJvbFtQUk9UT1RZUEVdLnZhbHVlT2YpO1xuLy8gMTkuNC4zLjUgU3ltYm9sLnByb3RvdHlwZVtAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoJFN5bWJvbCwgJ1N5bWJvbCcpO1xuLy8gMjAuMi4xLjkgTWF0aFtAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoTWF0aCwgJ01hdGgnLCB0cnVlKTtcbi8vIDI0LjMuMyBKU09OW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZyhnbG9iYWwuSlNPTiwgJ0pTT04nLCB0cnVlKTtcbiIsInZhciBNRVRBID0gcmVxdWlyZSgnLi9fdWlkJykoJ21ldGEnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHNldERlc2MgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGlkID0gMDtcbnZhciBpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlIHx8IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRydWU7XG59O1xudmFyIEZSRUVaRSA9ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGlzRXh0ZW5zaWJsZShPYmplY3QucHJldmVudEV4dGVuc2lvbnMoe30pKTtcbn0pO1xudmFyIHNldE1ldGEgPSBmdW5jdGlvbiAoaXQpIHtcbiAgc2V0RGVzYyhpdCwgTUVUQSwgeyB2YWx1ZToge1xuICAgIGk6ICdPJyArICsraWQsIC8vIG9iamVjdCBJRFxuICAgIHc6IHt9ICAgICAgICAgIC8vIHdlYWsgY29sbGVjdGlvbnMgSURzXG4gIH0gfSk7XG59O1xudmFyIGZhc3RLZXkgPSBmdW5jdGlvbiAoaXQsIGNyZWF0ZSkge1xuICAvLyByZXR1cm4gcHJpbWl0aXZlIHdpdGggcHJlZml4XG4gIGlmICghaXNPYmplY3QoaXQpKSByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnID8gaXQgOiAodHlwZW9mIGl0ID09ICdzdHJpbmcnID8gJ1MnIDogJ1AnKSArIGl0O1xuICBpZiAoIWhhcyhpdCwgTUVUQSkpIHtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmICghaXNFeHRlbnNpYmxlKGl0KSkgcmV0dXJuICdGJztcbiAgICAvLyBub3QgbmVjZXNzYXJ5IHRvIGFkZCBtZXRhZGF0YVxuICAgIGlmICghY3JlYXRlKSByZXR1cm4gJ0UnO1xuICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhXG4gICAgc2V0TWV0YShpdCk7XG4gIC8vIHJldHVybiBvYmplY3QgSURcbiAgfSByZXR1cm4gaXRbTUVUQV0uaTtcbn07XG52YXIgZ2V0V2VhayA9IGZ1bmN0aW9uIChpdCwgY3JlYXRlKSB7XG4gIGlmICghaGFzKGl0LCBNRVRBKSkge1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYgKCFpc0V4dGVuc2libGUoaXQpKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBub3QgbmVjZXNzYXJ5IHRvIGFkZCBtZXRhZGF0YVxuICAgIGlmICghY3JlYXRlKSByZXR1cm4gZmFsc2U7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhKGl0KTtcbiAgLy8gcmV0dXJuIGhhc2ggd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfSByZXR1cm4gaXRbTUVUQV0udztcbn07XG4vLyBhZGQgbWV0YWRhdGEgb24gZnJlZXplLWZhbWlseSBtZXRob2RzIGNhbGxpbmdcbnZhciBvbkZyZWV6ZSA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoRlJFRVpFICYmIG1ldGEuTkVFRCAmJiBpc0V4dGVuc2libGUoaXQpICYmICFoYXMoaXQsIE1FVEEpKSBzZXRNZXRhKGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbnZhciBtZXRhID0gbW9kdWxlLmV4cG9ydHMgPSB7XG4gIEtFWTogTUVUQSxcbiAgTkVFRDogZmFsc2UsXG4gIGZhc3RLZXk6IGZhc3RLZXksXG4gIGdldFdlYWs6IGdldFdlYWssXG4gIG9uRnJlZXplOiBvbkZyZWV6ZVxufTtcbiIsIi8vIGFsbCBlbnVtZXJhYmxlIG9iamVjdCBrZXlzLCBpbmNsdWRlcyBzeW1ib2xzXG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgZ09QUyA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJyk7XG52YXIgcElFID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIHJlc3VsdCA9IGdldEtleXMoaXQpO1xuICB2YXIgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgaWYgKGdldFN5bWJvbHMpIHtcbiAgICB2YXIgc3ltYm9scyA9IGdldFN5bWJvbHMoaXQpO1xuICAgIHZhciBpc0VudW0gPSBwSUUuZjtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAoc3ltYm9scy5sZW5ndGggPiBpKSBpZiAoaXNFbnVtLmNhbGwoaXQsIGtleSA9IHN5bWJvbHNbaSsrXSkpIHJlc3VsdC5wdXNoKGtleSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG4iLCIvLyA3LjIuMiBJc0FycmF5KGFyZ3VtZW50KVxudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIGlzQXJyYXkoYXJnKSB7XG4gIHJldHVybiBjb2YoYXJnKSA9PSAnQXJyYXknO1xufTtcbiIsIi8vIGZhbGxiYWNrIGZvciBJRTExIGJ1Z2d5IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHdpdGggaWZyYW1lIGFuZCB3aW5kb3dcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbnZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG52YXIgd2luZG93TmFtZXMgPSB0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnICYmIHdpbmRvdyAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc1xuICA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHdpbmRvdykgOiBbXTtcblxudmFyIGdldFdpbmRvd05hbWVzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGdPUE4oaXQpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHdpbmRvd05hbWVzLnNsaWNlKCk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KSB7XG4gIHJldHVybiB3aW5kb3dOYW1lcyAmJiB0b1N0cmluZy5jYWxsKGl0KSA9PSAnW29iamVjdCBXaW5kb3ddJyA/IGdldFdpbmRvd05hbWVzKGl0KSA6IGdPUE4odG9JT2JqZWN0KGl0KSk7XG59O1xuIiwidmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKTtcbnZhciBnT1BEID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGdPUEQgOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xuICBPID0gdG9JT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gZ09QRChPLCBQKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIGlmIChoYXMoTywgUCkpIHJldHVybiBjcmVhdGVEZXNjKCFwSUUuZi5jYWxsKE8sIFApLCBPW1BdKTtcbn07XG4iLCJyZXF1aXJlKCcuL193a3MtZGVmaW5lJykoJ2FzeW5jSXRlcmF0b3InKTtcbiIsInJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKSgnb2JzZXJ2YWJsZScpO1xuIiwiaW1wb3J0IHsgUGx1Z2luT2JqZWN0IH0gZnJvbSBcInZ1ZVwiO1xyXG5pbXBvcnQgWGJGb3JtIGZyb20gXCIuL3NyYy94Yi1mb3JtLnZ1ZVwiO1xyXG5leHBvcnQgZGVmYXVsdCBYYkZvcm07XHJcblxyXG5leHBvcnQgY29uc3QgeGJGb3JtOiBQbHVnaW5PYmplY3Q8WGJGb3JtPiA9IHtcclxuICBpbnN0YWxsOiAoVnVlKSA9PiB7XHJcbiAgICBWdWUuY29tcG9uZW50KFwiWGJGb3JtXCIsIFhiRm9ybSk7XHJcbiAgfSxcclxufTtcclxuIiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi94Yi1mb3JtLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD04MDFjMGM4MCZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi94Yi1mb3JtLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz10cyZcIlxuZXhwb3J0ICogZnJvbSBcIi4veGItZm9ybS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9dHMmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBudWxsLFxuICBudWxsXG4gIFxuKVxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkge1xuICB2YXIgYXBpID0gcmVxdWlyZShcIkQ6XFxcXFhiLUJhc2ljLUNvbXBvbmVudHNcXFxcbm9kZV9tb2R1bGVzXFxcXHZ1ZS1ob3QtcmVsb2FkLWFwaVxcXFxkaXN0XFxcXGluZGV4LmpzXCIpXG4gIGFwaS5pbnN0YWxsKHJlcXVpcmUoJ3Z1ZScpKVxuICBpZiAoYXBpLmNvbXBhdGlibGUpIHtcbiAgICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gICAgaWYgKCFtb2R1bGUuaG90LmRhdGEpIHtcbiAgICAgIGFwaS5jcmVhdGVSZWNvcmQoJzgwMWMwYzgwJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZWxvYWQoJzgwMWMwYzgwJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfVxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi94Yi1mb3JtLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD04MDFjMGM4MCZcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgYXBpLnJlcmVuZGVyKCc4MDFjMGM4MCcsIHtcbiAgICAgICAgcmVuZGVyOiByZW5kZXIsXG4gICAgICAgIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn1cbmNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwicGFja2FnZXMveGItZm9ybS9zcmMveGItZm9ybS52dWVcIlxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL3hiLWljb24udnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPWU0ZDEyNmFjJlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL3hiLWljb24udnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi94Yi1pY29uLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz10cyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIG51bGwsXG4gIG51bGxcbiAgXG4pXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIHZhciBhcGkgPSByZXF1aXJlKFwiRDpcXFxcWGItQmFzaWMtQ29tcG9uZW50c1xcXFxub2RlX21vZHVsZXNcXFxcdnVlLWhvdC1yZWxvYWQtYXBpXFxcXGRpc3RcXFxcaW5kZXguanNcIilcbiAgYXBpLmluc3RhbGwocmVxdWlyZSgndnVlJykpXG4gIGlmIChhcGkuY29tcGF0aWJsZSkge1xuICAgIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgICBpZiAoIW1vZHVsZS5ob3QuZGF0YSkge1xuICAgICAgYXBpLmNyZWF0ZVJlY29yZCgnZTRkMTI2YWMnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbG9hZCgnZTRkMTI2YWMnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL3hiLWljb24udnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPWU0ZDEyNmFjJlwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBhcGkucmVyZW5kZXIoJ2U0ZDEyNmFjJywge1xuICAgICAgICByZW5kZXI6IHJlbmRlcixcbiAgICAgICAgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnNcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxufVxuY29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJwYWNrYWdlcy94Yi1pY29uL3NyYy94Yi1pY29uLnZ1ZVwiXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyIsImltcG9ydCB7IFBsdWdpbk9iamVjdCB9IGZyb20gXCJ2dWVcIjtcclxuaW1wb3J0IFhiSW5wdXROdW1iZXIgZnJvbSBcIi4vc3JjL3hiLWlucHV0LW51bWJlci52dWVcIjtcclxuZXhwb3J0IGRlZmF1bHQgWGJJbnB1dE51bWJlcjtcclxuXHJcbmV4cG9ydCBjb25zdCB4YklucHV0TnVtYmVyOiBQbHVnaW5PYmplY3Q8WGJJbnB1dE51bWJlcj4gPSB7XHJcbiAgaW5zdGFsbDogKFZ1ZSkgPT4ge1xyXG4gICAgVnVlLmNvbXBvbmVudChcIlhiSW5wdXROdW1iZXJcIiwgWGJJbnB1dE51bWJlcik7XHJcbiAgfSxcclxufTsiLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL3hiLWlucHV0LW51bWJlci52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MjFlMGY2OTAmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4veGItaW5wdXQtbnVtYmVyLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz10cyZcIlxuZXhwb3J0ICogZnJvbSBcIi4veGItaW5wdXQtbnVtYmVyLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz10cyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIG51bGwsXG4gIG51bGxcbiAgXG4pXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIHZhciBhcGkgPSByZXF1aXJlKFwiRDpcXFxcWGItQmFzaWMtQ29tcG9uZW50c1xcXFxub2RlX21vZHVsZXNcXFxcdnVlLWhvdC1yZWxvYWQtYXBpXFxcXGRpc3RcXFxcaW5kZXguanNcIilcbiAgYXBpLmluc3RhbGwocmVxdWlyZSgndnVlJykpXG4gIGlmIChhcGkuY29tcGF0aWJsZSkge1xuICAgIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgICBpZiAoIW1vZHVsZS5ob3QuZGF0YSkge1xuICAgICAgYXBpLmNyZWF0ZVJlY29yZCgnMjFlMGY2OTAnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbG9hZCgnMjFlMGY2OTAnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL3hiLWlucHV0LW51bWJlci52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MjFlMGY2OTAmXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGFwaS5yZXJlbmRlcignMjFlMGY2OTAnLCB7XG4gICAgICAgIHJlbmRlcjogcmVuZGVyLFxuICAgICAgICBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZuc1xuICAgICAgfSlcbiAgICB9KVxuICB9XG59XG5jb21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcInBhY2thZ2VzL3hiLWlucHV0LW51bWJlci9zcmMveGItaW5wdXQtbnVtYmVyLnZ1ZVwiXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyIsImltcG9ydCB7IFBsdWdpbk9iamVjdCB9IGZyb20gXCJ2dWVcIjtcclxuaW1wb3J0IFhiTG9hZGluZyBmcm9tIFwiLi9zcmMveGItbG9hZGluZy52dWVcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFhiTG9hZGluZztcclxuXHJcbmV4cG9ydCBjb25zdCB4YkxvYWRpbmc6IFBsdWdpbk9iamVjdDxYYkxvYWRpbmc+ID0ge1xyXG4gICAgaW5zdGFsbDogKFZ1ZSkgPT4ge1xyXG4gICAgICAgIFZ1ZS5jb21wb25lbnQoXCJYYkxvYWRpbmdcIiwgWGJMb2FkaW5nKTtcclxuICAgIH0sXHJcbn07XHJcbiIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4veGItbG9hZGluZy52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9YWU0OWQ1NzQmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4veGItbG9hZGluZy52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9dHMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL3hiLWxvYWRpbmcudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgbnVsbCxcbiAgbnVsbFxuICBcbilcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgdmFyIGFwaSA9IHJlcXVpcmUoXCJEOlxcXFxYYi1CYXNpYy1Db21wb25lbnRzXFxcXG5vZGVfbW9kdWxlc1xcXFx2dWUtaG90LXJlbG9hZC1hcGlcXFxcZGlzdFxcXFxpbmRleC5qc1wiKVxuICBhcGkuaW5zdGFsbChyZXF1aXJlKCd2dWUnKSlcbiAgaWYgKGFwaS5jb21wYXRpYmxlKSB7XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICAgIGlmICghbW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgICBhcGkuY3JlYXRlUmVjb3JkKCdhZTQ5ZDU3NCcsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVsb2FkKCdhZTQ5ZDU3NCcsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH1cbiAgICBtb2R1bGUuaG90LmFjY2VwdChcIi4veGItbG9hZGluZy52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9YWU0OWQ1NzQmXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGFwaS5yZXJlbmRlcignYWU0OWQ1NzQnLCB7XG4gICAgICAgIHJlbmRlcjogcmVuZGVyLFxuICAgICAgICBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZuc1xuICAgICAgfSlcbiAgICB9KVxuICB9XG59XG5jb21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcInBhY2thZ2VzL3hiLWxvYWRpbmcvc3JjL3hiLWxvYWRpbmcudnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwiaW1wb3J0IHsgUGx1Z2luT2JqZWN0IH0gZnJvbSBcInZ1ZVwiO1xyXG4vLyBpbXBvcnQgWGJNZXNzYWdlVGlwcyBmcm9tIFwiLi9zcmMveGItbWVzc2FnZS10aXBzLnZ1ZVwiO1xyXG5pbXBvcnQgTWVzc2FnZVRpcHMgZnJvbSBcIi4vc3JjL21lc3NhZ2UtdGlwc1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgTWVzc2FnZVRpcHM7XHJcbi8vIGV4cG9ydCBjb25zdCB4Yk1lc3NhZ2VUaXBzOiBQbHVnaW5PYmplY3Q8WGJNZXNzYWdlVGlwcz4gPSB7XHJcbi8vICAgaW5zdGFsbDogKFZ1ZSkgPT4ge1xyXG4vLyAgICAgVnVlLmNvbXBvbmVudChcIlhiTWVzc2FnZVRpcHNcIiwgWGJNZXNzYWdlVGlwcyk7XHJcbi8vICAgfSxcclxuLy8gfTtcclxuIiwiaW1wb3J0IFZ1ZSBmcm9tIFwidnVlXCI7XHJcbmltcG9ydCBtZXNzYWdlVnVlIGZyb20gXCIuL3hiLW1lc3NhZ2UtdGlwcy52dWVcIjtcclxuaW1wb3J0IHsgT3B0aW9ucyB9IGZyb20gXCIuL3R5cGVcIjtcclxuXHJcbmNvbnN0IGRlZmF1bHRzOiBPcHRpb25zID0ge1xyXG4gIHNob3c6IGZhbHNlLFxyXG4gIHRleHQ6IFwiXCIsXHJcbiAgdHlwZTogXCJpbmZvXCIsXHJcbiAgZHVyYXRpb246IDIwMDAsXHJcbiAgY2xvc2FibGU6IGZhbHNlLFxyXG59O1xyXG5cclxuY29uc3QgaWNvblR5cGVzID0ge1xyXG4gIGluZm86IHtcclxuICAgIG5hbWU6IFwiaW5mby1jaXJjbGVcIixcclxuICAgIGNvbG9yOiBcIiMxODkwRkZcIixcclxuICB9LFxyXG4gIHN1Y2Nlc3M6IHtcclxuICAgIG5hbWU6IFwic3VjY2Vzcy1jaXJjbGVcIixcclxuICAgIGNvbG9yOiBcIiM1MkM0MUFcIixcclxuICB9LFxyXG4gIHdhcm5pbmc6IHtcclxuICAgIG5hbWU6IFwid2FybmluZy1jaXJjbGVcIixcclxuICAgIGNvbG9yOiBcIiNGQUFEMTRcIixcclxuICB9LFxyXG4gIGVycm9yOiB7XHJcbiAgICBuYW1lOiBcImVycm9yLWNpcmNsZVwiLFxyXG4gICAgY29sb3I6IFwiI0Y1MjIyRFwiLFxyXG4gIH0sXHJcbiAgbG9hZGluZzoge1xyXG4gICAgbmFtZTogXCJpbmZvLWNpcmNsZVwiLFxyXG4gICAgY29sb3I6IFwiYmx1ZVwiLFxyXG4gIH0sXHJcbn07XHJcblxyXG5jb25zdCBtZXNzYWdlQ29uc3RydWN0b3IgPSBWdWUuZXh0ZW5kKG1lc3NhZ2VWdWUpO1xyXG5tZXNzYWdlQ29uc3RydWN0b3IucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oKSB7XHJcbiAgdmFyIHZtID0gdGhpcztcclxuICB0aGlzLiRvbihcImFmdGVyTGVhdmVcIiwgKCkgPT4ge1xyXG4gICAgaWYgKHZtLiRlbCAmJiB2bS4kZWwucGFyZW50Tm9kZSkge1xyXG4gICAgICB2bS4kZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh2bS4kZWwpO1xyXG4gICAgfVxyXG4gICAgdGhpcy4kZGVzdHJveSgpO1xyXG4gIH0pO1xyXG4gIHZtLnNob3cgPSBmYWxzZTtcclxufTtcclxuXHJcbmNsYXNzIE1lc3NhZ2VCb3gge1xyXG4gIGNvbnN0cnVjdG9yKCkge31cclxuICBnZXRDb250YWluZXIoKSB7XHJcbiAgICBpZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi54YnVpLW1lc3NhZ2VCb3hcIikubGVuZ3RoID09IDApIHtcclxuICAgICAgbGV0IG1lc3NhZ2VCb3hDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICBtZXNzYWdlQm94Q29udGFpbmVyLmNsYXNzTmFtZSA9IFwieGJ1aS1tZXNzYWdlQm94XCI7XHJcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobWVzc2FnZUJveENvbnRhaW5lcik7XHJcbiAgICB9XHJcbiAgfVxyXG4gIGNyZWF0ZUVsZW1lbnQodHlwZTogc3RyaW5nLCBvcHRpb25zOiBPcHRpb25zKSB7XHJcbiAgICB0aGlzLmdldENvbnRhaW5lcigpO1xyXG4gICAgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRzLCBvcHRpb25zKTtcclxuICAgIG9wdGlvbnMudHlwZSA9IGljb25UeXBlc1t0eXBlXTtcclxuICAgIGxldCBwYXJlbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi54YnVpLW1lc3NhZ2VCb3hcIik7XHJcbiAgICBsZXQgaW5zdGFuY2UgPSBuZXcgbWVzc2FnZUNvbnN0cnVjdG9yKHtcclxuICAgICAgZWw6IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksXHJcbiAgICAgIGRhdGE6IG9wdGlvbnMsXHJcbiAgICB9KTtcclxuICAgIHBhcmVudHNbMF0uYXBwZW5kQ2hpbGQoaW5zdGFuY2UuJGVsKTtcclxuXHJcbiAgICBsZXQgdGltZXI6IGFueTtcclxuXHJcbiAgICBWdWUubmV4dFRpY2soKCkgPT4ge1xyXG4gICAgICBpbnN0YW5jZS5zaG93ID0gdHJ1ZTtcclxuICAgICAgdGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGluc3RhbmNlLmNsb3NlKCk7XHJcbiAgICAgIH0sIG9wdGlvbnMuZHVyYXRpb24pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaW5zdGFuY2UuJG9uKFwiY2xvc2VcIiwgKCkgPT4ge1xyXG4gICAgICBpbnN0YW5jZS5jbG9zZSgpO1xyXG4gICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcblxyXG5sZXQgbWVzc2FnZUJveCA9IG5ldyBNZXNzYWdlQm94KCk7XHJcbmxldCBNZXNzYWdlVGlwcyA9IHtcclxuICBuYW1lOiBcIm1lc3NhZ2VCb3hcIixcclxuICBtZXNzYWdlKHR5cGUsIG9wdGlvbnMpIHtcclxuICAgIHJldHVybiBtZXNzYWdlQm94LmNyZWF0ZUVsZW1lbnQodHlwZSwgb3B0aW9ucyk7XHJcbiAgfSxcclxuICBpbmZvKG9wdGlvbnMpIHtcclxuICAgIHJldHVybiB0aGlzLm1lc3NhZ2UoXCJpbmZvXCIsIG9wdGlvbnMpO1xyXG4gIH0sXHJcbiAgc3VjY2VzcyhvcHRpb25zKSB7XHJcbiAgICByZXR1cm4gdGhpcy5tZXNzYWdlKFwic3VjY2Vzc1wiLCBvcHRpb25zKTtcclxuICB9LFxyXG4gIGVycm9yKG9wdGlvbnMpIHtcclxuICAgIHJldHVybiB0aGlzLm1lc3NhZ2UoXCJlcnJvclwiLCBvcHRpb25zKTtcclxuICB9LFxyXG4gIHdhcm5pbmcob3B0aW9ucykge1xyXG4gICAgcmV0dXJuIHRoaXMubWVzc2FnZShcIndhcm5pbmdcIiwgb3B0aW9ucyk7XHJcbiAgfSxcclxufTtcclxuXHJcbi8vIFZ1ZS5wcm90b3R5cGUuJG1lc3NhZ2UgPSBNZXNzYWdlVGlwcztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IE1lc3NhZ2VUaXBzO1xyXG4iLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL3hiLW1lc3NhZ2UtdGlwcy52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MmYzYjFjYjQmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4veGItbWVzc2FnZS10aXBzLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz10cyZcIlxuZXhwb3J0ICogZnJvbSBcIi4veGItbWVzc2FnZS10aXBzLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz10cyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIG51bGwsXG4gIG51bGxcbiAgXG4pXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIHZhciBhcGkgPSByZXF1aXJlKFwiRDpcXFxcWGItQmFzaWMtQ29tcG9uZW50c1xcXFxub2RlX21vZHVsZXNcXFxcdnVlLWhvdC1yZWxvYWQtYXBpXFxcXGRpc3RcXFxcaW5kZXguanNcIilcbiAgYXBpLmluc3RhbGwocmVxdWlyZSgndnVlJykpXG4gIGlmIChhcGkuY29tcGF0aWJsZSkge1xuICAgIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgICBpZiAoIW1vZHVsZS5ob3QuZGF0YSkge1xuICAgICAgYXBpLmNyZWF0ZVJlY29yZCgnMmYzYjFjYjQnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbG9hZCgnMmYzYjFjYjQnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL3hiLW1lc3NhZ2UtdGlwcy52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MmYzYjFjYjQmXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGFwaS5yZXJlbmRlcignMmYzYjFjYjQnLCB7XG4gICAgICAgIHJlbmRlcjogcmVuZGVyLFxuICAgICAgICBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZuc1xuICAgICAgfSlcbiAgICB9KVxuICB9XG59XG5jb21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcInBhY2thZ2VzL3hiLW1lc3NhZ2UtdGlwcy9zcmMveGItbWVzc2FnZS10aXBzLnZ1ZVwiXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4veGItcG9wdGlwLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD1mZjdmYzM2OCZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi94Yi1wb3B0aXAudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi94Yi1wb3B0aXAudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgbnVsbCxcbiAgbnVsbFxuICBcbilcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgdmFyIGFwaSA9IHJlcXVpcmUoXCJEOlxcXFxYYi1CYXNpYy1Db21wb25lbnRzXFxcXG5vZGVfbW9kdWxlc1xcXFx2dWUtaG90LXJlbG9hZC1hcGlcXFxcZGlzdFxcXFxpbmRleC5qc1wiKVxuICBhcGkuaW5zdGFsbChyZXF1aXJlKCd2dWUnKSlcbiAgaWYgKGFwaS5jb21wYXRpYmxlKSB7XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICAgIGlmICghbW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgICBhcGkuY3JlYXRlUmVjb3JkKCdmZjdmYzM2OCcsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVsb2FkKCdmZjdmYzM2OCcsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH1cbiAgICBtb2R1bGUuaG90LmFjY2VwdChcIi4veGItcG9wdGlwLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD1mZjdmYzM2OCZcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgYXBpLnJlcmVuZGVyKCdmZjdmYzM2OCcsIHtcbiAgICAgICAgcmVuZGVyOiByZW5kZXIsXG4gICAgICAgIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn1cbmNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwicGFja2FnZXMveGItcG9wdGlwL3NyYy94Yi1wb3B0aXAudnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwiaW1wb3J0IHsgUGx1Z2luT2JqZWN0IH0gZnJvbSBcInZ1ZVwiO1xyXG5pbXBvcnQgWGJQb3B1cFdpbmRvdyBmcm9tIFwiLi9zcmMveGItcG9wdXAtd2luZG93LnZ1ZVwiO1xyXG5leHBvcnQgZGVmYXVsdCBYYlBvcHVwV2luZG93O1xyXG5cclxuZXhwb3J0IGNvbnN0IHhiUG9wdXBXaW5kb3c6IFBsdWdpbk9iamVjdDxYYlBvcHVwV2luZG93PiA9IHtcclxuICBpbnN0YWxsOiAoVnVlKSA9PiB7XHJcbiAgICBWdWUuY29tcG9uZW50KFwiWGJQb3B1cFdpbmRvd1wiLCBYYlBvcHVwV2luZG93KTtcclxuICB9LFxyXG59OyIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4veGItcG9wdXAtd2luZG93LnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD1iOTQyOGZjYyZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi94Yi1wb3B1cC13aW5kb3cudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi94Yi1wb3B1cC13aW5kb3cudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgbnVsbCxcbiAgbnVsbFxuICBcbilcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgdmFyIGFwaSA9IHJlcXVpcmUoXCJEOlxcXFxYYi1CYXNpYy1Db21wb25lbnRzXFxcXG5vZGVfbW9kdWxlc1xcXFx2dWUtaG90LXJlbG9hZC1hcGlcXFxcZGlzdFxcXFxpbmRleC5qc1wiKVxuICBhcGkuaW5zdGFsbChyZXF1aXJlKCd2dWUnKSlcbiAgaWYgKGFwaS5jb21wYXRpYmxlKSB7XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICAgIGlmICghbW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgICBhcGkuY3JlYXRlUmVjb3JkKCdiOTQyOGZjYycsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVsb2FkKCdiOTQyOGZjYycsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH1cbiAgICBtb2R1bGUuaG90LmFjY2VwdChcIi4veGItcG9wdXAtd2luZG93LnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD1iOTQyOGZjYyZcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgYXBpLnJlcmVuZGVyKCdiOTQyOGZjYycsIHtcbiAgICAgICAgcmVuZGVyOiByZW5kZXIsXG4gICAgICAgIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn1cbmNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwicGFja2FnZXMveGItcG9wdXAtd2luZG93L3NyYy94Yi1wb3B1cC13aW5kb3cudnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwiZXhwb3J0IGRlZmF1bHQge1xuICBtZXRob2RzOiB7XG4gICAgY2hlY2tTY3JvbGxCYXIoKSB7XG4gICAgICBsZXQgZnVsbFdpbmRvd1dpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XG4gICAgICBpZiAoIWZ1bGxXaW5kb3dXaWR0aCkge1xuICAgICAgICAvLyB3b3JrYXJvdW5kIGZvciBtaXNzaW5nIHdpbmRvdy5pbm5lcldpZHRoIGluIElFOFxuICAgICAgICBjb25zdCBkb2N1bWVudEVsZW1lbnRSZWN0ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICBmdWxsV2luZG93V2lkdGggPSBkb2N1bWVudEVsZW1lbnRSZWN0LnJpZ2h0IC0gTWF0aC5hYnMoZG9jdW1lbnRFbGVtZW50UmVjdC5sZWZ0KTtcbiAgICAgIH1cbiAgICAgIHRoaXMuYm9keUlzT3ZlcmZsb3dpbmcgPSBkb2N1bWVudC5ib2R5LmNsaWVudFdpZHRoIDwgZnVsbFdpbmRvd1dpZHRoO1xuICAgICAgaWYgKHRoaXMuYm9keUlzT3ZlcmZsb3dpbmcpIHtcbiAgICAgICAgdGhpcy5zY3JvbGxCYXJXaWR0aCA9IHRoaXMuZ2V0U2Nyb2xsQmFyU2l6ZSgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgc2V0U2Nyb2xsQmFyKCkge1xuICAgICAgaWYgKHRoaXMuYm9keUlzT3ZlcmZsb3dpbmcgJiYgdGhpcy5zY3JvbGxCYXJXaWR0aCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUucGFkZGluZ1JpZ2h0ID0gYCR7dGhpcy5zY3JvbGxCYXJXaWR0aH1weGA7XG4gICAgICB9XG4gICAgfSxcbiAgICByZXNldFNjcm9sbEJhcigpIHtcbiAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUucGFkZGluZ1JpZ2h0ID0gXCJcIjtcbiAgICB9LFxuICAgIGFkZFNjcm9sbEVmZmVjdCgpIHtcbiAgICAgIHRoaXMuY2hlY2tTY3JvbGxCYXIoKTtcbiAgICAgIHRoaXMuc2V0U2Nyb2xsQmFyKCk7XG4gICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93ID0gXCJoaWRkZW5cIjtcbiAgICB9LFxuICAgIHJlbW92ZVNjcm9sbEVmZmVjdCgpIHtcbiAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUub3ZlcmZsb3cgPSBcIlwiO1xuICAgICAgdGhpcy5yZXNldFNjcm9sbEJhcigpO1xuICAgIH0sXG4gICAgZ2V0U2Nyb2xsQmFyU2l6ZShmcmVzaCkge1xuICAgICAgbGV0IGNhY2hlZDtcbiAgICAgIGlmIChmcmVzaCB8fCBjYWNoZWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb25zdCBpbm5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIGlubmVyLnN0eWxlLndpZHRoID0gXCIxMDAlXCI7XG4gICAgICAgIGlubmVyLnN0eWxlLmhlaWdodCA9IFwiMjAwcHhcIjtcblxuICAgICAgICBjb25zdCBvdXRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIGNvbnN0IG91dGVyU3R5bGUgPSBvdXRlci5zdHlsZTtcblxuICAgICAgICBvdXRlclN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuICAgICAgICBvdXRlclN0eWxlLnRvcCA9IFwiMFwiO1xuICAgICAgICBvdXRlclN0eWxlLmxlZnQgPSBcIjBcIjtcbiAgICAgICAgb3V0ZXJTdHlsZS5wb2ludGVyRXZlbnRzID0gXCJub25lXCI7XG4gICAgICAgIG91dGVyU3R5bGUudmlzaWJpbGl0eSA9IFwiaGlkZGVuXCI7XG4gICAgICAgIG91dGVyU3R5bGUud2lkdGggPSBcIjIwMHB4XCI7XG4gICAgICAgIG91dGVyU3R5bGUuaGVpZ2h0ID0gXCIxNTBweFwiO1xuICAgICAgICBvdXRlclN0eWxlLm92ZXJmbG93ID0gXCJoaWRkZW5cIjtcblxuICAgICAgICBvdXRlci5hcHBlbmRDaGlsZChpbm5lcik7XG5cbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChvdXRlcik7XG5cbiAgICAgICAgY29uc3Qgd2lkdGhDb250YWluZWQgPSBpbm5lci5vZmZzZXRXaWR0aDtcbiAgICAgICAgb3V0ZXIuc3R5bGUub3ZlcmZsb3cgPSBcInNjcm9sbFwiO1xuICAgICAgICBsZXQgd2lkdGhTY3JvbGwgPSBpbm5lci5vZmZzZXRXaWR0aDtcblxuICAgICAgICBpZiAod2lkdGhDb250YWluZWQgPT09IHdpZHRoU2Nyb2xsKSB7XG4gICAgICAgICAgd2lkdGhTY3JvbGwgPSBvdXRlci5jbGllbnRXaWR0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQob3V0ZXIpO1xuXG4gICAgICAgIGNhY2hlZCA9IHdpZHRoQ29udGFpbmVkIC0gd2lkdGhTY3JvbGw7XG4gICAgICB9XG4gICAgICByZXR1cm4gY2FjaGVkO1xuICAgIH0sXG4gIH0sXG59O1xuIiwiaW1wb3J0IHsgUGx1Z2luT2JqZWN0IH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IFhiUmFkaW9Hcm91cCBmcm9tIFwiLi4veGItcmFkaW8vc3JjL3hiLXJhZGlvLWdyb3VwLnZ1ZVwiO1xuZXhwb3J0IGRlZmF1bHQgWGJSYWRpb0dyb3VwO1xuXG5leHBvcnQgY29uc3QgeGJSYWRpb0dyb3VwOiBQbHVnaW5PYmplY3Q8WGJSYWRpb0dyb3VwPiA9IHtcbiAgaW5zdGFsbDogKFZ1ZSkgPT4ge1xuICAgIFZ1ZS5jb21wb25lbnQoXCJYYlJhZGlvR3JvdXBcIiwgWGJSYWRpb0dyb3VwKTtcbiAgfSxcbn07XG4iLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL3hiLXJhZGlvLWdyb3VwLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0yNWZjNDBkOCZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi94Yi1yYWRpby1ncm91cC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9dHMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL3hiLXJhZGlvLWdyb3VwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz10cyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIG51bGwsXG4gIG51bGxcbiAgXG4pXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIHZhciBhcGkgPSByZXF1aXJlKFwiRDpcXFxcWGItQmFzaWMtQ29tcG9uZW50c1xcXFxub2RlX21vZHVsZXNcXFxcdnVlLWhvdC1yZWxvYWQtYXBpXFxcXGRpc3RcXFxcaW5kZXguanNcIilcbiAgYXBpLmluc3RhbGwocmVxdWlyZSgndnVlJykpXG4gIGlmIChhcGkuY29tcGF0aWJsZSkge1xuICAgIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgICBpZiAoIW1vZHVsZS5ob3QuZGF0YSkge1xuICAgICAgYXBpLmNyZWF0ZVJlY29yZCgnMjVmYzQwZDgnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbG9hZCgnMjVmYzQwZDgnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL3hiLXJhZGlvLWdyb3VwLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0yNWZjNDBkOCZcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgYXBpLnJlcmVuZGVyKCcyNWZjNDBkOCcsIHtcbiAgICAgICAgcmVuZGVyOiByZW5kZXIsXG4gICAgICAgIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn1cbmNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwicGFja2FnZXMveGItcmFkaW8vc3JjL3hiLXJhZGlvLWdyb3VwLnZ1ZVwiXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyIsImltcG9ydCB7IFBsdWdpbk9iamVjdCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCBYYlJhZGlvIGZyb20gXCIuL3NyYy94Yi1yYWRpby52dWVcIjtcbmV4cG9ydCBkZWZhdWx0IFhiUmFkaW87XG5cbmV4cG9ydCBjb25zdCB4YlJhZGlvOiBQbHVnaW5PYmplY3Q8WGJSYWRpbz4gPSB7XG4gIGluc3RhbGw6IChWdWUpID0+IHtcbiAgICBWdWUuY29tcG9uZW50KFwiWGJSYWRpb1wiLCBYYlJhZGlvKTtcbiAgfSxcbn07XG4iLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL3hiLXJhZGlvLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD03OTY0ZjFlNiZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi94Yi1yYWRpby52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9dHMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL3hiLXJhZGlvLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz10cyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIG51bGwsXG4gIG51bGxcbiAgXG4pXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIHZhciBhcGkgPSByZXF1aXJlKFwiRDpcXFxcWGItQmFzaWMtQ29tcG9uZW50c1xcXFxub2RlX21vZHVsZXNcXFxcdnVlLWhvdC1yZWxvYWQtYXBpXFxcXGRpc3RcXFxcaW5kZXguanNcIilcbiAgYXBpLmluc3RhbGwocmVxdWlyZSgndnVlJykpXG4gIGlmIChhcGkuY29tcGF0aWJsZSkge1xuICAgIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgICBpZiAoIW1vZHVsZS5ob3QuZGF0YSkge1xuICAgICAgYXBpLmNyZWF0ZVJlY29yZCgnNzk2NGYxZTYnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbG9hZCgnNzk2NGYxZTYnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL3hiLXJhZGlvLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD03OTY0ZjFlNiZcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgYXBpLnJlcmVuZGVyKCc3OTY0ZjFlNicsIHtcbiAgICAgICAgcmVuZGVyOiByZW5kZXIsXG4gICAgICAgIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn1cbmNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwicGFja2FnZXMveGItcmFkaW8vc3JjL3hiLXJhZGlvLnZ1ZVwiXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyIsImltcG9ydCB7IFBsdWdpbk9iamVjdCB9IGZyb20gXCJ2dWVcIjtcclxuaW1wb3J0IFhiU2VhcmNoQnRuIGZyb20gXCIuL3NyYy94Yi1zZWFyY2gtYnRuLnZ1ZVwiO1xyXG5leHBvcnQgZGVmYXVsdCBYYlNlYXJjaEJ0bjtcclxuXHJcbmV4cG9ydCBjb25zdCB4YlNlYXJjaEJ0bjogUGx1Z2luT2JqZWN0PFhiU2VhcmNoQnRuPiA9IHtcclxuICBpbnN0YWxsOiAoVnVlKSA9PiB7XHJcbiAgICBWdWUuY29tcG9uZW50KFwiWGJTZWFyY2hCdG5cIiwgWGJTZWFyY2hCdG4pO1xyXG4gIH0sXHJcbn07XHJcbiIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4veGItc2VhcmNoLWJ0bi52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9ZGVkOWYwYjQmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4veGItc2VhcmNoLWJ0bi52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9dHMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL3hiLXNlYXJjaC1idG4udnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgbnVsbCxcbiAgbnVsbFxuICBcbilcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgdmFyIGFwaSA9IHJlcXVpcmUoXCJEOlxcXFxYYi1CYXNpYy1Db21wb25lbnRzXFxcXG5vZGVfbW9kdWxlc1xcXFx2dWUtaG90LXJlbG9hZC1hcGlcXFxcZGlzdFxcXFxpbmRleC5qc1wiKVxuICBhcGkuaW5zdGFsbChyZXF1aXJlKCd2dWUnKSlcbiAgaWYgKGFwaS5jb21wYXRpYmxlKSB7XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICAgIGlmICghbW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgICBhcGkuY3JlYXRlUmVjb3JkKCdkZWQ5ZjBiNCcsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVsb2FkKCdkZWQ5ZjBiNCcsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH1cbiAgICBtb2R1bGUuaG90LmFjY2VwdChcIi4veGItc2VhcmNoLWJ0bi52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9ZGVkOWYwYjQmXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGFwaS5yZXJlbmRlcignZGVkOWYwYjQnLCB7XG4gICAgICAgIHJlbmRlcjogcmVuZGVyLFxuICAgICAgICBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZuc1xuICAgICAgfSlcbiAgICB9KVxuICB9XG59XG5jb21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcInBhY2thZ2VzL3hiLXNlYXJjaC1idG4vc3JjL3hiLXNlYXJjaC1idG4udnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwiaW1wb3J0IHsgUGx1Z2luT2JqZWN0IH0gZnJvbSBcInZ1ZVwiO1xyXG5pbXBvcnQgWGJUYWJsZSBmcm9tIFwiLi9zcmMveGItdGFibGUudnVlXCI7XHJcbmV4cG9ydCBkZWZhdWx0IFhiVGFibGU7XHJcblxyXG5leHBvcnQgY29uc3QgeGJUYWJsZTogUGx1Z2luT2JqZWN0PFhiVGFibGU+ID0ge1xyXG4gIGluc3RhbGw6IChWdWUpID0+IHtcclxuICAgIFZ1ZS5jb21wb25lbnQoXCJYYlRhYmxlXCIsIFhiVGFibGUpO1xyXG4gIH0sXHJcbn07XHJcbiIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4veGItdGFibGUudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTM1YzcxMGM2JlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL3hiLXRhYmxlLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz10cyZcIlxuZXhwb3J0ICogZnJvbSBcIi4veGItdGFibGUudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgbnVsbCxcbiAgbnVsbFxuICBcbilcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgdmFyIGFwaSA9IHJlcXVpcmUoXCJEOlxcXFxYYi1CYXNpYy1Db21wb25lbnRzXFxcXG5vZGVfbW9kdWxlc1xcXFx2dWUtaG90LXJlbG9hZC1hcGlcXFxcZGlzdFxcXFxpbmRleC5qc1wiKVxuICBhcGkuaW5zdGFsbChyZXF1aXJlKCd2dWUnKSlcbiAgaWYgKGFwaS5jb21wYXRpYmxlKSB7XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICAgIGlmICghbW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgICBhcGkuY3JlYXRlUmVjb3JkKCczNWM3MTBjNicsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVsb2FkKCczNWM3MTBjNicsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH1cbiAgICBtb2R1bGUuaG90LmFjY2VwdChcIi4veGItdGFibGUudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTM1YzcxMGM2JlwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBhcGkucmVyZW5kZXIoJzM1YzcxMGM2Jywge1xuICAgICAgICByZW5kZXI6IHJlbmRlcixcbiAgICAgICAgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnNcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxufVxuY29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJwYWNrYWdlcy94Yi10YWJsZS9zcmMveGItdGFibGUudnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi94Yi10YWJsZS1oZWFkLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD01YmNlNjIzNyZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi94Yi10YWJsZS1oZWFkLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz10cyZcIlxuZXhwb3J0ICogZnJvbSBcIi4veGItdGFibGUtaGVhZC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9dHMmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBudWxsLFxuICBudWxsXG4gIFxuKVxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkge1xuICB2YXIgYXBpID0gcmVxdWlyZShcIkQ6XFxcXFhiLUJhc2ljLUNvbXBvbmVudHNcXFxcbm9kZV9tb2R1bGVzXFxcXHZ1ZS1ob3QtcmVsb2FkLWFwaVxcXFxkaXN0XFxcXGluZGV4LmpzXCIpXG4gIGFwaS5pbnN0YWxsKHJlcXVpcmUoJ3Z1ZScpKVxuICBpZiAoYXBpLmNvbXBhdGlibGUpIHtcbiAgICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gICAgaWYgKCFtb2R1bGUuaG90LmRhdGEpIHtcbiAgICAgIGFwaS5jcmVhdGVSZWNvcmQoJzViY2U2MjM3JywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZWxvYWQoJzViY2U2MjM3JywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfVxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi94Yi10YWJsZS1oZWFkLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD01YmNlNjIzNyZcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgYXBpLnJlcmVuZGVyKCc1YmNlNjIzNycsIHtcbiAgICAgICAgcmVuZGVyOiByZW5kZXIsXG4gICAgICAgIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn1cbmNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwicGFja2FnZXMveGItdGFibGUvc3JjL3hiLXRhYmxlLWhlYWQudnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwiZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgbmFtZTogJ1RhYmxlUmVuZGVySGVhZGVyJyxcclxuICAgIGZ1bmN0aW9uYWw6IHRydWUsXHJcbiAgICBwcm9wczoge1xyXG4gICAgICAgIHJlbmRlcjogRnVuY3Rpb24sXHJcbiAgICAgICAgY29sdW1uOiBPYmplY3QsXHJcbiAgICAgICAgaW5kZXg6IE51bWJlclxyXG4gICAgfSxcclxuICAgIHJlbmRlcjogKGgsIGN0eCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHBhcmFtcyA9IHtcclxuICAgICAgICAgICAgY29sdW1uOiBjdHgucHJvcHMuY29sdW1uLFxyXG4gICAgICAgICAgICBpbmRleDogY3R4LnByb3BzLmluZGV4XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gY3R4LnByb3BzLnJlbmRlcihoLCBwYXJhbXMpO1xyXG4gICAgfVxyXG59OyIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4veGItdGFibGUtYm9keS52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MDNjYzFjZjkmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4veGItdGFibGUtYm9keS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9dHMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL3hiLXRhYmxlLWJvZHkudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgbnVsbCxcbiAgbnVsbFxuICBcbilcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgdmFyIGFwaSA9IHJlcXVpcmUoXCJEOlxcXFxYYi1CYXNpYy1Db21wb25lbnRzXFxcXG5vZGVfbW9kdWxlc1xcXFx2dWUtaG90LXJlbG9hZC1hcGlcXFxcZGlzdFxcXFxpbmRleC5qc1wiKVxuICBhcGkuaW5zdGFsbChyZXF1aXJlKCd2dWUnKSlcbiAgaWYgKGFwaS5jb21wYXRpYmxlKSB7XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICAgIGlmICghbW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgICBhcGkuY3JlYXRlUmVjb3JkKCcwM2NjMWNmOScsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVsb2FkKCcwM2NjMWNmOScsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH1cbiAgICBtb2R1bGUuaG90LmFjY2VwdChcIi4veGItdGFibGUtYm9keS52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MDNjYzFjZjkmXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGFwaS5yZXJlbmRlcignMDNjYzFjZjknLCB7XG4gICAgICAgIHJlbmRlcjogcmVuZGVyLFxuICAgICAgICBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZuc1xuICAgICAgfSlcbiAgICB9KVxuICB9XG59XG5jb21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcInBhY2thZ2VzL3hiLXRhYmxlL3NyYy94Yi10YWJsZS1ib2R5LnZ1ZVwiXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4veGItdGFibGUtdHIudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTIwMzBmMGQ2JlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL3hiLXRhYmxlLXRyLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz10cyZcIlxuZXhwb3J0ICogZnJvbSBcIi4veGItdGFibGUtdHIudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgbnVsbCxcbiAgbnVsbFxuICBcbilcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgdmFyIGFwaSA9IHJlcXVpcmUoXCJEOlxcXFxYYi1CYXNpYy1Db21wb25lbnRzXFxcXG5vZGVfbW9kdWxlc1xcXFx2dWUtaG90LXJlbG9hZC1hcGlcXFxcZGlzdFxcXFxpbmRleC5qc1wiKVxuICBhcGkuaW5zdGFsbChyZXF1aXJlKCd2dWUnKSlcbiAgaWYgKGFwaS5jb21wYXRpYmxlKSB7XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICAgIGlmICghbW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgICBhcGkuY3JlYXRlUmVjb3JkKCcyMDMwZjBkNicsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVsb2FkKCcyMDMwZjBkNicsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH1cbiAgICBtb2R1bGUuaG90LmFjY2VwdChcIi4veGItdGFibGUtdHIudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTIwMzBmMGQ2JlwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBhcGkucmVyZW5kZXIoJzIwMzBmMGQ2Jywge1xuICAgICAgICByZW5kZXI6IHJlbmRlcixcbiAgICAgICAgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnNcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxufVxuY29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJwYWNrYWdlcy94Yi10YWJsZS9zcmMveGItdGFibGUtdHIudnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi94Yi1jZWxsLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD02MzcyNTU5YSZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi94Yi1jZWxsLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz10cyZcIlxuZXhwb3J0ICogZnJvbSBcIi4veGItY2VsbC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9dHMmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBudWxsLFxuICBudWxsXG4gIFxuKVxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkge1xuICB2YXIgYXBpID0gcmVxdWlyZShcIkQ6XFxcXFhiLUJhc2ljLUNvbXBvbmVudHNcXFxcbm9kZV9tb2R1bGVzXFxcXHZ1ZS1ob3QtcmVsb2FkLWFwaVxcXFxkaXN0XFxcXGluZGV4LmpzXCIpXG4gIGFwaS5pbnN0YWxsKHJlcXVpcmUoJ3Z1ZScpKVxuICBpZiAoYXBpLmNvbXBhdGlibGUpIHtcbiAgICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gICAgaWYgKCFtb2R1bGUuaG90LmRhdGEpIHtcbiAgICAgIGFwaS5jcmVhdGVSZWNvcmQoJzYzNzI1NTlhJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZWxvYWQoJzYzNzI1NTlhJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfVxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi94Yi1jZWxsLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD02MzcyNTU5YSZcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgYXBpLnJlcmVuZGVyKCc2MzcyNTU5YScsIHtcbiAgICAgICAgcmVuZGVyOiByZW5kZXIsXG4gICAgICAgIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn1cbmNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwicGFja2FnZXMveGItdGFibGUvc3JjL3hiLWNlbGwudnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwiLypcclxuICBpbnNwaXJlZCBieSBodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9yZWFjdC1jc3YtZG93bmxvYWRlclxyXG4gIG5vdyByZW1vdmVkIGZyb20gR2l0aHViXHJcbiovXHJcblxyXG5jb25zdCBuZXdMaW5lID0gXCJcXHJcXG5cIjtcclxuY29uc3QgYXBwZW5kTGluZSA9IChjb250ZW50LCByb3csIHsgc2VwYXJhdG9yLCBxdW90ZWQgfSkgPT4ge1xyXG4gIGNvbnN0IGxpbmUgPSByb3cubWFwKChkYXRhKSA9PiB7XHJcbiAgICBpZiAoIXF1b3RlZCkge1xyXG4gICAgICByZXR1cm4gZGF0YTtcclxuICAgIH1cclxuICAgIC8vIHF1b3RlIGRhdGFcclxuICAgIGRhdGEgPSB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiA/IGRhdGEucmVwbGFjZSgvXCIvZywgJ1wiJykgOiBkYXRhO1xyXG4gICAgcmV0dXJuIGBcIiR7ZGF0YX1cImA7XHJcbiAgfSk7XHJcbiAgY29udGVudC5wdXNoKGxpbmUuam9pbihzZXBhcmF0b3IpKTtcclxufTtcclxuXHJcbmNvbnN0IGRlZmF1bHRzID0ge1xyXG4gIHNlcGFyYXRvcjogXCIsXCIsXHJcbiAgcXVvdGVkOiBmYWxzZSxcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNzdihjb2x1bW5zLCBkYXRhcywgb3B0aW9ucywgbm9IZWFkZXIgPSBmYWxzZSkge1xyXG4gIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0cywgb3B0aW9ucyk7XHJcbiAgbGV0IGNvbHVtbk9yZGVyO1xyXG4gIGNvbnN0IGNvbnRlbnQ6IGFueVtdID0gW107XHJcbiAgY29uc3QgY29sdW1uOiBhbnlbXSA9IFtdO1xyXG5cclxuICBpZiAoY29sdW1ucykge1xyXG4gICAgY29sdW1uT3JkZXIgPSBjb2x1bW5zLm1hcCgodikgPT4ge1xyXG4gICAgICBpZiAodHlwZW9mIHYgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICByZXR1cm4gdjtcclxuICAgICAgfVxyXG4gICAgICBpZiAoIW5vSGVhZGVyKSB7XHJcbiAgICAgICAgY29sdW1uLnB1c2godHlwZW9mIHYudGl0bGUgIT09IFwidW5kZWZpbmVkXCIgPyB2LnRpdGxlIDogdi5rZXkpO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiB2LmtleTtcclxuICAgIH0pO1xyXG4gICAgaWYgKGNvbHVtbi5sZW5ndGggPiAwKSB7XHJcbiAgICAgIGFwcGVuZExpbmUoY29udGVudCwgY29sdW1uLCBvcHRpb25zKTtcclxuICAgIH1cclxuICB9IGVsc2Uge1xyXG4gICAgY29sdW1uT3JkZXIgPSBbXTtcclxuICAgIGRhdGFzLmZvckVhY2goKHYpID0+IHtcclxuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHYpKSB7XHJcbiAgICAgICAgY29sdW1uT3JkZXIgPSBjb2x1bW5PcmRlci5jb25jYXQoT2JqZWN0LmtleXModikpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIGlmIChjb2x1bW5PcmRlci5sZW5ndGggPiAwKSB7XHJcbiAgICAgIGNvbHVtbk9yZGVyID0gY29sdW1uT3JkZXIuZmlsdGVyKCh2YWx1ZSwgaW5kZXgsIHNlbGYpID0+IHNlbGYuaW5kZXhPZih2YWx1ZSkgPT09IGluZGV4KTtcclxuICAgICAgaWYgKCFub0hlYWRlcikge1xyXG4gICAgICAgIGFwcGVuZExpbmUoY29udGVudCwgY29sdW1uT3JkZXIsIG9wdGlvbnMpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBpZiAoQXJyYXkuaXNBcnJheShkYXRhcykpIHtcclxuICAgIGRhdGFzLmZvckVhY2goKHJvdykgPT4ge1xyXG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkocm93KSkge1xyXG4gICAgICAgIHJvdyA9IGNvbHVtbk9yZGVyLm1hcCgoaykgPT4gKHR5cGVvZiByb3dba10gIT09IFwidW5kZWZpbmVkXCIgPyByb3dba10gOiBcIlwiKSk7XHJcbiAgICAgIH1cclxuICAgICAgYXBwZW5kTGluZShjb250ZW50LCByb3csIG9wdGlvbnMpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG4gIHJldHVybiBjb250ZW50LmpvaW4obmV3TGluZSk7XHJcbn1cclxuIiwidmFyIFN0YWNrID0gcmVxdWlyZSgnLi9fU3RhY2snKSxcbiAgICBhcnJheUVhY2ggPSByZXF1aXJlKCcuL19hcnJheUVhY2gnKSxcbiAgICBhc3NpZ25WYWx1ZSA9IHJlcXVpcmUoJy4vX2Fzc2lnblZhbHVlJyksXG4gICAgYmFzZUFzc2lnbiA9IHJlcXVpcmUoJy4vX2Jhc2VBc3NpZ24nKSxcbiAgICBiYXNlQXNzaWduSW4gPSByZXF1aXJlKCcuL19iYXNlQXNzaWduSW4nKSxcbiAgICBjbG9uZUJ1ZmZlciA9IHJlcXVpcmUoJy4vX2Nsb25lQnVmZmVyJyksXG4gICAgY29weUFycmF5ID0gcmVxdWlyZSgnLi9fY29weUFycmF5JyksXG4gICAgY29weVN5bWJvbHMgPSByZXF1aXJlKCcuL19jb3B5U3ltYm9scycpLFxuICAgIGNvcHlTeW1ib2xzSW4gPSByZXF1aXJlKCcuL19jb3B5U3ltYm9sc0luJyksXG4gICAgZ2V0QWxsS2V5cyA9IHJlcXVpcmUoJy4vX2dldEFsbEtleXMnKSxcbiAgICBnZXRBbGxLZXlzSW4gPSByZXF1aXJlKCcuL19nZXRBbGxLZXlzSW4nKSxcbiAgICBnZXRUYWcgPSByZXF1aXJlKCcuL19nZXRUYWcnKSxcbiAgICBpbml0Q2xvbmVBcnJheSA9IHJlcXVpcmUoJy4vX2luaXRDbG9uZUFycmF5JyksXG4gICAgaW5pdENsb25lQnlUYWcgPSByZXF1aXJlKCcuL19pbml0Q2xvbmVCeVRhZycpLFxuICAgIGluaXRDbG9uZU9iamVjdCA9IHJlcXVpcmUoJy4vX2luaXRDbG9uZU9iamVjdCcpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc0J1ZmZlciA9IHJlcXVpcmUoJy4vaXNCdWZmZXInKSxcbiAgICBpc01hcCA9IHJlcXVpcmUoJy4vaXNNYXAnKSxcbiAgICBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKSxcbiAgICBpc1NldCA9IHJlcXVpcmUoJy4vaXNTZXQnKSxcbiAgICBrZXlzID0gcmVxdWlyZSgnLi9rZXlzJyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIGNsb25pbmcuICovXG52YXIgQ0xPTkVfREVFUF9GTEFHID0gMSxcbiAgICBDTE9ORV9GTEFUX0ZMQUcgPSAyLFxuICAgIENMT05FX1NZTUJPTFNfRkxBRyA9IDQ7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhcmdzVGFnID0gJ1tvYmplY3QgQXJndW1lbnRzXScsXG4gICAgYXJyYXlUYWcgPSAnW29iamVjdCBBcnJheV0nLFxuICAgIGJvb2xUYWcgPSAnW29iamVjdCBCb29sZWFuXScsXG4gICAgZGF0ZVRhZyA9ICdbb2JqZWN0IERhdGVdJyxcbiAgICBlcnJvclRhZyA9ICdbb2JqZWN0IEVycm9yXScsXG4gICAgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG4gICAgZ2VuVGFnID0gJ1tvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dJyxcbiAgICBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICBudW1iZXJUYWcgPSAnW29iamVjdCBOdW1iZXJdJyxcbiAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJyxcbiAgICByZWdleHBUYWcgPSAnW29iamVjdCBSZWdFeHBdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJyxcbiAgICBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJyxcbiAgICB3ZWFrTWFwVGFnID0gJ1tvYmplY3QgV2Vha01hcF0nO1xuXG52YXIgYXJyYXlCdWZmZXJUYWcgPSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nLFxuICAgIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJyxcbiAgICBmbG9hdDMyVGFnID0gJ1tvYmplY3QgRmxvYXQzMkFycmF5XScsXG4gICAgZmxvYXQ2NFRhZyA9ICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nLFxuICAgIGludDhUYWcgPSAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICBpbnQxNlRhZyA9ICdbb2JqZWN0IEludDE2QXJyYXldJyxcbiAgICBpbnQzMlRhZyA9ICdbb2JqZWN0IEludDMyQXJyYXldJyxcbiAgICB1aW50OFRhZyA9ICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICB1aW50OENsYW1wZWRUYWcgPSAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nLFxuICAgIHVpbnQxNlRhZyA9ICdbb2JqZWN0IFVpbnQxNkFycmF5XScsXG4gICAgdWludDMyVGFnID0gJ1tvYmplY3QgVWludDMyQXJyYXldJztcblxuLyoqIFVzZWQgdG8gaWRlbnRpZnkgYHRvU3RyaW5nVGFnYCB2YWx1ZXMgc3VwcG9ydGVkIGJ5IGBfLmNsb25lYC4gKi9cbnZhciBjbG9uZWFibGVUYWdzID0ge307XG5jbG9uZWFibGVUYWdzW2FyZ3NUYWddID0gY2xvbmVhYmxlVGFnc1thcnJheVRhZ10gPVxuY2xvbmVhYmxlVGFnc1thcnJheUJ1ZmZlclRhZ10gPSBjbG9uZWFibGVUYWdzW2RhdGFWaWV3VGFnXSA9XG5jbG9uZWFibGVUYWdzW2Jvb2xUYWddID0gY2xvbmVhYmxlVGFnc1tkYXRlVGFnXSA9XG5jbG9uZWFibGVUYWdzW2Zsb2F0MzJUYWddID0gY2xvbmVhYmxlVGFnc1tmbG9hdDY0VGFnXSA9XG5jbG9uZWFibGVUYWdzW2ludDhUYWddID0gY2xvbmVhYmxlVGFnc1tpbnQxNlRhZ10gPVxuY2xvbmVhYmxlVGFnc1tpbnQzMlRhZ10gPSBjbG9uZWFibGVUYWdzW21hcFRhZ10gPVxuY2xvbmVhYmxlVGFnc1tudW1iZXJUYWddID0gY2xvbmVhYmxlVGFnc1tvYmplY3RUYWddID1cbmNsb25lYWJsZVRhZ3NbcmVnZXhwVGFnXSA9IGNsb25lYWJsZVRhZ3Nbc2V0VGFnXSA9XG5jbG9uZWFibGVUYWdzW3N0cmluZ1RhZ10gPSBjbG9uZWFibGVUYWdzW3N5bWJvbFRhZ10gPVxuY2xvbmVhYmxlVGFnc1t1aW50OFRhZ10gPSBjbG9uZWFibGVUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPVxuY2xvbmVhYmxlVGFnc1t1aW50MTZUYWddID0gY2xvbmVhYmxlVGFnc1t1aW50MzJUYWddID0gdHJ1ZTtcbmNsb25lYWJsZVRhZ3NbZXJyb3JUYWddID0gY2xvbmVhYmxlVGFnc1tmdW5jVGFnXSA9XG5jbG9uZWFibGVUYWdzW3dlYWtNYXBUYWddID0gZmFsc2U7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY2xvbmVgIGFuZCBgXy5jbG9uZURlZXBgIHdoaWNoIHRyYWNrc1xuICogdHJhdmVyc2VkIG9iamVjdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNsb25lLlxuICogQHBhcmFtIHtib29sZWFufSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLlxuICogIDEgLSBEZWVwIGNsb25lXG4gKiAgMiAtIEZsYXR0ZW4gaW5oZXJpdGVkIHByb3BlcnRpZXNcbiAqICA0IC0gQ2xvbmUgc3ltYm9sc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY2xvbmluZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBba2V5XSBUaGUga2V5IG9mIGB2YWx1ZWAuXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIHBhcmVudCBvYmplY3Qgb2YgYHZhbHVlYC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cyBhbmQgdGhlaXIgY2xvbmUgY291bnRlcnBhcnRzLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGNsb25lZCB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gYmFzZUNsb25lKHZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBrZXksIG9iamVjdCwgc3RhY2spIHtcbiAgdmFyIHJlc3VsdCxcbiAgICAgIGlzRGVlcCA9IGJpdG1hc2sgJiBDTE9ORV9ERUVQX0ZMQUcsXG4gICAgICBpc0ZsYXQgPSBiaXRtYXNrICYgQ0xPTkVfRkxBVF9GTEFHLFxuICAgICAgaXNGdWxsID0gYml0bWFzayAmIENMT05FX1NZTUJPTFNfRkxBRztcblxuICBpZiAoY3VzdG9taXplcikge1xuICAgIHJlc3VsdCA9IG9iamVjdCA/IGN1c3RvbWl6ZXIodmFsdWUsIGtleSwgb2JqZWN0LCBzdGFjaykgOiBjdXN0b21pemVyKHZhbHVlKTtcbiAgfVxuICBpZiAocmVzdWx0ICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIHZhciBpc0FyciA9IGlzQXJyYXkodmFsdWUpO1xuICBpZiAoaXNBcnIpIHtcbiAgICByZXN1bHQgPSBpbml0Q2xvbmVBcnJheSh2YWx1ZSk7XG4gICAgaWYgKCFpc0RlZXApIHtcbiAgICAgIHJldHVybiBjb3B5QXJyYXkodmFsdWUsIHJlc3VsdCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciB0YWcgPSBnZXRUYWcodmFsdWUpLFxuICAgICAgICBpc0Z1bmMgPSB0YWcgPT0gZnVuY1RhZyB8fCB0YWcgPT0gZ2VuVGFnO1xuXG4gICAgaWYgKGlzQnVmZmVyKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGNsb25lQnVmZmVyKHZhbHVlLCBpc0RlZXApO1xuICAgIH1cbiAgICBpZiAodGFnID09IG9iamVjdFRhZyB8fCB0YWcgPT0gYXJnc1RhZyB8fCAoaXNGdW5jICYmICFvYmplY3QpKSB7XG4gICAgICByZXN1bHQgPSAoaXNGbGF0IHx8IGlzRnVuYykgPyB7fSA6IGluaXRDbG9uZU9iamVjdCh2YWx1ZSk7XG4gICAgICBpZiAoIWlzRGVlcCkge1xuICAgICAgICByZXR1cm4gaXNGbGF0XG4gICAgICAgICAgPyBjb3B5U3ltYm9sc0luKHZhbHVlLCBiYXNlQXNzaWduSW4ocmVzdWx0LCB2YWx1ZSkpXG4gICAgICAgICAgOiBjb3B5U3ltYm9scyh2YWx1ZSwgYmFzZUFzc2lnbihyZXN1bHQsIHZhbHVlKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghY2xvbmVhYmxlVGFnc1t0YWddKSB7XG4gICAgICAgIHJldHVybiBvYmplY3QgPyB2YWx1ZSA6IHt9O1xuICAgICAgfVxuICAgICAgcmVzdWx0ID0gaW5pdENsb25lQnlUYWcodmFsdWUsIHRhZywgaXNEZWVwKTtcbiAgICB9XG4gIH1cbiAgLy8gQ2hlY2sgZm9yIGNpcmN1bGFyIHJlZmVyZW5jZXMgYW5kIHJldHVybiBpdHMgY29ycmVzcG9uZGluZyBjbG9uZS5cbiAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQodmFsdWUpO1xuICBpZiAoc3RhY2tlZCkge1xuICAgIHJldHVybiBzdGFja2VkO1xuICB9XG4gIHN0YWNrLnNldCh2YWx1ZSwgcmVzdWx0KTtcblxuICBpZiAoaXNTZXQodmFsdWUpKSB7XG4gICAgdmFsdWUuZm9yRWFjaChmdW5jdGlvbihzdWJWYWx1ZSkge1xuICAgICAgcmVzdWx0LmFkZChiYXNlQ2xvbmUoc3ViVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN1YlZhbHVlLCB2YWx1ZSwgc3RhY2spKTtcbiAgICB9KTtcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBpZiAoaXNNYXAodmFsdWUpKSB7XG4gICAgdmFsdWUuZm9yRWFjaChmdW5jdGlvbihzdWJWYWx1ZSwga2V5KSB7XG4gICAgICByZXN1bHQuc2V0KGtleSwgYmFzZUNsb25lKHN1YlZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBrZXksIHZhbHVlLCBzdGFjaykpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHZhciBrZXlzRnVuYyA9IGlzRnVsbFxuICAgID8gKGlzRmxhdCA/IGdldEFsbEtleXNJbiA6IGdldEFsbEtleXMpXG4gICAgOiAoaXNGbGF0ID8ga2V5c0luIDoga2V5cyk7XG5cbiAgdmFyIHByb3BzID0gaXNBcnIgPyB1bmRlZmluZWQgOiBrZXlzRnVuYyh2YWx1ZSk7XG4gIGFycmF5RWFjaChwcm9wcyB8fCB2YWx1ZSwgZnVuY3Rpb24oc3ViVmFsdWUsIGtleSkge1xuICAgIGlmIChwcm9wcykge1xuICAgICAga2V5ID0gc3ViVmFsdWU7XG4gICAgICBzdWJWYWx1ZSA9IHZhbHVlW2tleV07XG4gICAgfVxuICAgIC8vIFJlY3Vyc2l2ZWx5IHBvcHVsYXRlIGNsb25lIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgYXNzaWduVmFsdWUocmVzdWx0LCBrZXksIGJhc2VDbG9uZShzdWJWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwga2V5LCB2YWx1ZSwgc3RhY2spKTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUNsb25lO1xuIiwidmFyIExpc3RDYWNoZSA9IHJlcXVpcmUoJy4vX0xpc3RDYWNoZScpLFxuICAgIHN0YWNrQ2xlYXIgPSByZXF1aXJlKCcuL19zdGFja0NsZWFyJyksXG4gICAgc3RhY2tEZWxldGUgPSByZXF1aXJlKCcuL19zdGFja0RlbGV0ZScpLFxuICAgIHN0YWNrR2V0ID0gcmVxdWlyZSgnLi9fc3RhY2tHZXQnKSxcbiAgICBzdGFja0hhcyA9IHJlcXVpcmUoJy4vX3N0YWNrSGFzJyksXG4gICAgc3RhY2tTZXQgPSByZXF1aXJlKCcuL19zdGFja1NldCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBzdGFjayBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBTdGFjayhlbnRyaWVzKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBMaXN0Q2FjaGUoZW50cmllcyk7XG4gIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYFN0YWNrYC5cblN0YWNrLnByb3RvdHlwZS5jbGVhciA9IHN0YWNrQ2xlYXI7XG5TdGFjay5wcm90b3R5cGVbJ2RlbGV0ZSddID0gc3RhY2tEZWxldGU7XG5TdGFjay5wcm90b3R5cGUuZ2V0ID0gc3RhY2tHZXQ7XG5TdGFjay5wcm90b3R5cGUuaGFzID0gc3RhY2tIYXM7XG5TdGFjay5wcm90b3R5cGUuc2V0ID0gc3RhY2tTZXQ7XG5cbm1vZHVsZS5leHBvcnRzID0gU3RhY2s7XG4iLCIvKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUNsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0gW107XG4gIHRoaXMuc2l6ZSA9IDA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlQ2xlYXI7XG4iLCJ2YXIgYXNzb2NJbmRleE9mID0gcmVxdWlyZSgnLi9fYXNzb2NJbmRleE9mJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBhcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzcGxpY2UgPSBhcnJheVByb3RvLnNwbGljZTtcblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlRGVsZXRlKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIGlmIChpbmRleCA8IDApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIGxhc3RJbmRleCA9IGRhdGEubGVuZ3RoIC0gMTtcbiAgaWYgKGluZGV4ID09IGxhc3RJbmRleCkge1xuICAgIGRhdGEucG9wKCk7XG4gIH0gZWxzZSB7XG4gICAgc3BsaWNlLmNhbGwoZGF0YSwgaW5kZXgsIDEpO1xuICB9XG4gIC0tdGhpcy5zaXplO1xuICByZXR1cm4gdHJ1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0Q2FjaGVEZWxldGU7XG4iLCJ2YXIgYXNzb2NJbmRleE9mID0gcmVxdWlyZSgnLi9fYXNzb2NJbmRleE9mJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUdldChrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICByZXR1cm4gaW5kZXggPCAwID8gdW5kZWZpbmVkIDogZGF0YVtpbmRleF1bMV07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlR2V0O1xuIiwidmFyIGFzc29jSW5kZXhPZiA9IHJlcXVpcmUoJy4vX2Fzc29jSW5kZXhPZicpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlSGFzKGtleSkge1xuICByZXR1cm4gYXNzb2NJbmRleE9mKHRoaXMuX19kYXRhX18sIGtleSkgPiAtMTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0Q2FjaGVIYXM7XG4iLCJ2YXIgYXNzb2NJbmRleE9mID0gcmVxdWlyZSgnLi9fYXNzb2NJbmRleE9mJyk7XG5cbi8qKlxuICogU2V0cyB0aGUgbGlzdCBjYWNoZSBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbGlzdCBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICBpZiAoaW5kZXggPCAwKSB7XG4gICAgKyt0aGlzLnNpemU7XG4gICAgZGF0YS5wdXNoKFtrZXksIHZhbHVlXSk7XG4gIH0gZWxzZSB7XG4gICAgZGF0YVtpbmRleF1bMV0gPSB2YWx1ZTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0Q2FjaGVTZXQ7XG4iLCJ2YXIgTGlzdENhY2hlID0gcmVxdWlyZSgnLi9fTGlzdENhY2hlJyk7XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgc3RhY2suXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqL1xuZnVuY3Rpb24gc3RhY2tDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IG5ldyBMaXN0Q2FjaGU7XG4gIHRoaXMuc2l6ZSA9IDA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RhY2tDbGVhcjtcbiIsIi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIHN0YWNrLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrRGVsZXRlKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICByZXN1bHQgPSBkYXRhWydkZWxldGUnXShrZXkpO1xuXG4gIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdGFja0RlbGV0ZTtcbiIsIi8qKlxuICogR2V0cyB0aGUgc3RhY2sgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrR2V0KGtleSkge1xuICByZXR1cm4gdGhpcy5fX2RhdGFfXy5nZXQoa2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdGFja0dldDtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGEgc3RhY2sgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBzdGFja0hhcyhrZXkpIHtcbiAgcmV0dXJuIHRoaXMuX19kYXRhX18uaGFzKGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RhY2tIYXM7XG4iLCJ2YXIgTGlzdENhY2hlID0gcmVxdWlyZSgnLi9fTGlzdENhY2hlJyksXG4gICAgTWFwID0gcmVxdWlyZSgnLi9fTWFwJyksXG4gICAgTWFwQ2FjaGUgPSByZXF1aXJlKCcuL19NYXBDYWNoZScpO1xuXG4vKiogVXNlZCBhcyB0aGUgc2l6ZSB0byBlbmFibGUgbGFyZ2UgYXJyYXkgb3B0aW1pemF0aW9ucy4gKi9cbnZhciBMQVJHRV9BUlJBWV9TSVpFID0gMjAwO1xuXG4vKipcbiAqIFNldHMgdGhlIHN0YWNrIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIHN0YWNrIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBzdGFja1NldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgaWYgKGRhdGEgaW5zdGFuY2VvZiBMaXN0Q2FjaGUpIHtcbiAgICB2YXIgcGFpcnMgPSBkYXRhLl9fZGF0YV9fO1xuICAgIGlmICghTWFwIHx8IChwYWlycy5sZW5ndGggPCBMQVJHRV9BUlJBWV9TSVpFIC0gMSkpIHtcbiAgICAgIHBhaXJzLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgICAgIHRoaXMuc2l6ZSA9ICsrZGF0YS5zaXplO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGRhdGEgPSB0aGlzLl9fZGF0YV9fID0gbmV3IE1hcENhY2hlKHBhaXJzKTtcbiAgfVxuICBkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICByZXR1cm4gdGhpcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdGFja1NldDtcbiIsInZhciBpc0Z1bmN0aW9uID0gcmVxdWlyZSgnLi9pc0Z1bmN0aW9uJyksXG4gICAgaXNNYXNrZWQgPSByZXF1aXJlKCcuL19pc01hc2tlZCcpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpLFxuICAgIHRvU291cmNlID0gcmVxdWlyZSgnLi9fdG9Tb3VyY2UnKTtcblxuLyoqXG4gKiBVc2VkIHRvIG1hdGNoIGBSZWdFeHBgXG4gKiBbc3ludGF4IGNoYXJhY3RlcnNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXBhdHRlcm5zKS5cbiAqL1xudmFyIHJlUmVnRXhwQ2hhciA9IC9bXFxcXF4kLiorPygpW1xcXXt9fF0vZztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGhvc3QgY29uc3RydWN0b3JzIChTYWZhcmkpLiAqL1xudmFyIHJlSXNIb3N0Q3RvciA9IC9eXFxbb2JqZWN0IC4rP0NvbnN0cnVjdG9yXFxdJC87XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGUsXG4gICAgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKiogVXNlZCB0byBkZXRlY3QgaWYgYSBtZXRob2QgaXMgbmF0aXZlLiAqL1xudmFyIHJlSXNOYXRpdmUgPSBSZWdFeHAoJ14nICtcbiAgZnVuY1RvU3RyaW5nLmNhbGwoaGFzT3duUHJvcGVydHkpLnJlcGxhY2UocmVSZWdFeHBDaGFyLCAnXFxcXCQmJylcbiAgLnJlcGxhY2UoL2hhc093blByb3BlcnR5fChmdW5jdGlvbikuKj8oPz1cXFxcXFwoKXwgZm9yIC4rPyg/PVxcXFxcXF0pL2csICckMS4qPycpICsgJyQnXG4pO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTmF0aXZlYCB3aXRob3V0IGJhZCBzaGltIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG5hdGl2ZSBmdW5jdGlvbixcbiAqICBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc05hdGl2ZSh2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSB8fCBpc01hc2tlZCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHBhdHRlcm4gPSBpc0Z1bmN0aW9uKHZhbHVlKSA/IHJlSXNOYXRpdmUgOiByZUlzSG9zdEN0b3I7XG4gIHJldHVybiBwYXR0ZXJuLnRlc3QodG9Tb3VyY2UodmFsdWUpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNOYXRpdmU7XG4iLCJ2YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fU3ltYm9sJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VHZXRUYWdgIHdoaWNoIGlnbm9yZXMgYFN5bWJvbC50b1N0cmluZ1RhZ2AgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJhdyBgdG9TdHJpbmdUYWdgLlxuICovXG5mdW5jdGlvbiBnZXRSYXdUYWcodmFsdWUpIHtcbiAgdmFyIGlzT3duID0gaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgc3ltVG9TdHJpbmdUYWcpLFxuICAgICAgdGFnID0gdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuXG4gIHRyeSB7XG4gICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdW5kZWZpbmVkO1xuICAgIHZhciB1bm1hc2tlZCA9IHRydWU7XG4gIH0gY2F0Y2ggKGUpIHt9XG5cbiAgdmFyIHJlc3VsdCA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICBpZiAodW5tYXNrZWQpIHtcbiAgICBpZiAoaXNPd24pIHtcbiAgICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHRhZztcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlIHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRSYXdUYWc7XG4iLCIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIHVzaW5nIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBvYmplY3RUb1N0cmluZztcbiIsInZhciBjb3JlSnNEYXRhID0gcmVxdWlyZSgnLi9fY29yZUpzRGF0YScpO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgbWV0aG9kcyBtYXNxdWVyYWRpbmcgYXMgbmF0aXZlLiAqL1xudmFyIG1hc2tTcmNLZXkgPSAoZnVuY3Rpb24oKSB7XG4gIHZhciB1aWQgPSAvW14uXSskLy5leGVjKGNvcmVKc0RhdGEgJiYgY29yZUpzRGF0YS5rZXlzICYmIGNvcmVKc0RhdGEua2V5cy5JRV9QUk9UTyB8fCAnJyk7XG4gIHJldHVybiB1aWQgPyAoJ1N5bWJvbChzcmMpXzEuJyArIHVpZCkgOiAnJztcbn0oKSk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGBmdW5jYCBoYXMgaXRzIHNvdXJjZSBtYXNrZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBmdW5jYCBpcyBtYXNrZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNNYXNrZWQoZnVuYykge1xuICByZXR1cm4gISFtYXNrU3JjS2V5ICYmIChtYXNrU3JjS2V5IGluIGZ1bmMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzTWFza2VkO1xuIiwidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBvdmVycmVhY2hpbmcgY29yZS1qcyBzaGltcy4gKi9cbnZhciBjb3JlSnNEYXRhID0gcm9vdFsnX19jb3JlLWpzX3NoYXJlZF9fJ107XG5cbm1vZHVsZS5leHBvcnRzID0gY29yZUpzRGF0YTtcbiIsIi8qKlxuICogR2V0cyB0aGUgdmFsdWUgYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGdldFZhbHVlKG9iamVjdCwga2V5KSB7XG4gIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFZhbHVlO1xuIiwidmFyIG1hcENhY2hlQ2xlYXIgPSByZXF1aXJlKCcuL19tYXBDYWNoZUNsZWFyJyksXG4gICAgbWFwQ2FjaGVEZWxldGUgPSByZXF1aXJlKCcuL19tYXBDYWNoZURlbGV0ZScpLFxuICAgIG1hcENhY2hlR2V0ID0gcmVxdWlyZSgnLi9fbWFwQ2FjaGVHZXQnKSxcbiAgICBtYXBDYWNoZUhhcyA9IHJlcXVpcmUoJy4vX21hcENhY2hlSGFzJyksXG4gICAgbWFwQ2FjaGVTZXQgPSByZXF1aXJlKCcuL19tYXBDYWNoZVNldCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBtYXAgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gTWFwQ2FjaGUoZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgTWFwQ2FjaGVgLlxuTWFwQ2FjaGUucHJvdG90eXBlLmNsZWFyID0gbWFwQ2FjaGVDbGVhcjtcbk1hcENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBtYXBDYWNoZURlbGV0ZTtcbk1hcENhY2hlLnByb3RvdHlwZS5nZXQgPSBtYXBDYWNoZUdldDtcbk1hcENhY2hlLnByb3RvdHlwZS5oYXMgPSBtYXBDYWNoZUhhcztcbk1hcENhY2hlLnByb3RvdHlwZS5zZXQgPSBtYXBDYWNoZVNldDtcblxubW9kdWxlLmV4cG9ydHMgPSBNYXBDYWNoZTtcbiIsInZhciBIYXNoID0gcmVxdWlyZSgnLi9fSGFzaCcpLFxuICAgIExpc3RDYWNoZSA9IHJlcXVpcmUoJy4vX0xpc3RDYWNoZScpLFxuICAgIE1hcCA9IHJlcXVpcmUoJy4vX01hcCcpO1xuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIG1hcC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUNsZWFyKCkge1xuICB0aGlzLnNpemUgPSAwO1xuICB0aGlzLl9fZGF0YV9fID0ge1xuICAgICdoYXNoJzogbmV3IEhhc2gsXG4gICAgJ21hcCc6IG5ldyAoTWFwIHx8IExpc3RDYWNoZSksXG4gICAgJ3N0cmluZyc6IG5ldyBIYXNoXG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwQ2FjaGVDbGVhcjtcbiIsInZhciBoYXNoQ2xlYXIgPSByZXF1aXJlKCcuL19oYXNoQ2xlYXInKSxcbiAgICBoYXNoRGVsZXRlID0gcmVxdWlyZSgnLi9faGFzaERlbGV0ZScpLFxuICAgIGhhc2hHZXQgPSByZXF1aXJlKCcuL19oYXNoR2V0JyksXG4gICAgaGFzaEhhcyA9IHJlcXVpcmUoJy4vX2hhc2hIYXMnKSxcbiAgICBoYXNoU2V0ID0gcmVxdWlyZSgnLi9faGFzaFNldCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBoYXNoIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gSGFzaChlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBIYXNoYC5cbkhhc2gucHJvdG90eXBlLmNsZWFyID0gaGFzaENsZWFyO1xuSGFzaC5wcm90b3R5cGVbJ2RlbGV0ZSddID0gaGFzaERlbGV0ZTtcbkhhc2gucHJvdG90eXBlLmdldCA9IGhhc2hHZXQ7XG5IYXNoLnByb3RvdHlwZS5oYXMgPSBoYXNoSGFzO1xuSGFzaC5wcm90b3R5cGUuc2V0ID0gaGFzaFNldDtcblxubW9kdWxlLmV4cG9ydHMgPSBIYXNoO1xuIiwidmFyIG5hdGl2ZUNyZWF0ZSA9IHJlcXVpcmUoJy4vX25hdGl2ZUNyZWF0ZScpO1xuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGhhc2guXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgSGFzaFxuICovXG5mdW5jdGlvbiBoYXNoQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBuYXRpdmVDcmVhdGUgPyBuYXRpdmVDcmVhdGUobnVsbCkgOiB7fTtcbiAgdGhpcy5zaXplID0gMDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNoQ2xlYXI7XG4iLCIvKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBoYXNoLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge09iamVjdH0gaGFzaCBUaGUgaGFzaCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzaERlbGV0ZShrZXkpIHtcbiAgdmFyIHJlc3VsdCA9IHRoaXMuaGFzKGtleSkgJiYgZGVsZXRlIHRoaXMuX19kYXRhX19ba2V5XTtcbiAgdGhpcy5zaXplIC09IHJlc3VsdCA/IDEgOiAwO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc2hEZWxldGU7XG4iLCJ2YXIgbmF0aXZlQ3JlYXRlID0gcmVxdWlyZSgnLi9fbmF0aXZlQ3JlYXRlJyk7XG5cbi8qKiBVc2VkIHRvIHN0YW5kLWluIGZvciBgdW5kZWZpbmVkYCBoYXNoIHZhbHVlcy4gKi9cbnZhciBIQVNIX1VOREVGSU5FRCA9ICdfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBHZXRzIHRoZSBoYXNoIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGhhc2hHZXQoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgaWYgKG5hdGl2ZUNyZWF0ZSkge1xuICAgIHZhciByZXN1bHQgPSBkYXRhW2tleV07XG4gICAgcmV0dXJuIHJlc3VsdCA9PT0gSEFTSF9VTkRFRklORUQgPyB1bmRlZmluZWQgOiByZXN1bHQ7XG4gIH1cbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KSA/IGRhdGFba2V5XSA6IHVuZGVmaW5lZDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNoR2V0O1xuIiwidmFyIG5hdGl2ZUNyZWF0ZSA9IHJlcXVpcmUoJy4vX25hdGl2ZUNyZWF0ZScpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIGhhc2ggdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGhhc2hIYXMoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgcmV0dXJuIG5hdGl2ZUNyZWF0ZSA/IChkYXRhW2tleV0gIT09IHVuZGVmaW5lZCkgOiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGRhdGEsIGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzaEhhcztcbiIsInZhciBuYXRpdmVDcmVhdGUgPSByZXF1aXJlKCcuL19uYXRpdmVDcmVhdGUnKTtcblxuLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKipcbiAqIFNldHMgdGhlIGhhc2ggYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBoYXNoIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBoYXNoU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICB0aGlzLnNpemUgKz0gdGhpcy5oYXMoa2V5KSA/IDAgOiAxO1xuICBkYXRhW2tleV0gPSAobmF0aXZlQ3JlYXRlICYmIHZhbHVlID09PSB1bmRlZmluZWQpID8gSEFTSF9VTkRFRklORUQgOiB2YWx1ZTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzaFNldDtcbiIsInZhciBnZXRNYXBEYXRhID0gcmVxdWlyZSgnLi9fZ2V0TWFwRGF0YScpO1xuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBtYXAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVEZWxldGUoa2V5KSB7XG4gIHZhciByZXN1bHQgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSlbJ2RlbGV0ZSddKGtleSk7XG4gIHRoaXMuc2l6ZSAtPSByZXN1bHQgPyAxIDogMDtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBDYWNoZURlbGV0ZTtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUgZm9yIHVzZSBhcyB1bmlxdWUgb2JqZWN0IGtleS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0tleWFibGUodmFsdWUpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIHJldHVybiAodHlwZSA9PSAnc3RyaW5nJyB8fCB0eXBlID09ICdudW1iZXInIHx8IHR5cGUgPT0gJ3N5bWJvbCcgfHwgdHlwZSA9PSAnYm9vbGVhbicpXG4gICAgPyAodmFsdWUgIT09ICdfX3Byb3RvX18nKVxuICAgIDogKHZhbHVlID09PSBudWxsKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0tleWFibGU7XG4iLCJ2YXIgZ2V0TWFwRGF0YSA9IHJlcXVpcmUoJy4vX2dldE1hcERhdGEnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBtYXAgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlR2V0KGtleSkge1xuICByZXR1cm4gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLmdldChrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcENhY2hlR2V0O1xuIiwidmFyIGdldE1hcERhdGEgPSByZXF1aXJlKCcuL19nZXRNYXBEYXRhJyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgbWFwIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVIYXMoa2V5KSB7XG4gIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuaGFzKGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwQ2FjaGVIYXM7XG4iLCJ2YXIgZ2V0TWFwRGF0YSA9IHJlcXVpcmUoJy4vX2dldE1hcERhdGEnKTtcblxuLyoqXG4gKiBTZXRzIHRoZSBtYXAgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbWFwIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLFxuICAgICAgc2l6ZSA9IGRhdGEuc2l6ZTtcblxuICBkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgdGhpcy5zaXplICs9IGRhdGEuc2l6ZSA9PSBzaXplID8gMCA6IDE7XG4gIHJldHVybiB0aGlzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcENhY2hlU2V0O1xuIiwiLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZm9yRWFjaGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gKi9cbmZ1bmN0aW9uIGFycmF5RWFjaChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGlmIChpdGVyYXRlZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkgPT09IGZhbHNlKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGFycmF5O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFycmF5RWFjaDtcbiIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKTtcblxudmFyIGRlZmluZVByb3BlcnR5ID0gKGZ1bmN0aW9uKCkge1xuICB0cnkge1xuICAgIHZhciBmdW5jID0gZ2V0TmF0aXZlKE9iamVjdCwgJ2RlZmluZVByb3BlcnR5Jyk7XG4gICAgZnVuYyh7fSwgJycsIHt9KTtcbiAgICByZXR1cm4gZnVuYztcbiAgfSBjYXRjaCAoZSkge31cbn0oKSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmaW5lUHJvcGVydHk7XG4iLCJ2YXIgY29weU9iamVjdCA9IHJlcXVpcmUoJy4vX2NvcHlPYmplY3QnKSxcbiAgICBrZXlzID0gcmVxdWlyZSgnLi9rZXlzJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uYXNzaWduYCB3aXRob3V0IHN1cHBvcnQgZm9yIG11bHRpcGxlIHNvdXJjZXNcbiAqIG9yIGBjdXN0b21pemVyYCBmdW5jdGlvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG5mdW5jdGlvbiBiYXNlQXNzaWduKG9iamVjdCwgc291cmNlKSB7XG4gIHJldHVybiBvYmplY3QgJiYgY29weU9iamVjdChzb3VyY2UsIGtleXMoc291cmNlKSwgb2JqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlQXNzaWduO1xuIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50aW1lc2Agd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzXG4gKiBvciBtYXggYXJyYXkgbGVuZ3RoIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiB0aW1lcyB0byBpbnZva2UgYGl0ZXJhdGVlYC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHJlc3VsdHMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VUaW1lcyhuLCBpdGVyYXRlZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IEFycmF5KG4pO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbikge1xuICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShpbmRleCk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlVGltZXM7XG4iLCJ2YXIgYmFzZUlzQXJndW1lbnRzID0gcmVxdWlyZSgnLi9fYmFzZUlzQXJndW1lbnRzJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgcHJvcGVydHlJc0VudW1lcmFibGUgPSBvYmplY3RQcm90by5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAqICBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcmd1bWVudHMoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FyZ3VtZW50cyhbMSwgMiwgM10pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQXJndW1lbnRzID0gYmFzZUlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID8gYmFzZUlzQXJndW1lbnRzIDogZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpICYmXG4gICAgIXByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwodmFsdWUsICdjYWxsZWUnKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gaXNBcmd1bWVudHM7XG4iLCJ2YXIgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzQXJndW1lbnRzYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBgYXJndW1lbnRzYCBvYmplY3QsXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc0FyZ3VtZW50cyh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBhcmdzVGFnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJc0FyZ3VtZW50cztcbiIsIi8qKlxuICogVGhpcyBtZXRob2QgcmV0dXJucyBgZmFsc2VgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4xMy4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50aW1lcygyLCBfLnN0dWJGYWxzZSk7XG4gKiAvLyA9PiBbZmFsc2UsIGZhbHNlXVxuICovXG5mdW5jdGlvbiBzdHViRmFsc2UoKSB7XG4gIHJldHVybiBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHViRmFsc2U7XG4iLCIvKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IHVuc2lnbmVkIGludGVnZXIgdmFsdWVzLiAqL1xudmFyIHJlSXNVaW50ID0gL14oPzowfFsxLTldXFxkKikkLztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgaW5kZXguXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9TUFYX1NBRkVfSU5URUdFUl0gVGhlIHVwcGVyIGJvdW5kcyBvZiBhIHZhbGlkIGluZGV4LlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBpbmRleCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0luZGV4KHZhbHVlLCBsZW5ndGgpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIGxlbmd0aCA9IGxlbmd0aCA9PSBudWxsID8gTUFYX1NBRkVfSU5URUdFUiA6IGxlbmd0aDtcblxuICByZXR1cm4gISFsZW5ndGggJiZcbiAgICAodHlwZSA9PSAnbnVtYmVyJyB8fFxuICAgICAgKHR5cGUgIT0gJ3N5bWJvbCcgJiYgcmVJc1VpbnQudGVzdCh2YWx1ZSkpKSAmJlxuICAgICAgICAodmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8IGxlbmd0aCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNJbmRleDtcbiIsInZhciBiYXNlSXNUeXBlZEFycmF5ID0gcmVxdWlyZSgnLi9fYmFzZUlzVHlwZWRBcnJheScpLFxuICAgIGJhc2VVbmFyeSA9IHJlcXVpcmUoJy4vX2Jhc2VVbmFyeScpLFxuICAgIG5vZGVVdGlsID0gcmVxdWlyZSgnLi9fbm9kZVV0aWwnKTtcblxuLyogTm9kZS5qcyBoZWxwZXIgcmVmZXJlbmNlcy4gKi9cbnZhciBub2RlSXNUeXBlZEFycmF5ID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNUeXBlZEFycmF5O1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSB0eXBlZCBhcnJheS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHR5cGVkIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNUeXBlZEFycmF5KG5ldyBVaW50OEFycmF5KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzVHlwZWRBcnJheShbXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNUeXBlZEFycmF5ID0gbm9kZUlzVHlwZWRBcnJheSA/IGJhc2VVbmFyeShub2RlSXNUeXBlZEFycmF5KSA6IGJhc2VJc1R5cGVkQXJyYXk7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNUeXBlZEFycmF5O1xuIiwidmFyIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgaXNMZW5ndGggPSByZXF1aXJlKCcuL2lzTGVuZ3RoJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJyxcbiAgICBhcnJheVRhZyA9ICdbb2JqZWN0IEFycmF5XScsXG4gICAgYm9vbFRhZyA9ICdbb2JqZWN0IEJvb2xlYW5dJyxcbiAgICBkYXRlVGFnID0gJ1tvYmplY3QgRGF0ZV0nLFxuICAgIGVycm9yVGFnID0gJ1tvYmplY3QgRXJyb3JdJyxcbiAgICBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICBudW1iZXJUYWcgPSAnW29iamVjdCBOdW1iZXJdJyxcbiAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJyxcbiAgICByZWdleHBUYWcgPSAnW29iamVjdCBSZWdFeHBdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJyxcbiAgICB3ZWFrTWFwVGFnID0gJ1tvYmplY3QgV2Vha01hcF0nO1xuXG52YXIgYXJyYXlCdWZmZXJUYWcgPSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nLFxuICAgIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJyxcbiAgICBmbG9hdDMyVGFnID0gJ1tvYmplY3QgRmxvYXQzMkFycmF5XScsXG4gICAgZmxvYXQ2NFRhZyA9ICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nLFxuICAgIGludDhUYWcgPSAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICBpbnQxNlRhZyA9ICdbb2JqZWN0IEludDE2QXJyYXldJyxcbiAgICBpbnQzMlRhZyA9ICdbb2JqZWN0IEludDMyQXJyYXldJyxcbiAgICB1aW50OFRhZyA9ICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICB1aW50OENsYW1wZWRUYWcgPSAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nLFxuICAgIHVpbnQxNlRhZyA9ICdbb2JqZWN0IFVpbnQxNkFycmF5XScsXG4gICAgdWludDMyVGFnID0gJ1tvYmplY3QgVWludDMyQXJyYXldJztcblxuLyoqIFVzZWQgdG8gaWRlbnRpZnkgYHRvU3RyaW5nVGFnYCB2YWx1ZXMgb2YgdHlwZWQgYXJyYXlzLiAqL1xudmFyIHR5cGVkQXJyYXlUYWdzID0ge307XG50eXBlZEFycmF5VGFnc1tmbG9hdDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Zsb2F0NjRUYWddID1cbnR5cGVkQXJyYXlUYWdzW2ludDhUYWddID0gdHlwZWRBcnJheVRhZ3NbaW50MTZUYWddID1cbnR5cGVkQXJyYXlUYWdzW2ludDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQ4VGFnXSA9XG50eXBlZEFycmF5VGFnc1t1aW50OENsYW1wZWRUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDE2VGFnXSA9XG50eXBlZEFycmF5VGFnc1t1aW50MzJUYWddID0gdHJ1ZTtcbnR5cGVkQXJyYXlUYWdzW2FyZ3NUYWddID0gdHlwZWRBcnJheVRhZ3NbYXJyYXlUYWddID1cbnR5cGVkQXJyYXlUYWdzW2FycmF5QnVmZmVyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Jvb2xUYWddID1cbnR5cGVkQXJyYXlUYWdzW2RhdGFWaWV3VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2RhdGVUYWddID1cbnR5cGVkQXJyYXlUYWdzW2Vycm9yVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Z1bmNUYWddID1cbnR5cGVkQXJyYXlUYWdzW21hcFRhZ10gPSB0eXBlZEFycmF5VGFnc1tudW1iZXJUYWddID1cbnR5cGVkQXJyYXlUYWdzW29iamVjdFRhZ10gPSB0eXBlZEFycmF5VGFnc1tyZWdleHBUYWddID1cbnR5cGVkQXJyYXlUYWdzW3NldFRhZ10gPSB0eXBlZEFycmF5VGFnc1tzdHJpbmdUYWddID1cbnR5cGVkQXJyYXlUYWdzW3dlYWtNYXBUYWddID0gZmFsc2U7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNUeXBlZEFycmF5YCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHR5cGVkIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc1R5cGVkQXJyYXkodmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiZcbiAgICBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICEhdHlwZWRBcnJheVRhZ3NbYmFzZUdldFRhZyh2YWx1ZSldO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJc1R5cGVkQXJyYXk7XG4iLCJ2YXIgaXNQcm90b3R5cGUgPSByZXF1aXJlKCcuL19pc1Byb3RvdHlwZScpLFxuICAgIG5hdGl2ZUtleXMgPSByZXF1aXJlKCcuL19uYXRpdmVLZXlzJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ua2V5c2Agd2hpY2ggZG9lc24ndCB0cmVhdCBzcGFyc2UgYXJyYXlzIGFzIGRlbnNlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBiYXNlS2V5cyhvYmplY3QpIHtcbiAgaWYgKCFpc1Byb3RvdHlwZShvYmplY3QpKSB7XG4gICAgcmV0dXJuIG5hdGl2ZUtleXMob2JqZWN0KTtcbiAgfVxuICB2YXIgcmVzdWx0ID0gW107XG4gIGZvciAodmFyIGtleSBpbiBPYmplY3Qob2JqZWN0KSkge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSAmJiBrZXkgIT0gJ2NvbnN0cnVjdG9yJykge1xuICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlS2V5cztcbiIsInZhciBvdmVyQXJnID0gcmVxdWlyZSgnLi9fb3ZlckFyZycpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlS2V5cyA9IG92ZXJBcmcoT2JqZWN0LmtleXMsIE9iamVjdCk7XG5cbm1vZHVsZS5leHBvcnRzID0gbmF0aXZlS2V5cztcbiIsInZhciBjb3B5T2JqZWN0ID0gcmVxdWlyZSgnLi9fY29weU9iamVjdCcpLFxuICAgIGtleXNJbiA9IHJlcXVpcmUoJy4va2V5c0luJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uYXNzaWduSW5gIHdpdGhvdXQgc3VwcG9ydCBmb3IgbXVsdGlwbGUgc291cmNlc1xuICogb3IgYGN1c3RvbWl6ZXJgIGZ1bmN0aW9ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VBc3NpZ25JbihvYmplY3QsIHNvdXJjZSkge1xuICByZXR1cm4gb2JqZWN0ICYmIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzSW4oc291cmNlKSwgb2JqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlQXNzaWduSW47XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0JyksXG4gICAgaXNQcm90b3R5cGUgPSByZXF1aXJlKCcuL19pc1Byb3RvdHlwZScpLFxuICAgIG5hdGl2ZUtleXNJbiA9IHJlcXVpcmUoJy4vX25hdGl2ZUtleXNJbicpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmtleXNJbmAgd2hpY2ggZG9lc24ndCB0cmVhdCBzcGFyc2UgYXJyYXlzIGFzIGRlbnNlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBiYXNlS2V5c0luKG9iamVjdCkge1xuICBpZiAoIWlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICByZXR1cm4gbmF0aXZlS2V5c0luKG9iamVjdCk7XG4gIH1cbiAgdmFyIGlzUHJvdG8gPSBpc1Byb3RvdHlwZShvYmplY3QpLFxuICAgICAgcmVzdWx0ID0gW107XG5cbiAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgIGlmICghKGtleSA9PSAnY29uc3RydWN0b3InICYmIChpc1Byb3RvIHx8ICFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkpKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VLZXlzSW47XG4iLCIvKipcbiAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZVxuICogW2BPYmplY3Qua2V5c2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5rZXlzKVxuICogZXhjZXB0IHRoYXQgaXQgaW5jbHVkZXMgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydGllcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gbmF0aXZlS2V5c0luKG9iamVjdCkge1xuICB2YXIgcmVzdWx0ID0gW107XG4gIGlmIChvYmplY3QgIT0gbnVsbCkge1xuICAgIGZvciAodmFyIGtleSBpbiBPYmplY3Qob2JqZWN0KSkge1xuICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBuYXRpdmVLZXlzSW47XG4iLCJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cbnZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xudmFyIGZyZWVNb2R1bGUgPSBmcmVlRXhwb3J0cyAmJiB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblxuLyoqIERldGVjdCB0aGUgcG9wdWxhciBDb21tb25KUyBleHRlbnNpb24gYG1vZHVsZS5leHBvcnRzYC4gKi9cbnZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBCdWZmZXIgPSBtb2R1bGVFeHBvcnRzID8gcm9vdC5CdWZmZXIgOiB1bmRlZmluZWQsXG4gICAgYWxsb2NVbnNhZmUgPSBCdWZmZXIgPyBCdWZmZXIuYWxsb2NVbnNhZmUgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mICBgYnVmZmVyYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtCdWZmZXJ9IGJ1ZmZlciBUaGUgYnVmZmVyIHRvIGNsb25lLlxuICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAqIEByZXR1cm5zIHtCdWZmZXJ9IFJldHVybnMgdGhlIGNsb25lZCBidWZmZXIuXG4gKi9cbmZ1bmN0aW9uIGNsb25lQnVmZmVyKGJ1ZmZlciwgaXNEZWVwKSB7XG4gIGlmIChpc0RlZXApIHtcbiAgICByZXR1cm4gYnVmZmVyLnNsaWNlKCk7XG4gIH1cbiAgdmFyIGxlbmd0aCA9IGJ1ZmZlci5sZW5ndGgsXG4gICAgICByZXN1bHQgPSBhbGxvY1Vuc2FmZSA/IGFsbG9jVW5zYWZlKGxlbmd0aCkgOiBuZXcgYnVmZmVyLmNvbnN0cnVjdG9yKGxlbmd0aCk7XG5cbiAgYnVmZmVyLmNvcHkocmVzdWx0KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjbG9uZUJ1ZmZlcjtcbiIsIi8qKlxuICogQ29waWVzIHRoZSB2YWx1ZXMgb2YgYHNvdXJjZWAgdG8gYGFycmF5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gc291cmNlIFRoZSBhcnJheSB0byBjb3B5IHZhbHVlcyBmcm9tLlxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5PVtdXSBUaGUgYXJyYXkgdG8gY29weSB2YWx1ZXMgdG8uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAqL1xuZnVuY3Rpb24gY29weUFycmF5KHNvdXJjZSwgYXJyYXkpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBzb3VyY2UubGVuZ3RoO1xuXG4gIGFycmF5IHx8IChhcnJheSA9IEFycmF5KGxlbmd0aCkpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGFycmF5W2luZGV4XSA9IHNvdXJjZVtpbmRleF07XG4gIH1cbiAgcmV0dXJuIGFycmF5O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvcHlBcnJheTtcbiIsInZhciBjb3B5T2JqZWN0ID0gcmVxdWlyZSgnLi9fY29weU9iamVjdCcpLFxuICAgIGdldFN5bWJvbHMgPSByZXF1aXJlKCcuL19nZXRTeW1ib2xzJyk7XG5cbi8qKlxuICogQ29waWVzIG93biBzeW1ib2xzIG9mIGBzb3VyY2VgIHRvIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIGZyb20uXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgdG8uXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG5mdW5jdGlvbiBjb3B5U3ltYm9scyhzb3VyY2UsIG9iamVjdCkge1xuICByZXR1cm4gY29weU9iamVjdChzb3VyY2UsIGdldFN5bWJvbHMoc291cmNlKSwgb2JqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjb3B5U3ltYm9scztcbiIsIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmZpbHRlcmAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZpbHRlcmVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBhcnJheUZpbHRlcihhcnJheSwgcHJlZGljYXRlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICByZXNJbmRleCA9IDAsXG4gICAgICByZXN1bHQgPSBbXTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheUZpbHRlcjtcbiIsInZhciBjb3B5T2JqZWN0ID0gcmVxdWlyZSgnLi9fY29weU9iamVjdCcpLFxuICAgIGdldFN5bWJvbHNJbiA9IHJlcXVpcmUoJy4vX2dldFN5bWJvbHNJbicpO1xuXG4vKipcbiAqIENvcGllcyBvd24gYW5kIGluaGVyaXRlZCBzeW1ib2xzIG9mIGBzb3VyY2VgIHRvIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIGZyb20uXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgdG8uXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG5mdW5jdGlvbiBjb3B5U3ltYm9sc0luKHNvdXJjZSwgb2JqZWN0KSB7XG4gIHJldHVybiBjb3B5T2JqZWN0KHNvdXJjZSwgZ2V0U3ltYm9sc0luKHNvdXJjZSksIG9iamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29weVN5bWJvbHNJbjtcbiIsInZhciBiYXNlR2V0QWxsS2V5cyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRBbGxLZXlzJyksXG4gICAgZ2V0U3ltYm9scyA9IHJlcXVpcmUoJy4vX2dldFN5bWJvbHMnKSxcbiAgICBrZXlzID0gcmVxdWlyZSgnLi9rZXlzJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAqL1xuZnVuY3Rpb24gZ2V0QWxsS2V5cyhvYmplY3QpIHtcbiAgcmV0dXJuIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5cywgZ2V0U3ltYm9scyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0QWxsS2V5cztcbiIsInZhciBiYXNlR2V0QWxsS2V5cyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRBbGxLZXlzJyksXG4gICAgZ2V0U3ltYm9sc0luID0gcmVxdWlyZSgnLi9fZ2V0U3ltYm9sc0luJyksXG4gICAga2V5c0luID0gcmVxdWlyZSgnLi9rZXlzSW4nKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kXG4gKiBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICovXG5mdW5jdGlvbiBnZXRBbGxLZXlzSW4ob2JqZWN0KSB7XG4gIHJldHVybiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXNJbiwgZ2V0U3ltYm9sc0luKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRBbGxLZXlzSW47XG4iLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyksXG4gICAgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIERhdGFWaWV3ID0gZ2V0TmF0aXZlKHJvb3QsICdEYXRhVmlldycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IERhdGFWaWV3O1xuIiwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpLFxuICAgIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBQcm9taXNlID0gZ2V0TmF0aXZlKHJvb3QsICdQcm9taXNlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gUHJvbWlzZTtcbiIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKSxcbiAgICByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgU2V0ID0gZ2V0TmF0aXZlKHJvb3QsICdTZXQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBTZXQ7XG4iLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyksXG4gICAgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIFdlYWtNYXAgPSBnZXROYXRpdmUocm9vdCwgJ1dlYWtNYXAnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBXZWFrTWFwO1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBJbml0aWFsaXplcyBhbiBhcnJheSBjbG9uZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNsb25lLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBpbml0aWFsaXplZCBjbG9uZS5cbiAqL1xuZnVuY3Rpb24gaW5pdENsb25lQXJyYXkoYXJyYXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgIHJlc3VsdCA9IG5ldyBhcnJheS5jb25zdHJ1Y3RvcihsZW5ndGgpO1xuXG4gIC8vIEFkZCBwcm9wZXJ0aWVzIGFzc2lnbmVkIGJ5IGBSZWdFeHAjZXhlY2AuXG4gIGlmIChsZW5ndGggJiYgdHlwZW9mIGFycmF5WzBdID09ICdzdHJpbmcnICYmIGhhc093blByb3BlcnR5LmNhbGwoYXJyYXksICdpbmRleCcpKSB7XG4gICAgcmVzdWx0LmluZGV4ID0gYXJyYXkuaW5kZXg7XG4gICAgcmVzdWx0LmlucHV0ID0gYXJyYXkuaW5wdXQ7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbml0Q2xvbmVBcnJheTtcbiIsInZhciBjbG9uZUFycmF5QnVmZmVyID0gcmVxdWlyZSgnLi9fY2xvbmVBcnJheUJ1ZmZlcicpLFxuICAgIGNsb25lRGF0YVZpZXcgPSByZXF1aXJlKCcuL19jbG9uZURhdGFWaWV3JyksXG4gICAgY2xvbmVSZWdFeHAgPSByZXF1aXJlKCcuL19jbG9uZVJlZ0V4cCcpLFxuICAgIGNsb25lU3ltYm9sID0gcmVxdWlyZSgnLi9fY2xvbmVTeW1ib2wnKSxcbiAgICBjbG9uZVR5cGVkQXJyYXkgPSByZXF1aXJlKCcuL19jbG9uZVR5cGVkQXJyYXknKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGJvb2xUYWcgPSAnW29iamVjdCBCb29sZWFuXScsXG4gICAgZGF0ZVRhZyA9ICdbb2JqZWN0IERhdGVdJyxcbiAgICBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICBudW1iZXJUYWcgPSAnW29iamVjdCBOdW1iZXJdJyxcbiAgICByZWdleHBUYWcgPSAnW29iamVjdCBSZWdFeHBdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJyxcbiAgICBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJztcblxudmFyIGFycmF5QnVmZmVyVGFnID0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJyxcbiAgICBkYXRhVmlld1RhZyA9ICdbb2JqZWN0IERhdGFWaWV3XScsXG4gICAgZmxvYXQzMlRhZyA9ICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nLFxuICAgIGZsb2F0NjRUYWcgPSAnW29iamVjdCBGbG9hdDY0QXJyYXldJyxcbiAgICBpbnQ4VGFnID0gJ1tvYmplY3QgSW50OEFycmF5XScsXG4gICAgaW50MTZUYWcgPSAnW29iamVjdCBJbnQxNkFycmF5XScsXG4gICAgaW50MzJUYWcgPSAnW29iamVjdCBJbnQzMkFycmF5XScsXG4gICAgdWludDhUYWcgPSAnW29iamVjdCBVaW50OEFycmF5XScsXG4gICAgdWludDhDbGFtcGVkVGFnID0gJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJyxcbiAgICB1aW50MTZUYWcgPSAnW29iamVjdCBVaW50MTZBcnJheV0nLFxuICAgIHVpbnQzMlRhZyA9ICdbb2JqZWN0IFVpbnQzMkFycmF5XSc7XG5cbi8qKlxuICogSW5pdGlhbGl6ZXMgYW4gb2JqZWN0IGNsb25lIGJhc2VkIG9uIGl0cyBgdG9TdHJpbmdUYWdgLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIGZ1bmN0aW9uIG9ubHkgc3VwcG9ydHMgY2xvbmluZyB2YWx1ZXMgd2l0aCB0YWdzIG9mXG4gKiBgQm9vbGVhbmAsIGBEYXRlYCwgYEVycm9yYCwgYE1hcGAsIGBOdW1iZXJgLCBgUmVnRXhwYCwgYFNldGAsIG9yIGBTdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY2xvbmUuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGFnIFRoZSBgdG9TdHJpbmdUYWdgIG9mIHRoZSBvYmplY3QgdG8gY2xvbmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaW5pdGlhbGl6ZWQgY2xvbmUuXG4gKi9cbmZ1bmN0aW9uIGluaXRDbG9uZUJ5VGFnKG9iamVjdCwgdGFnLCBpc0RlZXApIHtcbiAgdmFyIEN0b3IgPSBvYmplY3QuY29uc3RydWN0b3I7XG4gIHN3aXRjaCAodGFnKSB7XG4gICAgY2FzZSBhcnJheUJ1ZmZlclRhZzpcbiAgICAgIHJldHVybiBjbG9uZUFycmF5QnVmZmVyKG9iamVjdCk7XG5cbiAgICBjYXNlIGJvb2xUYWc6XG4gICAgY2FzZSBkYXRlVGFnOlxuICAgICAgcmV0dXJuIG5ldyBDdG9yKCtvYmplY3QpO1xuXG4gICAgY2FzZSBkYXRhVmlld1RhZzpcbiAgICAgIHJldHVybiBjbG9uZURhdGFWaWV3KG9iamVjdCwgaXNEZWVwKTtcblxuICAgIGNhc2UgZmxvYXQzMlRhZzogY2FzZSBmbG9hdDY0VGFnOlxuICAgIGNhc2UgaW50OFRhZzogY2FzZSBpbnQxNlRhZzogY2FzZSBpbnQzMlRhZzpcbiAgICBjYXNlIHVpbnQ4VGFnOiBjYXNlIHVpbnQ4Q2xhbXBlZFRhZzogY2FzZSB1aW50MTZUYWc6IGNhc2UgdWludDMyVGFnOlxuICAgICAgcmV0dXJuIGNsb25lVHlwZWRBcnJheShvYmplY3QsIGlzRGVlcCk7XG5cbiAgICBjYXNlIG1hcFRhZzpcbiAgICAgIHJldHVybiBuZXcgQ3RvcjtcblxuICAgIGNhc2UgbnVtYmVyVGFnOlxuICAgIGNhc2Ugc3RyaW5nVGFnOlxuICAgICAgcmV0dXJuIG5ldyBDdG9yKG9iamVjdCk7XG5cbiAgICBjYXNlIHJlZ2V4cFRhZzpcbiAgICAgIHJldHVybiBjbG9uZVJlZ0V4cChvYmplY3QpO1xuXG4gICAgY2FzZSBzZXRUYWc6XG4gICAgICByZXR1cm4gbmV3IEN0b3I7XG5cbiAgICBjYXNlIHN5bWJvbFRhZzpcbiAgICAgIHJldHVybiBjbG9uZVN5bWJvbChvYmplY3QpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5pdENsb25lQnlUYWc7XG4iLCJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgVWludDhBcnJheSA9IHJvb3QuVWludDhBcnJheTtcblxubW9kdWxlLmV4cG9ydHMgPSBVaW50OEFycmF5O1xuIiwidmFyIGNsb25lQXJyYXlCdWZmZXIgPSByZXF1aXJlKCcuL19jbG9uZUFycmF5QnVmZmVyJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mIGBkYXRhVmlld2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhVmlldyBUaGUgZGF0YSB2aWV3IHRvIGNsb25lLlxuICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCBkYXRhIHZpZXcuXG4gKi9cbmZ1bmN0aW9uIGNsb25lRGF0YVZpZXcoZGF0YVZpZXcsIGlzRGVlcCkge1xuICB2YXIgYnVmZmVyID0gaXNEZWVwID8gY2xvbmVBcnJheUJ1ZmZlcihkYXRhVmlldy5idWZmZXIpIDogZGF0YVZpZXcuYnVmZmVyO1xuICByZXR1cm4gbmV3IGRhdGFWaWV3LmNvbnN0cnVjdG9yKGJ1ZmZlciwgZGF0YVZpZXcuYnl0ZU9mZnNldCwgZGF0YVZpZXcuYnl0ZUxlbmd0aCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2xvbmVEYXRhVmlldztcbiIsIi8qKiBVc2VkIHRvIG1hdGNoIGBSZWdFeHBgIGZsYWdzIGZyb20gdGhlaXIgY29lcmNlZCBzdHJpbmcgdmFsdWVzLiAqL1xudmFyIHJlRmxhZ3MgPSAvXFx3KiQvO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgcmVnZXhwYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHJlZ2V4cCBUaGUgcmVnZXhwIHRvIGNsb25lLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHJlZ2V4cC5cbiAqL1xuZnVuY3Rpb24gY2xvbmVSZWdFeHAocmVnZXhwKSB7XG4gIHZhciByZXN1bHQgPSBuZXcgcmVnZXhwLmNvbnN0cnVjdG9yKHJlZ2V4cC5zb3VyY2UsIHJlRmxhZ3MuZXhlYyhyZWdleHApKTtcbiAgcmVzdWx0Lmxhc3RJbmRleCA9IHJlZ2V4cC5sYXN0SW5kZXg7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2xvbmVSZWdFeHA7XG4iLCJ2YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fU3ltYm9sJyk7XG5cbi8qKiBVc2VkIHRvIGNvbnZlcnQgc3ltYm9scyB0byBwcmltaXRpdmVzIGFuZCBzdHJpbmdzLiAqL1xudmFyIHN5bWJvbFByb3RvID0gU3ltYm9sID8gU3ltYm9sLnByb3RvdHlwZSA6IHVuZGVmaW5lZCxcbiAgICBzeW1ib2xWYWx1ZU9mID0gc3ltYm9sUHJvdG8gPyBzeW1ib2xQcm90by52YWx1ZU9mIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiB0aGUgYHN5bWJvbGAgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gc3ltYm9sIFRoZSBzeW1ib2wgb2JqZWN0IHRvIGNsb25lLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHN5bWJvbCBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGNsb25lU3ltYm9sKHN5bWJvbCkge1xuICByZXR1cm4gc3ltYm9sVmFsdWVPZiA/IE9iamVjdChzeW1ib2xWYWx1ZU9mLmNhbGwoc3ltYm9sKSkgOiB7fTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjbG9uZVN5bWJvbDtcbiIsInZhciBjbG9uZUFycmF5QnVmZmVyID0gcmVxdWlyZSgnLi9fY2xvbmVBcnJheUJ1ZmZlcicpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgdHlwZWRBcnJheWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSB0eXBlZEFycmF5IFRoZSB0eXBlZCBhcnJheSB0byBjbG9uZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgdHlwZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGNsb25lVHlwZWRBcnJheSh0eXBlZEFycmF5LCBpc0RlZXApIHtcbiAgdmFyIGJ1ZmZlciA9IGlzRGVlcCA/IGNsb25lQXJyYXlCdWZmZXIodHlwZWRBcnJheS5idWZmZXIpIDogdHlwZWRBcnJheS5idWZmZXI7XG4gIHJldHVybiBuZXcgdHlwZWRBcnJheS5jb25zdHJ1Y3RvcihidWZmZXIsIHR5cGVkQXJyYXkuYnl0ZU9mZnNldCwgdHlwZWRBcnJheS5sZW5ndGgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNsb25lVHlwZWRBcnJheTtcbiIsInZhciBiYXNlQ3JlYXRlID0gcmVxdWlyZSgnLi9fYmFzZUNyZWF0ZScpLFxuICAgIGdldFByb3RvdHlwZSA9IHJlcXVpcmUoJy4vX2dldFByb3RvdHlwZScpLFxuICAgIGlzUHJvdG90eXBlID0gcmVxdWlyZSgnLi9faXNQcm90b3R5cGUnKTtcblxuLyoqXG4gKiBJbml0aWFsaXplcyBhbiBvYmplY3QgY2xvbmUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGluaXRpYWxpemVkIGNsb25lLlxuICovXG5mdW5jdGlvbiBpbml0Q2xvbmVPYmplY3Qob2JqZWN0KSB7XG4gIHJldHVybiAodHlwZW9mIG9iamVjdC5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmICFpc1Byb3RvdHlwZShvYmplY3QpKVxuICAgID8gYmFzZUNyZWF0ZShnZXRQcm90b3R5cGUob2JqZWN0KSlcbiAgICA6IHt9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluaXRDbG9uZU9iamVjdDtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0Q3JlYXRlID0gT2JqZWN0LmNyZWF0ZTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jcmVhdGVgIHdpdGhvdXQgc3VwcG9ydCBmb3IgYXNzaWduaW5nXG4gKiBwcm9wZXJ0aWVzIHRvIHRoZSBjcmVhdGVkIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHByb3RvIFRoZSBvYmplY3QgdG8gaW5oZXJpdCBmcm9tLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAqL1xudmFyIGJhc2VDcmVhdGUgPSAoZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIG9iamVjdCgpIHt9XG4gIHJldHVybiBmdW5jdGlvbihwcm90bykge1xuICAgIGlmICghaXNPYmplY3QocHJvdG8pKSB7XG4gICAgICByZXR1cm4ge307XG4gICAgfVxuICAgIGlmIChvYmplY3RDcmVhdGUpIHtcbiAgICAgIHJldHVybiBvYmplY3RDcmVhdGUocHJvdG8pO1xuICAgIH1cbiAgICBvYmplY3QucHJvdG90eXBlID0gcHJvdG87XG4gICAgdmFyIHJlc3VsdCA9IG5ldyBvYmplY3Q7XG4gICAgb2JqZWN0LnByb3RvdHlwZSA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufSgpKTtcblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlQ3JlYXRlO1xuIiwidmFyIGJhc2VJc01hcCA9IHJlcXVpcmUoJy4vX2Jhc2VJc01hcCcpLFxuICAgIGJhc2VVbmFyeSA9IHJlcXVpcmUoJy4vX2Jhc2VVbmFyeScpLFxuICAgIG5vZGVVdGlsID0gcmVxdWlyZSgnLi9fbm9kZVV0aWwnKTtcblxuLyogTm9kZS5qcyBoZWxwZXIgcmVmZXJlbmNlcy4gKi9cbnZhciBub2RlSXNNYXAgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc01hcDtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYE1hcGAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4zLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbWFwLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNNYXAobmV3IE1hcCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc01hcChuZXcgV2Vha01hcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNNYXAgPSBub2RlSXNNYXAgPyBiYXNlVW5hcnkobm9kZUlzTWFwKSA6IGJhc2VJc01hcDtcblxubW9kdWxlLmV4cG9ydHMgPSBpc01hcDtcbiIsInZhciBnZXRUYWcgPSByZXF1aXJlKCcuL19nZXRUYWcnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgbWFwVGFnID0gJ1tvYmplY3QgTWFwXSc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNNYXBgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbWFwLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc01hcCh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBnZXRUYWcodmFsdWUpID09IG1hcFRhZztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNNYXA7XG4iLCJ2YXIgYmFzZUlzU2V0ID0gcmVxdWlyZSgnLi9fYmFzZUlzU2V0JyksXG4gICAgYmFzZVVuYXJ5ID0gcmVxdWlyZSgnLi9fYmFzZVVuYXJ5JyksXG4gICAgbm9kZVV0aWwgPSByZXF1aXJlKCcuL19ub2RlVXRpbCcpO1xuXG4vKiBOb2RlLmpzIGhlbHBlciByZWZlcmVuY2VzLiAqL1xudmFyIG5vZGVJc1NldCA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzU2V0O1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU2V0YCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjMuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzZXQsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1NldChuZXcgU2V0KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzU2V0KG5ldyBXZWFrU2V0KTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc1NldCA9IG5vZGVJc1NldCA/IGJhc2VVbmFyeShub2RlSXNTZXQpIDogYmFzZUlzU2V0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzU2V0O1xuIiwidmFyIGdldFRhZyA9IHJlcXVpcmUoJy4vX2dldFRhZycpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBzZXRUYWcgPSAnW29iamVjdCBTZXRdJztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc1NldGAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzZXQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzU2V0KHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGdldFRhZyh2YWx1ZSkgPT0gc2V0VGFnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJc1NldDtcbiIsImZ1bmN0aW9uIGhhcyhicm93c2VyKTogYm9vbGVhbiB8IG51bWJlciB7XHJcbiAgY29uc3QgdWEgPSBuYXZpZ2F0b3IudXNlckFnZW50O1xyXG4gIGlmIChicm93c2VyID09PSBcImllXCIpIHtcclxuICAgIGNvbnN0IGlzSUUgPSB1YS5pbmRleE9mKFwiY29tcGF0aWJsZVwiKSA+IC0xICYmIHVhLmluZGV4T2YoXCJNU0lFXCIpID4gLTE7XHJcbiAgICBpZiAoaXNJRSkge1xyXG4gICAgICBjb25zdCByZUlFID0gbmV3IFJlZ0V4cChcIk1TSUUgKFxcXFxkK1xcXFwuXFxcXGQrKTtcIik7XHJcbiAgICAgIHJlSUUudGVzdCh1YSk7XHJcbiAgICAgIHJldHVybiBwYXJzZUZsb2F0KFJlZ0V4cFtcIiQxXCJdKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICB9IGVsc2Uge1xyXG4gICAgcmV0dXJuIHVhLmluZGV4T2YoYnJvd3NlcikgPiAtMTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICBfaXNJRTExKCk6IGJvb2xlYW4ge1xyXG4gICAgbGV0IGlldiA9IDA7XHJcbiAgICBjb25zdCBpZW9sZCA9IC9NU0lFIChcXGQrXFwuXFxkKyk7Ly50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xyXG4gICAgY29uc3QgdHJpZGVudCA9ICEhbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvVHJpZGVudFxcLzcuMC8pO1xyXG4gICAgY29uc3QgcnYgPSBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoXCJydjoxMS4wXCIpO1xyXG5cclxuICAgIGlmIChpZW9sZCkge1xyXG4gICAgICBpZXYgPSBOdW1iZXIoUmVnRXhwLiQxKTtcclxuICAgIH1cclxuICAgIGlmIChuYXZpZ2F0b3IuYXBwVmVyc2lvbi5pbmRleE9mKFwiTVNJRSAxMFwiKSAhPT0gLTEpIHtcclxuICAgICAgaWV2ID0gMTA7XHJcbiAgICB9XHJcbiAgICBpZiAodHJpZGVudCAmJiBydiAhPT0gLTEpIHtcclxuICAgICAgaWV2ID0gMTE7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGlldiA9PT0gMTE7XHJcbiAgfSxcclxuXHJcbiAgX2lzRWRnZSgpOiBib29sZWFuIHtcclxuICAgIHJldHVybiAvRWRnZS8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcclxuICB9LFxyXG5cclxuICBfZ2V0RG93bmxvYWRVcmwodGV4dCk6IHN0cmluZyB7XHJcbiAgICBjb25zdCBCT00gPSBcIlxcdUZFRkZcIjtcclxuICAgIC8vIEFkZCBCT00gdG8gdGV4dCBmb3Igb3BlbiBpbiBleGNlbCBjb3JyZWN0bHlcclxuICAgIGlmICh3aW5kb3cuQmxvYiAmJiB3aW5kb3cuVVJMICYmIHdpbmRvdy5VUkwuY3JlYXRlT2JqZWN0VVJMKSB7XHJcbiAgICAgIGNvbnN0IGNzdkRhdGEgPSBuZXcgQmxvYihbQk9NICsgdGV4dF0sIHsgdHlwZTogXCJ0ZXh0L2NzdlwiIH0pO1xyXG4gICAgICByZXR1cm4gVVJMLmNyZWF0ZU9iamVjdFVSTChjc3ZEYXRhKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiBcImRhdGE6YXR0YWNobWVudC9jc3Y7Y2hhcnNldD11dGYtOCxcIiArIEJPTSArIGVuY29kZVVSSUNvbXBvbmVudCh0ZXh0KTtcclxuICAgIH1cclxuICB9LFxyXG5cclxuICBkb3dubG9hZChmaWxlbmFtZSwgdGV4dCk6IHZvaWQge1xyXG4gICAgaWYgKGhhcyhcImllXCIpICYmIGhhcyhcImllXCIpIDwgMTApIHtcclxuICAgICAgLy8gaGFzIG1vZHVsZSB1bmFibGUgaWRlbnRpZnkgaWUxMSBhbmQgRWRnZVxyXG4gICAgICBjb25zdCBvV2luID0gd2luZG93LnRvcC5vcGVuKFwiYWJvdXQ6YmxhbmtcIiwgXCJfYmxhbmtcIikgYXMgV2luZG93O1xyXG4gICAgICAvLyBvV2luLmRvY3VtZW50LmNoYXJzZXQgPSBcInV0Zi04XCI7XHJcbiAgICAgIG9XaW4uZG9jdW1lbnQud3JpdGUodGV4dCk7XHJcbiAgICAgIG9XaW4uZG9jdW1lbnQuY2xvc2UoKTtcclxuICAgICAgb1dpbi5kb2N1bWVudC5leGVjQ29tbWFuZChcIlNhdmVBc1wiLCBmaWxlbmFtZSk7XHJcbiAgICAgIG9XaW4uY2xvc2UoKTtcclxuICAgIH0gZWxzZSBpZiAoaGFzKFwiaWVcIikgPT09IDEwIHx8IHRoaXMuX2lzSUUxMSgpIHx8IHRoaXMuX2lzRWRnZSgpKSB7XHJcbiAgICAgIGNvbnN0IEJPTSA9IFwiXFx1RkVGRlwiO1xyXG4gICAgICBjb25zdCBjc3ZEYXRhID0gbmV3IEJsb2IoW0JPTSArIHRleHRdLCB7IHR5cGU6IFwidGV4dC9jc3ZcIiB9KTtcclxuICAgICAgbmF2aWdhdG9yLm1zU2F2ZUJsb2IoY3N2RGF0YSwgZmlsZW5hbWUpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc3QgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpO1xyXG4gICAgICBsaW5rLmRvd25sb2FkID0gZmlsZW5hbWU7XHJcbiAgICAgIGxpbmsuaHJlZiA9IHRoaXMuX2dldERvd25sb2FkVXJsKHRleHQpO1xyXG4gICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGxpbmspO1xyXG4gICAgICBsaW5rLmNsaWNrKCk7XHJcbiAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQobGluayk7XHJcbiAgICB9XHJcbiAgfSxcclxufTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBmb3JFYWNoICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoXCIuL2NvbGxlY3Rpb24tdXRpbHNcIikuZm9yRWFjaDtcbnZhciBlbGVtZW50VXRpbHNNYWtlciAgICAgICA9IHJlcXVpcmUoXCIuL2VsZW1lbnQtdXRpbHNcIik7XG52YXIgbGlzdGVuZXJIYW5kbGVyTWFrZXIgICAgPSByZXF1aXJlKFwiLi9saXN0ZW5lci1oYW5kbGVyXCIpO1xudmFyIGlkR2VuZXJhdG9yTWFrZXIgICAgICAgID0gcmVxdWlyZShcIi4vaWQtZ2VuZXJhdG9yXCIpO1xudmFyIGlkSGFuZGxlck1ha2VyICAgICAgICAgID0gcmVxdWlyZShcIi4vaWQtaGFuZGxlclwiKTtcbnZhciByZXBvcnRlck1ha2VyICAgICAgICAgICA9IHJlcXVpcmUoXCIuL3JlcG9ydGVyXCIpO1xudmFyIGJyb3dzZXJEZXRlY3RvciAgICAgICAgID0gcmVxdWlyZShcIi4vYnJvd3Nlci1kZXRlY3RvclwiKTtcbnZhciBiYXRjaFByb2Nlc3Nvck1ha2VyICAgICA9IHJlcXVpcmUoXCJiYXRjaC1wcm9jZXNzb3JcIik7XG52YXIgc3RhdGVIYW5kbGVyICAgICAgICAgICAgPSByZXF1aXJlKFwiLi9zdGF0ZS1oYW5kbGVyXCIpO1xuXG4vL0RldGVjdGlvbiBzdHJhdGVnaWVzLlxudmFyIG9iamVjdFN0cmF0ZWd5TWFrZXIgICAgID0gcmVxdWlyZShcIi4vZGV0ZWN0aW9uLXN0cmF0ZWd5L29iamVjdC5qc1wiKTtcbnZhciBzY3JvbGxTdHJhdGVneU1ha2VyICAgICA9IHJlcXVpcmUoXCIuL2RldGVjdGlvbi1zdHJhdGVneS9zY3JvbGwuanNcIik7XG5cbmZ1bmN0aW9uIGlzQ29sbGVjdGlvbihvYmopIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShvYmopIHx8IG9iai5sZW5ndGggIT09IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gdG9BcnJheShjb2xsZWN0aW9uKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGNvbGxlY3Rpb24pKSB7XG4gICAgICAgIHZhciBhcnJheSA9IFtdO1xuICAgICAgICBmb3JFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICAgIGFycmF5LnB1c2gob2JqKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBhcnJheTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gY29sbGVjdGlvbjtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGlzRWxlbWVudChvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIG9iai5ub2RlVHlwZSA9PT0gMTtcbn1cblxuLyoqXG4gKiBAdHlwZWRlZiBpZEhhbmRsZXJcbiAqIEB0eXBlIHtvYmplY3R9XG4gKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBnZXQgR2V0cyB0aGUgcmVzaXplIGRldGVjdG9yIGlkIG9mIHRoZSBlbGVtZW50LlxuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gc2V0IEdlbmVyYXRlIGFuZCBzZXRzIHRoZSByZXNpemUgZGV0ZWN0b3IgaWQgb2YgdGhlIGVsZW1lbnQuXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiBPcHRpb25zXG4gKiBAdHlwZSB7b2JqZWN0fVxuICogQHByb3BlcnR5IHtib29sZWFufSBjYWxsT25BZGQgICAgRGV0ZXJtaW5lcyBpZiBsaXN0ZW5lcnMgc2hvdWxkIGJlIGNhbGxlZCB3aGVuIHRoZXkgYXJlIGdldHRpbmcgYWRkZWQuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWZhdWx0IGlzIHRydWUuIElmIHRydWUsIHRoZSBsaXN0ZW5lciBpcyBndWFyYW50ZWVkIHRvIGJlIGNhbGxlZCB3aGVuIGl0IGhhcyBiZWVuIGFkZGVkLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSWYgZmFsc2UsIHRoZSBsaXN0ZW5lciB3aWxsIG5vdCBiZSBndWFyZW50ZWVkIHRvIGJlIGNhbGxlZCB3aGVuIGl0IGhhcyBiZWVuIGFkZGVkIChkb2VzIG5vdCBwcmV2ZW50IGl0IGZyb20gYmVpbmcgY2FsbGVkKS5cbiAqIEBwcm9wZXJ0eSB7aWRIYW5kbGVyfSBpZEhhbmRsZXIgIEEgY3VzdG9tIGlkIGhhbmRsZXIgdGhhdCBpcyByZXNwb25zaWJsZSBmb3IgZ2VuZXJhdGluZywgc2V0dGluZyBhbmQgcmV0cmlldmluZyBpZCdzIGZvciBlbGVtZW50cy5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIElmIG5vdCBwcm92aWRlZCwgYSBkZWZhdWx0IGlkIGhhbmRsZXIgd2lsbCBiZSB1c2VkLlxuICogQHByb3BlcnR5IHtyZXBvcnRlcn0gcmVwb3J0ZXIgICAgQSBjdXN0b20gcmVwb3J0ZXIgdGhhdCBoYW5kbGVzIHJlcG9ydGluZyBsb2dzLCB3YXJuaW5ncyBhbmQgZXJyb3JzLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSWYgbm90IHByb3ZpZGVkLCBhIGRlZmF1bHQgaWQgaGFuZGxlciB3aWxsIGJlIHVzZWQuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJZiBzZXQgdG8gZmFsc2UsIHRoZW4gbm90aGluZyB3aWxsIGJlIHJlcG9ydGVkLlxuICogQHByb3BlcnR5IHtib29sZWFufSBkZWJ1ZyAgICAgICAgSWYgc2V0IHRvIHRydWUsIHRoZSB0aGUgc3lzdGVtIHdpbGwgcmVwb3J0IGRlYnVnIG1lc3NhZ2VzIGFzIGRlZmF1bHQgZm9yIHRoZSBsaXN0ZW5UbyBtZXRob2QuXG4gKi9cblxuLyoqXG4gKiBDcmVhdGVzIGFuIGVsZW1lbnQgcmVzaXplIGRldGVjdG9yIGluc3RhbmNlLlxuICogQHB1YmxpY1xuICogQHBhcmFtIHtPcHRpb25zP30gb3B0aW9ucyBPcHRpb25hbCBnbG9iYWwgb3B0aW9ucyBvYmplY3QgdGhhdCB3aWxsIGRlY2lkZSBob3cgdGhpcyBpbnN0YW5jZSB3aWxsIHdvcmsuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gICAgLy9pZEhhbmRsZXIgaXMgY3VycmVudGx5IG5vdCBhbiBvcHRpb24gdG8gdGhlIGxpc3RlblRvIGZ1bmN0aW9uLCBzbyBpdCBzaG91bGQgbm90IGJlIGFkZGVkIHRvIGdsb2JhbE9wdGlvbnMuXG4gICAgdmFyIGlkSGFuZGxlcjtcblxuICAgIGlmIChvcHRpb25zLmlkSGFuZGxlcikge1xuICAgICAgICAvLyBUbyBtYWludGFpbiBjb21wYXRhYmlsaXR5IHdpdGggaWRIYW5kbGVyLmdldChlbGVtZW50LCByZWFkb25seSksIG1ha2Ugc3VyZSB0byB3cmFwIHRoZSBnaXZlbiBpZEhhbmRsZXJcbiAgICAgICAgLy8gc28gdGhhdCByZWFkb25seSBmbGFnIGFsd2F5cyBpcyB0cnVlIHdoZW4gaXQncyB1c2VkIGhlcmUuIFRoaXMgbWF5IGJlIHJlbW92ZWQgbmV4dCBtYWpvciB2ZXJzaW9uIGJ1bXAuXG4gICAgICAgIGlkSGFuZGxlciA9IHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKGVsZW1lbnQpIHsgcmV0dXJuIG9wdGlvbnMuaWRIYW5kbGVyLmdldChlbGVtZW50LCB0cnVlKTsgfSxcbiAgICAgICAgICAgIHNldDogb3B0aW9ucy5pZEhhbmRsZXIuc2V0XG4gICAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGlkR2VuZXJhdG9yID0gaWRHZW5lcmF0b3JNYWtlcigpO1xuICAgICAgICB2YXIgZGVmYXVsdElkSGFuZGxlciA9IGlkSGFuZGxlck1ha2VyKHtcbiAgICAgICAgICAgIGlkR2VuZXJhdG9yOiBpZEdlbmVyYXRvcixcbiAgICAgICAgICAgIHN0YXRlSGFuZGxlcjogc3RhdGVIYW5kbGVyXG4gICAgICAgIH0pO1xuICAgICAgICBpZEhhbmRsZXIgPSBkZWZhdWx0SWRIYW5kbGVyO1xuICAgIH1cblxuICAgIC8vcmVwb3J0ZXIgaXMgY3VycmVudGx5IG5vdCBhbiBvcHRpb24gdG8gdGhlIGxpc3RlblRvIGZ1bmN0aW9uLCBzbyBpdCBzaG91bGQgbm90IGJlIGFkZGVkIHRvIGdsb2JhbE9wdGlvbnMuXG4gICAgdmFyIHJlcG9ydGVyID0gb3B0aW9ucy5yZXBvcnRlcjtcblxuICAgIGlmKCFyZXBvcnRlcikge1xuICAgICAgICAvL0lmIG9wdGlvbnMucmVwb3J0ZXIgaXMgZmFsc2UsIHRoZW4gdGhlIHJlcG9ydGVyIHNob3VsZCBiZSBxdWlldC5cbiAgICAgICAgdmFyIHF1aWV0ID0gcmVwb3J0ZXIgPT09IGZhbHNlO1xuICAgICAgICByZXBvcnRlciA9IHJlcG9ydGVyTWFrZXIocXVpZXQpO1xuICAgIH1cblxuICAgIC8vYmF0Y2hQcm9jZXNzb3IgaXMgY3VycmVudGx5IG5vdCBhbiBvcHRpb24gdG8gdGhlIGxpc3RlblRvIGZ1bmN0aW9uLCBzbyBpdCBzaG91bGQgbm90IGJlIGFkZGVkIHRvIGdsb2JhbE9wdGlvbnMuXG4gICAgdmFyIGJhdGNoUHJvY2Vzc29yID0gZ2V0T3B0aW9uKG9wdGlvbnMsIFwiYmF0Y2hQcm9jZXNzb3JcIiwgYmF0Y2hQcm9jZXNzb3JNYWtlcih7IHJlcG9ydGVyOiByZXBvcnRlciB9KSk7XG5cbiAgICAvL09wdGlvbnMgdG8gYmUgdXNlZCBhcyBkZWZhdWx0IGZvciB0aGUgbGlzdGVuVG8gZnVuY3Rpb24uXG4gICAgdmFyIGdsb2JhbE9wdGlvbnMgPSB7fTtcbiAgICBnbG9iYWxPcHRpb25zLmNhbGxPbkFkZCAgICAgPSAhIWdldE9wdGlvbihvcHRpb25zLCBcImNhbGxPbkFkZFwiLCB0cnVlKTtcbiAgICBnbG9iYWxPcHRpb25zLmRlYnVnICAgICAgICAgPSAhIWdldE9wdGlvbihvcHRpb25zLCBcImRlYnVnXCIsIGZhbHNlKTtcblxuICAgIHZhciBldmVudExpc3RlbmVySGFuZGxlciAgICA9IGxpc3RlbmVySGFuZGxlck1ha2VyKGlkSGFuZGxlcik7XG4gICAgdmFyIGVsZW1lbnRVdGlscyAgICAgICAgICAgID0gZWxlbWVudFV0aWxzTWFrZXIoe1xuICAgICAgICBzdGF0ZUhhbmRsZXI6IHN0YXRlSGFuZGxlclxuICAgIH0pO1xuXG4gICAgLy9UaGUgZGV0ZWN0aW9uIHN0cmF0ZWd5IHRvIGJlIHVzZWQuXG4gICAgdmFyIGRldGVjdGlvblN0cmF0ZWd5O1xuICAgIHZhciBkZXNpcmVkU3RyYXRlZ3kgPSBnZXRPcHRpb24ob3B0aW9ucywgXCJzdHJhdGVneVwiLCBcIm9iamVjdFwiKTtcbiAgICB2YXIgc3RyYXRlZ3lPcHRpb25zID0ge1xuICAgICAgICByZXBvcnRlcjogcmVwb3J0ZXIsXG4gICAgICAgIGJhdGNoUHJvY2Vzc29yOiBiYXRjaFByb2Nlc3NvcixcbiAgICAgICAgc3RhdGVIYW5kbGVyOiBzdGF0ZUhhbmRsZXIsXG4gICAgICAgIGlkSGFuZGxlcjogaWRIYW5kbGVyXG4gICAgfTtcblxuICAgIGlmKGRlc2lyZWRTdHJhdGVneSA9PT0gXCJzY3JvbGxcIikge1xuICAgICAgICBpZiAoYnJvd3NlckRldGVjdG9yLmlzTGVnYWN5T3BlcmEoKSkge1xuICAgICAgICAgICAgcmVwb3J0ZXIud2FybihcIlNjcm9sbCBzdHJhdGVneSBpcyBub3Qgc3VwcG9ydGVkIG9uIGxlZ2FjeSBPcGVyYS4gQ2hhbmdpbmcgdG8gb2JqZWN0IHN0cmF0ZWd5LlwiKTtcbiAgICAgICAgICAgIGRlc2lyZWRTdHJhdGVneSA9IFwib2JqZWN0XCI7XG4gICAgICAgIH0gZWxzZSBpZiAoYnJvd3NlckRldGVjdG9yLmlzSUUoOSkpIHtcbiAgICAgICAgICAgIHJlcG9ydGVyLndhcm4oXCJTY3JvbGwgc3RyYXRlZ3kgaXMgbm90IHN1cHBvcnRlZCBvbiBJRTkuIENoYW5naW5nIHRvIG9iamVjdCBzdHJhdGVneS5cIik7XG4gICAgICAgICAgICBkZXNpcmVkU3RyYXRlZ3kgPSBcIm9iamVjdFwiO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYoZGVzaXJlZFN0cmF0ZWd5ID09PSBcInNjcm9sbFwiKSB7XG4gICAgICAgIGRldGVjdGlvblN0cmF0ZWd5ID0gc2Nyb2xsU3RyYXRlZ3lNYWtlcihzdHJhdGVneU9wdGlvbnMpO1xuICAgIH0gZWxzZSBpZihkZXNpcmVkU3RyYXRlZ3kgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgZGV0ZWN0aW9uU3RyYXRlZ3kgPSBvYmplY3RTdHJhdGVneU1ha2VyKHN0cmF0ZWd5T3B0aW9ucyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBzdHJhdGVneSBuYW1lOiBcIiArIGRlc2lyZWRTdHJhdGVneSk7XG4gICAgfVxuXG4gICAgLy9DYWxscyBjYW4gYmUgbWFkZSB0byBsaXN0ZW5UbyB3aXRoIGVsZW1lbnRzIHRoYXQgYXJlIHN0aWxsIGJlaW5nIGluc3RhbGxlZC5cbiAgICAvL0Fsc28sIHNhbWUgZWxlbWVudHMgY2FuIG9jY3VyIGluIHRoZSBlbGVtZW50cyBsaXN0IGluIHRoZSBsaXN0ZW5UbyBmdW5jdGlvbi5cbiAgICAvL1dpdGggdGhpcyBtYXAsIHRoZSByZWFkeSBjYWxsYmFja3MgY2FuIGJlIHN5bmNocm9uaXplZCBiZXR3ZWVuIHRoZSBjYWxsc1xuICAgIC8vc28gdGhhdCB0aGUgcmVhZHkgY2FsbGJhY2sgY2FuIGFsd2F5cyBiZSBjYWxsZWQgd2hlbiBhbiBlbGVtZW50IGlzIHJlYWR5IC0gZXZlbiBpZlxuICAgIC8vaXQgd2Fzbid0IGluc3RhbGxlZCBmcm9tIHRoZSBmdW5jdGlvbiBpdHNlbGYuXG4gICAgdmFyIG9uUmVhZHlDYWxsYmFja3MgPSB7fTtcblxuICAgIC8qKlxuICAgICAqIE1ha2VzIHRoZSBnaXZlbiBlbGVtZW50cyByZXNpemUtZGV0ZWN0YWJsZSBhbmQgc3RhcnRzIGxpc3RlbmluZyB0byByZXNpemUgZXZlbnRzIG9uIHRoZSBlbGVtZW50cy4gQ2FsbHMgdGhlIGV2ZW50IGNhbGxiYWNrIGZvciBlYWNoIGV2ZW50IGZvciBlYWNoIGVsZW1lbnQuXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7T3B0aW9ucz99IG9wdGlvbnMgT3B0aW9uYWwgb3B0aW9ucyBvYmplY3QuIFRoZXNlIG9wdGlvbnMgd2lsbCBvdmVycmlkZSB0aGUgZ2xvYmFsIG9wdGlvbnMuIFNvbWUgb3B0aW9ucyBtYXkgbm90IGJlIG92ZXJyaWRlbiwgc3VjaCBhcyBpZEhhbmRsZXIuXG4gICAgICogQHBhcmFtIHtlbGVtZW50W118ZWxlbWVudH0gZWxlbWVudHMgVGhlIGdpdmVuIGFycmF5IG9mIGVsZW1lbnRzIHRvIGRldGVjdCByZXNpemUgZXZlbnRzIG9mLiBTaW5nbGUgZWxlbWVudCBpcyBhbHNvIHZhbGlkLlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGxpc3RlbmVyIFRoZSBjYWxsYmFjayB0byBiZSBleGVjdXRlZCBmb3IgZWFjaCByZXNpemUgZXZlbnQgZm9yIGVhY2ggZWxlbWVudC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsaXN0ZW5UbyhvcHRpb25zLCBlbGVtZW50cywgbGlzdGVuZXIpIHtcbiAgICAgICAgZnVuY3Rpb24gb25SZXNpemVDYWxsYmFjayhlbGVtZW50KSB7XG4gICAgICAgICAgICB2YXIgbGlzdGVuZXJzID0gZXZlbnRMaXN0ZW5lckhhbmRsZXIuZ2V0KGVsZW1lbnQpO1xuICAgICAgICAgICAgZm9yRWFjaChsaXN0ZW5lcnMsIGZ1bmN0aW9uIGNhbGxMaXN0ZW5lclByb3h5KGxpc3RlbmVyKSB7XG4gICAgICAgICAgICAgICAgbGlzdGVuZXIoZWxlbWVudCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGFkZExpc3RlbmVyKGNhbGxPbkFkZCwgZWxlbWVudCwgbGlzdGVuZXIpIHtcbiAgICAgICAgICAgIGV2ZW50TGlzdGVuZXJIYW5kbGVyLmFkZChlbGVtZW50LCBsaXN0ZW5lcik7XG5cbiAgICAgICAgICAgIGlmKGNhbGxPbkFkZCkge1xuICAgICAgICAgICAgICAgIGxpc3RlbmVyKGVsZW1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy9PcHRpb25zIG9iamVjdCBtYXkgYmUgb21pdHRlZC5cbiAgICAgICAgaWYoIWxpc3RlbmVyKSB7XG4gICAgICAgICAgICBsaXN0ZW5lciA9IGVsZW1lbnRzO1xuICAgICAgICAgICAgZWxlbWVudHMgPSBvcHRpb25zO1xuICAgICAgICAgICAgb3B0aW9ucyA9IHt9O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYoIWVsZW1lbnRzKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBdCBsZWFzdCBvbmUgZWxlbWVudCByZXF1aXJlZC5cIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZighbGlzdGVuZXIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkxpc3RlbmVyIHJlcXVpcmVkLlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0VsZW1lbnQoZWxlbWVudHMpKSB7XG4gICAgICAgICAgICAvLyBBIHNpbmdsZSBlbGVtZW50IGhhcyBiZWVuIHBhc3NlZCBpbi5cbiAgICAgICAgICAgIGVsZW1lbnRzID0gW2VsZW1lbnRzXTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0NvbGxlY3Rpb24oZWxlbWVudHMpKSB7XG4gICAgICAgICAgICAvLyBDb252ZXJ0IGNvbGxlY3Rpb24gdG8gYXJyYXkgZm9yIHBsdWdpbnMuXG4gICAgICAgICAgICAvLyBUT0RPOiBNYXkgd2FudCB0byBjaGVjayBzbyB0aGF0IGFsbCB0aGUgZWxlbWVudHMgaW4gdGhlIGNvbGxlY3Rpb24gYXJlIHZhbGlkIGVsZW1lbnRzLlxuICAgICAgICAgICAgZWxlbWVudHMgPSB0b0FycmF5KGVsZW1lbnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiByZXBvcnRlci5lcnJvcihcIkludmFsaWQgYXJndW1lbnRzLiBNdXN0IGJlIGEgRE9NIGVsZW1lbnQgb3IgYSBjb2xsZWN0aW9uIG9mIERPTSBlbGVtZW50cy5cIik7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZWxlbWVudHNSZWFkeSA9IDA7XG5cbiAgICAgICAgdmFyIGNhbGxPbkFkZCA9IGdldE9wdGlvbihvcHRpb25zLCBcImNhbGxPbkFkZFwiLCBnbG9iYWxPcHRpb25zLmNhbGxPbkFkZCk7XG4gICAgICAgIHZhciBvblJlYWR5Q2FsbGJhY2sgPSBnZXRPcHRpb24ob3B0aW9ucywgXCJvblJlYWR5XCIsIGZ1bmN0aW9uIG5vb3AoKSB7fSk7XG4gICAgICAgIHZhciBkZWJ1ZyA9IGdldE9wdGlvbihvcHRpb25zLCBcImRlYnVnXCIsIGdsb2JhbE9wdGlvbnMuZGVidWcpO1xuXG4gICAgICAgIGZvckVhY2goZWxlbWVudHMsIGZ1bmN0aW9uIGF0dGFjaExpc3RlbmVyVG9FbGVtZW50KGVsZW1lbnQpIHtcbiAgICAgICAgICAgIGlmICghc3RhdGVIYW5kbGVyLmdldFN0YXRlKGVsZW1lbnQpKSB7XG4gICAgICAgICAgICAgICAgc3RhdGVIYW5kbGVyLmluaXRTdGF0ZShlbGVtZW50KTtcbiAgICAgICAgICAgICAgICBpZEhhbmRsZXIuc2V0KGVsZW1lbnQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgaWQgPSBpZEhhbmRsZXIuZ2V0KGVsZW1lbnQpO1xuXG4gICAgICAgICAgICBkZWJ1ZyAmJiByZXBvcnRlci5sb2coXCJBdHRhY2hpbmcgbGlzdGVuZXIgdG8gZWxlbWVudFwiLCBpZCwgZWxlbWVudCk7XG5cbiAgICAgICAgICAgIGlmKCFlbGVtZW50VXRpbHMuaXNEZXRlY3RhYmxlKGVsZW1lbnQpKSB7XG4gICAgICAgICAgICAgICAgZGVidWcgJiYgcmVwb3J0ZXIubG9nKGlkLCBcIk5vdCBkZXRlY3RhYmxlLlwiKTtcbiAgICAgICAgICAgICAgICBpZihlbGVtZW50VXRpbHMuaXNCdXN5KGVsZW1lbnQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlYnVnICYmIHJlcG9ydGVyLmxvZyhpZCwgXCJTeXN0ZW0gYnVzeSBtYWtpbmcgaXQgZGV0ZWN0YWJsZVwiKTtcblxuICAgICAgICAgICAgICAgICAgICAvL1RoZSBlbGVtZW50IGlzIGJlaW5nIHByZXBhcmVkIHRvIGJlIGRldGVjdGFibGUuIERvIG5vdCBtYWtlIGl0IGRldGVjdGFibGUuXG4gICAgICAgICAgICAgICAgICAgIC8vSnVzdCBhZGQgdGhlIGxpc3RlbmVyLCBiZWNhdXNlIHRoZSBlbGVtZW50IHdpbGwgc29vbiBiZSBkZXRlY3RhYmxlLlxuICAgICAgICAgICAgICAgICAgICBhZGRMaXN0ZW5lcihjYWxsT25BZGQsIGVsZW1lbnQsIGxpc3RlbmVyKTtcbiAgICAgICAgICAgICAgICAgICAgb25SZWFkeUNhbGxiYWNrc1tpZF0gPSBvblJlYWR5Q2FsbGJhY2tzW2lkXSB8fCBbXTtcbiAgICAgICAgICAgICAgICAgICAgb25SZWFkeUNhbGxiYWNrc1tpZF0ucHVzaChmdW5jdGlvbiBvblJlYWR5KCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudHNSZWFkeSsrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihlbGVtZW50c1JlYWR5ID09PSBlbGVtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvblJlYWR5Q2FsbGJhY2soKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBkZWJ1ZyAmJiByZXBvcnRlci5sb2coaWQsIFwiTWFraW5nIGRldGVjdGFibGUuLi5cIik7XG4gICAgICAgICAgICAgICAgLy9UaGUgZWxlbWVudCBpcyBub3QgcHJlcGFyZWQgdG8gYmUgZGV0ZWN0YWJsZSwgc28gZG8gcHJlcGFyZSBpdCBhbmQgYWRkIGEgbGlzdGVuZXIgdG8gaXQuXG4gICAgICAgICAgICAgICAgZWxlbWVudFV0aWxzLm1hcmtCdXN5KGVsZW1lbnQsIHRydWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiBkZXRlY3Rpb25TdHJhdGVneS5tYWtlRGV0ZWN0YWJsZSh7IGRlYnVnOiBkZWJ1ZyB9LCBlbGVtZW50LCBmdW5jdGlvbiBvbkVsZW1lbnREZXRlY3RhYmxlKGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVidWcgJiYgcmVwb3J0ZXIubG9nKGlkLCBcIm9uRWxlbWVudERldGVjdGFibGVcIik7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlSGFuZGxlci5nZXRTdGF0ZShlbGVtZW50KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudFV0aWxzLm1hcmtBc0RldGVjdGFibGUoZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50VXRpbHMubWFya0J1c3koZWxlbWVudCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGV0ZWN0aW9uU3RyYXRlZ3kuYWRkTGlzdGVuZXIoZWxlbWVudCwgb25SZXNpemVDYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRMaXN0ZW5lcihjYWxsT25BZGQsIGVsZW1lbnQsIGxpc3RlbmVyKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2luY2UgdGhlIGVsZW1lbnQgc2l6ZSBtaWdodCBoYXZlIGNoYW5nZWQgc2luY2UgdGhlIGNhbGwgdG8gXCJsaXN0ZW5Ub1wiLCB3ZSBuZWVkIHRvIGNoZWNrIGZvciB0aGlzIGNoYW5nZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNvIHRoYXQgYSByZXNpemUgZXZlbnQgbWF5IGJlIGVtaXR0ZWQuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBIYXZpbmcgdGhlIHN0YXJ0U2l6ZSBvYmplY3QgaXMgb3B0aW9uYWwgKHNpbmNlIGl0IGRvZXMgbm90IG1ha2Ugc2Vuc2UgaW4gc29tZSBjYXNlcyBzdWNoIGFzIHVucmVuZGVyZWQgZWxlbWVudHMpLCBzbyBjaGVjayBmb3IgaXRzIGV4aXN0YW5jZSBiZWZvcmUuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBbHNvLCBjaGVjayB0aGUgc3RhdGUgZXhpc3RhbmNlIGJlZm9yZSBzaW5jZSB0aGUgZWxlbWVudCBtYXkgaGF2ZSBiZWVuIHVuaW5zdGFsbGVkIGluIHRoZSBpbnN0YWxsYXRpb24gcHJvY2Vzcy5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdGF0ZSA9IHN0YXRlSGFuZGxlci5nZXRTdGF0ZShlbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZSAmJiBzdGF0ZS5zdGFydFNpemUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgd2lkdGggPSBlbGVtZW50Lm9mZnNldFdpZHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBoZWlnaHQgPSBlbGVtZW50Lm9mZnNldEhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUuc3RhcnRTaXplLndpZHRoICE9PSB3aWR0aCB8fCBzdGF0ZS5zdGFydFNpemUuaGVpZ2h0ICE9PSBoZWlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25SZXNpemVDYWxsYmFjayhlbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKG9uUmVhZHlDYWxsYmFja3NbaWRdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yRWFjaChvblJlYWR5Q2FsbGJhY2tzW2lkXSwgZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZSBlbGVtZW50IGhhcyBiZWVuIHVuaXNudGFsbGVkIGJlZm9yZSBiZWluZyBkZXRlY3RhYmxlLlxuICAgICAgICAgICAgICAgICAgICAgICAgZGVidWcgJiYgcmVwb3J0ZXIubG9nKGlkLCBcIkVsZW1lbnQgdW5pbnN0YWxsZWQgYmVmb3JlIGJlaW5nIGRldGVjdGFibGUuXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIG9uUmVhZHlDYWxsYmFja3NbaWRdO1xuXG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnRzUmVhZHkrKztcbiAgICAgICAgICAgICAgICAgICAgaWYoZWxlbWVudHNSZWFkeSA9PT0gZWxlbWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvblJlYWR5Q2FsbGJhY2soKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkZWJ1ZyAmJiByZXBvcnRlci5sb2coaWQsIFwiQWxyZWFkeSBkZXRlY2FibGUsIGFkZGluZyBsaXN0ZW5lci5cIik7XG5cbiAgICAgICAgICAgIC8vVGhlIGVsZW1lbnQgaGFzIGJlZW4gcHJlcGFyZWQgdG8gYmUgZGV0ZWN0YWJsZSBhbmQgaXMgcmVhZHkgdG8gYmUgbGlzdGVuZWQgdG8uXG4gICAgICAgICAgICBhZGRMaXN0ZW5lcihjYWxsT25BZGQsIGVsZW1lbnQsIGxpc3RlbmVyKTtcbiAgICAgICAgICAgIGVsZW1lbnRzUmVhZHkrKztcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYoZWxlbWVudHNSZWFkeSA9PT0gZWxlbWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBvblJlYWR5Q2FsbGJhY2soKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVuaW5zdGFsbChlbGVtZW50cykge1xuICAgICAgICBpZighZWxlbWVudHMpIHtcbiAgICAgICAgICAgIHJldHVybiByZXBvcnRlci5lcnJvcihcIkF0IGxlYXN0IG9uZSBlbGVtZW50IGlzIHJlcXVpcmVkLlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0VsZW1lbnQoZWxlbWVudHMpKSB7XG4gICAgICAgICAgICAvLyBBIHNpbmdsZSBlbGVtZW50IGhhcyBiZWVuIHBhc3NlZCBpbi5cbiAgICAgICAgICAgIGVsZW1lbnRzID0gW2VsZW1lbnRzXTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0NvbGxlY3Rpb24oZWxlbWVudHMpKSB7XG4gICAgICAgICAgICAvLyBDb252ZXJ0IGNvbGxlY3Rpb24gdG8gYXJyYXkgZm9yIHBsdWdpbnMuXG4gICAgICAgICAgICAvLyBUT0RPOiBNYXkgd2FudCB0byBjaGVjayBzbyB0aGF0IGFsbCB0aGUgZWxlbWVudHMgaW4gdGhlIGNvbGxlY3Rpb24gYXJlIHZhbGlkIGVsZW1lbnRzLlxuICAgICAgICAgICAgZWxlbWVudHMgPSB0b0FycmF5KGVsZW1lbnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiByZXBvcnRlci5lcnJvcihcIkludmFsaWQgYXJndW1lbnRzLiBNdXN0IGJlIGEgRE9NIGVsZW1lbnQgb3IgYSBjb2xsZWN0aW9uIG9mIERPTSBlbGVtZW50cy5cIik7XG4gICAgICAgIH1cblxuICAgICAgICBmb3JFYWNoKGVsZW1lbnRzLCBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICAgICAgZXZlbnRMaXN0ZW5lckhhbmRsZXIucmVtb3ZlQWxsTGlzdGVuZXJzKGVsZW1lbnQpO1xuICAgICAgICAgICAgZGV0ZWN0aW9uU3RyYXRlZ3kudW5pbnN0YWxsKGVsZW1lbnQpO1xuICAgICAgICAgICAgc3RhdGVIYW5kbGVyLmNsZWFuU3RhdGUoZWxlbWVudCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIGxpc3RlblRvOiBsaXN0ZW5UbyxcbiAgICAgICAgcmVtb3ZlTGlzdGVuZXI6IGV2ZW50TGlzdGVuZXJIYW5kbGVyLnJlbW92ZUxpc3RlbmVyLFxuICAgICAgICByZW1vdmVBbGxMaXN0ZW5lcnM6IGV2ZW50TGlzdGVuZXJIYW5kbGVyLnJlbW92ZUFsbExpc3RlbmVycyxcbiAgICAgICAgdW5pbnN0YWxsOiB1bmluc3RhbGxcbiAgICB9O1xufTtcblxuZnVuY3Rpb24gZ2V0T3B0aW9uKG9wdGlvbnMsIG5hbWUsIGRlZmF1bHRWYWx1ZSkge1xuICAgIHZhciB2YWx1ZSA9IG9wdGlvbnNbbmFtZV07XG5cbiAgICBpZigodmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZSA9PT0gbnVsbCkgJiYgZGVmYXVsdFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWU7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgdmFyIGdldFN0YXRlID0gb3B0aW9ucy5zdGF0ZUhhbmRsZXIuZ2V0U3RhdGU7XG5cbiAgICAvKipcbiAgICAgKiBUZWxscyBpZiB0aGUgZWxlbWVudCBoYXMgYmVlbiBtYWRlIGRldGVjdGFibGUgYW5kIHJlYWR5IHRvIGJlIGxpc3RlbmVkIGZvciByZXNpemUgZXZlbnRzLlxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcGFyYW0ge2VsZW1lbnR9IFRoZSBlbGVtZW50IHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIG9yIGZhbHNlIGRlcGVuZGluZyBvbiBpZiB0aGUgZWxlbWVudCBpcyBkZXRlY3RhYmxlIG9yIG5vdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0RldGVjdGFibGUoZWxlbWVudCkge1xuICAgICAgICB2YXIgc3RhdGUgPSBnZXRTdGF0ZShlbGVtZW50KTtcbiAgICAgICAgcmV0dXJuIHN0YXRlICYmICEhc3RhdGUuaXNEZXRlY3RhYmxlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1hcmtzIHRoZSBlbGVtZW50IHRoYXQgaXQgaGFzIGJlZW4gbWFkZSBkZXRlY3RhYmxlIGFuZCByZWFkeSB0byBiZSBsaXN0ZW5lZCBmb3IgcmVzaXplIGV2ZW50cy5cbiAgICAgKiBAcHVibGljXG4gICAgICogQHBhcmFtIHtlbGVtZW50fSBUaGUgZWxlbWVudCB0byBtYXJrLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcmtBc0RldGVjdGFibGUoZWxlbWVudCkge1xuICAgICAgICBnZXRTdGF0ZShlbGVtZW50KS5pc0RldGVjdGFibGUgPSB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRlbGxzIGlmIHRoZSBlbGVtZW50IGlzIGJ1c3kgb3Igbm90LlxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcGFyYW0ge2VsZW1lbnR9IFRoZSBlbGVtZW50IHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIG9yIGZhbHNlIGRlcGVuZGluZyBvbiBpZiB0aGUgZWxlbWVudCBpcyBidXN5IG9yIG5vdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0J1c3koZWxlbWVudCkge1xuICAgICAgICByZXR1cm4gISFnZXRTdGF0ZShlbGVtZW50KS5idXN5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1hcmtzIHRoZSBvYmplY3QgaXMgYnVzeSBhbmQgc2hvdWxkIG5vdCBiZSBtYWRlIGRldGVjdGFibGUuXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7ZWxlbWVudH0gZWxlbWVudCBUaGUgZWxlbWVudCB0byBtYXJrLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gYnVzeSBJZiB0aGUgZWxlbWVudCBpcyBidXN5IG9yIG5vdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXJrQnVzeShlbGVtZW50LCBidXN5KSB7XG4gICAgICAgIGdldFN0YXRlKGVsZW1lbnQpLmJ1c3kgPSAhIWJ1c3k7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgaXNEZXRlY3RhYmxlOiBpc0RldGVjdGFibGUsXG4gICAgICAgIG1hcmtBc0RldGVjdGFibGU6IG1hcmtBc0RldGVjdGFibGUsXG4gICAgICAgIGlzQnVzeTogaXNCdXN5LFxuICAgICAgICBtYXJrQnVzeTogbWFya0J1c3lcbiAgICB9O1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGlkSGFuZGxlcikge1xuICAgIHZhciBldmVudExpc3RlbmVycyA9IHt9O1xuXG4gICAgLyoqXG4gICAgICogR2V0cyBhbGwgbGlzdGVuZXJzIGZvciB0aGUgZ2l2ZW4gZWxlbWVudC5cbiAgICAgKiBAcHVibGljXG4gICAgICogQHBhcmFtIHtlbGVtZW50fSBlbGVtZW50IFRoZSBlbGVtZW50IHRvIGdldCBhbGwgbGlzdGVuZXJzIGZvci5cbiAgICAgKiBAcmV0dXJucyBBbGwgbGlzdGVuZXJzIGZvciB0aGUgZ2l2ZW4gZWxlbWVudC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRMaXN0ZW5lcnMoZWxlbWVudCkge1xuICAgICAgICB2YXIgaWQgPSBpZEhhbmRsZXIuZ2V0KGVsZW1lbnQpO1xuXG4gICAgICAgIGlmIChpZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZXZlbnRMaXN0ZW5lcnNbaWRdIHx8IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFN0b3JlcyB0aGUgZ2l2ZW4gbGlzdGVuZXIgZm9yIHRoZSBnaXZlbiBlbGVtZW50LiBXaWxsIG5vdCBhY3R1YWxseSBhZGQgdGhlIGxpc3RlbmVyIHRvIHRoZSBlbGVtZW50LlxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcGFyYW0ge2VsZW1lbnR9IGVsZW1lbnQgVGhlIGVsZW1lbnQgdGhhdCBzaG91bGQgaGF2ZSB0aGUgbGlzdGVuZXIgYWRkZWQuXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gbGlzdGVuZXIgVGhlIGNhbGxiYWNrIHRoYXQgdGhlIGVsZW1lbnQgaGFzIGFkZGVkLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFkZExpc3RlbmVyKGVsZW1lbnQsIGxpc3RlbmVyKSB7XG4gICAgICAgIHZhciBpZCA9IGlkSGFuZGxlci5nZXQoZWxlbWVudCk7XG5cbiAgICAgICAgaWYoIWV2ZW50TGlzdGVuZXJzW2lkXSkge1xuICAgICAgICAgICAgZXZlbnRMaXN0ZW5lcnNbaWRdID0gW107XG4gICAgICAgIH1cblxuICAgICAgICBldmVudExpc3RlbmVyc1tpZF0ucHVzaChsaXN0ZW5lcik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXIoZWxlbWVudCwgbGlzdGVuZXIpIHtcbiAgICAgICAgdmFyIGxpc3RlbmVycyA9IGdldExpc3RlbmVycyhlbGVtZW50KTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGxpc3RlbmVycy5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgICAgICAgICAgaWYgKGxpc3RlbmVyc1tpXSA9PT0gbGlzdGVuZXIpIHtcbiAgICAgICAgICAgICAgbGlzdGVuZXJzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZW1vdmVBbGxMaXN0ZW5lcnMoZWxlbWVudCkge1xuICAgICAgdmFyIGxpc3RlbmVycyA9IGdldExpc3RlbmVycyhlbGVtZW50KTtcbiAgICAgIGlmICghbGlzdGVuZXJzKSB7IHJldHVybjsgfVxuICAgICAgbGlzdGVuZXJzLmxlbmd0aCA9IDA7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgZ2V0OiBnZXRMaXN0ZW5lcnMsXG4gICAgICAgIGFkZDogYWRkTGlzdGVuZXIsXG4gICAgICAgIHJlbW92ZUxpc3RlbmVyOiByZW1vdmVMaXN0ZW5lcixcbiAgICAgICAgcmVtb3ZlQWxsTGlzdGVuZXJzOiByZW1vdmVBbGxMaXN0ZW5lcnNcbiAgICB9O1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpZENvdW50ID0gMTtcblxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlcyBhIG5ldyB1bmlxdWUgaWQgaW4gdGhlIGNvbnRleHQuXG4gICAgICogQHB1YmxpY1xuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IEEgdW5pcXVlIGlkIGluIHRoZSBjb250ZXh0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdlbmVyYXRlKCkge1xuICAgICAgICByZXR1cm4gaWRDb3VudCsrO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIGdlbmVyYXRlOiBnZW5lcmF0ZVxuICAgIH07XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIHZhciBpZEdlbmVyYXRvciAgICAgPSBvcHRpb25zLmlkR2VuZXJhdG9yO1xuICAgIHZhciBnZXRTdGF0ZSAgICAgICAgPSBvcHRpb25zLnN0YXRlSGFuZGxlci5nZXRTdGF0ZTtcblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHJlc2l6ZSBkZXRlY3RvciBpZCBvZiB0aGUgZWxlbWVudC5cbiAgICAgKiBAcHVibGljXG4gICAgICogQHBhcmFtIHtlbGVtZW50fSBlbGVtZW50IFRoZSB0YXJnZXQgZWxlbWVudCB0byBnZXQgdGhlIGlkIG9mLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8bnVtYmVyfG51bGx9IFRoZSBpZCBvZiB0aGUgZWxlbWVudC4gTnVsbCBpZiBpdCBoYXMgbm8gaWQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0SWQoZWxlbWVudCkge1xuICAgICAgICB2YXIgc3RhdGUgPSBnZXRTdGF0ZShlbGVtZW50KTtcblxuICAgICAgICBpZiAoc3RhdGUgJiYgc3RhdGUuaWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHN0YXRlLmlkO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgcmVzaXplIGRldGVjdG9yIGlkIG9mIHRoZSBlbGVtZW50LiBSZXF1aXJlcyB0aGUgZWxlbWVudCB0byBoYXZlIGEgcmVzaXplIGRldGVjdG9yIHN0YXRlIGluaXRpYWxpemVkLlxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcGFyYW0ge2VsZW1lbnR9IGVsZW1lbnQgVGhlIHRhcmdldCBlbGVtZW50IHRvIHNldCB0aGUgaWQgb2YuXG4gICAgICogQHJldHVybnMge3N0cmluZ3xudW1iZXJ8bnVsbH0gVGhlIGlkIG9mIHRoZSBlbGVtZW50LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldElkKGVsZW1lbnQpIHtcbiAgICAgICAgdmFyIHN0YXRlID0gZ2V0U3RhdGUoZWxlbWVudCk7XG5cbiAgICAgICAgaWYgKCFzdGF0ZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwic2V0SWQgcmVxdWlyZWQgdGhlIGVsZW1lbnQgdG8gaGF2ZSBhIHJlc2l6ZSBkZXRlY3Rpb24gc3RhdGUuXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGlkID0gaWRHZW5lcmF0b3IuZ2VuZXJhdGUoKTtcblxuICAgICAgICBzdGF0ZS5pZCA9IGlkO1xuXG4gICAgICAgIHJldHVybiBpZDtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBnZXQ6IGdldElkLFxuICAgICAgICBzZXQ6IHNldElkXG4gICAgfTtcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLyogZ2xvYmFsIGNvbnNvbGU6IGZhbHNlICovXG5cbi8qKlxuICogUmVwb3J0ZXIgdGhhdCBoYW5kbGVzIHRoZSByZXBvcnRpbmcgb2YgbG9ncywgd2FybmluZ3MgYW5kIGVycm9ycy5cbiAqIEBwdWJsaWNcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gcXVpZXQgVGVsbHMgaWYgdGhlIHJlcG9ydGVyIHNob3VsZCBiZSBxdWlldCBvciBub3QuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ocXVpZXQpIHtcbiAgICBmdW5jdGlvbiBub29wKCkge1xuICAgICAgICAvL0RvZXMgbm90aGluZy5cbiAgICB9XG5cbiAgICB2YXIgcmVwb3J0ZXIgPSB7XG4gICAgICAgIGxvZzogbm9vcCxcbiAgICAgICAgd2Fybjogbm9vcCxcbiAgICAgICAgZXJyb3I6IG5vb3BcbiAgICB9O1xuXG4gICAgaWYoIXF1aWV0ICYmIHdpbmRvdy5jb25zb2xlKSB7XG4gICAgICAgIHZhciBhdHRhY2hGdW5jdGlvbiA9IGZ1bmN0aW9uKHJlcG9ydGVyLCBuYW1lKSB7XG4gICAgICAgICAgICAvL1RoZSBwcm94eSBpcyBuZWVkZWQgdG8gYmUgYWJsZSB0byBjYWxsIHRoZSBtZXRob2Qgd2l0aCB0aGUgY29uc29sZSBjb250ZXh0LFxuICAgICAgICAgICAgLy9zaW5jZSB3ZSBjYW5ub3QgdXNlIGJpbmQuXG4gICAgICAgICAgICByZXBvcnRlcltuYW1lXSA9IGZ1bmN0aW9uIHJlcG9ydGVyUHJveHkoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGYgPSBjb25zb2xlW25hbWVdO1xuICAgICAgICAgICAgICAgIGlmIChmLmFwcGx5KSB7IC8vSUU5IGRvZXMgbm90IHN1cHBvcnQgY29uc29sZS5sb2cuYXBwbHkgOilcbiAgICAgICAgICAgICAgICAgICAgZi5hcHBseShjb25zb2xlLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmKGFyZ3VtZW50c1tpXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuXG4gICAgICAgIGF0dGFjaEZ1bmN0aW9uKHJlcG9ydGVyLCBcImxvZ1wiKTtcbiAgICAgICAgYXR0YWNoRnVuY3Rpb24ocmVwb3J0ZXIsIFwid2FyblwiKTtcbiAgICAgICAgYXR0YWNoRnVuY3Rpb24ocmVwb3J0ZXIsIFwiZXJyb3JcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcG9ydGVyO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHV0aWxzID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYmF0Y2hQcm9jZXNzb3JNYWtlcihvcHRpb25zKSB7XG4gICAgb3B0aW9ucyAgICAgICAgICAgICA9IG9wdGlvbnMgfHwge307XG4gICAgdmFyIHJlcG9ydGVyICAgICAgICA9IG9wdGlvbnMucmVwb3J0ZXI7XG4gICAgdmFyIGFzeW5jUHJvY2VzcyAgICA9IHV0aWxzLmdldE9wdGlvbihvcHRpb25zLCBcImFzeW5jXCIsIHRydWUpO1xuICAgIHZhciBhdXRvUHJvY2VzcyAgICAgPSB1dGlscy5nZXRPcHRpb24ob3B0aW9ucywgXCJhdXRvXCIsIHRydWUpO1xuXG4gICAgaWYoYXV0b1Byb2Nlc3MgJiYgIWFzeW5jUHJvY2Vzcykge1xuICAgICAgICByZXBvcnRlciAmJiByZXBvcnRlci53YXJuKFwiSW52YWxpZCBvcHRpb25zIGNvbWJpbmF0aW9uLiBhdXRvPXRydWUgYW5kIGFzeW5jPWZhbHNlIGlzIGludmFsaWQuIFNldHRpbmcgYXN5bmM9dHJ1ZS5cIik7XG4gICAgICAgIGFzeW5jUHJvY2VzcyA9IHRydWU7XG4gICAgfVxuXG4gICAgdmFyIGJhdGNoID0gQmF0Y2goKTtcbiAgICB2YXIgYXN5bmNGcmFtZUhhbmRsZXI7XG4gICAgdmFyIGlzUHJvY2Vzc2luZyA9IGZhbHNlO1xuXG4gICAgZnVuY3Rpb24gYWRkRnVuY3Rpb24obGV2ZWwsIGZuKSB7XG4gICAgICAgIGlmKCFpc1Byb2Nlc3NpbmcgJiYgYXV0b1Byb2Nlc3MgJiYgYXN5bmNQcm9jZXNzICYmIGJhdGNoLnNpemUoKSA9PT0gMCkge1xuICAgICAgICAgICAgLy8gU2luY2UgdGhpcyBpcyBhc3luYywgaXQgaXMgZ3VhcmFudGVlZCB0byBiZSBleGVjdXRlZCBhZnRlciB0aGF0IHRoZSBmbiBpcyBhZGRlZCB0byB0aGUgYmF0Y2guXG4gICAgICAgICAgICAvLyBUaGlzIG5lZWRzIHRvIGJlIGRvbmUgYmVmb3JlLCBzaW5jZSB3ZSdyZSBjaGVja2luZyB0aGUgc2l6ZSBvZiB0aGUgYmF0Y2ggdG8gYmUgMC5cbiAgICAgICAgICAgIHByb2Nlc3NCYXRjaEFzeW5jKCk7XG4gICAgICAgIH1cblxuICAgICAgICBiYXRjaC5hZGQobGV2ZWwsIGZuKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwcm9jZXNzQmF0Y2goKSB7XG4gICAgICAgIC8vIFNhdmUgdGhlIGN1cnJlbnQgYmF0Y2gsIGFuZCBjcmVhdGUgYSBuZXcgYmF0Y2ggc28gdGhhdCBpbmNvbWluZyBmdW5jdGlvbnMgYXJlIG5vdCBhZGRlZCBpbnRvIHRoZSBjdXJyZW50bHkgcHJvY2Vzc2luZyBiYXRjaC5cbiAgICAgICAgLy8gQ29udGludWUgcHJvY2Vzc2luZyB1bnRpbCB0aGUgdG9wLWxldmVsIGJhdGNoIGlzIGVtcHR5IChmdW5jdGlvbnMgbWF5IGJlIGFkZGVkIHRvIHRoZSBuZXcgYmF0Y2ggd2hpbGUgcHJvY2Vzc2luZywgYW5kIHNvIG9uKS5cbiAgICAgICAgaXNQcm9jZXNzaW5nID0gdHJ1ZTtcbiAgICAgICAgd2hpbGUgKGJhdGNoLnNpemUoKSkge1xuICAgICAgICAgICAgdmFyIHByb2Nlc3NpbmdCYXRjaCA9IGJhdGNoO1xuICAgICAgICAgICAgYmF0Y2ggPSBCYXRjaCgpO1xuICAgICAgICAgICAgcHJvY2Vzc2luZ0JhdGNoLnByb2Nlc3MoKTtcbiAgICAgICAgfVxuICAgICAgICBpc1Byb2Nlc3NpbmcgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmb3JjZVByb2Nlc3NCYXRjaChsb2NhbEFzeW5jUHJvY2Vzcykge1xuICAgICAgICBpZiAoaXNQcm9jZXNzaW5nKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZihsb2NhbEFzeW5jUHJvY2VzcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBsb2NhbEFzeW5jUHJvY2VzcyA9IGFzeW5jUHJvY2VzcztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKGFzeW5jRnJhbWVIYW5kbGVyKSB7XG4gICAgICAgICAgICBjYW5jZWxGcmFtZShhc3luY0ZyYW1lSGFuZGxlcik7XG4gICAgICAgICAgICBhc3luY0ZyYW1lSGFuZGxlciA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBpZihsb2NhbEFzeW5jUHJvY2Vzcykge1xuICAgICAgICAgICAgcHJvY2Vzc0JhdGNoQXN5bmMoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHByb2Nlc3NCYXRjaCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcHJvY2Vzc0JhdGNoQXN5bmMoKSB7XG4gICAgICAgIGFzeW5jRnJhbWVIYW5kbGVyID0gcmVxdWVzdEZyYW1lKHByb2Nlc3NCYXRjaCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xlYXJCYXRjaCgpIHtcbiAgICAgICAgYmF0Y2ggICAgICAgICAgID0ge307XG4gICAgICAgIGJhdGNoU2l6ZSAgICAgICA9IDA7XG4gICAgICAgIHRvcExldmVsICAgICAgICA9IDA7XG4gICAgICAgIGJvdHRvbUxldmVsICAgICA9IDA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2FuY2VsRnJhbWUobGlzdGVuZXIpIHtcbiAgICAgICAgLy8gdmFyIGNhbmNlbCA9IHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSB8fCB3aW5kb3cubW96Q2FuY2VsQW5pbWF0aW9uRnJhbWUgfHwgd2luZG93LndlYmtpdENhbmNlbEFuaW1hdGlvbkZyYW1lIHx8IHdpbmRvdy5jbGVhclRpbWVvdXQ7XG4gICAgICAgIHZhciBjYW5jZWwgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjYW5jZWwobGlzdGVuZXIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlcXVlc3RGcmFtZShjYWxsYmFjaykge1xuICAgICAgICAvLyB2YXIgcmFmID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSB8fCB3aW5kb3cubW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8IHdpbmRvdy53ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHwgZnVuY3Rpb24oZm4pIHsgcmV0dXJuIHdpbmRvdy5zZXRUaW1lb3V0KGZuLCAyMCk7IH07XG4gICAgICAgIHZhciByYWYgPSBmdW5jdGlvbihmbikgeyByZXR1cm4gc2V0VGltZW91dChmbiwgMCk7IH07XG4gICAgICAgIHJldHVybiByYWYoY2FsbGJhY2spO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIGFkZDogYWRkRnVuY3Rpb24sXG4gICAgICAgIGZvcmNlOiBmb3JjZVByb2Nlc3NCYXRjaFxuICAgIH07XG59O1xuXG5mdW5jdGlvbiBCYXRjaCgpIHtcbiAgICB2YXIgYmF0Y2ggICAgICAgPSB7fTtcbiAgICB2YXIgc2l6ZSAgICAgICAgPSAwO1xuICAgIHZhciB0b3BMZXZlbCAgICA9IDA7XG4gICAgdmFyIGJvdHRvbUxldmVsID0gMDtcblxuICAgIGZ1bmN0aW9uIGFkZChsZXZlbCwgZm4pIHtcbiAgICAgICAgaWYoIWZuKSB7XG4gICAgICAgICAgICBmbiA9IGxldmVsO1xuICAgICAgICAgICAgbGV2ZWwgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYobGV2ZWwgPiB0b3BMZXZlbCkge1xuICAgICAgICAgICAgdG9wTGV2ZWwgPSBsZXZlbDtcbiAgICAgICAgfSBlbHNlIGlmKGxldmVsIDwgYm90dG9tTGV2ZWwpIHtcbiAgICAgICAgICAgIGJvdHRvbUxldmVsID0gbGV2ZWw7XG4gICAgICAgIH1cblxuICAgICAgICBpZighYmF0Y2hbbGV2ZWxdKSB7XG4gICAgICAgICAgICBiYXRjaFtsZXZlbF0gPSBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJhdGNoW2xldmVsXS5wdXNoKGZuKTtcbiAgICAgICAgc2l6ZSsrO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHByb2Nlc3MoKSB7XG4gICAgICAgIGZvcih2YXIgbGV2ZWwgPSBib3R0b21MZXZlbDsgbGV2ZWwgPD0gdG9wTGV2ZWw7IGxldmVsKyspIHtcbiAgICAgICAgICAgIHZhciBmbnMgPSBiYXRjaFtsZXZlbF07XG5cbiAgICAgICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBmbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgZm4gPSBmbnNbaV07XG4gICAgICAgICAgICAgICAgZm4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFNpemUoKSB7XG4gICAgICAgIHJldHVybiBzaXplO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIGFkZDogYWRkLFxuICAgICAgICBwcm9jZXNzOiBwcm9jZXNzLFxuICAgICAgICBzaXplOiBnZXRTaXplXG4gICAgfTtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgdXRpbHMgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG51dGlscy5nZXRPcHRpb24gPSBnZXRPcHRpb247XG5cbmZ1bmN0aW9uIGdldE9wdGlvbihvcHRpb25zLCBuYW1lLCBkZWZhdWx0VmFsdWUpIHtcbiAgICB2YXIgdmFsdWUgPSBvcHRpb25zW25hbWVdO1xuXG4gICAgaWYoKHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsdWUgPT09IG51bGwpICYmIGRlZmF1bHRWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlO1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBwcm9wID0gXCJfZXJkXCI7XG5cbmZ1bmN0aW9uIGluaXRTdGF0ZShlbGVtZW50KSB7XG4gICAgZWxlbWVudFtwcm9wXSA9IHt9O1xuICAgIHJldHVybiBnZXRTdGF0ZShlbGVtZW50KTtcbn1cblxuZnVuY3Rpb24gZ2V0U3RhdGUoZWxlbWVudCkge1xuICAgIHJldHVybiBlbGVtZW50W3Byb3BdO1xufVxuXG5mdW5jdGlvbiBjbGVhblN0YXRlKGVsZW1lbnQpIHtcbiAgICBkZWxldGUgZWxlbWVudFtwcm9wXTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgaW5pdFN0YXRlOiBpbml0U3RhdGUsXG4gICAgZ2V0U3RhdGU6IGdldFN0YXRlLFxuICAgIGNsZWFuU3RhdGU6IGNsZWFuU3RhdGVcbn07XG4iLCIvKipcbiAqIFJlc2l6ZSBkZXRlY3Rpb24gc3RyYXRlZ3kgdGhhdCBpbmplY3RzIG9iamVjdHMgdG8gZWxlbWVudHMgaW4gb3JkZXIgdG8gZGV0ZWN0IHJlc2l6ZSBldmVudHMuXG4gKiBIZWF2aWx5IGluc3BpcmVkIGJ5OiBodHRwOi8vd3d3LmJhY2thbGxleWNvZGVyLmNvbS8yMDEzLzAzLzE4L2Nyb3NzLWJyb3dzZXItZXZlbnQtYmFzZWQtZWxlbWVudC1yZXNpemUtZGV0ZWN0aW9uL1xuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgYnJvd3NlckRldGVjdG9yID0gcmVxdWlyZShcIi4uL2Jyb3dzZXItZGV0ZWN0b3JcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIG9wdGlvbnMgICAgICAgICAgICAgPSBvcHRpb25zIHx8IHt9O1xuICAgIHZhciByZXBvcnRlciAgICAgICAgPSBvcHRpb25zLnJlcG9ydGVyO1xuICAgIHZhciBiYXRjaFByb2Nlc3NvciAgPSBvcHRpb25zLmJhdGNoUHJvY2Vzc29yO1xuICAgIHZhciBnZXRTdGF0ZSAgICAgICAgPSBvcHRpb25zLnN0YXRlSGFuZGxlci5nZXRTdGF0ZTtcblxuICAgIGlmKCFyZXBvcnRlcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIHJlcXVpcmVkIGRlcGVuZGVuY3k6IHJlcG9ydGVyLlwiKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgcmVzaXplIGV2ZW50IGxpc3RlbmVyIHRvIHRoZSBlbGVtZW50LlxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcGFyYW0ge2VsZW1lbnR9IGVsZW1lbnQgVGhlIGVsZW1lbnQgdGhhdCBzaG91bGQgaGF2ZSB0aGUgbGlzdGVuZXIgYWRkZWQuXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gbGlzdGVuZXIgVGhlIGxpc3RlbmVyIGNhbGxiYWNrIHRvIGJlIGNhbGxlZCBmb3IgZWFjaCByZXNpemUgZXZlbnQgb2YgdGhlIGVsZW1lbnQuIFRoZSBlbGVtZW50IHdpbGwgYmUgZ2l2ZW4gYXMgYSBwYXJhbWV0ZXIgdG8gdGhlIGxpc3RlbmVyIGNhbGxiYWNrLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFkZExpc3RlbmVyKGVsZW1lbnQsIGxpc3RlbmVyKSB7XG4gICAgICAgIGlmKCFnZXRPYmplY3QoZWxlbWVudCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkVsZW1lbnQgaXMgbm90IGRldGVjdGFibGUgYnkgdGhpcyBzdHJhdGVneS5cIik7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBsaXN0ZW5lclByb3h5KCkge1xuICAgICAgICAgICAgbGlzdGVuZXIoZWxlbWVudCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZihicm93c2VyRGV0ZWN0b3IuaXNJRSg4KSkge1xuICAgICAgICAgICAgLy9JRSA4IGRvZXMgbm90IHN1cHBvcnQgb2JqZWN0LCBidXQgc3VwcG9ydHMgdGhlIHJlc2l6ZSBldmVudCBkaXJlY3RseSBvbiBlbGVtZW50cy5cbiAgICAgICAgICAgIGdldFN0YXRlKGVsZW1lbnQpLm9iamVjdCA9IHtcbiAgICAgICAgICAgICAgICBwcm94eTogbGlzdGVuZXJQcm94eVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGVsZW1lbnQuYXR0YWNoRXZlbnQoXCJvbnJlc2l6ZVwiLCBsaXN0ZW5lclByb3h5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBvYmplY3QgPSBnZXRPYmplY3QoZWxlbWVudCk7XG4gICAgICAgICAgICBvYmplY3QuY29udGVudERvY3VtZW50LmRlZmF1bHRWaWV3LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgbGlzdGVuZXJQcm94eSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNYWtlcyBhbiBlbGVtZW50IGRldGVjdGFibGUgYW5kIHJlYWR5IHRvIGJlIGxpc3RlbmVkIGZvciByZXNpemUgZXZlbnRzLiBXaWxsIGNhbGwgdGhlIGNhbGxiYWNrIHdoZW4gdGhlIGVsZW1lbnQgaXMgcmVhZHkgdG8gYmUgbGlzdGVuZWQgZm9yIHJlc2l6ZSBjaGFuZ2VzLlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgT3B0aW9uYWwgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtlbGVtZW50fSBlbGVtZW50IFRoZSBlbGVtZW50IHRvIG1ha2UgZGV0ZWN0YWJsZVxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIFRoZSBjYWxsYmFjayB0byBiZSBjYWxsZWQgd2hlbiB0aGUgZWxlbWVudCBpcyByZWFkeSB0byBiZSBsaXN0ZW5lZCBmb3IgcmVzaXplIGNoYW5nZXMuIFdpbGwgYmUgY2FsbGVkIHdpdGggdGhlIGVsZW1lbnQgYXMgZmlyc3QgcGFyYW1ldGVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1ha2VEZXRlY3RhYmxlKG9wdGlvbnMsIGVsZW1lbnQsIGNhbGxiYWNrKSB7XG4gICAgICAgIGlmICghY2FsbGJhY2spIHtcbiAgICAgICAgICAgIGNhbGxiYWNrID0gZWxlbWVudDtcbiAgICAgICAgICAgIGVsZW1lbnQgPSBvcHRpb25zO1xuICAgICAgICAgICAgb3B0aW9ucyA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgICAgdmFyIGRlYnVnID0gb3B0aW9ucy5kZWJ1ZztcblxuICAgICAgICBmdW5jdGlvbiBpbmplY3RPYmplY3QoZWxlbWVudCwgY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHZhciBPQkpFQ1RfU1RZTEUgPSBcImRpc3BsYXk6IGJsb2NrOyBwb3NpdGlvbjogYWJzb2x1dGU7IHRvcDogMDsgbGVmdDogMDsgd2lkdGg6IDEwMCU7IGhlaWdodDogMTAwJTsgYm9yZGVyOiBub25lOyBwYWRkaW5nOiAwOyBtYXJnaW46IDA7IG9wYWNpdHk6IDA7IHotaW5kZXg6IC0xMDAwOyBwb2ludGVyLWV2ZW50czogbm9uZTtcIjtcblxuICAgICAgICAgICAgLy9UaGUgdGFyZ2V0IGVsZW1lbnQgbmVlZHMgdG8gYmUgcG9zaXRpb25lZCAoZXZlcnl0aGluZyBleGNlcHQgc3RhdGljKSBzbyB0aGUgYWJzb2x1dGUgcG9zaXRpb25lZCBvYmplY3Qgd2lsbCBiZSBwb3NpdGlvbmVkIHJlbGF0aXZlIHRvIHRoZSB0YXJnZXQgZWxlbWVudC5cblxuICAgICAgICAgICAgLy8gUG9zaXRpb24gYWx0ZXJpbmcgbWF5IGJlIHBlcmZvcm1lZCBkaXJlY3RseSBvciBvbiBvYmplY3QgbG9hZCwgZGVwZW5kaW5nIG9uIGlmIHN0eWxlIHJlc29sdXRpb24gaXMgcG9zc2libGUgZGlyZWN0bHkgb3Igbm90LlxuICAgICAgICAgICAgdmFyIHBvc2l0aW9uQ2hlY2tQZXJmb3JtZWQgPSBmYWxzZTtcblxuICAgICAgICAgICAgLy8gVGhlIGVsZW1lbnQgbWF5IG5vdCB5ZXQgYmUgYXR0YWNoZWQgdG8gdGhlIERPTSwgYW5kIHRoZXJlZm9yZSB0aGUgc3R5bGUgb2JqZWN0IG1heSBiZSBlbXB0eSBpbiBzb21lIGJyb3dzZXJzLlxuICAgICAgICAgICAgLy8gU2luY2UgdGhlIHN0eWxlIG9iamVjdCBpcyBhIHJlZmVyZW5jZSwgaXQgd2lsbCBiZSB1cGRhdGVkIGFzIHNvb24gYXMgdGhlIGVsZW1lbnQgaXMgYXR0YWNoZWQgdG8gdGhlIERPTS5cbiAgICAgICAgICAgIHZhciBzdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xuICAgICAgICAgICAgdmFyIHdpZHRoID0gZWxlbWVudC5vZmZzZXRXaWR0aDtcbiAgICAgICAgICAgIHZhciBoZWlnaHQgPSBlbGVtZW50Lm9mZnNldEhlaWdodDtcblxuICAgICAgICAgICAgZ2V0U3RhdGUoZWxlbWVudCkuc3RhcnRTaXplID0ge1xuICAgICAgICAgICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IGhlaWdodFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgZnVuY3Rpb24gbXV0YXRlRG9tKCkge1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGFsdGVyUG9zaXRpb25TdHlsZXMoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmKHN0eWxlLnBvc2l0aW9uID09PSBcInN0YXRpY1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnN0eWxlLnBvc2l0aW9uID0gXCJyZWxhdGl2ZVwiO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVtb3ZlUmVsYXRpdmVTdHlsZXMgPSBmdW5jdGlvbihyZXBvcnRlciwgZWxlbWVudCwgc3R5bGUsIHByb3BlcnR5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZ2V0TnVtZXJpY2FsVmFsdWUodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlLnJlcGxhY2UoL1teLVxcZFxcLl0vZywgXCJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gc3R5bGVbcHJvcGVydHldO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYodmFsdWUgIT09IFwiYXV0b1wiICYmIGdldE51bWVyaWNhbFZhbHVlKHZhbHVlKSAhPT0gXCIwXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwb3J0ZXIud2FybihcIkFuIGVsZW1lbnQgdGhhdCBpcyBwb3NpdGlvbmVkIHN0YXRpYyBoYXMgc3R5bGUuXCIgKyBwcm9wZXJ0eSArIFwiPVwiICsgdmFsdWUgKyBcIiB3aGljaCBpcyBpZ25vcmVkIGR1ZSB0byB0aGUgc3RhdGljIHBvc2l0aW9uaW5nLiBUaGUgZWxlbWVudCB3aWxsIG5lZWQgdG8gYmUgcG9zaXRpb25lZCByZWxhdGl2ZSwgc28gdGhlIHN0eWxlLlwiICsgcHJvcGVydHkgKyBcIiB3aWxsIGJlIHNldCB0byAwLiBFbGVtZW50OiBcIiwgZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc3R5bGVbcHJvcGVydHldID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvL0NoZWNrIHNvIHRoYXQgdGhlcmUgYXJlIG5vIGFjY2lkZW50YWwgc3R5bGVzIHRoYXQgd2lsbCBtYWtlIHRoZSBlbGVtZW50IHN0eWxlZCBkaWZmZXJlbnRseSBub3cgdGhhdCBpcyBpcyByZWxhdGl2ZS5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vSWYgdGhlcmUgYXJlIGFueSwgc2V0IHRoZW0gdG8gMCAodGhpcyBzaG91bGQgYmUgb2theSB3aXRoIHRoZSB1c2VyIHNpbmNlIHRoZSBzdHlsZSBwcm9wZXJ0aWVzIGRpZCBub3RoaW5nIGJlZm9yZSBbc2luY2UgdGhlIGVsZW1lbnQgd2FzIHBvc2l0aW9uZWQgc3RhdGljXSBhbnl3YXkpLlxuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlUmVsYXRpdmVTdHlsZXMocmVwb3J0ZXIsIGVsZW1lbnQsIHN0eWxlLCBcInRvcFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZVJlbGF0aXZlU3R5bGVzKHJlcG9ydGVyLCBlbGVtZW50LCBzdHlsZSwgXCJyaWdodFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZVJlbGF0aXZlU3R5bGVzKHJlcG9ydGVyLCBlbGVtZW50LCBzdHlsZSwgXCJib3R0b21cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVSZWxhdGl2ZVN0eWxlcyhyZXBvcnRlciwgZWxlbWVudCwgc3R5bGUsIFwibGVmdFwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIG9uT2JqZWN0TG9hZCgpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlIG9iamVjdCBoYXMgYmVlbiBsb2FkZWQsIHdoaWNoIG1lYW5zIHRoYXQgdGhlIGVsZW1lbnQgbm93IGlzIGd1YXJhbnRlZWQgdG8gYmUgYXR0YWNoZWQgdG8gdGhlIERPTS5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFwb3NpdGlvbkNoZWNrUGVyZm9ybWVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbHRlclBvc2l0aW9uU3R5bGVzKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvKmpzaGludCB2YWxpZHRoaXM6IHRydWUgKi9cblxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBnZXREb2N1bWVudChlbGVtZW50LCBjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy9PcGVyYSAxMiBzZWVtIHRvIGNhbGwgdGhlIG9iamVjdC5vbmxvYWQgYmVmb3JlIHRoZSBhY3R1YWwgZG9jdW1lbnQgaGFzIGJlZW4gY3JlYXRlZC5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vU28gaWYgaXQgaXMgbm90IHByZXNlbnQsIHBvbGwgaXQgd2l0aCBhbiB0aW1lb3V0IHVudGlsIGl0IGlzIHByZXNlbnQuXG4gICAgICAgICAgICAgICAgICAgICAgICAvL1RPRE86IENvdWxkIG1heWJlIGJlIGhhbmRsZWQgYmV0dGVyIHdpdGggb2JqZWN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSBvciBzaW1pbGFyLlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoIWVsZW1lbnQuY29udGVudERvY3VtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiBjaGVja0Zvck9iamVjdERvY3VtZW50KCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXREb2N1bWVudChlbGVtZW50LCBjYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgMTAwKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZWxlbWVudC5jb250ZW50RG9jdW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy9NdXRhdGluZyB0aGUgb2JqZWN0IGVsZW1lbnQgaGVyZSBzZWVtcyB0byBmaXJlIGFub3RoZXIgbG9hZCBldmVudC5cbiAgICAgICAgICAgICAgICAgICAgLy9NdXRhdGluZyB0aGUgaW5uZXIgZG9jdW1lbnQgb2YgdGhlIG9iamVjdCBlbGVtZW50IGlzIGZpbmUgdGhvdWdoLlxuICAgICAgICAgICAgICAgICAgICB2YXIgb2JqZWN0RWxlbWVudCA9IHRoaXM7XG5cbiAgICAgICAgICAgICAgICAgICAgLy9DcmVhdGUgdGhlIHN0eWxlIGVsZW1lbnQgdG8gYmUgYWRkZWQgdG8gdGhlIG9iamVjdC5cbiAgICAgICAgICAgICAgICAgICAgZ2V0RG9jdW1lbnQob2JqZWN0RWxlbWVudCwgZnVuY3Rpb24gb25PYmplY3REb2N1bWVudFJlYWR5KG9iamVjdERvY3VtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL05vdGlmeSB0aGF0IHRoZSBlbGVtZW50IGlzIHJlYWR5IHRvIGJlIGxpc3RlbmVkIHRvLlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIFRoZSBlbGVtZW50IG1heSBiZSBkZXRhY2hlZCBmcm9tIHRoZSBET00sIGFuZCBzb21lIGJyb3dzZXJzIGRvZXMgbm90IHN1cHBvcnQgc3R5bGUgcmVzb2x2aW5nIG9mIGRldGFjaGVkIGVsZW1lbnRzLlxuICAgICAgICAgICAgICAgIC8vIFRoZSBhbHRlclBvc2l0aW9uU3R5bGVzIG5lZWRzIHRvIGJlIGRlbGF5ZWQgdW50aWwgd2Uga25vdyB0aGUgZWxlbWVudCBoYXMgYmVlbiBhdHRhY2hlZCB0byB0aGUgRE9NICh3aGljaCB3ZSBhcmUgc3VyZSBvZiB3aGVuIHRoZSBvbk9iamVjdExvYWQgaGFzIGJlZW4gZmlyZWQpLCBpZiBzdHlsZSByZXNvbHV0aW9uIGlzIG5vdCBwb3NzaWJsZS5cbiAgICAgICAgICAgICAgICBpZiAoc3R5bGUucG9zaXRpb24gIT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgYWx0ZXJQb3NpdGlvblN0eWxlcyhzdHlsZSk7XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uQ2hlY2tQZXJmb3JtZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vQWRkIGFuIG9iamVjdCBlbGVtZW50IGFzIGEgY2hpbGQgdG8gdGhlIHRhcmdldCBlbGVtZW50IHRoYXQgd2lsbCBiZSBsaXN0ZW5lZCB0byBmb3IgcmVzaXplIGV2ZW50cy5cbiAgICAgICAgICAgICAgICB2YXIgb2JqZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIm9iamVjdFwiKTtcbiAgICAgICAgICAgICAgICBvYmplY3Quc3R5bGUuY3NzVGV4dCA9IE9CSkVDVF9TVFlMRTtcbiAgICAgICAgICAgICAgICBvYmplY3QudGFiSW5kZXggPSAtMTtcbiAgICAgICAgICAgICAgICBvYmplY3QudHlwZSA9IFwidGV4dC9odG1sXCI7XG4gICAgICAgICAgICAgICAgb2JqZWN0Lm9ubG9hZCA9IG9uT2JqZWN0TG9hZDtcblxuICAgICAgICAgICAgICAgIC8vU2FmYXJpOiBUaGlzIG11c3Qgb2NjdXIgYmVmb3JlIGFkZGluZyB0aGUgb2JqZWN0IHRvIHRoZSBET00uXG4gICAgICAgICAgICAgICAgLy9JRTogRG9lcyBub3QgbGlrZSB0aGF0IHRoaXMgaGFwcGVucyBiZWZvcmUsIGV2ZW4gaWYgaXQgaXMgYWxzbyBhZGRlZCBhZnRlci5cbiAgICAgICAgICAgICAgICBpZighYnJvd3NlckRldGVjdG9yLmlzSUUoKSkge1xuICAgICAgICAgICAgICAgICAgICBvYmplY3QuZGF0YSA9IFwiYWJvdXQ6YmxhbmtcIjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBlbGVtZW50LmFwcGVuZENoaWxkKG9iamVjdCk7XG4gICAgICAgICAgICAgICAgZ2V0U3RhdGUoZWxlbWVudCkub2JqZWN0ID0gb2JqZWN0O1xuXG4gICAgICAgICAgICAgICAgLy9JRTogVGhpcyBtdXN0IG9jY3VyIGFmdGVyIGFkZGluZyB0aGUgb2JqZWN0IHRvIHRoZSBET00uXG4gICAgICAgICAgICAgICAgaWYoYnJvd3NlckRldGVjdG9yLmlzSUUoKSkge1xuICAgICAgICAgICAgICAgICAgICBvYmplY3QuZGF0YSA9IFwiYWJvdXQ6YmxhbmtcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmKGJhdGNoUHJvY2Vzc29yKSB7XG4gICAgICAgICAgICAgICAgYmF0Y2hQcm9jZXNzb3IuYWRkKG11dGF0ZURvbSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG11dGF0ZURvbSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYoYnJvd3NlckRldGVjdG9yLmlzSUUoOCkpIHtcbiAgICAgICAgICAgIC8vSUUgOCBkb2VzIG5vdCBzdXBwb3J0IG9iamVjdHMgcHJvcGVybHkuIEx1Y2tpbHkgdGhleSBkbyBzdXBwb3J0IHRoZSByZXNpemUgZXZlbnQuXG4gICAgICAgICAgICAvL1NvIGRvIG5vdCBpbmplY3QgdGhlIG9iamVjdCBhbmQgbm90aWZ5IHRoYXQgdGhlIGVsZW1lbnQgaXMgYWxyZWFkeSByZWFkeSB0byBiZSBsaXN0ZW5lZCB0by5cbiAgICAgICAgICAgIC8vVGhlIGV2ZW50IGhhbmRsZXIgZm9yIHRoZSByZXNpemUgZXZlbnQgaXMgYXR0YWNoZWQgaW4gdGhlIHV0aWxzLmFkZExpc3RlbmVyIGluc3RlYWQuXG4gICAgICAgICAgICBjYWxsYmFjayhlbGVtZW50KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGluamVjdE9iamVjdChlbGVtZW50LCBjYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBjaGlsZCBvYmplY3Qgb2YgdGhlIHRhcmdldCBlbGVtZW50LlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtlbGVtZW50fSBlbGVtZW50IFRoZSB0YXJnZXQgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyBUaGUgb2JqZWN0IGVsZW1lbnQgb2YgdGhlIHRhcmdldC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRPYmplY3QoZWxlbWVudCkge1xuICAgICAgICByZXR1cm4gZ2V0U3RhdGUoZWxlbWVudCkub2JqZWN0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVuaW5zdGFsbChlbGVtZW50KSB7XG4gICAgICAgIGlmKGJyb3dzZXJEZXRlY3Rvci5pc0lFKDgpKSB7XG4gICAgICAgICAgICBlbGVtZW50LmRldGFjaEV2ZW50KFwib25yZXNpemVcIiwgZ2V0U3RhdGUoZWxlbWVudCkub2JqZWN0LnByb3h5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGVsZW1lbnQucmVtb3ZlQ2hpbGQoZ2V0T2JqZWN0KGVsZW1lbnQpKTtcbiAgICAgICAgfVxuICAgICAgICBkZWxldGUgZ2V0U3RhdGUoZWxlbWVudCkub2JqZWN0O1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIG1ha2VEZXRlY3RhYmxlOiBtYWtlRGV0ZWN0YWJsZSxcbiAgICAgICAgYWRkTGlzdGVuZXI6IGFkZExpc3RlbmVyLFxuICAgICAgICB1bmluc3RhbGw6IHVuaW5zdGFsbFxuICAgIH07XG59O1xuIiwiLyoqXG4gKiBSZXNpemUgZGV0ZWN0aW9uIHN0cmF0ZWd5IHRoYXQgaW5qZWN0cyBkaXZzIHRvIGVsZW1lbnRzIGluIG9yZGVyIHRvIGRldGVjdCByZXNpemUgZXZlbnRzIG9uIHNjcm9sbCBldmVudHMuXG4gKiBIZWF2aWx5IGluc3BpcmVkIGJ5OiBodHRwczovL2dpdGh1Yi5jb20vbWFyY2ovY3NzLWVsZW1lbnQtcXVlcmllcy9ibG9iL21hc3Rlci9zcmMvUmVzaXplU2Vuc29yLmpzXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBmb3JFYWNoID0gcmVxdWlyZShcIi4uL2NvbGxlY3Rpb24tdXRpbHNcIikuZm9yRWFjaDtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgb3B0aW9ucyAgICAgICAgICAgICA9IG9wdGlvbnMgfHwge307XG4gICAgdmFyIHJlcG9ydGVyICAgICAgICA9IG9wdGlvbnMucmVwb3J0ZXI7XG4gICAgdmFyIGJhdGNoUHJvY2Vzc29yICA9IG9wdGlvbnMuYmF0Y2hQcm9jZXNzb3I7XG4gICAgdmFyIGdldFN0YXRlICAgICAgICA9IG9wdGlvbnMuc3RhdGVIYW5kbGVyLmdldFN0YXRlO1xuICAgIHZhciBoYXNTdGF0ZSAgICAgICAgPSBvcHRpb25zLnN0YXRlSGFuZGxlci5oYXNTdGF0ZTtcbiAgICB2YXIgaWRIYW5kbGVyICAgICAgID0gb3B0aW9ucy5pZEhhbmRsZXI7XG5cbiAgICBpZiAoIWJhdGNoUHJvY2Vzc29yKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgcmVxdWlyZWQgZGVwZW5kZW5jeTogYmF0Y2hQcm9jZXNzb3JcIik7XG4gICAgfVxuXG4gICAgaWYgKCFyZXBvcnRlcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIHJlcXVpcmVkIGRlcGVuZGVuY3k6IHJlcG9ydGVyLlwiKTtcbiAgICB9XG5cbiAgICAvL1RPRE86IENvdWxkIHRoaXMgcGVyaGFwcyBiZSBkb25lIGF0IGluc3RhbGxhdGlvbiB0aW1lP1xuICAgIHZhciBzY3JvbGxiYXJTaXplcyA9IGdldFNjcm9sbGJhclNpemVzKCk7XG5cbiAgICAvLyBJbmplY3QgdGhlIHNjcm9sbGJhciBzdHlsaW5nIHRoYXQgcHJldmVudHMgdGhlbSBmcm9tIGFwcGVhcmluZyBzb21ldGltZXMgaW4gQ2hyb21lLlxuICAgIC8vIFRoZSBpbmplY3RlZCBjb250YWluZXIgbmVlZHMgdG8gaGF2ZSBhIGNsYXNzLCBzbyB0aGF0IGl0IG1heSBiZSBzdHlsZWQgd2l0aCBDU1MgKHBzZXVkbyBlbGVtZW50cykuXG4gICAgdmFyIHN0eWxlSWQgPSBcImVyZF9zY3JvbGxfZGV0ZWN0aW9uX3Njcm9sbGJhcl9zdHlsZVwiO1xuICAgIHZhciBkZXRlY3Rpb25Db250YWluZXJDbGFzcyA9IFwiZXJkX3Njcm9sbF9kZXRlY3Rpb25fY29udGFpbmVyXCI7XG4gICAgaW5qZWN0U2Nyb2xsU3R5bGUoc3R5bGVJZCwgZGV0ZWN0aW9uQ29udGFpbmVyQ2xhc3MpO1xuXG4gICAgZnVuY3Rpb24gZ2V0U2Nyb2xsYmFyU2l6ZXMoKSB7XG4gICAgICAgIHZhciB3aWR0aCA9IDUwMDtcbiAgICAgICAgdmFyIGhlaWdodCA9IDUwMDtcblxuICAgICAgICB2YXIgY2hpbGQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBjaGlsZC5zdHlsZS5jc3NUZXh0ID0gXCJwb3NpdGlvbjogYWJzb2x1dGU7IHdpZHRoOiBcIiArIHdpZHRoKjIgKyBcInB4OyBoZWlnaHQ6IFwiICsgaGVpZ2h0KjIgKyBcInB4OyB2aXNpYmlsaXR5OiBoaWRkZW47IG1hcmdpbjogMDsgcGFkZGluZzogMDtcIjtcblxuICAgICAgICB2YXIgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgY29udGFpbmVyLnN0eWxlLmNzc1RleHQgPSBcInBvc2l0aW9uOiBhYnNvbHV0ZTsgd2lkdGg6IFwiICsgd2lkdGggKyBcInB4OyBoZWlnaHQ6IFwiICsgaGVpZ2h0ICsgXCJweDsgb3ZlcmZsb3c6IHNjcm9sbDsgdmlzaWJpbGl0eTogbm9uZTsgdG9wOiBcIiArIC13aWR0aCozICsgXCJweDsgbGVmdDogXCIgKyAtaGVpZ2h0KjMgKyBcInB4OyB2aXNpYmlsaXR5OiBoaWRkZW47IG1hcmdpbjogMDsgcGFkZGluZzogMDtcIjtcblxuICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoY2hpbGQpO1xuXG4gICAgICAgIGRvY3VtZW50LmJvZHkuaW5zZXJ0QmVmb3JlKGNvbnRhaW5lciwgZG9jdW1lbnQuYm9keS5maXJzdENoaWxkKTtcblxuICAgICAgICB2YXIgd2lkdGhTaXplID0gd2lkdGggLSBjb250YWluZXIuY2xpZW50V2lkdGg7XG4gICAgICAgIHZhciBoZWlnaHRTaXplID0gaGVpZ2h0IC0gY29udGFpbmVyLmNsaWVudEhlaWdodDtcblxuICAgICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGNvbnRhaW5lcik7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHdpZHRoOiB3aWR0aFNpemUsXG4gICAgICAgICAgICBoZWlnaHQ6IGhlaWdodFNpemVcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbmplY3RTY3JvbGxTdHlsZShzdHlsZUlkLCBjb250YWluZXJDbGFzcykge1xuICAgICAgICBmdW5jdGlvbiBpbmplY3RTdHlsZShzdHlsZSwgbWV0aG9kKSB7XG4gICAgICAgICAgICBtZXRob2QgPSBtZXRob2QgfHwgZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKGVsZW1lbnQpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdmFyIHN0eWxlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgICAgICAgICAgIHN0eWxlRWxlbWVudC5pbm5lckhUTUwgPSBzdHlsZTtcbiAgICAgICAgICAgIHN0eWxlRWxlbWVudC5pZCA9IHN0eWxlSWQ7XG4gICAgICAgICAgICBtZXRob2Qoc3R5bGVFbGVtZW50KTtcbiAgICAgICAgICAgIHJldHVybiBzdHlsZUVsZW1lbnQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHN0eWxlSWQpKSB7XG4gICAgICAgICAgICB2YXIgY29udGFpbmVyQW5pbWF0aW9uQ2xhc3MgPSBjb250YWluZXJDbGFzcyArIFwiX2FuaW1hdGlvblwiO1xuICAgICAgICAgICAgdmFyIGNvbnRhaW5lckFuaW1hdGlvbkFjdGl2ZUNsYXNzID0gY29udGFpbmVyQ2xhc3MgKyBcIl9hbmltYXRpb25fYWN0aXZlXCI7XG4gICAgICAgICAgICB2YXIgc3R5bGUgPSBcIi8qIENyZWF0ZWQgYnkgdGhlIGVsZW1lbnQtcmVzaXplLWRldGVjdG9yIGxpYnJhcnkuICovXFxuXCI7XG4gICAgICAgICAgICBzdHlsZSArPSBcIi5cIiArIGNvbnRhaW5lckNsYXNzICsgXCIgPiBkaXY6Oi13ZWJraXQtc2Nyb2xsYmFyIHsgZGlzcGxheTogbm9uZTsgfVxcblxcblwiO1xuICAgICAgICAgICAgc3R5bGUgKz0gXCIuXCIgKyBjb250YWluZXJBbmltYXRpb25BY3RpdmVDbGFzcyArIFwiIHsgLXdlYmtpdC1hbmltYXRpb24tZHVyYXRpb246IDAuMXM7IGFuaW1hdGlvbi1kdXJhdGlvbjogMC4xczsgLXdlYmtpdC1hbmltYXRpb24tbmFtZTogXCIgKyBjb250YWluZXJBbmltYXRpb25DbGFzcyArIFwiOyBhbmltYXRpb24tbmFtZTogXCIgKyBjb250YWluZXJBbmltYXRpb25DbGFzcyArIFwiOyB9XFxuXCI7XG4gICAgICAgICAgICBzdHlsZSArPSBcIkAtd2Via2l0LWtleWZyYW1lcyBcIiArIGNvbnRhaW5lckFuaW1hdGlvbkNsYXNzICsgIFwiIHsgMCUgeyBvcGFjaXR5OiAxOyB9IDUwJSB7IG9wYWNpdHk6IDA7IH0gMTAwJSB7IG9wYWNpdHk6IDE7IH0gfVxcblwiO1xuICAgICAgICAgICAgc3R5bGUgKz0gXCJAa2V5ZnJhbWVzIFwiICsgY29udGFpbmVyQW5pbWF0aW9uQ2xhc3MgKyAgICAgICAgICBcIiB7IDAlIHsgb3BhY2l0eTogMTsgfSA1MCUgeyBvcGFjaXR5OiAwOyB9IDEwMCUgeyBvcGFjaXR5OiAxOyB9IH1cIjtcbiAgICAgICAgICAgIGluamVjdFN0eWxlKHN0eWxlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZEFuaW1hdGlvbkNsYXNzKGVsZW1lbnQpIHtcbiAgICAgICAgZWxlbWVudC5jbGFzc05hbWUgKz0gXCIgXCIgKyBkZXRlY3Rpb25Db250YWluZXJDbGFzcyArIFwiX2FuaW1hdGlvbl9hY3RpdmVcIjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGRFdmVudChlbCwgbmFtZSwgY2IpIHtcbiAgICAgICAgaWYgKGVsLmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIobmFtZSwgY2IpO1xuICAgICAgICB9IGVsc2UgaWYoZWwuYXR0YWNoRXZlbnQpIHtcbiAgICAgICAgICAgIGVsLmF0dGFjaEV2ZW50KFwib25cIiArIG5hbWUsIGNiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiByZXBvcnRlci5lcnJvcihcIltzY3JvbGxdIERvbid0IGtub3cgaG93IHRvIGFkZCBldmVudCBsaXN0ZW5lcnMuXCIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVtb3ZlRXZlbnQoZWwsIG5hbWUsIGNiKSB7XG4gICAgICAgIGlmIChlbC5yZW1vdmVFdmVudExpc3RlbmVyKSB7XG4gICAgICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKG5hbWUsIGNiKTtcbiAgICAgICAgfSBlbHNlIGlmKGVsLmRldGFjaEV2ZW50KSB7XG4gICAgICAgICAgICBlbC5kZXRhY2hFdmVudChcIm9uXCIgKyBuYW1lLCBjYik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gcmVwb3J0ZXIuZXJyb3IoXCJbc2Nyb2xsXSBEb24ndCBrbm93IGhvdyB0byByZW1vdmUgZXZlbnQgbGlzdGVuZXJzLlwiKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldEV4cGFuZEVsZW1lbnQoZWxlbWVudCkge1xuICAgICAgICByZXR1cm4gZ2V0U3RhdGUoZWxlbWVudCkuY29udGFpbmVyLmNoaWxkTm9kZXNbMF0uY2hpbGROb2Rlc1swXS5jaGlsZE5vZGVzWzBdO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFNocmlua0VsZW1lbnQoZWxlbWVudCkge1xuICAgICAgICByZXR1cm4gZ2V0U3RhdGUoZWxlbWVudCkuY29udGFpbmVyLmNoaWxkTm9kZXNbMF0uY2hpbGROb2Rlc1swXS5jaGlsZE5vZGVzWzFdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMgYSByZXNpemUgZXZlbnQgbGlzdGVuZXIgdG8gdGhlIGVsZW1lbnQuXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7ZWxlbWVudH0gZWxlbWVudCBUaGUgZWxlbWVudCB0aGF0IHNob3VsZCBoYXZlIHRoZSBsaXN0ZW5lciBhZGRlZC5cbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBsaXN0ZW5lciBUaGUgbGlzdGVuZXIgY2FsbGJhY2sgdG8gYmUgY2FsbGVkIGZvciBlYWNoIHJlc2l6ZSBldmVudCBvZiB0aGUgZWxlbWVudC4gVGhlIGVsZW1lbnQgd2lsbCBiZSBnaXZlbiBhcyBhIHBhcmFtZXRlciB0byB0aGUgbGlzdGVuZXIgY2FsbGJhY2suXG4gICAgICovXG4gICAgZnVuY3Rpb24gYWRkTGlzdGVuZXIoZWxlbWVudCwgbGlzdGVuZXIpIHtcbiAgICAgICAgdmFyIGxpc3RlbmVycyA9IGdldFN0YXRlKGVsZW1lbnQpLmxpc3RlbmVycztcblxuICAgICAgICBpZiAoIWxpc3RlbmVycy5wdXNoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgYWRkIGxpc3RlbmVyIHRvIGFuIGVsZW1lbnQgdGhhdCBpcyBub3QgZGV0ZWN0YWJsZS5cIik7XG4gICAgICAgIH1cblxuICAgICAgICBnZXRTdGF0ZShlbGVtZW50KS5saXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTWFrZXMgYW4gZWxlbWVudCBkZXRlY3RhYmxlIGFuZCByZWFkeSB0byBiZSBsaXN0ZW5lZCBmb3IgcmVzaXplIGV2ZW50cy4gV2lsbCBjYWxsIHRoZSBjYWxsYmFjayB3aGVuIHRoZSBlbGVtZW50IGlzIHJlYWR5IHRvIGJlIGxpc3RlbmVkIGZvciByZXNpemUgY2hhbmdlcy5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIE9wdGlvbmFsIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7ZWxlbWVudH0gZWxlbWVudCBUaGUgZWxlbWVudCB0byBtYWtlIGRldGVjdGFibGVcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayBUaGUgY2FsbGJhY2sgdG8gYmUgY2FsbGVkIHdoZW4gdGhlIGVsZW1lbnQgaXMgcmVhZHkgdG8gYmUgbGlzdGVuZWQgZm9yIHJlc2l6ZSBjaGFuZ2VzLiBXaWxsIGJlIGNhbGxlZCB3aXRoIHRoZSBlbGVtZW50IGFzIGZpcnN0IHBhcmFtZXRlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYWtlRGV0ZWN0YWJsZShvcHRpb25zLCBlbGVtZW50LCBjYWxsYmFjaykge1xuICAgICAgICBpZiAoIWNhbGxiYWNrKSB7XG4gICAgICAgICAgICBjYWxsYmFjayA9IGVsZW1lbnQ7XG4gICAgICAgICAgICBlbGVtZW50ID0gb3B0aW9ucztcbiAgICAgICAgICAgIG9wdGlvbnMgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgICAgICAgZnVuY3Rpb24gZGVidWcoKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5kZWJ1Zykge1xuICAgICAgICAgICAgICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcbiAgICAgICAgICAgICAgICBhcmdzLnVuc2hpZnQoaWRIYW5kbGVyLmdldChlbGVtZW50KSwgXCJTY3JvbGw6IFwiKTtcbiAgICAgICAgICAgICAgICBpZiAocmVwb3J0ZXIubG9nLmFwcGx5KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcG9ydGVyLmxvZy5hcHBseShudWxsLCBhcmdzKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcG9ydGVyLmxvZyhhcmdzW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGlzRGV0YWNoZWQoZWxlbWVudCkge1xuICAgICAgICAgICAgZnVuY3Rpb24gaXNJbkRvY3VtZW50KGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZWxlbWVudCA9PT0gZWxlbWVudC5vd25lckRvY3VtZW50LmJvZHkgfHwgZWxlbWVudC5vd25lckRvY3VtZW50LmJvZHkuY29udGFpbnMoZWxlbWVudCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghaXNJbkRvY3VtZW50KGVsZW1lbnQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEZpcmVGb3ggcmV0dXJucyBudWxsIHN0eWxlIGluIGhpZGRlbiBpZnJhbWVzLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3duci9lbGVtZW50LXJlc2l6ZS1kZXRlY3Rvci9pc3N1ZXMvNjggYW5kIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTc5NTUyMFxuICAgICAgICAgICAgaWYgKHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGlzVW5yZW5kZXJlZChlbGVtZW50KSB7XG4gICAgICAgICAgICAvLyBDaGVjayB0aGUgYWJzb2x1dGUgcG9zaXRpb25lZCBjb250YWluZXIgc2luY2UgdGhlIHRvcCBsZXZlbCBjb250YWluZXIgaXMgZGlzcGxheTogaW5saW5lLlxuICAgICAgICAgICAgdmFyIGNvbnRhaW5lciA9IGdldFN0YXRlKGVsZW1lbnQpLmNvbnRhaW5lci5jaGlsZE5vZGVzWzBdO1xuICAgICAgICAgICAgdmFyIHN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoY29udGFpbmVyKTtcbiAgICAgICAgICAgIHJldHVybiAhc3R5bGUud2lkdGggfHwgc3R5bGUud2lkdGguaW5kZXhPZihcInB4XCIpID09PSAtMTsgLy9DYW4gb25seSBjb21wdXRlIHBpeGVsIHZhbHVlIHdoZW4gcmVuZGVyZWQuXG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnZXRTdHlsZSgpIHtcbiAgICAgICAgICAgIC8vIFNvbWUgYnJvd3NlcnMgb25seSBmb3JjZSBsYXlvdXRzIHdoZW4gYWN0dWFsbHkgcmVhZGluZyB0aGUgc3R5bGUgcHJvcGVydGllcyBvZiB0aGUgc3R5bGUgb2JqZWN0LCBzbyBtYWtlIHN1cmUgdGhhdCB0aGV5IGFyZSBhbGwgcmVhZCBoZXJlLFxuICAgICAgICAgICAgLy8gc28gdGhhdCB0aGUgdXNlciBvZiB0aGUgZnVuY3Rpb24gY2FuIGJlIHN1cmUgdGhhdCBpdCB3aWxsIHBlcmZvcm0gdGhlIGxheW91dCBoZXJlLCBpbnN0ZWFkIG9mIGxhdGVyIChpbXBvcnRhbnQgZm9yIGJhdGNoaW5nKS5cbiAgICAgICAgICAgIHZhciBlbGVtZW50U3R5bGUgICAgICAgICAgICA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xuICAgICAgICAgICAgdmFyIHN0eWxlICAgICAgICAgICAgICAgICAgID0ge307XG4gICAgICAgICAgICBzdHlsZS5wb3NpdGlvbiAgICAgICAgICAgICAgPSBlbGVtZW50U3R5bGUucG9zaXRpb247XG4gICAgICAgICAgICBzdHlsZS53aWR0aCAgICAgICAgICAgICAgICAgPSBlbGVtZW50Lm9mZnNldFdpZHRoO1xuICAgICAgICAgICAgc3R5bGUuaGVpZ2h0ICAgICAgICAgICAgICAgID0gZWxlbWVudC5vZmZzZXRIZWlnaHQ7XG4gICAgICAgICAgICBzdHlsZS50b3AgICAgICAgICAgICAgICAgICAgPSBlbGVtZW50U3R5bGUudG9wO1xuICAgICAgICAgICAgc3R5bGUucmlnaHQgICAgICAgICAgICAgICAgID0gZWxlbWVudFN0eWxlLnJpZ2h0O1xuICAgICAgICAgICAgc3R5bGUuYm90dG9tICAgICAgICAgICAgICAgID0gZWxlbWVudFN0eWxlLmJvdHRvbTtcbiAgICAgICAgICAgIHN0eWxlLmxlZnQgICAgICAgICAgICAgICAgICA9IGVsZW1lbnRTdHlsZS5sZWZ0O1xuICAgICAgICAgICAgc3R5bGUud2lkdGhDU1MgICAgICAgICAgICAgID0gZWxlbWVudFN0eWxlLndpZHRoO1xuICAgICAgICAgICAgc3R5bGUuaGVpZ2h0Q1NTICAgICAgICAgICAgID0gZWxlbWVudFN0eWxlLmhlaWdodDtcbiAgICAgICAgICAgIHJldHVybiBzdHlsZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHN0b3JlU3RhcnRTaXplKCkge1xuICAgICAgICAgICAgdmFyIHN0eWxlID0gZ2V0U3R5bGUoKTtcbiAgICAgICAgICAgIGdldFN0YXRlKGVsZW1lbnQpLnN0YXJ0U2l6ZSA9IHtcbiAgICAgICAgICAgICAgICB3aWR0aDogc3R5bGUud2lkdGgsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBzdHlsZS5oZWlnaHRcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBkZWJ1ZyhcIkVsZW1lbnQgc3RhcnQgc2l6ZVwiLCBnZXRTdGF0ZShlbGVtZW50KS5zdGFydFNpemUpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gaW5pdExpc3RlbmVycygpIHtcbiAgICAgICAgICAgIGdldFN0YXRlKGVsZW1lbnQpLmxpc3RlbmVycyA9IFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gc3RvcmVTdHlsZSgpIHtcbiAgICAgICAgICAgIGRlYnVnKFwic3RvcmVTdHlsZSBpbnZva2VkLlwiKTtcbiAgICAgICAgICAgIGlmICghZ2V0U3RhdGUoZWxlbWVudCkpIHtcbiAgICAgICAgICAgICAgICBkZWJ1ZyhcIkFib3J0aW5nIGJlY2F1c2UgZWxlbWVudCBoYXMgYmVlbiB1bmluc3RhbGxlZFwiKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBzdHlsZSA9IGdldFN0eWxlKCk7XG4gICAgICAgICAgICBnZXRTdGF0ZShlbGVtZW50KS5zdHlsZSA9IHN0eWxlO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gc3RvcmVDdXJyZW50U2l6ZShlbGVtZW50LCB3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgICAgICBnZXRTdGF0ZShlbGVtZW50KS5sYXN0V2lkdGggPSB3aWR0aDtcbiAgICAgICAgICAgIGdldFN0YXRlKGVsZW1lbnQpLmxhc3RIZWlnaHQgID0gaGVpZ2h0O1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0RXhwYW5kQ2hpbGRFbGVtZW50KGVsZW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBnZXRFeHBhbmRFbGVtZW50KGVsZW1lbnQpLmNoaWxkTm9kZXNbMF07XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnZXRXaWR0aE9mZnNldCgpIHtcbiAgICAgICAgICAgIHJldHVybiAyICogc2Nyb2xsYmFyU2l6ZXMud2lkdGggKyAxO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0SGVpZ2h0T2Zmc2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIDIgKiBzY3JvbGxiYXJTaXplcy5oZWlnaHQgKyAxO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0RXhwYW5kV2lkdGgod2lkdGgpIHtcbiAgICAgICAgICAgIHJldHVybiB3aWR0aCArIDEwICsgZ2V0V2lkdGhPZmZzZXQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldEV4cGFuZEhlaWdodChoZWlnaHQpIHtcbiAgICAgICAgICAgIHJldHVybiBoZWlnaHQgKyAxMCArIGdldEhlaWdodE9mZnNldCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0U2hyaW5rV2lkdGgod2lkdGgpIHtcbiAgICAgICAgICAgIHJldHVybiB3aWR0aCAqIDIgKyBnZXRXaWR0aE9mZnNldCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0U2hyaW5rSGVpZ2h0KGhlaWdodCkge1xuICAgICAgICAgICAgcmV0dXJuIGhlaWdodCAqIDIgKyBnZXRIZWlnaHRPZmZzZXQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHBvc2l0aW9uU2Nyb2xsYmFycyhlbGVtZW50LCB3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgICAgICB2YXIgZXhwYW5kICAgICAgICAgID0gZ2V0RXhwYW5kRWxlbWVudChlbGVtZW50KTtcbiAgICAgICAgICAgIHZhciBzaHJpbmsgICAgICAgICAgPSBnZXRTaHJpbmtFbGVtZW50KGVsZW1lbnQpO1xuICAgICAgICAgICAgdmFyIGV4cGFuZFdpZHRoICAgICA9IGdldEV4cGFuZFdpZHRoKHdpZHRoKTtcbiAgICAgICAgICAgIHZhciBleHBhbmRIZWlnaHQgICAgPSBnZXRFeHBhbmRIZWlnaHQoaGVpZ2h0KTtcbiAgICAgICAgICAgIHZhciBzaHJpbmtXaWR0aCAgICAgPSBnZXRTaHJpbmtXaWR0aCh3aWR0aCk7XG4gICAgICAgICAgICB2YXIgc2hyaW5rSGVpZ2h0ICAgID0gZ2V0U2hyaW5rSGVpZ2h0KGhlaWdodCk7XG4gICAgICAgICAgICBleHBhbmQuc2Nyb2xsTGVmdCAgID0gZXhwYW5kV2lkdGg7XG4gICAgICAgICAgICBleHBhbmQuc2Nyb2xsVG9wICAgID0gZXhwYW5kSGVpZ2h0O1xuICAgICAgICAgICAgc2hyaW5rLnNjcm9sbExlZnQgICA9IHNocmlua1dpZHRoO1xuICAgICAgICAgICAgc2hyaW5rLnNjcm9sbFRvcCAgICA9IHNocmlua0hlaWdodDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGluamVjdENvbnRhaW5lckVsZW1lbnQoKSB7XG4gICAgICAgICAgICB2YXIgY29udGFpbmVyID0gZ2V0U3RhdGUoZWxlbWVudCkuY29udGFpbmVyO1xuXG4gICAgICAgICAgICBpZiAoIWNvbnRhaW5lcikge1xuICAgICAgICAgICAgICAgIGNvbnRhaW5lciAgICAgICAgICAgICAgICAgICA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgICAgICAgY29udGFpbmVyLmNsYXNzTmFtZSAgICAgICAgID0gZGV0ZWN0aW9uQ29udGFpbmVyQ2xhc3M7XG4gICAgICAgICAgICAgICAgY29udGFpbmVyLnN0eWxlLmNzc1RleHQgICAgID0gXCJ2aXNpYmlsaXR5OiBoaWRkZW47IGRpc3BsYXk6IGlubGluZTsgd2lkdGg6IDBweDsgaGVpZ2h0OiAwcHg7IHotaW5kZXg6IC0xOyBvdmVyZmxvdzogaGlkZGVuOyBtYXJnaW46IDA7IHBhZGRpbmc6IDA7XCI7XG4gICAgICAgICAgICAgICAgZ2V0U3RhdGUoZWxlbWVudCkuY29udGFpbmVyID0gY29udGFpbmVyO1xuICAgICAgICAgICAgICAgIGFkZEFuaW1hdGlvbkNsYXNzKGNvbnRhaW5lcik7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5hcHBlbmRDaGlsZChjb250YWluZXIpO1xuXG4gICAgICAgICAgICAgICAgdmFyIG9uQW5pbWF0aW9uU3RhcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGdldFN0YXRlKGVsZW1lbnQpLm9uUmVuZGVyZWQgJiYgZ2V0U3RhdGUoZWxlbWVudCkub25SZW5kZXJlZCgpO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBhZGRFdmVudChjb250YWluZXIsIFwiYW5pbWF0aW9uc3RhcnRcIiwgb25BbmltYXRpb25TdGFydCk7XG5cbiAgICAgICAgICAgICAgICAvLyBTdG9yZSB0aGUgZXZlbnQgaGFuZGxlciBoZXJlIHNvIHRoYXQgdGhleSBtYXkgYmUgcmVtb3ZlZCB3aGVuIHVuaW5zdGFsbCBpcyBjYWxsZWQuXG4gICAgICAgICAgICAgICAgLy8gU2VlIHVuaW5zdGFsbCBmdW5jdGlvbiBmb3IgYW4gZXhwbGFuYXRpb24gd2h5IGl0IGlzIG5lZWRlZC5cbiAgICAgICAgICAgICAgICBnZXRTdGF0ZShlbGVtZW50KS5vbkFuaW1hdGlvblN0YXJ0ID0gb25BbmltYXRpb25TdGFydDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGNvbnRhaW5lcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGluamVjdFNjcm9sbEVsZW1lbnRzKCkge1xuICAgICAgICAgICAgZnVuY3Rpb24gYWx0ZXJQb3NpdGlvblN0eWxlcygpIHtcbiAgICAgICAgICAgICAgICB2YXIgc3R5bGUgPSBnZXRTdGF0ZShlbGVtZW50KS5zdHlsZTtcblxuICAgICAgICAgICAgICAgIGlmKHN0eWxlLnBvc2l0aW9uID09PSBcInN0YXRpY1wiKSB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSBcInJlbGF0aXZlXCI7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlbW92ZVJlbGF0aXZlU3R5bGVzID0gZnVuY3Rpb24ocmVwb3J0ZXIsIGVsZW1lbnQsIHN0eWxlLCBwcm9wZXJ0eSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZ2V0TnVtZXJpY2FsVmFsdWUodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUucmVwbGFjZSgvW14tXFxkXFwuXS9nLCBcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gc3R5bGVbcHJvcGVydHldO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZih2YWx1ZSAhPT0gXCJhdXRvXCIgJiYgZ2V0TnVtZXJpY2FsVmFsdWUodmFsdWUpICE9PSBcIjBcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcG9ydGVyLndhcm4oXCJBbiBlbGVtZW50IHRoYXQgaXMgcG9zaXRpb25lZCBzdGF0aWMgaGFzIHN0eWxlLlwiICsgcHJvcGVydHkgKyBcIj1cIiArIHZhbHVlICsgXCIgd2hpY2ggaXMgaWdub3JlZCBkdWUgdG8gdGhlIHN0YXRpYyBwb3NpdGlvbmluZy4gVGhlIGVsZW1lbnQgd2lsbCBuZWVkIHRvIGJlIHBvc2l0aW9uZWQgcmVsYXRpdmUsIHNvIHRoZSBzdHlsZS5cIiArIHByb3BlcnR5ICsgXCIgd2lsbCBiZSBzZXQgdG8gMC4gRWxlbWVudDogXCIsIGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc3R5bGVbcHJvcGVydHldID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAvL0NoZWNrIHNvIHRoYXQgdGhlcmUgYXJlIG5vIGFjY2lkZW50YWwgc3R5bGVzIHRoYXQgd2lsbCBtYWtlIHRoZSBlbGVtZW50IHN0eWxlZCBkaWZmZXJlbnRseSBub3cgdGhhdCBpcyBpcyByZWxhdGl2ZS5cbiAgICAgICAgICAgICAgICAgICAgLy9JZiB0aGVyZSBhcmUgYW55LCBzZXQgdGhlbSB0byAwICh0aGlzIHNob3VsZCBiZSBva2F5IHdpdGggdGhlIHVzZXIgc2luY2UgdGhlIHN0eWxlIHByb3BlcnRpZXMgZGlkIG5vdGhpbmcgYmVmb3JlIFtzaW5jZSB0aGUgZWxlbWVudCB3YXMgcG9zaXRpb25lZCBzdGF0aWNdIGFueXdheSkuXG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZVJlbGF0aXZlU3R5bGVzKHJlcG9ydGVyLCBlbGVtZW50LCBzdHlsZSwgXCJ0b3BcIik7XG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZVJlbGF0aXZlU3R5bGVzKHJlcG9ydGVyLCBlbGVtZW50LCBzdHlsZSwgXCJyaWdodFwiKTtcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlUmVsYXRpdmVTdHlsZXMocmVwb3J0ZXIsIGVsZW1lbnQsIHN0eWxlLCBcImJvdHRvbVwiKTtcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlUmVsYXRpdmVTdHlsZXMocmVwb3J0ZXIsIGVsZW1lbnQsIHN0eWxlLCBcImxlZnRcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRMZWZ0VG9wQm90dG9tUmlnaHRDc3NUZXh0KGxlZnQsIHRvcCwgYm90dG9tLCByaWdodCkge1xuICAgICAgICAgICAgICAgIGxlZnQgPSAoIWxlZnQgPyBcIjBcIiA6IChsZWZ0ICsgXCJweFwiKSk7XG4gICAgICAgICAgICAgICAgdG9wID0gKCF0b3AgPyBcIjBcIiA6ICh0b3AgKyBcInB4XCIpKTtcbiAgICAgICAgICAgICAgICBib3R0b20gPSAoIWJvdHRvbSA/IFwiMFwiIDogKGJvdHRvbSArIFwicHhcIikpO1xuICAgICAgICAgICAgICAgIHJpZ2h0ID0gKCFyaWdodCA/IFwiMFwiIDogKHJpZ2h0ICsgXCJweFwiKSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gXCJsZWZ0OiBcIiArIGxlZnQgKyBcIjsgdG9wOiBcIiArIHRvcCArIFwiOyByaWdodDogXCIgKyByaWdodCArIFwiOyBib3R0b206IFwiICsgYm90dG9tICsgXCI7XCI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRlYnVnKFwiSW5qZWN0aW5nIGVsZW1lbnRzXCIpO1xuXG4gICAgICAgICAgICBpZiAoIWdldFN0YXRlKGVsZW1lbnQpKSB7XG4gICAgICAgICAgICAgICAgZGVidWcoXCJBYm9ydGluZyBiZWNhdXNlIGVsZW1lbnQgaGFzIGJlZW4gdW5pbnN0YWxsZWRcIik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBhbHRlclBvc2l0aW9uU3R5bGVzKCk7XG5cbiAgICAgICAgICAgIHZhciByb290Q29udGFpbmVyID0gZ2V0U3RhdGUoZWxlbWVudCkuY29udGFpbmVyO1xuXG4gICAgICAgICAgICBpZiAoIXJvb3RDb250YWluZXIpIHtcbiAgICAgICAgICAgICAgICByb290Q29udGFpbmVyID0gaW5qZWN0Q29udGFpbmVyRWxlbWVudCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBEdWUgdG8gdGhpcyBXZWJLaXQgYnVnIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD04MDgwOCAoY3VycmVudGx5IGZpeGVkIGluIEJsaW5rLCBidXQgc3RpbGwgcHJlc2VudCBpbiBXZWJLaXQgYnJvd3NlcnMgc3VjaCBhcyBTYWZhcmkpLFxuICAgICAgICAgICAgLy8gd2UgbmVlZCB0byBpbmplY3QgdHdvIGNvbnRhaW5lcnMsIG9uZSB0aGF0IGlzIHdpZHRoL2hlaWdodCAxMDAlIGFuZCBhbm90aGVyIHRoYXQgaXMgbGVmdC90b3AgLTFweCBzbyB0aGF0IHRoZSBmaW5hbCBjb250YWluZXIgYWx3YXlzIGlzIDF4MSBwaXhlbHMgYmlnZ2VyIHRoYW5cbiAgICAgICAgICAgIC8vIHRoZSB0YXJnZXRlZCBlbGVtZW50LlxuICAgICAgICAgICAgLy8gV2hlbiB0aGUgYnVnIGlzIHJlc29sdmVkLCBcImNvbnRhaW5lckNvbnRhaW5lclwiIG1heSBiZSByZW1vdmVkLlxuXG4gICAgICAgICAgICAvLyBUaGUgb3V0ZXIgY29udGFpbmVyIGNhbiBvY2Nhc2lvbmFsbHkgYmUgbGVzcyB3aWRlIHRoYW4gdGhlIHRhcmdldGVkIHdoZW4gaW5zaWRlIGlubGluZSBlbGVtZW50cyBlbGVtZW50IGluIFdlYktpdCAoc2VlIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xNTI5ODApLlxuICAgICAgICAgICAgLy8gVGhpcyBzaG91bGQgYmUgbm8gcHJvYmxlbSBzaW5jZSB0aGUgaW5uZXIgY29udGFpbmVyIGVpdGhlciB3YXkgbWFrZXMgc3VyZSB0aGUgaW5qZWN0ZWQgc2Nyb2xsIGVsZW1lbnRzIGFyZSBhdCBsZWFzdCAxeDEgcHguXG5cbiAgICAgICAgICAgIHZhciBzY3JvbGxiYXJXaWR0aCAgICAgICAgICA9IHNjcm9sbGJhclNpemVzLndpZHRoO1xuICAgICAgICAgICAgdmFyIHNjcm9sbGJhckhlaWdodCAgICAgICAgID0gc2Nyb2xsYmFyU2l6ZXMuaGVpZ2h0O1xuICAgICAgICAgICAgdmFyIGNvbnRhaW5lckNvbnRhaW5lclN0eWxlID0gXCJwb3NpdGlvbjogYWJzb2x1dGU7IGZsZXg6IG5vbmU7IG92ZXJmbG93OiBoaWRkZW47IHotaW5kZXg6IC0xOyB2aXNpYmlsaXR5OiBoaWRkZW47IHdpZHRoOiAxMDAlOyBoZWlnaHQ6IDEwMCU7IGxlZnQ6IDBweDsgdG9wOiAwcHg7XCI7XG4gICAgICAgICAgICB2YXIgY29udGFpbmVyU3R5bGUgICAgICAgICAgPSBcInBvc2l0aW9uOiBhYnNvbHV0ZTsgZmxleDogbm9uZTsgb3ZlcmZsb3c6IGhpZGRlbjsgei1pbmRleDogLTE7IHZpc2liaWxpdHk6IGhpZGRlbjsgXCIgKyBnZXRMZWZ0VG9wQm90dG9tUmlnaHRDc3NUZXh0KC0oMSArIHNjcm9sbGJhcldpZHRoKSwgLSgxICsgc2Nyb2xsYmFySGVpZ2h0KSwgLXNjcm9sbGJhckhlaWdodCwgLXNjcm9sbGJhcldpZHRoKTtcbiAgICAgICAgICAgIHZhciBleHBhbmRTdHlsZSAgICAgICAgICAgICA9IFwicG9zaXRpb246IGFic29sdXRlOyBmbGV4OiBub25lOyBvdmVyZmxvdzogc2Nyb2xsOyB6LWluZGV4OiAtMTsgdmlzaWJpbGl0eTogaGlkZGVuOyB3aWR0aDogMTAwJTsgaGVpZ2h0OiAxMDAlO1wiO1xuICAgICAgICAgICAgdmFyIHNocmlua1N0eWxlICAgICAgICAgICAgID0gXCJwb3NpdGlvbjogYWJzb2x1dGU7IGZsZXg6IG5vbmU7IG92ZXJmbG93OiBzY3JvbGw7IHotaW5kZXg6IC0xOyB2aXNpYmlsaXR5OiBoaWRkZW47IHdpZHRoOiAxMDAlOyBoZWlnaHQ6IDEwMCU7XCI7XG4gICAgICAgICAgICB2YXIgZXhwYW5kQ2hpbGRTdHlsZSAgICAgICAgPSBcInBvc2l0aW9uOiBhYnNvbHV0ZTsgbGVmdDogMDsgdG9wOiAwO1wiO1xuICAgICAgICAgICAgdmFyIHNocmlua0NoaWxkU3R5bGUgICAgICAgID0gXCJwb3NpdGlvbjogYWJzb2x1dGU7IHdpZHRoOiAyMDAlOyBoZWlnaHQ6IDIwMCU7XCI7XG5cbiAgICAgICAgICAgIHZhciBjb250YWluZXJDb250YWluZXIgICAgICA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgICB2YXIgY29udGFpbmVyICAgICAgICAgICAgICAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgICAgdmFyIGV4cGFuZCAgICAgICAgICAgICAgICAgID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICAgIHZhciBleHBhbmRDaGlsZCAgICAgICAgICAgICA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgICB2YXIgc2hyaW5rICAgICAgICAgICAgICAgICAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgICAgdmFyIHNocmlua0NoaWxkICAgICAgICAgICAgID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblxuICAgICAgICAgICAgLy8gU29tZSBicm93c2VycyBjaG9rZSBvbiB0aGUgcmVzaXplIHN5c3RlbSBiZWluZyBydGwsIHNvIGZvcmNlIGl0IHRvIGx0ci4gaHR0cHM6Ly9naXRodWIuY29tL3duci9lbGVtZW50LXJlc2l6ZS1kZXRlY3Rvci9pc3N1ZXMvNTZcbiAgICAgICAgICAgIC8vIEhvd2V2ZXIsIGRpciBzaG91bGQgbm90IGJlIHNldCBvbiB0aGUgdG9wIGxldmVsIGNvbnRhaW5lciBhcyBpdCBhbHRlcnMgdGhlIGRpbWVuc2lvbnMgb2YgdGhlIHRhcmdldCBlbGVtZW50IGluIHNvbWUgYnJvd3NlcnMuXG4gICAgICAgICAgICBjb250YWluZXJDb250YWluZXIuZGlyICAgICAgICAgICAgICA9IFwibHRyXCI7XG5cbiAgICAgICAgICAgIGNvbnRhaW5lckNvbnRhaW5lci5zdHlsZS5jc3NUZXh0ICAgID0gY29udGFpbmVyQ29udGFpbmVyU3R5bGU7XG4gICAgICAgICAgICBjb250YWluZXJDb250YWluZXIuY2xhc3NOYW1lICAgICAgICA9IGRldGVjdGlvbkNvbnRhaW5lckNsYXNzO1xuICAgICAgICAgICAgY29udGFpbmVyLmNsYXNzTmFtZSAgICAgICAgICAgICAgICAgPSBkZXRlY3Rpb25Db250YWluZXJDbGFzcztcbiAgICAgICAgICAgIGNvbnRhaW5lci5zdHlsZS5jc3NUZXh0ICAgICAgICAgICAgID0gY29udGFpbmVyU3R5bGU7XG4gICAgICAgICAgICBleHBhbmQuc3R5bGUuY3NzVGV4dCAgICAgICAgICAgICAgICA9IGV4cGFuZFN0eWxlO1xuICAgICAgICAgICAgZXhwYW5kQ2hpbGQuc3R5bGUuY3NzVGV4dCAgICAgICAgICAgPSBleHBhbmRDaGlsZFN0eWxlO1xuICAgICAgICAgICAgc2hyaW5rLnN0eWxlLmNzc1RleHQgICAgICAgICAgICAgICAgPSBzaHJpbmtTdHlsZTtcbiAgICAgICAgICAgIHNocmlua0NoaWxkLnN0eWxlLmNzc1RleHQgICAgICAgICAgID0gc2hyaW5rQ2hpbGRTdHlsZTtcblxuICAgICAgICAgICAgZXhwYW5kLmFwcGVuZENoaWxkKGV4cGFuZENoaWxkKTtcbiAgICAgICAgICAgIHNocmluay5hcHBlbmRDaGlsZChzaHJpbmtDaGlsZCk7XG4gICAgICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoZXhwYW5kKTtcbiAgICAgICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChzaHJpbmspO1xuICAgICAgICAgICAgY29udGFpbmVyQ29udGFpbmVyLmFwcGVuZENoaWxkKGNvbnRhaW5lcik7XG4gICAgICAgICAgICByb290Q29udGFpbmVyLmFwcGVuZENoaWxkKGNvbnRhaW5lckNvbnRhaW5lcik7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIG9uRXhwYW5kU2Nyb2xsKCkge1xuICAgICAgICAgICAgICAgIGdldFN0YXRlKGVsZW1lbnQpLm9uRXhwYW5kICYmIGdldFN0YXRlKGVsZW1lbnQpLm9uRXhwYW5kKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIG9uU2hyaW5rU2Nyb2xsKCkge1xuICAgICAgICAgICAgICAgIGdldFN0YXRlKGVsZW1lbnQpLm9uU2hyaW5rICYmIGdldFN0YXRlKGVsZW1lbnQpLm9uU2hyaW5rKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGFkZEV2ZW50KGV4cGFuZCwgXCJzY3JvbGxcIiwgb25FeHBhbmRTY3JvbGwpO1xuICAgICAgICAgICAgYWRkRXZlbnQoc2hyaW5rLCBcInNjcm9sbFwiLCBvblNocmlua1Njcm9sbCk7XG5cbiAgICAgICAgICAgIC8vIFN0b3JlIHRoZSBldmVudCBoYW5kbGVycyBoZXJlIHNvIHRoYXQgdGhleSBtYXkgYmUgcmVtb3ZlZCB3aGVuIHVuaW5zdGFsbCBpcyBjYWxsZWQuXG4gICAgICAgICAgICAvLyBTZWUgdW5pbnN0YWxsIGZ1bmN0aW9uIGZvciBhbiBleHBsYW5hdGlvbiB3aHkgaXQgaXMgbmVlZGVkLlxuICAgICAgICAgICAgZ2V0U3RhdGUoZWxlbWVudCkub25FeHBhbmRTY3JvbGwgPSBvbkV4cGFuZFNjcm9sbDtcbiAgICAgICAgICAgIGdldFN0YXRlKGVsZW1lbnQpLm9uU2hyaW5rU2Nyb2xsID0gb25TaHJpbmtTY3JvbGw7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiByZWdpc3Rlckxpc3RlbmVyc0FuZFBvc2l0aW9uRWxlbWVudHMoKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiB1cGRhdGVDaGlsZFNpemVzKGVsZW1lbnQsIHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgICAgICAgICB2YXIgZXhwYW5kQ2hpbGQgICAgICAgICAgICAgPSBnZXRFeHBhbmRDaGlsZEVsZW1lbnQoZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgdmFyIGV4cGFuZFdpZHRoICAgICAgICAgICAgID0gZ2V0RXhwYW5kV2lkdGgod2lkdGgpO1xuICAgICAgICAgICAgICAgIHZhciBleHBhbmRIZWlnaHQgICAgICAgICAgICA9IGdldEV4cGFuZEhlaWdodChoZWlnaHQpO1xuICAgICAgICAgICAgICAgIGV4cGFuZENoaWxkLnN0eWxlLndpZHRoICAgICA9IGV4cGFuZFdpZHRoICsgXCJweFwiO1xuICAgICAgICAgICAgICAgIGV4cGFuZENoaWxkLnN0eWxlLmhlaWdodCAgICA9IGV4cGFuZEhlaWdodCArIFwicHhcIjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gdXBkYXRlRGV0ZWN0b3JFbGVtZW50cyhkb25lKSB7XG4gICAgICAgICAgICAgICAgdmFyIHdpZHRoICAgICAgICAgICA9IGVsZW1lbnQub2Zmc2V0V2lkdGg7XG4gICAgICAgICAgICAgICAgdmFyIGhlaWdodCAgICAgICAgICA9IGVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xuXG4gICAgICAgICAgICAgICAgZGVidWcoXCJTdG9yaW5nIGN1cnJlbnQgc2l6ZVwiLCB3aWR0aCwgaGVpZ2h0KTtcblxuICAgICAgICAgICAgICAgIC8vIFN0b3JlIHRoZSBzaXplIG9mIHRoZSBlbGVtZW50IHN5bmMgaGVyZSwgc28gdGhhdCBtdWx0aXBsZSBzY3JvbGwgZXZlbnRzIG1heSBiZSBpZ25vcmVkIGluIHRoZSBldmVudCBsaXN0ZW5lcnMuXG4gICAgICAgICAgICAgICAgLy8gT3RoZXJ3aXNlIHRoZSBpZi1jaGVjayBpbiBoYW5kbGVTY3JvbGwgaXMgdXNlbGVzcy5cbiAgICAgICAgICAgICAgICBzdG9yZUN1cnJlbnRTaXplKGVsZW1lbnQsIHdpZHRoLCBoZWlnaHQpO1xuXG4gICAgICAgICAgICAgICAgLy8gU2luY2Ugd2UgZGVsYXkgdGhlIHByb2Nlc3Npbmcgb2YgdGhlIGJhdGNoLCB0aGVyZSBpcyBhIHJpc2sgdGhhdCB1bmluc3RhbGwgaGFzIGJlZW4gY2FsbGVkIGJlZm9yZSB0aGUgYmF0Y2ggZ2V0cyB0byBleGVjdXRlLlxuICAgICAgICAgICAgICAgIC8vIFNpbmNlIHRoZXJlIGlzIG5vIHdheSB0byBjYW5jZWwgdGhlIGZuIGV4ZWN1dGlvbnMsIHdlIG5lZWQgdG8gYWRkIGFuIHVuaW5zdGFsbCBndWFyZCB0byBhbGwgZm5zIG9mIHRoZSBiYXRjaC5cblxuICAgICAgICAgICAgICAgIGJhdGNoUHJvY2Vzc29yLmFkZCgwLCBmdW5jdGlvbiBwZXJmb3JtVXBkYXRlQ2hpbGRTaXplcygpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFnZXRTdGF0ZShlbGVtZW50KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVidWcoXCJBYm9ydGluZyBiZWNhdXNlIGVsZW1lbnQgaGFzIGJlZW4gdW5pbnN0YWxsZWRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoIWFyZUVsZW1lbnRzSW5qZWN0ZWQoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVidWcoXCJBYm9ydGluZyBiZWNhdXNlIGVsZW1lbnQgY29udGFpbmVyIGhhcyBub3QgYmVlbiBpbml0aWFsaXplZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmRlYnVnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdyA9IGVsZW1lbnQub2Zmc2V0V2lkdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaCA9IGVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodyAhPT0gd2lkdGggfHwgaCAhPT0gaGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwb3J0ZXIud2FybihpZEhhbmRsZXIuZ2V0KGVsZW1lbnQpLCBcIlNjcm9sbDogU2l6ZSBjaGFuZ2VkIGJlZm9yZSB1cGRhdGluZyBkZXRlY3RvciBlbGVtZW50cy5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB1cGRhdGVDaGlsZFNpemVzKGVsZW1lbnQsIHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgYmF0Y2hQcm9jZXNzb3IuYWRkKDEsIGZ1bmN0aW9uIHVwZGF0ZVNjcm9sbGJhcnMoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghZ2V0U3RhdGUoZWxlbWVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlYnVnKFwiQWJvcnRpbmcgYmVjYXVzZSBlbGVtZW50IGhhcyBiZWVuIHVuaW5zdGFsbGVkXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFhcmVFbGVtZW50c0luamVjdGVkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlYnVnKFwiQWJvcnRpbmcgYmVjYXVzZSBlbGVtZW50IGNvbnRhaW5lciBoYXMgbm90IGJlZW4gaW5pdGlhbGl6ZWRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvblNjcm9sbGJhcnMoZWxlbWVudCwgd2lkdGgsIGhlaWdodCk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgICAgICAgICBiYXRjaFByb2Nlc3Nvci5hZGQoMiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFnZXRTdGF0ZShlbGVtZW50KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlYnVnKFwiQWJvcnRpbmcgYmVjYXVzZSBlbGVtZW50IGhhcyBiZWVuIHVuaW5zdGFsbGVkXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFhcmVFbGVtZW50c0luamVjdGVkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZGVidWcoXCJBYm9ydGluZyBiZWNhdXNlIGVsZW1lbnQgY29udGFpbmVyIGhhcyBub3QgYmVlbiBpbml0aWFsaXplZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBkb25lKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gYXJlRWxlbWVudHNJbmplY3RlZCgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gISFnZXRTdGF0ZShlbGVtZW50KS5jb250YWluZXI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIG5vdGlmeUxpc3RlbmVyc0lmTmVlZGVkKCkge1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGlzRmlyc3ROb3RpZnkoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBnZXRTdGF0ZShlbGVtZW50KS5sYXN0Tm90aWZpZWRXaWR0aCA9PT0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGRlYnVnKFwibm90aWZ5TGlzdGVuZXJzSWZOZWVkZWQgaW52b2tlZFwiKTtcblxuICAgICAgICAgICAgICAgIHZhciBzdGF0ZSA9IGdldFN0YXRlKGVsZW1lbnQpO1xuXG4gICAgICAgICAgICAgICAgLy8gRG9uJ3Qgbm90aWZ5IHRoZSBpZiB0aGUgY3VycmVudCBzaXplIGlzIHRoZSBzdGFydCBzaXplLCBhbmQgdGhpcyBpcyB0aGUgZmlyc3Qgbm90aWZpY2F0aW9uLlxuICAgICAgICAgICAgICAgIGlmIChpc0ZpcnN0Tm90aWZ5KCkgJiYgc3RhdGUubGFzdFdpZHRoID09PSBzdGF0ZS5zdGFydFNpemUud2lkdGggJiYgc3RhdGUubGFzdEhlaWdodCA9PT0gc3RhdGUuc3RhcnRTaXplLmhlaWdodCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGVidWcoXCJOb3Qgbm90aWZ5aW5nOiBTaXplIGlzIHRoZSBzYW1lIGFzIHRoZSBzdGFydCBzaXplLCBhbmQgdGhlcmUgaGFzIGJlZW4gbm8gbm90aWZpY2F0aW9uIHlldC5cIik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gRG9uJ3Qgbm90aWZ5IGlmIHRoZSBzaXplIGFscmVhZHkgaGFzIGJlZW4gbm90aWZpZWQuXG4gICAgICAgICAgICAgICAgaWYgKHN0YXRlLmxhc3RXaWR0aCA9PT0gc3RhdGUubGFzdE5vdGlmaWVkV2lkdGggJiYgc3RhdGUubGFzdEhlaWdodCA9PT0gc3RhdGUubGFzdE5vdGlmaWVkSGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkZWJ1ZyhcIk5vdCBub3RpZnlpbmc6IFNpemUgYWxyZWFkeSBub3RpZmllZFwiKTtcbiAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgICAgIGRlYnVnKFwiQ3VycmVudCBzaXplIG5vdCBub3RpZmllZCwgbm90aWZ5aW5nLi4uXCIpO1xuICAgICAgICAgICAgICAgIHN0YXRlLmxhc3ROb3RpZmllZFdpZHRoID0gc3RhdGUubGFzdFdpZHRoO1xuICAgICAgICAgICAgICAgIHN0YXRlLmxhc3ROb3RpZmllZEhlaWdodCA9IHN0YXRlLmxhc3RIZWlnaHQ7XG4gICAgICAgICAgICAgICAgZm9yRWFjaChnZXRTdGF0ZShlbGVtZW50KS5saXN0ZW5lcnMsIGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lcihlbGVtZW50KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gaGFuZGxlUmVuZGVyKCkge1xuICAgICAgICAgICAgICAgIGRlYnVnKFwic3RhcnRhbmltYXRpb24gdHJpZ2dlcmVkLlwiKTtcblxuICAgICAgICAgICAgICAgIGlmIChpc1VucmVuZGVyZWQoZWxlbWVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVidWcoXCJJZ25vcmluZyBzaW5jZSBlbGVtZW50IGlzIHN0aWxsIHVucmVuZGVyZWQuLi5cIik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBkZWJ1ZyhcIkVsZW1lbnQgcmVuZGVyZWQuXCIpO1xuICAgICAgICAgICAgICAgIHZhciBleHBhbmQgPSBnZXRFeHBhbmRFbGVtZW50KGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIHZhciBzaHJpbmsgPSBnZXRTaHJpbmtFbGVtZW50KGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIGlmIChleHBhbmQuc2Nyb2xsTGVmdCA9PT0gMCB8fCBleHBhbmQuc2Nyb2xsVG9wID09PSAwIHx8IHNocmluay5zY3JvbGxMZWZ0ID09PSAwIHx8IHNocmluay5zY3JvbGxUb3AgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgZGVidWcoXCJTY3JvbGxiYXJzIG91dCBvZiBzeW5jLiBVcGRhdGluZyBkZXRlY3RvciBlbGVtZW50cy4uLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlRGV0ZWN0b3JFbGVtZW50cyhub3RpZnlMaXN0ZW5lcnNJZk5lZWRlZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBoYW5kbGVTY3JvbGwoKSB7XG4gICAgICAgICAgICAgICAgZGVidWcoXCJTY3JvbGwgZGV0ZWN0ZWQuXCIpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGlzVW5yZW5kZXJlZChlbGVtZW50KSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBFbGVtZW50IGlzIHN0aWxsIHVucmVuZGVyZWQuIFNraXAgdGhpcyBzY3JvbGwgZXZlbnQuXG4gICAgICAgICAgICAgICAgICAgIGRlYnVnKFwiU2Nyb2xsIGV2ZW50IGZpcmVkIHdoaWxlIHVucmVuZGVyZWQuIElnbm9yaW5nLi4uXCIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIHdpZHRoID0gZWxlbWVudC5vZmZzZXRXaWR0aDtcbiAgICAgICAgICAgICAgICB2YXIgaGVpZ2h0ID0gZWxlbWVudC5vZmZzZXRIZWlnaHQ7XG5cbiAgICAgICAgICAgICAgICBpZiAod2lkdGggIT09IGdldFN0YXRlKGVsZW1lbnQpLmxhc3RXaWR0aCB8fCBoZWlnaHQgIT09IGdldFN0YXRlKGVsZW1lbnQpLmxhc3RIZWlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVidWcoXCJFbGVtZW50IHNpemUgY2hhbmdlZC5cIik7XG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZURldGVjdG9yRWxlbWVudHMobm90aWZ5TGlzdGVuZXJzSWZOZWVkZWQpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGRlYnVnKFwiRWxlbWVudCBzaXplIGhhcyBub3QgY2hhbmdlZCAoXCIgKyB3aWR0aCArIFwieFwiICsgaGVpZ2h0ICsgXCIpLlwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRlYnVnKFwicmVnaXN0ZXJMaXN0ZW5lcnNBbmRQb3NpdGlvbkVsZW1lbnRzIGludm9rZWQuXCIpO1xuXG4gICAgICAgICAgICBpZiAoIWdldFN0YXRlKGVsZW1lbnQpKSB7XG4gICAgICAgICAgICAgICAgZGVidWcoXCJBYm9ydGluZyBiZWNhdXNlIGVsZW1lbnQgaGFzIGJlZW4gdW5pbnN0YWxsZWRcIik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBnZXRTdGF0ZShlbGVtZW50KS5vblJlbmRlcmVkID0gaGFuZGxlUmVuZGVyO1xuICAgICAgICAgICAgZ2V0U3RhdGUoZWxlbWVudCkub25FeHBhbmQgPSBoYW5kbGVTY3JvbGw7XG4gICAgICAgICAgICBnZXRTdGF0ZShlbGVtZW50KS5vblNocmluayA9IGhhbmRsZVNjcm9sbDtcblxuICAgICAgICAgICAgdmFyIHN0eWxlID0gZ2V0U3RhdGUoZWxlbWVudCkuc3R5bGU7XG4gICAgICAgICAgICB1cGRhdGVDaGlsZFNpemVzKGVsZW1lbnQsIHN0eWxlLndpZHRoLCBzdHlsZS5oZWlnaHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZmluYWxpemVEb21NdXRhdGlvbigpIHtcbiAgICAgICAgICAgIGRlYnVnKFwiZmluYWxpemVEb21NdXRhdGlvbiBpbnZva2VkLlwiKTtcblxuICAgICAgICAgICAgaWYgKCFnZXRTdGF0ZShlbGVtZW50KSkge1xuICAgICAgICAgICAgICAgIGRlYnVnKFwiQWJvcnRpbmcgYmVjYXVzZSBlbGVtZW50IGhhcyBiZWVuIHVuaW5zdGFsbGVkXCIpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHN0eWxlID0gZ2V0U3RhdGUoZWxlbWVudCkuc3R5bGU7XG4gICAgICAgICAgICBzdG9yZUN1cnJlbnRTaXplKGVsZW1lbnQsIHN0eWxlLndpZHRoLCBzdHlsZS5oZWlnaHQpO1xuICAgICAgICAgICAgcG9zaXRpb25TY3JvbGxiYXJzKGVsZW1lbnQsIHN0eWxlLndpZHRoLCBzdHlsZS5oZWlnaHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gcmVhZHkoKSB7XG4gICAgICAgICAgICBjYWxsYmFjayhlbGVtZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGluc3RhbGwoKSB7XG4gICAgICAgICAgICBkZWJ1ZyhcIkluc3RhbGxpbmcuLi5cIik7XG4gICAgICAgICAgICBpbml0TGlzdGVuZXJzKCk7XG4gICAgICAgICAgICBzdG9yZVN0YXJ0U2l6ZSgpO1xuXG4gICAgICAgICAgICBiYXRjaFByb2Nlc3Nvci5hZGQoMCwgc3RvcmVTdHlsZSk7XG4gICAgICAgICAgICBiYXRjaFByb2Nlc3Nvci5hZGQoMSwgaW5qZWN0U2Nyb2xsRWxlbWVudHMpO1xuICAgICAgICAgICAgYmF0Y2hQcm9jZXNzb3IuYWRkKDIsIHJlZ2lzdGVyTGlzdGVuZXJzQW5kUG9zaXRpb25FbGVtZW50cyk7XG4gICAgICAgICAgICBiYXRjaFByb2Nlc3Nvci5hZGQoMywgZmluYWxpemVEb21NdXRhdGlvbik7XG4gICAgICAgICAgICBiYXRjaFByb2Nlc3Nvci5hZGQoNCwgcmVhZHkpO1xuICAgICAgICB9XG5cbiAgICAgICAgZGVidWcoXCJNYWtpbmcgZGV0ZWN0YWJsZS4uLlwiKTtcblxuICAgICAgICBpZiAoaXNEZXRhY2hlZChlbGVtZW50KSkge1xuICAgICAgICAgICAgZGVidWcoXCJFbGVtZW50IGlzIGRldGFjaGVkXCIpO1xuXG4gICAgICAgICAgICBpbmplY3RDb250YWluZXJFbGVtZW50KCk7XG5cbiAgICAgICAgICAgIGRlYnVnKFwiV2FpdGluZyB1bnRpbCBlbGVtZW50IGlzIGF0dGFjaGVkLi4uXCIpO1xuXG4gICAgICAgICAgICBnZXRTdGF0ZShlbGVtZW50KS5vblJlbmRlcmVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGRlYnVnKFwiRWxlbWVudCBpcyBub3cgYXR0YWNoZWRcIik7XG4gICAgICAgICAgICAgICAgaW5zdGFsbCgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGluc3RhbGwoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVuaW5zdGFsbChlbGVtZW50KSB7XG4gICAgICAgIHZhciBzdGF0ZSA9IGdldFN0YXRlKGVsZW1lbnQpO1xuXG4gICAgICAgIGlmICghc3RhdGUpIHtcbiAgICAgICAgICAgIC8vIFVuaW5zdGFsbCBoYXMgYmVlbiBjYWxsZWQgb24gYSBub24tZXJkIGVsZW1lbnQuXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBVbmluc3RhbGwgbWF5IGhhdmUgYmVlbiBjYWxsZWQgaW4gdGhlIGZvbGxvd2luZyBzY2VuYXJpb3M6XG4gICAgICAgIC8vICgxKSBSaWdodCBiZXR3ZWVuIHRoZSBzeW5jIGNvZGUgYW5kIGFzeW5jIGJhdGNoIChoZXJlIHN0YXRlLmJ1c3kgPSB0cnVlLCBidXQgbm90aGluZyBoYXZlIGJlZW4gcmVnaXN0ZXJlZCBvciBpbmplY3RlZCkuXG4gICAgICAgIC8vICgyKSBJbiB0aGUgcmVhZHkgY2FsbGJhY2sgb2YgdGhlIGxhc3QgbGV2ZWwgb2YgdGhlIGJhdGNoIGJ5IGFub3RoZXIgZWxlbWVudCAoaGVyZSwgc3RhdGUuYnVzeSA9IHRydWUsIGJ1dCBhbGwgdGhlIHN0dWZmIGhhcyBiZWVuIGluamVjdGVkKS5cbiAgICAgICAgLy8gKDMpIEFmdGVyIHRoZSBpbnN0YWxsYXRpb24gcHJvY2VzcyAoaGVyZSwgc3RhdGUuYnVzeSA9IGZhbHNlIGFuZCBhbGwgdGhlIHN0dWZmIGhhcyBiZWVuIGluamVjdGVkKS5cbiAgICAgICAgLy8gU28gdG8gYmUgb24gdGhlIHNhZmUgc2lkZSwgbGV0J3MgY2hlY2sgZm9yIGVhY2ggdGhpbmcgYmVmb3JlIHJlbW92aW5nLlxuXG4gICAgICAgIC8vIFdlIG5lZWQgdG8gcmVtb3ZlIHRoZSBldmVudCBsaXN0ZW5lcnMsIGJlY2F1c2Ugb3RoZXJ3aXNlIHRoZSBldmVudCBtaWdodCBmaXJlIG9uIGFuIHVuaW5zdGFsbCBlbGVtZW50IHdoaWNoIHJlc3VsdHMgaW4gYW4gZXJyb3Igd2hlbiB0cnlpbmcgdG8gZ2V0IHRoZSBzdGF0ZSBvZiB0aGUgZWxlbWVudC5cbiAgICAgICAgc3RhdGUub25FeHBhbmRTY3JvbGwgJiYgcmVtb3ZlRXZlbnQoZ2V0RXhwYW5kRWxlbWVudChlbGVtZW50KSwgXCJzY3JvbGxcIiwgc3RhdGUub25FeHBhbmRTY3JvbGwpO1xuICAgICAgICBzdGF0ZS5vblNocmlua1Njcm9sbCAmJiByZW1vdmVFdmVudChnZXRTaHJpbmtFbGVtZW50KGVsZW1lbnQpLCBcInNjcm9sbFwiLCBzdGF0ZS5vblNocmlua1Njcm9sbCk7XG4gICAgICAgIHN0YXRlLm9uQW5pbWF0aW9uU3RhcnQgJiYgcmVtb3ZlRXZlbnQoc3RhdGUuY29udGFpbmVyLCBcImFuaW1hdGlvbnN0YXJ0XCIsIHN0YXRlLm9uQW5pbWF0aW9uU3RhcnQpO1xuXG4gICAgICAgIHN0YXRlLmNvbnRhaW5lciAmJiBlbGVtZW50LnJlbW92ZUNoaWxkKHN0YXRlLmNvbnRhaW5lcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgbWFrZURldGVjdGFibGU6IG1ha2VEZXRlY3RhYmxlLFxuICAgICAgICBhZGRMaXN0ZW5lcjogYWRkTGlzdGVuZXIsXG4gICAgICAgIHVuaW5zdGFsbDogdW5pbnN0YWxsXG4gICAgfTtcbn07XG4iLCJpbXBvcnQgY2xvbmVEZWVwIGZyb20gXCJsb2Rhc2gvY2xvbmVEZWVwXCI7XHJcblxyXG5jb25zdCBjb252ZXJ0Q29sdW1uT3JkZXIgPSAoY29sdW1ucywgZml4ZWRUeXBlKSA9PiB7XHJcbiAgY29uc3QgbGlzdDogYW55W10gPSBbXTtcclxuICBjb25zdCBvdGhlcjogYW55W10gPSBbXTtcclxuICBjb2x1bW5zLmZvckVhY2goKGNvbCkgPT4ge1xyXG4gICAgaWYgKGNvbC5maXhlZCAmJiBjb2wuZml4ZWQgPT09IGZpeGVkVHlwZSkge1xyXG4gICAgICBsaXN0LnB1c2goY29sKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIG90aGVyLnB1c2goY29sKTtcclxuICAgIH1cclxuICB9KTtcclxuICByZXR1cm4gbGlzdC5jb25jYXQob3RoZXIpO1xyXG59O1xyXG5cclxuZXhwb3J0IHsgY29udmVydENvbHVtbk9yZGVyIH07XHJcblxyXG4vLyBzZXQgZm9yVGFibGVIZWFkIHRvIHRydWUgd2hlbiBjb252ZXJ0VG9Sb3dzLCBmYWxzZSBpbiBub3JtYWwgY2FzZXMgbGlrZSB0YWJsZS52dWVcclxuY29uc3QgZ2V0QWxsQ29sdW1ucyA9IChjb2xzLCBmb3JUYWJsZUhlYWQgPSBmYWxzZSkgPT4ge1xyXG4gIGNvbnN0IGNvbHVtbnMgPSBjbG9uZURlZXAoY29scyk7XHJcbiAgY29uc3QgcmVzdWx0OiBhbnlbXSA9IFtdO1xyXG4gIGNvbHVtbnMuZm9yRWFjaCgoY29sdW1uKSA9PiB7XHJcbiAgICBpZiAoY29sdW1uLmNoaWxkcmVuKSB7XHJcbiAgICAgIGlmIChmb3JUYWJsZUhlYWQpIHtcclxuICAgICAgICByZXN1bHQucHVzaChjb2x1bW4pO1xyXG4gICAgICB9XHJcbiAgICAgIHJlc3VsdC5wdXNoLmFwcGx5KHJlc3VsdCwgZ2V0QWxsQ29sdW1ucyhjb2x1bW4uY2hpbGRyZW4sIGZvclRhYmxlSGVhZCkpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmVzdWx0LnB1c2goY29sdW1uKTtcclxuICAgIH1cclxuICB9KTtcclxuICByZXR1cm4gcmVzdWx0O1xyXG59O1xyXG5cclxuZXhwb3J0IHsgZ2V0QWxsQ29sdW1ucyB9O1xyXG5cclxuY29uc3QgY29udmVydFRvUm93cyA9IChjb2x1bW5zLCBmaXhlZFR5cGU6IGJvb2xlYW4gfCBzdHJpbmcgPSBmYWxzZSkgPT4ge1xyXG4gIGNvbnN0IG9yaWdpbkNvbHVtbnMgPSBmaXhlZFR5cGVcclxuICAgID8gZml4ZWRUeXBlID09PSBcImxlZnRcIlxyXG4gICAgICA/IGNsb25lRGVlcChjb252ZXJ0Q29sdW1uT3JkZXIoY29sdW1ucywgXCJsZWZ0XCIpKVxyXG4gICAgICA6IGNsb25lRGVlcChjb252ZXJ0Q29sdW1uT3JkZXIoY29sdW1ucywgXCJyaWdodFwiKSlcclxuICAgIDogY2xvbmVEZWVwKGNvbHVtbnMpO1xyXG4gIGxldCBtYXhMZXZlbCA9IDE7XHJcbiAgY29uc3QgdHJhdmVyc2UgPSAoY29sdW1uLCBwYXJlbnQpID0+IHtcclxuICAgIGlmIChwYXJlbnQpIHtcclxuICAgICAgY29sdW1uLmxldmVsID0gcGFyZW50LmxldmVsICsgMTtcclxuICAgICAgaWYgKG1heExldmVsIDwgY29sdW1uLmxldmVsKSB7XHJcbiAgICAgICAgbWF4TGV2ZWwgPSBjb2x1bW4ubGV2ZWw7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGlmIChjb2x1bW4uY2hpbGRyZW4pIHtcclxuICAgICAgbGV0IGNvbFNwYW4gPSAwO1xyXG4gICAgICBjb2x1bW4uY2hpbGRyZW4uZm9yRWFjaCgoc3ViQ29sdW1uKSA9PiB7XHJcbiAgICAgICAgdHJhdmVyc2Uoc3ViQ29sdW1uLCBjb2x1bW4pO1xyXG4gICAgICAgIGNvbFNwYW4gKz0gc3ViQ29sdW1uLmNvbFNwYW47XHJcbiAgICAgIH0pO1xyXG4gICAgICBjb2x1bW4uY29sU3BhbiA9IGNvbFNwYW47XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb2x1bW4uY29sU3BhbiA9IDE7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgb3JpZ2luQ29sdW1ucy5mb3JFYWNoKChjb2x1bW4pID0+IHtcclxuICAgIGNvbHVtbi5sZXZlbCA9IDE7XHJcbiAgICB0cmF2ZXJzZShjb2x1bW4sIHVuZGVmaW5lZCk7XHJcbiAgfSk7XHJcblxyXG4gIGNvbnN0IHJvd3M6IGFueVtdID0gW107XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBtYXhMZXZlbDsgaSsrKSB7XHJcbiAgICByb3dzLnB1c2goW10pO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgYWxsQ29sdW1ucyA9IGdldEFsbENvbHVtbnMob3JpZ2luQ29sdW1ucywgdHJ1ZSk7XHJcblxyXG4gIGFsbENvbHVtbnMuZm9yRWFjaCgoY29sdW1uKSA9PiB7XHJcbiAgICBpZiAoIWNvbHVtbi5jaGlsZHJlbikge1xyXG4gICAgICBjb2x1bW4ucm93U3BhbiA9IG1heExldmVsIC0gY29sdW1uLmxldmVsICsgMTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbHVtbi5yb3dTcGFuID0gMTtcclxuICAgIH1cclxuICAgIHJvd3NbY29sdW1uLmxldmVsIC0gMV0ucHVzaChjb2x1bW4pO1xyXG4gIH0pO1xyXG5cclxuICByZXR1cm4gcm93cztcclxufTtcclxuXHJcbmV4cG9ydCB7IGNvbnZlcnRUb1Jvd3MgfTtcclxuXHJcbmNvbnN0IGdldFJhbmRvbVN0ciA9IGZ1bmN0aW9uKGxlbiA9IDMyKSB7XHJcbiAgY29uc3QgJGNoYXJzID0gXCJhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ekFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaMTIzNDU2Nzg5MFwiO1xyXG4gIGNvbnN0IG1heFBvcyA9ICRjaGFycy5sZW5ndGg7XHJcbiAgbGV0IHN0ciA9IFwiXCI7XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xyXG4gICAgc3RyICs9ICRjaGFycy5jaGFyQXQoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogbWF4UG9zKSk7XHJcbiAgfVxyXG4gIHJldHVybiBzdHI7XHJcbn07XHJcblxyXG5leHBvcnQgeyBnZXRSYW5kb21TdHIgfTtcclxuIiwiaW1wb3J0IHsgUGx1Z2luT2JqZWN0IH0gZnJvbSBcInZ1ZVwiO1xyXG5pbXBvcnQgWGJUZXh0IGZyb20gXCIuL3NyYy94Yi10ZXh0LnZ1ZVwiO1xyXG5leHBvcnQgZGVmYXVsdCBYYlRleHQ7XHJcblxyXG5leHBvcnQgY29uc3QgeGJUZXh0OiBQbHVnaW5PYmplY3Q8WGJUZXh0PiA9IHtcclxuICBpbnN0YWxsOiAoVnVlKSA9PiB7XHJcbiAgICBWdWUuY29tcG9uZW50KFwiWGJUZXh0XCIsIFhiVGV4dCk7XHJcbiAgfSxcclxufTtcclxuIiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi94Yi10ZXh0LnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD00YmIzYzdkYyZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi94Yi10ZXh0LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz10cyZcIlxuZXhwb3J0ICogZnJvbSBcIi4veGItdGV4dC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9dHMmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBudWxsLFxuICBudWxsXG4gIFxuKVxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkge1xuICB2YXIgYXBpID0gcmVxdWlyZShcIkQ6XFxcXFhiLUJhc2ljLUNvbXBvbmVudHNcXFxcbm9kZV9tb2R1bGVzXFxcXHZ1ZS1ob3QtcmVsb2FkLWFwaVxcXFxkaXN0XFxcXGluZGV4LmpzXCIpXG4gIGFwaS5pbnN0YWxsKHJlcXVpcmUoJ3Z1ZScpKVxuICBpZiAoYXBpLmNvbXBhdGlibGUpIHtcbiAgICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gICAgaWYgKCFtb2R1bGUuaG90LmRhdGEpIHtcbiAgICAgIGFwaS5jcmVhdGVSZWNvcmQoJzRiYjNjN2RjJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZWxvYWQoJzRiYjNjN2RjJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfVxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi94Yi10ZXh0LnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD00YmIzYzdkYyZcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgYXBpLnJlcmVuZGVyKCc0YmIzYzdkYycsIHtcbiAgICAgICAgcmVuZGVyOiByZW5kZXIsXG4gICAgICAgIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn1cbmNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwicGFja2FnZXMveGItdGV4dC9zcmMveGItdGV4dC52dWVcIlxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCJpbXBvcnQgeyBQbHVnaW5PYmplY3QgfSBmcm9tIFwidnVlXCI7XHJcbmltcG9ydCBYYlVlZGl0b3IgZnJvbSBcIi4vc3JjL3hiLXVlZGl0b3IudnVlXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBYYlVlZGl0b3I7XHJcblxyXG5leHBvcnQgY29uc3QgeGJVZWRpdG9yOiBQbHVnaW5PYmplY3Q8WGJVZWRpdG9yPiA9IHtcclxuICAgIGluc3RhbGw6IChWdWUpID0+IHtcclxuICAgICAgICBWdWUuY29tcG9uZW50KFwiWGJVZWRpdG9yXCIsIFhiVWVkaXRvcik7XHJcbiAgICB9LFxyXG59O1xyXG4iLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL3hiLXVlZGl0b3IudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTdjNzg0Yzg2JlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL3hiLXVlZGl0b3IudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi94Yi11ZWRpdG9yLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz10cyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIG51bGwsXG4gIG51bGxcbiAgXG4pXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIHZhciBhcGkgPSByZXF1aXJlKFwiRDpcXFxcWGItQmFzaWMtQ29tcG9uZW50c1xcXFxub2RlX21vZHVsZXNcXFxcdnVlLWhvdC1yZWxvYWQtYXBpXFxcXGRpc3RcXFxcaW5kZXguanNcIilcbiAgYXBpLmluc3RhbGwocmVxdWlyZSgndnVlJykpXG4gIGlmIChhcGkuY29tcGF0aWJsZSkge1xuICAgIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgICBpZiAoIW1vZHVsZS5ob3QuZGF0YSkge1xuICAgICAgYXBpLmNyZWF0ZVJlY29yZCgnN2M3ODRjODYnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbG9hZCgnN2M3ODRjODYnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL3hiLXVlZGl0b3IudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTdjNzg0Yzg2JlwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBhcGkucmVyZW5kZXIoJzdjNzg0Yzg2Jywge1xuICAgICAgICByZW5kZXI6IHJlbmRlcixcbiAgICAgICAgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnNcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxufVxuY29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJwYWNrYWdlcy94Yi11ZWRpdG9yL3NyYy94Yi11ZWRpdG9yLnZ1ZVwiXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcyc7XG5pbXBvcnQgX3R5cGVvZiBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvdHlwZW9mJztcbnZhciBmb3JtYXRSZWdFeHAgPSAvJVtzZGolXS9nO1xuXG5leHBvcnQgdmFyIHdhcm5pbmcgPSBmdW5jdGlvbiB3YXJuaW5nKCkge307XG5cbi8vIGRvbid0IHByaW50IHdhcm5pbmcgbWVzc2FnZSB3aGVuIGluIHByb2R1Y3Rpb24gZW52IG9yIG5vZGUgcnVudGltZVxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJykge1xuICB3YXJuaW5nID0gZnVuY3Rpb24gd2FybmluZyh0eXBlLCBlcnJvcnMpIHtcbiAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIGNvbnNvbGUud2Fybikge1xuICAgICAgaWYgKGVycm9ycy5ldmVyeShmdW5jdGlvbiAoZSkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIGUgPT09ICdzdHJpbmcnO1xuICAgICAgfSkpIHtcbiAgICAgICAgY29uc29sZS53YXJuKHR5cGUsIGVycm9ycyk7XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0KCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICB2YXIgaSA9IDE7XG4gIHZhciBmID0gYXJnc1swXTtcbiAgdmFyIGxlbiA9IGFyZ3MubGVuZ3RoO1xuICBpZiAodHlwZW9mIGYgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZi5hcHBseShudWxsLCBhcmdzLnNsaWNlKDEpKTtcbiAgfVxuICBpZiAodHlwZW9mIGYgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFyIHN0ciA9IFN0cmluZyhmKS5yZXBsYWNlKGZvcm1hdFJlZ0V4cCwgZnVuY3Rpb24gKHgpIHtcbiAgICAgIGlmICh4ID09PSAnJSUnKSB7XG4gICAgICAgIHJldHVybiAnJSc7XG4gICAgICB9XG4gICAgICBpZiAoaSA+PSBsZW4pIHtcbiAgICAgICAgcmV0dXJuIHg7XG4gICAgICB9XG4gICAgICBzd2l0Y2ggKHgpIHtcbiAgICAgICAgY2FzZSAnJXMnOlxuICAgICAgICAgIHJldHVybiBTdHJpbmcoYXJnc1tpKytdKTtcbiAgICAgICAgY2FzZSAnJWQnOlxuICAgICAgICAgIHJldHVybiBOdW1iZXIoYXJnc1tpKytdKTtcbiAgICAgICAgY2FzZSAnJWonOlxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoYXJnc1tpKytdKTtcbiAgICAgICAgICB9IGNhdGNoIChfKSB7XG4gICAgICAgICAgICByZXR1cm4gJ1tDaXJjdWxhcl0nO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4geDtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBmb3IgKHZhciBhcmcgPSBhcmdzW2ldOyBpIDwgbGVuOyBhcmcgPSBhcmdzWysraV0pIHtcbiAgICAgIHN0ciArPSAnICcgKyBhcmc7XG4gICAgfVxuICAgIHJldHVybiBzdHI7XG4gIH1cbiAgcmV0dXJuIGY7XG59XG5cbmZ1bmN0aW9uIGlzTmF0aXZlU3RyaW5nVHlwZSh0eXBlKSB7XG4gIHJldHVybiB0eXBlID09PSAnc3RyaW5nJyB8fCB0eXBlID09PSAndXJsJyB8fCB0eXBlID09PSAnaGV4JyB8fCB0eXBlID09PSAnZW1haWwnIHx8IHR5cGUgPT09ICdwYXR0ZXJuJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRW1wdHlWYWx1ZSh2YWx1ZSwgdHlwZSkge1xuICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmICh0eXBlID09PSAnYXJyYXknICYmIEFycmF5LmlzQXJyYXkodmFsdWUpICYmICF2YWx1ZS5sZW5ndGgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAoaXNOYXRpdmVTdHJpbmdUeXBlKHR5cGUpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgIXZhbHVlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNFbXB0eU9iamVjdChvYmopIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikubGVuZ3RoID09PSAwO1xufVxuXG5mdW5jdGlvbiBhc3luY1BhcmFsbGVsQXJyYXkoYXJyLCBmdW5jLCBjYWxsYmFjaykge1xuICB2YXIgcmVzdWx0cyA9IFtdO1xuICB2YXIgdG90YWwgPSAwO1xuICB2YXIgYXJyTGVuZ3RoID0gYXJyLmxlbmd0aDtcblxuICBmdW5jdGlvbiBjb3VudChlcnJvcnMpIHtcbiAgICByZXN1bHRzLnB1c2guYXBwbHkocmVzdWx0cywgZXJyb3JzKTtcbiAgICB0b3RhbCsrO1xuICAgIGlmICh0b3RhbCA9PT0gYXJyTGVuZ3RoKSB7XG4gICAgICBjYWxsYmFjayhyZXN1bHRzKTtcbiAgICB9XG4gIH1cblxuICBhcnIuZm9yRWFjaChmdW5jdGlvbiAoYSkge1xuICAgIGZ1bmMoYSwgY291bnQpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gYXN5bmNTZXJpYWxBcnJheShhcnIsIGZ1bmMsIGNhbGxiYWNrKSB7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBhcnJMZW5ndGggPSBhcnIubGVuZ3RoO1xuXG4gIGZ1bmN0aW9uIG5leHQoZXJyb3JzKSB7XG4gICAgaWYgKGVycm9ycyAmJiBlcnJvcnMubGVuZ3RoKSB7XG4gICAgICBjYWxsYmFjayhlcnJvcnMpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgb3JpZ2luYWwgPSBpbmRleDtcbiAgICBpbmRleCA9IGluZGV4ICsgMTtcbiAgICBpZiAob3JpZ2luYWwgPCBhcnJMZW5ndGgpIHtcbiAgICAgIGZ1bmMoYXJyW29yaWdpbmFsXSwgbmV4dCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxiYWNrKFtdKTtcbiAgICB9XG4gIH1cblxuICBuZXh0KFtdKTtcbn1cblxuZnVuY3Rpb24gZmxhdHRlbk9iakFycihvYmpBcnIpIHtcbiAgdmFyIHJldCA9IFtdO1xuICBPYmplY3Qua2V5cyhvYmpBcnIpLmZvckVhY2goZnVuY3Rpb24gKGspIHtcbiAgICByZXQucHVzaC5hcHBseShyZXQsIG9iakFycltrXSk7XG4gIH0pO1xuICByZXR1cm4gcmV0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXN5bmNNYXAob2JqQXJyLCBvcHRpb24sIGZ1bmMsIGNhbGxiYWNrKSB7XG4gIGlmIChvcHRpb24uZmlyc3QpIHtcbiAgICB2YXIgZmxhdHRlbkFyciA9IGZsYXR0ZW5PYmpBcnIob2JqQXJyKTtcbiAgICByZXR1cm4gYXN5bmNTZXJpYWxBcnJheShmbGF0dGVuQXJyLCBmdW5jLCBjYWxsYmFjayk7XG4gIH1cbiAgdmFyIGZpcnN0RmllbGRzID0gb3B0aW9uLmZpcnN0RmllbGRzIHx8IFtdO1xuICBpZiAoZmlyc3RGaWVsZHMgPT09IHRydWUpIHtcbiAgICBmaXJzdEZpZWxkcyA9IE9iamVjdC5rZXlzKG9iakFycik7XG4gIH1cbiAgdmFyIG9iakFycktleXMgPSBPYmplY3Qua2V5cyhvYmpBcnIpO1xuICB2YXIgb2JqQXJyTGVuZ3RoID0gb2JqQXJyS2V5cy5sZW5ndGg7XG4gIHZhciB0b3RhbCA9IDA7XG4gIHZhciByZXN1bHRzID0gW107XG4gIHZhciBuZXh0ID0gZnVuY3Rpb24gbmV4dChlcnJvcnMpIHtcbiAgICByZXN1bHRzLnB1c2guYXBwbHkocmVzdWx0cywgZXJyb3JzKTtcbiAgICB0b3RhbCsrO1xuICAgIGlmICh0b3RhbCA9PT0gb2JqQXJyTGVuZ3RoKSB7XG4gICAgICBjYWxsYmFjayhyZXN1bHRzKTtcbiAgICB9XG4gIH07XG4gIG9iakFycktleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIGFyciA9IG9iakFycltrZXldO1xuICAgIGlmIChmaXJzdEZpZWxkcy5pbmRleE9mKGtleSkgIT09IC0xKSB7XG4gICAgICBhc3luY1NlcmlhbEFycmF5KGFyciwgZnVuYywgbmV4dCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFzeW5jUGFyYWxsZWxBcnJheShhcnIsIGZ1bmMsIG5leHQpO1xuICAgIH1cbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb21wbGVtZW50RXJyb3IocnVsZSkge1xuICByZXR1cm4gZnVuY3Rpb24gKG9lKSB7XG4gICAgaWYgKG9lICYmIG9lLm1lc3NhZ2UpIHtcbiAgICAgIG9lLmZpZWxkID0gb2UuZmllbGQgfHwgcnVsZS5mdWxsRmllbGQ7XG4gICAgICByZXR1cm4gb2U7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBtZXNzYWdlOiBvZSxcbiAgICAgIGZpZWxkOiBvZS5maWVsZCB8fCBydWxlLmZ1bGxGaWVsZFxuICAgIH07XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWVwTWVyZ2UodGFyZ2V0LCBzb3VyY2UpIHtcbiAgaWYgKHNvdXJjZSkge1xuICAgIGZvciAodmFyIHMgaW4gc291cmNlKSB7XG4gICAgICBpZiAoc291cmNlLmhhc093blByb3BlcnR5KHMpKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHNvdXJjZVtzXTtcbiAgICAgICAgaWYgKCh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHZhbHVlKSkgPT09ICdvYmplY3QnICYmIF90eXBlb2YodGFyZ2V0W3NdKSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICB0YXJnZXRbc10gPSBfZXh0ZW5kcyh7fSwgdGFyZ2V0W3NdLCB2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGFyZ2V0W3NdID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRhcmdldDtcbn0iLCJpbXBvcnQgKiBhcyB1dGlsIGZyb20gJy4uL3V0aWwnO1xuXG4vKipcbiAqICBSdWxlIGZvciB2YWxpZGF0aW5nIHJlcXVpcmVkIGZpZWxkcy5cbiAqXG4gKiAgQHBhcmFtIHJ1bGUgVGhlIHZhbGlkYXRpb24gcnVsZS5cbiAqICBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIG9mIHRoZSBmaWVsZCBvbiB0aGUgc291cmNlIG9iamVjdC5cbiAqICBAcGFyYW0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0IGJlaW5nIHZhbGlkYXRlZC5cbiAqICBAcGFyYW0gZXJyb3JzIEFuIGFycmF5IG9mIGVycm9ycyB0aGF0IHRoaXMgcnVsZSBtYXkgYWRkXG4gKiAgdmFsaWRhdGlvbiBlcnJvcnMgdG8uXG4gKiAgQHBhcmFtIG9wdGlvbnMgVGhlIHZhbGlkYXRpb24gb3B0aW9ucy5cbiAqICBAcGFyYW0gb3B0aW9ucy5tZXNzYWdlcyBUaGUgdmFsaWRhdGlvbiBtZXNzYWdlcy5cbiAqL1xuZnVuY3Rpb24gcmVxdWlyZWQocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zLCB0eXBlKSB7XG4gIGlmIChydWxlLnJlcXVpcmVkICYmICghc291cmNlLmhhc093blByb3BlcnR5KHJ1bGUuZmllbGQpIHx8IHV0aWwuaXNFbXB0eVZhbHVlKHZhbHVlLCB0eXBlIHx8IHJ1bGUudHlwZSkpKSB7XG4gICAgZXJyb3JzLnB1c2godXRpbC5mb3JtYXQob3B0aW9ucy5tZXNzYWdlcy5yZXF1aXJlZCwgcnVsZS5mdWxsRmllbGQpKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCByZXF1aXJlZDsiLCJpbXBvcnQgKiBhcyB1dGlsIGZyb20gJy4uL3V0aWwnO1xuXG4vKipcbiAqICBSdWxlIGZvciB2YWxpZGF0aW5nIHdoaXRlc3BhY2UuXG4gKlxuICogIEBwYXJhbSBydWxlIFRoZSB2YWxpZGF0aW9uIHJ1bGUuXG4gKiAgQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZSBvZiB0aGUgZmllbGQgb24gdGhlIHNvdXJjZSBvYmplY3QuXG4gKiAgQHBhcmFtIHNvdXJjZSBUaGUgc291cmNlIG9iamVjdCBiZWluZyB2YWxpZGF0ZWQuXG4gKiAgQHBhcmFtIGVycm9ycyBBbiBhcnJheSBvZiBlcnJvcnMgdGhhdCB0aGlzIHJ1bGUgbWF5IGFkZFxuICogIHZhbGlkYXRpb24gZXJyb3JzIHRvLlxuICogIEBwYXJhbSBvcHRpb25zIFRoZSB2YWxpZGF0aW9uIG9wdGlvbnMuXG4gKiAgQHBhcmFtIG9wdGlvbnMubWVzc2FnZXMgVGhlIHZhbGlkYXRpb24gbWVzc2FnZXMuXG4gKi9cbmZ1bmN0aW9uIHdoaXRlc3BhY2UocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKSB7XG4gIGlmICgvXlxccyskLy50ZXN0KHZhbHVlKSB8fCB2YWx1ZSA9PT0gJycpIHtcbiAgICBlcnJvcnMucHVzaCh1dGlsLmZvcm1hdChvcHRpb25zLm1lc3NhZ2VzLndoaXRlc3BhY2UsIHJ1bGUuZnVsbEZpZWxkKSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgd2hpdGVzcGFjZTsiLCJpbXBvcnQgX3R5cGVvZiBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvdHlwZW9mJztcbmltcG9ydCAqIGFzIHV0aWwgZnJvbSAnLi4vdXRpbCc7XG5pbXBvcnQgcmVxdWlyZWQgZnJvbSAnLi9yZXF1aXJlZCc7XG5cbi8qIGVzbGludCBtYXgtbGVuOjAgKi9cblxudmFyIHBhdHRlcm4gPSB7XG4gIC8vIGh0dHA6Ly9lbWFpbHJlZ2V4LmNvbS9cbiAgZW1haWw6IC9eKChbXjw+KClcXFtcXF1cXFxcLiw7Olxcc0BcIl0rKFxcLltePD4oKVxcW1xcXVxcXFwuLDs6XFxzQFwiXSspKil8KFwiLitcIikpQCgoXFxbWzAtOV17MSwzfVxcLlswLTldezEsM31cXC5bMC05XXsxLDN9XFwuWzAtOV17MSwzfV0pfCgoW2EtekEtWlxcLTAtOV0rXFwuKStbYS16QS1aXXsyLH0pKSQvLFxuICB1cmw6IG5ldyBSZWdFeHAoJ14oPyFtYWlsdG86KSg/Oig/Omh0dHB8aHR0cHN8ZnRwKTovL3wvLykoPzpcXFxcUysoPzo6XFxcXFMqKT9AKT8oPzooPzooPzpbMS05XVxcXFxkP3wxXFxcXGRcXFxcZHwyWzAxXVxcXFxkfDIyWzAtM10pKD86XFxcXC4oPzoxP1xcXFxkezEsMn18MlswLTRdXFxcXGR8MjVbMC01XSkpezJ9KD86XFxcXC4oPzpbMC05XVxcXFxkP3wxXFxcXGRcXFxcZHwyWzAtNF1cXFxcZHwyNVswLTRdKSl8KD86KD86W2EtelxcXFx1MDBhMS1cXFxcdWZmZmYwLTldKy0/KSpbYS16XFxcXHUwMGExLVxcXFx1ZmZmZjAtOV0rKSg/OlxcXFwuKD86W2EtelxcXFx1MDBhMS1cXFxcdWZmZmYwLTldKy0/KSpbYS16XFxcXHUwMGExLVxcXFx1ZmZmZjAtOV0rKSooPzpcXFxcLig/OlthLXpcXFxcdTAwYTEtXFxcXHVmZmZmXXsyLH0pKSl8bG9jYWxob3N0KSg/OjpcXFxcZHsyLDV9KT8oPzooL3xcXFxcP3wjKVteXFxcXHNdKik/JCcsICdpJyksXG4gIGhleDogL14jPyhbYS1mMC05XXs2fXxbYS1mMC05XXszfSkkL2lcbn07XG5cbnZhciB0eXBlcyA9IHtcbiAgaW50ZWdlcjogZnVuY3Rpb24gaW50ZWdlcih2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlcy5udW1iZXIodmFsdWUpICYmIHBhcnNlSW50KHZhbHVlLCAxMCkgPT09IHZhbHVlO1xuICB9LFxuICBmbG9hdDogZnVuY3Rpb24gZmxvYXQodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZXMubnVtYmVyKHZhbHVlKSAmJiAhdHlwZXMuaW50ZWdlcih2YWx1ZSk7XG4gIH0sXG4gIGFycmF5OiBmdW5jdGlvbiBhcnJheSh2YWx1ZSkge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KHZhbHVlKTtcbiAgfSxcbiAgcmVnZXhwOiBmdW5jdGlvbiByZWdleHAodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgcmV0dXJuICEhbmV3IFJlZ0V4cCh2YWx1ZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSxcbiAgZGF0ZTogZnVuY3Rpb24gZGF0ZSh2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUuZ2V0VGltZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgdmFsdWUuZ2V0TW9udGggPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHZhbHVlLmdldFllYXIgPT09ICdmdW5jdGlvbic7XG4gIH0sXG4gIG51bWJlcjogZnVuY3Rpb24gbnVtYmVyKHZhbHVlKSB7XG4gICAgaWYgKGlzTmFOKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJztcbiAgfSxcbiAgb2JqZWN0OiBmdW5jdGlvbiBvYmplY3QodmFsdWUpIHtcbiAgICByZXR1cm4gKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YodmFsdWUpKSA9PT0gJ29iamVjdCcgJiYgIXR5cGVzLmFycmF5KHZhbHVlKTtcbiAgfSxcbiAgbWV0aG9kOiBmdW5jdGlvbiBtZXRob2QodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nO1xuICB9LFxuICBlbWFpbDogZnVuY3Rpb24gZW1haWwodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiAhIXZhbHVlLm1hdGNoKHBhdHRlcm4uZW1haWwpICYmIHZhbHVlLmxlbmd0aCA8IDI1NTtcbiAgfSxcbiAgdXJsOiBmdW5jdGlvbiB1cmwodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiAhIXZhbHVlLm1hdGNoKHBhdHRlcm4udXJsKTtcbiAgfSxcbiAgaGV4OiBmdW5jdGlvbiBoZXgodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiAhIXZhbHVlLm1hdGNoKHBhdHRlcm4uaGV4KTtcbiAgfVxufTtcblxuLyoqXG4gKiAgUnVsZSBmb3IgdmFsaWRhdGluZyB0aGUgdHlwZSBvZiBhIHZhbHVlLlxuICpcbiAqICBAcGFyYW0gcnVsZSBUaGUgdmFsaWRhdGlvbiBydWxlLlxuICogIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgb2YgdGhlIGZpZWxkIG9uIHRoZSBzb3VyY2Ugb2JqZWN0LlxuICogIEBwYXJhbSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QgYmVpbmcgdmFsaWRhdGVkLlxuICogIEBwYXJhbSBlcnJvcnMgQW4gYXJyYXkgb2YgZXJyb3JzIHRoYXQgdGhpcyBydWxlIG1heSBhZGRcbiAqICB2YWxpZGF0aW9uIGVycm9ycyB0by5cbiAqICBAcGFyYW0gb3B0aW9ucyBUaGUgdmFsaWRhdGlvbiBvcHRpb25zLlxuICogIEBwYXJhbSBvcHRpb25zLm1lc3NhZ2VzIFRoZSB2YWxpZGF0aW9uIG1lc3NhZ2VzLlxuICovXG5mdW5jdGlvbiB0eXBlKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucykge1xuICBpZiAocnVsZS5yZXF1aXJlZCAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmVxdWlyZWQocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIGN1c3RvbSA9IFsnaW50ZWdlcicsICdmbG9hdCcsICdhcnJheScsICdyZWdleHAnLCAnb2JqZWN0JywgJ21ldGhvZCcsICdlbWFpbCcsICdudW1iZXInLCAnZGF0ZScsICd1cmwnLCAnaGV4J107XG4gIHZhciBydWxlVHlwZSA9IHJ1bGUudHlwZTtcbiAgaWYgKGN1c3RvbS5pbmRleE9mKHJ1bGVUeXBlKSA+IC0xKSB7XG4gICAgaWYgKCF0eXBlc1tydWxlVHlwZV0odmFsdWUpKSB7XG4gICAgICBlcnJvcnMucHVzaCh1dGlsLmZvcm1hdChvcHRpb25zLm1lc3NhZ2VzLnR5cGVzW3J1bGVUeXBlXSwgcnVsZS5mdWxsRmllbGQsIHJ1bGUudHlwZSkpO1xuICAgIH1cbiAgICAvLyBzdHJhaWdodCB0eXBlb2YgY2hlY2tcbiAgfSBlbHNlIGlmIChydWxlVHlwZSAmJiAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZih2YWx1ZSkpICE9PSBydWxlLnR5cGUpIHtcbiAgICBlcnJvcnMucHVzaCh1dGlsLmZvcm1hdChvcHRpb25zLm1lc3NhZ2VzLnR5cGVzW3J1bGVUeXBlXSwgcnVsZS5mdWxsRmllbGQsIHJ1bGUudHlwZSkpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHR5cGU7IiwiaW1wb3J0ICogYXMgdXRpbCBmcm9tICcuLi91dGlsJztcblxuLyoqXG4gKiAgUnVsZSBmb3IgdmFsaWRhdGluZyBtaW5pbXVtIGFuZCBtYXhpbXVtIGFsbG93ZWQgdmFsdWVzLlxuICpcbiAqICBAcGFyYW0gcnVsZSBUaGUgdmFsaWRhdGlvbiBydWxlLlxuICogIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgb2YgdGhlIGZpZWxkIG9uIHRoZSBzb3VyY2Ugb2JqZWN0LlxuICogIEBwYXJhbSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QgYmVpbmcgdmFsaWRhdGVkLlxuICogIEBwYXJhbSBlcnJvcnMgQW4gYXJyYXkgb2YgZXJyb3JzIHRoYXQgdGhpcyBydWxlIG1heSBhZGRcbiAqICB2YWxpZGF0aW9uIGVycm9ycyB0by5cbiAqICBAcGFyYW0gb3B0aW9ucyBUaGUgdmFsaWRhdGlvbiBvcHRpb25zLlxuICogIEBwYXJhbSBvcHRpb25zLm1lc3NhZ2VzIFRoZSB2YWxpZGF0aW9uIG1lc3NhZ2VzLlxuICovXG5mdW5jdGlvbiByYW5nZShydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpIHtcbiAgdmFyIGxlbiA9IHR5cGVvZiBydWxlLmxlbiA9PT0gJ251bWJlcic7XG4gIHZhciBtaW4gPSB0eXBlb2YgcnVsZS5taW4gPT09ICdudW1iZXInO1xuICB2YXIgbWF4ID0gdHlwZW9mIHJ1bGUubWF4ID09PSAnbnVtYmVyJztcbiAgLy8g5q2j5YiZ5Yy56YWN56CB54K56IyD5Zu05LuOVSswMTAwMDDkuIDnm7TliLBVKzEwRkZGRueahOaWh+Wtl++8iOihpeWFheW5s+mdolN1cHBsZW1lbnRhcnkgUGxhbmXvvIlcbiAgdmFyIHNwUmVnZXhwID0gL1tcXHVEODAwLVxcdURCRkZdW1xcdURDMDAtXFx1REZGRl0vZztcbiAgdmFyIHZhbCA9IHZhbHVlO1xuICB2YXIga2V5ID0gbnVsbDtcbiAgdmFyIG51bSA9IHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcic7XG4gIHZhciBzdHIgPSB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnO1xuICB2YXIgYXJyID0gQXJyYXkuaXNBcnJheSh2YWx1ZSk7XG4gIGlmIChudW0pIHtcbiAgICBrZXkgPSAnbnVtYmVyJztcbiAgfSBlbHNlIGlmIChzdHIpIHtcbiAgICBrZXkgPSAnc3RyaW5nJztcbiAgfSBlbHNlIGlmIChhcnIpIHtcbiAgICBrZXkgPSAnYXJyYXknO1xuICB9XG4gIC8vIGlmIHRoZSB2YWx1ZSBpcyBub3Qgb2YgYSBzdXBwb3J0ZWQgdHlwZSBmb3IgcmFuZ2UgdmFsaWRhdGlvblxuICAvLyB0aGUgdmFsaWRhdGlvbiBydWxlIHJ1bGUgc2hvdWxkIHVzZSB0aGVcbiAgLy8gdHlwZSBwcm9wZXJ0eSB0byBhbHNvIHRlc3QgZm9yIGEgcGFydGljdWxhciB0eXBlXG4gIGlmICgha2V5KSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChhcnIpIHtcbiAgICB2YWwgPSB2YWx1ZS5sZW5ndGg7XG4gIH1cbiAgaWYgKHN0cikge1xuICAgIC8vIOWkhOeQhueggeeCueWkp+S6jlUrMDEwMDAw55qE5paH5a2XbGVuZ3Ro5bGe5oCn5LiN5YeG56Gu55qEYnVn77yM5aaCXCLwoK638KCut/CgrrdcIi5sZW5naHQgIT09IDNcbiAgICB2YWwgPSB2YWx1ZS5yZXBsYWNlKHNwUmVnZXhwLCAnXycpLmxlbmd0aDtcbiAgfVxuICBpZiAobGVuKSB7XG4gICAgaWYgKHZhbCAhPT0gcnVsZS5sZW4pIHtcbiAgICAgIGVycm9ycy5wdXNoKHV0aWwuZm9ybWF0KG9wdGlvbnMubWVzc2FnZXNba2V5XS5sZW4sIHJ1bGUuZnVsbEZpZWxkLCBydWxlLmxlbikpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChtaW4gJiYgIW1heCAmJiB2YWwgPCBydWxlLm1pbikge1xuICAgIGVycm9ycy5wdXNoKHV0aWwuZm9ybWF0KG9wdGlvbnMubWVzc2FnZXNba2V5XS5taW4sIHJ1bGUuZnVsbEZpZWxkLCBydWxlLm1pbikpO1xuICB9IGVsc2UgaWYgKG1heCAmJiAhbWluICYmIHZhbCA+IHJ1bGUubWF4KSB7XG4gICAgZXJyb3JzLnB1c2godXRpbC5mb3JtYXQob3B0aW9ucy5tZXNzYWdlc1trZXldLm1heCwgcnVsZS5mdWxsRmllbGQsIHJ1bGUubWF4KSk7XG4gIH0gZWxzZSBpZiAobWluICYmIG1heCAmJiAodmFsIDwgcnVsZS5taW4gfHwgdmFsID4gcnVsZS5tYXgpKSB7XG4gICAgZXJyb3JzLnB1c2godXRpbC5mb3JtYXQob3B0aW9ucy5tZXNzYWdlc1trZXldLnJhbmdlLCBydWxlLmZ1bGxGaWVsZCwgcnVsZS5taW4sIHJ1bGUubWF4KSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgcmFuZ2U7IiwiaW1wb3J0ICogYXMgdXRpbCBmcm9tICcuLi91dGlsJztcbnZhciBFTlVNID0gJ2VudW0nO1xuXG4vKipcbiAqICBSdWxlIGZvciB2YWxpZGF0aW5nIGEgdmFsdWUgZXhpc3RzIGluIGFuIGVudW1lcmFibGUgbGlzdC5cbiAqXG4gKiAgQHBhcmFtIHJ1bGUgVGhlIHZhbGlkYXRpb24gcnVsZS5cbiAqICBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIG9mIHRoZSBmaWVsZCBvbiB0aGUgc291cmNlIG9iamVjdC5cbiAqICBAcGFyYW0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0IGJlaW5nIHZhbGlkYXRlZC5cbiAqICBAcGFyYW0gZXJyb3JzIEFuIGFycmF5IG9mIGVycm9ycyB0aGF0IHRoaXMgcnVsZSBtYXkgYWRkXG4gKiAgdmFsaWRhdGlvbiBlcnJvcnMgdG8uXG4gKiAgQHBhcmFtIG9wdGlvbnMgVGhlIHZhbGlkYXRpb24gb3B0aW9ucy5cbiAqICBAcGFyYW0gb3B0aW9ucy5tZXNzYWdlcyBUaGUgdmFsaWRhdGlvbiBtZXNzYWdlcy5cbiAqL1xuZnVuY3Rpb24gZW51bWVyYWJsZShydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpIHtcbiAgcnVsZVtFTlVNXSA9IEFycmF5LmlzQXJyYXkocnVsZVtFTlVNXSkgPyBydWxlW0VOVU1dIDogW107XG4gIGlmIChydWxlW0VOVU1dLmluZGV4T2YodmFsdWUpID09PSAtMSkge1xuICAgIGVycm9ycy5wdXNoKHV0aWwuZm9ybWF0KG9wdGlvbnMubWVzc2FnZXNbRU5VTV0sIHJ1bGUuZnVsbEZpZWxkLCBydWxlW0VOVU1dLmpvaW4oJywgJykpKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBlbnVtZXJhYmxlOyIsImltcG9ydCAqIGFzIHV0aWwgZnJvbSAnLi4vdXRpbCc7XG5cbi8qKlxuICogIFJ1bGUgZm9yIHZhbGlkYXRpbmcgYSByZWd1bGFyIGV4cHJlc3Npb24gcGF0dGVybi5cbiAqXG4gKiAgQHBhcmFtIHJ1bGUgVGhlIHZhbGlkYXRpb24gcnVsZS5cbiAqICBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIG9mIHRoZSBmaWVsZCBvbiB0aGUgc291cmNlIG9iamVjdC5cbiAqICBAcGFyYW0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0IGJlaW5nIHZhbGlkYXRlZC5cbiAqICBAcGFyYW0gZXJyb3JzIEFuIGFycmF5IG9mIGVycm9ycyB0aGF0IHRoaXMgcnVsZSBtYXkgYWRkXG4gKiAgdmFsaWRhdGlvbiBlcnJvcnMgdG8uXG4gKiAgQHBhcmFtIG9wdGlvbnMgVGhlIHZhbGlkYXRpb24gb3B0aW9ucy5cbiAqICBAcGFyYW0gb3B0aW9ucy5tZXNzYWdlcyBUaGUgdmFsaWRhdGlvbiBtZXNzYWdlcy5cbiAqL1xuZnVuY3Rpb24gcGF0dGVybihydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpIHtcbiAgaWYgKHJ1bGUucGF0dGVybikge1xuICAgIGlmIChydWxlLnBhdHRlcm4gaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICAgIC8vIGlmIGEgUmVnRXhwIGluc3RhbmNlIGlzIHBhc3NlZCwgcmVzZXQgYGxhc3RJbmRleGAgaW4gY2FzZSBpdHMgYGdsb2JhbGBcbiAgICAgIC8vIGZsYWcgaXMgYWNjaWRlbnRhbGx5IHNldCB0byBgdHJ1ZWAsIHdoaWNoIGluIGEgdmFsaWRhdGlvbiBzY2VuYXJpb1xuICAgICAgLy8gaXMgbm90IG5lY2Vzc2FyeSBhbmQgdGhlIHJlc3VsdCBtaWdodCBiZSBtaXNsZWFkaW5nXG4gICAgICBydWxlLnBhdHRlcm4ubGFzdEluZGV4ID0gMDtcbiAgICAgIGlmICghcnVsZS5wYXR0ZXJuLnRlc3QodmFsdWUpKSB7XG4gICAgICAgIGVycm9ycy5wdXNoKHV0aWwuZm9ybWF0KG9wdGlvbnMubWVzc2FnZXMucGF0dGVybi5taXNtYXRjaCwgcnVsZS5mdWxsRmllbGQsIHZhbHVlLCBydWxlLnBhdHRlcm4pKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBydWxlLnBhdHRlcm4gPT09ICdzdHJpbmcnKSB7XG4gICAgICB2YXIgX3BhdHRlcm4gPSBuZXcgUmVnRXhwKHJ1bGUucGF0dGVybik7XG4gICAgICBpZiAoIV9wYXR0ZXJuLnRlc3QodmFsdWUpKSB7XG4gICAgICAgIGVycm9ycy5wdXNoKHV0aWwuZm9ybWF0KG9wdGlvbnMubWVzc2FnZXMucGF0dGVybi5taXNtYXRjaCwgcnVsZS5mdWxsRmllbGQsIHZhbHVlLCBydWxlLnBhdHRlcm4pKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgcGF0dGVybjsiLCJpbXBvcnQgcmVxdWlyZWQgZnJvbSAnLi9yZXF1aXJlZCc7XG5pbXBvcnQgd2hpdGVzcGFjZSBmcm9tICcuL3doaXRlc3BhY2UnO1xuaW1wb3J0IHR5cGUgZnJvbSAnLi90eXBlJztcbmltcG9ydCByYW5nZSBmcm9tICcuL3JhbmdlJztcbmltcG9ydCBlbnVtUnVsZSBmcm9tICcuL2VudW0nO1xuaW1wb3J0IHBhdHRlcm4gZnJvbSAnLi9wYXR0ZXJuJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICByZXF1aXJlZDogcmVxdWlyZWQsXG4gIHdoaXRlc3BhY2U6IHdoaXRlc3BhY2UsXG4gIHR5cGU6IHR5cGUsXG4gIHJhbmdlOiByYW5nZSxcbiAgJ2VudW0nOiBlbnVtUnVsZSxcbiAgcGF0dGVybjogcGF0dGVyblxufTsiLCJpbXBvcnQgcnVsZXMgZnJvbSAnLi4vcnVsZS8nO1xuaW1wb3J0IHsgaXNFbXB0eVZhbHVlIH0gZnJvbSAnLi4vdXRpbCc7XG5cbi8qKlxuICogIFZhbGlkYXRlcyBhbiBvYmplY3QuXG4gKlxuICogIEBwYXJhbSBydWxlIFRoZSB2YWxpZGF0aW9uIHJ1bGUuXG4gKiAgQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZSBvZiB0aGUgZmllbGQgb24gdGhlIHNvdXJjZSBvYmplY3QuXG4gKiAgQHBhcmFtIGNhbGxiYWNrIFRoZSBjYWxsYmFjayBmdW5jdGlvbi5cbiAqICBAcGFyYW0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0IGJlaW5nIHZhbGlkYXRlZC5cbiAqICBAcGFyYW0gb3B0aW9ucyBUaGUgdmFsaWRhdGlvbiBvcHRpb25zLlxuICogIEBwYXJhbSBvcHRpb25zLm1lc3NhZ2VzIFRoZSB2YWxpZGF0aW9uIG1lc3NhZ2VzLlxuICovXG5mdW5jdGlvbiBvYmplY3QocnVsZSwgdmFsdWUsIGNhbGxiYWNrLCBzb3VyY2UsIG9wdGlvbnMpIHtcbiAgdmFyIGVycm9ycyA9IFtdO1xuICB2YXIgdmFsaWRhdGUgPSBydWxlLnJlcXVpcmVkIHx8ICFydWxlLnJlcXVpcmVkICYmIHNvdXJjZS5oYXNPd25Qcm9wZXJ0eShydWxlLmZpZWxkKTtcbiAgaWYgKHZhbGlkYXRlKSB7XG4gICAgaWYgKGlzRW1wdHlWYWx1ZSh2YWx1ZSkgJiYgIXJ1bGUucmVxdWlyZWQpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgIH1cbiAgICBydWxlcy5yZXF1aXJlZChydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpO1xuICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBydWxlcy50eXBlKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG4gICAgfVxuICB9XG4gIGNhbGxiYWNrKGVycm9ycyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG9iamVjdDsiLCJpbXBvcnQgcnVsZXMgZnJvbSAnLi4vcnVsZS8nO1xuaW1wb3J0IHsgaXNFbXB0eVZhbHVlIH0gZnJvbSAnLi4vdXRpbCc7XG52YXIgRU5VTSA9ICdlbnVtJztcblxuLyoqXG4gKiAgVmFsaWRhdGVzIGFuIGVudW1lcmFibGUgbGlzdC5cbiAqXG4gKiAgQHBhcmFtIHJ1bGUgVGhlIHZhbGlkYXRpb24gcnVsZS5cbiAqICBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIG9mIHRoZSBmaWVsZCBvbiB0aGUgc291cmNlIG9iamVjdC5cbiAqICBAcGFyYW0gY2FsbGJhY2sgVGhlIGNhbGxiYWNrIGZ1bmN0aW9uLlxuICogIEBwYXJhbSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QgYmVpbmcgdmFsaWRhdGVkLlxuICogIEBwYXJhbSBvcHRpb25zIFRoZSB2YWxpZGF0aW9uIG9wdGlvbnMuXG4gKiAgQHBhcmFtIG9wdGlvbnMubWVzc2FnZXMgVGhlIHZhbGlkYXRpb24gbWVzc2FnZXMuXG4gKi9cbmZ1bmN0aW9uIGVudW1lcmFibGUocnVsZSwgdmFsdWUsIGNhbGxiYWNrLCBzb3VyY2UsIG9wdGlvbnMpIHtcbiAgdmFyIGVycm9ycyA9IFtdO1xuICB2YXIgdmFsaWRhdGUgPSBydWxlLnJlcXVpcmVkIHx8ICFydWxlLnJlcXVpcmVkICYmIHNvdXJjZS5oYXNPd25Qcm9wZXJ0eShydWxlLmZpZWxkKTtcbiAgaWYgKHZhbGlkYXRlKSB7XG4gICAgaWYgKGlzRW1wdHlWYWx1ZSh2YWx1ZSkgJiYgIXJ1bGUucmVxdWlyZWQpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgIH1cbiAgICBydWxlcy5yZXF1aXJlZChydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpO1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgcnVsZXNbRU5VTV0ocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcbiAgICB9XG4gIH1cbiAgY2FsbGJhY2soZXJyb3JzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZW51bWVyYWJsZTsiLCJpbXBvcnQgcnVsZXMgZnJvbSAnLi4vcnVsZS8nO1xuaW1wb3J0IHsgaXNFbXB0eVZhbHVlIH0gZnJvbSAnLi4vdXRpbCc7XG5cbmZ1bmN0aW9uIHR5cGUocnVsZSwgdmFsdWUsIGNhbGxiYWNrLCBzb3VyY2UsIG9wdGlvbnMpIHtcbiAgdmFyIHJ1bGVUeXBlID0gcnVsZS50eXBlO1xuICB2YXIgZXJyb3JzID0gW107XG4gIHZhciB2YWxpZGF0ZSA9IHJ1bGUucmVxdWlyZWQgfHwgIXJ1bGUucmVxdWlyZWQgJiYgc291cmNlLmhhc093blByb3BlcnR5KHJ1bGUuZmllbGQpO1xuICBpZiAodmFsaWRhdGUpIHtcbiAgICBpZiAoaXNFbXB0eVZhbHVlKHZhbHVlLCBydWxlVHlwZSkgJiYgIXJ1bGUucmVxdWlyZWQpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgIH1cbiAgICBydWxlcy5yZXF1aXJlZChydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMsIHJ1bGVUeXBlKTtcbiAgICBpZiAoIWlzRW1wdHlWYWx1ZSh2YWx1ZSwgcnVsZVR5cGUpKSB7XG4gICAgICBydWxlcy50eXBlKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG4gICAgfVxuICB9XG4gIGNhbGxiYWNrKGVycm9ycyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHR5cGU7IiwiaW1wb3J0IHN0cmluZyBmcm9tICcuL3N0cmluZyc7XG5pbXBvcnQgbWV0aG9kIGZyb20gJy4vbWV0aG9kJztcbmltcG9ydCBudW1iZXIgZnJvbSAnLi9udW1iZXInO1xuaW1wb3J0IGJvb2xlYW4gZnJvbSAnLi9ib29sZWFuJztcbmltcG9ydCByZWdleHAgZnJvbSAnLi9yZWdleHAnO1xuaW1wb3J0IGludGVnZXIgZnJvbSAnLi9pbnRlZ2VyJztcbmltcG9ydCBmbG9hdCBmcm9tICcuL2Zsb2F0JztcbmltcG9ydCBhcnJheSBmcm9tICcuL2FycmF5JztcbmltcG9ydCBvYmplY3QgZnJvbSAnLi9vYmplY3QnO1xuaW1wb3J0IGVudW1WYWxpZGF0b3IgZnJvbSAnLi9lbnVtJztcbmltcG9ydCBwYXR0ZXJuIGZyb20gJy4vcGF0dGVybic7XG5pbXBvcnQgZGF0ZSBmcm9tICcuL2RhdGUnO1xuaW1wb3J0IHJlcXVpcmVkIGZyb20gJy4vcmVxdWlyZWQnO1xuaW1wb3J0IHR5cGUgZnJvbSAnLi90eXBlJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICBzdHJpbmc6IHN0cmluZyxcbiAgbWV0aG9kOiBtZXRob2QsXG4gIG51bWJlcjogbnVtYmVyLFxuICBib29sZWFuOiBib29sZWFuLFxuICByZWdleHA6IHJlZ2V4cCxcbiAgaW50ZWdlcjogaW50ZWdlcixcbiAgZmxvYXQ6IGZsb2F0LFxuICBhcnJheTogYXJyYXksXG4gIG9iamVjdDogb2JqZWN0LFxuICAnZW51bSc6IGVudW1WYWxpZGF0b3IsXG4gIHBhdHRlcm46IHBhdHRlcm4sXG4gIGRhdGU6IGRhdGUsXG4gIHVybDogdHlwZSxcbiAgaGV4OiB0eXBlLFxuICBlbWFpbDogdHlwZSxcbiAgcmVxdWlyZWQ6IHJlcXVpcmVkXG59OyIsImltcG9ydCBydWxlcyBmcm9tICcuLi9ydWxlLyc7XG5pbXBvcnQgeyBpc0VtcHR5VmFsdWUgfSBmcm9tICcuLi91dGlsJztcblxuLyoqXG4gKiAgUGVyZm9ybXMgdmFsaWRhdGlvbiBmb3Igc3RyaW5nIHR5cGVzLlxuICpcbiAqICBAcGFyYW0gcnVsZSBUaGUgdmFsaWRhdGlvbiBydWxlLlxuICogIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgb2YgdGhlIGZpZWxkIG9uIHRoZSBzb3VyY2Ugb2JqZWN0LlxuICogIEBwYXJhbSBjYWxsYmFjayBUaGUgY2FsbGJhY2sgZnVuY3Rpb24uXG4gKiAgQHBhcmFtIHNvdXJjZSBUaGUgc291cmNlIG9iamVjdCBiZWluZyB2YWxpZGF0ZWQuXG4gKiAgQHBhcmFtIG9wdGlvbnMgVGhlIHZhbGlkYXRpb24gb3B0aW9ucy5cbiAqICBAcGFyYW0gb3B0aW9ucy5tZXNzYWdlcyBUaGUgdmFsaWRhdGlvbiBtZXNzYWdlcy5cbiAqL1xuZnVuY3Rpb24gc3RyaW5nKHJ1bGUsIHZhbHVlLCBjYWxsYmFjaywgc291cmNlLCBvcHRpb25zKSB7XG4gIHZhciBlcnJvcnMgPSBbXTtcbiAgdmFyIHZhbGlkYXRlID0gcnVsZS5yZXF1aXJlZCB8fCAhcnVsZS5yZXF1aXJlZCAmJiBzb3VyY2UuaGFzT3duUHJvcGVydHkocnVsZS5maWVsZCk7XG4gIGlmICh2YWxpZGF0ZSkge1xuICAgIGlmIChpc0VtcHR5VmFsdWUodmFsdWUsICdzdHJpbmcnKSAmJiAhcnVsZS5yZXF1aXJlZCkge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgfVxuICAgIHJ1bGVzLnJlcXVpcmVkKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucywgJ3N0cmluZycpO1xuICAgIGlmICghaXNFbXB0eVZhbHVlKHZhbHVlLCAnc3RyaW5nJykpIHtcbiAgICAgIHJ1bGVzLnR5cGUocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcbiAgICAgIHJ1bGVzLnJhbmdlKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG4gICAgICBydWxlcy5wYXR0ZXJuKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG4gICAgICBpZiAocnVsZS53aGl0ZXNwYWNlID09PSB0cnVlKSB7XG4gICAgICAgIHJ1bGVzLndoaXRlc3BhY2UocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgY2FsbGJhY2soZXJyb3JzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc3RyaW5nOyIsImltcG9ydCBydWxlcyBmcm9tICcuLi9ydWxlLyc7XG5pbXBvcnQgeyBpc0VtcHR5VmFsdWUgfSBmcm9tICcuLi91dGlsJztcblxuLyoqXG4gKiAgVmFsaWRhdGVzIGEgZnVuY3Rpb24uXG4gKlxuICogIEBwYXJhbSBydWxlIFRoZSB2YWxpZGF0aW9uIHJ1bGUuXG4gKiAgQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZSBvZiB0aGUgZmllbGQgb24gdGhlIHNvdXJjZSBvYmplY3QuXG4gKiAgQHBhcmFtIGNhbGxiYWNrIFRoZSBjYWxsYmFjayBmdW5jdGlvbi5cbiAqICBAcGFyYW0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0IGJlaW5nIHZhbGlkYXRlZC5cbiAqICBAcGFyYW0gb3B0aW9ucyBUaGUgdmFsaWRhdGlvbiBvcHRpb25zLlxuICogIEBwYXJhbSBvcHRpb25zLm1lc3NhZ2VzIFRoZSB2YWxpZGF0aW9uIG1lc3NhZ2VzLlxuICovXG5mdW5jdGlvbiBtZXRob2QocnVsZSwgdmFsdWUsIGNhbGxiYWNrLCBzb3VyY2UsIG9wdGlvbnMpIHtcbiAgdmFyIGVycm9ycyA9IFtdO1xuICB2YXIgdmFsaWRhdGUgPSBydWxlLnJlcXVpcmVkIHx8ICFydWxlLnJlcXVpcmVkICYmIHNvdXJjZS5oYXNPd25Qcm9wZXJ0eShydWxlLmZpZWxkKTtcbiAgaWYgKHZhbGlkYXRlKSB7XG4gICAgaWYgKGlzRW1wdHlWYWx1ZSh2YWx1ZSkgJiYgIXJ1bGUucmVxdWlyZWQpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgIH1cbiAgICBydWxlcy5yZXF1aXJlZChydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpO1xuICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBydWxlcy50eXBlKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG4gICAgfVxuICB9XG4gIGNhbGxiYWNrKGVycm9ycyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1ldGhvZDsiLCJpbXBvcnQgcnVsZXMgZnJvbSAnLi4vcnVsZS8nO1xuaW1wb3J0IHsgaXNFbXB0eVZhbHVlIH0gZnJvbSAnLi4vdXRpbCc7XG5cbi8qKlxuICogIFZhbGlkYXRlcyBhIG51bWJlci5cbiAqXG4gKiAgQHBhcmFtIHJ1bGUgVGhlIHZhbGlkYXRpb24gcnVsZS5cbiAqICBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIG9mIHRoZSBmaWVsZCBvbiB0aGUgc291cmNlIG9iamVjdC5cbiAqICBAcGFyYW0gY2FsbGJhY2sgVGhlIGNhbGxiYWNrIGZ1bmN0aW9uLlxuICogIEBwYXJhbSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QgYmVpbmcgdmFsaWRhdGVkLlxuICogIEBwYXJhbSBvcHRpb25zIFRoZSB2YWxpZGF0aW9uIG9wdGlvbnMuXG4gKiAgQHBhcmFtIG9wdGlvbnMubWVzc2FnZXMgVGhlIHZhbGlkYXRpb24gbWVzc2FnZXMuXG4gKi9cbmZ1bmN0aW9uIG51bWJlcihydWxlLCB2YWx1ZSwgY2FsbGJhY2ssIHNvdXJjZSwgb3B0aW9ucykge1xuICB2YXIgZXJyb3JzID0gW107XG4gIHZhciB2YWxpZGF0ZSA9IHJ1bGUucmVxdWlyZWQgfHwgIXJ1bGUucmVxdWlyZWQgJiYgc291cmNlLmhhc093blByb3BlcnR5KHJ1bGUuZmllbGQpO1xuICBpZiAodmFsaWRhdGUpIHtcbiAgICBpZiAoaXNFbXB0eVZhbHVlKHZhbHVlKSAmJiAhcnVsZS5yZXF1aXJlZCkge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgfVxuICAgIHJ1bGVzLnJlcXVpcmVkKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG4gICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJ1bGVzLnR5cGUocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcbiAgICAgIHJ1bGVzLnJhbmdlKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG4gICAgfVxuICB9XG4gIGNhbGxiYWNrKGVycm9ycyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG51bWJlcjsiLCJpbXBvcnQgeyBpc0VtcHR5VmFsdWUgfSBmcm9tICcuLi91dGlsJztcbmltcG9ydCBydWxlcyBmcm9tICcuLi9ydWxlLyc7XG5cbi8qKlxuICogIFZhbGlkYXRlcyBhIGJvb2xlYW4uXG4gKlxuICogIEBwYXJhbSBydWxlIFRoZSB2YWxpZGF0aW9uIHJ1bGUuXG4gKiAgQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZSBvZiB0aGUgZmllbGQgb24gdGhlIHNvdXJjZSBvYmplY3QuXG4gKiAgQHBhcmFtIGNhbGxiYWNrIFRoZSBjYWxsYmFjayBmdW5jdGlvbi5cbiAqICBAcGFyYW0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0IGJlaW5nIHZhbGlkYXRlZC5cbiAqICBAcGFyYW0gb3B0aW9ucyBUaGUgdmFsaWRhdGlvbiBvcHRpb25zLlxuICogIEBwYXJhbSBvcHRpb25zLm1lc3NhZ2VzIFRoZSB2YWxpZGF0aW9uIG1lc3NhZ2VzLlxuICovXG5mdW5jdGlvbiBib29sZWFuKHJ1bGUsIHZhbHVlLCBjYWxsYmFjaywgc291cmNlLCBvcHRpb25zKSB7XG4gIHZhciBlcnJvcnMgPSBbXTtcbiAgdmFyIHZhbGlkYXRlID0gcnVsZS5yZXF1aXJlZCB8fCAhcnVsZS5yZXF1aXJlZCAmJiBzb3VyY2UuaGFzT3duUHJvcGVydHkocnVsZS5maWVsZCk7XG4gIGlmICh2YWxpZGF0ZSkge1xuICAgIGlmIChpc0VtcHR5VmFsdWUodmFsdWUpICYmICFydWxlLnJlcXVpcmVkKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICB9XG4gICAgcnVsZXMucmVxdWlyZWQocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcbiAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcnVsZXMudHlwZShydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpO1xuICAgIH1cbiAgfVxuICBjYWxsYmFjayhlcnJvcnMpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBib29sZWFuOyIsImltcG9ydCBydWxlcyBmcm9tICcuLi9ydWxlLyc7XG5pbXBvcnQgeyBpc0VtcHR5VmFsdWUgfSBmcm9tICcuLi91dGlsJztcblxuLyoqXG4gKiAgVmFsaWRhdGVzIHRoZSByZWd1bGFyIGV4cHJlc3Npb24gdHlwZS5cbiAqXG4gKiAgQHBhcmFtIHJ1bGUgVGhlIHZhbGlkYXRpb24gcnVsZS5cbiAqICBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIG9mIHRoZSBmaWVsZCBvbiB0aGUgc291cmNlIG9iamVjdC5cbiAqICBAcGFyYW0gY2FsbGJhY2sgVGhlIGNhbGxiYWNrIGZ1bmN0aW9uLlxuICogIEBwYXJhbSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QgYmVpbmcgdmFsaWRhdGVkLlxuICogIEBwYXJhbSBvcHRpb25zIFRoZSB2YWxpZGF0aW9uIG9wdGlvbnMuXG4gKiAgQHBhcmFtIG9wdGlvbnMubWVzc2FnZXMgVGhlIHZhbGlkYXRpb24gbWVzc2FnZXMuXG4gKi9cbmZ1bmN0aW9uIHJlZ2V4cChydWxlLCB2YWx1ZSwgY2FsbGJhY2ssIHNvdXJjZSwgb3B0aW9ucykge1xuICB2YXIgZXJyb3JzID0gW107XG4gIHZhciB2YWxpZGF0ZSA9IHJ1bGUucmVxdWlyZWQgfHwgIXJ1bGUucmVxdWlyZWQgJiYgc291cmNlLmhhc093blByb3BlcnR5KHJ1bGUuZmllbGQpO1xuICBpZiAodmFsaWRhdGUpIHtcbiAgICBpZiAoaXNFbXB0eVZhbHVlKHZhbHVlKSAmJiAhcnVsZS5yZXF1aXJlZCkge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgfVxuICAgIHJ1bGVzLnJlcXVpcmVkKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG4gICAgaWYgKCFpc0VtcHR5VmFsdWUodmFsdWUpKSB7XG4gICAgICBydWxlcy50eXBlKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG4gICAgfVxuICB9XG4gIGNhbGxiYWNrKGVycm9ycyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHJlZ2V4cDsiLCJpbXBvcnQgcnVsZXMgZnJvbSAnLi4vcnVsZS8nO1xuaW1wb3J0IHsgaXNFbXB0eVZhbHVlIH0gZnJvbSAnLi4vdXRpbCc7XG5cbi8qKlxuICogIFZhbGlkYXRlcyBhIG51bWJlciBpcyBhbiBpbnRlZ2VyLlxuICpcbiAqICBAcGFyYW0gcnVsZSBUaGUgdmFsaWRhdGlvbiBydWxlLlxuICogIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgb2YgdGhlIGZpZWxkIG9uIHRoZSBzb3VyY2Ugb2JqZWN0LlxuICogIEBwYXJhbSBjYWxsYmFjayBUaGUgY2FsbGJhY2sgZnVuY3Rpb24uXG4gKiAgQHBhcmFtIHNvdXJjZSBUaGUgc291cmNlIG9iamVjdCBiZWluZyB2YWxpZGF0ZWQuXG4gKiAgQHBhcmFtIG9wdGlvbnMgVGhlIHZhbGlkYXRpb24gb3B0aW9ucy5cbiAqICBAcGFyYW0gb3B0aW9ucy5tZXNzYWdlcyBUaGUgdmFsaWRhdGlvbiBtZXNzYWdlcy5cbiAqL1xuZnVuY3Rpb24gaW50ZWdlcihydWxlLCB2YWx1ZSwgY2FsbGJhY2ssIHNvdXJjZSwgb3B0aW9ucykge1xuICB2YXIgZXJyb3JzID0gW107XG4gIHZhciB2YWxpZGF0ZSA9IHJ1bGUucmVxdWlyZWQgfHwgIXJ1bGUucmVxdWlyZWQgJiYgc291cmNlLmhhc093blByb3BlcnR5KHJ1bGUuZmllbGQpO1xuICBpZiAodmFsaWRhdGUpIHtcbiAgICBpZiAoaXNFbXB0eVZhbHVlKHZhbHVlKSAmJiAhcnVsZS5yZXF1aXJlZCkge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgfVxuICAgIHJ1bGVzLnJlcXVpcmVkKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG4gICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJ1bGVzLnR5cGUocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcbiAgICAgIHJ1bGVzLnJhbmdlKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG4gICAgfVxuICB9XG4gIGNhbGxiYWNrKGVycm9ycyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGludGVnZXI7IiwiaW1wb3J0IHJ1bGVzIGZyb20gJy4uL3J1bGUvJztcbmltcG9ydCB7IGlzRW1wdHlWYWx1ZSB9IGZyb20gJy4uL3V0aWwnO1xuXG4vKipcbiAqICBWYWxpZGF0ZXMgYSBudW1iZXIgaXMgYSBmbG9hdGluZyBwb2ludCBudW1iZXIuXG4gKlxuICogIEBwYXJhbSBydWxlIFRoZSB2YWxpZGF0aW9uIHJ1bGUuXG4gKiAgQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZSBvZiB0aGUgZmllbGQgb24gdGhlIHNvdXJjZSBvYmplY3QuXG4gKiAgQHBhcmFtIGNhbGxiYWNrIFRoZSBjYWxsYmFjayBmdW5jdGlvbi5cbiAqICBAcGFyYW0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0IGJlaW5nIHZhbGlkYXRlZC5cbiAqICBAcGFyYW0gb3B0aW9ucyBUaGUgdmFsaWRhdGlvbiBvcHRpb25zLlxuICogIEBwYXJhbSBvcHRpb25zLm1lc3NhZ2VzIFRoZSB2YWxpZGF0aW9uIG1lc3NhZ2VzLlxuICovXG5mdW5jdGlvbiBmbG9hdEZuKHJ1bGUsIHZhbHVlLCBjYWxsYmFjaywgc291cmNlLCBvcHRpb25zKSB7XG4gIHZhciBlcnJvcnMgPSBbXTtcbiAgdmFyIHZhbGlkYXRlID0gcnVsZS5yZXF1aXJlZCB8fCAhcnVsZS5yZXF1aXJlZCAmJiBzb3VyY2UuaGFzT3duUHJvcGVydHkocnVsZS5maWVsZCk7XG4gIGlmICh2YWxpZGF0ZSkge1xuICAgIGlmIChpc0VtcHR5VmFsdWUodmFsdWUpICYmICFydWxlLnJlcXVpcmVkKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICB9XG4gICAgcnVsZXMucmVxdWlyZWQocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcbiAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcnVsZXMudHlwZShydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpO1xuICAgICAgcnVsZXMucmFuZ2UocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcbiAgICB9XG4gIH1cbiAgY2FsbGJhY2soZXJyb3JzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZmxvYXRGbjsiLCJpbXBvcnQgcnVsZXMgZnJvbSAnLi4vcnVsZS8nO1xuaW1wb3J0IHsgaXNFbXB0eVZhbHVlIH0gZnJvbSAnLi4vdXRpbCc7XG4vKipcbiAqICBWYWxpZGF0ZXMgYW4gYXJyYXkuXG4gKlxuICogIEBwYXJhbSBydWxlIFRoZSB2YWxpZGF0aW9uIHJ1bGUuXG4gKiAgQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZSBvZiB0aGUgZmllbGQgb24gdGhlIHNvdXJjZSBvYmplY3QuXG4gKiAgQHBhcmFtIGNhbGxiYWNrIFRoZSBjYWxsYmFjayBmdW5jdGlvbi5cbiAqICBAcGFyYW0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0IGJlaW5nIHZhbGlkYXRlZC5cbiAqICBAcGFyYW0gb3B0aW9ucyBUaGUgdmFsaWRhdGlvbiBvcHRpb25zLlxuICogIEBwYXJhbSBvcHRpb25zLm1lc3NhZ2VzIFRoZSB2YWxpZGF0aW9uIG1lc3NhZ2VzLlxuICovXG5mdW5jdGlvbiBhcnJheShydWxlLCB2YWx1ZSwgY2FsbGJhY2ssIHNvdXJjZSwgb3B0aW9ucykge1xuICB2YXIgZXJyb3JzID0gW107XG4gIHZhciB2YWxpZGF0ZSA9IHJ1bGUucmVxdWlyZWQgfHwgIXJ1bGUucmVxdWlyZWQgJiYgc291cmNlLmhhc093blByb3BlcnR5KHJ1bGUuZmllbGQpO1xuICBpZiAodmFsaWRhdGUpIHtcbiAgICBpZiAoaXNFbXB0eVZhbHVlKHZhbHVlLCAnYXJyYXknKSAmJiAhcnVsZS5yZXF1aXJlZCkge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgfVxuICAgIHJ1bGVzLnJlcXVpcmVkKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucywgJ2FycmF5Jyk7XG4gICAgaWYgKCFpc0VtcHR5VmFsdWUodmFsdWUsICdhcnJheScpKSB7XG4gICAgICBydWxlcy50eXBlKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG4gICAgICBydWxlcy5yYW5nZShydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpO1xuICAgIH1cbiAgfVxuICBjYWxsYmFjayhlcnJvcnMpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBhcnJheTsiLCJpbXBvcnQgcnVsZXMgZnJvbSAnLi4vcnVsZS8nO1xuaW1wb3J0IHsgaXNFbXB0eVZhbHVlIH0gZnJvbSAnLi4vdXRpbCc7XG5cbi8qKlxuICogIFZhbGlkYXRlcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBwYXR0ZXJuLlxuICpcbiAqICBQZXJmb3JtcyB2YWxpZGF0aW9uIHdoZW4gYSBydWxlIG9ubHkgY29udGFpbnNcbiAqICBhIHBhdHRlcm4gcHJvcGVydHkgYnV0IGlzIG5vdCBkZWNsYXJlZCBhcyBhIHN0cmluZyB0eXBlLlxuICpcbiAqICBAcGFyYW0gcnVsZSBUaGUgdmFsaWRhdGlvbiBydWxlLlxuICogIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgb2YgdGhlIGZpZWxkIG9uIHRoZSBzb3VyY2Ugb2JqZWN0LlxuICogIEBwYXJhbSBjYWxsYmFjayBUaGUgY2FsbGJhY2sgZnVuY3Rpb24uXG4gKiAgQHBhcmFtIHNvdXJjZSBUaGUgc291cmNlIG9iamVjdCBiZWluZyB2YWxpZGF0ZWQuXG4gKiAgQHBhcmFtIG9wdGlvbnMgVGhlIHZhbGlkYXRpb24gb3B0aW9ucy5cbiAqICBAcGFyYW0gb3B0aW9ucy5tZXNzYWdlcyBUaGUgdmFsaWRhdGlvbiBtZXNzYWdlcy5cbiAqL1xuZnVuY3Rpb24gcGF0dGVybihydWxlLCB2YWx1ZSwgY2FsbGJhY2ssIHNvdXJjZSwgb3B0aW9ucykge1xuICB2YXIgZXJyb3JzID0gW107XG4gIHZhciB2YWxpZGF0ZSA9IHJ1bGUucmVxdWlyZWQgfHwgIXJ1bGUucmVxdWlyZWQgJiYgc291cmNlLmhhc093blByb3BlcnR5KHJ1bGUuZmllbGQpO1xuICBpZiAodmFsaWRhdGUpIHtcbiAgICBpZiAoaXNFbXB0eVZhbHVlKHZhbHVlLCAnc3RyaW5nJykgJiYgIXJ1bGUucmVxdWlyZWQpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgIH1cbiAgICBydWxlcy5yZXF1aXJlZChydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpO1xuICAgIGlmICghaXNFbXB0eVZhbHVlKHZhbHVlLCAnc3RyaW5nJykpIHtcbiAgICAgIHJ1bGVzLnBhdHRlcm4ocnVsZSwgdmFsdWUsIHNvdXJjZSwgZXJyb3JzLCBvcHRpb25zKTtcbiAgICB9XG4gIH1cbiAgY2FsbGJhY2soZXJyb3JzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgcGF0dGVybjsiLCJpbXBvcnQgcnVsZXMgZnJvbSAnLi4vcnVsZS8nO1xuaW1wb3J0IHsgaXNFbXB0eVZhbHVlIH0gZnJvbSAnLi4vdXRpbCc7XG5cbmZ1bmN0aW9uIGRhdGUocnVsZSwgdmFsdWUsIGNhbGxiYWNrLCBzb3VyY2UsIG9wdGlvbnMpIHtcbiAgLy8gY29uc29sZS5sb2coJ2ludGVnZXIgcnVsZSBjYWxsZWQgJWonLCBydWxlKTtcbiAgdmFyIGVycm9ycyA9IFtdO1xuICB2YXIgdmFsaWRhdGUgPSBydWxlLnJlcXVpcmVkIHx8ICFydWxlLnJlcXVpcmVkICYmIHNvdXJjZS5oYXNPd25Qcm9wZXJ0eShydWxlLmZpZWxkKTtcbiAgLy8gY29uc29sZS5sb2coJ3ZhbGlkYXRlIG9uICVzIHZhbHVlJywgdmFsdWUpO1xuICBpZiAodmFsaWRhdGUpIHtcbiAgICBpZiAoaXNFbXB0eVZhbHVlKHZhbHVlKSAmJiAhcnVsZS5yZXF1aXJlZCkge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgfVxuICAgIHJ1bGVzLnJlcXVpcmVkKHJ1bGUsIHZhbHVlLCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG4gICAgaWYgKCFpc0VtcHR5VmFsdWUodmFsdWUpKSB7XG4gICAgICB2YXIgZGF0ZU9iamVjdCA9IHZvaWQgMDtcblxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgZGF0ZU9iamVjdCA9IG5ldyBEYXRlKHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRhdGVPYmplY3QgPSB2YWx1ZTtcbiAgICAgIH1cblxuICAgICAgcnVsZXMudHlwZShydWxlLCBkYXRlT2JqZWN0LCBzb3VyY2UsIGVycm9ycywgb3B0aW9ucyk7XG4gICAgICBpZiAoZGF0ZU9iamVjdCkge1xuICAgICAgICBydWxlcy5yYW5nZShydWxlLCBkYXRlT2JqZWN0LmdldFRpbWUoKSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBjYWxsYmFjayhlcnJvcnMpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBkYXRlOyIsImltcG9ydCBfdHlwZW9mIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy90eXBlb2YnO1xuaW1wb3J0IHJ1bGVzIGZyb20gJy4uL3J1bGUvJztcblxuZnVuY3Rpb24gcmVxdWlyZWQocnVsZSwgdmFsdWUsIGNhbGxiYWNrLCBzb3VyY2UsIG9wdGlvbnMpIHtcbiAgdmFyIGVycm9ycyA9IFtdO1xuICB2YXIgdHlwZSA9IEFycmF5LmlzQXJyYXkodmFsdWUpID8gJ2FycmF5JyA6IHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YodmFsdWUpO1xuICBydWxlcy5yZXF1aXJlZChydWxlLCB2YWx1ZSwgc291cmNlLCBlcnJvcnMsIG9wdGlvbnMsIHR5cGUpO1xuICBjYWxsYmFjayhlcnJvcnMpO1xufVxuXG5leHBvcnQgZGVmYXVsdCByZXF1aXJlZDsiLCJleHBvcnQgZnVuY3Rpb24gbmV3TWVzc2FnZXMoKSB7XG4gIHJldHVybiB7XG4gICAgJ2RlZmF1bHQnOiAnVmFsaWRhdGlvbiBlcnJvciBvbiBmaWVsZCAlcycsXG4gICAgcmVxdWlyZWQ6ICclcyBpcyByZXF1aXJlZCcsXG4gICAgJ2VudW0nOiAnJXMgbXVzdCBiZSBvbmUgb2YgJXMnLFxuICAgIHdoaXRlc3BhY2U6ICclcyBjYW5ub3QgYmUgZW1wdHknLFxuICAgIGRhdGU6IHtcbiAgICAgIGZvcm1hdDogJyVzIGRhdGUgJXMgaXMgaW52YWxpZCBmb3IgZm9ybWF0ICVzJyxcbiAgICAgIHBhcnNlOiAnJXMgZGF0ZSBjb3VsZCBub3QgYmUgcGFyc2VkLCAlcyBpcyBpbnZhbGlkICcsXG4gICAgICBpbnZhbGlkOiAnJXMgZGF0ZSAlcyBpcyBpbnZhbGlkJ1xuICAgIH0sXG4gICAgdHlwZXM6IHtcbiAgICAgIHN0cmluZzogJyVzIGlzIG5vdCBhICVzJyxcbiAgICAgIG1ldGhvZDogJyVzIGlzIG5vdCBhICVzIChmdW5jdGlvbiknLFxuICAgICAgYXJyYXk6ICclcyBpcyBub3QgYW4gJXMnLFxuICAgICAgb2JqZWN0OiAnJXMgaXMgbm90IGFuICVzJyxcbiAgICAgIG51bWJlcjogJyVzIGlzIG5vdCBhICVzJyxcbiAgICAgIGRhdGU6ICclcyBpcyBub3QgYSAlcycsXG4gICAgICBib29sZWFuOiAnJXMgaXMgbm90IGEgJXMnLFxuICAgICAgaW50ZWdlcjogJyVzIGlzIG5vdCBhbiAlcycsXG4gICAgICBmbG9hdDogJyVzIGlzIG5vdCBhICVzJyxcbiAgICAgIHJlZ2V4cDogJyVzIGlzIG5vdCBhIHZhbGlkICVzJyxcbiAgICAgIGVtYWlsOiAnJXMgaXMgbm90IGEgdmFsaWQgJXMnLFxuICAgICAgdXJsOiAnJXMgaXMgbm90IGEgdmFsaWQgJXMnLFxuICAgICAgaGV4OiAnJXMgaXMgbm90IGEgdmFsaWQgJXMnXG4gICAgfSxcbiAgICBzdHJpbmc6IHtcbiAgICAgIGxlbjogJyVzIG11c3QgYmUgZXhhY3RseSAlcyBjaGFyYWN0ZXJzJyxcbiAgICAgIG1pbjogJyVzIG11c3QgYmUgYXQgbGVhc3QgJXMgY2hhcmFjdGVycycsXG4gICAgICBtYXg6ICclcyBjYW5ub3QgYmUgbG9uZ2VyIHRoYW4gJXMgY2hhcmFjdGVycycsXG4gICAgICByYW5nZTogJyVzIG11c3QgYmUgYmV0d2VlbiAlcyBhbmQgJXMgY2hhcmFjdGVycydcbiAgICB9LFxuICAgIG51bWJlcjoge1xuICAgICAgbGVuOiAnJXMgbXVzdCBlcXVhbCAlcycsXG4gICAgICBtaW46ICclcyBjYW5ub3QgYmUgbGVzcyB0aGFuICVzJyxcbiAgICAgIG1heDogJyVzIGNhbm5vdCBiZSBncmVhdGVyIHRoYW4gJXMnLFxuICAgICAgcmFuZ2U6ICclcyBtdXN0IGJlIGJldHdlZW4gJXMgYW5kICVzJ1xuICAgIH0sXG4gICAgYXJyYXk6IHtcbiAgICAgIGxlbjogJyVzIG11c3QgYmUgZXhhY3RseSAlcyBpbiBsZW5ndGgnLFxuICAgICAgbWluOiAnJXMgY2Fubm90IGJlIGxlc3MgdGhhbiAlcyBpbiBsZW5ndGgnLFxuICAgICAgbWF4OiAnJXMgY2Fubm90IGJlIGdyZWF0ZXIgdGhhbiAlcyBpbiBsZW5ndGgnLFxuICAgICAgcmFuZ2U6ICclcyBtdXN0IGJlIGJldHdlZW4gJXMgYW5kICVzIGluIGxlbmd0aCdcbiAgICB9LFxuICAgIHBhdHRlcm46IHtcbiAgICAgIG1pc21hdGNoOiAnJXMgdmFsdWUgJXMgZG9lcyBub3QgbWF0Y2ggcGF0dGVybiAlcydcbiAgICB9LFxuICAgIGNsb25lOiBmdW5jdGlvbiBjbG9uZSgpIHtcbiAgICAgIHZhciBjbG9uZWQgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMpKTtcbiAgICAgIGNsb25lZC5jbG9uZSA9IHRoaXMuY2xvbmU7XG4gICAgICByZXR1cm4gY2xvbmVkO1xuICAgIH1cbiAgfTtcbn1cblxuZXhwb3J0IHZhciBtZXNzYWdlcyA9IG5ld01lc3NhZ2VzKCk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmltcG9ydCBfdHlwZW9mIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy90eXBlb2YnO1xuaW1wb3J0IHsgZm9ybWF0LCBjb21wbGVtZW50RXJyb3IsIGFzeW5jTWFwLCB3YXJuaW5nLCBkZWVwTWVyZ2UgfSBmcm9tICcuL3V0aWwnO1xuaW1wb3J0IHZhbGlkYXRvcnMgZnJvbSAnLi92YWxpZGF0b3IvJztcbmltcG9ydCB7IG1lc3NhZ2VzIGFzIGRlZmF1bHRNZXNzYWdlcywgbmV3TWVzc2FnZXMgfSBmcm9tICcuL21lc3NhZ2VzJztcblxuLyoqXG4gKiAgRW5jYXBzdWxhdGVzIGEgdmFsaWRhdGlvbiBzY2hlbWEuXG4gKlxuICogIEBwYXJhbSBkZXNjcmlwdG9yIEFuIG9iamVjdCBkZWNsYXJpbmcgdmFsaWRhdGlvbiBydWxlc1xuICogIGZvciB0aGlzIHNjaGVtYS5cbiAqL1xuZnVuY3Rpb24gU2NoZW1hKGRlc2NyaXB0b3IpIHtcbiAgdGhpcy5ydWxlcyA9IG51bGw7XG4gIHRoaXMuX21lc3NhZ2VzID0gZGVmYXVsdE1lc3NhZ2VzO1xuICB0aGlzLmRlZmluZShkZXNjcmlwdG9yKTtcbn1cblxuU2NoZW1hLnByb3RvdHlwZSA9IHtcbiAgbWVzc2FnZXM6IGZ1bmN0aW9uIG1lc3NhZ2VzKF9tZXNzYWdlcykge1xuICAgIGlmIChfbWVzc2FnZXMpIHtcbiAgICAgIHRoaXMuX21lc3NhZ2VzID0gZGVlcE1lcmdlKG5ld01lc3NhZ2VzKCksIF9tZXNzYWdlcyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9tZXNzYWdlcztcbiAgfSxcbiAgZGVmaW5lOiBmdW5jdGlvbiBkZWZpbmUocnVsZXMpIHtcbiAgICBpZiAoIXJ1bGVzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBjb25maWd1cmUgYSBzY2hlbWEgd2l0aCBubyBydWxlcycpO1xuICAgIH1cbiAgICBpZiAoKHR5cGVvZiBydWxlcyA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YocnVsZXMpKSAhPT0gJ29iamVjdCcgfHwgQXJyYXkuaXNBcnJheShydWxlcykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignUnVsZXMgbXVzdCBiZSBhbiBvYmplY3QnKTtcbiAgICB9XG4gICAgdGhpcy5ydWxlcyA9IHt9O1xuICAgIHZhciB6ID0gdm9pZCAwO1xuICAgIHZhciBpdGVtID0gdm9pZCAwO1xuICAgIGZvciAoeiBpbiBydWxlcykge1xuICAgICAgaWYgKHJ1bGVzLmhhc093blByb3BlcnR5KHopKSB7XG4gICAgICAgIGl0ZW0gPSBydWxlc1t6XTtcbiAgICAgICAgdGhpcy5ydWxlc1t6XSA9IEFycmF5LmlzQXJyYXkoaXRlbSkgPyBpdGVtIDogW2l0ZW1dO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgdmFsaWRhdGU6IGZ1bmN0aW9uIHZhbGlkYXRlKHNvdXJjZV8pIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdmFyIG8gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgIHZhciBvYyA9IGFyZ3VtZW50c1syXTtcblxuICAgIHZhciBzb3VyY2UgPSBzb3VyY2VfO1xuICAgIHZhciBvcHRpb25zID0gbztcbiAgICB2YXIgY2FsbGJhY2sgPSBvYztcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGNhbGxiYWNrID0gb3B0aW9ucztcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG4gICAgaWYgKCF0aGlzLnJ1bGVzIHx8IE9iamVjdC5rZXlzKHRoaXMucnVsZXMpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNvbXBsZXRlKHJlc3VsdHMpIHtcbiAgICAgIHZhciBpID0gdm9pZCAwO1xuICAgICAgdmFyIGZpZWxkID0gdm9pZCAwO1xuICAgICAgdmFyIGVycm9ycyA9IFtdO1xuICAgICAgdmFyIGZpZWxkcyA9IHt9O1xuXG4gICAgICBmdW5jdGlvbiBhZGQoZSkge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShlKSkge1xuICAgICAgICAgIGVycm9ycyA9IGVycm9ycy5jb25jYXQuYXBwbHkoZXJyb3JzLCBlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlcnJvcnMucHVzaChlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgcmVzdWx0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBhZGQocmVzdWx0c1tpXSk7XG4gICAgICB9XG4gICAgICBpZiAoIWVycm9ycy5sZW5ndGgpIHtcbiAgICAgICAgZXJyb3JzID0gbnVsbDtcbiAgICAgICAgZmllbGRzID0gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBlcnJvcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBmaWVsZCA9IGVycm9yc1tpXS5maWVsZDtcbiAgICAgICAgICBmaWVsZHNbZmllbGRdID0gZmllbGRzW2ZpZWxkXSB8fCBbXTtcbiAgICAgICAgICBmaWVsZHNbZmllbGRdLnB1c2goZXJyb3JzW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY2FsbGJhY2soZXJyb3JzLCBmaWVsZHMpO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLm1lc3NhZ2VzKSB7XG4gICAgICB2YXIgbWVzc2FnZXMgPSB0aGlzLm1lc3NhZ2VzKCk7XG4gICAgICBpZiAobWVzc2FnZXMgPT09IGRlZmF1bHRNZXNzYWdlcykge1xuICAgICAgICBtZXNzYWdlcyA9IG5ld01lc3NhZ2VzKCk7XG4gICAgICB9XG4gICAgICBkZWVwTWVyZ2UobWVzc2FnZXMsIG9wdGlvbnMubWVzc2FnZXMpO1xuICAgICAgb3B0aW9ucy5tZXNzYWdlcyA9IG1lc3NhZ2VzO1xuICAgIH0gZWxzZSB7XG4gICAgICBvcHRpb25zLm1lc3NhZ2VzID0gdGhpcy5tZXNzYWdlcygpO1xuICAgIH1cbiAgICB2YXIgYXJyID0gdm9pZCAwO1xuICAgIHZhciB2YWx1ZSA9IHZvaWQgMDtcbiAgICB2YXIgc2VyaWVzID0ge307XG4gICAgdmFyIGtleXMgPSBvcHRpb25zLmtleXMgfHwgT2JqZWN0LmtleXModGhpcy5ydWxlcyk7XG4gICAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uICh6KSB7XG4gICAgICBhcnIgPSBfdGhpcy5ydWxlc1t6XTtcbiAgICAgIHZhbHVlID0gc291cmNlW3pdO1xuICAgICAgYXJyLmZvckVhY2goZnVuY3Rpb24gKHIpIHtcbiAgICAgICAgdmFyIHJ1bGUgPSByO1xuICAgICAgICBpZiAodHlwZW9mIHJ1bGUudHJhbnNmb3JtID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgaWYgKHNvdXJjZSA9PT0gc291cmNlXykge1xuICAgICAgICAgICAgc291cmNlID0gX2V4dGVuZHMoe30sIHNvdXJjZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhbHVlID0gc291cmNlW3pdID0gcnVsZS50cmFuc2Zvcm0odmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgcnVsZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHJ1bGUgPSB7XG4gICAgICAgICAgICB2YWxpZGF0b3I6IHJ1bGVcbiAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJ1bGUgPSBfZXh0ZW5kcyh7fSwgcnVsZSk7XG4gICAgICAgIH1cbiAgICAgICAgcnVsZS52YWxpZGF0b3IgPSBfdGhpcy5nZXRWYWxpZGF0aW9uTWV0aG9kKHJ1bGUpO1xuICAgICAgICBydWxlLmZpZWxkID0gejtcbiAgICAgICAgcnVsZS5mdWxsRmllbGQgPSBydWxlLmZ1bGxGaWVsZCB8fCB6O1xuICAgICAgICBydWxlLnR5cGUgPSBfdGhpcy5nZXRUeXBlKHJ1bGUpO1xuICAgICAgICBpZiAoIXJ1bGUudmFsaWRhdG9yKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHNlcmllc1t6XSA9IHNlcmllc1t6XSB8fCBbXTtcbiAgICAgICAgc2VyaWVzW3pdLnB1c2goe1xuICAgICAgICAgIHJ1bGU6IHJ1bGUsXG4gICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgIHNvdXJjZTogc291cmNlLFxuICAgICAgICAgIGZpZWxkOiB6XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgdmFyIGVycm9yRmllbGRzID0ge307XG4gICAgYXN5bmNNYXAoc2VyaWVzLCBvcHRpb25zLCBmdW5jdGlvbiAoZGF0YSwgZG9JdCkge1xuICAgICAgdmFyIHJ1bGUgPSBkYXRhLnJ1bGU7XG4gICAgICB2YXIgZGVlcCA9IChydWxlLnR5cGUgPT09ICdvYmplY3QnIHx8IHJ1bGUudHlwZSA9PT0gJ2FycmF5JykgJiYgKF90eXBlb2YocnVsZS5maWVsZHMpID09PSAnb2JqZWN0JyB8fCBfdHlwZW9mKHJ1bGUuZGVmYXVsdEZpZWxkKSA9PT0gJ29iamVjdCcpO1xuICAgICAgZGVlcCA9IGRlZXAgJiYgKHJ1bGUucmVxdWlyZWQgfHwgIXJ1bGUucmVxdWlyZWQgJiYgZGF0YS52YWx1ZSk7XG4gICAgICBydWxlLmZpZWxkID0gZGF0YS5maWVsZDtcbiAgICAgIGZ1bmN0aW9uIGFkZEZ1bGxmaWVsZChrZXksIHNjaGVtYSkge1xuICAgICAgICByZXR1cm4gX2V4dGVuZHMoe30sIHNjaGVtYSwge1xuICAgICAgICAgIGZ1bGxGaWVsZDogcnVsZS5mdWxsRmllbGQgKyAnLicgKyBrZXlcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGNiKCkge1xuICAgICAgICB2YXIgZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogW107XG5cbiAgICAgICAgdmFyIGVycm9ycyA9IGU7XG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheShlcnJvcnMpKSB7XG4gICAgICAgICAgZXJyb3JzID0gW2Vycm9yc107XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVycm9ycy5sZW5ndGgpIHtcbiAgICAgICAgICB3YXJuaW5nKCdhc3luYy12YWxpZGF0b3I6JywgZXJyb3JzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXJyb3JzLmxlbmd0aCAmJiBydWxlLm1lc3NhZ2UpIHtcbiAgICAgICAgICBlcnJvcnMgPSBbXS5jb25jYXQocnVsZS5tZXNzYWdlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGVycm9ycyA9IGVycm9ycy5tYXAoY29tcGxlbWVudEVycm9yKHJ1bGUpKTtcblxuICAgICAgICBpZiAob3B0aW9ucy5maXJzdCAmJiBlcnJvcnMubGVuZ3RoKSB7XG4gICAgICAgICAgZXJyb3JGaWVsZHNbcnVsZS5maWVsZF0gPSAxO1xuICAgICAgICAgIHJldHVybiBkb0l0KGVycm9ycyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFkZWVwKSB7XG4gICAgICAgICAgZG9JdChlcnJvcnMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGlmIHJ1bGUgaXMgcmVxdWlyZWQgYnV0IHRoZSB0YXJnZXQgb2JqZWN0XG4gICAgICAgICAgLy8gZG9lcyBub3QgZXhpc3QgZmFpbCBhdCB0aGUgcnVsZSBsZXZlbCBhbmQgZG9uJ3RcbiAgICAgICAgICAvLyBnbyBkZWVwZXJcbiAgICAgICAgICBpZiAocnVsZS5yZXF1aXJlZCAmJiAhZGF0YS52YWx1ZSkge1xuICAgICAgICAgICAgaWYgKHJ1bGUubWVzc2FnZSkge1xuICAgICAgICAgICAgICBlcnJvcnMgPSBbXS5jb25jYXQocnVsZS5tZXNzYWdlKS5tYXAoY29tcGxlbWVudEVycm9yKHJ1bGUpKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAob3B0aW9ucy5lcnJvcikge1xuICAgICAgICAgICAgICBlcnJvcnMgPSBbb3B0aW9ucy5lcnJvcihydWxlLCBmb3JtYXQob3B0aW9ucy5tZXNzYWdlcy5yZXF1aXJlZCwgcnVsZS5maWVsZCkpXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGVycm9ycyA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGRvSXQoZXJyb3JzKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgZmllbGRzU2NoZW1hID0ge307XG4gICAgICAgICAgaWYgKHJ1bGUuZGVmYXVsdEZpZWxkKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBrIGluIGRhdGEudmFsdWUpIHtcbiAgICAgICAgICAgICAgaWYgKGRhdGEudmFsdWUuaGFzT3duUHJvcGVydHkoaykpIHtcbiAgICAgICAgICAgICAgICBmaWVsZHNTY2hlbWFba10gPSBydWxlLmRlZmF1bHRGaWVsZDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBmaWVsZHNTY2hlbWEgPSBfZXh0ZW5kcyh7fSwgZmllbGRzU2NoZW1hLCBkYXRhLnJ1bGUuZmllbGRzKTtcbiAgICAgICAgICBmb3IgKHZhciBmIGluIGZpZWxkc1NjaGVtYSkge1xuICAgICAgICAgICAgaWYgKGZpZWxkc1NjaGVtYS5oYXNPd25Qcm9wZXJ0eShmKSkge1xuICAgICAgICAgICAgICB2YXIgZmllbGRTY2hlbWEgPSBBcnJheS5pc0FycmF5KGZpZWxkc1NjaGVtYVtmXSkgPyBmaWVsZHNTY2hlbWFbZl0gOiBbZmllbGRzU2NoZW1hW2ZdXTtcbiAgICAgICAgICAgICAgZmllbGRzU2NoZW1hW2ZdID0gZmllbGRTY2hlbWEubWFwKGFkZEZ1bGxmaWVsZC5iaW5kKG51bGwsIGYpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIHNjaGVtYSA9IG5ldyBTY2hlbWEoZmllbGRzU2NoZW1hKTtcbiAgICAgICAgICBzY2hlbWEubWVzc2FnZXMob3B0aW9ucy5tZXNzYWdlcyk7XG4gICAgICAgICAgaWYgKGRhdGEucnVsZS5vcHRpb25zKSB7XG4gICAgICAgICAgICBkYXRhLnJ1bGUub3B0aW9ucy5tZXNzYWdlcyA9IG9wdGlvbnMubWVzc2FnZXM7XG4gICAgICAgICAgICBkYXRhLnJ1bGUub3B0aW9ucy5lcnJvciA9IG9wdGlvbnMuZXJyb3I7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNjaGVtYS52YWxpZGF0ZShkYXRhLnZhbHVlLCBkYXRhLnJ1bGUub3B0aW9ucyB8fCBvcHRpb25zLCBmdW5jdGlvbiAoZXJycykge1xuICAgICAgICAgICAgZG9JdChlcnJzICYmIGVycnMubGVuZ3RoID8gZXJyb3JzLmNvbmNhdChlcnJzKSA6IGVycnMpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciByZXMgPSBydWxlLnZhbGlkYXRvcihydWxlLCBkYXRhLnZhbHVlLCBjYiwgZGF0YS5zb3VyY2UsIG9wdGlvbnMpO1xuICAgICAgaWYgKHJlcyAmJiByZXMudGhlbikge1xuICAgICAgICByZXMudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIGNiKCk7XG4gICAgICAgIH0sIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgcmV0dXJuIGNiKGUpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LCBmdW5jdGlvbiAocmVzdWx0cykge1xuICAgICAgY29tcGxldGUocmVzdWx0cyk7XG4gICAgfSk7XG4gIH0sXG4gIGdldFR5cGU6IGZ1bmN0aW9uIGdldFR5cGUocnVsZSkge1xuICAgIGlmIChydWxlLnR5cGUgPT09IHVuZGVmaW5lZCAmJiBydWxlLnBhdHRlcm4gaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICAgIHJ1bGUudHlwZSA9ICdwYXR0ZXJuJztcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBydWxlLnZhbGlkYXRvciAhPT0gJ2Z1bmN0aW9uJyAmJiBydWxlLnR5cGUgJiYgIXZhbGlkYXRvcnMuaGFzT3duUHJvcGVydHkocnVsZS50eXBlKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGZvcm1hdCgnVW5rbm93biBydWxlIHR5cGUgJXMnLCBydWxlLnR5cGUpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJ1bGUudHlwZSB8fCAnc3RyaW5nJztcbiAgfSxcbiAgZ2V0VmFsaWRhdGlvbk1ldGhvZDogZnVuY3Rpb24gZ2V0VmFsaWRhdGlvbk1ldGhvZChydWxlKSB7XG4gICAgaWYgKHR5cGVvZiBydWxlLnZhbGlkYXRvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIHJ1bGUudmFsaWRhdG9yO1xuICAgIH1cbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHJ1bGUpO1xuICAgIHZhciBtZXNzYWdlSW5kZXggPSBrZXlzLmluZGV4T2YoJ21lc3NhZ2UnKTtcbiAgICBpZiAobWVzc2FnZUluZGV4ICE9PSAtMSkge1xuICAgICAga2V5cy5zcGxpY2UobWVzc2FnZUluZGV4LCAxKTtcbiAgICB9XG4gICAgaWYgKGtleXMubGVuZ3RoID09PSAxICYmIGtleXNbMF0gPT09ICdyZXF1aXJlZCcpIHtcbiAgICAgIHJldHVybiB2YWxpZGF0b3JzLnJlcXVpcmVkO1xuICAgIH1cbiAgICByZXR1cm4gdmFsaWRhdG9yc1t0aGlzLmdldFR5cGUocnVsZSldIHx8IGZhbHNlO1xuICB9XG59O1xuXG5TY2hlbWEucmVnaXN0ZXIgPSBmdW5jdGlvbiByZWdpc3Rlcih0eXBlLCB2YWxpZGF0b3IpIHtcbiAgaWYgKHR5cGVvZiB2YWxpZGF0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCByZWdpc3RlciBhIHZhbGlkYXRvciBieSB0eXBlLCB2YWxpZGF0b3IgaXMgbm90IGEgZnVuY3Rpb24nKTtcbiAgfVxuICB2YWxpZGF0b3JzW3R5cGVdID0gdmFsaWRhdG9yO1xufTtcblxuU2NoZW1hLm1lc3NhZ2VzID0gZGVmYXVsdE1lc3NhZ2VzO1xuXG5leHBvcnQgZGVmYXVsdCBTY2hlbWE7Il0sInNvdXJjZVJvb3QiOiIifQ==